nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    647.653      0.500000    
Tfreq:   57
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    647.653      0.500000    
Tfreq:   57
 Estimating   57 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       2158.84         73.66          1.32         38.80          0.15          0.04        113.98
iter,obj,time:      3       2153.25         68.31          1.19         39.09          0.34          0.05        108.98
iter,obj,time:      4       2154.33         68.32          1.20         39.27          0.23          0.05        109.07
iter,obj,time:      5       2485.36         68.43          1.26         39.19          0.24          0.05        109.16
iter,obj,time:      6       1979.33         68.62          1.28         39.07          0.21          0.05        109.23
iter,obj,time:      7       2680.66         68.60          1.26         39.01          0.00          0.05        108.92
iter,obj,time:      8       2418.74         68.28          1.20         39.39          0.24          0.05        109.16
iter,obj,time:      9       2175.09         68.50          1.23         39.05          0.23          0.05        109.06
iter,obj,time:     10       2319.38         68.43          1.18         39.14          0.32          0.05        109.12
iter,obj,time:     11       2092.46         68.45          1.25         39.10          0.23          0.05        109.09
iter,obj,time:     12       2131.53         68.35          1.21         39.34          0.13          0.05        109.09
iter,obj,time:     13       2296.22         68.61          1.27         39.00          0.16          0.05        109.07
iter,obj,time:     14       2399.91         68.48          1.29         39.33          0.00          0.05        109.14
iter,obj,time:     15       2200.82         68.59          1.20         38.88          0.33          0.05        109.04
iter,obj,time:     16       2173.41         68.58          1.24         38.90          0.35          0.05        109.12
iter,obj,time:     17       2238.70         68.43          1.23         39.17          0.24          0.05        109.12
iter,obj,time:     18       2182.87         68.54          1.19         39.11          0.24          0.05        109.14
iter,obj,time:     19       2157.09         68.48          1.18         38.98          0.35          0.05        109.03
iter,obj,time:     20       2157.22         68.61          1.19         38.79          0.39          0.05        109.04
iter,obj,time:     21       2157.61         68.46          1.16         39.09          0.45          0.05        109.20
iter,obj,time:     22       2158.84         68.48          1.20         38.92          0.40          0.05        109.05
iter,obj,time:     23       3686.49         68.61          1.19         39.38          0.30          0.05        109.53
iter,obj,time:     24       3107.81         68.44          1.18         39.00          0.46          0.05        109.13
iter,obj,time:     25       3822.73         68.14          1.18         39.72          0.03          0.05        109.12
iter,obj,time:     26       3294.48         68.43          1.23         39.04          0.20          0.05        108.95
iter,obj,time:     27       4061.54         68.70          1.30         39.01          0.00          0.05        109.05
iter,obj,time:     28       4028.80         68.29          1.20         39.08          0.42          0.05        109.04
iter,obj,time:     29       4429.77         68.55          1.23         39.04          0.19          0.05        109.06
iter,obj,time:     30       3484.41         68.32          1.18         39.50          0.00          0.05        109.06
iter,obj,time:     31       2161.58         68.47          1.26         38.96          0.46          0.05        109.21
iter,obj,time:     32       2525.36         68.48          1.21         39.22          0.19          0.05        109.16
iter,obj,time:     33       3064.07         68.29          1.20         39.51          0.17          0.05        109.21
iter,obj,time:     34       2488.88         68.45          1.28         39.05          0.17          0.05        109.01
iter,obj,time:     35       3491.15         68.21          1.24         39.13          0.34          0.05        108.97
iter,obj,time:     36       2947.65         68.49          1.29         38.83          0.35          0.05        109.01
iter,obj,time:     37       2818.50         68.16          1.18         39.16          0.39          0.05        108.95
iter,obj,time:     38       3621.90         68.43          1.28         38.99          0.22          0.05        108.97
iter,obj,time:     39       3012.04         68.55          1.26         39.00          0.11          0.05        108.96
iter,obj,time:     40       2515.11         68.43          1.25         39.26          0.15          0.05        109.13
iter,obj,time:     41       2158.26         68.42          1.26         39.04          0.31          0.05        109.08
iter,obj,time:     42       2193.99         68.45          1.23         39.16          0.05          0.05        108.95
iter,obj,time:     43       2578.06         68.38          1.24         39.39          0.24          0.05        109.30
iter,obj,time:     44       2871.85         68.47          1.27         38.98          0.34          0.05        109.11
iter,obj,time:     45       2769.52         67.98          1.08         39.47          0.50          0.05        109.08
iter,obj,time:     46       2167.72         68.34          1.23         39.66          0.08          0.05        109.36
iter,obj,time:     47       1852.82         68.61          1.25         39.14          0.09          0.05        109.14
iter,obj,time:     48       2336.44         68.61          1.23         39.00          0.18          0.05        109.07
iter,obj,time:     49       2154.48         68.62          1.27         38.94          0.23          0.05        109.11
iter,obj,time:     50       2170.43         68.34          1.25         39.19          0.14          0.05        108.97
iter,obj,time:     51       2415.49         68.33          1.23         39.10          0.28          0.05        108.99
iter,obj,time:     52       2471.52         68.45          1.22         39.11          0.23          0.05        109.05
iter,obj,time:     53       2163.74         68.41          1.23         39.17          0.20          0.05        109.06
iter,obj,time:     54       2297.90         68.50          1.19         39.02          0.32          0.05        109.08
iter,obj,time:     55       2975.45         68.54          1.20         39.09          0.21          0.04        109.08
iter,obj,time:     56       2263.60         68.59          1.16         38.89          0.41          0.05        109.09
iter,obj,time:     57       2191.49         68.45          1.20         39.20          0.28          0.05        109.18
iter,obj,time:     58       2372.64         68.50          1.24         39.02          0.26          0.05        109.07
iter,obj,time:     59       2351.33         68.57          1.21         38.73          0.20          0.05        108.76

    1    2158.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    2    2153.3        1.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    3    2154.3        3.658     -4.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    4    2485.4        3.658     -2.553      1.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    5    1979.3        3.658     -2.553      3.140     -102.6     -1.191    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    6    2680.7        3.658     -2.553      3.140     -102.6     0.8093    
                      -1.554      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    7    2418.7        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456    -0.7832     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    8    2175.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      3.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

    9    2319.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     -1.210    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   10    2092.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                      0.9640     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   11    2131.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -4.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   12    2296.2        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540     0.1050E+05  7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   13    2399.9        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -1.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   14    2200.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -1.500      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   15    2173.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      1355.    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   16    2238.7        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.000     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   17    2182.9        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500    -0.3620     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   18    2157.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -1.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   19    2157.2        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -2.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   20    2157.6        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      12.83    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   21    2158.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -7.731     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   22    3686.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6364     0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   23    3107.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.7598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   24    3822.7        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6663     0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   25    3294.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.6791    

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   26    4061.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.7297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   27    4028.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.8147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   28    4429.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.7571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   29    3484.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.6784    



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   30    2161.6        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.4203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   31    2525.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203     0.9592E-02  0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   32    3064.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.7336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   33    2488.9        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.7108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   34    3491.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.8014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   35    2947.6        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.8358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   36    2818.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.7443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   37    3621.9        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443      1.014    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   38    3012.0        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.7728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   39    2515.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.6150    -0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   40    2158.3        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.1756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   41    2194.0        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.166      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   42    2578.1        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239    -0.6590     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   43    2871.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.800      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   44    2769.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      9.000    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   45    2167.7        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1922E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   46    1852.8        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -5.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   47    2336.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                      0.7897     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   48    2154.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -1.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   49    2170.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      9.200      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   50    2415.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.600    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   51    2471.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000      1.497    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   52    2163.7        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969     0.8690      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   53    2297.9        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      9.300      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   54    2975.4        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.600    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   55    2263.6        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000     0.7129    -0.2847      9.700    

                       9.000    -0.1891E+05 -6.000    

   56    2191.5        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871     0.7153      9.700    

                       9.000    -0.1891E+05 -6.000    

   57    2372.6        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      10.20    

                       9.000    -0.1891E+05 -6.000    

   58    2351.3        3.658     -2.553      3.140     -102.6     0.8093    
                      0.4456      1.217     -99.70      5.097     0.7896    

                       2.964     -2.429      1.540      7000.      7000.    

                      -2.079      0.000      0.000      0.000     -1.221    



                      -2.000      0.000      0.000      7000.      354.6    

                      -1.500     -5.362     -6.891     -7.766      7.831    

                      -12.73     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.3638E-01 0.1598     0.6634E-01 0.7909E-01

                     -0.2486     0.1297     0.2147     0.1571     0.7835E-01



                     -0.9203    -0.4904      0.000     0.1336     0.1108    

                      0.2014     0.2358    -0.7116     0.1443     0.4145    

                      0.1728     0.1497E-01-0.4756     -1.466      7000.    



                      -1.239     -1.159     -2.142     -1.982    -0.3807    

                     -0.3252      9.300      8.500    -0.1672E+05 -6.000    

                     -0.2103     -2.349      8.700      9.100    -0.1969E+05



                      -6.000     0.4969    -0.1310      8.800      9.100    

                     -0.1944E+05 -6.000    -0.2871    -0.2847      9.700    

                       9.500    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          58          58

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        1
neval is:       58


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       58     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -955.881       955.881       2158.84       3114.72    
   2  0.709707     -0.342904      -222.083       222.083       2153.25       2375.33    
   3  0.151889      -1.88460      -1220.57       1220.57       2154.33       3374.90    
   4  0.456170E-01  -3.08747      -1999.61       1999.61       2485.36       4484.97    
   5  0.882557     -0.124932      -80.9124       80.9124       1979.33       2060.24    
   6  0.711292     -0.340672      -220.637       220.637       2680.66       2901.30    
   7  0.241669      -1.42019      -919.789       919.789       2418.74       3338.53    
   8  0.682871     -0.381450      -247.047       247.047       2175.09       2422.14    
   9  0.500657     -0.691834      -448.069       448.069       2319.38       2767.45    
  10  0.494633     -0.703939      -455.908       455.908       2092.46       2548.37    
  11  0.437126     -0.827535      -535.956       535.956       2131.53       2667.49    
  12  0.462981     -0.770069      -498.738       498.738       2296.22       2794.96    
  13  0.988878     -0.111840E-01  -7.24335       7.24335       2399.91       2407.15    
  14  0.878158     -0.129929      -84.1490       84.1490       2200.82       2284.97    
  15  0.825605     -0.191638      -124.115       124.115       2173.41       2297.53    
  16  0.966665     -0.339033E-01  -21.9576       21.9576       2238.70       2260.66    
  17  0.340930      -1.07608      -696.925       696.925       2182.87       2879.80    
  18  0.288920      -1.24161      -804.131       804.131       2157.09       2961.22    
  19  0.442843     -0.814539      -527.539       527.539       2157.22       2684.76    
  20  0.878635     -0.129386      -83.7970       83.7970       2157.61       2241.41    
  21  0.198777E-01  -3.91816      -2537.61       2537.61       2158.84       4696.45    
  22  0.315829      -1.15255      -746.455       746.455       3686.49       4432.95    
  23  0.208690      -1.56690      -1014.81       1014.81       3107.81       4122.62    
  24  0.849393     -0.163234      -105.719       105.719       3822.73       3928.45    
  25  0.945818     -0.557056E-01  -36.0779       36.0779       3294.48       3330.55    
  26  0.567839     -0.565917      -366.518       366.518       4061.54       4428.06    
  27  0.718388     -0.330745      -214.208       214.208       4028.80       4243.00    
  28  0.115406      -2.15930      -1398.48       1398.48       4429.77       5828.24    
  29  0.659869E-01  -2.71830      -1760.51       1760.51       3484.41       5244.93    
  30  0.171393      -1.76380      -1142.33       1142.33       2161.58       3303.91    
  31  0.161953      -1.82045      -1179.02       1179.02       2525.36       3704.38    
  32  0.455406     -0.786566      -509.422       509.422       3064.07       3573.49    
  33  0.788693     -0.237378      -153.738       153.738       2488.88       2642.62    
  34  0.157754      -1.84672      -1196.03       1196.03       3491.15       4687.18    
  35  0.126279      -2.06926      -1340.16       1340.16       2947.65       4287.81    
  36  0.646962     -0.435467      -282.032       282.032       2818.50       3100.53    
  37  0.730769     -0.313658      -203.141       203.141       3621.90       3825.04    
  38  0.443446E-01  -3.11577      -2017.94       2017.94       3012.04       5029.97    
  39  0.219048      -1.51847      -983.439       983.439       2515.11       3498.55    
  40  0.311223E-01  -3.46983      -2247.25       2247.25       2158.26       4405.51    
  41  0.864417     -0.145700      -94.3632       94.3632       2193.99       2288.35    
  42  0.372606     -0.987233      -639.385       639.385       2578.06       3217.45    
  43  0.599250E-01  -2.81466      -1822.92       1822.92       2871.85       4694.77    
  44  0.250528      -1.38418      -896.470       896.470       2769.52       3665.99    
  45  0.404968E-01  -3.20653      -2076.72       2076.72       2167.72       4244.45    
  46  0.792822     -0.232156      -150.357       150.357       1852.82       2003.18    
  47  0.826691     -0.190324      -123.264       123.264       2336.44       2459.70    
  48  0.258424      -1.35316      -876.375       876.375       2154.48       3030.86    
  49  0.713620     -0.337405      -218.522       218.522       2170.43       2388.95    
  50  0.936186     -0.659413E-01  -42.7071       42.7071       2415.49       2458.20    
  51  0.655367E-01  -2.72514      -1764.95       1764.95       2471.52       4236.47    
  52  0.178790      -1.72154      -1114.96       1114.96       2163.74       3278.70    
  53  0.110644E-01  -4.50403      -2917.05       2917.05       2297.90       5214.94    
  54  0.459577     -0.777448      -503.517       503.517       2975.45       3478.97    
  55  0.210706      -1.55729      -1008.59       1008.59       2263.60       3272.19    
  56  0.667378     -0.404399      -261.910       261.910       2191.49       2453.40    
  57  0.787749     -0.238575      -154.514       154.514       2372.64       2527.15    
  58  0.774339E-01  -2.55833      -1656.91       1656.91       2351.33       4008.24    
loop,thermsimp(1:2)        1   955.881       222.083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     60       2584.06         68.41          1.17         39.53          0.53          0.05        109.69
Just calling func    0   0        109.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2584.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        1
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        2
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       59     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -674.883       674.883       1852.82       2527.70    
   2  0.440787     -0.819193      -530.553       530.553       1979.33       2509.88    
   3  0.685789     -0.377185      -244.285       244.285       2157.61       2401.89    
   4  0.673104     -0.395856      -256.377       256.377       2238.70       2495.08    
   5  0.655536     -0.422301      -273.505       273.505       2200.82       2474.32    
   6  0.422838     -0.860766      -557.478       557.478       2193.99       2751.47    
   7  0.300870      -1.20108      -777.882       777.882       2173.41       2951.29    
   8  0.776987     -0.252331      -163.423       163.423       2153.25       2316.67    
   9  0.170551      -1.76872      -1145.52       1145.52       2170.43       3315.95    
  10  0.587497     -0.531884      -344.477       344.477       2399.91       2744.39    
  11  0.250425      -1.38459      -896.737       896.737       2175.09       3071.83    
  12  0.776362E-01  -2.55572      -1655.22       1655.22       2191.49       3846.71    
  13  0.766647     -0.265729      -172.100       172.100       2415.49       2587.59    
  14  0.480193     -0.733568      -475.098       475.098       2336.44       2811.53    
  15  0.434643     -0.833231      -539.645       539.645       2372.64       2912.28    
  16  0.815924E-01  -2.50602      -1623.03       1623.03       2092.46       3715.49    
  17  0.724257E-01  -2.62519      -1700.22       1700.22       2488.88       4189.09    
  18  0.573795     -0.555483      -359.760       359.760       2131.53       2491.29    
  19  0.196096      -1.62915      -1055.12       1055.12       2157.22       3212.34    
  20  0.240673      -1.42432      -922.462       922.462       2319.38       3241.84    
  21  0.194228      -1.63872      -1061.32       1061.32       2296.22       3357.55    
  22  0.236387      -1.44229      -934.102       934.102       2182.87       3116.98    
  23  0.261662      -1.34070      -868.309       868.309       2680.66       3548.97    
  24  0.146321      -1.92195      -1244.76       1244.76       2157.09       3401.85    
  25  0.169637      -1.77410      -1149.00       1149.00       2154.48       3303.48    
  26  0.886717     -0.120229      -77.8668       77.8668       2818.50       2896.37    
  27  0.253412      -1.37274      -889.059       889.059       2158.84       3047.90    
  28  0.470820     -0.753279      -487.864       487.864       2578.06       3065.92    
  29  0.329871      -1.10905      -718.283       718.283       2263.60       2981.89    
  30  0.726784     -0.319126      -206.683       206.683       2163.74       2370.42    
  31  0.612351     -0.490450      -317.642       317.642       2161.58       2479.22    
  32  0.146573      -1.92023      -1243.64       1243.64       3294.48       4538.12    
  33  0.812633     -0.207476      -134.372       134.372       2418.74       2553.11    
  34  0.486789     -0.719925      -466.262       466.262       2154.33       2620.59    
  35  0.653508     -0.425400      -275.512       275.512       2975.45       3250.96    
  36  0.180127      -1.71409      -1110.14       1110.14       2515.11       3625.25    
  37  0.155218      -1.86292      -1206.53       1206.53       3064.07       4270.60    
  38  0.830615     -0.185589      -120.197       120.197       2769.52       2889.72    
  39  0.728345     -0.316980      -205.293       205.293       2525.36       2730.66    
  40  0.262318      -1.33820      -866.688       866.688       3621.90       4488.59    
  41  0.234222      -1.45148      -940.058       940.058       3822.73       4762.79    
  42  0.250201      -1.38549      -897.319       897.319       2351.33       3248.65    
  43  0.898433     -0.107103      -69.3659       69.3659       3107.81       3177.18    
  44  0.580277     -0.544250      -352.486       352.486       2471.52       2824.01    
  45  0.823617     -0.194050      -125.677       125.677       4028.80       4154.47    
  46  0.820676     -0.197627      -127.994       127.994       2167.72       2295.72    
  47  0.502494     -0.688171      -445.696       445.696       2947.65       3393.34    
  48  0.751016     -0.286329      -185.442       185.442       2158.26       2343.70    
  49  0.360461      -1.02037      -660.846       660.846       4061.54       4722.39    
  50  0.948712     -0.526497E-01  -34.0988       34.0988       3686.49       3720.59    
  51  0.452918     -0.792045      -512.971       512.971       2485.36       2998.33    
  52  0.182886      -1.69889      -1100.29       1100.29       3491.15       4591.44    
  53  0.986780     -0.133085E-01  -8.61931       8.61931       2871.85       2880.47    
  54  0.720276     -0.328121      -212.509       212.509       2158.84       2371.35    
  55  0.999574     -0.426396E-03 -0.276157      0.276157       3012.04       3012.32    
  56  0.573447     -0.556089      -360.153       360.153       2297.90       2658.05    
  57  0.441160E-01  -3.12093      -2021.28       2021.28       3484.41       5505.69    
  58  0.596470     -0.516726      -334.659       334.659       2584.06       2918.71    
loop,thermsimp(1:2)        2   674.883       530.553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61       2539.20         68.46          1.21         38.99          0.47          0.05        109.19
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     62       4752.30         68.43          1.20         39.05          0.21          0.05        108.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    2539.2        3.585     -2.625      3.067     -102.6     0.7367    
                      0.3730      1.144     -99.70      5.024     0.7169    

                       2.891     -2.502      1.540      7127.      7000.    

                      -2.043      0.000      0.000      0.000     -1.221    



                      -1.982      0.000      0.000      7000.      390.9    

                      -1.482     -5.180     -6.710     -7.585      8.012    

                      -12.55     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5817E-01 0.1816     0.8813E-01 0.1009    

                     -0.2486     0.1515     0.2364     0.1361    -0.5209    



                     -0.9021    -0.4722      0.000     0.1554     0.1326    

                      0.2232     0.2576    -0.7116     0.1661     0.4363    

                      0.1946     0.3676E-01-0.4647     -1.455      7000.    



                      -1.239     -1.141     -2.142     -1.982    -0.3807    

                     -0.3252      9.318      8.518    -0.1681E+05 -5.964    

                     -0.1739     -2.313      8.718      9.118    -0.1969E+05



                      -6.000     0.5332    -0.9471E-01  8.818      9.118    

                     -0.1944E+05 -6.000    -0.2508    -0.2484      9.718    

                       9.018    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2539.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        2
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        3
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       61     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -1155.67       1155.67       2167.72       3323.40    
   2  0.274399      -1.29317      -837.527       837.527       2153.25       2990.78    
   3  0.597410E-01  -2.81774      -1824.92       1824.92       2158.26       3983.18    
   4  0.283115E-01  -3.56449      -2308.55       2308.55       2163.74       4472.29    
   5  0.901069     -0.104174      -67.4686       67.4686       2158.84       2226.31    
   6  0.717939     -0.331371      -214.614       214.614       2157.61       2372.22    
   7  0.294866      -1.22123      -790.936       790.936       2200.82       2991.75    
   8  0.935651     -0.665127E-01  -43.0772       43.0772       2161.58       2204.65    
   9  0.314362      -1.15721      -749.471       749.471       2131.53       2881.00    
  10  0.807729     -0.213529      -138.293       138.293       2238.70       2377.00    
  11  0.757191     -0.278140      -180.138       180.138       1979.33       2159.47    
  12  0.508654     -0.675987      -437.805       437.805       1852.82       2290.63    
  13  0.722060     -0.325647      -210.906       210.906       2418.74       2629.64    
  14  0.424032     -0.857947      -555.652       555.652       2415.49       2971.15    
  15  0.786154     -0.240602      -155.827       155.827       2154.33       2310.15    
  16  0.399894     -0.916557      -593.611       593.611       2297.90       2891.51    
  17  0.757416     -0.277843      -179.946       179.946       2525.36       2705.31    
  18  0.637270     -0.450563      -291.808       291.808       2399.91       2691.72    
  19  0.586055     -0.534342      -346.068       346.068       2193.99       2540.06    
  20  0.821724     -0.196351      -127.167       127.167       2336.44       2463.60    
  21  0.921558     -0.816897E-01  -52.9066       52.9066       2471.52       2524.43    
  22  0.985596     -0.145083E-01  -9.39637       9.39637       2871.85       2881.24    
  23  0.257194      -1.35793      -879.465       879.465       2769.52       3648.98    
  24  0.921438E-01  -2.38440      -1544.27       1544.27       2818.50       4362.77    
  25  0.114653      -2.16584      -1402.72       1402.72       2372.64       3775.35    
  26  0.379827     -0.968040      -626.954       626.954       2584.06       3211.01    
  27  0.541451     -0.613503      -397.337       397.337       2173.41       2570.75    
  28  0.544274     -0.608302      -393.969       393.969       2263.60       2657.57    
  29  0.934365     -0.678883E-01  -43.9681       43.9681       2485.36       2529.33    
  30  0.266419E-01  -3.62527      -2347.92       2347.92       3012.04       5359.96    
  31  0.919572     -0.838466E-01  -54.3035       54.3035       2158.84       2213.15    
  32  0.864639     -0.145444      -94.1971       94.1971       2578.06       2672.26    
  33  0.341156      -1.07542      -696.497       696.497       2175.09       2871.59    
  34  0.803175     -0.219182      -141.954       141.954       2182.87       2324.83    
  35  0.699424     -0.357498      -231.535       231.535       3107.81       3339.35    
  36  0.223868E-01  -3.79928      -2460.62       2460.62       2157.22       4617.84    
  37  0.605689     -0.501389      -324.726       324.726       2319.38       2644.11    
  38  0.312349      -1.16363      -753.631       753.631       2351.33       3104.96    
  39  0.437501     -0.826675      -535.399       535.399       2975.45       3510.85    
  40  0.303330      -1.19293      -772.607       772.607       2154.48       2927.09    
  41  0.129735      -2.04226      -1322.68       1322.68       2170.43       3493.10    
  42  0.954352     -0.467224E-01  -30.2599       30.2599       2296.22       2326.48    
  43  0.519807     -0.654297      -423.758       423.758       2947.65       3371.40    
  44  0.950560     -0.507036E-01  -32.8383       32.8383       2157.09       2189.93    
  45  0.443941     -0.812064      -525.936       525.936       2680.66       3206.60    
  46  0.911446     -0.927229E-01  -60.0523       60.0523       2515.11       2575.16    
  47  0.782475     -0.245293      -158.865       158.865       2092.46       2251.33    
  48  0.412534     -0.885438      -573.457       573.457       3686.49       4259.95    
  49  0.843850     -0.169780      -109.959       109.959       2191.49       2301.45    
  50  0.149432      -1.90091      -1231.13       1231.13       4028.80       5259.93    
  51  0.292747      -1.22845      -795.608       795.608       2488.88       3284.49    
  52  0.579908E-02  -5.15006      -3335.45       3335.45       3064.07       6399.52    
  53  0.164431      -1.80526      -1169.18       1169.18       3621.90       4791.09    
  54  0.963795     -0.368765E-01  -23.8832       23.8832       3294.48       3318.36    
  55  0.536638     -0.622432      -403.120       403.120       3491.15       3894.27    
  56  0.231620      -1.46266      -947.295       947.295       4061.54       5008.84    
  57  0.452632E-01  -3.09526      -2004.66       2004.66       3822.73       5827.38    
  58  0.241294      -1.42174      -920.795       920.795       2539.20       3459.99    
loop,thermsimp(1:2)        3   1155.67       837.527    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63       2358.01         68.35          1.23         39.15          0.36          0.05        109.14
Just calling func    0   0        109.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64       4137.59         68.52          1.17         39.38          0.34          0.05        109.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2358.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        3
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        4
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       63     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -80.4139       80.4139       1979.33       2059.75    
   2  0.114178      -2.16999      -1405.40       1405.40       2157.09       3562.49    
   3  0.217017      -1.52778      -989.471       989.471       2161.58       3151.05    
   4  0.138317      -1.97821      -1281.19       1281.19       2158.84       3440.04    
   5  0.832728     -0.183048      -118.552       118.552       2158.84       2277.39    
   6  0.390825     -0.939496      -608.468       608.468       2092.46       2700.93    
   7  0.283633      -1.26007      -816.092       816.092       1852.82       2668.91    
   8  0.725809     -0.320468      -207.552       207.552       2191.49       2399.04    
   9  0.506121     -0.680979      -441.038       441.038       2154.33       2595.37    
  10  0.216234      -1.53139      -991.812       991.812       2182.87       3174.69    
  11  0.637942     -0.449509      -291.126       291.126       2296.22       2587.35    
  12  0.536707     -0.622302      -403.036       403.036       2157.61       2560.65    
  13  0.231844      -1.46169      -946.669       946.669       2238.70       3185.37    
  14  0.491379     -0.710540      -460.184       460.184       2336.44       2796.62    
  15  0.825774     -0.191434      -123.983       123.983       2471.52       2595.50    
  16  0.671593     -0.398102      -257.832       257.832       2485.36       2743.19    
  17  0.549103     -0.599470      -388.248       388.248       2193.99       2582.24    
  18  0.659287     -0.416597      -269.810       269.810       2173.41       2443.22    
  19  0.205012      -1.58469      -1026.33       1026.33       2515.11       3541.44    
  20  0.400541E-02  -5.52011      -3575.12       3575.12       2418.74       5993.85    
  21  0.750831     -0.286575      -185.601       185.601       2319.38       2504.98    
  22  0.619921     -0.478162      -309.683       309.683       2263.60       2573.29    
  23  0.435226     -0.831889      -538.775       538.775       2578.06       3116.84    
  24  0.460974     -0.774414      -501.552       501.552       2399.91       2901.46    
  25  0.891582E-01  -2.41734      -1565.60       1565.60       2525.36       4090.96    
  26  0.589618E-01  -2.83087      -1833.42       1833.42       2175.09       4008.51    
  27  0.541391     -0.613613      -397.409       397.409       2131.53       2528.94    
  28  0.545108E-01  -2.90936      -1884.25       1884.25       2871.85       4756.10    
  29  0.744722     -0.294744      -190.892       190.892       2297.90       2488.79    
  30  0.712477     -0.339008      -219.559       219.559       2154.48       2374.04    
  31  0.563836     -0.572992      -371.100       371.100       2415.49       2786.59    
  32  0.161455      -1.82353      -1181.01       1181.01       2153.25       3334.26    
  33  0.640738     -0.445135      -288.293       288.293       2200.82       2489.11    
  34  0.157494      -1.84837      -1197.10       1197.10       2351.33       3548.43    
  35  0.695323     -0.363378      -235.343       235.343       2680.66       2916.01    
  36  0.792798     -0.232186      -150.376       150.376       2584.06       2734.43    
  37  0.940634     -0.612017E-01  -39.6375       39.6375       2488.88       2528.52    
  38  0.750008     -0.287672      -186.312       186.312       3294.48       3480.79    
  39  0.298939E-01  -3.51010      -2273.33       2273.33       2167.72       4441.05    
  40  0.633510     -0.456480      -295.640       295.640       3107.81       3403.45    
  41  0.465723     -0.764164      -494.913       494.913       2947.65       3442.56    
  42  0.916259     -0.874560E-01  -56.6412       56.6412       2539.20       2595.84    
  43  0.451376     -0.795456      -515.179       515.179       2170.43       2685.61    
  44  0.414090     -0.881672      -571.018       571.018       2975.45       3546.47    
  45  0.273092      -1.29795      -840.620       840.620       2769.52       3610.14    
  46  0.361379      -1.01783      -659.199       659.199       2372.64       3031.84    
  47  0.548848     -0.599934      -388.549       388.549       3491.15       3879.69    
  48  0.832309     -0.183552      -118.878       118.878       2158.26       2277.14    
  49  0.673017     -0.395985      -256.461       256.461       3686.49       3942.95    
  50  0.692516     -0.367425      -237.964       237.964       2818.50       3056.46    
  51  0.354468E-01  -3.33972      -2162.98       2162.98       2163.74       4326.72    
  52  0.987850     -0.122240E-01  -7.91689       7.91689       2157.22       2165.14    
  53  0.659676     -0.416007      -269.428       269.428       3621.90       3891.33    
  54  0.276145      -1.28683      -833.420       833.420       4061.54       4894.96    
  55  0.426927     -0.851141      -551.244       551.244       4028.80       4580.04    
  56  0.221817      -1.50590      -975.301       975.301       3012.04       3987.34    
  57  0.911956     -0.921634E-01  -59.6899       59.6899       3822.73       3882.42    
  58  0.791973     -0.233228      -151.051       151.051       2358.01       2509.06    
loop,thermsimp(1:2)        4   80.4139       1405.40    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65       2343.24         68.52          1.18         38.96          0.29          0.05        109.00
Just calling func    0   0        109.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     66       2579.21         68.58          1.22         39.07          0.11          0.05        109.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2343.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        4
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        5
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       65     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -20.9372       20.9372       1979.33       2000.27    
   2  0.384676     -0.955353      -618.737       618.737       2157.22       2775.96    
   3  0.472770     -0.749146      -485.187       485.187       2158.26       2643.45    
   4  0.131186      -2.03114      -1315.47       1315.47       2158.84       3474.31    
   5  0.387497     -0.948046      -614.005       614.005       2154.48       2768.49    
   6  0.474858     -0.744739      -482.332       482.332       2191.49       2673.82    
   7  0.654056     -0.424563      -274.969       274.969       2173.41       2448.38    
   8  0.375266     -0.980119      -634.777       634.777       2297.90       2932.67    
   9  0.605577     -0.501574      -324.846       324.846       2200.82       2525.66    
  10  0.485605     -0.722360      -467.839       467.839       2319.38       2787.22    
  11  0.503843     -0.685490      -443.960       443.960       2358.01       2801.97    
  12  0.374521     -0.982108      -636.066       636.066       2488.88       3124.95    
  13  0.955542E-01  -2.34806      -1520.73       1520.73       2131.53       3652.26    
  14  0.902567     -0.102512      -66.3923       66.3923       2157.61       2224.00    
  15  0.347215      -1.05781      -685.094       685.094       2263.60       2948.70    
  16  0.893138     -0.113014      -73.1940       73.1940       2193.99       2267.19    
  17  0.561145     -0.577776      -374.198       374.198       2296.22       2670.42    
  18  0.667287     -0.404536      -261.999       261.999       2154.33       2416.33    
  19  0.601102     -0.508991      -329.650       329.650       2471.52       2801.17    
  20  0.569928     -0.562245      -364.140       364.140       2539.20       2903.34    
  21  0.655926     -0.421708      -273.120       273.120       1852.82       2125.94    
  22  0.355892      -1.03313      -669.108       669.108       2170.43       2839.54    
  23  0.208013      -1.57015      -1016.91       1016.91       2092.46       3109.38    
  24  0.879772     -0.128093      -82.9597       82.9597       2584.06       2667.02    
  25  0.114206E-01  -4.47233      -2896.52       2896.52       2485.36       5381.88    
  26  0.950245     -0.510357E-01  -33.0534       33.0534       2415.49       2448.55    
  27  0.321268      -1.13548      -735.397       735.397       2336.44       3071.83    
  28  0.379005     -0.970207      -628.358       628.358       2399.91       3028.27    
  29  0.117960      -2.13741      -1384.30       1384.30       2680.66       4064.97    
  30  0.822558     -0.195337      -126.511       126.511       2372.64       2499.15    
  31  0.671085     -0.398860      -258.323       258.323       2818.50       3076.82    
  32  0.220279      -1.51286      -979.809       979.809       2578.06       3557.87    
  33  0.836335     -0.178727      -115.753       115.753       2161.58       2277.33    
  34  0.982442E-01  -2.32030      -1502.75       1502.75       2182.87       3685.62    
  35  0.912526     -0.915389E-01  -59.2854       59.2854       2238.70       2297.99    
  36  0.758802     -0.276015      -178.762       178.762       2153.25       2332.01    
  37  0.562651     -0.575096      -372.463       372.463       3107.81       3480.27    
  38  0.248142      -1.39375      -902.670       902.670       2158.84       3061.51    
  39  0.864881     -0.145163      -94.0153       94.0153       2947.65       3041.66    
  40  0.495151     -0.702893      -455.231       455.231       3294.48       3749.71    
  41  0.112352E-01  -4.48870      -2907.12       2907.12       2515.11       5422.23    
  42  0.745500     -0.293700      -190.216       190.216       2975.45       3165.66    
  43  0.405071     -0.903693      -585.280       585.280       2351.33       2936.61    
  44  0.617259     -0.482466      -312.471       312.471       2157.09       2469.56    
  45  0.992755     -0.727089E-02  -4.70902       4.70902       2769.52       2774.23    
  46  0.888739     -0.117952      -76.3921       76.3921       3491.15       3567.54    
  47  0.976701     -0.235748E-01  -15.2683       15.2683       3822.73       3838.00    
  48  0.461976     -0.772242      -500.145       500.145       3621.90       4122.05    
  49  0.150581      -1.89325      -1226.17       1226.17       3686.49       4912.66    
  50  0.726286E-01  -2.62240      -1698.40       1698.40       3012.04       4710.44    
  51  0.280837      -1.26998      -822.507       822.507       2175.09       2997.60    
  52  0.727959     -0.317510      -205.636       205.636       2525.36       2731.00    
  53  0.565225     -0.570532      -369.507       369.507       2163.74       2533.24    
  54  0.884775     -0.122422      -79.2872       79.2872       2167.72       2247.01    
  55  0.289837      -1.23844      -802.078       802.078       4028.80       4830.87    
  56  0.282389      -1.26447      -818.938       818.938       2871.85       3690.78    
  57  0.737455     -0.304550      -197.243       197.243       4061.54       4258.78    
  58  0.436668E-02  -5.43375      -3519.19       3519.19       2343.24       5862.43    
loop,thermsimp(1:2)        5   20.9372       618.737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       2418.74         68.33          1.25         39.32          0.07          0.05        109.03
Just calling func    0   0        109.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2418.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        5
neval is:       66
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        6
neval is:       66


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       66     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -139.493       139.493       1979.33       2118.82    
   2  0.337878      -1.08507      -702.750       702.750       1852.82       2555.57    
   3  0.930612     -0.719127E-01  -46.5745       46.5745       2157.61       2204.18    
   4  0.843645     -0.170024      -110.116       110.116       2167.72       2277.84    
   5  0.757799     -0.277337      -179.618       179.618       2193.99       2373.61    
   6  0.627925     -0.465335      -301.376       301.376       2161.58       2462.95    
   7  0.412314     -0.885971      -573.802       573.802       2238.70       2812.51    
   8  0.282274      -1.26488      -819.201       819.201       2153.25       2972.45    
   9  0.426609E-01  -3.15447      -2043.00       2043.00       2154.33       4197.33    
  10  0.484876     -0.723862      -468.811       468.811       2173.41       2642.22    
  11  0.372210     -0.988296      -640.073       640.073       2415.49       3055.57    
  12  0.740507     -0.300421      -194.569       194.569       2157.09       2351.66    
  13  0.361519      -1.01744      -658.949       658.949       2372.64       3031.59    
  14  0.421034     -0.865042      -560.247       560.247       2200.82       2761.06    
  15  0.780595     -0.247699      -160.423       160.423       2163.74       2324.16    
  16  0.758410     -0.276531      -179.096       179.096       2158.26       2337.36    
  17  0.522921E-01  -2.95091      -1911.17       1911.17       2584.06       4495.22    
  18  0.609673     -0.494833      -320.480       320.480       2296.22       2616.70    
  19  0.204029      -1.58949      -1029.44       1029.44       2191.49       3220.93    
  20  0.516385     -0.660902      -428.035       428.035       2525.36       2953.40    
  21  0.323918      -1.12726      -730.076       730.076       2154.48       2884.56    
  22  0.671820     -0.397765      -257.614       257.614       2769.52       3027.13    
  23  0.850344     -0.162114      -104.993       104.993       2157.22       2262.21    
  24  0.515631     -0.662364      -428.982       428.982       2319.38       2748.36    
  25  0.919408     -0.840249E-01  -54.4190       54.4190       2471.52       2525.94    
  26  0.516519     -0.660643      -427.867       427.867       2358.01       2785.87    
  27  0.986900     -0.131869E-01  -8.54052       8.54052       2170.43       2178.97    
  28  0.127351      -2.06081      -1334.69       1334.69       2539.20       3873.89    
  29  0.775028E-01  -2.55744      -1656.34       1656.34       2297.90       3954.23    
  30  0.778307     -0.250634      -162.324       162.324       2351.33       2513.65    
  31  0.548570     -0.600441      -388.877       388.877       2263.60       2652.48    
  32  0.191672      -1.65197      -1069.90       1069.90       2175.09       3244.99    
  33  0.593733     -0.521326      -337.639       337.639       2399.91       2737.55    
  34  0.612853     -0.489631      -317.111       317.111       2947.65       3264.76    
  35  0.872749     -0.136107      -88.1500       88.1500       2158.84       2246.99    
  36  0.291105E-01  -3.53666      -2290.53       2290.53       2336.44       4626.96    
  37  0.310804      -1.16859      -756.842       756.842       2818.50       3575.34    
  38  0.238051      -1.43527      -929.558       929.558       2092.46       3022.02    
  39  0.600295     -0.510334      -330.519       330.519       2488.88       2819.40    
  40  0.856575     -0.154813      -100.265       100.265       2975.45       3075.71    
  41  0.127990      -2.05580      -1331.45       1331.45       2158.84       3490.29    
  42  0.390396E-01  -3.24318      -2100.45       2100.45       3107.81       5208.27    
  43  0.469298E-01  -3.05910      -1981.24       1981.24       2578.06       4559.30    
  44  0.170208      -1.77073      -1146.82       1146.82       3491.15       4637.97    
  45  0.457801     -0.781320      -506.024       506.024       2131.53       2637.56    
  46  0.451589     -0.794982      -514.873       514.873       2182.87       2697.75    
  47  0.601844     -0.507757      -328.850       328.850       2871.85       3200.70    
  48  0.923684     -0.793857E-01  -51.4144       51.4144       3294.48       3345.89    
  49  0.113154      -2.17901      -1411.24       1411.24       3822.73       5233.97    
  50  0.652894     -0.426340      -276.121       276.121       2680.66       2956.78    
  51  0.600010     -0.510809      -330.827       330.827       3621.90       3952.73    
  52  0.768679     -0.263082      -170.386       170.386       4061.54       4231.93    
  53  0.999310     -0.690144E-03 -0.446974      0.446974       3012.04       3012.49    
  54  0.798907     -0.224511      -145.405       145.405       4028.80       4174.20    
  55  0.246243      -1.40144      -907.645       907.645       3686.49       4594.14    
  56  0.798424     -0.225115      -145.797       145.797       2485.36       2631.16    
  57  0.120926      -2.11257      -1368.21       1368.21       2515.11       3883.33    
  58  0.771675     -0.259192      -167.867       167.867       2418.74       2586.61    
loop,thermsimp(1:2)        6   139.493       702.750    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     68       2747.98         68.27          1.19         39.29          0.24          0.05        109.05
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     69       5662.42         68.71          1.30         38.82          0.05          0.05        108.92
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2747.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        6
neval is:       68
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        7
neval is:       68


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       68     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1385.65       1385.65       1979.33       3364.98    
   2  0.421875     -0.863045      -558.954       558.954       2170.43       2729.38    
   3  0.700103     -0.356528      -230.907       230.907       2157.61       2388.52    
   4  0.209367      -1.56367      -1012.71       1012.71       2158.84       3171.56    
   5  0.117251      -2.14344      -1388.20       1388.20       2157.22       3545.42    
   6  0.898330     -0.107218      -69.4399       69.4399       2167.72       2237.16    
   7  0.209806      -1.56157      -1011.36       1011.36       2163.74       3175.09    
   8  0.917155     -0.864790E-01  -56.0084       56.0084       2158.26       2214.27    
   9  0.120514E-01  -4.41857      -2861.70       2861.70       2157.09       5018.79    
  10  0.189983      -1.66082      -1075.64       1075.64       2193.99       3269.63    
  11  0.257131      -1.35817      -879.622       879.622       2161.58       3041.20    
  12  0.913158E-01  -2.39343      -1550.11       1550.11       2351.33       3901.44    
  13  0.336531      -1.08906      -705.336       705.336       2471.52       3176.86    
  14  0.318351      -1.14460      -741.304       741.304       1852.82       2594.12    
  15  0.919606     -0.838101E-01  -54.2799       54.2799       2418.74       2473.02    
  16  0.719771E-01  -2.63141      -1704.24       1704.24       2296.22       4000.46    
  17  0.788730E-01  -2.53992      -1644.99       1644.99       2485.36       4130.34    
  18  0.905929     -0.987941E-01  -63.9843       63.9843       2131.53       2195.52    
  19  0.665501     -0.407215      -263.734       263.734       2173.41       2437.15    
  20  0.812159     -0.208059      -134.750       134.750       2263.60       2398.35    
  21  0.412726E-01  -3.18756      -2064.43       2064.43       2182.87       4247.31    
  22  0.256064      -1.36233      -882.316       882.316       2399.91       3282.23    
  23  0.277519      -1.28187      -830.205       830.205       2319.38       3149.59    
  24  0.279550      -1.27457      -825.482       825.482       2200.82       3026.30    
  25  0.857884     -0.153286      -99.2763       99.2763       2358.01       2457.28    
  26  0.205158      -1.58398      -1025.87       1025.87       2238.70       3264.57    
  27  0.482085     -0.729635      -472.551       472.551       2488.88       2961.43    
  28  0.494966E-01  -3.00585      -1946.75       1946.75       2154.48       4101.23    
  29  0.338791      -1.08237      -701.002       701.002       2525.36       3226.36    
  30  0.249491E-01  -3.69092      -2390.43       2390.43       2680.66       5071.10    
  31  0.480710     -0.732491      -474.400       474.400       2153.25       2627.65    
  32  0.908951E-01  -2.39805      -1553.10       1553.10       3012.04       4565.14    
  33  0.283223      -1.26152      -817.029       817.029       2092.46       2909.49    
  34  0.277734      -1.28109      -829.702       829.702       2769.52       3599.22    
  35  0.504407     -0.684372      -443.236       443.236       2372.64       2815.87    
  36  0.251881      -1.37880      -892.983       892.983       2415.49       3308.48    
  37  0.568193     -0.565294      -366.114       366.114       2975.45       3341.56    
  38  0.186135      -1.68128      -1088.89       1088.89       2871.85       3960.73    
  39  0.964582     -0.360604E-01  -23.3546       23.3546       2191.49       2214.85    
  40  0.493045     -0.707155      -457.991       457.991       2175.09       2633.08    
  41  0.477950     -0.738248      -478.129       478.129       2947.65       3425.78    
  42  0.114879      -2.16388      -1401.44       1401.44       3294.48       4695.92    
  43  0.324003      -1.12700      -729.906       729.906       2158.84       2888.75    
  44  0.720573     -0.327708      -212.241       212.241       2818.50       3030.74    
  45  0.934913     -0.673019E-01  -43.5883       43.5883       2539.20       2582.78    
  46  0.516467     -0.660745      -427.933       427.933       2515.11       2943.05    
  47  0.351513      -1.04551      -677.126       677.126       3621.90       4299.03    
  48  0.310221      -1.17047      -758.060       758.060       2297.90       3055.96    
  49  0.467571     -0.760204      -492.348       492.348       4028.80       4521.14    
  50  0.700644     -0.355756      -230.406       230.406       2154.33       2384.73    
  51  0.608579E-01  -2.79921      -1812.92       1812.92       4061.54       5874.46    
  52  0.360106      -1.02136      -661.485       661.485       2584.06       3245.54    
  53  0.355744      -1.03354      -669.379       669.379       2578.06       3247.44    
  54  0.356778      -1.03064      -667.498       667.498       3686.49       4353.99    
  55  0.209214      -1.56440      -1013.19       1013.19       2336.44       3349.62    
  56  0.513034     -0.667413      -432.252       432.252       3491.15       3923.40    
  57  0.131750      -2.02685      -1312.69       1312.69       3107.81       4420.51    
  58  0.860948     -0.149721      -96.9671       96.9671       2747.98       2844.94    
loop,thermsimp(1:2)        7   1385.65       558.954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     70       2614.73         68.56          1.27         39.04          0.14          0.05        109.05
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2614.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        7
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        8
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       69     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -465.448       465.448       2131.53       2596.98    
   2  0.568497     -0.564760      -365.769       365.769       2158.26       2524.03    
   3  0.632037E-01  -2.76139      -1788.42       1788.42       2191.49       3979.92    
   4  0.184325      -1.69105      -1095.22       1095.22       2167.72       3262.94    
   5  0.949772     -0.515332E-01  -33.3756       33.3756       2154.33       2187.70    
   6  0.512179     -0.669081      -433.333       433.333       2157.61       2590.94    
   7  0.573767     -0.555532      -359.792       359.792       2263.60       2623.40    
   8  0.590189     -0.527312      -341.515       341.515       2173.41       2514.93    
   9  0.323917      -1.12727      -730.079       730.079       2358.01       3088.08    
  10  0.246420E-01  -3.70330      -2398.46       2398.46       2418.74       4817.20    
  11  0.923153E-01  -2.38255      -1543.06       1543.06       2539.20       4082.26    
  12  0.236043      -1.44374      -935.044       935.044       1852.82       2787.86    
  13  0.885388     -0.121730      -78.8385       78.8385       2153.25       2232.09    
  14  0.617726     -0.481710      -311.981       311.981       2175.09       2487.07    
  15  0.349992      -1.04985      -679.936       679.936       2170.43       2850.36    
  16  0.892028     -0.114257      -73.9991       73.9991       2372.64       2446.64    
  17  0.382423     -0.961227      -622.542       622.542       2747.98       3370.52    
  18  0.850527     -0.161899      -104.855       104.855       2158.84       2263.69    
  19  0.653461     -0.425472      -275.558       275.558       2092.46       2368.02    
  20  0.413959     -0.881988      -571.222       571.222       2515.11       3086.33    
  21  0.807813     -0.213424      -138.225       138.225       2488.88       2627.10    
  22  0.348045      -1.05542      -683.549       683.549       2200.82       2884.37    
  23  0.435267     -0.831795      -538.715       538.715       2818.50       3357.21    
  24  0.434284     -0.834056      -540.179       540.179       2161.58       2701.76    
  25  0.983564     -0.165728E-01  -10.7335       10.7335       2297.90       2308.63    
  26  0.545923     -0.605277      -392.010       392.010       2319.38       2711.39    
  27  0.227140      -1.48219      -959.944       959.944       2158.84       3118.79    
  28  0.965085     -0.355395E-01  -23.0173       23.0173       2163.74       2186.75    
  29  0.183882      -1.69346      -1096.77       1096.77       2471.52       3568.29    
  30  0.187300E-02  -6.28022      -4067.40       4067.40       2525.36       6592.76    
  31  0.428736     -0.846914      -548.506       548.506       2584.06       3132.56    
  32  0.459764     -0.777041      -503.253       503.253       2578.06       3081.31    
  33  0.914786     -0.890649E-01  -57.6831       57.6831       2238.70       2296.39    
  34  0.872236     -0.136696      -88.5313       88.5313       2193.99       2282.52    
  35  0.789367     -0.236524      -153.185       153.185       2399.91       2553.10    
  36  0.619233E-01  -2.78186      -1801.68       1801.68       2415.49       4217.17    
  37  0.138004E-01  -4.28306      -2773.94       2773.94       2975.45       5749.39    
  38  0.287035      -1.24815      -808.368       808.368       2336.44       3144.80    
  39  0.138758E-01  -4.27761      -2770.41       2770.41       1979.33       4749.74    
  40  0.593330     -0.522005      -338.078       338.078       2947.65       3285.72    
  41  0.399445     -0.917679      -594.337       594.337       2157.22       2751.56    
  42  0.982947     -0.172001E-01  -11.1397       11.1397       2769.52       2780.66    
  43  0.259534      -1.34887      -873.598       873.598       2351.33       3224.93    
  44  0.816592E-01  -2.50520      -1622.50       1622.50       3491.15       5113.65    
  45  0.166083      -1.79527      -1162.71       1162.71       2871.85       4034.56    
  46  0.967370     -0.331741E-01  -21.4853       21.4853       2296.22       2317.71    
  47  0.371024     -0.991488      -642.140       642.140       2154.48       2796.62    
  48  0.941964     -0.597885E-01  -38.7222       38.7222       2485.36       2524.08    
  49  0.130219      -2.03854      -1320.26       1320.26       2182.87       3503.14    
  50  0.599455     -0.511734      -331.426       331.426       3621.90       3953.33    
  51  0.519323     -0.655230      -424.362       424.362       3686.49       4110.86    
  52  0.829175     -0.187324      -121.321       121.321       3107.81       3229.13    
  53  0.341525      -1.07433      -695.796       695.796       4028.80       4724.59    
  54  0.686480     -0.376178      -243.633       243.633       3012.04       3255.67    
  55  0.273157      -1.29771      -840.466       840.466       3294.48       4134.94    
  56  0.472999     -0.748662      -484.873       484.873       2157.09       2641.96    
  57  0.591611     -0.524905      -339.957       339.957       2680.66       3020.62    
  58  0.253673      -1.37171      -888.392       888.392       2614.73       3503.12    
loop,thermsimp(1:2)        8   465.448       365.769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       1952.21         68.61          1.28         39.07          0.08          0.06        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     72       2098.90         68.63          1.30         38.90          0.14          0.05        109.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1952.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        8
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:        9
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       71     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1575.33       1575.33       2163.74       3739.07    
   2  0.192227      -1.64908      -1068.03       1068.03       2154.33       3222.36    
   3  0.872733     -0.136126      -88.1625       88.1625       2153.25       2241.41    
   4  0.444113     -0.811675      -525.684       525.684       2158.84       2684.52    
   5  0.194382      -1.63793      -1060.81       1060.81       2193.99       3254.80    
   6  0.358074      -1.02702      -665.151       665.151       2238.70       2903.86    
   7  0.461693     -0.772855      -500.542       500.542       2297.90       2798.44    
   8  0.180202      -1.71368      -1109.87       1109.87       2296.22       3406.09    
   9  0.944954     -0.566187E-01  -36.6693       36.6693       2092.46       2129.13    
  10  0.738770     -0.302769      -196.089       196.089       2372.64       2568.73    
  11  0.822491E-01  -2.49800      -1617.84       1617.84       2175.09       3792.93    
  12  0.313602      -1.15963      -751.038       751.038       2173.41       2924.45    
  13  0.978185     -0.220567E-01  -14.2851       14.2851       2158.26       2172.55    
  14  0.540591E-01  -2.91768      -1889.64       1889.64       2485.36       4375.00    
  15  0.872885     -0.135951      -88.0491       88.0491       2399.91       2487.96    
  16  0.209079      -1.56504      -1013.60       1013.60       2157.61       3171.21    
  17  0.789205E-01  -2.53931      -1644.59       1644.59       2131.53       3776.13    
  18  0.746404     -0.292489      -189.431       189.431       2263.60       2453.04    
  19  0.110219      -2.20529      -1428.26       1428.26       2488.88       3917.14    
  20  0.656016     -0.421570      -273.031       273.031       2157.09       2430.12    
  21  0.665675     -0.406953      -263.564       263.564       2161.58       2425.14    
  22  0.563292     -0.573957      -371.725       371.725       2319.38       2691.11    
  23  0.615044     -0.486062      -314.799       314.799       2157.22       2472.02    
  24  0.128081      -2.05509      -1330.99       1330.99       2769.52       4100.51    
  25  0.459916     -0.776711      -503.039       503.039       1852.82       2355.86    
  26  0.433297     -0.836332      -541.653       541.653       2154.48       2696.14    
  27  0.225675      -1.48866      -964.135       964.135       2170.43       3134.56    
  28  0.808805     -0.212197      -137.430       137.430       2200.82       2338.25    
  29  0.578238     -0.547770      -354.765       354.765       2680.66       3035.43    
  30  0.569572     -0.562871      -364.545       364.545       2578.06       2942.61    
  31  0.291272      -1.23350      -798.878       798.878       2515.11       3313.99    
  32  0.144426      -1.93499      -1253.20       1253.20       2358.01       3611.21    
  33  0.908321     -0.961572E-01  -62.2765       62.2765       2158.84       2221.12    
  34  0.593166     -0.522281      -338.257       338.257       2584.06       2922.31    
  35  0.327630      -1.11587      -722.698       722.698       2336.44       3059.13    
  36  0.823214E-01  -2.49712      -1617.27       1617.27       2351.33       3968.60    
  37  0.742531     -0.297691      -192.800       192.800       3107.81       3300.61    
  38  0.476201E-01  -3.04450      -1971.78       1971.78       3012.04       4983.82    
  39  0.183829      -1.69375      -1096.96       1096.96       2167.72       3264.69    
  40  0.417257     -0.874053      -566.083       566.083       2947.65       3513.73    
  41  0.647723E-01  -2.73688      -1772.55       1772.55       2818.50       4591.05    
  42  0.123950E-01  -4.39046      -2843.50       2843.50       2747.98       5591.47    
  43  0.281372E-01  -3.57066      -2312.55       2312.55       2614.73       4927.28    
  44  0.883044     -0.124380      -80.5551       80.5551       2182.87       2263.43    
  45  0.445413     -0.808754      -523.792       523.792       2471.52       2995.31    
  46  0.418101     -0.872031      -564.774       564.774       3621.90       4186.68    
  47  0.301534      -1.19887      -776.454       776.454       2191.49       2967.94    
  48  0.674500     -0.393783      -255.035       255.035       2871.85       3126.88    
  49  0.732783     -0.310905      -201.359       201.359       2539.20       2740.55    
  50  0.970355     -0.300929E-01  -19.4898       19.4898       3686.49       3705.98    
  51  0.981589     -0.185824E-01  -12.0350       12.0350       3294.48       3306.51    
  52  0.677253     -0.389711      -252.397       252.397       2415.49       2667.89    
  53  0.800731     -0.222230      -143.928       143.928       4028.80       4172.72    
  54  0.529544     -0.635738      -411.738       411.738       1979.33       2391.07    
  55  0.814619     -0.205035      -132.791       132.791       2418.74       2551.53    
  56  0.909218     -0.951702E-01  -61.6373       61.6373       3491.15       3552.78    
  57  0.269472      -1.31129      -849.262       849.262       2975.45       3824.71    
  58  0.166504      -1.79274      -1161.07       1161.07       1952.21       3113.28    
loop,thermsimp(1:2)        9   1575.33       1068.03    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73       3787.38         68.40          1.15         38.96          0.58          0.05        109.15
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3787.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:        9
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       10
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       72     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -318.217       318.217       2092.46       2410.68    
   2  0.877337     -0.130865      -84.7549       84.7549       2158.26       2243.02    
   3  0.821280     -0.196891      -127.517       127.517       2158.84       2286.36    
   4  0.989636     -0.104181E-01  -6.74732       6.74732       2153.25       2160.00    
   5  0.492813     -0.707625      -458.295       458.295       2182.87       2641.17    
   6  0.904083     -0.100835      -65.3059       65.3059       2200.82       2266.12    
   7  0.490620     -0.712086      -461.185       461.185       1852.82       2314.01    
   8  0.572439     -0.557850      -361.293       361.293       1979.33       2340.62    
   9  0.588753     -0.529749      -343.094       343.094       2161.58       2504.67    
  10  0.341799      -1.07353      -695.276       695.276       2157.09       2852.37    
  11  0.449605     -0.799385      -517.725       517.725       2263.60       2781.33    
  12  0.740720     -0.300132      -194.382       194.382       2157.22       2351.60    
  13  0.173164E-01  -4.05610      -2626.95       2626.95       2399.91       5026.86    
  14  0.828389     -0.188272      -121.935       121.935       2418.74       2540.67    
  15  0.110451      -2.20318      -1426.90       1426.90       2372.64       3799.54    
  16  0.646816     -0.435693      -282.178       282.178       2415.49       2697.67    
  17  0.857676     -0.153529      -99.4333       99.4333       2158.84       2258.27    
  18  0.691202E-02  -4.97449      -3221.75       3221.75       2319.38       5541.13    
  19  0.530885     -0.633210      -410.100       410.100       2154.48       2564.58    
  20  0.742957     -0.297117      -192.429       192.429       2539.20       2731.63    
  21  0.883526E-01  -2.42642      -1571.48       1571.48       2297.90       3869.38    
  22  0.599138     -0.512263      -331.769       331.769       2238.70       2570.47    
  23  0.476407     -0.741482      -480.223       480.223       2584.06       3064.28    
  24  0.509994E-01  -2.97594      -1927.38       1927.38       2173.41       4100.79    
  25  0.669768     -0.400824      -259.595       259.595       2578.06       2837.66    
  26  0.874430     -0.134183      -86.9039       86.9039       2191.49       2278.39    
  27  0.830739     -0.185440      -120.101       120.101       2471.52       2591.62    
  28  0.166673      -1.79172      -1160.42       1160.42       2680.66       3841.08    
  29  0.578742     -0.546898      -354.200       354.200       2336.44       2690.64    
  30  0.433531     -0.835791      -541.303       541.303       1952.21       2493.52    
  31  0.979127     -0.210935E-01  -13.6613       13.6613       2871.85       2885.51    
  32  0.310252      -1.17037      -757.994       757.994       2170.43       2928.42    
  33  0.686879     -0.375597      -243.257       243.257       2157.61       2400.87    
  34  0.243104      -1.41427      -915.955       915.955       2154.33       3070.28    
  35  0.459407     -0.777818      -503.756       503.756       2193.99       2697.75    
  36  0.332163      -1.10213      -713.797       713.797       2167.72       2881.52    
  37  0.512243     -0.668956      -433.252       433.252       3107.81       3541.06    
  38  0.323240      -1.12936      -731.434       731.434       3294.48       4025.91    
  39  0.667455     -0.404284      -261.836       261.836       2515.11       2776.95    
  40  0.460037     -0.776449      -502.870       502.870       2296.22       2799.09    
  41  0.227415      -1.48098      -959.159       959.159       2947.65       3906.81    
  42  0.636494     -0.451780      -292.597       292.597       3491.15       3783.74    
  43  0.432078     -0.839149      -543.477       543.477       2358.01       2901.48    
  44  0.609015     -0.495913      -321.180       321.180       3686.49       4007.67    
  45  0.427755     -0.849205      -549.990       549.990       2163.74       2713.73    
  46  0.496712     -0.699745      -453.192       453.192       2131.53       2584.73    
  47  0.295308      -1.21974      -789.966       789.966       2175.09       2965.06    
  48  0.928979     -0.736692E-01  -47.7121       47.7121       2975.45       3023.16    
  49  0.245696E-01  -3.70625      -2400.36       2400.36       2488.88       4889.24    
  50  0.833617E-01  -2.48457      -1609.14       1609.14       2351.33       3960.47    
  51  0.499690     -0.693767      -449.321       449.321       2769.52       3218.84    
  52  0.320552      -1.13771      -736.842       736.842       4028.80       4765.64    
  53  0.151030E-01  -4.19286      -2715.52       2715.52       3621.90       6337.42    
  54  0.551054     -0.595922      -385.951       385.951       2485.36       2871.31    
  55  0.786630     -0.239997      -155.435       155.435       2818.50       2973.93    
  56  0.793760E-01  -2.53356      -1640.87       1640.87       2614.73       4255.60    
  57  0.456771     -0.783574      -507.484       507.484       3012.04       3519.52    
  58  0.613263     -0.488962      -316.678       316.678       3787.38       4104.06    
loop,thermsimp(1:2)       10   318.217       84.7549    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74       2214.01         68.54          1.20         38.95          0.31          0.05        109.05
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75       3327.17         68.55          1.18         38.89          0.36          0.05        109.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2214.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       10
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       11
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       74     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -667.495       667.495       2153.25       2820.75    
   2  0.318207      -1.14505      -741.598       741.598       2158.26       2899.86    
   3  0.410972E-01  -3.19181      -2067.19       2067.19       2158.84       4226.03    
   4  0.217948      -1.52350      -986.697       986.697       2200.82       3187.51    
   5  0.460755     -0.774888      -501.859       501.859       2191.49       2693.35    
   6  0.694214     -0.364975      -236.377       236.377       2158.84       2395.22    
   7  0.237764      -1.43648      -930.338       930.338       1852.82       2783.16    
   8  0.635477     -0.453379      -293.632       293.632       1979.33       2272.96    
   9  0.882831E-01  -2.42721      -1571.99       1571.99       2157.22       3729.21    
  10  0.889613     -0.116969      -75.7553       75.7553       2157.61       2233.36    
  11  0.236395      -1.44225      -934.078       934.078       2092.46       3026.54    
  12  0.785560     -0.241359      -156.317       156.317       1952.21       2108.53    
  13  0.253594      -1.37202      -888.594       888.594       2161.58       3050.17    
  14  0.767743     -0.264300      -171.175       171.175       2418.74       2589.91    
  15  0.425111     -0.855405      -554.006       554.006       2154.48       2708.49    
  16  0.334680E-01  -3.39717      -2200.18       2200.18       2238.70       4438.89    
  17  0.737903     -0.303943      -196.850       196.850       2131.53       2328.38    
  18  0.530906     -0.633170      -410.075       410.075       2471.52       2881.59    
  19  0.811772     -0.208536      -135.059       135.059       2182.87       2317.93    
  20  0.781494     -0.246548      -159.678       159.678       2336.44       2496.11    
  21  0.668871     -0.402164      -260.463       260.463       2415.49       2675.96    
  22  0.609633     -0.494898      -320.522       320.522       2193.99       2514.51    
  23  0.732795E-01  -2.61347      -1692.63       1692.63       2163.74       3856.36    
  24  0.999755     -0.244962E-03 -0.158650      0.158650       2539.20       2539.35    
  25  0.556911     -0.585350      -379.104       379.104       2515.11       2894.22    
  26  0.381942     -0.962485      -623.357       623.357       2263.60       2886.96    
  27  0.230973      -1.46546      -949.107       949.107       2296.22       3245.33    
  28  0.791084     -0.234351      -151.778       151.778       2578.06       2729.84    
  29  0.122039      -2.10341      -1362.28       1362.28       2157.09       3519.37    
  30  0.411383     -0.888231      -575.266       575.266       2485.36       3060.62    
  31  0.753656     -0.282819      -183.169       183.169       2167.72       2350.89    
  32  0.846821     -0.166266      -107.683       107.683       2871.85       2979.53    
  33  0.577745     -0.548622      -355.317       355.317       2358.01       2713.32    
  34  0.859903     -0.150936      -97.7541       97.7541       2170.43       2268.18    
  35  0.915816     -0.879395E-01  -56.9543       56.9543       2175.09       2232.04    
  36  0.220499      -1.51186      -979.162       979.162       2818.50       3797.66    
  37  0.539962     -0.616256      -399.120       399.120       2975.45       3374.57    
  38  0.810725     -0.209827      -135.895       135.895       2584.06       2719.95    
  39  0.901567     -0.103621      -67.1103       67.1103       2154.33       2221.44    
  40  0.196148      -1.62888      -1054.95       1054.95       2769.52       3824.47    
  41  0.413437     -0.883250      -572.040       572.040       3012.04       3584.08    
  42  0.192892      -1.64562      -1065.79       1065.79       3107.81       4173.60    
  43  0.194290      -1.63840      -1061.12       1061.12       3491.15       4552.26    
  44  0.988313     -0.117563E-01  -7.61401       7.61401       2372.64       2380.25    
  45  0.917980     -0.855792E-01  -55.4256       55.4256       2680.66       2736.09    
  46  0.136083      -1.99449      -1291.74       1291.74       2297.90       3589.63    
  47  0.847126     -0.165905      -107.449       107.449       2947.65       3055.10    
  48  0.513003     -0.667474      -432.291       432.291       2351.33       2783.62    
  49  0.562161     -0.575967      -373.027       373.027       3686.49       4059.52    
  50  0.926079     -0.767957E-01  -49.7370       49.7370       3294.48       3344.21    
  51  0.890313     -0.116182      -75.2456       75.2456       2173.41       2248.66    
  52  0.857665     -0.153542      -99.4416       99.4416       3787.38       3886.82    
  53  0.599877     -0.511031      -330.971       330.971       2614.73       2945.70    
  54  0.835330     -0.179929      -116.531       116.531       4028.80       4145.33    
  55  0.323336      -1.12906      -731.242       731.242       2488.88       3220.12    
  56  0.305042      -1.18731      -768.962       768.962       2399.91       3168.87    
  57  0.980883     -0.193016E-01  -12.5007       12.5007       2319.38       2331.88    
  58  0.129682      -2.04267      -1322.94       1322.94       2214.01       3536.95    
loop,thermsimp(1:2)       11   667.495       741.598    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76       2472.87         68.55          1.20         39.41          0.14          0.05        109.35
Just calling func    0   0        109.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2472.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       11
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       12
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       75     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1669.20       1669.20       1952.21       3621.41    
   2  0.804470     -0.217571      -140.911       140.911       2154.33       2295.24    
   3  0.984017     -0.161120E-01  -10.4350       10.4350       2175.09       2185.53    
   4  0.587639     -0.531643      -344.320       344.320       2157.61       2501.93    
   5  0.523810     -0.646626      -418.789       418.789       2173.41       2592.20    
   6  0.930607     -0.719181E-01  -46.5780       46.5780       2170.43       2217.01    
   7  0.360114E-01  -3.32392      -2152.75       2152.75       1979.33       4132.08    
   8  0.963815     -0.368556E-01  -23.8696       23.8696       2182.87       2206.74    
   9  0.201264E-01  -3.90572      -2529.55       2529.55       2131.53       4661.09    
  10  0.954897     -0.461522E-01  -29.8906       29.8906       2319.38       2349.27    
  11  0.374160     -0.983071      -636.689       636.689       2167.72       2804.41    
  12  0.174967      -1.74316      -1128.96       1128.96       2372.64       3501.60    
  13  0.381618     -0.963335      -623.907       623.907       2158.84       2782.75    
  14  0.191097      -1.65498      -1071.85       1071.85       2336.44       3408.29    
  15  0.425287     -0.854991      -553.738       553.738       2193.99       2747.73    
  16  0.426180     -0.852893      -552.379       552.379       2539.20       3091.58    
  17  0.615671     -0.485042      -314.139       314.139       2418.74       2732.88    
  18  0.787264     -0.239192      -154.913       154.913       2415.49       2570.41    
  19  0.812636     -0.207472      -134.370       134.370       2191.49       2325.86    
  20  0.917241E-01  -2.38897      -1547.22       1547.22       2154.48       3701.71    
  21  0.671310     -0.398525      -258.106       258.106       2358.01       2616.11    
  22  0.548174     -0.601162      -389.344       389.344       2584.06       2973.40    
  23  0.134851      -2.00359      -1297.63       1297.63       2578.06       3875.69    
  24  0.373236     -0.985545      -638.292       638.292       2680.66       3318.96    
  25  0.578774     -0.546843      -354.165       354.165       1852.82       2206.99    
  26  0.910021     -0.942872E-01  -61.0654       61.0654       2351.33       2412.40    
  27  0.192323      -1.64858      -1067.71       1067.71       2153.25       3220.96    
  28  0.366342      -1.00419      -650.366       650.366       2471.52       3121.89    
  29  0.686994     -0.375430      -243.148       243.148       2263.60       2506.75    
  30  0.486551     -0.720414      -466.579       466.579       2515.11       2981.69    
  31  0.256801      -1.35945      -880.454       880.454       2158.26       3038.71    
  32  0.284977      -1.25535      -813.030       813.030       2614.73       3427.76    
  33  0.903072     -0.101953      -66.0299       66.0299       2871.85       2937.88    
  34  0.226450      -1.48523      -961.914       961.914       2092.46       3054.38    
  35  0.446078     -0.807261      -522.825       522.825       2161.58       2684.40    
  36  0.152634      -1.87971      -1217.40       1217.40       2947.65       4165.05    
  37  0.511955     -0.669518      -433.616       433.616       2485.36       2918.97    
  38  0.513138     -0.667210      -432.121       432.121       2399.91       2832.03    
  39  0.637309     -0.450501      -291.768       291.768       2200.82       2492.59    
  40  0.861477     -0.149107      -96.5696       96.5696       2488.88       2585.45    
  41  0.817364     -0.201671      -130.613       130.613       2296.22       2426.83    
  42  0.793820     -0.230898      -149.542       149.542       3294.48       3444.02    
  43  0.253309      -1.37315      -889.322       889.322       2975.45       3864.77    
  44  0.702532     -0.353065      -228.664       228.664       2157.09       2385.75    
  45  0.822324     -0.195620      -126.694       126.694       2214.01       2340.71    
  46  0.720485     -0.327831      -212.321       212.321       3012.04       3224.36    
  47  0.881589     -0.126029      -81.6234       81.6234       2297.90       2379.52    
  48  0.584479     -0.537035      -347.813       347.813       2157.22       2505.03    
  49  0.697197     -0.360688      -233.601       233.601       2818.50       3052.10    
  50  0.320931      -1.13653      -736.077       736.077       2769.52       3505.60    
  51  0.780071     -0.248371      -160.858       160.858       2163.74       2324.59    
  52  0.318322E-01  -3.44728      -2232.64       2232.64       3787.38       6020.02    
  53  0.693387     -0.366167      -237.149       237.149       3686.49       3923.64    
  54  0.332128      -1.10223      -713.866       713.866       4028.80       4742.66    
  55  0.891883E-01  -2.41701      -1565.38       1565.38       3107.81       4673.19    
  56  0.960735     -0.400567E-01  -25.9429       25.9429       2158.84       2184.78    
  57  0.726634     -0.319332      -206.817       206.817       2238.70       2445.52    
  58  0.867850     -0.141737      -91.7962       91.7962       2472.87       2564.67    
loop,thermsimp(1:2)       12   1669.20       140.911    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     77       2656.71         68.51          1.18         38.87          0.45          0.05        109.06
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2656.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       12
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       13
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       76     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -88.3831       88.3831       2158.84       2247.22    
   2  0.311340      -1.16687      -755.727       755.727       2175.09       2930.82    
   3  0.293828      -1.22476      -793.220       793.220       2182.87       2976.09    
   4  0.586668     -0.533296      -345.391       345.391       1852.82       2198.21    
   5  0.360311      -1.02079      -661.117       661.117       2170.43       2831.55    
   6  0.315643      -1.15314      -746.836       746.836       2154.33       2901.16    
   7  0.481464     -0.730923      -473.385       473.385       2163.74       2637.12    
   8  0.720279     -0.328116      -212.506       212.506       2191.49       2404.00    
   9  0.551471     -0.595166      -385.461       385.461       2214.01       2599.47    
  10  0.524434     -0.645435      -418.018       418.018       2319.38       2737.40    
  11  0.781600     -0.246412      -159.589       159.589       2297.90       2457.49    
  12  0.353648      -1.03945      -673.205       673.205       2157.09       2830.30    
  13  0.451044     -0.796190      -515.655       515.655       2351.33       2866.99    
  14  0.325353      -1.12284      -727.213       727.213       2296.22       3023.43    
  15  0.312157      -1.16425      -754.029       754.029       2238.70       2992.73    
  16  0.432418     -0.838362      -542.968       542.968       2200.82       2743.79    
  17  0.296543      -1.21556      -787.263       787.263       2157.61       2944.87    
  18  0.705416     -0.348967      -226.010       226.010       2157.22       2383.23    
  19  0.146505      -1.92069      -1243.94       1243.94       2263.60       3507.55    
  20  0.471608     -0.751607      -486.781       486.781       2472.87       2959.65    
  21  0.633095     -0.457134      -296.064       296.064       2415.49       2711.56    
  22  0.754855     -0.281230      -182.140       182.140       2488.88       2671.02    
  23  0.444501E-01  -3.11339      -2016.40       2016.40       2173.41       4189.81    
  24  0.160973      -1.82652      -1182.95       1182.95       2358.01       3540.96    
  25  0.943694     -0.579536E-01  -37.5338       37.5338       2161.58       2199.11    
  26  0.187304      -1.67502      -1084.83       1084.83       2418.74       3503.57    
  27  0.840922     -0.173257      -112.210       112.210       2193.99       2306.20    
  28  0.888648     -0.118054      -76.4579       76.4579       2158.84       2235.30    
  29  0.920614E-01  -2.38530      -1544.85       1544.85       2167.72       3712.57    
  30  0.906493     -0.981722E-01  -63.5816       63.5816       2399.91       2463.49    
  31  0.221761      -1.50616      -975.467       975.467       2485.36       3460.83    
  32  0.248725      -1.39141      -901.150       901.150       2871.85       3773.00    
  33  0.315928      -1.15224      -746.253       746.253       2584.06       3330.31    
  34  0.949967     -0.513283E-01  -33.2430       33.2430       2515.11       2548.36    
  35  0.802748     -0.219715      -142.299       142.299       2158.26       2300.56    
  36  0.558987     -0.581628      -376.694       376.694       2818.50       3195.19    
  37  0.638133     -0.449209      -290.932       290.932       2092.46       2383.39    
  38  0.637852     -0.449648      -291.216       291.216       2539.20       2830.41    
  39  0.382908     -0.959961      -621.722       621.722       2471.52       3093.24    
  40  0.982834     -0.173149E-01  -11.2141       11.2141       2153.25       2164.47    
  41  0.497022     -0.699120      -452.787       452.787       3012.04       3464.83    
  42  0.263620      -1.33325      -863.481       863.481       2680.66       3544.15    
  43  0.296939      -1.21423      -786.400       786.400       2336.44       3122.83    
  44  0.784161     -0.243141      -157.471       157.471       2614.73       2772.20    
  45  0.545321     -0.606380      -392.724       392.724       3294.48       3687.20    
  46  0.770080     -0.261260      -169.206       169.206       2372.64       2541.84    
  47  0.358755      -1.02511      -663.919       663.919       2769.52       3433.44    
  48  0.325126      -1.12354      -727.666       727.666       1952.21       2679.88    
  49  0.599396     -0.511832      -331.490       331.490       2154.48       2485.97    
  50  0.323708      -1.12791      -730.497       730.497       2975.45       3705.95    
  51  0.329142      -1.11127      -719.714       719.714       2578.06       3297.78    
  52  0.685661     -0.377371      -244.406       244.406       3686.49       3930.90    
  53  0.360361      -1.02065      -661.026       661.026       1979.33       2640.36    
  54  0.665281     -0.407545      -263.948       263.948       2947.65       3211.59    
  55  0.983321     -0.168196E-01  -10.8933       10.8933       2131.53       2142.43    
  56  0.644247     -0.439672      -284.755       284.755       3107.81       3392.57    
  57  0.735645     -0.307008      -198.835       198.835       4028.80       4227.63    
  58  0.680276     -0.385257      -249.513       249.513       2656.71       2906.23    
loop,thermsimp(1:2)       13   88.3831       755.727    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78       2461.70         68.50          1.20         38.92          0.57          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2461.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       13
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       14
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       77     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -689.997       689.997       2131.53       2821.53    
   2  0.267720      -1.31781      -853.487       853.487       2153.25       3006.74    
   3  0.279825      -1.27359      -824.846       824.846       1852.82       2677.67    
   4  0.281095      -1.26906      -821.913       821.913       2161.58       2983.49    
   5  0.245867      -1.40297      -908.635       908.635       2158.84       3067.48    
   6  0.914239     -0.896636E-01  -58.0709       58.0709       2158.84       2216.91    
   7  0.180116      -1.71415      -1110.18       1110.18       2158.26       3268.44    
   8  0.567917     -0.565780      -366.430       366.430       2193.99       2560.42    
   9  0.431941     -0.839465      -543.682       543.682       2157.22       2700.90    
  10  0.877920     -0.130199      -84.3241       84.3241       2092.46       2176.79    
  11  0.280355      -1.27170      -823.619       823.619       2191.49       3015.11    
  12  0.486947     -0.719601      -466.052       466.052       2297.90       2763.95    
  13  0.216546      -1.52995      -990.878       990.878       2399.91       3390.79    
  14  0.483718E-02  -5.33142      -3452.91       3452.91       2154.48       5607.40    
  15  0.785152E-03  -7.14963      -4630.48       4630.48       2372.64       7003.12    
  16  0.300781      -1.20137      -778.072       778.072       2515.11       3293.18    
  17  0.869691     -0.139618      -90.4239       90.4239       2214.01       2304.44    
  18  0.694261E-01  -2.66749      -1727.61       1727.61       2163.74       3891.35    
  19  0.635475     -0.453382      -293.635       293.635       1979.33       2272.97    
  20  0.894977     -0.110958      -71.8620       71.8620       2488.88       2560.74    
  21  0.442267     -0.815841      -528.382       528.382       1952.21       2480.59    
  22  0.283362      -1.26103      -816.709       816.709       2415.49       3232.20    
  23  0.518611     -0.656601      -425.250       425.250       2319.38       2744.63    
  24  0.858122E-01  -2.45559      -1590.37       1590.37       2200.82       3791.19    
  25  0.461153     -0.774026      -501.301       501.301       2614.73       3116.03    
  26  0.180026      -1.71465      -1110.50       1110.50       2157.09       3267.59    
  27  0.446938E-01  -3.10792      -2012.85       2012.85       2539.20       4552.05    
  28  0.152352      -1.88156      -1218.60       1218.60       2170.43       3389.03    
  29  0.163937E-01  -4.11086      -2662.41       2662.41       2351.33       5013.74    
  30  0.721347     -0.326635      -211.546       211.546       2154.33       2365.87    
  31  0.813323     -0.206626      -133.822       133.822       2656.71       2790.54    
  32  0.569343     -0.563273      -364.805       364.805       2175.09       2539.90    
  33  0.275899      -1.28772      -833.996       833.996       2157.61       2991.60    
  34  0.933187     -0.691492E-01  -44.7847       44.7847       2472.87       2517.66    
  35  0.716570     -0.333279      -215.849       215.849       2182.87       2398.72    
  36  0.405413     -0.902848      -584.733       584.733       2238.70       2823.44    
  37  0.907528     -0.970314E-01  -62.8427       62.8427       2296.22       2359.06    
  38  0.554651     -0.589416      -381.737       381.737       2471.52       2853.26    
  39  0.419962     -0.867592      -561.898       561.898       2336.44       2898.33    
  40  0.824173     -0.193375      -125.240       125.240       2818.50       2943.74    
  41  0.865647     -0.144278      -93.4424       93.4424       2947.65       3041.09    
  42  0.300944      -1.20083      -777.723       777.723       2578.06       3355.78    
  43  0.339688      -1.07973      -699.290       699.290       2584.06       3283.35    
  44  0.217032      -1.52771      -989.428       989.428       3107.81       4097.24    
  45  0.792618E-01  -2.53500      -1641.80       1641.80       2769.52       4411.32    
  46  0.997677     -0.232582E-02  -1.50632       1.50632       2485.36       2486.87    
  47  0.174239      -1.74733      -1131.66       1131.66       3012.04       4143.70    
  48  0.834084     -0.181422      -117.498       117.498       2418.74       2536.24    
  49  0.324404      -1.12577      -729.106       729.106       2263.60       2992.71    
  50  0.927598     -0.751564E-01  -48.6753       48.6753       2358.01       2406.68    
  51  0.981384     -0.187911E-01  -12.1701       12.1701       2680.66       2692.83    
  52  0.849105     -0.163572      -105.938       105.938       3294.48       3400.41    
  53  0.148698      -1.90584      -1234.32       1234.32       2975.45       4209.77    
  54  0.389930     -0.941789      -609.953       609.953       2167.72       2777.68    
  55  0.183568      -1.69517      -1097.88       1097.88       2871.85       3969.73    
  56  0.661220     -0.413669      -267.914       267.914       3686.49       3954.41    
  57  0.242183      -1.41806      -918.411       918.411       2173.41       3091.82    
  58  0.182262      -1.70231      -1102.51       1102.51       2461.70       3564.21    
loop,thermsimp(1:2)       14   689.997       853.487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79       2282.20         68.45          1.15         39.00          0.51          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     80       3041.70         68.26          1.20         39.22          0.44          0.05        109.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2282.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       14
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       15
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       79     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -951.984       951.984       2092.46       3044.45    
   2  0.322822      -1.13066      -732.273       732.273       2158.84       2891.11    
   3  0.327586      -1.11601      -722.784       722.784       1979.33       2702.12    
   4  0.799078     -0.224296      -145.266       145.266       2214.01       2359.28    
   5  0.698072     -0.359433      -232.788       232.788       2296.22       2529.01    
   6  0.733871     -0.309421      -200.398       200.398       2154.33       2354.73    
   7  0.823872     -0.193740      -125.477       125.477       2182.87       2308.35    
   8  0.800045     -0.223087      -144.483       144.483       2358.01       2502.49    
   9  0.162010      -1.82010      -1178.79       1178.79       1952.21       3131.00    
  10  0.113138      -2.17915      -1411.33       1411.33       2485.36       3896.69    
  11  0.973966     -0.263784E-01  -17.0840       17.0840       2472.87       2489.96    
  12  0.998107     -0.189521E-02  -1.22744       1.22744       2418.74       2419.97    
  13  0.631351     -0.459893      -297.851       297.851       2175.09       2472.94    
  14  0.698229     -0.359208      -232.642       232.642       2193.99       2426.63    
  15  0.359252      -1.02373      -663.023       663.023       2488.88       3151.90    
  16  0.936266     -0.658562E-01  -42.6520       42.6520       1852.82       1895.47    
  17  0.843107     -0.170662      -110.530       110.530       2680.66       2791.19    
  18  0.181284      -1.70769      -1105.99       1105.99       2157.22       3263.21    
  19  0.354246      -1.03777      -672.112       672.112       2319.38       2991.49    
  20  0.981540     -0.186324E-01  -12.0673       12.0673       2297.90       2309.96    
  21  0.582284E-01  -2.84338      -1841.53       1841.53       2167.72       4009.25    
  22  0.935088     -0.671143E-01  -43.4668       43.4668       2656.71       2700.18    
  23  0.682144     -0.382515      -247.737       247.737       2131.53       2379.27    
  24  0.441439     -0.817715      -529.596       529.596       2238.70       2768.30    
  25  0.325829      -1.12138      -726.267       726.267       2471.52       3197.79    
  26  0.956968E-01  -2.34657      -1519.76       1519.76       2336.44       3856.20    
  27  0.465124E-01  -3.06804      -1987.02       1987.02       2818.50       4805.52    
  28  0.645503     -0.437726      -283.495       283.495       2161.58       2445.07    
  29  0.184751      -1.68875      -1093.72       1093.72       2157.61       3251.33    
  30  0.676303     -0.391115      -253.307       253.307       2263.60       2516.91    
  31  0.408248     -0.895880      -580.220       580.220       2153.25       2733.47    
  32  0.215511      -1.53474      -993.982       993.982       2191.49       3185.47    
  33  0.762109     -0.271666      -175.946       175.946       2947.65       3123.59    
  34  0.445022     -0.809632      -524.361       524.361       2158.84       2683.20    
  35  0.667113     -0.404797      -262.168       262.168       2173.41       2435.58    
  36  0.995785     -0.422376E-02  -2.73553       2.73553       2614.73       2617.46    
  37  0.278840      -1.27712      -827.130       827.130       2415.49       3242.62    
  38  0.624255     -0.471196      -305.172       305.172       2157.09       2462.26    
  39  0.368212     -0.999097      -647.069       647.069       2158.26       2805.33    
  40  0.330266      -1.10786      -717.508       717.508       2584.06       3301.56    
  41  0.969155     -0.313304E-01  -20.2913       20.2913       2515.11       2535.40    
  42  0.686816     -0.375688      -243.316       243.316       2578.06       2821.38    
  43  0.201053      -1.60419      -1038.96       1038.96       2170.43       3209.38    
  44  0.481166     -0.731544      -473.787       473.787       2399.91       2873.70    
  45  0.992829     -0.719725E-02  -4.66132       4.66132       3294.48       3299.14    
  46  0.665697     -0.406921      -263.544       263.544       2461.70       2725.25    
  47  0.991934E-02  -4.61327      -2987.80       2987.80       2200.82       5188.62    
  48  0.211644      -1.55285      -1005.71       1005.71       2163.74       3169.44    
  49  0.908243E-01  -2.39883      -1553.61       1553.61       3686.49       5240.10    
  50  0.643762     -0.440426      -285.244       285.244       2871.85       3157.09    
  51  0.568794E-01  -2.86682      -1856.71       1856.71       3107.81       4964.52    
  52  0.159466      -1.83592      -1189.04       1189.04       3012.04       4201.08    
  53  0.918851     -0.846310E-01  -54.8115       54.8115       2975.45       3030.26    
  54  0.865178     -0.144820      -93.7931       93.7931       2769.52       2863.31    
  55  0.826009     -0.191150      -123.799       123.799       2539.20       2662.99    
  56  0.665816E-02  -5.01191      -3245.98       3245.98       2351.33       5597.31    
  57  0.998155     -0.184716E-02  -1.19632       1.19632       2154.48       2155.68    
  58  0.875957E-01  -2.43502      -1577.05       1577.05       2282.20       3859.25    
loop,thermsimp(1:2)       15   951.984       732.273    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       2316.27         68.48          1.22         39.02          0.43          0.05        109.19
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    2316.3        3.559     -2.652      3.041     -102.6     0.7102    
                      0.3465      1.118     -99.70      4.998     0.6905    

                       2.865     -2.528      1.540      7173.      7000.    

                      -2.030      0.000      0.000      0.000     -1.221    



                      -1.975      0.000      0.000      7000.      404.2    

                      -1.475     -5.114     -6.644     -7.518      8.079    

                      -12.48     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6611E-01 0.1896     0.4664E-01 0.1088    

                     -0.2486     0.1083     0.2000     0.1284     0.5161E-01



                     -0.8955    -0.5068      0.000     0.1087     0.1405    

                      0.1836     0.2656    -0.7116     0.1740     0.3950    

                      0.2025     0.4470E-01-0.4607     -1.451      7000.    



                      -1.239     -1.134     -2.142     -1.982    -0.3807    

                     -0.3252      9.325      8.525    -0.1684E+05 -5.950    

                     -0.1607     -2.299      8.725      9.125    -0.1969E+05



                      -6.000     0.5464    -0.8148E-01  8.825      9.125    

                     -0.1944E+05 -6.000    -0.2375    -0.2352      9.689    

                       8.507    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2316.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       15
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       16
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       80     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -378.065       378.065       1852.82       2230.89    
   2  0.850944     -0.161409      -104.537       104.537       2154.48       2259.02    
   3  0.343999      -1.06712      -691.121       691.121       2182.87       2874.00    
   4  0.481777E-02  -5.33544      -3455.52       3455.52       2297.90       5753.41    
   5  0.146991      -1.91738      -1241.80       1241.80       2154.33       3396.13    
   6  0.545677     -0.605728      -392.301       392.301       2214.01       2606.31    
   7  0.761940     -0.271888      -176.089       176.089       2131.53       2307.62    
   8  0.944477     -0.571238E-01  -36.9964       36.9964       2418.74       2455.74    
   9  0.965249     -0.353688E-01  -22.9067       22.9067       2193.99       2216.90    
  10  0.634176     -0.455429      -294.960       294.960       2173.41       2468.37    
  11  0.793205     -0.231673      -150.044       150.044       2161.58       2311.62    
  12  0.743605     -0.296246      -191.864       191.864       2157.09       2348.95    
  13  0.983069E-01  -2.31966      -1502.34       1502.34       2175.09       3677.43    
  14  0.618437     -0.480560      -311.236       311.236       2472.87       2784.11    
  15  0.429182     -0.845875      -547.834       547.834       2358.01       2905.84    
  16  0.771528     -0.259382      -167.989       167.989       2263.60       2431.59    
  17  0.218286      -1.52195      -985.694       985.694       2296.22       3281.92    
  18  0.556408     -0.586254      -379.689       379.689       2515.11       2894.80    
  19  0.526292     -0.641899      -415.728       415.728       2614.73       3030.46    
  20  0.665532     -0.407169      -263.704       263.704       2539.20       2802.90    
  21  0.261756      -1.34034      -868.078       868.078       2158.84       3026.92    
  22  0.975508     -0.247971E-01  -16.0599       16.0599       2656.71       2672.77    
  23  0.257613      -1.35630      -878.410       878.410       1979.33       2857.74    
  24  0.981555E-01  -2.32120      -1503.33       1503.33       2461.70       3965.04    
  25  0.955054     -0.459870E-01  -29.7836       29.7836       2153.25       2183.03    
  26  0.887906     -0.118890      -76.9994       76.9994       2238.70       2315.70    
  27  0.407043     -0.898837      -582.135       582.135       2680.66       3262.80    
  28  0.876870     -0.131396      -85.0992       85.0992       2158.26       2243.36    
  29  0.957152     -0.437935E-01  -28.3630       28.3630       2578.06       2606.42    
  30  0.827730     -0.189068      -122.450       122.450       2769.52       2891.97    
  31  0.289027      -1.24124      -803.891       803.891       2399.91       3203.80    
  32  0.125230      -2.07760      -1345.57       1345.57       2158.84       3504.41    
  33  0.242443      -1.41699      -917.717       917.717       2319.38       3237.10    
  34  0.654103     -0.424490      -274.922       274.922       2975.45       3250.37    
  35  0.811871     -0.208414      -134.980       134.980       2092.46       2227.44    
  36  0.145201E-01  -4.23222      -2741.01       2741.01       2947.65       5688.66    
  37  0.344449      -1.06581      -690.274       690.274       1952.21       2642.49    
  38  0.265532      -1.32602      -858.800       858.800       2488.88       3347.68    
  39  0.811851     -0.208438      -134.996       134.996       2871.85       3006.84    
  40  0.983290E-01  -2.31944      -1502.19       1502.19       2163.74       3665.93    
  41  0.347314      -1.05753      -684.910       684.910       2191.49       2876.40    
  42  0.923773     -0.792888E-01  -51.3516       51.3516       2471.52       2522.87    
  43  0.690375     -0.370520      -239.969       239.969       2170.43       2410.40    
  44  0.227523      -1.48051      -958.854       958.854       2415.49       3374.35    
  45  0.652275     -0.427289      -276.735       276.735       2157.61       2434.34    
  46  0.669640     -0.401014      -259.718       259.718       2157.22       2416.94    
  47  0.288804      -1.24201      -804.390       804.390       3294.48       4098.87    
  48  0.404648     -0.904738      -585.956       585.956       2584.06       3170.01    
  49  0.371042     -0.991440      -642.109       642.109       2336.44       2978.54    
  50  0.308424      -1.17628      -761.822       761.822       2282.20       3044.02    
  51  0.911221     -0.929703E-01  -60.2125       60.2125       2485.36       2545.57    
  52  0.615436     -0.485425      -314.387       314.387       2167.72       2482.11    
  53  0.780328     -0.248041      -160.644       160.644       3012.04       3172.68    
  54  0.127539      -2.05933      -1333.73       1333.73       2818.50       4152.23    
  55  0.709081     -0.343786      -222.654       222.654       3107.81       3330.47    
  56  0.974925     -0.253942E-01  -16.4467       16.4467       2200.82       2217.26    
  57  0.834943     -0.180392      -116.831       116.831       3686.49       3803.32    
  58  0.696274     -0.362013      -234.459       234.459       2316.27       2550.73    
loop,thermsimp(1:2)       16   378.065       104.537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82       2695.97         68.38          1.17         39.48          0.31          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2695.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       16
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       17
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       81     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -195.194       195.194       2153.25       2348.44    
   2  0.527958     -0.638738      -413.681       413.681       2193.99       2607.67    
   3  0.326119      -1.12049      -725.690       725.690       2200.82       2926.51    
   4  0.647061     -0.435314      -281.933       281.933       2092.46       2374.39    
   5  0.419805     -0.867966      -562.141       562.141       1852.82       2414.96    
   6  0.218417      -1.52135      -985.305       985.305       2158.26       3143.57    
   7  0.168864      -1.77866      -1151.96       1151.96       2154.48       3306.44    
   8  0.761417     -0.272575      -176.534       176.534       2131.53       2308.07    
   9  0.383989     -0.957143      -619.897       619.897       2161.58       2781.47    
  10  0.104774      -2.25595      -1461.07       1461.07       2238.70       3699.78    
  11  0.167912      -1.78432      -1155.62       1155.62       2157.09       3312.71    
  12  0.997930     -0.207190E-02  -1.34187       1.34187       2170.43       2171.77    
  13  0.493294     -0.706650      -457.664       457.664       2157.22       2614.88    
  14  0.483048     -0.727639      -471.258       471.258       2263.60       2734.86    
  15  0.715967     -0.334121      -216.395       216.395       2157.61       2374.00    
  16  0.595423E-01  -2.82107      -1827.07       1827.07       2418.74       4245.81    
  17  0.636569     -0.451662      -292.520       292.520       2173.41       2465.93    
  18  0.482980     -0.727779      -471.349       471.349       2167.72       2639.07    
  19  0.500121     -0.692905      -448.762       448.762       2471.52       2920.28    
  20  0.426980     -0.851018      -551.164       551.164       2485.36       3036.52    
  21  0.546576     -0.604082      -391.236       391.236       2316.27       2707.51    
  22  0.142720      -1.94687      -1260.90       1260.90       2214.01       3474.91    
  23  0.473622     -0.747346      -484.021       484.021       2578.06       3062.08    
  24  0.892718E-01  -2.41607      -1564.77       1564.77       1952.21       3516.99    
  25  0.660659     -0.414518      -268.464       268.464       2656.71       2925.18    
  26  0.328755      -1.11244      -720.478       720.478       2472.87       3193.35    
  27  0.544150     -0.608530      -394.116       394.116       2539.20       2933.31    
  28  0.199068      -1.61411      -1045.38       1045.38       1979.33       3024.72    
  29  0.685070     -0.378234      -244.965       244.965       2182.87       2427.84    
  30  0.500258     -0.692632      -448.585       448.585       2191.49       2640.08    
  31  0.130607      -2.03556      -1318.34       1318.34       2769.52       4087.86    
  32  0.982013E-01  -2.32074      -1503.03       1503.03       2515.11       4018.14    
  33  0.581494E-01  -2.84474      -1842.41       1842.41       2358.01       4200.41    
  34  0.841391     -0.172699      -111.849       111.849       2336.44       2448.28    
  35  0.838937E-01  -2.47820      -1605.02       1605.02       2871.85       4476.86    
  36  0.729848     -0.314919      -203.958       203.958       2158.84       2362.80    
  37  0.748292     -0.289962      -187.795       187.795       2614.73       2802.52    
  38  0.229216      -1.47309      -954.052       954.052       2282.20       3236.25    
  39  0.710713     -0.341487      -221.165       221.165       2584.06       2805.22    
  40  0.511506     -0.670395      -434.184       434.184       3012.04       3446.22    
  41  0.106756      -2.23721      -1448.93       1448.93       2399.91       3848.84    
  42  0.583466     -0.538770      -348.936       348.936       2319.38       2668.32    
  43  0.993140E-01  -2.30947      -1495.74       1495.74       2975.45       4471.18    
  44  0.461224     -0.773871      -501.200       501.200       2680.66       3181.86    
  45  0.574465     -0.554316      -359.004       359.004       2296.22       2655.23    
  46  0.715977     -0.334107      -216.386       216.386       3107.81       3324.20    
  47  0.877584     -0.130583      -84.5724       84.5724       2488.88       2573.45    
  48  0.492354     -0.708558      -458.900       458.900       2415.49       2874.39    
  49  0.874926     -0.133616      -86.5371       86.5371       2154.33       2240.86    
  50  0.800367     -0.222685      -144.223       144.223       2158.84       2303.06    
  51  0.507308     -0.678636      -439.521       439.521       2163.74       2603.26    
  52  0.727831     -0.317686      -205.750       205.750       2175.09       2380.84    
  53  0.899777E-01  -2.40819      -1559.67       1559.67       3686.49       5246.17    
  54  0.392780     -0.934505      -605.235       605.235       2461.70       3066.94    
  55  0.585301     -0.535629      -346.902       346.902       3294.48       3641.38    
  56  0.522884     -0.648395      -419.935       419.935       2818.50       3238.43    
  57  0.559213     -0.581225      -376.432       376.432       2947.65       3324.08    
  58  0.116989      -2.14568      -1389.65       1389.65       2695.97       4085.62    
loop,thermsimp(1:2)       17   195.194       413.681    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83       2532.40         68.25          1.18         39.41          0.18          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84       4402.98         68.09          1.11         39.44          0.48          0.05        109.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2532.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       17
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       18
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       83     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -621.803       621.803       2170.43       2792.23    
   2  0.293468      -1.22599      -794.015       794.015       2154.33       2948.34    
   3  0.954036     -0.470539E-01  -30.4746       30.4746       2158.84       2189.31    
   4  0.452934     -0.792010      -512.948       512.948       2131.53       2644.48    
   5  0.251692      -1.37955      -893.469       893.469       2153.25       3046.72    
   6  0.881081     -0.126605      -81.9964       81.9964       2158.84       2240.84    
   7  0.855311     -0.156290      -101.222       101.222       2157.61       2258.83    
   8  0.576474     -0.550824      -356.743       356.743       2092.46       2449.20    
   9  0.433835     -0.835090      -540.849       540.849       2175.09       2715.94    
  10  0.298626      -1.20856      -782.731       782.731       1852.82       2635.55    
  11  0.269991      -1.30937      -848.016       848.016       2182.87       3030.89    
  12  0.884826     -0.122364      -79.2495       79.2495       2336.44       2415.68    
  13  0.664124     -0.409287      -265.076       265.076       2173.41       2438.49    
  14  0.580836     -0.543287      -351.862       351.862       2488.88       2840.74    
  15  0.285501      -1.25351      -811.839       811.839       2163.74       2975.57    
  16  0.690757     -0.369967      -239.611       239.611       2193.99       2433.60    
  17  0.578320     -0.547628      -354.673       354.673       2157.22       2511.89    
  18  0.563230     -0.574067      -371.796       371.796       2167.72       2539.52    
  19  0.681565     -0.383363      -248.286       248.286       2191.49       2439.78    
  20  0.453362     -0.791065      -512.335       512.335       2296.22       2808.56    
  21  0.645457     -0.437797      -283.541       283.541       2319.38       2602.92    
  22  0.982222E-01  -2.32052      -1502.89       1502.89       2316.27       3819.17    
  23  0.843064     -0.170712      -110.562       110.562       2263.60       2374.17    
  24  0.505683     -0.681845      -441.599       441.599       2161.58       2603.18    
  25  0.350376      -1.04875      -679.226       679.226       2614.73       3293.95    
  26  0.367167      -1.00194      -648.910       648.910       2584.06       3232.97    
  27  0.268175      -1.31611      -852.385       852.385       2415.49       3267.88    
  28  0.989085E-01  -2.31356      -1498.38       1498.38       2471.52       3969.90    
  29  0.349392      -1.05156      -681.047       681.047       2656.71       3337.76    
  30  0.945468     -0.560755E-01  -36.3174       36.3174       2200.82       2237.13    
  31  0.305400      -1.18613      -768.202       768.202       2539.20       3307.40    
  32  0.942706     -0.590006E-01  -38.2120       38.2120       1979.33       2017.54    
  33  0.778346     -0.250584      -162.292       162.292       2485.36       2647.65    
  34  0.256449      -1.36083      -881.343       881.343       2578.06       3459.40    
  35  0.338120      -1.08436      -702.286       702.286       2461.70       3163.99    
  36  0.644609     -0.439112      -284.392       284.392       2158.26       2442.65    
  37  0.420837     -0.865509      -560.549       560.549       2680.66       3241.21    
  38  0.793406     -0.231421      -149.880       149.880       2472.87       2622.75    
  39  0.685561     -0.377517      -244.500       244.500       2282.20       2526.70    
  40  0.278740      -1.27748      -827.362       827.362       2818.50       3645.86    
  41  0.414078     -0.881700      -571.036       571.036       2154.48       2725.52    
  42  0.999720     -0.280334E-03 -0.181559      0.181559       2157.09       2157.27    
  43  0.714259     -0.336509      -217.941       217.941       2947.65       3165.59    
  44  0.713371     -0.337753      -218.747       218.747       3107.81       3326.56    
  45  0.451360     -0.795490      -515.202       515.202       3012.04       3527.24    
  46  0.887280     -0.119595      -77.4561       77.4561       2214.01       2291.47    
  47  0.234319      -1.45107      -939.792       939.792       1952.21       2892.00    
  48  0.277567E-01  -3.58428      -2321.37       2321.37       3294.48       5615.84    
  49  0.582411     -0.540579      -350.107       350.107       2238.70       2588.81    
  50  0.969019     -0.314707E-01  -20.3821       20.3821       2399.91       2420.29    
  51  0.441889     -0.816696      -528.936       528.936       2515.11       3044.05    
  52  0.150247      -1.89548      -1227.61       1227.61       2695.97       3923.58    
  53  0.901555E-01  -2.40622      -1558.40       1558.40       2769.52       4327.92    
  54  0.274120      -1.29419      -838.187       838.187       2358.01       3196.19    
  55  0.166801      -1.79095      -1159.92       1159.92       2418.74       3578.66    
  56  0.783053     -0.244555      -158.387       158.387       2975.45       3133.84    
  57  0.541655     -0.613126      -397.093       397.093       2871.85       3268.94    
  58  0.113786      -2.17344      -1407.63       1407.63       2532.40       3940.03    
loop,thermsimp(1:2)       18   621.803       794.015    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85       2807.78         68.40          1.22         39.07          0.35          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86       5539.06         68.47          1.15         38.93          0.52          0.05        109.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2807.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       18
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       19
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       85     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -674.408       674.408       1979.33       2653.74    
   2  0.270835E-01  -3.60883      -2337.27       2337.27       2157.09       4494.36    
   3  0.923755     -0.793087E-01  -51.3645       51.3645       2158.84       2210.20    
   4  0.535520     -0.624517      -404.470       404.470       2200.82       2605.29    
   5  0.629344     -0.463078      -299.914       299.914       2158.84       2458.76    
   6  0.572648E-01  -2.86007      -1852.33       1852.33       2157.61       4009.94    
   7  0.353113E-01  -3.34355      -2165.46       2165.46       2214.01       4379.47    
   8  0.580838     -0.543283      -351.859       351.859       2263.60       2615.46    
   9  0.370403     -0.993164      -643.226       643.226       2336.44       2979.66    
  10  0.443010     -0.814162      -527.295       527.295       2399.91       2927.21    
  11  0.188704      -1.66757      -1080.01       1080.01       2193.99       3274.00    
  12  0.177608      -1.72818      -1119.26       1119.26       2173.41       3292.67    
  13  0.694998     -0.363847      -235.646       235.646       2191.49       2427.14    
  14  0.160742      -1.82796      -1183.88       1183.88       2158.26       3342.14    
  15  0.290050      -1.23770      -801.602       801.602       2092.46       2894.06    
  16  0.441138E-01  -3.12098      -2021.31       2021.31       2157.22       4178.53    
  17  0.372461     -0.987622      -639.637       639.637       2282.20       2921.84    
  18  0.652779     -0.426517      -276.235       276.235       2167.72       2443.96    
  19  0.998108     -0.189387E-02  -1.22657       1.22657       2238.70       2239.93    
  20  0.741140     -0.299566      -194.015       194.015       2319.38       2513.40    
  21  0.623042     -0.473141      -306.432       306.432       2161.58       2468.01    
  22  0.504617     -0.683955      -442.966       442.966       2472.87       2915.84    
  23  0.872499     -0.136394      -88.3361       88.3361       1852.82       1941.16    
  24  0.142620      -1.94757      -1261.35       1261.35       2131.53       3392.88    
  25  0.580285     -0.544236      -352.476       352.476       2485.36       2837.84    
  26  0.860063E-01  -2.45334      -1588.91       1588.91       2175.09       3764.00    
  27  0.401846     -0.911687      -590.457       590.457       2154.48       2744.94    
  28  0.161242      -1.82485      -1181.87       1181.87       2170.43       3352.30    
  29  0.550753     -0.596469      -386.305       386.305       2296.22       2682.53    
  30  0.815012     -0.204553      -132.479       132.479       2488.88       2621.36    
  31  0.438663     -0.824024      -533.681       533.681       1952.21       2485.89    
  32  0.542283     -0.611968      -396.343       396.343       2154.33       2550.67    
  33  0.943132E-01  -2.36113      -1529.20       1529.20       2163.74       3692.93    
  34  0.236587      -1.44144      -933.552       933.552       2182.87       3116.43    
  35  0.283068      -1.26207      -817.382       817.382       2515.11       3332.49    
  36  0.973178     -0.271886E-01  -17.6088       17.6088       2153.25       2170.86    
  37  0.596723     -0.516302      -334.384       334.384       2975.45       3309.83    
  38  0.595114     -0.519003      -336.134       336.134       2461.70       2797.84    
  39  0.948736     -0.526250E-01  -34.0828       34.0828       2947.65       2981.73    
  40  0.216072E-01  -3.83473      -2483.57       2483.57       2358.01       4841.58    
  41  0.440213     -0.820496      -531.397       531.397       2584.06       3115.45    
  42  0.905197     -0.996023E-01  -64.5078       64.5078       2680.66       2745.17    
  43  0.158396      -1.84266      -1193.40       1193.40       2415.49       3608.90    
  44  0.287789      -1.24553      -806.669       806.669       2871.85       3678.52    
  45  0.238244      -1.43446      -929.034       929.034       2614.73       3543.76    
  46  0.363881      -1.01093      -654.730       654.730       2539.20       3193.93    
  47  0.828805     -0.187771      -121.610       121.610       3107.81       3229.42    
  48  0.587140     -0.532492      -344.870       344.870       2656.71       3001.58    
  49  0.141687      -1.95414      -1265.60       1265.60       2578.06       3843.67    
  50  0.879115     -0.128839      -83.4430       83.4430       3012.04       3095.48    
  51  0.742190     -0.298150      -193.098       193.098       2418.74       2611.84    
  52  0.218958      -1.51887      -983.704       983.704       2818.50       3802.20    
  53  0.333192      -1.09904      -711.795       711.795       2316.27       3028.07    
  54  0.356774      -1.03065      -667.506       667.506       2695.97       3363.48    
  55  0.739597     -0.301650      -195.365       195.365       2532.40       2727.77    
  56  0.224658E-01  -3.79576      -2458.34       2458.34       2471.52       4929.86    
  57  0.338214      -1.08408      -702.105       702.105       2769.52       3471.63    
  58  0.227014      -1.48275      -960.305       960.305       2807.78       3768.08    
loop,thermsimp(1:2)       19   674.408       2337.27    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87       2100.29         68.48          1.20         39.02          0.29          0.05        109.04
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88       2171.26         68.25          1.26         39.16          0.46          0.05        109.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2100.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       19
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       20
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       87     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -405.407       405.407       1852.82       2258.23    
   2  0.288348      -1.24359      -805.414       805.414       2153.25       2958.67    
   3  0.910112E-01  -2.39677      -1552.28       1552.28       2158.84       3711.12    
   4  0.213812      -1.54266      -999.107       999.107       2238.70       3237.81    
   5  0.575222     -0.552999      -358.151       358.151       2191.49       2549.64    
   6  0.855707     -0.155827      -100.922       100.922       2167.72       2268.65    
   7  0.818692     -0.200047      -129.561       129.561       2158.84       2288.41    
   8  0.309911      -1.17147      -758.707       758.707       2161.58       2920.28    
   9  0.773438     -0.256910      -166.388       166.388       1952.21       2118.60    
  10  0.440502E-01  -3.12243      -2022.25       2022.25       2319.38       4341.63    
  11  0.211655      -1.55280      -1005.67       1005.67       2154.33       3160.00    
  12  0.713577     -0.337465      -218.561       218.561       2200.82       2419.38    
  13  0.927405     -0.753650E-01  -48.8104       48.8104       2418.74       2467.55    
  14  0.360229      -1.02101      -661.263       661.263       2263.60       2924.87    
  15  0.911872     -0.922553E-01  -59.7495       59.7495       2488.88       2548.63    
  16  0.800691     -0.222280      -143.961       143.961       1979.33       2123.29    
  17  0.169830      -1.77296      -1148.26       1148.26       2296.22       3444.48    
  18  0.581014     -0.542980      -351.663       351.663       2532.40       2884.06    
  19  0.869395     -0.139958      -90.6440       90.6440       2154.48       2245.13    
  20  0.773880     -0.256338      -166.018       166.018       2680.66       2846.68    
  21  0.496085     -0.701008      -454.010       454.010       2461.70       2915.71    
  22  0.530037     -0.634809      -411.136       411.136       2485.36       2896.49    
  23  0.239414      -1.42956      -925.861       925.861       2092.46       3018.32    
  24  0.595728     -0.517972      -335.466       335.466       2472.87       2808.34    
  25  0.170793      -1.76730      -1144.60       1144.60       2282.20       3426.80    
  26  0.983027     -0.171183E-01  -11.0867       11.0867       2399.91       2411.00    
  27  0.608714     -0.496407      -321.499       321.499       2336.44       2657.93    
  28  0.518727     -0.656378      -425.105       425.105       2947.65       3372.75    
  29  0.887918     -0.118876      -76.9903       76.9903       2656.71       2733.70    
  30  0.140498      -1.96256      -1271.06       1271.06       2316.27       3587.33    
  31  0.256308      -1.36138      -881.699       881.699       3012.04       3893.74    
  32  0.887238     -0.119642      -77.4863       77.4863       2584.06       2661.54    
  33  0.306042      -1.18403      -766.843       766.843       2182.87       2949.72    
  34  0.993873     -0.614632E-02  -3.98068       3.98068       2539.20       2543.18    
  35  0.275412E-01  -3.59207      -2326.42       2326.42       3107.81       5434.23    
  36  0.698960     -0.358161      -231.964       231.964       2193.99       2425.96    
  37  0.268424      -1.31519      -851.784       851.784       2173.41       3025.20    
  38  0.580935E-01  -2.84570      -1843.03       1843.03       2975.45       4818.48    
  39  0.242705      -1.41591      -917.018       917.018       2515.11       3432.13    
  40  0.443517     -0.813019      -526.554       526.554       2158.26       2684.81    
  41  0.904179     -0.100728      -65.2367       65.2367       2170.43       2235.67    
  42  0.454025     -0.789603      -511.389       511.389       2695.97       3207.36    
  43  0.592994     -0.522572      -338.445       338.445       2131.53       2469.98    
  44  0.401796     -0.911812      -590.538       590.538       2769.52       3360.06    
  45  0.130776      -2.03427      -1317.50       1317.50       2614.73       3932.23    
  46  0.709753     -0.342839      -222.041       222.041       2415.49       2637.53    
  47  0.388071     -0.946568      -613.048       613.048       2871.85       3484.89    
  48  0.362521      -1.01467      -657.155       657.155       2163.74       2820.89    
  49  0.285379      -1.25394      -812.116       812.116       2175.09       2987.21    
  50  0.286508      -1.24999      -809.559       809.559       2807.78       3617.34    
  51  0.951542     -0.496714E-01  -32.1699       32.1699       2818.50       2850.67    
  52  0.122933      -2.09612      -1357.56       1357.56       2578.06       3935.62    
  53  0.210928      -1.55624      -1007.90       1007.90       2157.61       3165.51    
  54  0.860093     -0.150715      -97.6110       97.6110       2157.22       2254.83    
  55  0.997563     -0.243951E-02  -1.57996       1.57996       2214.01       2215.59    
  56  0.750720     -0.286722      -185.696       185.696       2157.09       2342.79    
  57  0.667101     -0.404814      -262.179       262.179       2358.01       2620.18    
  58  0.508750E-01  -2.97838      -1928.96       1928.96       2100.29       4029.25    
loop,thermsimp(1:2)       20   405.407       805.414    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89       2474.83         68.42          1.15         39.10          0.38          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2474.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       20
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       21
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       88     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -785.347       785.347       1952.21       2737.56    
   2  0.663536     -0.410173      -265.650       265.650       1979.33       2244.98    
   3  0.263982      -1.33188      -862.594       862.594       2214.01       3076.61    
   4  0.792402     -0.232686      -150.700       150.700       2170.43       2321.13    
   5  0.624731     -0.470434      -304.678       304.678       2154.48       2459.16    
   6  0.170977      -1.76622      -1143.90       1143.90       2157.22       3301.12    
   7  0.362487      -1.01477      -657.217       657.217       1852.82       2510.04    
   8  0.659245     -0.416659      -269.851       269.851       2167.72       2437.58    
   9  0.746481E-03  -7.20014      -4663.19       4663.19       2158.84       6822.04    
  10  0.690046     -0.370998      -240.278       240.278       2157.09       2397.37    
  11  0.905636     -0.991173E-01  -64.1936       64.1936       2399.91       2464.10    
  12  0.317643      -1.14683      -742.747       742.747       2200.82       2943.56    
  13  0.321948      -1.13336      -734.027       734.027       2193.99       2928.02    
  14  0.293974      -1.22426      -792.899       792.899       2418.74       3211.64    
  15  0.679275     -0.386729      -250.466       250.466       2131.53       2382.00    
  16  0.180340      -1.71291      -1109.37       1109.37       2539.20       3648.57    
  17  0.539600     -0.616927      -399.555       399.555       2488.88       2888.43    
  18  0.260315      -1.34586      -871.651       871.651       2191.49       3063.14    
  19  0.256777      -1.35955      -880.515       880.515       2358.01       3238.52    
  20  0.518851     -0.656138      -424.950       424.950       2415.49       2840.44    
  21  0.485887     -0.721780      -467.463       467.463       2336.44       2803.90    
  22  0.562814     -0.574805      -372.274       372.274       2584.06       2956.33    
  23  0.906369     -0.983082E-01  -63.6696       63.6696       2158.26       2221.93    
  24  0.332143      -1.10219      -713.837       713.837       2656.71       3370.55    
  25  0.912001E-01  -2.39470      -1550.93       1550.93       2472.87       4023.81    
  26  0.302569      -1.19545      -774.234       774.234       2163.74       2937.97    
  27  0.362040      -1.01600      -658.016       658.016       2680.66       3338.68    
  28  0.630870     -0.460656      -298.345       298.345       2818.50       3116.84    
  29  0.685312     -0.377881      -244.736       244.736       2532.40       2777.14    
  30  0.329910      -1.10894      -718.206       718.206       2485.36       3203.57    
  31  0.906630E-01  -2.40061      -1554.76       1554.76       2461.70       4016.46    
  32  0.339749      -1.07955      -699.174       699.174       2161.58       2860.75    
  33  0.783039     -0.244573      -158.398       158.398       2263.60       2422.00    
  34  0.322673      -1.13112      -732.572       732.572       2182.87       2915.45    
  35  0.255311      -1.36527      -884.222       884.222       2153.25       3037.47    
  36  0.645921     -0.437078      -283.075       283.075       2175.09       2458.17    
  37  0.240122      -1.42661      -923.947       923.947       2092.46       3016.41    
  38  0.224638      -1.49326      -967.117       967.117       2173.41       3140.53    
  39  0.682659     -0.381760      -247.248       247.248       2154.33       2401.58    
  40  0.533856     -0.627629      -406.486       406.486       2157.61       2564.09    
  41  0.439620E-02  -5.42701      -3514.82       3514.82       2695.97       6210.79    
  42  0.409891     -0.891863      -577.618       577.618       2238.70       2816.32    
  43  0.379406     -0.969149      -627.672       627.672       2769.52       3397.19    
  44  0.982111     -0.180514E-01  -11.6910       11.6910       2947.65       2959.34    
  45  0.243530      -1.41251      -914.819       914.819       2282.20       3197.02    
  46  0.709323     -0.343445      -222.433       222.433       2515.11       2737.55    
  47  0.212014      -1.55110      -1004.58       1004.58       2296.22       3300.80    
  48  0.530919     -0.633146      -410.059       410.059       2871.85       3281.91    
  49  0.439600     -0.821890      -532.300       532.300       2316.27       2848.57    
  50  0.304385      -1.18946      -770.358       770.358       2807.78       3578.14    
  51  0.850253     -0.162221      -105.063       105.063       2158.84       2263.90    
  52  0.686564     -0.376055      -243.553       243.553       3012.04       3255.59    
  53  0.894299     -0.111715      -72.3524       72.3524       2614.73       2687.08    
  54  0.724097E-02  -4.92800      -3191.64       3191.64       2578.06       5769.70    
  55  0.666382     -0.405892      -262.877       262.877       2100.29       2363.17    
  56  0.216072      -1.53214      -992.299       992.299       2319.38       3311.68    
  57  0.481454     -0.730944      -473.398       473.398       2975.45       3448.85    
  58  0.107413      -2.23107      -1444.96       1444.96       2474.83       3919.79    
loop,thermsimp(1:2)       21   785.347       265.650    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       2168.20         68.39          1.18         39.14          0.51          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       2237.86         68.26          1.23         39.18          0.31          0.05        109.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2168.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       21
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       22
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       90     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -620.432       620.432       2158.26       2778.69    
   2  0.741480     -0.299107      -193.717       193.717       1979.33       2173.05    
   3  0.138898      -1.97401      -1278.48       1278.48       2158.84       3437.32    
   4  0.751974E-01  -2.58764      -1675.89       1675.89       2170.43       3846.32    
   5  0.824485     -0.192996      -124.995       124.995       2100.29       2225.29    
   6  0.982900     -0.172482E-01  -11.1709       11.1709       2131.53       2142.70    
   7  0.693409     -0.366136      -237.129       237.129       2157.09       2394.22    
   8  0.941572     -0.602045E-01  -38.9916       38.9916       2154.33       2193.32    
   9  0.812713     -0.207378      -134.309       134.309       2263.60       2397.91    
  10  0.879507     -0.128393      -83.1543       83.1543       2167.72       2250.88    
  11  0.418958     -0.869984      -563.448       563.448       2175.09       2738.54    
  12  0.314952      -1.15533      -748.256       748.256       2154.48       2902.74    
  13  0.812426     -0.207731      -134.538       134.538       2399.91       2534.45    
  14  0.213788      -1.54277      -999.179       999.179       1852.82       2852.00    
  15  0.521629     -0.650798      -421.491       421.491       2157.61       2579.10    
  16  0.287143      -1.24777      -808.125       808.125       2614.73       3422.85    
  17  0.518340     -0.657125      -425.589       425.589       2515.11       2940.70    
  18  0.712802E-02  -4.94372      -3201.82       3201.82       1952.21       5154.03    
  19  0.579935     -0.544838      -352.866       352.866       2532.40       2885.27    
  20  0.508101E-02  -5.28224      -3421.06       3421.06       2336.44       5757.50    
  21  0.984466     -0.156557E-01  -10.1395       10.1395       2238.70       2248.84    
  22  0.394325     -0.930579      -602.692       602.692       2415.49       3018.19    
  23  0.837309     -0.177562      -114.999       114.999       2316.27       2431.27    
  24  0.683519     -0.380501      -246.433       246.433       2161.58       2408.01    
  25  0.892337     -0.113912      -73.7754       73.7754       2488.88       2562.65    
  26  0.297675      -1.21175      -784.796       784.796       2182.87       2967.67    
  27  0.566054     -0.569065      -368.557       368.557       2193.99       2562.55    
  28  0.325499E-01  -3.42498      -2218.20       2218.20       2163.74       4381.94    
  29  0.721169     -0.326882      -211.706       211.706       2200.82       2412.52    
  30  0.370449     -0.993040      -643.146       643.146       2584.06       3227.20    
  31  0.398952     -0.918913      -595.137       595.137       2947.65       3542.78    
  32  0.942469     -0.592518E-01  -38.3746       38.3746       2092.46       2130.84    
  33  0.379045     -0.970101      -628.289       628.289       2153.25       2781.54    
  34  0.218373      -1.52155      -985.437       985.437       2191.49       3176.93    
  35  0.413944     -0.882024      -571.245       571.245       2214.01       2785.26    
  36  0.452532     -0.792896      -513.522       513.522       2818.50       3332.02    
  37  0.938896     -0.630505E-01  -40.8348       40.8348       2173.41       2214.25    
  38  0.389299     -0.943409      -611.002       611.002       2282.20       2893.20    
  39  0.943794     -0.578471E-01  -37.4649       37.4649       2485.36       2522.82    
  40  0.706887     -0.346884      -224.661       224.661       2418.74       2643.40    
  41  0.274873      -1.29145      -836.409       836.409       2358.01       3194.42    
  42  0.343864      -1.06751      -691.376       691.376       3012.04       3703.42    
  43  0.869527E-01  -2.44239      -1581.82       1581.82       2871.85       4453.67    
  44  0.859615     -0.151271      -97.9709       97.9709       2296.22       2394.19    
  45  0.264079      -1.33151      -862.355       862.355       2157.22       3019.57    
  46  0.494871     -0.703457      -455.596       455.596       2319.38       2774.98    
  47  0.112943      -2.18087      -1412.45       1412.45       2680.66       4093.11    
  48  0.358273      -1.02646      -664.790       664.790       2656.71       3321.50    
  49  0.215257      -1.53592      -994.744       994.744       2769.52       3764.26    
  50  0.441681     -0.817166      -529.240       529.240       2975.45       3504.69    
  51  0.888276     -0.118473      -76.7295       76.7295       2807.78       2884.51    
  52  0.780286     -0.248095      -160.680       160.680       2539.20       2699.88    
  53  0.488747     -0.715911      -463.662       463.662       2474.83       2938.49    
  54  0.683795     -0.380097      -246.171       246.171       2461.70       2707.88    
  55  0.466986     -0.761456      -493.159       493.159       2472.87       2966.03    
  56  0.900497     -0.104809      -67.8797       67.8797       2578.06       2645.94    
  57  0.876058     -0.132323      -85.6992       85.6992       2695.97       2781.67    
  58  0.413808     -0.882354      -571.460       571.460       2168.20       2739.66    
loop,thermsimp(1:2)       22   620.432       193.717    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92       2101.37         68.32          1.21         39.05          0.53          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93       2123.98         68.49          1.19         38.86          0.46          0.05        109.06
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2101.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       22
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       23
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       92     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -722.646       722.646       2092.46       2815.11    
   2  0.736029     -0.306486      -198.496       198.496       2131.53       2330.03    
   3  0.608436     -0.496864      -321.796       321.796       1979.33       2301.13    
   4  0.584882     -0.536346      -347.366       347.366       2154.33       2501.69    
   5  0.617514     -0.482053      -312.203       312.203       2173.41       2485.61    
   6  0.376473     -0.976909      -632.698       632.698       2100.29       2732.99    
   7  0.535145     -0.625218      -404.925       404.925       2238.70       2643.63    
   8  0.341783      -1.07358      -695.307       695.307       2167.72       2863.03    
   9  0.804208E-01  -2.52048      -1632.40       1632.40       2296.22       3928.62    
  10  0.660499     -0.414760      -268.621       268.621       2157.09       2425.71    
  11  0.739860E-01  -2.60388      -1686.41       1686.41       2263.60       3950.02    
  12  0.203251      -1.59331      -1031.91       1031.91       2161.58       3193.49    
  13  0.637025     -0.450946      -292.057       292.057       2200.82       2492.87    
  14  0.687460     -0.374752      -242.709       242.709       2316.27       2558.98    
  15  0.663581     -0.410105      -265.606       265.606       2485.36       2750.96    
  16  0.579690     -0.545263      -353.141       353.141       2399.91       2753.05    
  17  0.775653     -0.254050      -164.537       164.537       2193.99       2358.53    
  18  0.284124      -1.25834      -814.970       814.970       2488.88       3303.85    
  19  0.317710      -1.14662      -742.609       742.609       2157.61       2900.22    
  20  0.958871     -0.419990E-01  -27.2008       27.2008       2418.74       2445.94    
  21  0.582932     -0.539685      -349.529       349.529       2578.06       2927.59    
  22  0.905476     -0.992942E-01  -64.3082       64.3082       2539.20       2603.50    
  23  0.225214      -1.49070      -965.458       965.458       2461.70       3427.16    
  24  0.618260     -0.480846      -311.421       311.421       2175.09       2486.51    
  25  0.608706     -0.496420      -321.508       321.508       2168.20       2489.71    
  26  0.651052     -0.429165      -277.950       277.950       2319.38       2597.33    
  27  0.138439E-02  -6.58249      -4263.17       4263.17       2158.26       6421.43    
  28  0.157375      -1.84913      -1197.59       1197.59       2153.25       3350.84    
  29  0.168063      -1.78342      -1155.04       1155.04       2695.97       3851.00    
  30  0.924354     -0.786598E-01  -50.9443       50.9443       2214.01       2264.96    
  31  0.985585     -0.145204E-01  -9.40419       9.40419       1852.82       1862.22    
  32  0.540844E-01  -2.91721      -1889.34       1889.34       2807.78       4697.12    
  33  0.535345     -0.624843      -404.682       404.682       2532.40       2937.08    
  34  0.736351     -0.306048      -198.213       198.213       2282.20       2480.41    
  35  0.283062E-01  -3.56467      -2308.67       2308.67       2154.48       4463.16    
  36  0.690743     -0.369987      -239.623       239.623       2474.83       2714.45    
  37  0.260994      -1.34326      -869.964       869.964       2515.11       3385.08    
  38  0.243637      -1.41208      -914.537       914.537       2472.87       3387.41    
  39  0.850226     -0.162253      -105.084       105.084       2182.87       2287.96    
  40  0.589307     -0.528809      -342.485       342.485       2415.49       2757.98    
  41  0.515087     -0.663420      -429.666       429.666       2157.22       2586.88    
  42  0.348855      -1.05310      -682.044       682.044       2191.49       2873.53    
  43  0.791407     -0.233943      -151.514       151.514       2358.01       2509.52    
  44  0.370775     -0.992160      -642.575       642.575       2584.06       3226.63    
  45  0.676021     -0.391531      -253.577       253.577       2656.71       2910.29    
  46  0.125601      -2.07465      -1343.65       1343.65       2818.50       4162.15    
  47  0.582904     -0.539733      -349.560       349.560       2614.73       2964.29    
  48  0.818994     -0.199679      -129.323       129.323       2158.84       2288.16    
  49  0.291406      -1.23304      -798.581       798.581       2975.45       3774.03    
  50  0.887104     -0.119794      -77.5847       77.5847       2947.65       3025.23    
  51  0.666242     -0.406102      -263.013       263.013       3012.04       3275.05    
  52  0.931047     -0.714460E-01  -46.2723       46.2723       2769.52       2815.79    
  53  0.169651      -1.77401      -1148.94       1148.94       2170.43       3319.37    
  54  0.228429      -1.47653      -956.279       956.279       2680.66       3636.94    
  55  0.453181     -0.791463      -512.594       512.594       2163.74       2676.33    
  56  0.376518     -0.976789      -632.620       632.620       2871.85       3504.47    
  57  0.551543     -0.595035      -385.376       385.376       1952.21       2337.59    
  58  0.837469     -0.177371      -114.875       114.875       2101.37       2216.24    
loop,thermsimp(1:2)       23   722.646       198.496    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94       2108.39         68.43          1.17         38.93          0.48          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95       2190.33         68.46          1.23         39.24          0.20          0.05        109.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2108.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       23
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       24
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       94     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -798.367       798.367       1852.82       2651.19    
   2  0.991852     -0.818183E-02  -5.29899       5.29899       2101.37       2106.67    
   3  0.317368      -1.14769      -743.308       743.308       2214.01       2957.32    
   4  0.737330     -0.304720      -197.353       197.353       2182.87       2380.23    
   5  0.834641     -0.180753      -117.065       117.065       2158.84       2275.91    
   6  0.464401     -0.767007      -496.755       496.755       1979.33       2476.09    
   7  0.592116     -0.524053      -339.405       339.405       2131.53       2470.94    
   8  0.464372     -0.767069      -496.794       496.794       1952.21       2449.01    
   9  0.636055E-01  -2.75505      -1784.32       1784.32       2193.99       3978.31    
  10  0.712927     -0.338376      -219.150       219.150       2157.09       2376.24    
  11  0.265597      -1.32578      -858.643       858.643       2418.74       3277.38    
  12  0.152318      -1.88178      -1218.74       1218.74       2282.20       3500.94    
  13  0.629580     -0.462703      -299.671       299.671       2173.41       2473.08    
  14  0.849464     -0.163150      -105.664       105.664       2175.09       2280.75    
  15  0.487816     -0.717817      -464.896       464.896       2168.20       2633.10    
  16  0.374667     -0.981718      -635.813       635.813       2200.82       2836.63    
  17  0.657383     -0.419488      -271.683       271.683       2154.33       2426.01    
  18  0.846901     -0.166172      -107.622       107.622       2358.01       2465.63    
  19  0.201185      -1.60353      -1038.53       1038.53       2316.27       3354.81    
  20  0.771980     -0.258797      -167.611       167.611       2157.22       2324.83    
  21  0.507739     -0.677788      -438.972       438.972       2319.38       2758.35    
  22  0.280262      -1.27203      -823.835       823.835       2539.20       3363.03    
  23  0.285359      -1.25401      -812.162       812.162       2238.70       3050.87    
  24  0.246191      -1.40165      -907.780       907.780       2163.74       3071.52    
  25  0.559989E-01  -2.88242      -1866.81       1866.81       2474.83       4341.64    
  26  0.330462      -1.10726      -717.123       717.123       2100.29       2817.42    
  27  0.899405     -0.106022      -68.6656       68.6656       2485.36       2554.02    
  28  0.637003     -0.450981      -292.079       292.079       2399.91       2691.99    
  29  0.699726E-01  -2.65965      -1722.53       1722.53       2415.49       4138.03    
  30  0.677191     -0.389802      -252.456       252.456       2092.46       2344.92    
  31  0.649507     -0.431542      -279.490       279.490       2769.52       3049.01    
  32  0.527986     -0.638685      -413.646       413.646       2167.72       2581.37    
  33  0.374870E-01  -3.28376      -2126.74       2126.74       2191.49       4318.23    
  34  0.448697     -0.801407      -519.034       519.034       2157.61       2676.64    
  35  0.809612     -0.211200      -136.784       136.784       2656.71       2793.50    
  36  0.836235     -0.178846      -115.830       115.830       2578.06       2693.89    
  37  0.198161      -1.61867      -1048.34       1048.34       2532.40       3580.74    
  38  0.222702      -1.50192      -972.723       972.723       2614.73       3587.45    
  39  0.888863     -0.117812      -76.3012       76.3012       2947.65       3023.95    
  40  0.868267     -0.141256      -91.4848       91.4848       2161.58       2253.06    
  41  0.164066      -1.80749      -1170.62       1170.62       2584.06       3754.68    
  42  0.163797      -1.80912      -1171.69       1171.69       3012.04       4183.72    
  43  0.883498     -0.123867      -80.2226       80.2226       2488.88       2569.10    
  44  0.749983     -0.287705      -186.333       186.333       2170.43       2356.76    
  45  0.666691     -0.405428      -262.577       262.577       2153.25       2415.83    
  46  0.978530     -0.217038E-01  -14.0565       14.0565       2515.11       2529.17    
  47  0.442024     -0.816391      -528.739       528.739       2472.87       3001.61    
  48  0.228080      -1.47806      -957.270       957.270       2461.70       3418.97    
  49  0.226174      -1.48645      -962.704       962.704       2871.85       3834.55    
  50  0.388394     -0.945736      -612.509       612.509       2680.66       3293.17    
  51  0.257425      -1.35703      -878.882       878.882       2975.45       3854.33    
  52  0.707288     -0.346317      -224.294       224.294       2695.97       2920.26    
  53  0.518387     -0.657032      -425.529       425.529       2296.22       2721.75    
  54  0.628700     -0.464102      -300.577       300.577       2263.60       2564.18    
  55  0.981249     -0.189295E-01  -12.2598       12.2598       2818.50       2830.76    
  56  0.928260     -0.744431E-01  -48.2133       48.2133       2154.48       2202.70    
  57  0.752004E-02  -4.89018      -3167.14       3167.14       2807.78       5974.92    
  58  0.930611     -0.719140E-01  -46.5753       46.5753       2108.39       2154.96    
loop,thermsimp(1:2)       24   798.367       5.29899    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       3242.42         68.72          1.26         39.34          0.00          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3242.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       24
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       25
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       95     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -1246.62       1246.62       2101.37       3347.99    
   2  0.438196     -0.825090      -534.372       534.372       2108.39       2642.76    
   3  0.637359     -0.450422      -291.718       291.718       2154.48       2446.20    
   4  0.122813      -2.09709      -1358.19       1358.19       2161.58       3519.76    
   5  0.926899     -0.759107E-01  -49.1638       49.1638       2158.84       2208.00    
   6  0.456580     -0.783992      -507.755       507.755       2175.09       2682.85    
   7  0.988763     -0.113008E-01  -7.31903       7.31903       2157.22       2164.54    
   8  0.499609     -0.693930      -449.426       449.426       2092.46       2541.89    
   9  0.432617     -0.837902      -542.670       542.670       2170.43       2713.10    
  10  0.403570     -0.907406      -587.684       587.684       2157.09       2744.77    
  11  0.435824     -0.830517      -537.887       537.887       2182.87       2720.76    
  12  0.504807     -0.683579      -442.722       442.722       2153.25       2595.97    
  13  0.778763     -0.250048      -161.945       161.945       2154.33       2316.27    
  14  0.429140     -0.845972      -547.896       547.896       1952.21       2500.11    
  15  0.597763     -0.514562      -333.257       333.257       2358.01       2691.26    
  16  0.425932     -0.853476      -552.756       552.756       2131.53       2684.29    
  17  0.825778     -0.191430      -123.980       123.980       2173.41       2297.39    
  18  0.448772     -0.801241      -518.926       518.926       1979.33       2498.26    
  19  0.701335     -0.354770      -229.768       229.768       2515.11       2744.88    
  20  0.425857     -0.853651      -552.870       552.870       2485.36       3038.23    
  21  0.800815     -0.222126      -143.860       143.860       2263.60       2407.46    
  22  0.724239     -0.322634      -208.955       208.955       2488.88       2697.83    
  23  0.312194      -1.16413      -753.953       753.953       2167.72       2921.68    
  24  0.796592     -0.227412      -147.284       147.284       2168.20       2315.49    
  25  0.164146      -1.80700      -1170.31       1170.31       1852.82       3023.13    
  26  0.503041     -0.687083      -444.991       444.991       2157.61       2602.60    
  27  0.640838     -0.444978      -288.192       288.192       2399.91       2688.10    
  28  0.327752      -1.11550      -722.456       722.456       2578.06       3300.52    
  29  0.720325     -0.328053      -212.465       212.465       2296.22       2508.69    
  30  0.447570     -0.803922      -520.662       520.662       2319.38       2840.04    
  31  0.377461     -0.974289      -631.001       631.001       2656.71       3287.71    
  32  0.951264     -0.499633E-01  -32.3589       32.3589       2100.29       2132.65    
  33  0.610405     -0.493632      -319.703       319.703       2818.50       3138.20    
  34  0.564697     -0.571466      -370.112       370.112       2200.82       2570.93    
  35  0.993998     -0.601974E-02  -3.89871       3.89871       2695.97       2699.87    
  36  0.908032     -0.964757E-01  -62.4828       62.4828       2214.01       2276.49    
  37  0.731210     -0.313055      -202.751       202.751       2472.87       2675.62    
  38  0.818812     -0.199901      -129.467       129.467       2947.65       3077.11    
  39  0.423172     -0.859976      -556.966       556.966       2769.52       3326.49    
  40  0.554414     -0.589843      -382.014       382.014       2238.70       2620.72    
  41  0.244903E-01  -3.70948      -2402.45       2402.45       2163.74       4566.19    
  42  0.337898      -1.08501      -702.711       702.711       2418.74       3121.45    
  43  0.634521E-01  -2.75747      -1785.88       1785.88       2680.66       4466.55    
  44  0.824978     -0.192398      -124.607       124.607       2316.27       2440.88    
  45  0.954123     -0.469622E-01  -30.4152       30.4152       2539.20       2569.61    
  46  0.807852     -0.213376      -138.194       138.194       2461.70       2599.90    
  47  0.335430      -1.09234      -707.458       707.458       2282.20       2989.66    
  48  0.266194      -1.32353      -857.189       857.189       2532.40       3389.59    
  49  0.797818     -0.225874      -146.288       146.288       2614.73       2761.02    
  50  0.710601     -0.341644      -221.267       221.267       2584.06       2805.32    
  51  0.469059     -0.757026      -490.290       490.290       2871.85       3362.14    
  52  0.256457E-01  -3.66338      -2372.60       2372.60       2975.45       5348.05    
  53  0.620630     -0.477020      -308.944       308.944       2193.99       2502.93    
  54  0.600237     -0.510431      -330.582       330.582       2415.49       2746.08    
  55  0.959467     -0.413769E-01  -26.7979       26.7979       3012.04       3038.84    
  56  0.541492     -0.613428      -397.289       397.289       2191.49       2588.78    
  57  0.577789     -0.548547      -355.268       355.268       2474.83       2830.10    
  58  0.701570     -0.354435      -229.551       229.551       3242.42       3471.97    
loop,thermsimp(1:2)       25   1246.62       534.372    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97       2083.80         68.74          1.29         39.21          0.00          0.05        109.29
Just calling func    0   0        109.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98       4352.85         68.07          1.08         39.09          0.82          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2083.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       25
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       26
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       97     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -160.052       160.052       2100.29       2260.35    
   2  0.928800     -0.738619E-01  -47.8369       47.8369       2157.22       2205.06    
   3  0.727994     -0.317462      -205.605       205.605       2158.84       2364.45    
   4  0.109723E-01  -4.51238      -2922.46       2922.46       2214.01       5136.47    
   5  0.160096      -1.83198      -1186.49       1186.49       2173.41       3359.90    
   6  0.497079     -0.699006      -452.714       452.714       2168.20       2620.92    
   7  0.789473     -0.236389      -153.098       153.098       2154.33       2307.43    
   8  0.763780     -0.269476      -174.527       174.527       2263.60       2438.13    
   9  0.217288      -1.52653      -988.664       988.664       2316.27       3304.94    
  10  0.867642     -0.141976      -91.9515       91.9515       2154.48       2246.44    
  11  0.740966     -0.299800      -194.167       194.167       1979.33       2173.50    
  12  0.999757     -0.242662E-03 -0.157161      0.157161       1952.21       1952.37    
  13  0.587476     -0.531920      -344.499       344.499       2193.99       2538.49    
  14  0.703619     -0.351518      -227.662       227.662       2296.22       2523.88    
  15  0.740946     -0.299828      -194.185       194.185       2092.46       2286.65    
  16  0.335927      -1.09086      -706.499       706.499       2539.20       3245.70    
  17  0.736553     -0.305774      -198.035       198.035       2200.82       2398.85    
  18  0.597397     -0.515174      -333.654       333.654       2191.49       2525.14    
  19  0.126601      -2.06672      -1338.52       1338.52       2153.25       3491.77    
  20  0.990194     -0.985477E-02  -6.38247       6.38247       2461.70       2468.09    
  21  0.716453     -0.333443      -215.956       215.956       2157.61       2373.56    
  22  0.279233E-01  -3.57829      -2317.49       2317.49       2238.70       4556.20    
  23  0.413932     -0.882054      -571.265       571.265       2108.39       2679.65    
  24  0.109516      -2.21168      -1432.40       1432.40       2472.87       3905.28    
  25  0.440749     -0.819279      -530.609       530.609       2175.09       2705.70    
  26  0.412115     -0.886453      -574.114       574.114       2131.53       2705.65    
  27  0.146963      -1.91758      -1241.93       1241.93       2399.91       3641.84    
  28  0.345919      -1.06155      -687.516       687.516       2358.01       3045.52    
  29  0.343614      -1.06824      -691.846       691.846       2488.88       3180.73    
  30  0.600334E-01  -2.81285      -1821.75       1821.75       2695.97       4517.72    
  31  0.751538     -0.285634      -184.992       184.992       2170.43       2355.42    
  32  0.878119     -0.129973      -84.1776       84.1776       2182.87       2267.05    
  33  0.544046     -0.608721      -394.240       394.240       2157.09       2551.33    
  34  0.931023     -0.714714E-01  -46.2887       46.2887       2515.11       2561.40    
  35  0.131968      -2.02520      -1311.63       1311.63       2415.49       3727.12    
  36  0.826694E-01  -2.49291      -1614.54       1614.54       2614.73       4229.27    
  37  0.174702E-02  -6.34984      -4112.50       4112.50       2584.06       6696.55    
  38  0.233470      -1.45470      -942.143       942.143       2474.83       3416.97    
  39  0.232927      -1.45703      -943.649       943.649       2319.38       3263.03    
  40  0.958279     -0.426163E-01  -27.6006       27.6006       2167.72       2195.32    
  41  0.820100     -0.198330      -128.449       128.449       2282.20       2410.65    
  42  0.305797      -1.18483      -767.362       767.362       1852.82       2620.18    
  43  0.260853      -1.34380      -870.316       870.316       2485.36       3355.67    
  44  0.960408     -0.403967E-01  -26.1631       26.1631       3012.04       3038.20    
  45  0.318957      -1.14270      -740.072       740.072       2947.65       3687.72    
  46  0.146887      -1.91809      -1242.26       1242.26       2418.74       3661.00    
  47  0.787623     -0.238735      -154.618       154.618       2818.50       2973.12    
  48  0.452412     -0.793163      -513.694       513.694       2656.71       3170.41    
  49  0.218339      -1.52170      -985.537       985.537       2578.06       3563.60    
  50  0.177672      -1.72782      -1119.03       1119.03       2769.52       3888.55    
  51  0.928922     -0.737304E-01  -47.7517       47.7517       2101.37       2149.12    
  52  0.341447      -1.07456      -695.943       695.943       2871.85       3567.79    
  53  0.462674     -0.770732      -499.167       499.167       2532.40       3031.57    
  54  0.125513      -2.07534      -1344.10       1344.10       3242.42       4586.53    
  55  0.354899      -1.03592      -670.918       670.918       2161.58       2832.49    
  56  0.341830      -1.07344      -695.219       695.219       2680.66       3375.88    
  57  0.604983     -0.502555      -325.481       325.481       2163.74       2489.22    
  58  0.223932      -1.49641      -969.156       969.156       2083.80       3052.96    
loop,thermsimp(1:2)       26   160.052       47.8369    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99       4236.93         68.53          1.23         39.65          0.00          0.05        109.47
Just calling func    0   0        109.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4236.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       26
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       27
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:       98     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -129.706       129.706       1952.21       2081.92    
   2  0.309452      -1.17295      -759.667       759.667       2101.37       2861.04    
   3  0.303638      -1.19192      -771.951       771.951       1979.33       2751.28    
   4  0.754457     -0.281757      -182.481       182.481       2167.72       2350.21    
   5  0.623133     -0.472996      -306.337       306.337       2157.22       2463.56    
   6  0.989422E-01  -2.31322      -1498.16       1498.16       2154.48       3652.65    
   7  0.695126     -0.363662      -235.527       235.527       2100.29       2335.82    
   8  0.832210E-01  -2.48626      -1610.23       1610.23       2182.87       3793.11    
   9  0.869521     -0.139813      -90.5505       90.5505       2092.46       2183.01    
  10  0.488136     -0.717160      -464.471       464.471       2154.33       2618.80    
  11  0.579877     -0.544940      -352.932       352.932       2170.43       2523.36    
  12  0.480435     -0.733064      -474.771       474.771       2158.84       2633.61    
  13  0.792626     -0.232404      -150.517       150.517       2157.61       2308.13    
  14  0.870230     -0.138998      -90.0223       90.0223       2200.82       2290.84    
  15  0.886361     -0.120631      -78.1269       78.1269       2282.20       2360.33    
  16  0.358181      -1.02672      -664.957       664.957       2263.60       2928.56    
  17  0.560125     -0.579594      -375.376       375.376       2461.70       2837.08    
  18  0.546151     -0.604859      -391.739       391.739       2163.74       2555.47    
  19  0.732086     -0.311858      -201.976       201.976       2296.22       2498.20    
  20  0.590102     -0.527460      -341.611       341.611       2191.49       2533.10    
  21  0.867355     -0.142307      -92.1658       92.1658       2193.99       2286.16    
  22  0.749758     -0.288005      -186.528       186.528       2157.09       2343.62    
  23  0.721970     -0.325772      -210.987       210.987       2515.11       2726.10    
  24  0.596865     -0.516065      -334.231       334.231       1852.82       2187.05    
  25  0.878161     -0.129925      -84.1462       84.1462       2168.20       2252.35    
  26  0.558752E-01  -2.88463      -1868.24       1868.24       2108.39       3976.63    
  27  0.555543     -0.587810      -380.697       380.697       2131.53       2512.23    
  28  0.597562     -0.514897      -333.474       333.474       2175.09       2508.56    
  29  0.995329     -0.468202E-02  -3.03233       3.03233       2161.58       2164.61    
  30  0.206787      -1.57606      -1020.74       1020.74       2818.50       3839.24    
  31  0.645457     -0.437797      -283.541       283.541       2532.40       2815.94    
  32  0.871352     -0.137710      -89.1880       89.1880       3012.04       3101.23    
  33  0.701360     -0.354733      -229.744       229.744       2358.01       2587.75    
  34  0.936151     -0.659784E-01  -42.7311       42.7311       2083.80       2126.53    
  35  0.590091     -0.527478      -341.623       341.623       2656.71       2998.34    
  36  0.750433     -0.287105      -185.944       185.944       2488.88       2674.82    
  37  0.326255      -1.12007      -725.420       725.420       2539.20       3264.62    
  38  0.873133     -0.135668      -87.8657       87.8657       2319.38       2407.25    
  39  0.621627     -0.475415      -307.904       307.904       2316.27       2624.18    
  40  0.153041      -1.87705      -1215.68       1215.68       2485.36       3701.04    
  41  0.196696      -1.62610      -1053.15       1053.15       2173.41       3226.56    
  42  0.365028      -1.00778      -652.693       652.693       2680.66       3333.36    
  43  0.398429     -0.920226      -595.987       595.987       2474.83       3070.82    
  44  0.549691     -0.598399      -387.555       387.555       2153.25       2540.81    
  45  0.994179     -0.583795E-02  -3.78097       3.78097       2578.06       2581.84    
  46  0.147335E-01  -4.21763      -2731.56       2731.56       2871.85       5603.41    
  47  0.224737      -1.49282      -966.832       966.832       2399.91       3366.74    
  48  0.182172      -1.70281      -1102.83       1102.83       2418.74       3521.57    
  49  0.230919      -1.46569      -949.259       949.259       2947.65       3896.91    
  50  0.491818     -0.709647      -459.605       459.605       2415.49       2875.10    
  51  0.370754     -0.992217      -642.612       642.612       2769.52       3412.13    
  52  0.785622     -0.241279      -156.265       156.265       2472.87       2629.14    
  53  0.476284     -0.741742      -480.391       480.391       2614.73       3095.12    
  54  0.958799     -0.420736E-01  -27.2491       27.2491       2695.97       2723.22    
  55  0.305133      -1.18701      -768.769       768.769       2238.70       3007.47    
  56  0.270329      -1.30812      -847.206       847.206       3242.42       4089.63    
  57  0.130426      -2.03695      -1319.24       1319.24       2214.01       3533.25    
  58  0.222171      -1.50431      -974.269       974.269       4236.93       5211.20    
loop,thermsimp(1:2)       27   129.706       759.667    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       2328.26         68.46          1.24         39.34          0.00          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101       4312.18         68.50          1.19         39.11          0.15          0.05        109.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    4312.2        3.385     -2.826      2.867     -102.6     0.5364    
                      0.1727     0.9438     -99.70      4.824     0.5166    

                       2.691     -2.702      1.540      7478.      7000.    

                      -1.943      0.000      0.000      0.000     -1.221    



                      -1.932      0.000      0.000      7000.      491.1    

                      -1.432     -4.680     -6.209     -7.084      8.513    

                      -12.05     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.7951E-02 0.1363     0.7076E-02 0.1431    

                     -0.2486     0.6555E-01 0.1699     0.1608    -0.1015E-02



                     -0.8520    -0.5398      0.000     0.5966E-01 0.1927    

                      0.1476     0.3177    -0.7116     0.2262     0.3559    

                      0.2547     0.9687E-01-0.4822     -1.425      7000.    



                      -1.239     -1.091     -2.142     -1.982    -0.3807    

                     -0.3252      7.833      8.568    -0.1706E+05 -5.864    

                     -0.2377     -2.212      8.768      9.168    -0.1969E+05



                      -6.000     0.4515     0.5457E-02  8.773      9.094    

                     -0.1944E+05 -6.000    -0.1506    -0.1482      9.666    

                       8.970    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2328.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       27
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       28
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      100     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -137.549       137.549       1952.21       2089.76    
   2  0.162004E-01  -4.12272      -2670.09       2670.09       2083.80       4753.90    
   3  0.446841E-01  -3.10814      -2012.99       2012.99       2161.58       4174.57    
   4  0.757954     -0.277132      -179.486       179.486       2092.46       2271.95    
   5  0.525315     -0.643757      -416.932       416.932       1852.82       2269.75    
   6  0.229940      -1.46994      -952.010       952.010       2168.20       3120.21    
   7  0.273310E-01  -3.59973      -2331.38       2331.38       2193.99       4525.37    
   8  0.228047      -1.47820      -957.362       957.362       2200.82       3158.18    
   9  0.963384E-01  -2.33989      -1515.44       1515.44       2157.61       3673.05    
  10  0.495504     -0.702179      -454.768       454.768       2100.29       2555.06    
  11  0.930436     -0.721018E-01  -46.6970       46.6970       2157.09       2203.79    
  12  0.138744      -1.97513      -1279.20       1279.20       2167.72       3446.92    
  13  0.676381     -0.390999      -253.232       253.232       2282.20       2535.43    
  14  0.763696     -0.269586      -174.598       174.598       2319.38       2493.98    
  15  0.282468      -1.26419      -818.757       818.757       2157.22       2975.98    
  16  0.359172      -1.02395      -663.166       663.166       2296.22       2959.39    
  17  0.392258     -0.935834      -606.096       606.096       2175.09       2781.19    
  18  0.524686     -0.644955      -417.707       417.707       2131.53       2549.24    
  19  0.850465     -0.161972      -104.902       104.902       2170.43       2275.33    
  20  0.227056      -1.48256      -960.182       960.182       2191.49       3151.67    
  21  0.942039     -0.597082E-01  -38.6702       38.6702       2153.25       2191.92    
  22  0.807336     -0.214016      -138.608       138.608       2163.74       2302.34    
  23  0.345853      -1.06174      -687.641       687.641       2578.06       3265.70    
  24  0.762940     -0.270575      -175.239       175.239       2358.01       2533.24    
  25  0.589959     -0.527702      -341.768       341.768       2154.33       2496.10    
  26  0.563539     -0.573518      -371.441       371.441       2316.27       2687.71    
  27  0.812044     -0.208201      -134.842       134.842       2472.87       2607.71    
  28  0.735850     -0.306729      -198.654       198.654       2158.84       2357.49    
  29  0.396292     -0.925605      -599.471       599.471       2488.88       3088.35    
  30  0.623568     -0.472298      -305.885       305.885       2695.97       3001.85    
  31  0.925937     -0.769486E-01  -49.8360       49.8360       2515.11       2564.95    
  32  0.880074     -0.127749      -82.7373       82.7373       1979.33       2062.07    
  33  0.379958     -0.967693      -626.730       626.730       2532.40       3159.13    
  34  0.842940E-01  -2.47344      -1601.93       1601.93       2461.70       4063.64    
  35  0.199092      -1.61399      -1045.30       1045.30       2101.37       3146.67    
  36  0.625899     -0.468566      -303.468       303.468       2415.49       2718.96    
  37  0.888337     -0.118405      -76.6851       76.6851       2263.60       2340.29    
  38  0.959633     -0.412048E-01  -26.6864       26.6864       2656.71       2683.40    
  39  0.289813      -1.23852      -802.130       802.130       2238.70       3040.83    
  40  0.889440     -0.117163      -75.8811       75.8811       2474.83       2550.71    
  41  0.797260     -0.226575      -146.742       146.742       2614.73       2761.47    
  42  0.451097     -0.796073      -515.579       515.579       3012.04       3527.62    
  43  0.609578     -0.494989      -320.581       320.581       2173.41       2493.99    
  44  0.910850     -0.933770E-01  -60.4759       60.4759       2539.20       2599.67    
  45  0.448191     -0.802536      -519.765       519.765       2680.66       3200.43    
  46  0.831229     -0.184850      -119.718       119.718       2399.91       2519.63    
  47  0.246260      -1.40137      -907.601       907.601       2769.52       3677.12    
  48  0.280480      -1.27125      -823.331       823.331       2418.74       3242.07    
  49  0.161513      -1.82317      -1180.78       1180.78       2214.01       3394.79    
  50  0.337020      -1.08761      -704.396       704.396       2154.48       2858.88    
  51  0.160136      -1.83173      -1186.33       1186.33       2485.36       3671.68    
  52  0.268039      -1.31662      -852.715       852.715       2182.87       3035.59    
  53  0.907744     -0.967928E-01  -62.6882       62.6882       2818.50       2881.19    
  54  0.237998      -1.43549      -929.702       929.702       2947.65       3877.35    
  55  0.932063     -0.703547E-01  -45.5654       45.5654       2108.39       2153.95    
  56  0.304233      -1.18996      -770.683       770.683       3242.42       4013.11    
  57  0.471578     -0.751672      -486.823       486.823       4236.93       4723.75    
  58  0.985625     -0.144798E-01  -9.37789       9.37789       2328.26       2337.64    
loop,thermsimp(1:2)       28   137.549       2670.09    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102       2923.43         68.29          1.20         39.28          0.33          0.05        109.14
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2923.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       28
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       29
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      101     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -1395.79       1395.79       1979.33       3375.12    
   2  0.685048     -0.378267      -244.986       244.986       1952.21       2197.20    
   3  0.739526     -0.301746      -195.427       195.427       2108.39       2303.82    
   4  0.161448      -1.82357      -1181.04       1181.04       2153.25       3334.29    
   5  0.819608     -0.198929      -128.837       128.837       2157.09       2285.93    
   6  0.750679     -0.286777      -185.732       185.732       1852.82       2038.55    
   7  0.797409     -0.226388      -146.621       146.621       2092.46       2239.08    
   8  0.193123      -1.64443      -1065.02       1065.02       2170.43       3235.45    
   9  0.189346E-01  -3.96676      -2569.09       2569.09       2163.74       4732.82    
  10  0.715264     -0.335103      -217.031       217.031       2328.26       2545.29    
  11  0.384856     -0.954886      -618.435       618.435       2263.60       2882.04    
  12  0.268023      -1.31668      -852.754       852.754       2158.84       3011.59    
  13  0.777164     -0.252104      -163.276       163.276       2319.38       2482.66    
  14  0.707495E-01  -2.64861      -1715.38       1715.38       2173.41       3888.79    
  15  0.233610      -1.45410      -941.754       941.754       2154.33       3096.08    
  16  0.193057      -1.64477      -1065.24       1065.24       2399.91       3465.15    
  17  0.486879     -0.719739      -466.142       466.142       2358.01       2824.15    
  18  0.735370     -0.307381      -199.077       199.077       2282.20       2481.28    
  19  0.147509      -1.91387      -1239.52       1239.52       2131.53       3371.06    
  20  0.739111     -0.302308      -195.790       195.790       2474.83       2670.62    
  21  0.886241     -0.120766      -78.2144       78.2144       2100.29       2178.51    
  22  0.158672      -1.84092      -1192.27       1192.27       2515.11       3707.39    
  23  0.143658      -1.94032      -1256.66       1256.66       2539.20       3795.85    
  24  0.637431E-02  -5.05548      -3274.20       3274.20       2472.87       5747.07    
  25  0.753372     -0.283196      -183.413       183.413       2656.71       2840.13    
  26  0.555831     -0.587292      -380.361       380.361       2316.27       2696.64    
  27  0.280013      -1.27292      -824.410       824.410       2415.49       3239.90    
  28  0.811304     -0.209112      -135.432       135.432       2614.73       2750.16    
  29  0.972296E-02  -4.63327      -3000.75       3000.75       2175.09       5175.84    
  30  0.713459     -0.337631      -218.668       218.668       2154.48       2373.15    
  31  0.194621      -1.63670      -1060.01       1060.01       2818.50       3878.51    
  32  0.492587     -0.708083      -458.592       458.592       2296.22       2754.81    
  33  0.759094E-01  -2.57821      -1669.79       1669.79       2157.22       3827.01    
  34  0.494544     -0.704119      -456.025       456.025       2695.97       3151.99    
  35  0.297023      -1.21395      -786.217       786.217       2182.87       2969.09    
  36  0.429878E-01  -3.14684      -2038.06       2038.06       2238.70       4276.76    
  37  0.490931     -0.711452      -460.774       460.774       2488.88       2949.65    
  38  0.534417     -0.626578      -405.805       405.805       2168.20       2574.01    
  39  0.254967      -1.36662      -885.096       885.096       2101.37       2986.47    
  40  0.995945     -0.406335E-02  -2.63164       2.63164       2191.49       2194.12    
  41  0.428814E-01  -3.14932      -2039.66       2039.66       2200.82       4240.48    
  42  0.332915      -1.09987      -712.333       712.333       2532.40       3244.73    
  43  0.657266     -0.419666      -271.798       271.798       2680.66       2952.46    
  44  0.301071      -1.20041      -777.448       777.448       2418.74       3196.19    
  45  0.998178     -0.182349E-02  -1.18099       1.18099       2578.06       2579.24    
  46  0.533372     -0.628536      -407.073       407.073       2214.01       2621.08    
  47  0.244746      -1.40753      -911.594       911.594       2167.72       3079.32    
  48  0.345321      -1.06328      -688.638       688.638       3012.04       3700.68    
  49  0.339541      -1.08016      -699.570       699.570       2485.36       3184.93    
  50  0.456434     -0.784311      -507.962       507.962       2157.61       2665.57    
  51  0.510210     -0.672933      -435.827       435.827       2769.52       3205.35    
  52  0.678441     -0.387958      -251.263       251.263       2947.65       3198.91    
  53  0.802552     -0.219958      -142.457       142.457       3242.42       3384.88    
  54  0.542503     -0.611562      -396.080       396.080       2461.70       2857.78    
  55  0.887113     -0.119783      -77.5780       77.5780       2161.58       2239.15    
  56  0.631934     -0.458971      -297.254       297.254       2193.99       2491.25    
  57  0.776760     -0.252624      -163.613       163.613       4236.93       4400.54    
  58  0.764990     -0.267893      -173.502       173.502       2923.43       3096.93    
loop,thermsimp(1:2)       29   1395.79       244.986    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       3381.75         68.47          1.27         39.01          0.27          0.05        109.07
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3381.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       29
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       30
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      102     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -2090.59       2090.59       1852.82       3943.41    
   2  0.712690     -0.338709      -219.366       219.366       2100.29       2319.66    
   3  0.284498      -1.25703      -814.120       814.120       2191.49       3005.61    
   4  0.132414      -2.02182      -1309.44       1309.44       1952.21       3261.65    
   5  0.868558     -0.140920      -91.2675       91.2675       2092.46       2183.73    
   6  0.695240     -0.363498      -235.421       235.421       2161.58       2397.00    
   7  0.777362     -0.251849      -163.111       163.111       2157.09       2320.20    
   8  0.302494      -1.19569      -774.395       774.395       2108.39       2882.78    
   9  0.710188     -0.342225      -221.643       221.643       2154.48       2376.13    
  10  0.884530     -0.122698      -79.4660       79.4660       2282.20       2361.67    
  11  0.146421E-01  -4.22386      -2735.59       2735.59       2319.38       5054.98    
  12  0.834801     -0.180562      -116.941       116.941       2193.99       2310.93    
  13  0.414011     -0.881863      -571.142       571.142       2328.26       2899.40    
  14  0.655777     -0.421935      -273.268       273.268       2168.20       2441.47    
  15  0.530106     -0.634679      -411.052       411.052       2578.06       2989.11    
  16  0.325231      -1.12322      -727.457       727.457       2214.01       2941.47    
  17  0.293550      -1.22571      -793.834       793.834       2157.61       2951.44    
  18  0.194161      -1.63907      -1061.55       1061.55       2474.83       3536.38    
  19  0.589029E-01  -2.83186      -1834.07       1834.07       2316.27       4150.34    
  20  0.385142     -0.954143      -617.954       617.954       2614.73       3232.68    
  21  0.287461      -1.24667      -807.409       807.409       2296.22       3103.63    
  22  0.528518     -0.637678      -412.994       412.994       2358.01       2771.00    
  23  0.517042     -0.659630      -427.212       427.212       2656.71       3083.92    
  24  0.453375     -0.791035      -512.316       512.316       2461.70       2974.02    
  25  0.695596     -0.362986      -235.089       235.089       2263.60       2498.69    
  26  0.645178     -0.438228      -283.820       283.820       2488.88       2772.70    
  27  0.696076     -0.362297      -234.643       234.643       2680.66       2915.31    
  28  0.483522     -0.726659      -470.623       470.623       2182.87       2653.50    
  29  0.155396E-01  -4.16436      -2697.06       2697.06       2101.37       4798.43    
  30  0.883154     -0.124256      -80.4748       80.4748       2158.84       2239.31    
  31  0.525944     -0.642561      -416.157       416.157       2167.72       2583.88    
  32  0.746799     -0.291959      -189.088       189.088       2154.33       2343.42    
  33  0.458658     -0.779449      -504.813       504.813       2923.43       3428.24    
  34  0.614284     -0.487298      -315.600       315.600       2695.97       3011.57    
  35  0.581412     -0.542295      -351.219       351.219       2485.36       2836.58    
  36  0.820935     -0.197312      -127.790       127.790       2418.74       2546.53    
  37  0.852366     -0.159739      -103.455       103.455       2947.65       3051.10    
  38  0.527059     -0.640443      -414.785       414.785       2769.52       3184.31    
  39  0.376404     -0.977092      -632.817       632.817       2170.43       2803.25    
  40  0.729525E-01  -2.61795      -1695.52       1695.52       2415.49       4111.02    
  41  0.342258      -1.07219      -694.408       694.408       2532.40       3226.81    
  42  0.955065     -0.459761E-01  -29.7766       29.7766       2153.25       2183.03    
  43  0.508654E-01  -2.97857      -1929.08       1929.08       2131.53       4060.62    
  44  0.471716     -0.751379      -486.633       486.633       1979.33       2465.96    
  45  0.137118      -1.98691      -1286.83       1286.83       3242.42       4529.25    
  46  0.844826     -0.168625      -109.210       109.210       2399.91       2509.12    
  47  0.841708     -0.172322      -111.605       111.605       3012.04       3123.64    
  48  0.360396E-01  -3.32314      -2152.24       2152.24       2515.11       4667.35    
  49  0.953282     -0.478444E-01  -30.9866       30.9866       2539.20       2570.18    
  50  0.503408     -0.686355      -444.520       444.520       2157.22       2601.74    
  51  0.593854     -0.521122      -337.506       337.506       2818.50       3156.01    
  52  0.524910     -0.644528      -417.430       417.430       2173.41       2590.84    
  53  0.730244     -0.314377      -203.607       203.607       2200.82       2404.42    
  54  0.828919     -0.187632      -121.521       121.521       2238.70       2360.23    
  55  0.151629      -1.88632      -1221.68       1221.68       4236.93       5458.60    
  56  0.431672     -0.840089      -544.086       544.086       2163.74       2707.82    
  57  0.449333     -0.799990      -518.116       518.116       2175.09       2693.21    
  58  0.116759      -2.14764      -1390.93       1390.93       3381.75       4772.68    
loop,thermsimp(1:2)       30   2090.59       219.366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104       2650.54         68.49          1.16         39.30          0.32          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2650.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       30
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       31
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      103     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -901.525       901.525       2153.25       3054.78    
   2  0.247647      -1.39575      -903.963       903.963       2092.46       2996.42    
   3  0.396263     -0.925678      -599.519       599.519       2158.84       2758.36    
   4  0.386461     -0.950723      -615.739       615.739       2193.99       2809.73    
   5  0.729285     -0.315691      -204.458       204.458       2100.29       2304.75    
   6  0.665866     -0.406667      -263.379       263.379       2157.09       2420.47    
   7  0.385122     -0.954194      -617.987       617.987       2154.33       2772.31    
   8  0.625701     -0.468883      -303.673       303.673       2238.70       2542.38    
   9  0.392668     -0.934792      -605.421       605.421       2282.20       2887.62    
  10  0.698356     -0.359026      -232.525       232.525       2154.48       2387.01    
  11  0.537534E-01  -2.92335      -1893.32       1893.32       2161.58       4054.89    
  12  0.289307      -1.24027      -803.264       803.264       2200.82       3004.08    
  13  0.138460E-01  -4.27976      -2771.80       2771.80       2168.20       4940.00    
  14  0.824110     -0.193451      -125.289       125.289       1979.33       2104.62    
  15  0.560983     -0.578065      -374.386       374.386       2263.60       2637.99    
  16  0.116087E-01  -4.45600      -2885.94       2885.94       2399.91       5285.85    
  17  0.218033      -1.52311      -986.446       986.446       2418.74       3405.18    
  18  0.893705E-01  -2.41497      -1564.06       1564.06       2539.20       4103.26    
  19  0.304886      -1.18782      -769.293       769.293       2167.72       2937.02    
  20  0.179833      -1.71573      -1111.20       1111.20       2173.41       3284.61    
  21  0.867378     -0.142281      -92.1486       92.1486       2157.22       2249.37    
  22  0.243287      -1.41351      -915.466       915.466       2182.87       3098.34    
  23  0.772489     -0.258138      -167.184       167.184       2175.09       2342.27    
  24  0.321011      -1.13628      -735.916       735.916       2163.74       2899.65    
  25  0.499417     -0.694314      -449.675       449.675       2358.01       2807.68    
  26  0.396806     -0.924307      -598.631       598.631       2488.88       3087.51    
  27  0.580203E-01  -2.84696      -1843.84       1843.84       2170.43       4014.27    
  28  0.854206     -0.157583      -102.059       102.059       2485.36       2587.42    
  29  0.914649     -0.892145E-01  -57.7801       57.7801       2108.39       2166.17    
  30  0.167601      -1.78617      -1156.82       1156.82       2328.26       3485.08    
  31  0.350137      -1.04943      -679.667       679.667       2680.66       3360.33    
  32  0.522932     -0.648304      -419.876       419.876       2214.01       2633.89    
  33  0.538779     -0.618450      -400.541       400.541       2157.61       2558.15    
  34  0.693066     -0.366629      -237.449       237.449       2461.70       2699.15    
  35  0.361961      -1.01622      -658.157       658.157       2578.06       3236.22    
  36  0.310665      -1.16904      -757.133       757.133       2191.49       2948.62    
  37  0.818669     -0.200076      -129.580       129.580       2695.97       2825.55    
  38  0.582861     -0.539807      -349.608       349.608       2947.65       3297.25    
  39  0.401728     -0.911979      -590.646       590.646       2656.71       3247.36    
  40  0.171089      -1.76557      -1143.48       1143.48       2296.22       3439.70    
  41  0.980174     -0.200248E-01  -12.9691       12.9691       3012.04       3025.01    
  42  0.495496     -0.702196      -454.780       454.780       2818.50       3273.28    
  43  0.436683     -0.828549      -536.612       536.612       2769.52       3306.13    
  44  0.910411     -0.938588E-01  -60.7880       60.7880       2532.40       2593.19    
  45  0.649932     -0.430887      -279.065       279.065       2614.73       2893.79    
  46  0.755226     -0.280738      -181.821       181.821       1952.21       2134.03    
  47  0.927352     -0.754221E-01  -48.8474       48.8474       2923.43       2972.28    
  48  0.848028     -0.164842      -106.760       106.760       2474.83       2581.59    
  49  0.146193      -1.92283      -1245.33       1245.33       1852.82       3098.15    
  50  0.571278     -0.559879      -362.608       362.608       2131.53       2494.14    
  51  0.244418      -1.40888      -912.464       912.464       2415.49       3327.96    
  52  0.979014     -0.212091E-01  -13.7361       13.7361       2316.27       2330.01    
  53  0.235747      -1.44500      -935.857       935.857       3242.42       4178.28    
  54  0.486927     -0.719642      -466.079       466.079       2515.11       2981.19    
  55  0.694010     -0.365269      -236.568       236.568       3381.75       3618.32    
  56  0.392305     -0.935716      -606.020       606.020       2101.37       2707.39    
  57  0.334373      -1.09550      -709.504       709.504       2319.38       3028.89    
  58  0.526166     -0.642138      -415.883       415.883       2650.54       3066.43    
loop,thermsimp(1:2)       31   901.525       903.963    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105       2217.02         68.51          1.16         38.96          0.39          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106       3035.72         68.48          1.15         39.12          0.38          0.05        109.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2217.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       31
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       32
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      105     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -2.55020       2.55020       1979.33       1981.88    
   2  0.758684E-02  -4.88134      -3161.42       3161.42       1952.21       5113.63    
   3  0.404439     -0.905254      -586.291       586.291       2108.39       2694.68    
   4  0.947917E-01  -2.35607      -1525.92       1525.92       2157.22       3683.14    
   5  0.834417     -0.181022      -117.240       117.240       2100.29       2217.53    
   6  0.891274     -0.115104      -74.5473       74.5473       2316.27       2390.82    
   7  0.744451     -0.295108      -191.128       191.128       2175.09       2366.22    
   8  0.559638     -0.580466      -375.941       375.941       2154.48       2530.42    
   9  0.821724     -0.196351      -127.167       127.167       2157.09       2284.26    
  10  0.847292     -0.165710      -107.322       107.322       2131.53       2238.86    
  11  0.661676     -0.412979      -267.467       267.467       2238.70       2506.17    
  12  0.993427     -0.659478E-02  -4.27113       4.27113       2157.61       2161.88    
  13  0.425996     -0.853326      -552.660       552.660       2474.83       3027.49    
  14  0.673132     -0.395813      -256.350       256.350       2485.36       2741.71    
  15  0.234810      -1.44898      -938.436       938.436       2532.40       3470.84    
  16  0.122926      -2.09617      -1357.59       1357.59       2214.01       3571.60    
  17  0.523553     -0.647118      -419.108       419.108       2263.60       2682.71    
  18  0.959317     -0.415333E-01  -26.8992       26.8992       2461.70       2488.60    
  19  0.321726      -1.13406      -734.475       734.475       2101.37       2835.84    
  20  0.493112     -0.707018      -457.902       457.902       2158.84       2616.74    
  21  0.416134     -0.876748      -567.829       567.829       2154.33       2722.16    
  22  0.409432     -0.892985      -578.344       578.344       2358.01       2936.35    
  23  0.657956     -0.418617      -271.119       271.119       2193.99       2465.11    
  24  0.904324     -0.100567      -65.1328       65.1328       2695.97       2761.10    
  25  0.714426     -0.336276      -217.790       217.790       2282.20       2499.99    
  26  0.150521      -1.89365      -1226.43       1226.43       2614.73       3841.16    
  27  0.758740     -0.276096      -178.814       178.814       2163.74       2342.55    
  28  0.359105      -1.02414      -663.288       663.288       2167.72       2831.01    
  29  0.666937     -0.405060      -262.338       262.338       2191.49       2453.83    
  30  0.343213      -1.06940      -692.603       692.603       2923.43       3616.03    
  31  0.484849     -0.723918      -468.848       468.848       2515.11       2983.96    
  32  0.874661     -0.133919      -86.7330       86.7330       2092.46       2179.19    
  33  0.994710     -0.530415E-02  -3.43525       3.43525       2200.82       2204.25    
  34  0.821923     -0.196109      -127.011       127.011       3012.04       3139.05    
  35  0.954096E-02  -4.65216      -3012.99       3012.99       2319.38       5332.37    
  36  0.240030      -1.42699      -924.194       924.194       2153.25       3077.45    
  37  0.279003      -1.27653      -826.750       826.750       2650.54       3477.29    
  38  0.553830     -0.590898      -382.697       382.697       2488.88       2871.58    
  39  0.400809     -0.914271      -592.131       592.131       1852.82       2444.95    
  40  0.146125      -1.92330      -1245.63       1245.63       2182.87       3428.50    
  41  0.811879     -0.208403      -134.973       134.973       2578.06       2713.03    
  42  0.349149      -1.05226      -681.498       681.498       2656.71       3338.21    
  43  0.897422     -0.108229      -70.0948       70.0948       2818.50       2888.59    
  44  0.114492      -2.16725      -1403.63       1403.63       2173.41       3577.04    
  45  0.831901E-01  -2.48663      -1610.47       1610.47       2947.65       4558.12    
  46  0.721169     -0.326882      -211.706       211.706       2769.52       2981.23    
  47  0.801724     -0.220991      -143.126       143.126       2415.49       2558.62    
  48  0.466569     -0.762349      -493.738       493.738       2680.66       3174.40    
  49  0.103404      -2.26911      -1469.60       1469.60       2418.74       3888.34    
  50  0.417206     -0.874175      -566.162       566.162       2296.22       2862.38    
  51  0.267666      -1.31802      -853.617       853.617       2328.26       3181.88    
  52  0.670232     -0.400131      -259.146       259.146       3381.75       3640.90    
  53  0.161265      -1.82470      -1181.78       1181.78       2170.43       3352.20    
  54  0.414706     -0.880185      -570.055       570.055       2161.58       2731.63    
  55  0.501015     -0.691119      -447.606       447.606       2539.20       2986.80    
  56  0.516090     -0.661474      -428.406       428.406       3242.42       3670.83    
  57  0.424740     -0.856278      -554.571       554.571       2168.20       2722.77    
  58  0.303796      -1.19140      -771.612       771.612       2217.02       2988.63    
loop,thermsimp(1:2)       32   2.55020       3161.42    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       2142.68         68.52          1.16         38.82          0.55          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108       2299.69         68.41          1.15         38.83          0.67          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2142.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       32
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       33
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      107     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -509.159       509.159       1979.33       2488.49    
   2  0.588265E-01  -2.83316      -1834.91       1834.91       2157.61       3992.52    
   3  0.787103E-01  -2.54198      -1646.32       1646.32       2092.46       3738.78    
   4  0.597713     -0.514644      -333.311       333.311       2200.82       2534.13    
   5  0.110741      -2.20056      -1425.20       1425.20       2100.29       3525.50    
   6  0.677861     -0.388813      -251.816       251.816       2131.53       2383.35    
   7  0.307724      -1.17855      -763.293       763.293       2157.09       2920.38    
   8  0.550587     -0.596770      -386.500       386.500       2163.74       2550.24    
   9  0.601295     -0.508669      -329.441       329.441       2175.09       2504.53    
  10  0.487121     -0.719243      -465.820       465.820       2316.27       2782.09    
  11  0.146295      -1.92213      -1244.87       1244.87       1852.82       3097.69    
  12  0.714050     -0.336802      -218.131       218.131       2191.49       2409.62    
  13  0.723089     -0.324223      -209.984       209.984       2193.99       2403.98    
  14  0.805432     -0.216376      -140.137       140.137       2461.70       2601.84    
  15  0.123280      -2.09329      -1355.73       1355.73       2282.20       3637.93    
  16  0.853039     -0.158950      -102.945       102.945       2238.70       2341.65    
  17  0.288289      -1.24379      -805.545       805.545       2154.48       2960.03    
  18  0.705126     -0.349379      -226.277       226.277       2415.49       2641.77    
  19  0.772420     -0.258227      -167.241       167.241       2158.84       2326.08    
  20  0.962845     -0.378631E-01  -24.5222       24.5222       2263.60       2288.13    
  21  0.245802      -1.40323      -908.805       908.805       2108.39       3017.19    
  22  0.752702     -0.284087      -183.990       183.990       2578.06       2762.05    
  23  0.729896     -0.314853      -203.915       203.915       2154.33       2358.24    
  24  0.869278     -0.140092      -90.7312       90.7312       2168.20       2258.93    
  25  0.597817E-01  -2.81706      -1824.48       1824.48       2161.58       3986.05    
  26  0.984108     -0.160195E-01  -10.3751       10.3751       2485.36       2495.73    
  27  0.278288      -1.27910      -828.412       828.412       2695.97       3524.38    
  28  0.588278     -0.530555      -343.616       343.616       2167.72       2511.34    
  29  0.807614     -0.213671      -138.385       138.385       2101.37       2239.75    
  30  0.428679     -0.847047      -548.593       548.593       2296.22       2844.81    
  31  0.452991     -0.791883      -512.866       512.866       2488.88       3001.75    
  32  0.678742     -0.387514      -250.975       250.975       2818.50       3069.47    
  33  0.504500     -0.684188      -443.116       443.116       2358.01       2801.12    
  34  0.894800     -0.111155      -71.9898       71.9898       2769.52       2841.51    
  35  0.854311     -0.157461      -101.980       101.980       2515.11       2617.09    
  36  0.756230     -0.279410      -180.961       180.961       2539.20       2720.16    
  37  0.744369     -0.295219      -191.199       191.199       2217.02       2408.22    
  38  0.435758     -0.830668      -537.985       537.985       2474.83       3012.81    
  39  0.677387     -0.389513      -252.269       252.269       2153.25       2405.52    
  40  0.504989     -0.683219      -442.489       442.489       3012.04       3454.53    
  41  0.325676      -1.12185      -726.571       726.571       2680.66       3407.24    
  42  0.147207      -1.91591      -1240.85       1240.85       2328.26       3569.11    
  43  0.432041     -0.839234      -543.533       543.533       2656.71       3200.25    
  44  0.615972     -0.484555      -313.823       313.823       2170.43       2484.25    
  45  0.150867      -1.89136      -1224.94       1224.94       2182.87       3407.82    
  46  0.464307     -0.767210      -496.886       496.886       2532.40       3029.29    
  47  0.379753     -0.968234      -627.080       627.080       2650.54       3277.62    
  48  0.886192     -0.120822      -78.2506       78.2506       2214.01       2292.26    
  49  0.231751E-01  -3.76468      -2438.21       2438.21       2173.41       4611.62    
  50  0.257662      -1.35611      -878.287       878.287       2923.43       3801.72    
  51  0.470381E-01  -3.05680      -1979.75       1979.75       3381.75       5361.50    
  52  0.972366     -0.280233E-01  -18.1494       18.1494       3242.42       3260.57    
  53  0.242054      -1.41860      -918.758       918.758       2157.22       3075.98    
  54  0.660577     -0.414642      -268.544       268.544       2614.73       2883.27    
  55  0.234396      -1.45074      -939.577       939.577       2418.74       3358.32    
  56  0.891547     -0.114797      -74.3488       74.3488       2947.65       3022.00    
  57  0.408879E-01  -3.19692      -2070.50       2070.50       1952.21       4022.71    
  58  0.577007     -0.549901      -356.145       356.145       2142.68       2498.83    
loop,thermsimp(1:2)       33   509.159       1834.91    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109       2459.97         68.52          1.18         39.11          0.11          0.05        108.96
Just calling func    0   0        108.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110       5261.62         68.27          1.21         39.39          0.21          0.05        109.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2459.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       33
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       34
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      109     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -1516.64       1516.64       2101.37       3618.01    
   2  0.298819      -1.20792      -782.312       782.312       2168.20       2950.51    
   3  0.706385     -0.347595      -225.121       225.121       2263.60       2488.73    
   4  0.958764     -0.421100E-01  -27.2726       27.2726       2214.01       2241.28    
   5  0.306496      -1.18255      -765.883       765.883       2158.84       2924.72    
   6  0.905447     -0.993270E-01  -64.3294       64.3294       2238.70       2303.03    
   7  0.234113      -1.45195      -940.360       940.360       2154.33       3094.69    
   8  0.704141     -0.350777      -227.182       227.182       2131.53       2358.72    
   9  0.908200     -0.962902E-01  -62.3626       62.3626       2193.99       2256.35    
  10  0.656383     -0.421011      -272.669       272.669       2153.25       2425.92    
  11  0.967894     -0.326327E-01  -21.1347       21.1347       2217.02       2238.15    
  12  0.754670     -0.281475      -182.298       182.298       2191.49       2373.79    
  13  0.488960     -0.715475      -463.379       463.379       2170.43       2633.81    
  14  0.451577     -0.795009      -514.890       514.890       1979.33       2494.22    
  15  0.387599E-01  -3.25037      -2105.11       2105.11       2485.36       4590.47    
  16  0.210942E-02  -6.16134      -3990.41       3990.41       2142.68       6133.10    
  17  0.656530     -0.420787      -272.524       272.524       2175.09       2447.61    
  18  0.181246      -1.70790      -1106.13       1106.13       2167.72       3273.85    
  19  0.758879     -0.275913      -178.696       178.696       2200.82       2379.51    
  20  0.392052     -0.936362      -606.438       606.438       2163.74       2770.17    
  21  0.406710     -0.899654      -582.664       582.664       2461.70       3044.37    
  22  0.830107     -0.186201      -120.593       120.593       2515.11       2635.71    
  23  0.311833      -1.16529      -754.703       754.703       2415.49       3170.20    
  24  0.945407     -0.561396E-01  -36.3590       36.3590       2539.20       2575.56    
  25  0.303319      -1.19297      -772.631       772.631       2578.06       3350.69    
  26  0.284230      -1.25797      -814.729       814.729       2316.27       3131.00    
  27  0.292492      -1.22932      -796.171       796.171       2358.01       3154.18    
  28  0.401496     -0.912557      -591.021       591.021       2769.52       3360.54    
  29  0.379648     -0.968510      -627.259       627.259       2296.22       2923.48    
  30  0.723496E-01  -2.62625      -1700.90       1700.90       2614.73       4315.62    
  31  0.940338     -0.615157E-01  -39.8409       39.8409       2157.09       2196.93    
  32  0.766237     -0.266264      -172.446       172.446       2154.48       2326.93    
  33  0.984920     -0.151946E-01  -9.84082       9.84082       2488.88       2498.72    
  34  0.552546     -0.593218      -384.200       384.200       2474.83       2859.03    
  35  0.735557     -0.307128      -198.912       198.912       2108.39       2307.30    
  36  0.142195      -1.95056      -1263.28       1263.28       2947.65       4210.93    
  37  0.304783      -1.18816      -769.512       769.512       2532.40       3301.91    
  38  0.868582     -0.140894      -91.2503       91.2503       2818.50       2909.75    
  39  0.382741     -0.960397      -622.004       622.004       2157.22       2779.22    
  40  0.273812      -1.29531      -838.914       838.914       1852.82       2691.73    
  41  0.601920     -0.507631      -328.769       328.769       2656.71       2985.48    
  42  0.827744     -0.189051      -122.440       122.440       3242.42       3364.86    
  43  0.881186E-01  -2.42907      -1573.20       1573.20       2650.54       4223.74    
  44  0.386744     -0.949994      -615.266       615.266       2418.74       3034.01    
  45  0.852312     -0.159803      -103.497       103.497       2680.66       2784.16    
  46  0.830189     -0.186102      -120.530       120.530       2182.87       2303.40    
  47  0.216531      -1.53002      -990.924       990.924       3012.04       4002.96    
  48  0.835540     -0.179677      -116.368       116.368       2695.97       2812.34    
  49  0.962152     -0.385824E-01  -24.9880       24.9880       2100.29       2125.28    
  50  0.866477     -0.143320      -92.8214       92.8214       2328.26       2421.08    
  51  0.640111     -0.446114      -288.927       288.927       2282.20       2571.13    
  52  0.103467      -2.26850      -1469.20       1469.20       2092.46       3561.67    
  53  0.746080     -0.292923      -189.712       189.712       2923.43       3113.14    
  54  0.154266      -1.86908      -1210.51       1210.51       2161.58       3372.09    
  55  0.479981     -0.734008      -475.383       475.383       2157.61       2632.99    
  56  0.641740     -0.443572      -287.281       287.281       1952.21       2239.49    
  57  0.282342      -1.26463      -819.045       819.045       2173.41       2992.46    
  58  0.691857     -0.368376      -238.580       238.580       2459.97       2698.55    
loop,thermsimp(1:2)       34   1516.64       782.312    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111       2328.25         68.32          1.22         39.39          0.11          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112       2886.95         68.38          1.21         39.16          0.19          0.05        108.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2328.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       34
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       35
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      111     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -683.454       683.454       2100.29       2783.75    
   2  0.175000      -1.74297      -1128.84       1128.84       2157.09       3285.93    
   3  0.131587      -2.02809      -1313.50       1313.50       2217.02       3530.52    
   4  0.301717      -1.19826      -776.060       776.060       1952.21       2728.27    
   5  0.166877      -1.79050      -1159.62       1159.62       2214.01       3373.64    
   6  0.481073     -0.731736      -473.911       473.911       2193.99       2667.90    
   7  0.706381     -0.347600      -225.125       225.125       2238.70       2463.83    
   8  0.702617     -0.352943      -228.585       228.585       2182.87       2411.46    
   9  0.552795     -0.592767      -383.908       383.908       2108.39       2492.30    
  10  0.495420     -0.702349      -454.879       454.879       2154.48       2609.36    
  11  0.479343     -0.735339      -476.245       476.245       2131.53       2607.78    
  12  0.462659     -0.770765      -499.189       499.189       2191.49       2690.68    
  13  0.631315E-01  -2.76253      -1789.16       1789.16       2200.82       3989.98    
  14  0.785681     -0.241205      -156.217       156.217       2328.26       2484.48    
  15  0.767932     -0.264055      -171.016       171.016       2153.25       2324.27    
  16  0.262689E-01  -3.63937      -2357.05       2357.05       2175.09       4532.14    
  17  0.871353     -0.137708      -89.1870       89.1870       2263.60       2352.79    
  18  0.618350     -0.480701      -311.328       311.328       1979.33       2290.66    
  19  0.196090      -1.62918      -1055.15       1055.15       2488.88       3544.03    
  20  0.925050     -0.779078E-01  -50.4573       50.4573       2282.20       2332.66    
  21  0.903269     -0.101735      -65.8891       65.8891       2539.20       2605.09    
  22  0.958828     -0.420436E-01  -27.2297       27.2297       2157.61       2184.84    
  23  0.969274     -0.312081E-01  -20.2120       20.2120       2170.43       2190.64    
  24  0.313932      -1.15858      -750.357       750.357       2515.11       3265.47    
  25  0.106324      -2.24126      -1451.56       1451.56       1852.82       3304.38    
  26  0.718705     -0.330304      -213.923       213.923       2459.97       2673.89    
  27  0.751116     -0.286195      -185.355       185.355       2163.74       2349.09    
  28  0.996391     -0.361592E-02  -2.34186       2.34186       2157.22       2159.56    
  29  0.313387      -1.16032      -751.484       751.484       2680.66       3432.15    
  30  0.305057      -1.18726      -768.930       768.930       2695.97       3464.90    
  31  0.408833     -0.894447      -579.292       579.292       2474.83       3054.12    
  32  0.589856     -0.527877      -341.881       341.881       2818.50       3160.38    
  33  0.808683     -0.212349      -137.528       137.528       2296.22       2433.75    
  34  0.481635     -0.730569      -473.155       473.155       2158.84       2632.00    
  35  0.677481     -0.389374      -252.179       252.179       2168.20       2420.38    
  36  0.673605     -0.395111      -255.895       255.895       2656.71       2912.61    
  37  0.409374E-01  -3.19571      -2069.71       2069.71       2173.41       4243.12    
  38  0.362144      -1.01571      -657.830       657.830       2418.74       3076.57    
  39  0.364718E-01  -3.31122      -2144.52       2144.52       2461.70       4606.22    
  40  0.280272      -1.27199      -823.811       823.811       2154.33       2978.14    
  41  0.532528     -0.630120      -408.099       408.099       2923.43       3331.53    
  42  0.901591     -0.103595      -67.0934       67.0934       2316.27       2383.37    
  43  0.262858      -1.33614      -865.355       865.355       2358.01       3223.36    
  44  0.168755      -1.77931      -1152.38       1152.38       2415.49       3567.87    
  45  0.504619     -0.683952      -442.964       442.964       2167.72       2610.69    
  46  0.900650     -0.104639      -67.7696       67.7696       2532.40       2600.17    
  47  0.438495     -0.824406      -533.929       533.929       2578.06       3111.99    
  48  0.984597     -0.155233E-01  -10.0537       10.0537       2769.52       2779.57    
  49  0.469739     -0.755579      -489.353       489.353       3242.42       3731.78    
  50  0.252111      -1.37789      -892.392       892.392       2161.58       3053.97    
  51  0.764692     -0.268282      -173.754       173.754       2092.46       2266.22    
  52  0.848445     -0.164351      -106.442       106.442       2101.37       2207.81    
  53  0.705739     -0.348509      -225.713       225.713       3012.04       3237.75    
  54  0.449895     -0.798741      -517.307       517.307       2947.65       3464.95    
  55  0.742135     -0.298224      -193.146       193.146       2650.54       2843.69    
  56  0.305311      -1.18642      -768.392       768.392       2614.73       3383.12    
  57  0.798408     -0.225136      -145.810       145.810       2485.36       2631.17    
  58  0.807590     -0.213700      -138.404       138.404       2328.25       2466.65    
loop,thermsimp(1:2)       35   683.454       1128.84    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113       3795.78         68.29          1.20         39.32          0.09          0.05        108.95
Just calling func    0   0        108.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3795.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       35
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       36
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      112     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -1670.80       1670.80       2157.22       3828.02    
   2  0.962370     -0.383559E-01  -24.8413       24.8413       2157.61       2182.45    
   3  0.356737      -1.03076      -667.572       667.572       2170.43       2838.00    
   4  0.884319     -0.122937      -79.6207       79.6207       2101.37       2180.99    
   5  0.919725E-01  -2.38627      -1545.47       1545.47       2092.46       3637.93    
   6  0.900184     -0.105156      -68.1046       68.1046       1979.33       2047.44    
   7  0.390055     -0.941468      -609.745       609.745       2153.25       2763.00    
   8  0.263976      -1.33190      -862.608       862.608       2282.20       3144.81    
   9  0.898455     -0.107078      -69.3496       69.3496       2163.74       2233.09    
  10  0.697674E-01  -2.66259      -1724.43       1724.43       2263.60       3988.04    
  11  0.888938     -0.117727      -76.2464       76.2464       2316.27       2392.52    
  12  0.824147     -0.193406      -125.260       125.260       2182.87       2308.13    
  13  0.941109     -0.606968E-01  -39.3105       39.3105       2168.20       2207.51    
  14  0.885654     -0.121429      -78.6437       78.6437       2296.22       2374.87    
  15  0.798208     -0.225386      -145.972       145.972       2238.70       2384.68    
  16  0.365331      -1.00695      -652.156       652.156       2328.25       2980.40    
  17  0.519490     -0.654907      -424.152       424.152       2328.26       2752.41    
  18  0.922741     -0.804065E-01  -52.0755       52.0755       2108.39       2160.46    
  19  0.877443     -0.130744      -84.6765       84.6765       2532.40       2617.08    
  20  0.584844     -0.536410      -347.408       347.408       2539.20       2886.60    
  21  0.671390     -0.398406      -258.029       258.029       2131.53       2389.56    
  22  0.203335      -1.59290      -1031.65       1031.65       2154.48       3186.13    
  23  0.330236E-01  -3.41053      -2208.84       2208.84       2167.72       4376.57    
  24  0.879725     -0.128146      -82.9944       82.9944       2485.36       2568.35    
  25  0.833976     -0.181550      -117.582       117.582       2158.84       2276.42    
  26  0.901698     -0.103475      -67.0161       67.0161       2193.99       2261.01    
  27  0.692847     -0.366946      -237.654       237.654       2459.97       2697.62    
  28  0.550572     -0.596797      -386.517       386.517       2191.49       2578.01    
  29  0.158383E-01  -4.14532      -2684.73       2684.73       1952.21       4636.94    
  30  0.503246     -0.686677      -444.729       444.729       2769.52       3214.25    
  31  0.648812     -0.432612      -280.183       280.183       2100.29       2380.48    
  32  0.306980      -1.18097      -764.861       764.861       2650.54       3415.40    
  33  0.205188      -1.58383      -1025.77       1025.77       2656.71       3682.49    
  34  0.265146      -1.32748      -859.744       859.744       2154.33       3014.07    
  35  0.272730E-01  -3.60186      -2332.76       2332.76       2161.58       4494.33    
  36  0.262990E-01  -3.63823      -2356.31       2356.31       2474.83       4831.14    
  37  0.492753     -0.707748      -458.375       458.375       2418.74       2877.11    
  38  0.255065      -1.36624      -884.846       884.846       2578.06       3462.91    
  39  0.623259     -0.472794      -306.206       306.206       2818.50       3124.71    
  40  0.949296     -0.520343E-01  -33.7002       33.7002       2358.01       2391.71    
  41  0.982394     -0.177630E-01  -11.5043       11.5043       3012.04       3023.54    
  42  0.566450     -0.568366      -368.104       368.104       2515.11       2883.22    
  43  0.557613     -0.584090      -378.288       378.288       2157.09       2535.38    
  44  0.900731     -0.104549      -67.7114       67.7114       1852.82       1920.53    
  45  0.671339     -0.398481      -258.077       258.077       2923.43       3181.51    
  46  0.650454     -0.430084      -278.545       278.545       2214.01       2492.56    
  47  0.749315     -0.288595      -186.910       186.910       2614.73       2801.64    
  48  0.667497     -0.404220      -261.794       261.794       2680.66       2942.46    
  49  0.132870      -2.01838      -1307.21       1307.21       2695.97       4003.18    
  50  0.964787     -0.358480E-01  -23.2171       23.2171       2947.65       2970.86    
  51  0.835780     -0.179390      -116.182       116.182       2217.02       2333.20    
  52  0.601609     -0.508148      -329.103       329.103       2488.88       2817.98    
  53  0.937321     -0.647298E-01  -41.9225       41.9225       2415.49       2457.42    
  54  0.467877     -0.759550      -491.925       491.925       3242.42       3734.35    
  55  0.953249     -0.478789E-01  -31.0089       31.0089       2200.82       2231.83    
  56  0.827724     -0.189076      -122.455       122.455       2173.41       2295.87    
  57  0.624780     -0.470355      -304.627       304.627       2175.09       2479.72    
  58  0.821535     -0.196581      -127.316       127.316       3795.78       3923.10    
loop,thermsimp(1:2)       36   1670.80       24.8413    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114       3043.12         68.58          1.25         39.06          0.03          0.05        108.96
Just calling func    0   0        108.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    115      15969.49         68.07          1.16         39.28          0.18          0.05        108.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   3043.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       36
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       37
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      114     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -40.6497       40.6497       1852.82       1893.47    
   2  0.112532E-01  -4.48710      -2906.08       2906.08       1979.33       4885.42    
   3  0.907929     -0.965891E-01  -62.5562       62.5562       2108.39       2170.95    
   4  0.478640     -0.736807      -477.195       477.195       2101.37       2578.57    
   5  0.737686     -0.304237      -197.040       197.040       2157.61       2354.65    
   6  0.114880      -2.16387      -1401.44       1401.44       2168.20       3569.64    
   7  0.309837      -1.17171      -758.861       758.861       2200.82       2959.68    
   8  0.469091     -0.756958      -490.246       490.246       2163.74       2653.98    
   9  0.721151     -0.326907      -211.722       211.722       2193.99       2405.71    
  10  0.557251     -0.584740      -378.709       378.709       2158.84       2537.55    
  11  0.581534     -0.542085      -351.083       351.083       2173.41       2524.50    
  12  0.501412     -0.690326      -447.092       447.092       2182.87       2629.97    
  13  0.783062     -0.244543      -158.379       158.379       2217.02       2375.40    
  14  0.571322     -0.559803      -362.558       362.558       2296.22       2658.78    
  15  0.902729E-01  -2.40492      -1557.55       1557.55       2100.29       3657.85    
  16  0.695403E-01  -2.66585      -1726.55       1726.55       2238.70       3965.25    
  17  0.128872      -2.04894      -1327.00       1327.00       2131.53       3458.54    
  18  0.940828E-01  -2.36358      -1530.78       1530.78       2358.01       3888.79    
  19  0.326350      -1.11979      -725.232       725.232       2316.27       3041.51    
  20  0.102915      -2.27385      -1472.67       1472.67       2415.49       3888.16    
  21  0.324524      -1.12540      -728.866       728.866       2175.09       2903.96    
  22  0.259454      -1.34918      -873.799       873.799       2214.01       3087.81    
  23  0.782812     -0.244863      -158.586       158.586       2157.09       2315.68    
  24  0.383591     -0.958178      -620.567       620.567       2485.36       3105.93    
  25  0.626880     -0.466999      -302.454       302.454       2191.49       2493.94    
  26  0.292269      -1.23008      -796.665       796.665       2532.40       3329.07    
  27  0.448852     -0.801062      -518.810       518.810       2459.97       2978.78    
  28  0.685432     -0.377706      -244.623       244.623       2328.26       2572.88    
  29  0.995399     -0.461118E-02  -2.98645       2.98645       2153.25       2156.24    
  30  0.163323      -1.81203      -1173.57       1173.57       2614.73       3788.29    
  31  0.952940     -0.482038E-01  -31.2193       31.2193       2488.88       2520.10    
  32  0.861306     -0.149306      -96.6983       96.6983       2170.43       2267.13    
  33  0.587276     -0.532261      -344.721       344.721       2418.74       2763.46    
  34  0.908704     -0.957357E-01  -62.0036       62.0036       2515.11       2577.12    
  35  0.585935     -0.534546      -346.200       346.200       2539.20       2885.40    
  36  0.429836     -0.844352      -546.847       546.847       2680.66       3227.51    
  37  0.726203     -0.319926      -207.201       207.201       2947.65       3154.85    
  38  0.151145E-01  -4.19210      -2715.03       2715.03       2328.25       5043.27    
  39  0.927869     -0.748646E-01  -48.4863       48.4863       2154.33       2202.81    
  40  0.961645     -0.391099E-01  -25.3297       25.3297       3012.04       3037.37    
  41  0.253977      -1.37051      -887.615       887.615       2818.50       3706.11    
  42  0.768038     -0.263917      -170.926       170.926       2282.20       2453.13    
  43  0.569441E-01  -2.86569      -1855.97       1855.97       2923.43       4779.40    
  44  0.103919      -2.26415      -1466.38       1466.38       2154.48       3620.87    
  45  0.312226      -1.16403      -753.886       753.886       2769.52       3523.41    
  46  0.473636E-02  -5.35249      -3466.55       3466.55       2650.54       6117.10    
  47  0.192099      -1.64975      -1068.46       1068.46       2578.06       3646.52    
  48  0.799429     -0.223858      -144.982       144.982       2092.46       2237.44    
  49  0.164379      -1.80558      -1169.39       1169.39       2656.71       3826.10    
  50  0.421896     -0.862996      -558.922       558.922       3242.42       3801.35    
  51  0.361660      -1.01705      -658.696       658.696       2157.22       2815.91    
  52  0.346541      -1.05975      -686.353       686.353       3795.78       4482.14    
  53  0.728715     -0.316473      -204.965       204.965       2263.60       2468.57    
  54  0.305329      -1.18637      -768.353       768.353       2695.97       3464.32    
  55  0.547244     -0.602861      -390.445       390.445       2167.72       2558.17    
  56  0.942790     -0.589122E-01  -38.1546       38.1546       2161.58       2199.73    
  57  0.846801     -0.166290      -107.698       107.698       1952.21       2059.91    
  58  0.961806     -0.389424E-01  -25.2212       25.2212       3043.12       3068.34    
loop,thermsimp(1:2)       37   40.6497       2906.08    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116       4147.82         68.19          1.21         39.88          0.01          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4147.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       37
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       38
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      115
neval,tstepnext:      115     115

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -640.869       640.869       1852.82       2493.69    
   2  0.687927     -0.374072      -242.269       242.269       1952.21       2194.48    
   3  0.288957      -1.24148      -804.047       804.047       2153.25       2957.30    
   4  0.192838      -1.64590      -1065.97       1065.97       2108.39       3174.36    
   5  0.369869     -0.994607      -644.161       644.161       2161.58       2805.74    
   6  0.735973     -0.306562      -198.546       198.546       2154.33       2352.87    
   7  0.637144     -0.450760      -291.936       291.936       2092.46       2384.40    
   8  0.703934     -0.351071      -227.372       227.372       2170.43       2397.80    
   9  0.864279     -0.145859      -94.4661       94.4661       2157.09       2251.56    
  10  0.473452     -0.747705      -484.253       484.253       2157.61       2641.86    
  11  0.242010      -1.41877      -918.874       918.874       2217.02       3135.89    
  12  0.510769     -0.671838      -435.118       435.118       2193.99       2629.11    
  13  0.829624     -0.186782      -120.970       120.970       2282.20       2403.17    
  14  0.228911      -1.47442      -954.915       954.915       2263.60       3218.52    
  15  0.310006      -1.17116      -758.509       758.509       2191.49       2950.00    
  16  0.248341      -1.39295      -902.151       902.151       2488.88       3391.03    
  17  0.723214     -0.324050      -209.872       209.872       2173.41       2383.28    
  18  0.420900     -0.865360      -560.453       560.453       2158.84       2719.29    
  19  0.133903      -2.01064      -1302.20       1302.20       2167.72       3469.92    
  20  0.571916     -0.558763      -361.885       361.885       2328.26       2690.15    
  21  0.609104     -0.495766      -321.084       321.084       2515.11       2836.20    
  22  0.582057     -0.541186      -350.501       350.501       2101.37       2451.87    
  23  0.440731     -0.819321      -530.636       530.636       2182.87       2713.51    
  24  0.211006      -1.55587      -1007.66       1007.66       2163.74       3171.40    
  25  0.665769     -0.406813      -263.474       263.474       2296.22       2559.70    
  26  0.766062     -0.266493      -172.595       172.595       2418.74       2591.33    
  27  0.321416E-01  -3.43760      -2226.37       2226.37       2157.22       4383.59    
  28  0.165897E-01  -4.09897      -2654.71       2654.71       2539.20       5193.91    
  29  0.634553     -0.454835      -294.575       294.575       2175.09       2469.67    
  30  0.981834     -0.183335E-01  -11.8738       11.8738       2200.82       2212.69    
  31  0.511720     -0.669978      -433.914       433.914       2459.97       2893.88    
  32  0.426358     -0.852477      -552.109       552.109       3012.04       3564.15    
  33  0.500527     -0.692094      -448.237       448.237       2316.27       2764.51    
  34  0.100483      -2.29777      -1488.16       1488.16       3043.12       4531.28    
  35  0.837324     -0.177545      -114.987       114.987       2214.01       2329.00    
  36  0.257741      -1.35580      -878.088       878.088       2485.36       3363.45    
  37  0.437184     -0.827401      -535.869       535.869       2947.65       3483.52    
  38  0.707529     -0.345976      -224.073       224.073       2680.66       2904.74    
  39  0.538379     -0.619193      -401.022       401.022       2532.40       2933.42    
  40  0.611820     -0.491317      -318.203       318.203       2131.53       2449.74    
  41  0.404533     -0.905022      -586.140       586.140       2695.97       3282.11    
  42  0.902499     -0.102588      -66.4416       66.4416       2769.52       2835.96    
  43  0.704299     -0.350552      -227.036       227.036       2168.20       2395.24    
  44  0.511818     -0.669786      -433.789       433.789       2154.48       2588.27    
  45  0.748131     -0.290178      -187.935       187.935       2578.06       2766.00    
  46  0.296598      -1.21538      -787.144       787.144       2100.29       2887.44    
  47  0.805122     -0.216762      -140.387       140.387       2818.50       2958.89    
  48  0.525063     -0.644236      -417.242       417.242       2614.73       3031.97    
  49  0.192567      -1.64731      -1066.89       1066.89       3242.42       4309.31    
  50  0.991898     -0.813527E-02  -5.26884       5.26884       2656.71       2661.98    
  51  0.238175      -1.43475      -929.220       929.220       2415.49       3344.71    
  52  0.627675     -0.465733      -301.633       301.633       2358.01       2659.64    
  53  0.328849      -1.11216      -720.291       720.291       2238.70       2959.00    
  54  0.697651     -0.360037      -233.179       233.179       3795.78       4028.96    
  55  0.154345      -1.86857      -1210.18       1210.18       2923.43       4133.61    
  56  0.196838      -1.62537      -1052.68       1052.68       1979.33       3032.01    
  57  0.397903     -0.921546      -596.843       596.843       2328.25       2925.09    
  58  0.746135E-01  -2.59543      -1680.94       1680.94       4147.82       5828.76    
loop,thermsimp(1:2)       38   640.869       242.269    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117       2650.54         68.19          1.18         39.27          0.24          0.04        108.93
Just calling func    0   0        108.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118      28081.58         68.35          1.14         39.11          0.52          0.05        109.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2650.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    647.653               115
loop is:       38
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    647.653               115
loop is:       39
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    323.827               172

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      117     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -104.466       104.466       1952.21       2056.68    
   2  0.309663      -1.17227      -379.612       379.612       2200.82       2580.43    
   3  0.688114     -0.373801      -121.047       121.047       2157.09       2278.14    
   4  0.677876     -0.388791      -125.901       125.901       2214.01       2339.91    
   5  0.283701      -1.25984      -407.968       407.968       2154.33       2562.30    
   6  0.183733      -1.69427      -548.650       548.650       2173.41       2722.06    
   7  0.243414      -1.41299      -457.564       457.564       2092.46       2550.03    
   8  0.785389     -0.241576      -78.2286       78.2286       2168.20       2246.43    
   9  0.258033      -1.35467      -438.678       438.678       2170.43       2609.11    
  10  0.137887      -1.98132      -641.606       641.606       2282.20       2923.81    
  11  0.386520     -0.950573      -307.821       307.821       2131.53       2439.35    
  12  0.882934     -0.124505      -40.3181       40.3181       2101.37       2141.69    
  13  0.395106     -0.928602      -300.706       300.706       2175.09       2475.80    
  14  0.107633      -2.22903      -721.820       721.820       1852.82       2574.64    
  15  0.434094     -0.834495      -270.232       270.232       2296.22       2566.45    
  16  0.558484     -0.582529      -188.639       188.639       2154.48       2343.12    
  17  0.102706      -2.27589      -736.993       736.993       2418.74       3155.73    
  18  0.325804      -1.12146      -363.158       363.158       2193.99       2557.15    
  19  0.693871     -0.365469      -118.348       118.348       2157.61       2275.96    
  20  0.832622     -0.183176      -59.3172       59.3172       2358.01       2417.32    
  21  0.691207     -0.369316      -119.594       119.594       2656.71       2776.31    
  22  0.903946     -0.100985      -32.7017       32.7017       2328.26       2360.96    
  23  0.258785E-01  -3.65434      -1183.37       1183.37       2182.87       3366.25    
  24  0.247338      -1.39700      -452.386       452.386       2158.84       2611.23    
  25  0.861464     -0.149122      -48.2898       48.2898       2316.27       2364.56    
  26  0.954919     -0.461290E-01  -14.9378       14.9378       2578.06       2593.00    
  27  0.579638     -0.545352      -176.600       176.600       2161.58       2338.18    
  28  0.537182     -0.621418      -201.232       201.232       2769.52       2970.75    
  29  0.407710     -0.897199      -290.537       290.537       2515.11       2805.65    
  30  0.958466     -0.424211E-01  -13.7371       13.7371       2100.29       2114.03    
  31  0.884674     -0.122536      -39.6804       39.6804       2459.97       2499.65    
  32  0.395055     -0.928731      -300.748       300.748       2680.66       2981.41    
  33  0.325425      -1.12262      -363.535       363.535       2328.25       2691.78    
  34  0.679842     -0.385895      -124.963       124.963       2532.40       2657.36    
  35  0.765292     -0.267498      -86.6229       86.6229       2191.49       2278.11    
  36  0.217460      -1.52574      -494.075       494.075       2153.25       2647.33    
  37  0.181189      -1.70822      -553.166       553.166       2818.50       3371.66    
  38  0.518456     -0.656899      -212.722       212.722       2238.70       2451.43    
  39  0.249864E-01  -3.68942      -1194.73       1194.73       2614.73       3809.46    
  40  0.336654      -1.08870      -352.550       352.550       1979.33       2331.88    
  41  0.873801     -0.134903      -43.6851       43.6851       2217.02       2260.70    
  42  0.478904     -0.736255      -238.419       238.419       2163.74       2402.15    
  43  0.819950     -0.198512      -64.2835       64.2835       2108.39       2172.67    
  44  0.966813     -0.337500E-01  -10.9292       10.9292       2263.60       2274.53    
  45  0.514109     -0.665319      -215.448       215.448       2695.97       2911.42    
  46  0.483734     -0.726221      -235.170       235.170       2415.49       2650.66    
  47  0.227743E-01  -3.78212      -1224.75       1224.75       2485.36       3710.11    
  48  0.409495     -0.892830      -289.122       289.122       2488.88       2778.00    
  49  0.198361      -1.61767      -523.844       523.844       2167.72       2691.57    
  50  0.925767     -0.771331E-01  -24.9777       24.9777       2947.65       2972.62    
  51  0.842113     -0.171842      -55.6469       55.6469       3012.04       3067.69    
  52  0.347114E-01  -3.36069      -1088.28       1088.28       3795.78       4884.06    
  53  0.215814      -1.53334      -496.536       496.536       2923.43       3419.97    
  54  0.219309      -1.51727      -491.334       491.334       3242.42       3733.76    
  55  0.940126     -0.617416E-01  -19.9936       19.9936       2157.22       2177.21    
  56  0.663408     -0.410365      -132.887       132.887       3043.12       3176.00    
  57  0.630947     -0.460533      -149.133       149.133       2539.20       2688.33    
  58  0.719671     -0.328961      -106.526       106.526       2650.54       2757.07    
loop,thermsimp(1:2)       39   104.466       379.612    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119       2502.50         68.44          1.16         39.06          0.30          0.05        109.02
Just calling func    0   0        109.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120       4779.13         68.36          1.14         39.14          0.29          0.05        108.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2502.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       39
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       40
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      119     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -15.0351       15.0351       1952.21       1967.25    
   2  0.450411     -0.797594      -258.282       258.282       2100.29       2358.58    
   3  0.691912E-01  -2.67088      -864.903       864.903       2101.37       2966.27    
   4  0.740935     -0.299842      -97.0968       97.0968       2108.39       2205.49    
   5  0.452531     -0.792898      -256.762       256.762       2157.22       2413.98    
   6  0.461330     -0.773642      -250.526       250.526       2168.20       2418.73    
   7  0.102999      -2.27303      -736.069       736.069       2217.02       2953.09    
   8  0.475106     -0.744217      -240.997       240.997       2263.60       2504.60    
   9  0.240275      -1.42597      -461.767       461.767       2157.61       2619.38    
  10  0.276707E-01  -3.58738      -1161.69       1161.69       2191.49       3353.18    
  11  0.132701E-01  -4.32224      -1399.66       1399.66       2157.09       3556.75    
  12  0.997219     -0.278509E-02 -0.901885      0.901885       1979.33       1980.23    
  13  0.563305     -0.573934      -185.855       185.855       2161.58       2347.43    
  14  0.347949      -1.05570      -341.864       341.864       2214.01       2555.88    
  15  0.546018     -0.605103      -195.949       195.949       2154.48       2350.43    
  16  0.343968      -1.06721      -345.590       345.590       2328.26       2673.85    
  17  0.945234     -0.563230E-01  -18.2389       18.2389       2316.27       2334.51    
  18  0.346208      -1.06072      -343.488       343.488       2163.74       2507.22    
  19  0.406433     -0.900337      -291.553       291.553       2358.01       2649.56    
  20  0.632259     -0.458455      -148.460       148.460       2131.53       2279.99    
  21  0.983930     -0.162002E-01  -5.24605       5.24605       2238.70       2243.95    
  22  0.200798      -1.60546      -519.890       519.890       2175.09       2694.98    
  23  0.223962      -1.49628      -484.534       484.534       2459.97       2944.50    
  24  0.594322     -0.520335      -168.498       168.498       2092.46       2260.96    
  25  0.875298     -0.133191      -43.1308       43.1308       2193.99       2237.12    
  26  0.327822      -1.11529      -361.159       361.159       2154.33       2515.49    
  27  0.215105      -1.53663      -497.601       497.601       2296.22       2793.82    
  28  0.905181     -0.996198E-01  -32.2596       32.2596       1852.82       1885.08    
  29  0.699086     -0.357981      -115.924       115.924       2200.82       2316.74    
  30  0.747401     -0.291154      -94.2834       94.2834       2578.06       2672.34    
  31  0.699189     -0.357834      -115.876       115.876       2170.43       2286.31    
  32  0.563488     -0.573610      -185.750       185.750       2158.84       2344.59    
  33  0.155576      -1.86062      -602.519       602.519       2153.25       2755.77    
  34  0.380593     -0.966025      -312.825       312.825       2415.49       2728.32    
  35  0.626112     -0.468226      -151.624       151.624       2532.40       2684.03    
  36  0.372369     -0.987870      -319.898       319.898       2539.20       2859.09    
  37  0.517531     -0.658686      -213.300       213.300       2167.72       2381.02    
  38  0.673247     -0.395643      -128.120       128.120       2328.25       2456.37    
  39  0.741527     -0.299044      -96.8384       96.8384       2173.41       2270.25    
  40  0.280982      -1.26947      -411.087       411.087       2650.54       3061.63    
  41  0.331745      -1.10339      -357.307       357.307       2656.71       3014.02    
  42  0.712030     -0.339635      -109.983       109.983       2488.88       2598.86    
  43  0.200581      -1.60654      -520.239       520.239       2515.11       3035.35    
  44  0.989915     -0.101357E-01  -3.28221       3.28221       2695.97       2699.25    
  45  0.808031     -0.213155      -69.0254       69.0254       2282.20       2351.23    
  46  0.893446     -0.112670      -36.4855       36.4855       2769.52       2806.01    
  47  0.364885      -1.00817      -326.473       326.473       2947.65       3274.12    
  48  0.923731     -0.793347E-01  -25.6907       25.6907       2680.66       2706.35    
  49  0.504880     -0.683434      -221.314       221.314       3012.04       3233.35    
  50  0.724988     -0.321600      -104.143       104.143       2418.74       2522.88    
  51  0.927322     -0.754540E-01  -24.4340       24.4340       3043.12       3067.55    
  52  0.857721     -0.153476      -49.6997       49.6997       2182.87       2232.57    
  53  0.943333     -0.583361E-01  -18.8908       18.8908       2818.50       2837.39    
  54  0.794551     -0.229978      -74.4729       74.4729       2923.43       2997.90    
  55  0.732400     -0.311429      -100.849       100.849       2485.36       2586.21    
  56  0.143434      -1.94188      -628.833       628.833       3242.42       3871.26    
  57  0.859384     -0.151540      -49.0726       49.0726       2614.73       2663.80    
  58  0.677471     -0.389389      -126.094       126.094       2502.50       2628.59    
loop,thermsimp(1:2)       40   15.0351       258.282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121       2795.51         68.43          1.16         39.11          0.42          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    2795.5        3.541     -2.669      3.023     -102.6     0.6929    
                      0.3292      1.100     -99.70      4.980     0.6786    

                       2.848     -2.545      1.540      7204.      7000.    

                      -2.098      0.000      0.000      0.000     -1.221    



                      -1.971      0.000      0.000      7000.      412.8    

                      -1.471     -5.071     -6.600     -7.475      8.122    

                      -12.44     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2564E-01 0.2347     0.4297E-01-0.5048    

                     -0.2486     0.1045     0.1988     0.1252     0.4682E-01



                     -0.8912    -0.5098      0.000     0.1043     0.1457    

                      0.1821     0.2708    -0.7116     0.1792     0.3915    

                      0.2077     0.4989E-01-0.4608     -1.449      7000.    



                      -1.239     -1.130     -2.142     -1.982    -0.3807    

                     -0.3252      9.288      8.529    -0.1687E+05 -5.942    

                     -0.1613     -2.291      8.729      9.129    -0.1969E+05



                      -6.000     0.5501    -0.7284E-01  8.790      9.129    

                     -0.1944E+05 -6.000    -0.2289    -0.2265      9.687    

                       8.988    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2795.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       40
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       41
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      120     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -332.673       332.673       1852.82       2185.49    
   2  0.414955     -0.879585      -284.833       284.833       1952.21       2237.05    
   3  0.407443     -0.897854      -290.749       290.749       1979.33       2270.08    
   4  0.883897     -0.123414      -39.9649       39.9649       2108.39       2148.35    
   5  0.520045     -0.653840      -211.731       211.731       2182.87       2394.61    
   6  0.634521     -0.454885      -147.304       147.304       2193.99       2341.29    
   7  0.344406      -1.06594      -345.178       345.178       2238.70       2583.88    
   8  0.545595     -0.605879      -196.200       196.200       2092.46       2288.66    
   9  0.766876     -0.265430      -85.9531       85.9531       2173.41       2259.36    
  10  0.639043     -0.447783      -145.004       145.004       2131.53       2276.54    
  11  0.850701     -0.161694      -52.3610       52.3610       2170.43       2222.79    
  12  0.832060     -0.183851      -59.5359       59.5359       2200.82       2260.35    
  13  0.728209     -0.317167      -102.707       102.707       2316.27       2418.98    
  14  0.531327     -0.632378      -204.781       204.781       2158.84       2363.62    
  15  0.188974E-01  -3.96873      -1285.18       1285.18       2161.58       3446.76    
  16  0.246817      -1.39911      -453.068       453.068       2154.48       2607.55    
  17  0.935336     -0.668496E-01  -21.6477       21.6477       2282.20       2303.85    
  18  0.730823     -0.313585      -101.547       101.547       2100.29       2201.84    
  19  0.482288     -0.729213      -236.139       236.139       2167.72       2403.86    
  20  0.782974E-04  -9.45500      -3061.78       3061.78       2157.22       5219.00    
  21  0.258744      -1.35192      -437.787       437.787       2168.20       2605.99    
  22  0.389044     -0.944063      -305.713       305.713       2328.25       2633.96    
  23  0.611459E-01  -2.79449      -904.931       904.931       2263.60       3168.54    
  24  0.124922      -2.08006      -673.580       673.580       2163.74       2837.32    
  25  0.253683      -1.37167      -444.183       444.183       2154.33       2598.51    
  26  0.781437     -0.246621      -79.8624       79.8624       2418.74       2498.60    
  27  0.835634     -0.179565      -58.1479       58.1479       2214.01       2272.16    
  28  0.542030     -0.612434      -198.322       198.322       2485.36       2683.68    
  29  0.463443     -0.769071      -249.046       249.046       2488.88       2737.93    
  30  0.120587      -2.11538      -685.017       685.017       2157.61       2842.63    
  31  0.733316     -0.310178      -100.444       100.444       2502.50       2602.94    
  32  0.955530     -0.454889E-01  -14.7305       14.7305       2358.01       2372.74    
  33  0.419735     -0.868132      -281.124       281.124       2614.73       2895.85    
  34  0.284829      -1.25587      -406.683       406.683       2578.06       2984.74    
  35  0.924079     -0.789582E-01  -25.5688       25.5688       2328.26       2353.83    
  36  0.432674     -0.837770      -271.292       271.292       2532.40       2803.69    
  37  0.155293      -1.86244      -603.107       603.107       2175.09       2778.20    
  38  0.634342     -0.455168      -147.395       147.395       2695.97       2843.36    
  39  0.935635     -0.665293E-01  -21.5440       21.5440       2680.66       2702.21    
  40  0.931832     -0.706024E-01  -22.8629       22.8629       2415.49       2438.36    
  41  0.875970     -0.132424      -42.8823       42.8823       2153.25       2196.13    
  42  0.273544      -1.29629      -419.774       419.774       2296.22       2716.00    
  43  0.799596     -0.223649      -72.4236       72.4236       2769.52       2841.94    
  44  0.772883     -0.257628      -83.4267       83.4267       2818.50       2901.93    
  45  0.274276      -1.29362      -418.909       418.909       2539.20       2958.11    
  46  0.116034      -2.15387      -697.482       697.482       2459.97       3157.45    
  47  0.700214     -0.356369      -115.402       115.402       2217.02       2332.42    
  48  0.704184E-01  -2.65330      -859.210       859.210       2101.37       2960.58    
  49  0.699980E-01  -2.65929      -861.149       861.149       2923.43       3784.58    
  50  0.186964      -1.67684      -543.005       543.005       2656.71       3199.72    
  51  0.342641      -1.07107      -346.842       346.842       2515.11       2861.95    
  52  0.989806     -0.102462E-01  -3.31798       3.31798       2650.54       2653.86    
  53  0.216227      -1.53143      -495.917       495.917       3043.12       3539.03    
  54  0.233793      -1.45332      -470.624       470.624       3012.04       3482.66    
  55  0.404477     -0.905159      -293.115       293.115       2947.65       3240.76    
  56  0.164502      -1.80483      -584.452       584.452       2191.49       2775.94    
  57  0.561765E-01  -2.87926      -932.380       932.380       2157.09       3089.47    
  58  0.169196E-01  -4.07928      -1320.98       1320.98       2795.51       4116.49    
loop,thermsimp(1:2)       41   332.673       284.833    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122       2146.03         68.43          1.16         39.09          0.44          0.05        109.18
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123       2259.84         68.45          1.14         39.01          0.43          0.05        109.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2146.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       41
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       42
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      122     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -933.738       933.738       2108.39       3042.13    
   2  0.688513     -0.373221      -120.859       120.859       1852.82       1973.68    
   3  0.530653     -0.633647      -205.192       205.192       2153.25       2358.44    
   4  0.542886     -0.610856      -197.811       197.811       2100.29       2298.11    
   5  0.603382     -0.505205      -163.599       163.599       2170.43       2334.03    
   6  0.478412     -0.737283      -238.752       238.752       1952.21       2190.97    
   7  0.809657     -0.211144      -68.3742       68.3742       2173.41       2241.79    
   8  0.764585     -0.268422      -86.9221       86.9221       2200.82       2287.74    
   9  0.228600      -1.47578      -477.897       477.897       1979.33       2457.23    
  10  0.495526     -0.702136      -227.370       227.370       2214.01       2441.38    
  11  0.368264     -0.998954      -323.488       323.488       2131.53       2455.02    
  12  0.407647     -0.897355      -290.587       290.587       2092.46       2383.05    
  13  0.316165      -1.15149      -372.883       372.883       2282.20       2655.09    
  14  0.458518     -0.779756      -252.506       252.506       2217.02       2469.52    
  15  0.643610     -0.440663      -142.698       142.698       2193.99       2336.69    
  16  0.316553E-01  -3.45285      -1118.12       1118.12       2328.26       3446.39    
  17  0.570171     -0.561819      -181.932       181.932       2158.84       2340.77    
  18  0.448642E-01  -3.10412      -1005.20       1005.20       2358.01       3363.20    
  19  0.128957      -2.04828      -663.287       663.287       2182.87       2846.16    
  20  0.159422      -1.83620      -594.611       594.611       2167.72       2762.34    
  21  0.154083      -1.87026      -605.640       605.640       2316.27       2921.91    
  22  0.696997     -0.360974      -116.893       116.893       2415.49       2532.39    
  23  0.579421     -0.545727      -176.721       176.721       2418.74       2595.46    
  24  0.528206     -0.638269      -206.689       206.689       2238.70       2445.39    
  25  0.322914      -1.13037      -366.043       366.043       2154.33       2520.37    
  26  0.369562     -0.995437      -322.349       322.349       2502.50       2824.85    
  27  0.134248      -2.00806      -650.265       650.265       2168.20       2818.47    
  28  0.950150     -0.511358E-01  -16.5591       16.5591       2154.48       2171.04    
  29  0.138040      -1.98021      -641.245       641.245       2328.25       2969.49    
  30  0.316838      -1.14936      -372.195       372.195       2650.54       3022.74    
  31  0.151783      -1.88530      -610.512       610.512       2485.36       3095.87    
  32  0.338674      -1.08272      -350.613       350.613       2680.66       3031.28    
  33  0.814165     -0.205592      -66.5763       66.5763       2296.22       2362.80    
  34  0.578183     -0.547865      -177.413       177.413       2488.88       2666.29    
  35  0.208707      -1.56682      -507.379       507.379       2191.49       2698.87    
  36  0.540561     -0.615147      -199.201       199.201       2175.09       2374.29    
  37  0.910129     -0.941686E-01  -30.4943       30.4943       2532.40       2562.90    
  38  0.907740     -0.967972E-01  -31.3455       31.3455       2163.74       2195.08    
  39  0.549661     -0.598453      -193.795       193.795       2769.52       2963.32    
  40  0.193889      -1.64047      -531.228       531.228       2157.61       2688.84    
  41  0.807651     -0.213625      -69.1775       69.1775       2695.97       2765.15    
  42  0.613777     -0.488124      -158.067       158.067       2515.11       2673.18    
  43  0.664452     -0.408793      -132.378       132.378       2614.73       2747.10    
  44  0.584630     -0.536776      -173.822       173.822       2818.50       2992.32    
  45  0.618915     -0.479787      -155.368       155.368       2539.20       2694.56    
  46  0.542097     -0.612311      -198.283       198.283       2101.37       2299.65    
  47  0.133641      -2.01260      -651.733       651.733       2578.06       3229.79    
  48  0.479627     -0.734747      -237.931       237.931       2157.09       2395.02    
  49  0.225939      -1.48749      -481.689       481.689       2459.97       2941.66    
  50  0.324869      -1.12433      -364.089       364.089       2263.60       2627.69    
  51  0.669051     -0.401895      -130.144       130.144       2656.71       2786.86    
  52  0.602039     -0.507434      -164.321       164.321       2947.65       3111.97    
  53  0.143076      -1.94438      -629.643       629.643       2161.58       2791.22    
  54  0.897604     -0.108026      -34.9818       34.9818       3012.04       3047.02    
  55  0.165810      -1.79691      -581.888       581.888       3043.12       3625.01    
  56  0.468567     -0.758077      -245.486       245.486       2923.43       3168.92    
  57  0.641740     -0.443572      -143.640       143.640       2795.51       2939.15    
  58  0.904980     -0.998426E-01  -32.3317       32.3317       2146.03       2178.36    
loop,thermsimp(1:2)       42   933.738       120.859    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       2460.50         68.43          1.17         38.93          0.45          0.04        109.02
Just calling func    0   0        109.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    125       4545.76         68.44          1.14         39.46          0.41          0.05        109.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2460.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       42
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       43
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      124     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -76.9071       76.9071       1852.82       1929.73    
   2  0.796559     -0.227454      -73.6557       73.6557       2154.48       2228.14    
   3  0.784232     -0.243051      -78.7063       78.7063       2146.03       2224.74    
   4  0.503549     -0.686074      -222.169       222.169       1952.21       2174.38    
   5  0.468337     -0.758566      -245.644       245.644       2163.74       2409.38    
   6  0.198518      -1.61688      -523.588       523.588       2173.41       2697.00    
   7  0.857529     -0.153700      -49.7721       49.7721       2200.82       2250.59    
   8  0.845427     -0.167913      -54.3747       54.3747       2100.29       2154.67    
   9  0.710919     -0.341197      -110.489       110.489       2101.37       2211.86    
  10  0.934107     -0.681640E-01  -22.0733       22.0733       2170.43       2192.50    
  11  0.565087     -0.570775      -184.832       184.832       2193.99       2378.82    
  12  0.147377      -1.91476      -620.050       620.050       2158.84       2778.89    
  13  0.471965     -0.750851      -243.146       243.146       2153.25       2396.40    
  14  0.287319      -1.24716      -403.864       403.864       2296.22       2700.09    
  15  0.526906     -0.640733      -207.487       207.487       2175.09       2382.58    
  16  0.176999      -1.73161      -560.742       560.742       2092.46       2653.20    
  17  0.868579     -0.140897      -45.6260       45.6260       2157.09       2202.72    
  18  0.621282     -0.475971      -154.132       154.132       2214.01       2368.14    
  19  0.181881      -1.70440      -551.932       551.932       2238.70       2790.64    
  20  0.565209     -0.570560      -184.763       184.763       2131.53       2316.30    
  21  0.927617     -0.751364E-01  -24.3312       24.3312       1979.33       2003.66    
  22  0.296120      -1.21699      -394.094       394.094       2217.02       2611.11    
  23  0.152389      -1.88132      -609.221       609.221       2154.33       2763.55    
  24  0.508731     -0.675835      -218.854       218.854       2415.49       2634.35    
  25  0.389654     -0.942496      -305.205       305.205       2532.40       2837.61    
  26  0.770754     -0.260386      -84.3200       84.3200       2418.74       2503.06    
  27  0.144347      -1.93554      -626.778       626.778       2263.60       2890.38    
  28  0.690124     -0.370884      -120.102       120.102       2282.20       2402.30    
  29  0.882429     -0.125077      -40.5033       40.5033       2488.88       2529.38    
  30  0.781105     -0.247045      -79.9999       79.9999       2515.11       2595.11    
  31  0.331946      -1.10278      -357.110       357.110       2157.61       2514.72    
  32  0.157011      -1.85144      -599.544       599.544       2539.20       3138.74    
  33  0.734200     -0.308973      -100.054       100.054       2191.49       2291.54    
  34  0.563390     -0.573784      -185.806       185.806       2614.73       2800.53    
  35  0.349498      -1.05126      -340.425       340.425       2167.72       2508.15    
  36  0.256822      -1.35937      -440.200       440.200       2695.97       3136.17    
  37  0.563556     -0.573488      -185.711       185.711       2656.71       2842.42    
  38  0.945419E-01  -2.35871      -763.814       763.814       2161.58       2925.39    
  39  0.571450     -0.559577      -181.206       181.206       2168.20       2349.41    
  40  0.583029E-01  -2.84210      -920.349       920.349       2502.50       3422.85    
  41  0.428808     -0.846746      -274.199       274.199       2182.87       2457.07    
  42  0.628450     -0.464499      -150.417       150.417       2316.27       2466.69    
  43  0.152789      -1.87869      -608.371       608.371       2795.51       3403.88    
  44  0.787004E-01  -2.54211      -823.202       823.202       2459.97       3283.17    
  45  0.170927E-01  -4.06911      -1317.68       1317.68       2769.52       4087.20    
  46  0.531078     -0.632847      -204.933       204.933       2328.25       2533.18    
  47  0.206082E-01  -3.88206      -1257.12       1257.12       2818.50       4075.61    
  48  0.909565     -0.947891E-01  -30.6952       30.6952       2650.54       2681.24    
  49  0.456291     -0.784625      -254.082       254.082       2680.66       2934.75    
  50  0.997425E-02  -4.60775      -1492.11       1492.11       2108.39       3600.50    
  51  0.251070      -1.38202      -447.535       447.535       3012.04       3459.57    
  52  0.548517     -0.600536      -194.470       194.470       2485.36       2679.83    
  53  0.210242      -1.55950      -505.007       505.007       2947.65       3452.65    
  54  0.848361     -0.164449      -53.2530       53.2530       2923.43       2976.68    
  55  0.160491E-01  -4.13210      -1338.09       1338.09       2578.06       3916.15    
  56  0.407967     -0.896570      -290.333       290.333       2358.01       2648.34    
  57  0.859929     -0.150905      -48.8672       48.8672       2328.26       2377.13    
  58  0.406052     -0.901274      -291.857       291.857       2460.50       2752.35    
loop,thermsimp(1:2)       43   76.9071       73.6557    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126       2396.99         68.49          1.22         39.05          0.25          0.05        109.05
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2396.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       43
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       44
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      125     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -729.880       729.880       1852.82       2582.70    
   2  0.780131E-01  -2.55088      -826.042       826.042       1979.33       2805.37    
   3  0.723689     -0.323394      -104.724       104.724       2100.29       2205.02    
   4  0.439896     -0.821218      -265.932       265.932       1952.21       2218.15    
   5  0.967364     -0.331803E-01  -10.7447       10.7447       2170.43       2181.17    
   6  0.235884      -1.44441      -467.740       467.740       2157.09       2624.83    
   7  0.311956      -1.16489      -377.224       377.224       2101.37       2478.59    
   8  0.600573     -0.509870      -165.110       165.110       2146.03       2311.14    
   9  0.781739     -0.246234      -79.7372       79.7372       2154.48       2234.22    
  10  0.505036     -0.683126      -221.214       221.214       2200.82       2422.03    
  11  0.896130     -0.109670      -35.5141       35.5141       2191.49       2227.00    
  12  0.545040     -0.606897      -196.529       196.529       2131.53       2328.06    
  13  0.338019      -1.08465      -351.240       351.240       2168.20       2519.44    
  14  0.200467      -1.60711      -520.424       520.424       2214.01       2734.44    
  15  0.548763     -0.600089      -194.325       194.325       2328.26       2522.59    
  16  0.897241     -0.108431      -35.1128       35.1128       2193.99       2229.10    
  17  0.229905      -1.47009      -476.054       476.054       2175.09       2651.14    
  18  0.387828     -0.947193      -306.726       306.726       2153.25       2459.98    
  19  0.789400     -0.236482      -76.5792       76.5792       2282.20       2358.78    
  20  0.495667     -0.701851      -227.278       227.278       2163.74       2391.01    
  21  0.818926     -0.199761      -64.6880       64.6880       2182.87       2247.56    
  22  0.181319      -1.70750      -552.933       552.933       2316.27       2869.21    
  23  0.901986     -0.103156      -33.4048       33.4048       2418.74       2452.14    
  24  0.933790E-01  -2.37109      -767.821       767.821       2167.72       2935.55    
  25  0.171523      -1.76304      -570.918       570.918       2157.61       2728.53    
  26  0.648450     -0.433170      -140.272       140.272       2488.88       2629.15    
  27  0.777448     -0.251739      -81.5197       81.5197       2328.25       2409.77    
  28  0.777670     -0.251453      -81.4271       81.4271       2515.11       2596.54    
  29  0.972420     -0.279672E-01  -9.05654       9.05654       2217.02       2226.07    
  30  0.825305     -0.192002      -62.1753       62.1753       2415.49       2477.67    
  31  0.470649     -0.753642      -244.049       244.049       2358.01       2602.06    
  32  0.263953      -1.33198      -431.331       431.331       2092.46       2523.79    
  33  0.857551     -0.153675      -49.7641       49.7641       2485.36       2535.12    
  34  0.950157     -0.511279E-01  -16.5566       16.5566       2650.54       2667.10    
  35  0.866482     -0.143314      -46.4088       46.4088       2173.41       2219.82    
  36  0.904889     -0.999433E-01  -32.3643       32.3643       2296.22       2328.59    
  37  0.297565      -1.21212      -392.517       392.517       2460.50       2853.01    
  38  0.902696     -0.102369      -33.1499       33.1499       2154.33       2187.48    
  39  0.800054     -0.223076      -72.2380       72.2380       2158.84       2231.08    
  40  0.534162     -0.627057      -203.058       203.058       2238.70       2441.76    
  41  0.593018     -0.522530      -169.209       169.209       2614.73       2783.94    
  42  0.682417E-01  -2.68470      -869.377       869.377       2532.40       3401.78    
  43  0.336048      -1.09050      -353.133       353.133       2656.71       3009.85    
  44  0.576540     -0.550710      -178.335       178.335       2263.60       2441.94    
  45  0.217955      -1.52347      -493.339       493.339       2161.58       2654.92    
  46  0.281607      -1.26724      -410.366       410.366       2680.66       3091.03    
  47  0.306631      -1.18211      -382.798       382.798       2923.43       3306.23    
  48  0.676335E-01  -2.69365      -872.276       872.276       2695.97       3568.25    
  49  0.145631      -1.92668      -623.910       623.910       2539.20       3163.11    
  50  0.820952     -0.197291      -63.8880       63.8880       2459.97       2523.85    
  51  0.224137      -1.49550      -484.282       484.282       2795.51       3279.79    
  52  0.738282     -0.303430      -98.2587       98.2587       2502.50       2600.76    
  53  0.364089      -1.01036      -327.180       327.180       2947.65       3274.83    
  54  0.321068      -1.13610      -367.900       367.900       3012.04       3379.94    
  55  0.179504      -1.71756      -556.191       556.191       2108.39       2664.58    
  56  0.808596     -0.212456      -68.7989       68.7989       2578.06       2646.86    
  57  0.974692     -0.256343E-01  -8.30106       8.30106       2818.50       2826.80    
  58  0.559434     -0.580830      -188.088       188.088       2396.99       2585.08    
loop,thermsimp(1:2)       44   729.880       826.042    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       2166.51         68.36          1.17         39.19          0.33          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128       4352.97         68.41          1.21         39.02          0.38          0.05        109.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2166.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       44
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       45
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      127     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -44.1251       44.1251       2170.43       2214.55    
   2  0.990306     -0.974175E-02  -3.15464       3.15464       2154.33       2157.48    
   3  0.488656     -0.716096      -231.891       231.891       2100.29       2332.19    
   4  0.865115E-01  -2.44748      -792.559       792.559       1952.21       2744.77    
   5  0.234262      -1.45132      -469.975       469.975       2173.41       2643.39    
   6  0.906541     -0.981186E-01  -31.7734       31.7734       2217.02       2248.79    
   7  0.680454     -0.384995      -124.672       124.672       2191.49       2316.16    
   8  0.575574     -0.552388      -178.878       178.878       2193.99       2372.87    
   9  0.537443E-02  -5.22610      -1692.35       1692.35       2158.84       3851.19    
  10  0.421676     -0.863518      -279.630       279.630       2154.48       2434.11    
  11  0.297588      -1.21204      -392.492       392.492       2182.87       2575.37    
  12  0.119337      -2.12581      -688.393       688.393       2146.03       2834.42    
  13  0.958276     -0.426192E-01  -13.8012       13.8012       2131.53       2145.34    
  14  0.115549      -2.15806      -698.836       698.836       2296.22       2995.06    
  15  0.104220      -2.26125      -732.254       732.254       2282.20       3014.46    
  16  0.719503     -0.329194      -106.602       106.602       2163.74       2270.34    
  17  0.875656     -0.132782      -42.9982       42.9982       2328.25       2371.24    
  18  0.578760     -0.546868      -177.090       177.090       2200.82       2377.91    
  19  0.923704     -0.793639E-01  -25.7001       25.7001       2238.70       2264.40    
  20  0.457980     -0.780930      -252.886       252.886       2263.60       2516.49    
  21  0.783173     -0.244401      -79.1436       79.1436       2418.74       2497.88    
  22  0.764479     -0.268561      -86.9672       86.9672       2153.25       2240.22    
  23  0.496891     -0.699384      -226.479       226.479       2415.49       2641.97    
  24  0.554859     -0.589041      -190.747       190.747       2101.37       2292.12    
  25  0.734503E-02  -4.91373      -1591.20       1591.20       2168.20       3759.40    
  26  0.117643      -2.14010      -693.023       693.023       2328.26       3021.28    
  27  0.145440      -1.92799      -624.335       624.335       2092.46       2716.80    
  28  0.375449     -0.979633      -317.231       317.231       2459.97       2777.20    
  29  0.954324E-01  -2.34934      -760.778       760.778       2485.36       3246.14    
  30  0.449085     -0.800543      -259.237       259.237       1852.82       2112.06    
  31  0.354483      -1.03709      -335.839       335.839       2396.99       2732.83    
  32  0.153971      -1.87099      -605.876       605.876       2515.11       3120.99    
  33  0.871598     -0.137427      -44.5024       44.5024       2502.50       2547.00    
  34  0.633061     -0.457188      -148.050       148.050       2358.01       2506.06    
  35  0.947022E-01  -2.35702      -763.265       763.265       2157.09       2920.36    
  36  0.793812     -0.230909      -74.7745       74.7745       2488.88       2563.65    
  37  0.760585     -0.273667      -88.6207       88.6207       2578.06       2666.68    
  38  0.124312      -2.08496      -675.167       675.167       2175.09       2850.26    
  39  0.961605E-03  -6.94691      -2249.59       2249.59       2161.58       4411.17    
  40  0.672529     -0.396710      -128.465       128.465       2108.39       2236.85    
  41  0.749847E-01  -2.59047      -838.863       838.863       2650.54       3489.41    
  42  0.982441     -0.177147E-01  -5.73650       5.73650       2157.61       2163.35    
  43  0.340727      -1.07667      -348.655       348.655       2214.01       2562.67    
  44  0.915043     -0.887846E-01  -28.7508       28.7508       2614.73       2643.48    
  45  0.150614      -1.89303      -613.015       613.015       1979.33       2592.35    
  46  0.892785     -0.113409      -36.7249       36.7249       2818.50       2855.22    
  47  0.844073     -0.169516      -54.8937       54.8937       2460.50       2515.39    
  48  0.469949     -0.755131      -244.532       244.532       2316.27       2560.81    
  49  0.389072     -0.943991      -305.690       305.690       2167.72       2473.41    
  50  0.738049     -0.303745      -98.3607       98.3607       2656.71       2755.07    
  51  0.250173      -1.38560      -448.695       448.695       2680.66       3129.36    
  52  0.383245     -0.959081      -310.576       310.576       2539.20       2849.77    
  53  0.384434     -0.955983      -309.573       309.573       2947.65       3257.22    
  54  0.479018E-01  -3.03860      -983.980       983.980       2795.51       3779.49    
  55  0.819285     -0.199323      -64.5462       64.5462       2923.43       2987.98    
  56  0.568165     -0.565344      -183.073       183.073       3012.04       3195.11    
  57  0.918732     -0.847606E-01  -27.4477       27.4477       2532.40       2559.85    
  58  0.374258     -0.982809      -318.260       318.260       2166.51       2484.77    
loop,thermsimp(1:2)       45   44.1251       3.15464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       2083.98         68.33          1.18         39.34          0.29          0.05        109.19
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130       2195.12         68.37          1.16         39.26          0.29          0.05        109.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2083.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       45
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       46
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      129     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -786.828       786.828       1852.82       2639.65    
   2  0.312747      -1.16236      -376.404       376.404       2131.53       2507.94    
   3  0.317683      -1.14670      -371.332       371.332       2154.33       2525.66    
   4  0.693053     -0.366649      -118.731       118.731       2157.61       2276.34    
   5  0.361881      -1.01644      -329.150       329.150       2170.43       2499.58    
   6  0.127478      -2.05981      -667.021       667.021       2108.39       2775.41    
   7  0.718706     -0.330302      -106.961       106.961       2153.25       2260.21    
   8  0.609419E-01  -2.79783      -906.013       906.013       2217.02       3123.03    
   9  0.320798      -1.13695      -368.173       368.173       2238.70       2606.88    
  10  0.343503      -1.06856      -346.028       346.028       2163.74       2509.76    
  11  0.671828     -0.397753      -128.803       128.803       2101.37       2230.17    
  12  0.616702     -0.483369      -156.528       156.528       2191.49       2348.02    
  13  0.806358E-01  -2.51781      -815.335       815.335       2100.29       2915.63    
  14  0.997284     -0.271972E-02 -0.880719      0.880719       2328.25       2329.13    
  15  0.554344     -0.589969      -191.048       191.048       2193.99       2385.04    
  16  0.411057     -0.889023      -287.889       287.889       2200.82       2488.71    
  17  0.846258E-01  -2.46952      -799.695       799.695       2154.48       2954.18    
  18  0.737439     -0.304571      -98.6283       98.6283       2167.72       2266.35    
  19  0.393790     -0.931939      -301.787       301.787       2166.51       2468.30    
  20  0.965947     -0.346467E-01  -11.2195       11.2195       2418.74       2429.96    
  21  0.150166      -1.89601      -613.979       613.979       2358.01       2971.99    
  22  0.212005      -1.55114      -502.302       502.302       2460.50       2962.80    
  23  0.615060     -0.486036      -157.391       157.391       2263.60       2421.00    
  24  0.382142     -0.961962      -311.509       311.509       2502.50       2814.01    
  25  0.249044      -1.39013      -450.160       450.160       2532.40       2982.56    
  26  0.245943      -1.40266      -454.218       454.218       2316.27       2770.49    
  27  0.108882      -2.21749      -718.084       718.084       2214.01       2932.10    
  28  0.199835      -1.61026      -521.446       521.446       2488.88       3010.33    
  29  0.863954     -0.146235      -47.3549       47.3549       2182.87       2230.23    
  30  0.392842     -0.934347      -302.566       302.566       1979.33       2281.90    
  31  0.770596     -0.260592      -84.3865       84.3865       2415.49       2499.88    
  32  0.149868      -1.89800      -614.624       614.624       2173.41       2788.04    
  33  0.234154      -1.45178      -470.123       470.123       2614.73       3084.85    
  34  0.611512     -0.491821      -159.265       159.265       2578.06       2737.33    
  35  0.518093E-01  -2.96019      -958.587       958.587       2092.46       3051.05    
  36  0.567953     -0.565716      -183.194       183.194       2396.99       2580.18    
  37  0.190847      -1.65628      -536.349       536.349       1952.21       2488.56    
  38  0.104561      -2.25798      -731.195       731.195       2656.71       3387.91    
  39  0.135276      -2.00044      -647.795       647.795       2459.97       3107.76    
  40  0.262364      -1.33802      -433.288       433.288       2146.03       2579.32    
  41  0.463951     -0.767976      -248.691       248.691       2539.20       2787.89    
  42  0.419672     -0.868282      -281.173       281.173       2175.09       2456.26    
  43  0.897011     -0.108687      -35.1957       35.1957       2818.50       2853.69    
  44  0.818933     -0.199754      -64.6855       64.6855       2157.09       2221.78    
  45  0.136906      -1.98846      -643.918       643.918       2923.43       3567.35    
  46  0.561722     -0.576748      -186.766       186.766       2296.22       2482.99    
  47  0.991681     -0.835368E-02  -2.70515       2.70515       2282.20       2284.91    
  48  0.653388     -0.425585      -137.816       137.816       2328.26       2466.08    
  49  0.578557     -0.547219      -177.204       177.204       2515.11       2692.32    
  50  0.784121     -0.243191      -78.7519       78.7519       2680.66       2759.42    
  51  0.827307     -0.189579      -61.3908       61.3908       3012.04       3073.43    
  52  0.994261     -0.575522E-02  -1.86369       1.86369       2485.36       2487.22    
  53  0.274030      -1.29452      -419.199       419.199       2947.65       3366.85    
  54  0.879777     -0.128087      -41.4778       41.4778       2650.54       2692.02    
  55  0.694576E-01  -2.66704      -863.658       863.658       2168.20       3031.86    
  56  0.431517E-01  -3.14303      -1017.80       1017.80       2795.51       3813.31    
  57  0.620633     -0.477015      -154.470       154.470       2158.84       2313.31    
  58  0.166702      -1.79155      -580.151       580.151       2083.98       2664.14    
loop,thermsimp(1:2)       46   786.828       376.404    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131       3202.25         68.25          1.13         39.13          0.34          0.05        108.91
Just calling func    0   0        108.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3202.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       46
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       47
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      130     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -1027.27       1027.27       2157.09       3184.36    
   2  0.581082     -0.542864      -175.794       175.794       2101.37       2277.16    
   3  0.690143     -0.370857      -120.093       120.093       2182.87       2302.97    
   4  0.958690     -0.421877E-01  -13.6615       13.6615       2153.25       2166.91    
   5  0.947492     -0.539367E-01  -17.4662       17.4662       2167.72       2185.19    
   6  0.253816E-01  -3.67373      -1189.65       1189.65       2157.61       3347.26    
   7  0.811950     -0.208316      -67.4582       67.4582       1979.33       2046.79    
   8  0.448512     -0.801821      -259.651       259.651       2282.20       2541.85    
   9  0.625244     -0.469613      -152.073       152.073       2158.84       2310.91    
  10  0.557627     -0.584065      -189.136       189.136       2328.25       2517.38    
  11  0.762657     -0.270947      -87.7400       87.7400       2191.49       2279.23    
  12  0.579328     -0.545887      -176.773       176.773       2193.99       2370.76    
  13  0.168395      -1.78144      -576.879       576.879       2263.60       2840.48    
  14  0.993282     -0.674111E-02  -2.18295       2.18295       2418.74       2420.92    
  15  0.573458     -0.556070      -180.070       180.070       2175.09       2355.16    
  16  0.900456     -0.104854      -33.9544       33.9544       2328.26       2362.22    
  17  0.961937     -0.388068E-01  -12.5667       12.5667       2166.51       2179.08    
  18  0.685702     -0.377312      -122.184       122.184       2296.22       2418.41    
  19  0.335644      -1.09171      -353.523       353.523       2485.36       2838.88    
  20  0.726392     -0.319666      -103.516       103.516       1952.21       2055.73    
  21  0.523515     -0.647189      -209.577       209.577       2200.82       2410.39    
  22  0.877914     -0.130206      -42.1643       42.1643       2170.43       2212.59    
  23  0.893563     -0.112539      -36.4431       36.4431       2415.49       2451.94    
  24  0.829449     -0.186994      -60.5537       60.5537       2131.53       2192.09    
  25  0.454457     -0.788653      -255.387       255.387       2163.74       2419.12    
  26  0.261407      -1.34168      -434.470       434.470       2154.33       2588.80    
  27  0.144225      -1.93638      -627.052       627.052       2146.03       2773.08    
  28  0.963744     -0.369299E-01  -11.9589       11.9589       2396.99       2408.95    
  29  0.267843      -1.31735      -426.595       426.595       2238.70       2665.30    
  30  0.251943E-01  -3.68114      -1192.05       1192.05       1852.82       3044.87    
  31  0.321532      -1.13466      -367.432       367.432       2083.98       2451.42    
  32  0.440903     -0.818930      -265.191       265.191       2650.54       2915.74    
  33  0.214416      -1.53984      -498.641       498.641       2515.11       3013.75    
  34  0.212185      -1.55030      -502.028       502.028       2578.06       3080.09    
  35  0.948253E-01  -2.35572      -762.845       762.845       2680.66       3443.51    
  36  0.507627     -0.678008      -219.557       219.557       2316.27       2535.83    
  37  0.415074     -0.879299      -284.741       284.741       2108.39       2393.13    
  38  0.768069     -0.263876      -85.4501       85.4501       2539.20       2624.65    
  39  0.462999E-01  -3.07261      -994.994       994.994       2173.41       3168.41    
  40  0.835390     -0.179856      -58.2423       58.2423       2502.50       2560.74    
  41  0.678734     -0.387526      -125.491       125.491       2818.50       2943.99    
  42  0.363569      -1.01179      -327.643       327.643       2100.29       2427.94    
  43  0.677161     -0.389846      -126.242       126.242       2214.01       2340.25    
  44  0.506668     -0.679899      -220.169       220.169       2154.48       2374.65    
  45  0.875658     -0.132779      -42.9974       42.9974       2460.50       2503.49    
  46  0.924863     -0.781102E-01  -25.2942       25.2942       2358.01       2383.30    
  47  0.794570E-01  -2.53254      -820.104       820.104       2532.40       3352.50    
  48  0.449212     -0.800261      -259.146       259.146       2488.88       2748.03    
  49  0.658987     -0.417051      -135.052       135.052       2168.20       2303.25    
  50  0.674357     -0.393995      -127.586       127.586       2092.46       2220.05    
  51  0.436334     -0.829348      -268.565       268.565       3012.04       3280.60    
  52  0.331871      -1.10301      -357.183       357.183       2614.73       2971.91    
  53  0.233029      -1.45659      -471.684       471.684       2459.97       2931.65    
  54  0.207666      -1.57183      -508.999       508.999       2217.02       2726.02    
  55  0.801765     -0.220940      -71.5463       71.5463       2947.65       3019.19    
  56  0.614336E-01  -2.78980      -903.411       903.411       2656.71       3560.12    
  57  0.167288      -1.78804      -579.014       579.014       2923.43       3502.44    
  58  0.718808     -0.330162      -106.915       106.915       3202.25       3309.17    
loop,thermsimp(1:2)       47   1027.27       175.794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       3605.12         68.23          1.12         39.05          0.55          0.05        109.01
Just calling func    0   0        109.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133       2303.66         68.45          1.16         38.99          0.50          0.05        109.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2303.66
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       47
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       48
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      132     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -183.843       183.843       1979.33       2163.17    
   2  0.216137      -1.53184      -496.051       496.051       1952.21       2448.26    
   3  0.476425     -0.741444      -240.099       240.099       2153.25       2393.35    
   4  0.184047      -1.69256      -548.097       548.097       2166.51       2714.61    
   5  0.722630     -0.324858      -105.198       105.198       2167.72       2272.92    
   6  0.887750     -0.119065      -38.5564       38.5564       2131.53       2170.09    
   7  0.236344      -1.44247      -467.110       467.110       2170.43       2637.54    
   8  0.798055     -0.225578      -73.0480       73.0480       2092.46       2165.51    
   9  0.425454     -0.854597      -276.741       276.741       2101.37       2378.11    
  10  0.605701     -0.501368      -162.356       162.356       2191.49       2353.85    
  11  0.742456     -0.297792      -96.4331       96.4331       2182.87       2279.31    
  12  0.378462E-01  -3.27423      -1060.28       1060.28       2168.20       3228.48    
  13  0.341910      -1.07321      -347.533       347.533       2158.84       2506.37    
  14  0.794971E-01  -2.53203      -819.940       819.940       2214.01       3033.95    
  15  0.586423     -0.533715      -172.831       172.831       2175.09       2347.92    
  16  0.990523     -0.952170E-02  -3.08338       3.08338       2328.26       2331.34    
  17  0.348475      -1.05419      -341.374       341.374       2193.99       2535.37    
  18  0.998034     -0.196755E-02 -0.637144      0.637144       2154.48       2155.12    
  19  0.616072     -0.484391      -156.859       156.859       2358.01       2514.86    
  20  0.427239     -0.850411      -275.386       275.386       2108.39       2383.77    
  21  0.598160     -0.513898      -166.414       166.414       2396.99       2563.40    
  22  0.642831     -0.441873      -143.090       143.090       2200.82       2343.91    
  23  0.392766     -0.934541      -302.629       302.629       2296.22       2598.85    
  24  0.738407     -0.303260      -98.2037       98.2037       2163.74       2261.94    
  25  0.334341      -1.09559      -354.782       354.782       2418.74       2773.52    
  26  0.997912     -0.208996E-02 -0.676784      0.676784       2100.29       2100.97    
  27  0.492305E-01  -3.01124      -975.121       975.121       2083.98       3059.11    
  28  0.304734      -1.18832      -384.808       384.808       2415.49       2800.30    
  29  0.159886      -1.83330      -593.670       593.670       2460.50       3054.17    
  30  0.991331     -0.870666E-02  -2.81945       2.81945       2328.25       2331.07    
  31  0.735164     -0.307662      -99.6292       99.6292       2316.27       2415.90    
  32  0.279948      -1.27315      -412.280       412.280       2282.20       2694.48    
  33  0.457260     -0.782502      -253.395       253.395       2502.50       2755.89    
  34  0.678170     -0.388358      -125.761       125.761       2154.33       2280.09    
  35  0.689603     -0.371639      -120.347       120.347       2539.20       2659.54    
  36  0.468470     -0.758283      -245.552       245.552       2238.70       2484.26    
  37  0.937429     -0.646141E-01  -20.9238       20.9238       2217.02       2237.94    
  38  0.115915      -2.15490      -697.814       697.814       2488.88       3186.69    
  39  0.125789      -2.07315      -671.340       671.340       2146.03       2817.37    
  40  0.137562      -1.98368      -642.369       642.369       2485.36       3127.73    
  41  0.273901      -1.29499      -419.351       419.351       2263.60       2682.96    
  42  0.934963     -0.672484E-01  -21.7768       21.7768       2650.54       2672.32    
  43  0.450296     -0.797850      -258.365       258.365       2459.97       2718.33    
  44  0.681645     -0.383246      -124.105       124.105       2818.50       2942.60    
  45  0.282914E-01  -3.56520      -1154.51       1154.51       2614.73       3769.23    
  46  0.962226     -0.385062E-01  -12.4693       12.4693       2515.11       2527.58    
  47  0.771412     -0.259533      -84.0436       84.0436       2947.65       3031.69    
  48  0.778208     -0.250761      -81.2032       81.2032       1852.82       1934.02    
  49  0.945686     -0.558450E-01  -18.0841       18.0841       2578.06       2596.15    
  50  0.648669     -0.432833      -140.163       140.163       2173.41       2313.57    
  51  0.214283      -1.54046      -498.841       498.841       2157.09       2655.93    
  52  0.692999     -0.366726      -118.756       118.756       3012.04       3130.80    
  53  0.966323     -0.342573E-01  -11.0934       11.0934       3202.25       3213.35    
  54  0.975007     -0.253104E-01  -8.19619       8.19619       2157.61       2165.81    
  55  0.947991E-01  -2.35600      -762.934       762.934       2532.40       3295.34    
  56  0.195092      -1.63429      -529.225       529.225       2680.66       3209.89    
  57  0.459282     -0.778091      -251.966       251.966       2923.43       3175.40    
  58  0.563954     -0.572782      -185.482       185.482       2303.66       2489.14    
loop,thermsimp(1:2)       48   183.843       496.051    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       3532.07         68.25          1.23         39.24          0.19          0.05        108.96
Just calling func    0   0        108.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135       2233.42         68.09          1.16         39.07          0.65          0.05        109.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2233.42
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       48
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       49
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      134     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -553.556       553.556       1852.82       2406.38    
   2  0.335083      -1.09338      -354.065       354.065       2100.29       2454.36    
   3  0.585160     -0.535871      -173.529       173.529       2154.48       2328.01    
   4  0.445729     -0.808044      -261.666       261.666       1979.33       2241.00    
   5  0.963605     -0.370741E-01  -12.0056       12.0056       2092.46       2104.47    
   6  0.538074     -0.619758      -200.694       200.694       2157.61       2358.30    
   7  0.971443     -0.289729E-01  -9.38221       9.38221       2131.53       2140.92    
   8  0.817136     -0.201950      -65.3967       65.3967       2217.02       2282.41    
   9  0.216943      -1.52812      -494.847       494.847       2163.74       2658.58    
  10  0.572311     -0.558074      -180.719       180.719       2167.72       2348.44    
  11  0.511761     -0.669897      -216.930       216.930       2182.87       2399.81    
  12  0.331920E-01  -3.40545      -1102.77       1102.77       2154.33       3257.10    
  13  0.662680     -0.411462      -133.242       133.242       2173.41       2306.65    
  14  0.578679     -0.547007      -177.135       177.135       2328.25       2505.38    
  15  0.473979     -0.746592      -241.766       241.766       2328.26       2570.03    
  16  0.243750      -1.41161      -457.118       457.118       2200.82       2657.94    
  17  0.784227     -0.243057      -78.7084       78.7084       2175.09       2253.80    
  18  0.215065      -1.53682      -497.662       497.662       2191.49       2689.15    
  19  0.813272     -0.206689      -66.9315       66.9315       2101.37       2168.30    
  20  0.877336     -0.130865      -42.3776       42.3776       2108.39       2150.77    
  21  0.911070     -0.931357E-01  -30.1598       30.1598       2153.25       2183.41    
  22  0.424500     -0.856844      -277.469       277.469       2316.27       2593.74    
  23  0.122508      -2.09958      -679.900       679.900       1952.21       2632.11    
  24  0.173199      -1.75331      -567.770       567.770       2238.70       2806.47    
  25  0.243010      -1.41465      -458.102       458.102       2303.66       2761.76    
  26  0.618804     -0.479966      -155.426       155.426       2158.84       2314.27    
  27  0.365303      -1.00703      -326.102       326.102       2358.01       2684.11    
  28  0.178054      -1.72567      -558.818       558.818       2515.11       3073.93    
  29  0.416122     -0.876776      -283.923       283.923       2193.99       2477.91    
  30  0.789287     -0.236625      -76.6256       76.6256       2396.99       2473.61    
  31  0.786736     -0.239863      -77.6741       77.6741       2578.06       2655.74    
  32  0.295880      -1.21780      -394.356       394.356       2296.22       2690.58    
  33  0.418649     -0.870722      -281.963       281.963       2170.43       2452.39    
  34  0.706992     -0.346736      -112.282       112.282       2157.09       2269.37    
  35  0.281863      -1.26633      -410.072       410.072       2539.20       2949.27    
  36  0.357290      -1.02921      -333.285       333.285       2650.54       2983.83    
  37  0.174180      -1.74767      -565.941       565.941       2263.60       2829.55    
  38  0.190924      -1.65588      -536.218       536.218       2282.20       2818.42    
  39  0.630369     -0.461449      -149.430       149.430       2166.51       2315.94    
  40  0.252261      -1.37729      -446.004       446.004       2459.97       2905.97    
  41  0.359213      -1.02384      -331.547       331.547       2502.50       2834.04    
  42  0.740344     -0.300640      -97.3554       97.3554       2418.74       2516.09    
  43  0.283211      -1.26156      -408.528       408.528       2415.49       2824.02    
  44  0.965119     -0.355039E-01  -11.4971       11.4971       2146.03       2157.53    
  45  0.389600     -0.942634      -305.250       305.250       2818.50       3123.75    
  46  0.598383     -0.513525      -166.293       166.293       2947.65       3113.94    
  47  0.631795     -0.459190      -148.698       148.698       2214.01       2362.71    
  48  0.997460     -0.254363E-02 -0.823696      0.823696       2460.50       2461.32    
  49  0.192532      -1.64749      -533.503       533.503       2083.98       2617.49    
  50  0.769348     -0.262212      -84.9111       84.9111       2485.36       2570.27    
  51  0.740745     -0.300099      -97.1800       97.1800       3012.04       3109.22    
  52  0.590587     -0.526639      -170.540       170.540       2923.43       3093.97    
  53  0.628310E-01  -2.76731      -896.128       896.128       2488.88       3385.01    
  54  0.515529     -0.662562      -214.555       214.555       2680.66       2895.22    
  55  0.306025      -1.18409      -383.439       383.439       3202.25       3585.69    
  56  0.686790     -0.375726      -121.670       121.670       2168.20       2289.87    
  57  0.357910      -1.02747      -332.724       332.724       2532.40       2865.12    
  58  0.267469      -1.31875      -427.047       427.047       2233.42       2660.47    
loop,thermsimp(1:2)       49   553.556       354.065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       2774.96         68.34          1.20         39.20          0.38          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2774.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       49
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       50
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      135     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -1117.44       1117.44       2092.46       3209.90    
   2  0.601445     -0.508421      -164.640       164.640       2131.53       2296.17    
   3  0.651191     -0.428952      -138.906       138.906       2108.39       2247.30    
   4  0.187303      -1.67503      -542.418       542.418       2146.03       2688.45    
   5  0.664603     -0.408566      -132.304       132.304       2101.37       2233.67    
   6  0.945236     -0.563208E-01  -18.2382       18.2382       2153.25       2171.49    
   7  0.865870     -0.144020      -46.6375       46.6375       1979.33       2025.97    
   8  0.674117     -0.394351      -127.701       127.701       2175.09       2302.79    
   9  0.959689E-01  -2.34373      -758.962       758.962       2157.09       2916.05    
  10  0.663337     -0.410472      -132.922       132.922       2217.02       2349.94    
  11  0.384854     -0.954891      -309.219       309.219       2168.20       2477.42    
  12  0.892338     -0.113910      -36.8872       36.8872       2173.41       2210.30    
  13  0.470837     -0.753243      -243.920       243.920       2158.84       2402.76    
  14  0.262618      -1.33706      -432.974       432.974       2166.51       2599.48    
  15  0.877143     -0.131085      -42.4487       42.4487       2154.48       2196.93    
  16  0.262102      -1.33902      -433.611       433.611       2167.72       2601.34    
  17  0.306130      -1.18375      -383.329       383.329       2157.61       2540.94    
  18  0.251844      -1.37895      -446.540       446.540       2214.01       2660.55    
  19  0.371147     -0.991157      -320.963       320.963       2182.87       2503.84    
  20  0.244393E-01  -3.71156      -1201.90       1201.90       1852.82       3054.72    
  21  0.550903     -0.596197      -193.064       193.064       2170.43       2363.49    
  22  0.509078     -0.675154      -218.633       218.633       2100.29       2318.93    
  23  0.741178     -0.299515      -96.9909       96.9909       2460.50       2557.49    
  24  0.585965     -0.534496      -173.084       173.084       2396.99       2570.07    
  25  0.602491     -0.506683      -164.077       164.077       2193.99       2358.07    
  26  0.532366     -0.630423      -204.148       204.148       2328.25       2532.39    
  27  0.264247      -1.33087      -430.971       430.971       2418.74       2849.71    
  28  0.468512     -0.758194      -245.523       245.523       2328.26       2573.78    
  29  0.338122      -1.08435      -351.141       351.141       2485.36       2836.50    
  30  0.815455     -0.204008      -66.0634       66.0634       2316.27       2382.34    
  31  0.126007      -2.07142      -670.781       670.781       2083.98       2754.77    
  32  0.391435     -0.937937      -303.729       303.729       1952.21       2255.94    
  33  0.477179     -0.739864      -239.588       239.588       2578.06       2817.65    
  34  0.926058     -0.768180E-01  -24.8757       24.8757       2200.82       2225.69    
  35  0.305992E-01  -3.48678      -1129.11       1129.11       2163.74       3292.85    
  36  0.142122      -1.95107      -631.808       631.808       2233.42       2865.23    
  37  0.934627E-01  -2.37019      -767.532       767.532       2358.01       3125.54    
  38  0.933240     -0.690924E-01  -22.3740       22.3740       2191.49       2213.86    
  39  0.551354     -0.595378      -192.799       192.799       2296.22       2489.02    
  40  0.167646      -1.78590      -578.322       578.322       2303.66       2881.98    
  41  0.657770     -0.418900      -135.651       135.651       2238.70       2374.36    
  42  0.937012     -0.650587E-01  -21.0677       21.0677       2282.20       2303.27    
  43  0.435130     -0.832109      -269.459       269.459       2415.49       2684.95    
  44  0.346278E-01  -3.36310      -1089.06       1089.06       2263.60       3352.66    
  45  0.529273     -0.636251      -206.035       206.035       2502.50       2708.53    
  46  0.543808     -0.609159      -197.262       197.262       2532.40       2729.66    
  47  0.476993     -0.740254      -239.714       239.714       2680.66       2920.38    
  48  0.602365     -0.506891      -164.145       164.145       2459.97       2624.11    
  49  0.429141     -0.845970      -273.948       273.948       2539.20       2813.14    
  50  0.161300E-01  -4.12707      -1336.46       1336.46       2650.54       3987.00    
  51  0.806405     -0.215169      -69.6776       69.6776       2515.11       2584.79    
  52  0.577848E-01  -2.85103      -923.239       923.239       2923.43       3846.67    
  53  0.992308     -0.772154E-02  -2.50044       2.50044       3012.04       3014.54    
  54  0.130687      -2.03495      -658.972       658.972       2947.65       3606.62    
  55  0.844072     -0.169518      -54.8943       54.8943       2818.50       2873.39    
  56  0.900890     -0.104372      -33.7986       33.7986       2154.33       2188.13    
  57  0.886923E-01  -2.42258      -784.496       784.496       2488.88       3273.38    
  58  0.675479     -0.392334      -127.048       127.048       2774.96       2902.01    
loop,thermsimp(1:2)       50   1117.44       164.640    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137       4004.46         68.34          1.13         39.07          0.41          0.05        108.99
Just calling func    0   0        109.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   4004.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       50
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       51
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      136     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -23.7458       23.7458       1979.33       2003.08    
   2  0.669511     -0.401208      -129.922       129.922       2153.25       2283.17    
   3  0.863337E-01  -2.44954      -793.225       793.225       2154.33       2947.55    
   4  0.279945      -1.27316      -412.284       412.284       2154.48       2566.77    
   5  0.832640     -0.183154      -59.3102       59.3102       2173.41       2232.72    
   6  0.848933     -0.163775      -53.0348       53.0348       2191.49       2244.53    
   7  0.141794      -1.95338      -632.557       632.557       2200.82       2833.37    
   8  0.208764      -1.56655      -507.291       507.291       2101.37       2608.66    
   9  0.755787     -0.279996      -90.6702       90.6702       2108.39       2199.06    
  10  0.177416      -1.72926      -559.980       559.980       1952.21       2512.19    
  11  0.405148     -0.903503      -292.578       292.578       2131.53       2424.11    
  12  0.640380     -0.445693      -144.327       144.327       2175.09       2319.42    
  13  0.548060     -0.601370      -194.740       194.740       2282.20       2476.94    
  14  0.773287     -0.257105      -83.2574       83.2574       2100.29       2183.55    
  15  0.180768      -1.71054      -553.918       553.918       2217.02       2770.94    
  16  0.135846      -1.99624      -646.434       646.434       2193.99       2840.43    
  17  0.601016     -0.509133      -164.871       164.871       2170.43       2335.30    
  18  0.302263      -1.19646      -387.445       387.445       2238.70       2626.15    
  19  0.189428      -1.66374      -538.765       538.765       2316.27       2855.04    
  20  0.737158     -0.304953      -98.7519       98.7519       2158.84       2257.59    
  21  0.790680     -0.234862      -76.0545       76.0545       2168.20       2244.26    
  22  0.177192E-01  -4.03310      -1306.03       1306.03       2296.22       3602.25    
  23  0.236042      -1.44375      -467.523       467.523       2182.87       2650.40    
  24  0.459229     -0.778206      -252.004       252.004       2328.25       2580.25    
  25  0.586479E-01  -2.83620      -918.438       918.438       2157.61       3076.05    
  26  0.263766      -1.33269      -431.561       431.561       2460.50       2892.06    
  27  0.942550     -0.591663E-01  -19.1596       19.1596       2396.99       2416.15    
  28  0.106855      -2.23628      -724.167       724.167       2328.26       3052.43    
  29  0.710700     -0.341505      -110.588       110.588       2515.11       2625.70    
  30  0.207109E-01  -3.87709      -1255.51       1255.51       2166.51       3422.02    
  31  0.901203     -0.104025      -33.6861       33.6861       2167.72       2201.41    
  32  0.949751     -0.515555E-01  -16.6951       16.6951       2459.97       2476.66    
  33  0.343487      -1.06861      -346.044       346.044       2214.01       2560.06    
  34  0.875043     -0.133483      -43.2253       43.2253       2415.49       2458.72    
  35  0.122447E-01  -4.40266      -1425.70       1425.70       2146.03       3571.73    
  36  0.820650     -0.197659      -64.0072       64.0072       2502.50       2566.51    
  37  0.748866     -0.289195      -93.6491       93.6491       2532.40       2626.05    
  38  0.594525     -0.519992      -168.387       168.387       2083.98       2252.37    
  39  0.927863E-01  -2.37746      -769.884       769.884       2539.20       3309.08    
  40  0.631335     -0.459918      -148.934       148.934       2578.06       2726.99    
  41  0.282620      -1.26365      -409.205       409.205       2485.36       2894.56    
  42  0.707811     -0.345578      -111.907       111.907       2418.74       2530.65    
  43  0.930463     -0.720730E-01  -23.3392       23.3392       2233.42       2256.76    
  44  0.988563     -0.115032E-01  -3.72506       3.72506       2818.50       2822.22    
  45  0.869439     -0.139907      -45.3057       45.3057       2303.66       2348.96    
  46  0.693921     -0.365397      -118.325       118.325       2774.96       2893.28    
  47  0.731753     -0.312312      -101.135       101.135       2157.09       2258.23    
  48  0.848712     -0.164035      -53.1190       53.1190       2680.66       2733.78    
  49  0.174447      -1.74613      -565.445       565.445       3012.04       3577.48    
  50  0.313212      -1.16087      -375.922       375.922       1852.82       2228.74    
  51  0.880789     -0.126937      -41.1056       41.1056       2358.01       2399.11    
  52  0.441967     -0.816520      -264.411       264.411       2092.46       2356.87    
  53  0.624106     -0.471435      -152.663       152.663       2488.88       2641.54    
  54  0.447426     -0.804244      -260.436       260.436       2163.74       2424.17    
  55  0.681696     -0.383171      -124.081       124.081       2263.60       2387.69    
  56  0.336384      -1.08950      -352.810       352.810       2947.65       3300.46    
  57  0.197044      -1.62433      -526.000       526.000       2923.43       3449.43    
  58  0.186834E-01  -3.98012      -1288.87       1288.87       4004.46       5293.33    
loop,thermsimp(1:2)       51   23.7458       129.922    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138       2650.54         68.40          1.17         39.04          0.30          0.05        108.97
Just calling func    0   0        108.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2650.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       51
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       52
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      137     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -135.522       135.522       1979.33       2114.85    
   2  0.385391     -0.953496      -308.767       308.767       2100.29       2409.06    
   3  0.323679      -1.12800      -365.277       365.277       2108.39       2473.67    
   4  0.402516E-01  -3.21260      -1040.33       1040.33       2167.72       3208.05    
   5  0.866022     -0.143846      -46.5810       46.5810       1852.82       1899.40    
   6  0.560147     -0.579555      -187.675       187.675       2173.41       2361.09    
   7  0.389098     -0.943925      -305.668       305.668       2168.20       2473.87    
   8  0.470755     -0.753417      -243.976       243.976       2191.49       2435.47    
   9  0.794299     -0.230295      -74.5757       74.5757       2083.98       2158.56    
  10  0.897132     -0.108553      -35.1523       35.1523       2233.42       2268.58    
  11  0.359474      -1.02311      -331.312       331.312       2158.84       2490.15    
  12  0.604694     -0.503032      -162.895       162.895       2157.09       2319.99    
  13  0.101554      -2.28717      -740.645       740.645       2153.25       2893.90    
  14  0.274480      -1.29288      -418.667       418.667       2175.09       2593.76    
  15  0.916086     -0.876445E-01  -28.3816       28.3816       2170.43       2198.81    
  16  0.820070E-01  -2.50095      -809.874       809.874       2303.66       3113.53    
  17  0.975902     -0.243929E-01  -7.89908       7.89908       2092.46       2100.36    
  18  0.131665      -2.02750      -656.558       656.558       2263.60       2920.16    
  19  0.751313     -0.285933      -92.5928       92.5928       2358.01       2450.60    
  20  0.775324     -0.254475      -82.4056       82.4056       2396.99       2479.39    
  21  0.237000      -1.43969      -466.211       466.211       2131.53       2597.75    
  22  0.113641      -2.17471      -704.228       704.228       2163.74       2867.96    
  23  0.762281     -0.271440      -87.8994       87.8994       2415.49       2503.39    
  24  0.783730     -0.243690      -78.9134       78.9134       2459.97       2538.88    
  25  0.492891     -0.707468      -229.097       229.097       2282.20       2511.30    
  26  0.471904     -0.750980      -243.187       243.187       1952.21       2195.40    
  27  0.855781     -0.155740      -50.4329       50.4329       2418.74       2469.17    
  28  0.636473     -0.451814      -146.309       146.309       2214.01       2360.32    
  29  0.433340     -0.836232      -270.794       270.794       2502.50       2773.29    
  30  0.482236     -0.729321      -236.173       236.173       2154.48       2390.66    
  31  0.855143E-01  -2.45907      -796.313       796.313       2328.25       3124.56    
  32  0.916579     -0.871071E-01  -28.2076       28.2076       2101.37       2129.58    
  33  0.232519      -1.45878      -472.393       472.393       2515.11       2987.51    
  34  0.283977      -1.25886      -407.653       407.653       2532.40       2940.05    
  35  0.401228E-01  -3.21581      -1041.37       1041.37       2238.70       3280.07    
  36  0.235231      -1.44719      -468.638       468.638       2488.88       2957.52    
  37  0.233426      -1.45489      -471.132       471.132       2182.87       2654.01    
  38  0.903594     -0.101376      -32.8281       32.8281       2578.06       2610.89    
  39  0.857571     -0.153651      -49.7562       49.7562       2680.66       2730.42    
  40  0.444085     -0.811739      -262.863       262.863       2217.02       2479.88    
  41  0.151055      -1.89011      -612.069       612.069       2818.50       3430.57    
  42  0.745694     -0.293440      -95.0236       95.0236       2200.82       2295.84    
  43  0.470647E-01  -3.05623      -989.689       989.689       2193.99       3183.68    
  44  0.344459      -1.06578      -345.128       345.128       2316.27       2661.40    
  45  0.592738     -0.523004      -169.362       169.362       2460.50       2629.86    
  46  0.754292     -0.281975      -91.3111       91.3111       2774.96       2866.27    
  47  0.162950      -1.81431      -587.523       587.523       2485.36       3072.88    
  48  0.939100     -0.628333E-01  -20.3471       20.3471       2154.33       2174.67    
  49  0.966845     -0.337175E-01  -10.9186       10.9186       2328.26       2339.18    
  50  0.287323      -1.24715      -403.859       403.859       2157.61       2561.47    
  51  0.835081     -0.180227      -58.3622       58.3622       2947.65       3006.01    
  52  0.836052     -0.179064      -57.9857       57.9857       2539.20       2597.18    
  53  0.382321     -0.961495      -311.358       311.358       2166.51       2477.87    
  54  0.873869     -0.134824      -43.6597       43.6597       2923.43       2967.09    
  55  0.169635      -1.77411      -574.503       574.503       2146.03       2720.53    
  56  0.511680     -0.670055      -216.982       216.982       3012.04       3229.02    
  57  0.687848     -0.374188      -121.172       121.172       2296.22       2417.39    
  58  0.659885     -0.415689      -134.611       134.611       2650.54       2785.16    
loop,thermsimp(1:2)       52   135.522       308.767    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139       2277.30         68.42          1.16         39.04          0.50          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2277.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       52
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       53
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      138     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -175.422       175.422       1852.82       2028.24    
   2  0.307993      -1.17768      -381.363       381.363       2092.46       2473.82    
   3  0.551684     -0.594779      -192.605       192.605       1979.33       2171.94    
   4  0.969976     -0.304835E-01  -9.87137       9.87137       2101.37       2111.24    
   5  0.401714     -0.912015      -295.335       295.335       2083.98       2379.32    
   6  0.336211      -1.09002      -352.976       352.976       2154.33       2507.30    
   7  0.649191     -0.432028      -139.902       139.902       1952.21       2092.12    
   8  0.426986     -0.851005      -275.578       275.578       2170.43       2446.01    
   9  0.479997     -0.733976      -237.681       237.681       2233.42       2471.10    
  10  0.441527     -0.817516      -264.733       264.733       2200.82       2465.55    
  11  0.218988      -1.51874      -491.808       491.808       2157.09       2648.90    
  12  0.935549     -0.666221E-01  -21.5740       21.5740       2328.26       2349.83    
  13  0.159996      -1.83261      -593.448       593.448       2214.01       2807.46    
  14  0.486870     -0.719759      -233.077       233.077       2173.41       2406.49    
  15  0.835520     -0.179701      -58.1918       58.1918       2154.48       2212.68    
  16  0.643759     -0.440431      -142.623       142.623       2100.29       2242.92    
  17  0.177188      -1.73054      -560.396       560.396       2296.22       2856.62    
  18  0.408356     -0.895617      -290.025       290.025       2191.49       2481.52    
  19  0.463768     -0.768371      -248.819       248.819       2358.01       2606.82    
  20  0.616820     -0.483178      -156.466       156.466       2418.74       2575.20    
  21  0.377083     -0.975289      -315.824       315.824       2108.39       2424.21    
  22  0.278016      -1.28008      -414.523       414.523       2168.20       2582.73    
  23  0.746435     -0.292446      -94.7018       94.7018       2166.51       2261.21    
  24  0.872234     -0.136697      -44.2662       44.2662       2396.99       2441.25    
  25  0.887073E-01  -2.42241      -784.442       784.442       2217.02       3001.46    
  26  0.124913      -2.08014      -673.604       673.604       2158.84       2832.44    
  27  0.918160     -0.853835E-01  -27.6494       27.6494       2415.49       2443.14    
  28  0.924603     -0.783912E-01  -25.3852       25.3852       2282.20       2307.59    
  29  0.863214     -0.147092      -47.6325       47.6325       2459.97       2507.60    
  30  0.823499E-02  -4.79936      -1554.16       1554.16       2157.61       3711.77    
  31  0.548113     -0.601275      -194.709       194.709       2175.09       2369.80    
  32  0.800553     -0.222452      -72.0359       72.0359       2539.20       2611.23    
  33  0.180829      -1.71020      -553.809       553.809       2131.53       2685.34    
  34  0.968975E-01  -2.33410      -755.844       755.844       2578.06       3333.91    
  35  0.749847     -0.287886      -93.2253       93.2253       2460.50       2553.72    
  36  0.902028     -0.103110      -33.3897       33.3897       2182.87       2216.26    
  37  0.312083      -1.16449      -377.092       377.092       2316.27       2693.37    
  38  0.472691     -0.749313      -242.647       242.647       2146.03       2388.68    
  39  0.970346     -0.301026E-01  -9.74801       9.74801       2680.66       2690.41    
  40  0.485853     -0.721850      -233.754       233.754       2502.50       2736.25    
  41  0.604658     -0.503092      -162.915       162.915       2650.54       2813.46    
  42  0.172238      -1.75888      -569.572       569.572       2774.96       3344.53    
  43  0.359079E-01  -3.32680      -1077.31       1077.31       2163.74       3241.04    
  44  0.464923     -0.765884      -248.014       248.014       2153.25       2401.26    
  45  0.293512      -1.22584      -396.959       396.959       2263.60       2660.56    
  46  0.572788     -0.557239      -180.449       180.449       2532.40       2712.85    
  47  0.931713     -0.707300E-01  -22.9042       22.9042       2488.88       2511.78    
  48  0.983012     -0.171340E-01  -5.54845       5.54845       2923.43       2928.98    
  49  0.572194     -0.558278      -180.785       180.785       2515.11       2695.90    
  50  0.272189      -1.30126      -421.382       421.382       2947.65       3369.03    
  51  0.521081     -0.651849      -211.086       211.086       2485.36       2696.44    
  52  0.560075     -0.579685      -187.717       187.717       2303.66       2491.38    
  53  0.442251     -0.815877      -264.203       264.203       2328.25       2592.45    
  54  0.541873     -0.612723      -198.416       198.416       2193.99       2392.41    
  55  0.619019     -0.479619      -155.313       155.313       2167.72       2323.04    
  56  0.554460     -0.589760      -190.980       190.980       3012.04       3203.02    
  57  0.942853     -0.588454E-01  -19.0557       19.0557       2238.70       2257.76    
  58  0.289656E-01  -3.54165      -1146.88       1146.88       2277.30       3424.18    
loop,thermsimp(1:2)       53   175.422       381.363    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       2096.94         68.39          1.18         39.03          0.36          0.04        109.00
Just calling func    0   0        109.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141       2412.83         68.13          1.12         39.03          0.70          0.05        109.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    2412.8        3.329     -2.882      2.811     -102.6     0.4803    
                      0.1166     0.8878     -99.70      4.768     0.4740    

                       2.635     -2.758      1.540      7576.      7000.    

                      -2.108      0.000      0.000      0.000     -1.221    



                      -1.918      0.000      0.000      7000.      519.1    

                      -1.418     -4.539     -6.069     -7.840     -6.697    

                      -11.91     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.7369E-02 0.1404     0.6891E-01 0.5026E-01

                     -0.2486     0.1201     0.1539     0.6628E-01-0.1074E-01



                     -0.9162    -0.5527      0.000     0.5083E-01 0.2095    

                      0.1423     0.3346    -0.7116     0.1573     0.3454    

                      0.2715     0.1137    -0.4848     -1.417      7000.    



                      -1.239     -1.077     -2.142     -1.982    -0.3807    

                     -0.3252      9.279      8.499    -0.1713E+05 -5.835    

                     -0.2478     -2.184      8.782      9.182    -0.1969E+05



                      -6.000     0.4386     0.3349E-01  8.843      9.182    

                     -0.1944E+05 -6.000    -0.1226    -0.1202      9.657    

                       8.961    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2096.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       53
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       54
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      140     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -184.328       184.328       1852.82       2037.15    
   2  0.698829     -0.358349      -116.043       116.043       1952.21       2068.26    
   3  0.550231     -0.597418      -193.460       193.460       2101.37       2294.83    
   4  0.844966     -0.168459      -54.5514       54.5514       1979.33       2033.88    
   5  0.139804      -1.96751      -637.133       637.133       2154.48       2791.62    
   6  0.119451      -2.12485      -688.083       688.083       2182.87       2870.96    
   7  0.474112     -0.746312      -241.676       241.676       2100.29       2341.97    
   8  0.293024      -1.22750      -397.497       397.497       2238.70       2636.20    
   9  0.760137     -0.274256      -88.8114       88.8114       2166.51       2255.32    
  10  0.216376      -1.53074      -495.694       495.694       2282.20       2777.90    
  11  0.837069     -0.177849      -57.5922       57.5922       2167.72       2225.32    
  12  0.969258     -0.312245E-01  -10.1113       10.1113       2328.26       2338.37    
  13  0.335918      -1.09089      -353.259       353.259       2175.09       2528.35    
  14  0.966643     -0.339265E-01  -10.9863       10.9863       2083.98       2094.97    
  15  0.723887     -0.323119      -104.635       104.635       2146.03       2250.66    
  16  0.459929E-01  -3.07927      -997.149       997.149       2193.99       3191.14    
  17  0.536724     -0.622271      -201.508       201.508       2153.25       2354.76    
  18  0.432574     -0.838001      -271.367       271.367       2173.41       2444.78    
  19  0.160308      -1.83066      -592.816       592.816       2108.39       2701.21    
  20  0.885158     -0.121989      -39.5033       39.5033       2396.99       2436.49    
  21  0.753783     -0.282650      -91.5297       91.5297       2415.49       2507.02    
  22  0.135562      -1.99832      -647.110       647.110       2170.43       2817.54    
  23  0.817964     -0.200937      -65.0687       65.0687       2200.82       2265.89    
  24  0.286617      -1.24961      -404.657       404.657       2233.42       2638.08    
  25  0.319126      -1.14217      -369.865       369.865       2092.46       2462.33    
  26  0.104479E-01  -4.56135      -1477.09       1477.09       2191.49       3668.58    
  27  0.671407     -0.398379      -129.006       129.006       2303.66       2432.66    
  28  0.782955     -0.244680      -79.2340       79.2340       2154.33       2233.56    
  29  0.186689      -1.67831      -543.483       543.483       2459.97       3003.45    
  30  0.462519     -0.771067      -249.692       249.692       2488.88       2738.57    
  31  0.203171      -1.59371      -516.085       516.085       2460.50       2976.58    
  32  0.851762E-01  -2.46303      -797.596       797.596       2418.74       3216.33    
  33  0.702824     -0.352649      -114.197       114.197       2168.20       2282.40    
  34  0.747923     -0.290456      -94.0573       94.0573       2328.25       2422.30    
  35  0.224450      -1.49410      -483.831       483.831       2358.01       2841.84    
  36  0.243563E-02  -6.01755      -1948.64       1948.64       2539.20       4487.84    
  37  0.160790      -1.82766      -591.844       591.844       2157.09       2748.93    
  38  0.880431     -0.127343      -41.2371       41.2371       2263.60       2304.84    
  39  0.507306     -0.678640      -219.762       219.762       2131.53       2351.30    
  40  0.266019      -1.32419      -428.807       428.807       2680.66       3109.47    
  41  0.310751      -1.16876      -378.477       378.477       2316.27       2694.75    
  42  0.945006     -0.565640E-01  -18.3169       18.3169       2515.11       2533.43    
  43  0.265699E-01  -3.62797      -1174.83       1174.83       2485.36       3660.19    
  44  0.652842     -0.426420      -138.086       138.086       2532.40       2670.49    
  45  0.799409     -0.223882      -72.4990       72.4990       2502.50       2575.00    
  46  0.543529     -0.609672      -197.428       197.428       2214.01       2411.44    
  47  0.361947      -1.01626      -329.091       329.091       2650.54       2979.64    
  48  0.398721     -0.919492      -297.756       297.756       2158.84       2456.60    
  49  0.349489      -1.05128      -340.433       340.433       2296.22       2636.65    
  50  0.948739     -0.526212E-01  -17.0402       17.0402       2923.43       2940.47    
  51  0.346176      -1.06081      -343.518       343.518       2217.02       2560.53    
  52  0.678244     -0.388248      -125.725       125.725       3012.04       3137.76    
  53  0.858518     -0.152547      -49.3989       49.3989       2163.74       2213.13    
  54  0.835860E-01  -2.48188      -803.698       803.698       2578.06       3381.76    
  55  0.762568     -0.271063      -87.7775       87.7775       2774.96       2862.74    
  56  0.273927      -1.29489      -419.321       419.321       2947.65       3366.97    
  57  0.729557     -0.315318      -102.108       102.108       2277.30       2379.41    
  58  0.320381      -1.13825      -368.594       368.594       2096.94       2465.54    
loop,thermsimp(1:2)       54   184.328       116.043    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       3010.40         68.32          1.14         38.99          0.58          0.05        109.08
Just calling func    0   0        109.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3010.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       54
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       55
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      141     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -530.443       530.443       1979.33       2509.78    
   2  0.875287     -0.133204      -43.1349       43.1349       1852.82       1895.96    
   3  0.103612      -2.26710      -734.147       734.147       1952.21       2686.36    
   4  0.159072      -1.83840      -595.323       595.323       2083.98       2679.31    
   5  0.118738      -2.13084      -690.022       690.022       2163.74       2853.76    
   6  0.294105      -1.22382      -396.305       396.305       2167.72       2564.03    
   7  0.967643     -0.328919E-01  -10.6513       10.6513       2154.33       2164.98    
   8  0.675183     -0.392772      -127.190       127.190       2146.03       2273.22    
   9  0.170112      -1.77130      -573.594       573.594       2166.51       2740.10    
  10  0.990992     -0.904902E-02  -2.93031       2.93031       2200.82       2203.75    
  11  0.198513      -1.61690      -523.596       523.596       2168.20       2691.80    
  12  0.404817E-01  -3.20690      -1038.48       1038.48       2101.37       3139.85    
  13  0.834933E-01  -2.48299      -804.058       804.058       2263.60       3067.66    
  14  0.458935     -0.778848      -252.212       252.212       2328.26       2580.47    
  15  0.929311     -0.733118E-01  -23.7403       23.7403       2100.29       2124.04    
  16  0.593071     -0.522440      -169.180       169.180       2131.53       2300.71    
  17  0.963359E-01  -2.33991      -757.727       757.727       2153.25       2910.98    
  18  0.383119E-01  -3.26200      -1056.32       1056.32       2277.30       3333.62    
  19  0.841843     -0.172161      -55.7504       55.7504       2214.01       2269.76    
  20  0.874261     -0.134376      -43.5147       43.5147       2328.25       2371.76    
  21  0.706443     -0.347513      -112.534       112.534       2303.66       2416.19    
  22  0.423649E-01  -3.16143      -1023.76       1023.76       2396.99       3420.74    
  23  0.904835     -0.100003      -32.3836       32.3836       2173.41       2205.80    
  24  0.728800     -0.316356      -102.445       102.445       2158.84       2261.28    
  25  0.764304     -0.268790      -87.0414       87.0414       2092.46       2179.50    
  26  0.578519     -0.547284      -177.225       177.225       2096.94       2274.17    
  27  0.321737      -1.13402      -367.226       367.226       2415.49       2782.72    
  28  0.592944     -0.522656      -169.250       169.250       2175.09       2344.34    
  29  0.159596      -1.83511      -594.258       594.258       2515.11       3109.37    
  30  0.797332     -0.226484      -73.3415       73.3415       2217.02       2290.36    
  31  0.263979      -1.33189      -431.300       431.300       2502.50       2933.80    
  32  0.449355     -0.799942      -259.043       259.043       2238.70       2497.75    
  33  0.859901     -0.150938      -48.8776       48.8776       2296.22       2345.10    
  34  0.730093     -0.314584      -101.871       101.871       2233.42       2335.29    
  35  0.484666     -0.724295      -234.546       234.546       2532.40       2766.95    
  36  0.180217      -1.71359      -554.907       554.907       2316.27       2871.18    
  37  0.857397     -0.153854      -49.8221       49.8221       2108.39       2158.21    
  38  0.502370     -0.688418      -222.928       222.928       2488.88       2711.81    
  39  0.245408      -1.40484      -454.923       454.923       2157.09       2612.01    
  40  0.134540      -2.00590      -649.562       649.562       2282.20       2931.76    
  41  0.468137     -0.758995      -245.783       245.783       2154.48       2400.27    
  42  0.864548E-01  -2.44813      -792.771       792.771       2170.43       2963.20    
  43  0.178791      -1.72154      -557.480       557.480       2358.01       2915.49    
  44  0.690351     -0.370555      -119.995       119.995       2774.96       2894.95    
  45  0.731648     -0.312455      -101.181       101.181       2182.87       2284.06    
  46  0.857623     -0.153591      -49.7367       49.7367       2923.43       2973.17    
  47  0.754956     -0.281095      -91.0261       91.0261       2460.50       2551.52    
  48  0.355557      -1.03407      -334.860       334.860       2650.54       2985.40    
  49  0.200964      -1.60463      -519.622       519.622       2459.97       2979.59    
  50  0.243499      -1.41264      -457.451       457.451       2680.66       3138.12    
  51  0.796288     -0.227794      -73.7659       73.7659       3012.04       3085.81    
  52  0.256937      -1.35892      -440.056       440.056       2193.99       2634.05    
  53  0.591760     -0.524655      -169.897       169.897       2418.74       2588.64    
  54  0.799227     -0.224110      -72.5727       72.5727       2947.65       3020.22    
  55  0.115295E-01  -4.46285      -1445.19       1445.19       2578.06       4023.25    
  56  0.559205     -0.581239      -188.221       188.221       2485.36       2673.58    
  57  0.742198     -0.298139      -96.5454       96.5454       2191.49       2288.04    
  58  0.543157     -0.610356      -197.650       197.650       3010.40       3208.05    
loop,thermsimp(1:2)       55   530.443       43.1349    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143       1926.23         68.55          1.16         38.77          0.59          0.05        109.12
Just calling func    0   0        109.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144       1985.76         68.49          1.17         38.80          0.52          0.05        109.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1926.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       55
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       56
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      143     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -633.690       633.690       1852.82       2486.51    
   2  0.197548      -1.62177      -525.174       525.174       2100.29       2625.47    
   3  0.774000     -0.256183      -82.9589       82.9589       2108.39       2191.35    
   4  0.170284      -1.77029      -573.267       573.267       2154.33       2727.59    
   5  0.250636      -1.38376      -448.097       448.097       2092.46       2540.56    
   6  0.907951     -0.965652E-01  -31.2704       31.2704       2200.82       2232.09    
   7  0.611678     -0.491549      -159.177       159.177       2173.41       2332.59    
   8  0.735945E-02  -4.91177      -1590.56       1590.56       2158.84       3749.40    
   9  0.309131      -1.17399      -380.169       380.169       2214.01       2594.18    
  10  0.577854     -0.548434      -177.597       177.597       2146.03       2323.63    
  11  0.931529     -0.709274E-01  -22.9682       22.9682       2096.94       2119.91    
  12  0.665703     -0.406912      -131.769       131.769       2182.87       2314.64    
  13  0.585695     -0.534955      -173.233       173.233       2191.49       2364.72    
  14  0.295001      -1.22078      -395.320       395.320       2217.02       2612.34    
  15  0.317712E-01  -3.44920      -1116.94       1116.94       2131.53       3248.48    
  16  0.222963      -1.50075      -485.983       485.983       2233.42       2719.41    
  17  0.325931      -1.12107      -363.032       363.032       2175.09       2538.12    
  18  0.785098     -0.241947      -78.3488       78.3488       2296.22       2374.57    
  19  0.550467     -0.596988      -193.321       193.321       2328.25       2521.57    
  20  0.780222     -0.248176      -80.3661       80.3661       2154.48       2234.85    
  21  0.130712      -2.03476      -658.908       658.908       2303.66       2962.57    
  22  0.873397     -0.135365      -43.8347       43.8347       2238.70       2282.54    
  23  0.366975      -1.00246      -324.624       324.624       1979.33       2303.96    
  24  0.813244     -0.206724      -66.9427       66.9427       2460.50       2527.44    
  25  0.782660E-01  -2.54764      -824.994       824.994       2167.72       2992.72    
  26  0.700327     -0.356208      -115.350       115.350       2328.26       2443.61    
  27  0.437766     -0.826071      -267.504       267.504       2418.74       2686.24    
  28  0.508966E-01  -2.97796      -964.342       964.342       2157.09       3121.43    
  29  0.276850      -1.28428      -415.883       415.883       2193.99       2609.87    
  30  0.792031     -0.233154      -75.5016       75.5016       2485.36       2560.86    
  31  0.174747      -1.74441      -564.888       564.888       2083.98       2648.87    
  32  0.469718     -0.755623      -244.691       244.691       1952.21       2196.90    
  33  0.252316      -1.37707      -445.932       445.932       2168.20       2614.13    
  34  0.980061     -0.201409E-01  -6.52214       6.52214       2488.88       2495.40    
  35  0.838300     -0.176379      -57.1164       57.1164       2166.51       2223.63    
  36  0.369385     -0.995915      -322.504       322.504       2532.40       2854.90    
  37  0.923139     -0.799751E-01  -25.8981       25.8981       2415.49       2441.39    
  38  0.592446     -0.523496      -169.522       169.522       2163.74       2333.26    
  39  0.348787      -1.05329      -341.084       341.084       2316.27       2657.36    
  40  0.569584     -0.562850      -182.266       182.266       2774.96       2957.22    
  41  0.543034E-01  -2.91317      -943.361       943.361       2153.25       3096.61    
  42  0.582662     -0.540148      -174.914       174.914       2358.01       2532.92    
  43  0.702825     -0.352648      -114.197       114.197       2282.20       2396.40    
  44  0.941375     -0.604140E-01  -19.5637       19.5637       2502.50       2522.06    
  45  0.258857      -1.35148      -437.645       437.645       2170.43       2608.07    
  46  0.116535      -2.14956      -696.086       696.086       2923.43       3619.52    
  47  0.102671      -2.27622      -737.102       737.102       2459.97       3197.07    
  48  0.172023      -1.76013      -569.976       569.976       2650.54       3220.52    
  49  0.434982E-01  -3.13504      -1015.21       1015.21       2947.65       3962.86    
  50  0.852122     -0.160026      -51.8207       51.8207       2263.60       2315.43    
  51  0.583521     -0.538675      -174.437       174.437       3012.04       3186.48    
  52  0.843374     -0.170345      -55.1622       55.1622       2515.11       2570.27    
  53  0.194743      -1.63607      -529.804       529.804       2680.66       3210.47    
  54  0.191808      -1.65126      -534.721       534.721       2101.37       2636.09    
  55  0.656555     -0.420749      -136.250       136.250       3010.40       3146.65    
  56  0.468384E-01  -3.06105      -991.250       991.250       2277.30       3268.55    
  57  0.812217     -0.207988      -67.3519       67.3519       2396.99       2464.34    
  58  0.852265     -0.159858      -51.7661       51.7661       1926.23       1978.00    
loop,thermsimp(1:2)       56   633.690       525.174    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145       2092.91         68.20          1.19         39.25          0.56          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146       3120.81         68.29          1.20         39.16          0.33          0.05        109.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2092.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       56
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       57
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      145     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -133.443       133.443       1926.23       2059.68    
   2  0.724212     -0.322671      -104.490       104.490       2096.94       2201.43    
   3  0.633711     -0.456163      -147.718       147.718       2108.39       2256.11    
   4  0.448566     -0.801700      -259.612       259.612       1952.21       2211.83    
   5  0.964228     -0.364273E-01  -11.7961       11.7961       2166.51       2178.31    
   6  0.714306     -0.336444      -108.950       108.950       2200.82       2309.77    
   7  0.528330     -0.638035      -206.613       206.613       2154.48       2361.10    
   8  0.654127     -0.424453      -137.449       137.449       2238.70       2376.15    
   9  0.368899     -0.997232      -322.930       322.930       1979.33       2302.26    
  10  0.227697      -1.47974      -479.179       479.179       2182.87       2662.05    
  11  0.612266     -0.490588      -158.865       158.865       2263.60       2422.47    
  12  0.313777      -1.15907      -375.339       375.339       2146.03       2521.37    
  13  0.258526      -1.35276      -438.060       438.060       2173.41       2611.47    
  14  0.119298      -2.12613      -688.499       688.499       2163.74       2852.23    
  15  0.213331      -1.54491      -500.282       500.282       2191.49       2691.77    
  16  0.294218      -1.22343      -396.181       396.181       2296.22       2692.40    
  17  0.352988      -1.04132      -337.208       337.208       2282.20       2619.41    
  18  0.348706      -1.05353      -341.160       341.160       2415.49       2756.65    
  19  0.449249     -0.800179      -259.119       259.119       2328.26       2587.38    
  20  0.879121     -0.128833      -41.7195       41.7195       2396.99       2438.71    
  21  0.464081     -0.767695      -248.600       248.600       1852.82       2101.42    
  22  0.497582     -0.697995      -226.029       226.029       2488.88       2714.91    
  23  0.920207     -0.831566E-01  -26.9283       26.9283       2328.25       2355.17    
  24  0.811773     -0.208535      -67.5292       67.5292       2502.50       2570.03    
  25  0.190651      -1.65731      -536.681       536.681       2460.50       2997.18    
  26  0.645174     -0.438235      -141.912       141.912       2358.01       2499.92    
  27  0.668343     -0.402954      -130.487       130.487       2175.09       2305.58    
  28  0.765111     -0.267735      -86.6997       86.6997       2092.46       2179.16    
  29  0.991779     -0.825499E-02  -2.67319       2.67319       2485.36       2488.03    
  30  0.136888      -1.98859      -643.960       643.960       2515.11       3159.07    
  31  0.645145E-01  -2.74086      -887.565       887.565       2214.01       3101.58    
  32  0.408515E-01  -3.19781      -1035.54       1035.54       2170.43       3205.97    
  33  0.264109      -1.33140      -431.141       431.141       2193.99       2625.13    
  34  0.382737     -0.960407      -311.005       311.005       2217.02       2528.02    
  35  0.402738E-02  -5.51464      -1785.79       1785.79       2168.20       3953.99    
  36  0.318074      -1.14547      -370.934       370.934       2100.29       2471.23    
  37  0.245237      -1.40553      -455.149       455.149       2101.37       2556.52    
  38  0.519766     -0.654377      -211.905       211.905       2083.98       2295.89    
  39  0.255147      -1.36592      -442.320       442.320       2316.27       2758.59    
  40  0.833841     -0.181712      -58.8432       58.8432       2418.74       2477.58    
  41  0.696242E-01  -2.66464      -862.882       862.882       2233.42       3096.31    
  42  0.487295     -0.718886      -232.794       232.794       2154.33       2387.12    
  43  0.276229E-01  -3.58911      -1162.25       1162.25       2532.40       3694.65    
  44  0.638327     -0.448905      -145.367       145.367       2774.96       2920.33    
  45  0.206684      -1.57657      -510.534       510.534       2303.66       2814.19    
  46  0.736003     -0.306521      -99.2597       99.2597       2167.72       2266.98    
  47  0.217444E-01  -3.82840      -1239.74       1239.74       2153.25       3392.99    
  48  0.956929     -0.440260E-01  -14.2568       14.2568       2157.09       2171.35    
  49  0.883561     -0.123795      -40.0880       40.0880       3010.40       3050.49    
  50  0.700901     -0.355388      -115.084       115.084       3012.04       3127.12    
  51  0.201997      -1.59950      -517.961       517.961       2459.97       2977.93    
  52  0.412152     -0.886362      -287.028       287.028       2680.66       2967.69    
  53  0.890450     -0.116029      -37.5732       37.5732       2650.54       2688.12    
  54  0.417423     -0.873654      -282.913       282.913       2131.53       2414.45    
  55  0.426501     -0.852140      -275.946       275.946       2277.30       2553.24    
  56  0.983871     -0.162605E-01  -5.26557       5.26557       2923.43       2928.70    
  57  0.384350     -0.956201      -309.643       309.643       2158.84       2468.48    
  58  0.155937      -1.85830      -601.768       601.768       2092.91       2694.68    
loop,thermsimp(1:2)       57   133.443       104.490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       2032.93         68.40          1.15         39.19          0.48          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148       2060.83         68.48          1.17         38.91          0.47          0.05        109.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2032.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       57
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       58
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      147     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -919.330       919.330       1926.23       2845.57    
   2  0.104884      -2.25490      -730.198       730.198       1852.82       2583.02    
   3  0.784254     -0.243023      -78.6972       78.6972       2157.09       2235.79    
   4  0.813133     -0.206861      -66.9871       66.9871       2166.51       2233.50    
   5  0.490778     -0.711764      -230.488       230.488       2092.46       2322.95    
   6  0.168573      -1.78039      -576.536       576.536       2096.94       2673.48    
   7  0.450161     -0.798149      -258.462       258.462       1952.21       2210.68    
   8  0.828233     -0.188461      -61.0286       61.0286       2108.39       2169.42    
   9  0.994731     -0.528342E-02  -1.71091       1.71091       2167.72       2169.44    
  10  0.813340     -0.206606      -66.9046       66.9046       2083.98       2150.89    
  11  0.776133     -0.253432      -82.0680       82.0680       1979.33       2061.40    
  12  0.729556     -0.315319      -102.109       102.109       2175.09       2277.20    
  13  0.530451     -0.634028      -205.315       205.315       2200.82       2406.13    
  14  0.752564E-01  -2.58685      -837.692       837.692       2328.25       3165.94    
  15  0.918457     -0.850597E-01  -27.5446       27.5446       2154.48       2182.03    
  16  0.162642      -1.81621      -588.136       588.136       2238.70       2826.84    
  17  0.725851     -0.320411      -103.757       103.757       2154.33       2258.08    
  18  0.322292      -1.13230      -366.668       366.668       2131.53       2498.20    
  19  0.838064     -0.176661      -57.2076       57.2076       2263.60       2320.81    
  20  0.346062E-01  -3.36372      -1089.26       1089.26       2396.99       3486.25    
  21  0.442915     -0.814377      -263.717       263.717       2158.84       2422.56    
  22  0.143708      -1.93997      -628.215       628.215       2100.29       2728.51    
  23  0.940845     -0.609769E-01  -19.7460       19.7460       2418.74       2438.48    
  24  0.972503     -0.278816E-01  -9.02882       9.02882       2485.36       2494.39    
  25  0.291831      -1.23158      -398.819       398.819       2358.01       2756.82    
  26  0.211976      -1.55128      -502.347       502.347       2146.03       2648.38    
  27  0.695427     -0.363229      -117.623       117.623       2217.02       2334.64    
  28  0.982540E-01  -2.32020      -751.342       751.342       2277.30       3028.64    
  29  0.730742     -0.313695      -101.583       101.583       2101.37       2202.95    
  30  0.417794     -0.872766      -282.625       282.625       2502.50       2785.12    
  31  0.868385     -0.141121      -45.6986       45.6986       2328.26       2373.96    
  32  0.300897      -1.20099      -388.911       388.911       2173.41       2562.32    
  33  0.917219     -0.864093E-01  -27.9816       27.9816       2282.20       2310.18    
  34  0.304394      -1.18943      -385.170       385.170       2193.99       2579.16    
  35  0.856500     -0.154901      -50.1612       50.1612       2182.87       2233.04    
  36  0.310652      -1.16908      -378.580       378.580       2650.54       3029.12    
  37  0.846275     -0.166911      -54.0503       54.0503       2191.49       2245.54    
  38  0.206825      -1.57588      -510.313       510.313       2296.22       2806.53    
  39  0.606376     -0.500256      -161.996       161.996       2092.91       2254.91    
  40  0.840015     -0.174336      -56.4545       56.4545       2488.88       2545.33    
  41  0.348835      -1.05315      -341.040       341.040       2415.49       2756.53    
  42  0.857325     -0.153939      -49.8494       49.8494       2316.27       2366.12    
  43  0.308035E-01  -3.48013      -1126.96       1126.96       2303.66       3430.62    
  44  0.400632     -0.914711      -296.208       296.208       2163.74       2459.94    
  45  0.242237      -1.41784      -459.133       459.133       2774.96       3234.09    
  46  0.407771     -0.897050      -290.489       290.489       2923.43       3213.92    
  47  0.430691     -0.842364      -272.780       272.780       2680.66       2953.44    
  48  0.415503     -0.878266      -284.406       284.406       2459.97       2744.37    
  49  0.593575     -0.521591      -168.905       168.905       2460.50       2629.40    
  50  0.973620     -0.267342E-01  -8.65724       8.65724       3010.40       3019.06    
  51  0.510257     -0.672840      -217.883       217.883       2233.42       2451.31    
  52  0.796475     -0.227560      -73.6899       73.6899       2214.01       2287.70    
  53  0.213576      -1.54376      -499.911       499.911       3012.04       3511.95    
  54  0.865534     -0.144409      -46.7634       46.7634       2515.11       2561.88    
  55  0.920053     -0.833240E-01  -26.9825       26.9825       2170.43       2197.41    
  56  0.534624     -0.626192      -202.778       202.778       2153.25       2356.03    
  57  0.963687     -0.369888E-01  -11.9779       11.9779       2532.40       2544.38    
  58  0.498139     -0.696877      -225.667       225.667       2032.93       2258.59    
loop,thermsimp(1:2)       58   919.330       730.198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149       2198.86         68.34          1.14         38.90          0.58          0.05        109.01
Just calling func    0   0        109.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2198.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       58
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       59
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      148     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -358.983       358.983       1979.33       2338.31    
   2  0.939148     -0.627826E-01  -20.3307       20.3307       2083.98       2104.32    
   3  0.130906      -2.03328      -658.430       658.430       2108.39       2766.82    
   4  0.664370     -0.408916      -132.418       132.418       2167.72       2300.14    
   5  0.490908     -0.711498      -230.402       230.402       2154.48       2384.89    
   6  0.711731     -0.340055      -110.119       110.119       2170.43       2280.55    
   7  0.676080     -0.391444      -126.760       126.760       2101.37       2228.13    
   8  0.611139     -0.492432      -159.462       159.462       1952.21       2111.68    
   9  0.614246     -0.487359      -157.820       157.820       2182.87       2340.69    
  10  0.988045     -0.120275E-01  -3.89484       3.89484       2166.51       2170.40    
  11  0.232883      -1.45722      -471.886       471.886       2157.09       2628.98    
  12  0.450825     -0.796675      -257.985       257.985       2191.49       2449.48    
  13  0.493319     -0.706599      -228.815       228.815       2092.91       2321.73    
  14  0.191184      -1.65452      -535.778       535.778       2154.33       2690.11    
  15  0.894136     -0.111897      -36.2353       36.2353       2032.93       2069.16    
  16  0.391751     -0.937128      -303.467       303.467       2175.09       2478.56    
  17  0.236278      -1.44275      -467.200       467.200       2214.01       2681.21    
  18  0.496874E-01  -3.00200      -972.129       972.129       2282.20       3254.33    
  19  0.784524     -0.242678      -78.5857       78.5857       2263.60       2342.19    
  20  0.292328      -1.22988      -398.268       398.268       2092.46       2490.73    
  21  0.832247E-01  -2.48621      -805.101       805.101       2217.02       3022.12    
  22  0.423133     -0.860069      -278.513       278.513       2153.25       2431.76    
  23  0.234472      -1.45042      -469.684       469.684       2316.27       2785.96    
  24  0.868463     -0.141031      -45.6695       45.6695       2328.26       2373.93    
  25  0.122969      -2.09582      -678.683       678.683       2200.82       2879.50    
  26  0.811771     -0.208537      -67.5298       67.5298       2158.84       2226.37    
  27  0.786834     -0.239738      -77.6337       77.6337       2418.74       2496.37    
  28  0.163144      -1.81312      -587.136       587.136       2233.42       2820.56    
  29  0.571103     -0.560186      -181.403       181.403       2163.74       2345.14    
  30  0.769982     -0.261388      -84.6442       84.6442       2485.36       2570.00    
  31  0.471769     -0.751265      -243.280       243.280       2131.53       2374.81    
  32  0.584935     -0.536254      -173.653       173.653       2532.40       2706.05    
  33  0.416140     -0.876734      -283.910       283.910       2488.88       2772.79    
  34  0.106525E-01  -4.54196      -1470.81       1470.81       2515.11       3985.92    
  35  0.595424     -0.518482      -167.898       167.898       2173.41       2341.31    
  36  0.302400      -1.19600      -387.298       387.298       2193.99       2581.29    
  37  0.629701     -0.462510      -149.773       149.773       1852.82       2002.59    
  38  0.939026E-01  -2.36550      -766.011       766.011       2460.50       3226.51    
  39  0.911727     -0.924151E-01  -29.9265       29.9265       2146.03       2175.96    
  40  0.289502      -1.23959      -401.413       401.413       2096.94       2498.36    
  41  0.326571      -1.11911      -362.397       362.397       2100.29       2462.69    
  42  0.972366     -0.280231E-01  -9.07461       9.07461       2459.97       2469.04    
  43  0.823413     -0.194297      -62.9185       62.9185       2415.49       2478.41    
  44  0.790717     -0.234815      -76.0393       76.0393       2358.01       2434.05    
  45  0.167922      -1.78426      -577.790       577.790       2502.50       3080.29    
  46  0.804665     -0.217329      -70.3770       70.3770       2296.22       2366.60    
  47  0.154714      -1.86617      -604.317       604.317       2238.70       2843.02    
  48  0.240456      -1.42522      -461.524       461.524       1926.23       2387.76    
  49  0.351787      -1.04473      -338.311       338.311       2680.66       3018.98    
  50  0.666429E-01  -2.70841      -877.054       877.054       3010.40       3887.45    
  51  0.484113     -0.725437      -234.916       234.916       2277.30       2512.21    
  52  0.298509      -1.20896      -391.492       391.492       2650.54       3042.04    
  53  0.982136     -0.180253E-01  -5.83707       5.83707       2328.25       2334.08    
  54  0.799723     -0.223490      -72.3720       72.3720       2923.43       2995.80    
  55  0.559799     -0.580177      -187.877       187.877       2774.96       2962.84    
  56  0.492929     -0.707390      -229.072       229.072       2303.66       2532.73    
  57  0.655290     -0.422678      -136.874       136.874       2396.99       2533.86    
  58  0.426949     -0.851091      -275.606       275.606       2198.86       2474.46    
loop,thermsimp(1:2)       59   358.983       20.3307    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150       2313.62         68.42          1.16         38.99          0.57          0.05        109.19
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151       4207.22         68.30          1.20         39.21          0.43          0.05        109.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2313.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       59
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       60
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      150     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -385.445       385.445       1852.82       2238.26    
   2  0.843344     -0.170380      -55.1735       55.1735       2032.93       2088.10    
   3  0.457815     -0.781289      -253.002       253.002       2083.98       2336.99    
   4  0.933709     -0.685899E-01  -22.2112       22.2112       1952.21       1974.42    
   5  0.887159     -0.119731      -38.7720       38.7720       2166.51       2205.28    
   6  0.786211     -0.240530      -77.8901       77.8901       2146.03       2223.92    
   7  0.794803     -0.229661      -74.3704       74.3704       2158.84       2233.21    
   8  0.573435E-01  -2.85870      -925.722       925.722       2101.37       3027.09    
   9  0.647106     -0.435245      -140.944       140.944       2170.43       2311.37    
  10  0.110118      -2.20620      -714.428       714.428       2167.72       2882.15    
  11  0.339548      -1.08014      -349.778       349.778       2092.91       2442.69    
  12  0.635246     -0.453742      -146.934       146.934       2328.25       2475.18    
  13  0.488392     -0.716638      -232.066       232.066       1979.33       2211.40    
  14  0.602571     -0.506549      -164.034       164.034       2182.87       2346.91    
  15  0.710041     -0.342433      -110.889       110.889       2173.41       2284.30    
  16  0.585763     -0.534840      -173.195       173.195       2263.60       2436.80    
  17  0.288010      -1.24476      -403.086       403.086       2163.74       2566.82    
  18  0.455238     -0.786934      -254.830       254.830       2296.22       2551.05    
  19  0.723984     -0.322986      -104.591       104.591       2328.26       2432.85    
  20  0.554067     -0.590470      -191.210       191.210       2131.53       2322.74    
  21  0.646516     -0.436157      -141.239       141.239       2154.48       2295.72    
  22  0.271985      -1.30201      -421.625       421.625       1926.23       2347.86    
  23  0.901636E-02  -4.70871      -1524.81       1524.81       2153.25       3678.06    
  24  0.383616     -0.958114      -310.263       310.263       2358.01       2668.27    
  25  0.443516     -0.813022      -263.278       263.278       2191.49       2454.77    
  26  0.223023      -1.50048      -485.896       485.896       2100.29       2586.19    
  27  0.123255      -2.09350      -677.930       677.930       2459.97       3137.90    
  28  0.817485     -0.201523      -65.2585       65.2585       2198.86       2264.12    
  29  0.333893      -1.09693      -355.216       355.216       2415.49       2770.71    
  30  0.867877     -0.141706      -45.8881       45.8881       2175.09       2220.98    
  31  0.365747      -1.00581      -325.709       325.709       2092.46       2418.17    
  32  0.429445     -0.845262      -273.718       273.718       2418.74       2692.46    
  33  0.856620     -0.154761      -50.1158       50.1158       2096.94       2147.06    
  34  0.729532     -0.315352      -102.119       102.119       2277.30       2379.42    
  35  0.315845      -1.15251      -373.212       373.212       2303.66       2676.87    
  36  0.547596     -0.602217      -195.014       195.014       2396.99       2592.00    
  37  0.752130     -0.284846      -92.2409       92.2409       2485.36       2577.60    
  38  0.806451     -0.215112      -69.6590       69.6590       2193.99       2263.65    
  39  0.618613     -0.480275      -155.526       155.526       2157.09       2312.62    
  40  0.630350     -0.461480      -149.439       149.439       2214.01       2363.45    
  41  0.251741      -1.37935      -446.672       446.672       2154.33       2601.00    
  42  0.846504     -0.166640      -53.9624       53.9624       2532.40       2586.36    
  43  0.830791     -0.185377      -60.0298       60.0298       2108.39       2168.42    
  44  0.566838     -0.567681      -183.830       183.830       2488.88       2672.71    
  45  0.499450E-01  -2.99683      -970.455       970.455       2316.27       3286.73    
  46  0.976301     -0.239838E-01  -7.76661       7.76661       2233.42       2241.19    
  47  0.401049     -0.913672      -295.871       295.871       2238.70       2534.58    
  48  0.709931E-01  -2.64517      -856.577       856.577       2200.82       3057.39    
  49  0.920370E-02  -4.68815      -1518.15       1518.15       2774.96       4293.11    
  50  0.379723     -0.968314      -313.566       313.566       2923.43       3237.00    
  51  0.207569      -1.57229      -509.150       509.150       2680.66       3189.81    
  52  0.745673     -0.293468      -95.0327       95.0327       2217.02       2312.05    
  53  0.915877     -0.878737E-01  -28.4558       28.4558       2650.54       2679.00    
  54  0.836769     -0.178207      -57.7083       57.7083       2502.50       2560.21    
  55  0.769684E-01  -2.56436      -830.408       830.408       2460.50       3290.90    
  56  0.797754     -0.225955      -73.1703       73.1703       2282.20       2355.37    
  57  0.555189     -0.588446      -190.555       190.555       3010.40       3200.95    
  58  0.134224      -2.00825      -650.324       650.324       2313.62       2963.95    
loop,thermsimp(1:2)       60   385.445       55.1735    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       3135.91         68.36          1.24         39.15          0.14          0.05        108.95
Just calling func    0   0        108.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3135.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       60
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       61
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      151     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -60.4626       60.4626       1952.21       2012.68    
   2  0.735850     -0.306729      -99.3270       99.3270       2032.93       2132.25    
   3  0.828786     -0.187793      -60.8125       60.8125       2096.94       2157.76    
   4  0.592078     -0.524118      -169.723       169.723       2108.39       2278.11    
   5  0.691797E-01  -2.67105      -864.956       864.956       2166.51       3031.47    
   6  0.772335     -0.258337      -83.6564       83.6564       1979.33       2062.99    
   7  0.504563     -0.684063      -221.518       221.518       2175.09       2396.61    
   8  0.700615     -0.355797      -115.216       115.216       2146.03       2261.25    
   9  0.764596     -0.268408      -86.9176       86.9176       2158.84       2245.76    
  10  0.459614     -0.777368      -251.733       251.733       1852.82       2104.55    
  11  0.931193     -0.712882E-01  -23.0850       23.0850       2233.42       2256.51    
  12  0.502482E-01  -2.99078      -968.494       968.494       2193.99       3162.49    
  13  0.498197     -0.696760      -225.629       225.629       2198.86       2424.49    
  14  0.551534E-01  -2.89764      -938.332       938.332       2173.41       3111.74    
  15  0.172209      -1.75905      -569.626       569.626       2154.48       2724.11    
  16  0.238868E-01  -3.73443      -1209.31       1209.31       2170.43       3379.74    
  17  0.699366     -0.357581      -115.794       115.794       2217.02       2332.81    
  18  0.764093     -0.269066      -87.1308       87.1308       2157.09       2244.22    
  19  0.465633     -0.764357      -247.519       247.519       2131.53       2379.05    
  20  0.209906      -1.56110      -505.525       505.525       2083.98       2589.51    
  21  0.216891      -1.52836      -494.923       494.923       2182.87       2677.80    
  22  0.795854E-01  -2.53092      -819.581       819.581       1926.23       2745.82    
  23  0.701683     -0.354273      -114.723       114.723       2282.20       2396.92    
  24  0.574425     -0.554385      -179.525       179.525       2214.01       2393.54    
  25  0.674968     -0.393090      -127.293       127.293       2277.30       2404.59    
  26  0.684189     -0.379521      -122.899       122.899       2092.46       2215.36    
  27  0.541862     -0.612745      -198.423       198.423       2328.26       2526.68    
  28  0.668027     -0.403426      -130.640       130.640       2263.60       2394.24    
  29  0.353251      -1.04058      -336.966       336.966       2092.91       2429.88    
  30  0.778708     -0.250119      -80.9953       80.9953       2191.49       2272.49    
  31  0.829283     -0.187194      -60.6184       60.6184       2328.25       2388.86    
  32  0.679297     -0.386697      -125.223       125.223       2238.70       2363.93    
  33  0.536301     -0.623060      -201.763       201.763       2296.22       2497.99    
  34  0.247738      -1.39538      -451.862       451.862       2502.50       2954.36    
  35  0.271399      -1.30416      -422.323       422.323       2163.74       2586.06    
  36  0.284124      -1.25835      -407.486       407.486       2485.36       2892.84    
  37  0.664442     -0.408808      -132.383       132.383       2100.29       2232.68    
  38  0.874508     -0.134094      -43.4231       43.4231       2532.40       2575.82    
  39  0.916444     -0.872538E-01  -28.2551       28.2551       2396.99       2425.24    
  40  0.295165      -1.22022      -395.140       395.140       2154.33       2549.47    
  41  0.242592      -1.41637      -458.660       458.660       2358.01       2816.67    
  42  0.396124     -0.926028      -299.873       299.873       2488.88       2788.75    
  43  0.509193E-01  -2.97751      -964.198       964.198       2303.66       3267.86    
  44  0.778911     -0.249858      -80.9107       80.9107       2650.54       2731.45    
  45  0.351009      -1.04694      -339.028       339.028       2418.74       2757.77    
  46  0.480934     -0.732025      -237.049       237.049       2415.49       2652.54    
  47  0.908579     -0.958731E-01  -31.0463       31.0463       2167.72       2198.77    
  48  0.898885     -0.106600      -34.5199       34.5199       2313.62       2348.14    
  49  0.561121     -0.577819      -187.113       187.113       2101.37       2288.48    
  50  0.851109     -0.161215      -52.2058       52.2058       2200.82       2253.02    
  51  0.975854     -0.244425E-01  -7.91514       7.91514       2459.97       2467.88    
  52  0.187829      -1.67223      -541.511       541.511       2680.66       3222.18    
  53  0.962131     -0.386049E-01  -12.5013       12.5013       3010.40       3022.90    
  54  0.823812     -0.193813      -62.7618       62.7618       2923.43       2986.19    
  55  0.765207     -0.267609      -86.6590       86.6590       2316.27       2402.93    
  56  0.207984      -1.57030      -508.503       508.503       2460.50       2969.00    
  57  0.675792     -0.391869      -126.898       126.898       2153.25       2280.15    
  58  0.641275     -0.444296      -143.875       143.875       3135.91       3279.79    
loop,thermsimp(1:2)       61   60.4626       99.3270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153       2225.97         68.62          1.24         39.04          0.18          0.05        109.13
Just calling func    0   0        109.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2225.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       61
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       62
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      152     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -27.9192       27.9192       1952.21       1980.13    
   2  0.899579E-01  -2.40841      -779.908       779.908       1979.33       2759.24    
   3  0.997625     -0.237830E-02 -0.770158      0.770158       1852.82       1853.59    
   4  0.224083      -1.49574      -484.360       484.360       2032.93       2517.29    
   5  0.120769      -2.11388      -684.530       684.530       2096.94       2781.47    
   6  0.302676E-01  -3.49768      -1132.64       1132.64       2167.72       3300.36    
   7  0.315161      -1.15467      -373.913       373.913       2092.46       2466.37    
   8  0.155895      -1.85857      -601.856       601.856       2100.29       2702.15    
   9  0.467639     -0.760060      -246.127       246.127       2157.09       2403.22    
  10  0.277823      -1.28077      -414.747       414.747       2158.84       2573.59    
  11  0.712282     -0.339281      -109.868       109.868       2200.82       2310.69    
  12  0.929560     -0.730437E-01  -23.6535       23.6535       2233.42       2257.08    
  13  0.499024     -0.695101      -225.092       225.092       2146.03       2371.12    
  14  0.940347     -0.615066E-01  -19.9175       19.9175       2191.49       2211.41    
  15  0.714006     -0.336864      -109.085       109.085       2108.39       2217.47    
  16  0.162603      -1.81644      -588.213       588.213       2153.25       2741.46    
  17  0.663729     -0.409881      -132.730       132.730       2101.37       2234.10    
  18  0.314148      -1.15789      -374.956       374.956       2217.02       2591.97    
  19  0.497386     -0.698388      -226.157       226.157       2313.62       2539.78    
  20  0.368387     -0.998622      -323.380       323.380       2238.70       2562.08    
  21  0.326342      -1.11981      -362.624       362.624       2131.53       2494.16    
  22  0.442952     -0.814294      -263.690       263.690       2328.25       2591.94    
  23  0.929694     -0.729000E-01  -23.6070       23.6070       2214.01       2237.62    
  24  0.945450E-01  -2.35868      -763.803       763.803       2263.60       3027.41    
  25  0.407158     -0.898555      -290.976       290.976       2175.09       2466.07    
  26  0.706679     -0.347179      -112.426       112.426       2282.20       2394.63    
  27  0.657848     -0.418781      -135.613       135.613       2316.27       2451.89    
  28  0.968040     -0.324817E-01  -10.5184       10.5184       2277.30       2287.82    
  29  0.330387      -1.10749      -358.635       358.635       2198.86       2557.49    
  30  0.756161     -0.279501      -90.5099       90.5099       2396.99       2487.50    
  31  0.307772      -1.17840      -381.596       381.596       2092.91       2474.51    
  32  0.759008E-01  -2.57833      -834.931       834.931       2459.97       3294.90    
  33  0.615618E-01  -2.78771      -902.736       902.736       2296.22       3198.96    
  34  0.545984     -0.605166      -195.969       195.969       2328.26       2524.23    
  35  0.339865      -1.07921      -349.476       349.476       2154.33       2503.80    
  36  0.816477     -0.202757      -65.6581       65.6581       2532.40       2598.06    
  37  0.932889     -0.694691E-01  -22.4959       22.4959       2163.74       2186.23    
  38  0.667042     -0.404902      -131.118       131.118       2083.98       2215.10    
  39  0.583049     -0.539484      -174.699       174.699       2415.49       2590.19    
  40  0.210192      -1.55973      -505.084       505.084       2182.87       2687.96    
  41  0.158846      -1.83982      -595.784       595.784       2154.48       2750.27    
  42  0.360401      -1.02054      -330.477       330.477       2650.54       2981.02    
  43  0.508154     -0.676971      -219.221       219.221       1926.23       2145.46    
  44  0.873303     -0.135473      -43.8697       43.8697       2418.74       2462.61    
  45  0.650524     -0.429977      -139.238       139.238       2488.88       2628.12    
  46  0.805601     -0.216166      -70.0003       70.0003       2358.01       2428.01    
  47  0.312590E-03  -8.07062      -2613.48       2613.48       2485.36       5098.84    
  48  0.892261     -0.113997      -36.9152       36.9152       2502.50       2539.41    
  49  0.504672     -0.683846      -221.448       221.448       2460.50       2681.94    
  50  0.269834      -1.30995      -424.196       424.196       2923.43       3347.63    
  51  0.752889     -0.283838      -91.9142       91.9142       3010.40       3102.31    
  52  0.952800     -0.483498E-01  -15.6570       15.6570       2166.51       2182.17    
  53  0.147189E-01  -4.21863      -1366.10       1366.10       2173.41       3539.51    
  54  0.213392      -1.54462      -500.190       500.190       2193.99       2694.18    
  55  0.278061      -1.27992      -414.471       414.471       2680.66       3095.14    
  56  0.668800     -0.402271      -130.266       130.266       2303.66       2433.92    
  57  0.674989     -0.393058      -127.283       127.283       3135.91       3263.19    
  58  0.186370      -1.68002      -544.035       544.035       2225.97       2770.01    
loop,thermsimp(1:2)       62   27.9192       779.908    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       2033.22         68.32          1.22         39.31          0.20          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155       2064.56         68.40          1.12         39.35          0.55          0.05        109.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2033.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       62
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       63
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      154     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -156.269       156.269       1852.82       2009.09    
   2  0.828850     -0.187716      -60.7873       60.7873       1952.21       2013.00    
   3  0.138898      -1.97402      -639.240       639.240       1926.23       2565.47    
   4  0.174947      -1.74327      -564.518       564.518       2166.51       2731.03    
   5  0.452367E-01  -3.09585      -1002.52       1002.52       2163.74       3166.25    
   6  0.982229     -0.179305E-01  -5.80636       5.80636       2191.49       2197.30    
   7  0.855728     -0.155803      -50.4531       50.4531       2083.98       2134.44    
   8  0.350750      -1.04768      -339.267       339.267       2108.39       2447.66    
   9  0.880054     -0.127772      -41.3760       41.3760       2101.37       2142.75    
  10  0.106511      -2.23950      -725.211       725.211       2214.01       2939.22    
  11  0.336060      -1.09047      -353.122       353.122       2233.42       2586.55    
  12  0.904819     -0.100020      -32.3892       32.3892       2277.30       2309.69    
  13  0.765597     -0.267099      -86.4937       86.4937       2200.82       2287.31    
  14  0.551789     -0.594589      -192.544       192.544       2146.03       2338.57    
  15  0.832435     -0.183400      -59.3897       59.3897       2282.20       2341.59    
  16  0.353494      -1.03989      -336.744       336.744       2157.09       2493.83    
  17  0.510104     -0.673140      -217.981       217.981       2358.01       2575.99    
  18  0.523162     -0.647863      -209.795       209.795       2303.66       2513.45    
  19  0.953043     -0.480957E-01  -15.5747       15.5747       2316.27       2331.85    
  20  0.267001E-01  -3.62309      -1173.25       1173.25       2418.74       3591.99    
  21  0.280924      -1.26967      -411.153       411.153       2175.09       2586.24    
  22  0.956868     -0.440901E-01  -14.2776       14.2776       2092.46       2106.74    
  23  0.779725     -0.248814      -80.5725       80.5725       2092.91       2173.49    
  24  0.901061     -0.104183      -33.7372       33.7372       2396.99       2430.72    
  25  0.533391     -0.628501      -203.525       203.525       2131.53       2335.06    
  26  0.642536     -0.442333      -143.239       143.239       2154.33       2297.57    
  27  0.520565E-01  -2.95543      -957.045       957.045       2032.93       2989.97    
  28  0.330080      -1.10842      -358.936       358.936       2328.26       2687.20    
  29  0.280801      -1.27011      -411.295       411.295       2502.50       2913.79    
  30  0.144013      -1.93785      -627.528       627.528       2313.62       2941.15    
  31  0.201537      -1.60178      -518.699       518.699       2198.86       2717.56    
  32  0.920188     -0.831777E-01  -26.9352       26.9352       2238.70       2265.64    
  33  0.747222     -0.291393      -94.3608       94.3608       2158.84       2253.20    
  34  0.697959     -0.359595      -116.446       116.446       2415.49       2531.94    
  35  0.492949     -0.707349      -229.058       229.058       2328.25       2557.30    
  36  0.378001     -0.972857      -315.037       315.037       2217.02       2532.05    
  37  0.936484     -0.656225E-01  -21.2503       21.2503       2532.40       2553.65    
  38  0.458232     -0.780381      -252.708       252.708       2488.88       2741.59    
  39  0.286796      -1.24898      -404.455       404.455       2460.50       2864.95    
  40  0.524458     -0.645389      -208.994       208.994       2182.87       2391.87    
  41  0.126679      -2.06610      -669.058       669.058       2193.99       2863.05    
  42  0.645270     -0.438086      -141.864       141.864       2100.29       2242.16    
  43  0.996049     -0.395919E-02  -1.28209       1.28209       2153.25       2154.53    
  44  0.470695     -0.753545      -244.018       244.018       2154.48       2398.50    
  45  0.783048     -0.244561      -79.1953       79.1953       1979.33       2058.53    
  46  0.682425     -0.382103      -123.735       123.735       2225.97       2349.71    
  47  0.623779     -0.471960      -152.833       152.833       2096.94       2249.78    
  48  0.138146      -1.97945      -640.997       640.997       2650.54       3291.54    
  49  0.317697      -1.14666      -371.318       371.318       2263.60       2634.92    
  50  0.215616      -1.53426      -496.833       496.833       2680.66       3177.50    
  51  0.392653     -0.934829      -302.722       302.722       3010.40       3313.12    
  52  0.311957      -1.16489      -377.223       377.223       2296.22       2673.44    
  53  0.665567     -0.407116      -131.835       131.835       3135.91       3267.75    
  54  0.124333      -2.08479      -675.111       675.111       2459.97       3135.08    
  55  0.175373      -1.74084      -563.730       563.730       2167.72       2731.45    
  56  0.712195E-01  -2.64199      -855.546       855.546       2923.43       3778.98    
  57  0.626551E-01  -2.77011      -897.035       897.035       2173.41       3070.45    
  58  0.869671     -0.139640      -45.2192       45.2192       2033.22       2078.44    
loop,thermsimp(1:2)       63   156.269       60.7873    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       2122.01         68.40          1.13         38.73          0.75          0.05        109.05
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2122.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       63
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       64
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      155     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -65.6298       65.6298       1852.82       1918.45    
   2  0.209930      -1.56098      -505.487       505.487       1952.21       2457.70    
   3  0.710991     -0.341096      -110.456       110.456       1979.33       2089.79    
   4  0.967365     -0.331789E-01  -10.7442       10.7442       2033.22       2043.97    
   5  0.650635E-01  -2.73239      -884.821       884.821       2092.46       2977.28    
   6  0.578340     -0.547593      -177.325       177.325       2083.98       2261.31    
   7  0.928890E-01  -2.37635      -769.525       769.525       2101.37       2870.90    
   8  0.486974     -0.719546      -233.008       233.008       2153.25       2386.26    
   9  0.560625     -0.578703      -187.399       187.399       2092.91       2280.31    
  10  0.552834     -0.592698      -191.931       191.931       2191.49       2383.42    
  11  0.744529E-01  -2.59759      -841.168       841.168       2100.29       2941.46    
  12  0.937600     -0.644318E-01  -20.8647       20.8647       2096.94       2117.81    
  13  0.154459      -1.86783      -604.852       604.852       2158.84       2763.69    
  14  0.186893E-02  -6.28239      -2034.40       2034.40       2238.70       4273.11    
  15  0.250797      -1.38311      -447.888       447.888       2200.82       2648.71    
  16  0.924847E-01  -2.38071      -770.938       770.938       2154.33       2925.27    
  17  0.476680     -0.740911      -239.927       239.927       2277.30       2517.22    
  18  0.266527      -1.32228      -428.189       428.189       2316.27       2744.46    
  19  0.369755     -0.994916      -322.180       322.180       2131.53       2453.71    
  20  0.595561     -0.518252      -167.824       167.824       2146.03       2313.85    
  21  0.636070     -0.452447      -146.515       146.515       2282.20       2428.72    
  22  0.447294     -0.804540      -260.532       260.532       2225.97       2486.50    
  23  0.964945     -0.356839E-01  -11.5554       11.5554       2182.87       2194.43    
  24  0.752421     -0.284460      -92.1156       92.1156       2154.48       2246.60    
  25  0.705556     -0.348769      -112.941       112.941       2396.99       2509.93    
  26  0.943467     -0.581939E-01  -18.8447       18.8447       2108.39       2127.23    
  27  0.272564      -1.29988      -420.936       420.936       2157.09       2578.03    
  28  0.215815      -1.53333      -496.534       496.534       2303.66       2800.19    
  29  0.756955     -0.278452      -90.1702       90.1702       2415.49       2505.66    
  30  0.538381     -0.619189      -200.510       200.510       2217.02       2417.53    
  31  0.182967      -1.69845      -550.003       550.003       2532.40       3082.40    
  32  0.644758     -0.438881      -142.121       142.121       2328.25       2470.37    
  33  0.939477     -0.624320E-01  -20.2171       20.2171       1926.23       1946.45    
  34  0.663186     -0.410699      -132.995       132.995       2358.01       2491.00    
  35  0.795014     -0.229396      -74.2845       74.2845       2175.09       2249.38    
  36  0.630792     -0.460779      -149.213       149.213       2233.42       2382.64    
  37  0.151039      -1.89022      -612.103       612.103       2263.60       2875.71    
  38  0.668306     -0.403009      -130.505       130.505       2296.22       2426.73    
  39  0.683820     -0.380061      -123.074       123.074       2328.26       2451.33    
  40  0.122229      -2.10186      -680.637       680.637       2198.86       2879.50    
  41  0.664453     -0.408791      -132.377       132.377       2166.51       2298.89    
  42  0.548687     -0.600228      -194.370       194.370       2167.72       2362.09    
  43  0.931535     -0.709210E-01  -22.9661       22.9661       2488.88       2511.85    
  44  0.139742      -1.96796      -637.277       637.277       2193.99       2831.27    
  45  0.429142     -0.845967      -273.947       273.947       2460.50       2734.44    
  46  0.531147     -0.632717      -204.891       204.891       2502.50       2707.39    
  47  0.575558     -0.552416      -178.887       178.887       2214.01       2392.90    
  48  0.336537      -1.08905      -352.662       352.662       2313.62       2666.28    
  49  0.324486      -1.12551      -364.471       364.471       2032.93       2397.40    
  50  0.652768     -0.426534      -138.123       138.123       2173.41       2311.53    
  51  0.537860     -0.620158      -200.824       200.824       2459.97       2660.79    
  52  0.415288     -0.878782      -284.573       284.573       2163.74       2448.31    
  53  0.771827     -0.258995      -83.8696       83.8696       2680.66       2764.53    
  54  0.537995     -0.619906      -200.742       200.742       3135.91       3336.65    
  55  0.438537     -0.824310      -266.934       266.934       2650.54       2917.48    
  56  0.872114     -0.136835      -44.3107       44.3107       3010.40       3054.71    
  57  0.974519E-01  -2.32840      -753.997       753.997       2418.74       3172.74    
  58  0.245035      -1.40635      -455.415       455.415       2122.01       2577.43    
loop,thermsimp(1:2)       64   65.6298       505.487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       2122.33         68.38          1.14         38.82          0.58          0.05        108.97
Just calling func    0   0        108.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158       2291.89         68.26          1.14         38.87          0.78          0.05        109.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2122.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       64
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       65
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      157     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -324.141       324.141       1852.82       2176.96    
   2  0.298218      -1.20993      -391.808       391.808       1926.23       2318.04    
   3  0.374092     -0.983254      -318.404       318.404       2033.22       2351.62    
   4  0.417366     -0.873791      -282.957       282.957       1979.33       2262.29    
   5  0.299382      -1.20604      -390.547       390.547       2096.94       2487.49    
   6  0.373029     -0.986099      -319.325       319.325       2108.39       2427.71    
   7  0.628224     -0.464858      -150.533       150.533       2182.87       2333.41    
   8  0.111397      -2.19465      -710.687       710.687       2154.48       2865.17    
   9  0.983555     -0.165818E-01  -5.36962       5.36962       2175.09       2180.46    
  10  0.394578     -0.929938      -301.139       301.139       2083.98       2385.12    
  11  0.410639     -0.890042      -288.219       288.219       2092.91       2381.13    
  12  0.700680     -0.355705      -115.187       115.187       2166.51       2281.70    
  13  0.223946      -1.49635      -484.559       484.559       2173.41       2657.97    
  14  0.651113E-01  -2.73166      -884.583       884.583       2146.03       3030.61    
  15  0.704010     -0.350963      -113.651       113.651       2167.72       2281.38    
  16  0.172411      -1.75787      -569.246       569.246       2233.42       2802.67    
  17  0.567412     -0.566670      -183.503       183.503       2191.49       2374.99    
  18  0.186334      -1.68021      -544.098       544.098       2153.25       2697.35    
  19  0.677524     -0.389310      -126.069       126.069       2214.01       2340.08    
  20  0.362270      -1.01537      -328.802       328.802       2032.93       2361.73    
  21  0.603880     -0.504381      -163.332       163.332       2217.02       2380.35    
  22  0.782208     -0.245635      -79.5431       79.5431       2296.22       2375.76    
  23  0.129808      -2.04170      -661.157       661.157       2282.20       2943.36    
  24  0.284816      -1.25591      -406.698       406.698       2163.74       2570.43    
  25  0.246930      -1.39865      -452.920       452.920       2328.26       2781.18    
  26  0.256917      -1.35900      -440.081       440.081       2131.53       2571.62    
  27  0.240545      -1.42485      -461.404       461.404       1952.21       2413.62    
  28  0.218018      -1.52318      -493.246       493.246       2328.25       2821.49    
  29  0.235583E-01  -3.74828      -1213.79       1213.79       2225.97       3439.76    
  30  0.114660      -2.16578      -701.338       701.338       2358.01       3059.34    
  31  0.119129      -2.12755      -688.958       688.958       2415.49       3104.45    
  32  0.471707     -0.751398      -243.323       243.323       2396.99       2640.31    
  33  0.607413     -0.498546      -161.442       161.442       2488.88       2650.32    
  34  0.568731     -0.564347      -182.751       182.751       2277.30       2460.05    
  35  0.587492     -0.531893      -172.241       172.241       2122.01       2294.26    
  36  0.411259     -0.888533      -287.731       287.731       2157.09       2444.82    
  37  0.836192     -0.178897      -57.9315       57.9315       2200.82       2258.75    
  38  0.152977      -1.87747      -607.974       607.974       2459.97       3067.94    
  39  0.941831     -0.599291E-01  -19.4066       19.4066       2313.62       2333.03    
  40  0.936595     -0.655045E-01  -21.2121       21.2121       2502.50       2523.71    
  41  0.856621     -0.154759      -50.1152       50.1152       2460.50       2510.61    
  42  0.484786     -0.724047      -234.466       234.466       2316.27       2550.74    
  43  0.188261      -1.66993      -540.766       540.766       2158.84       2699.61    
  44  0.957606     -0.433189E-01  -14.0278       14.0278       2680.66       2694.69    
  45  0.234891      -1.44863      -469.106       469.106       2303.66       2772.76    
  46  0.758920     -0.275858      -89.3303       89.3303       2193.99       2283.32    
  47  0.135340      -1.99997      -647.642       647.642       2101.37       2749.01    
  48  0.779121E-01  -2.55217      -826.462       826.462       2263.60       3090.07    
  49  0.573767     -0.555531      -179.896       179.896       2198.86       2378.75    
  50  0.982512     -0.176424E-01  -5.71307       5.71307       2650.54       2656.26    
  51  0.109579      -2.21111      -716.016       716.016       2154.33       2870.34    
  52  0.714543     -0.336113      -108.842       108.842       2100.29       2209.14    
  53  0.573216     -0.556492      -180.207       180.207       2092.46       2272.67    
  54  0.389116     -0.943877      -305.653       305.653       3010.40       3316.05    
  55  0.149817      -1.89834      -614.734       614.734       2532.40       3147.14    
  56  0.623269     -0.472778      -153.098       153.098       2418.74       2571.84    
  57  0.682320E-02  -4.98743      -1615.06       1615.06       3135.91       4750.97    
  58  0.641698     -0.443637      -143.662       143.662       2122.33       2266.00    
loop,thermsimp(1:2)       65   324.141       391.808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       2742.79         68.27          1.14         38.95          0.68          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2742.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       65
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       66
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      158     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -441.920       441.920       1852.82       2294.74    
   2  0.513427E-01  -2.96923      -961.517       961.517       2175.09       3136.61    
   3  0.288453      -1.24322      -402.589       402.589       2100.29       2502.88    
   4  0.107044      -2.23452      -723.596       723.596       2200.82       2924.41    
   5  0.756779     -0.278684      -90.2452       90.2452       1979.33       2069.58    
   6  0.333762      -1.09733      -355.344       355.344       2122.33       2477.68    
   7  0.270335      -1.30809      -423.596       423.596       2092.46       2516.06    
   8  0.666278E-01  -2.70863      -877.127       877.127       2167.72       3044.85    
   9  0.517510     -0.658727      -213.313       213.313       2166.51       2379.82    
  10  0.719680     -0.328949      -106.522       106.522       2193.99       2300.51    
  11  0.401542     -0.912442      -295.473       295.473       2122.01       2417.49    
  12  0.408125     -0.896181      -290.207       290.207       1926.23       2216.44    
  13  0.481086     -0.731710      -236.947       236.947       2313.62       2550.57    
  14  0.166952E-01  -4.09263      -1325.30       1325.30       2182.87       3508.18    
  15  0.913266     -0.907286E-01  -29.3803       29.3803       2214.01       2243.39    
  16  0.972084     -0.283134E-01  -9.16864       9.16864       2033.22       2042.39    
  17  0.889421     -0.117184      -37.9474       37.9474       2032.93       2070.87    
  18  0.171754      -1.76169      -570.484       570.484       2191.49       2761.97    
  19  0.925876     -0.770155E-01  -24.9397       24.9397       2296.22       2321.16    
  20  0.992897     -0.712866E-02  -2.30845       2.30845       2198.86       2201.17    
  21  0.118575E-01  -4.43479      -1436.10       1436.10       2217.02       3653.12    
  22  0.492413     -0.708438      -229.411       229.411       2092.91       2322.32    
  23  0.952433     -0.487360E-01  -15.7820       15.7820       2083.98       2099.77    
  24  0.591826     -0.524543      -169.861       169.861       1952.21       2122.07    
  25  0.762199     -0.271548      -87.9344       87.9344       2108.39       2196.32    
  26  0.613492     -0.488588      -158.218       158.218       2157.09       2315.31    
  27  0.134863      -2.00350      -648.786       648.786       2277.30       2926.08    
  28  0.633670     -0.456227      -147.738       147.738       2096.94       2244.68    
  29  0.829625     -0.186782      -60.4849       60.4849       2460.50       2520.98    
  30  0.148219      -1.90906      -618.206       618.206       2502.50       3120.70    
  31  0.198093      -1.61902      -524.281       524.281       2316.27       2840.56    
  32  0.321318      -1.13532      -367.648       367.648       2163.74       2531.38    
  33  0.475408     -0.743582      -240.792       240.792       2131.53       2372.33    
  34  0.196520      -1.62699      -526.863       526.863       2418.74       2945.60    
  35  0.637413     -0.450337      -145.831       145.831       2396.99       2542.82    
  36  0.596751     -0.516255      -167.177       167.177       2488.88       2656.06    
  37  0.351361      -1.04594      -338.704       338.704       2650.54       2989.25    
  38  0.111764      -2.19136      -709.622       709.622       2173.41       2883.03    
  39  0.213579      -1.54375      -499.907       499.907       2680.66       3180.57    
  40  0.799647     -0.223585      -72.4029       72.4029       2153.25       2225.65    
  41  0.670682     -0.399460      -129.356       129.356       2158.84       2288.20    
  42  0.104235      -2.26111      -732.207       732.207       2101.37       2833.58    
  43  0.607160E-01  -2.80155      -907.216       907.216       2303.66       3210.87    
  44  0.462312     -0.771516      -249.837       249.837       2328.26       2578.10    
  45  0.269658      -1.31060      -424.407       424.407       2233.42       2657.83    
  46  0.678606     -0.387714      -125.552       125.552       2328.25       2453.80    
  47  0.669051     -0.401895      -130.144       130.144       2154.48       2284.63    
  48  0.551912     -0.594367      -192.472       192.472       2154.33       2346.80    
  49  0.116070E-01  -4.45614      -1443.02       1443.02       2282.20       3725.22    
  50  0.911337     -0.928428E-01  -30.0650       30.0650       2146.03       2176.09    
  51  0.302404      -1.19599      -387.293       387.293       2358.01       2745.30    
  52  0.527926     -0.638800      -206.860       206.860       2459.97       2666.83    
  53  0.204835      -1.58555      -513.443       513.443       2263.60       2777.05    
  54  0.761388     -0.272612      -88.2789       88.2789       2415.49       2503.77    
  55  0.189928      -1.66111      -537.912       537.912       2532.40       3070.31    
  56  0.423830     -0.858422      -277.980       277.980       3010.40       3288.38    
  57  0.895148     -0.110767      -35.8692       35.8692       2225.97       2261.84    
  58  0.109823      -2.20889      -715.296       715.296       2742.79       3458.09    
loop,thermsimp(1:2)       66   441.920       961.517    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160       2095.76         68.42          1.16         38.97          0.48          0.05        109.08
Just calling func    0   0        109.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161       3673.46         68.18          1.16         39.31          0.41          0.05        109.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    3673.5        3.505     -2.705      3.304     -102.6     0.6572    
                      0.2934      1.065     -99.70      4.945     0.6572    

                       2.812     -2.581      1.540      7266.      7000.    

                      -2.286      0.000      0.000      0.000     -1.221    



                      -1.962      0.000      0.000      7000.      430.7    

                      -1.536     -4.982     -6.511     -8.708      7.194    

                      -12.35     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1180     0.3859E-01 0.1289    -0.4157E-01

                     -0.2486     0.1800     0.1682     0.1131     0.1512    



                     -0.9974    -0.5327      0.000     0.8758E-01 0.1564    

                      0.1676     0.1714    -0.7116     0.6357E-01 0.3713    

                      0.1157    -0.3864E-01-0.5388     -1.443      7000.    



                      -1.239     -1.216     -2.142     -1.982    -0.3807    

                     -0.3252      9.192      8.415    -0.1691E+05 -5.924    

                     -0.4310     -2.273      8.656      9.138    -0.1969E+05



                      -6.000     0.2587    -0.5494E-01  8.789      9.062    

                     -0.1944E+05 -6.000    -0.2110    -0.2086      11.15    

                       8.868    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2095.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       66
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       67
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      160     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -392.139       392.139       2033.22       2425.36    
   2  0.840396     -0.173882      -56.3075       56.3075       1979.33       2035.64    
   3  0.165782      -1.79708      -581.943       581.943       2032.93       2614.87    
   4  0.516202E-01  -2.96384      -959.771       959.771       2083.98       3043.76    
   5  0.163201      -1.81278      -587.025       587.025       1952.21       2539.24    
   6  0.201529      -1.60182      -518.712       518.712       2146.03       2664.74    
   7  0.791805     -0.233441      -75.5943       75.5943       2108.39       2183.98    
   8  0.306466      -1.18265      -382.973       382.973       2198.86       2581.83    
   9  0.625963     -0.468465      -151.701       151.701       1926.23       2077.94    
  10  0.255827      -1.36325      -441.458       441.458       2153.25       2594.71    
  11  0.275269      -1.29001      -417.739       417.739       2214.01       2631.75    
  12  0.546374     -0.604451      -195.737       195.737       2096.94       2292.68    
  13  0.738275E-01  -2.60602      -843.900       843.900       2225.97       3069.87    
  14  0.459460     -0.777704      -251.841       251.841       2154.48       2406.33    
  15  0.245891      -1.40287      -454.285       454.285       2158.84       2613.13    
  16  0.818144E-01  -2.50330      -810.636       810.636       1852.82       2663.46    
  17  0.791963     -0.233241      -75.5297       75.5297       2193.99       2269.52    
  18  0.652560     -0.426852      -138.226       138.226       2157.09       2295.32    
  19  0.743237     -0.296740      -96.0922       96.0922       2296.22       2392.31    
  20  0.146095      -1.92350      -622.880       622.880       2092.91       2715.79    
  21  0.747148     -0.291492      -94.3930       94.3930       2154.33       2248.72    
  22  0.935024E-01  -2.36977      -767.394       767.394       2131.53       2898.93    
  23  0.924202     -0.788243E-01  -25.5254       25.5254       2166.51       2192.04    
  24  0.193934      -1.64024      -531.153       531.153       2122.01       2653.17    
  25  0.112499      -2.18481      -707.499       707.499       2328.25       3035.75    
  26  0.609079     -0.495807      -160.556       160.556       2122.33       2282.89    
  27  0.387822     -0.947210      -306.732       306.732       2100.29       2407.03    
  28  0.151976      -1.88403      -610.101       610.101       2415.49       3025.59    
  29  0.820125     -0.198299      -64.2144       64.2144       2092.46       2156.68    
  30  0.100865      -2.29397      -742.849       742.849       2460.50       3203.35    
  31  0.246930      -1.39865      -452.920       452.920       2163.74       2616.66    
  32  0.101973      -2.28305      -739.311       739.311       2396.99       3136.30    
  33  0.389401     -0.943145      -305.416       305.416       2313.62       2619.04    
  34  0.573635     -0.555762      -179.970       179.970       2328.26       2508.23    
  35  0.730896E-01  -2.61607      -847.153       847.153       2488.88       3336.03    
  36  0.260104      -1.34667      -436.088       436.088       2233.42       2669.51    
  37  0.562102     -0.576073      -186.548       186.548       2459.97       2646.51    
  38  0.159056      -1.83850      -595.355       595.355       2358.01       2953.36    
  39  0.779134E-02  -4.85474      -1572.09       1572.09       2191.49       3763.59    
  40  0.693208     -0.366425      -118.658       118.658       2263.60       2382.26    
  41  0.600279     -0.510361      -165.269       165.269       2101.37       2266.64    
  42  0.419387     -0.868962      -281.393       281.393       2316.27       2597.67    
  43  0.952036     -0.491524E-01  -15.9169       15.9169       2173.41       2189.33    
  44  0.613955     -0.487834      -157.973       157.973       2200.82       2358.79    
  45  0.842752     -0.171082      -55.4011       55.4011       2277.30       2332.70    
  46  0.733219     -0.310311      -100.487       100.487       2418.74       2519.23    
  47  0.776088     -0.253489      -82.0866       82.0866       2650.54       2732.63    
  48  0.965215     -0.354047E-01  -11.4650       11.4650       2167.72       2179.19    
  49  0.487812     -0.717826      -232.451       232.451       2532.40       2764.85    
  50  0.864492     -0.145613      -47.1533       47.1533       2502.50       2549.65    
  51  0.334607      -1.09480      -354.525       354.525       2175.09       2529.62    
  52  0.267438      -1.31887      -427.084       427.084       2680.66       3107.75    
  53  0.333561      -1.09793      -355.539       355.539       2303.66       2659.20    
  54  0.593184     -0.522250      -169.118       169.118       3010.40       3179.52    
  55  0.832475     -0.183352      -59.3744       59.3744       2742.79       2802.17    
  56  0.642050     -0.443089      -143.484       143.484       2182.87       2326.36    
  57  0.799223     -0.224116      -72.5746       72.5746       2217.02       2289.59    
  58  0.184219      -1.69163      -547.795       547.795       2095.76       2643.56    
loop,thermsimp(1:2)       67   392.139       56.3075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162       2011.14         68.42          1.26         39.09          0.17          0.04        108.98
Just calling func    0   0        108.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    163       2051.86         68.20          1.22         39.04          0.55          0.05        109.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2011.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       67
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       68
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      162     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -1509.84       1509.84       1979.33       3489.17    
   2  0.714357     -0.336373      -108.927       108.927       1926.23       2035.16    
   3  0.997096     -0.290808E-02 -0.941715      0.941715       2092.46       2093.40    
   4  0.905437     -0.993373E-01  -32.1681       32.1681       2167.72       2199.89    
   5  0.307060      -1.18071      -382.346       382.346       2108.39       2490.74    
   6  0.179061      -1.72003      -556.990       556.990       2173.41       2730.40    
   7  0.384312     -0.956301      -309.676       309.676       2166.51       2476.19    
   8  0.901101     -0.104138      -33.7228       33.7228       2154.33       2188.05    
   9  0.606170     -0.500594      -162.106       162.106       2101.37       2263.48    
  10  0.515234     -0.663133      -214.740       214.740       2193.99       2408.73    
  11  0.639447     -0.447152      -144.800       144.800       2122.33       2267.13    
  12  0.820429     -0.197928      -64.0942       64.0942       2217.02       2281.11    
  13  0.521739     -0.650587      -210.677       210.677       2096.94       2307.62    
  14  0.767979     -0.263993      -85.4879       85.4879       2157.09       2242.58    
  15  0.530366     -0.634187      -205.367       205.367       2182.87       2388.24    
  16  0.732471     -0.311332      -100.818       100.818       2277.30       2378.12    
  17  0.440461     -0.819933      -265.516       265.516       2200.82       2466.33    
  18  0.595715     -0.517993      -167.740       167.740       2263.60       2431.34    
  19  0.407958     -0.896592      -290.340       290.340       2296.22       2586.56    
  20  0.544683     -0.607550      -196.741       196.741       2154.48       2351.23    
  21  0.611386E-01  -2.79461      -904.970       904.970       2100.29       3005.26    
  22  0.135041      -2.00218      -648.358       648.358       2033.22       2681.58    
  23  0.547242     -0.602864      -195.223       195.223       2328.26       2523.48    
  24  0.214436      -1.53975      -498.611       498.611       2418.74       2917.35    
  25  0.340220      -1.07816      -349.138       349.138       2175.09       2524.23    
  26  0.270394      -1.30787      -423.524       423.524       1952.21       2375.74    
  27  0.605229     -0.502149      -162.609       162.609       2502.50       2665.11    
  28  0.630206     -0.461709      -149.514       149.514       2198.86       2348.37    
  29  0.942476     -0.592449E-01  -19.1851       19.1851       2153.25       2172.44    
  30  0.293125      -1.22716      -397.386       397.386       2316.27       2713.66    
  31  0.526210     -0.642056      -207.915       207.915       2158.84       2366.75    
  32  0.972201     -0.281927E-01  -9.12953       9.12953       2032.93       2042.06    
  33  0.570000     -0.562119      -182.029       182.029       2163.74       2345.76    
  34  0.752945     -0.283763      -91.8901       91.8901       2313.62       2405.51    
  35  0.333005      -1.09960      -356.079       356.079       2214.01       2570.09    
  36  0.430444     -0.842939      -272.966       272.966       2095.76       2368.73    
  37  0.106505      -2.23957      -725.231       725.231       2459.97       3185.20    
  38  0.327953      -1.11488      -361.029       361.029       2122.01       2483.04    
  39  0.586631     -0.533359      -172.716       172.716       2303.66       2476.37    
  40  0.563274     -0.573989      -185.873       185.873       1852.82       2038.69    
  41  0.802100     -0.220522      -71.4108       71.4108       2146.03       2217.44    
  42  0.594871     -0.519411      -168.199       168.199       2233.42       2401.62    
  43  0.816066     -0.203261      -65.8212       65.8212       2092.91       2158.73    
  44  0.170795E-01  -4.06987      -1317.93       1317.93       2650.54       3968.48    
  45  0.554958     -0.588864      -190.690       190.690       2532.40       2723.09    
  46  0.674023     -0.394492      -127.747       127.747       2742.79       2870.54    
  47  0.371758     -0.989512      -320.430       320.430       2131.53       2451.96    
  48  0.309440      -1.17299      -379.846       379.846       2358.01       2737.85    
  49  0.182337      -1.70190      -551.120       551.120       2415.49       2966.61    
  50  0.443504     -0.813049      -263.287       263.287       2328.25       2591.53    
  51  0.407824     -0.896918      -290.446       290.446       2083.98       2374.43    
  52  0.140254      -1.96430      -636.092       636.092       2225.97       2862.06    
  53  0.801043     -0.221840      -71.8378       71.8378       2680.66       2752.50    
  54  0.922923     -0.802099E-01  -25.9741       25.9741       2396.99       2422.96    
  55  0.982391     -0.177663E-01  -5.75319       5.75319       3010.40       3016.15    
  56  0.830509     -0.185717      -60.1401       60.1401       2460.50       2520.64    
  57  0.459056     -0.778583      -252.126       252.126       2488.88       2741.01    
  58  0.918078     -0.854734E-01  -27.6786       27.6786       2011.14       2038.82    
loop,thermsimp(1:2)       68   1509.84       108.927    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164       3630.83         67.99          1.16         39.31          0.41          0.05        108.93
Just calling func    0   0        108.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   3630.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       68
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       69
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      163     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -211.107       211.107       1926.23       2137.34    
   2  0.554375     -0.589913      -191.030       191.030       1852.82       2043.85    
   3  0.404373     -0.905418      -293.198       293.198       2011.14       2304.34    
   4  0.632877     -0.457478      -148.144       148.144       2032.93       2181.07    
   5  0.395261     -0.928209      -300.579       300.579       2092.46       2393.04    
   6  0.715068     -0.335378      -108.604       108.604       2092.91       2201.52    
   7  0.918313     -0.852174E-01  -27.5957       27.5957       2153.25       2180.85    
   8  0.529514E-01  -2.93838      -951.526       951.526       2154.33       3105.85    
   9  0.284219      -1.25801      -407.377       407.377       2167.72       2575.10    
  10  0.809402     -0.211460      -68.4764       68.4764       2146.03       2214.51    
  11  0.604758     -0.502928      -162.861       162.861       2157.09       2319.95    
  12  0.624772     -0.470369      -152.318       152.318       2101.37       2253.69    
  13  0.622683     -0.473718      -153.403       153.403       2122.33       2275.74    
  14  0.491656     -0.709976      -229.909       229.909       2217.02       2446.93    
  15  0.823484     -0.194211      -62.8906       62.8906       2096.94       2159.83    
  16  0.185629E-01  -3.98659      -1290.96       1290.96       2163.74       3454.70    
  17  0.911253     -0.929346E-01  -30.0947       30.0947       2198.86       2228.95    
  18  0.825116     -0.192231      -62.2496       62.2496       2154.48       2216.73    
  19  0.902913     -0.102129      -33.0722       33.0722       2158.84       2191.91    
  20  0.869925     -0.139348      -45.1247       45.1247       2095.76       2140.88    
  21  0.135445      -1.99919      -647.391       647.391       2083.98       2731.38    
  22  0.516840     -0.660022      -213.733       213.733       1952.21       2165.95    
  23  0.127583      -2.05899      -666.756       666.756       2277.30       2944.05    
  24  0.237062E-01  -3.74202      -1211.77       1211.77       2182.87       3394.64    
  25  0.456233     -0.784753      -254.124       254.124       2233.42       2487.55    
  26  0.547397     -0.602581      -195.132       195.132       2313.62       2508.75    
  27  0.231746E-02  -6.06728      -1964.75       1964.75       2193.99       4158.74    
  28  0.467213     -0.760969      -246.422       246.422       2396.99       2643.41    
  29  0.397333     -0.922981      -298.886       298.886       2263.60       2562.49    
  30  0.291343      -1.23325      -399.360       399.360       2131.53       2530.89    
  31  0.964262     -0.363922E-01  -11.7848       11.7848       2200.82       2212.60    
  32  0.260485      -1.34521      -435.614       435.614       2166.51       2602.12    
  33  0.868574     -0.140902      -45.6279       45.6279       2303.66       2349.29    
  34  0.832573     -0.183235      -59.3363       59.3363       2122.01       2181.35    
  35  0.240383      -1.42552      -461.622       461.622       2108.39       2570.01    
  36  0.878342     -0.129719      -42.0064       42.0064       2460.50       2502.50    
  37  0.168707      -1.77959      -576.280       576.280       2328.26       2904.54    
  38  0.348015      -1.05551      -341.802       341.802       2175.09       2516.89    
  39  0.846224     -0.166971      -54.0698       54.0698       2214.01       2268.08    
  40  0.842580     -0.171286      -55.4670       55.4670       2296.22       2351.69    
  41  0.230401      -1.46794      -475.357       475.357       2328.25       2803.60    
  42  0.441962     -0.816531      -264.414       264.414       2502.50       2766.91    
  43  0.772036     -0.258724      -83.7818       83.7818       2033.22       2117.00    
  44  0.970063     -0.303946E-01  -9.84257       9.84257       2316.27       2326.12    
  45  0.610535     -0.493419      -159.782       159.782       2532.40       2692.18    
  46  0.548201     -0.601114      -194.657       194.657       2173.41       2368.07    
  47  0.322533      -1.13155      -366.426       366.426       2358.01       2724.43    
  48  0.194318E-01  -3.94084      -1276.15       1276.15       2488.88       3765.03    
  49  0.219930      -1.51445      -490.418       490.418       2680.66       3171.08    
  50  0.538995E-01  -2.92063      -945.779       945.779       2225.97       3171.75    
  51  0.189941      -1.66104      -537.889       537.889       2742.79       3280.68    
  52  0.339787      -1.07944      -349.551       349.551       2418.74       2768.29    
  53  0.783417     -0.244091      -79.0430       79.0430       2415.49       2494.54    
  54  0.347888      -1.05587      -341.920       341.920       2100.29       2442.21    
  55  0.511342     -0.670716      -217.196       217.196       3010.40       3227.59    
  56  0.656791     -0.420389      -136.133       136.133       2459.97       2596.10    
  57  0.433072E-01  -3.13944      -1016.63       1016.63       1979.33       2995.96    
  58  0.940019     -0.618557E-01  -20.0305       20.0305       3630.83       3650.86    
loop,thermsimp(1:2)       69   211.107       191.030    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       1936.51         68.45          1.15         38.84          0.75          0.05        109.23
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166       1917.25         68.45          1.14         38.87          0.67          0.05        109.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1917.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       69
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       70
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      165     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -459.214       459.214       1852.82       2312.03    
   2  0.384023     -0.957054      -309.920       309.920       2033.22       2343.14    
   3  0.672379     -0.396933      -128.537       128.537       1926.23       2054.77    
   4  0.204591      -1.58674      -513.829       513.829       2095.76       2609.59    
   5  0.145151      -1.92998      -624.978       624.978       2096.94       2721.92    
   6  0.235757      -1.44495      -467.914       467.914       1952.21       2420.13    
   7  0.882595     -0.124889      -40.4424       40.4424       2153.25       2193.69    
   8  0.215562      -1.53451      -496.914       496.914       2032.93       2529.84    
   9  0.248905      -1.39068      -450.340       450.340       2122.01       2572.35    
  10  0.695481     -0.363152      -117.598       117.598       2158.84       2276.44    
  11  0.515786     -0.662063      -214.394       214.394       2092.91       2307.31    
  12  0.956817     -0.441428E-01  -14.2946       14.2946       2200.82       2215.11    
  13  0.256477      -1.36072      -440.636       440.636       2146.03       2586.67    
  14  0.870409     -0.138792      -44.9446       44.9446       2154.48       2199.43    
  15  0.296335      -1.21627      -393.859       393.859       2198.86       2592.72    
  16  0.563087     -0.574322      -185.981       185.981       2101.37       2287.35    
  17  0.860973     -0.149692      -48.4742       48.4742       2214.01       2262.49    
  18  0.336353      -1.08959      -352.839       352.839       2122.33       2475.17    
  19  0.432238     -0.838780      -271.619       271.619       2011.14       2282.76    
  20  0.411587     -0.887734      -287.472       287.472       2157.09       2444.56    
  21  0.685679     -0.377346      -122.195       122.195       2316.27       2438.47    
  22  0.178038E-01  -4.02835      -1304.49       1304.49       2303.66       3608.14    
  23  0.330516      -1.10710      -358.509       358.509       2296.22       2654.73    
  24  0.987115     -0.129685E-01  -4.19953       4.19953       2173.41       2177.61    
  25  0.702947     -0.352474      -114.140       114.140       2092.46       2206.60    
  26  0.159040      -1.83860      -595.387       595.387       2100.29       2695.68    
  27  0.329714      -1.10953      -359.296       359.296       2217.02       2576.31    
  28  0.542452     -0.611656      -198.071       198.071       2233.42       2431.49    
  29  0.484074     -0.725518      -234.942       234.942       2415.49       2650.44    
  30  0.574330     -0.554551      -179.578       179.578       2460.50       2640.07    
  31  0.987944     -0.121288E-01  -3.92764       3.92764       2313.62       2317.55    
  32  0.565195E-01  -2.87317      -930.409       930.409       2175.09       3105.50    
  33  0.662626     -0.411545      -133.269       133.269       2131.53       2264.80    
  34  0.462195     -0.771769      -249.919       249.919       2263.60       2513.52    
  35  0.413957     -0.881994      -285.613       285.613       2108.39       2394.00    
  36  0.627825     -0.465493      -150.739       150.739       2167.72       2318.46    
  37  0.373783E-01  -3.28667      -1064.31       1064.31       2459.97       3524.28    
  38  0.318481      -1.14419      -370.520       370.520       2166.51       2537.03    
  39  0.193037      -1.64487      -532.654       532.654       2396.99       2929.64    
  40  0.246573      -1.40010      -453.389       453.389       2532.40       2985.79    
  41  0.913643     -0.903152E-01  -29.2465       29.2465       2358.01       2387.25    
  42  0.593287     -0.522077      -169.062       169.062       2083.98       2253.05    
  43  0.323913      -1.12728      -365.043       365.043       2502.50       2867.54    
  44  0.270579E-01  -3.60978      -1168.94       1168.94       2418.74       3587.68    
  45  0.684823     -0.378595      -122.599       122.599       2328.25       2450.85    
  46  0.279340      -1.27532      -412.984       412.984       2328.26       2741.24    
  47  0.285511      -1.25348      -405.909       405.909       2277.30       2683.21    
  48  0.361874      -1.01646      -329.156       329.156       1979.33       2308.49    
  49  0.779291     -0.249370      -80.7528       80.7528       2154.33       2235.08    
  50  0.590933     -0.526053      -170.350       170.350       2680.66       2851.01    
  51  0.493821E-01  -3.00817      -974.124       974.124       2225.97       3200.10    
  52  0.736348     -0.306053      -99.1081       99.1081       3010.40       3109.51    
  53  0.300670      -1.20174      -389.156       389.156       2742.79       3131.95    
  54  0.329072      -1.11148      -359.926       359.926       2182.87       2542.80    
  55  0.238483      -1.43346      -464.191       464.191       2163.74       2627.93    
  56  0.296796      -1.21471      -393.355       393.355       3630.83       4024.18    
  57  0.878745     -0.129261      -41.8581       41.8581       2488.88       2530.74    
  58  0.493874     -0.705475      -228.452       228.452       1917.25       2145.70    
loop,thermsimp(1:2)       70   459.214       309.920    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       2667.43         68.36          1.16         39.01          0.45          0.05        109.02
Just calling func    0   0        109.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2667.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       70
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       71
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      166     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -68.1150       68.1150       1926.23       1994.35    
   2  0.601567     -0.508218      -164.574       164.574       1917.25       2081.83    
   3  0.190401      -1.65862      -537.106       537.106       2173.41       2710.52    
   4  0.827263     -0.189632      -61.4079       61.4079       2153.25       2214.66    
   5  0.581677     -0.541840      -175.462       175.462       2154.48       2329.95    
   6  0.680336     -0.385169      -124.728       124.728       2092.46       2217.19    
   7  0.641383     -0.444128      -143.821       143.821       2200.82       2344.64    
   8  0.593931     -0.520992      -168.711       168.711       2154.33       2323.04    
   9  0.326400      -1.11963      -362.567       362.567       2083.98       2446.55    
  10  0.964323     -0.363286E-01  -11.7642       11.7642       2214.01       2225.78    
  11  0.481751     -0.730328      -236.500       236.500       2131.53       2368.03    
  12  0.230624E-01  -3.76955      -1220.68       1220.68       2158.84       3379.52    
  13  0.214859      -1.53777      -497.972       497.972       2011.14       2509.11    
  14  0.325804      -1.12146      -363.158       363.158       2101.37       2464.53    
  15  0.668745     -0.402353      -130.293       130.293       2092.91       2223.21    
  16  0.803263     -0.219073      -70.9416       70.9416       1979.33       2050.27    
  17  0.465531     -0.764577      -247.590       247.590       1852.82       2100.41    
  18  0.589796     -0.527978      -170.973       170.973       2313.62       2484.60    
  19  0.783335     -0.244195      -79.0769       79.0769       2167.72       2246.80    
  20  0.937099     -0.649659E-01  -21.0377       21.0377       2033.22       2054.26    
  21  0.504081     -0.685019      -221.827       221.827       2358.01       2579.83    
  22  0.368431E-01  -3.30109      -1068.98       1068.98       2108.39       3177.37    
  23  0.462712     -0.770651      -249.557       249.557       1952.21       2201.77    
  24  0.172447      -1.75767      -569.179       569.179       2233.42       2802.60    
  25  0.361979      -1.01617      -329.063       329.063       2316.27       2645.34    
  26  0.616189     -0.484202      -156.798       156.798       2157.09       2313.89    
  27  0.495582     -0.702023      -227.334       227.334       2328.25       2555.58    
  28  0.492859     -0.707532      -229.118       229.118       2122.33       2351.45    
  29  0.189027      -1.66586      -539.451       539.451       2263.60       2803.06    
  30  0.336237      -1.08994      -352.951       352.951       2032.93       2385.88    
  31  0.997382     -0.262184E-02 -0.849020      0.849020       2488.88       2489.73    
  32  0.629287     -0.463168      -149.986       149.986       2166.51       2316.50    
  33  0.226178      -1.48644      -481.347       481.347       2182.87       2664.22    
  34  0.522315     -0.649483      -210.320       210.320       2122.01       2332.33    
  35  0.238835E-02  -6.03715      -1954.99       1954.99       2217.02       4172.01    
  36  0.123092E-01  -4.39741      -1424.00       1424.00       2146.03       3570.03    
  37  0.488141     -0.717152      -232.233       232.233       2198.86       2431.09    
  38  0.925188     -0.777584E-01  -25.1802       25.1802       2095.76       2120.94    
  39  0.676413     -0.390952      -126.601       126.601       2163.74       2290.34    
  40  0.638827     -0.448121      -145.114       145.114       2460.50       2605.61    
  41  0.789998     -0.235725      -76.3340       76.3340       2415.49       2491.83    
  42  0.453703E-01  -3.09290      -1001.56       1001.56       2296.22       3297.78    
  43  0.866893     -0.142840      -46.2554       46.2554       2277.30       2323.55    
  44  0.122493E-01  -4.40228      -1425.58       1425.58       2100.29       3525.87    
  45  0.172311      -1.75846      -569.435       569.435       2096.94       2666.38    
  46  0.899580     -0.105827      -34.2695       34.2695       2328.26       2362.53    
  47  0.857845     -0.153332      -49.6530       49.6530       2680.66       2730.32    
  48  0.176813      -1.73266      -561.082       561.082       2502.50       3063.58    
  49  0.795271E-01  -2.53166      -819.818       819.818       2396.99       3216.81    
  50  0.461368     -0.773559      -250.499       250.499       2532.40       2782.90    
  51  0.727625     -0.317970      -102.967       102.967       2175.09       2278.06    
  52  0.106879      -2.23606      -724.096       724.096       3010.40       3734.49    
  53  0.169411      -1.77543      -574.930       574.930       2742.79       3317.72    
  54  0.150923      -1.89099      -612.352       612.352       2225.97       2838.32    
  55  0.970144     -0.303104E-01  -9.81532       9.81532       2459.97       2469.78    
  56  0.819386     -0.199200      -64.5062       64.5062       2418.74       2483.25    
  57  0.855509     -0.156059      -50.5361       50.5361       2303.66       2354.19    
  58  0.248182      -1.39359      -451.282       451.282       2667.43       3118.71    
loop,thermsimp(1:2)       71   68.1150       164.574    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168       2144.75         68.34          1.13         38.81          0.70          0.05        109.03
Just calling func    0   0        109.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169       2588.06         68.33          1.14         39.22          0.32          0.05        109.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2144.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       71
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       72
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      168     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -44.9740       44.9740       1926.23       1971.21    
   2  0.470451     -0.754063      -244.186       244.186       1979.33       2223.52    
   3  0.615627     -0.485114      -157.093       157.093       2033.22       2190.31    
   4  0.291899      -1.23135      -398.743       398.743       1917.25       2316.00    
   5  0.584822     -0.536448      -173.716       173.716       1852.82       2026.54    
   6  0.681731     -0.383120      -124.065       124.065       2095.76       2219.82    
   7  0.680149     -0.385444      -124.817       124.817       1952.21       2077.03    
   8  0.560478     -0.578966      -187.485       187.485       2153.25       2340.74    
   9  0.392299     -0.935730      -303.014       303.014       2092.46       2395.48    
  10  0.586793     -0.533083      -172.626       172.626       2092.91       2265.54    
  11  0.461418     -0.773452      -250.464       250.464       2214.01       2464.48    
  12  0.142886      -1.94571      -630.073       630.073       2167.72       2797.80    
  13  0.960325     -0.404831E-01  -13.1095       13.1095       2175.09       2188.20    
  14  0.547176     -0.602984      -195.262       195.262       2163.74       2359.00    
  15  0.817596     -0.201386      -65.2143       65.2143       2157.09       2222.30    
  16  0.184065      -1.69247      -548.066       548.066       2166.51       2714.58    
  17  0.763954     -0.269247      -87.1894       87.1894       2154.33       2241.52    
  18  0.740640     -0.300240      -97.2257       97.2257       2277.30       2374.52    
  19  0.257299      -1.35751      -439.599       439.599       2154.48       2594.08    
  20  0.274950      -1.29117      -418.114       418.114       2122.01       2540.13    
  21  0.850599     -0.161814      -52.3997       52.3997       2200.82       2253.22    
  22  0.265651      -1.32557      -429.256       429.256       2122.33       2551.59    
  23  0.388810     -0.944665      -305.908       305.908       2303.66       2609.57    
  24  0.921262     -0.820106E-01  -26.5572       26.5572       2328.26       2354.82    
  25  0.622168     -0.474545      -153.670       153.670       2131.53       2285.20    
  26  0.831499     -0.184526      -59.7543       59.7543       2032.93       2092.68    
  27  0.777776     -0.251317      -81.3831       81.3831       2198.86       2280.24    
  28  0.519638     -0.654624      -211.985       211.985       2083.98       2295.97    
  29  0.343480      -1.06863      -346.050       346.050       2101.37       2447.42    
  30  0.379182     -0.969738      -314.027       314.027       2459.97       2773.99    
  31  0.509964     -0.673415      -218.070       218.070       2418.74       2636.81    
  32  0.457294E-01  -3.08501      -999.009       999.009       2313.62       3312.63    
  33  0.952238     -0.489400E-01  -15.8481       15.8481       2488.88       2504.73    
  34  0.198116      -1.61890      -524.243       524.243       2415.49       2939.74    
  35  0.863922     -0.146273      -47.3672       47.3672       2011.14       2058.51    
  36  0.765944     -0.266646      -86.3471       86.3471       2328.25       2414.59    
  37  0.849389     -0.163238      -52.8609       52.8609       2358.01       2410.87    
  38  0.488339     -0.716745      -232.101       232.101       2460.50       2692.60    
  39  0.969632     -0.308388E-01  -9.98643       9.98643       2316.27       2326.26    
  40  0.971690     -0.287184E-01  -9.29977       9.29977       2182.87       2192.17    
  41  0.690522     -0.370307      -119.915       119.915       2096.94       2216.86    
  42  0.266028      -1.32415      -428.796       428.796       2173.41       2602.21    
  43  0.581296     -0.542495      -175.674       175.674       2680.66       2856.34    
  44  0.636654     -0.451529      -146.217       146.217       2532.40       2678.62    
  45  0.947680     -0.537383E-01  -17.4019       17.4019       2233.42       2250.83    
  46  0.792806     -0.232176      -75.1849       75.1849       2263.60       2338.79    
  47  0.420588     -0.866101      -280.467       280.467       2225.97       2506.44    
  48  0.780043     -0.248407      -80.4407       80.4407       2502.50       2582.94    
  49  0.834700E-01  -2.48327      -804.148       804.148       2667.43       3471.57    
  50  0.707823     -0.345562      -111.902       111.902       2108.39       2220.29    
  51  0.836500     -0.178529      -57.8125       57.8125       2396.99       2454.80    
  52  0.111614      -2.19271      -710.056       710.056       2296.22       3006.28    
  53  0.690314     -0.370608      -120.013       120.013       2742.79       2862.81    
  54  0.200139      -1.60874      -520.954       520.954       2158.84       2679.79    
  55  0.182543E-01  -4.00336      -1296.39       1296.39       2100.29       3396.69    
  56  0.248611      -1.39187      -450.724       450.724       2146.03       2596.75    
  57  0.951106     -0.501293E-01  -16.2332       16.2332       3010.40       3026.63    
  58  0.576942     -0.550013      -178.109       178.109       2144.75       2322.86    
loop,thermsimp(1:2)       72   44.9740       244.186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170       3691.22         68.23          1.10         38.97          0.61          0.05        108.97
Just calling func    0   0        108.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171       2216.95         68.31          1.26         39.52          0.01          0.05        109.14
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2216.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       72
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       73
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      170     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -96.6714       96.6714       1926.23       2022.91    
   2  0.823468     -0.194230      -62.8969       62.8969       1852.82       1915.72    
   3  0.352913      -1.04153      -337.277       337.277       2011.14       2348.42    
   4  0.268511      -1.31486      -425.788       425.788       1952.21       2378.00    
   5  0.137541      -1.98383      -642.418       642.418       2032.93       2675.34    
   6  0.953738     -0.473661E-01  -15.3384       15.3384       2175.09       2190.43    
   7  0.366602      -1.00348      -324.953       324.953       2033.22       2358.17    
   8  0.861530     -0.149046      -48.2650       48.2650       2182.87       2231.14    
   9  0.190086      -1.66028      -537.642       537.642       2096.94       2634.59    
  10  0.931621     -0.708293E-01  -22.9364       22.9364       2095.76       2118.70    
  11  0.135562      -1.99833      -647.112       647.112       2108.39       2755.50    
  12  0.577052     -0.549824      -178.048       178.048       2157.09       2335.14    
  13  0.937511     -0.645266E-01  -20.8954       20.8954       1979.33       2000.23    
  14  0.836727     -0.178258      -57.7246       57.7246       2154.33       2212.05    
  15  0.124731      -2.08159      -674.075       674.075       2233.42       2907.50    
  16  0.830758     -0.185417      -60.0430       60.0430       2200.82       2260.86    
  17  0.925849     -0.770442E-01  -24.9490       24.9490       2092.91       2117.86    
  18  0.945668     -0.558633E-01  -18.0900       18.0900       2198.86       2216.95    
  19  0.700762     -0.355587      -115.149       115.149       2131.53       2246.68    
  20  0.585168E-01  -2.83844      -919.163       919.163       2083.98       3003.15    
  21  0.241985      -1.41888      -459.471       459.471       1917.25       2376.72    
  22  0.426115     -0.853047      -276.239       276.239       2144.75       2420.99    
  23  0.730656     -0.313813      -101.621       101.621       2316.27       2417.89    
  24  0.227460      -1.48078      -479.517       479.517       2263.60       2743.12    
  25  0.824070     -0.193500      -62.6604       62.6604       2153.25       2215.91    
  26  0.912829     -0.912064E-01  -29.5351       29.5351       2328.26       2357.80    
  27  0.130860      -2.03363      -658.543       658.543       2163.74       2822.28    
  28  0.126999      -2.06358      -668.241       668.241       2277.30       2945.54    
  29  0.394828E-01  -3.23189      -1046.57       1046.57       2092.46       3139.03    
  30  0.927793     -0.749466E-01  -24.2697       24.2697       2358.01       2382.28    
  31  0.161762      -1.82163      -589.892       589.892       2328.25       2918.14    
  32  0.510374     -0.672611      -217.809       217.809       2101.37       2319.18    
  33  0.930607     -0.719186E-01  -23.2892       23.2892       2396.99       2420.28    
  34  0.825283E-01  -2.49461      -807.822       807.822       2214.01       3021.83    
  35  0.569143     -0.563624      -182.516       182.516       2488.88       2671.40    
  36  0.732951     -0.310676      -100.605       100.605       2225.97       2326.58    
  37  0.554950     -0.588877      -190.694       190.694       2122.01       2312.71    
  38  0.614368     -0.487160      -157.756       157.756       2122.33       2280.09    
  39  0.127889      -2.05659      -665.980       665.980       2502.50       3168.48    
  40  0.510007     -0.673330      -218.042       218.042       2154.48       2372.53    
  41  0.206107      -1.57936      -511.439       511.439       2146.03       2657.47    
  42  0.812962E-01  -2.50966      -812.693       812.693       2173.41       2986.11    
  43  0.711913     -0.339799      -110.036       110.036       2303.66       2413.69    
  44  0.649899     -0.430939      -139.549       139.549       2418.74       2558.29    
  45  0.102708      -2.27587      -736.986       736.986       2532.40       3269.39    
  46  0.152702      -1.87927      -608.557       608.557       2158.84       2767.40    
  47  0.827734     -0.189064      -61.2239       61.2239       2460.50       2521.72    
  48  0.558329     -0.582808      -188.729       188.729       2166.51       2355.24    
  49  0.174746      -1.74442      -564.891       564.891       2459.97       3024.86    
  50  0.107247      -2.23262      -722.983       722.983       2167.72       2890.71    
  51  0.988891     -0.111711E-01  -3.61749       3.61749       2680.66       2684.28    
  52  0.388651     -0.945075      -306.040       306.040       2742.79       3048.83    
  53  0.580190     -0.544399      -176.291       176.291       2415.49       2591.78    
  54  0.519409E-01  -2.95765      -957.765       957.765       2296.22       3253.99    
  55  0.418368     -0.871393      -282.180       282.180       3010.40       3292.58    
  56  0.435950     -0.830228      -268.850       268.850       2313.62       2582.47    
  57  0.226091      -1.48682      -481.471       481.471       2100.29       2581.77    
  58  0.371316     -0.990702      -320.816       320.816       2216.95       2537.77    
loop,thermsimp(1:2)       73   96.6714       62.8969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172       2343.10         68.31          1.23         39.20          0.38          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2343.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       73
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       74
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      172
neval,tstepnext:      171     172

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -58.0216       58.0216       1852.82       1910.84    
   2  0.439366     -0.822423      -266.322       266.322       1979.33       2245.65    
   3  0.603094     -0.505682      -163.753       163.753       1926.23       2089.99    
   4  0.695854E-01  -2.66520      -863.063       863.063       2092.91       2955.98    
   5  0.273021      -1.29821      -420.394       420.394       2095.76       2516.15    
   6  0.418319     -0.871511      -282.218       282.218       2175.09       2457.31    
   7  0.688437     -0.373331      -120.895       120.895       2154.33       2275.22    
   8  0.400930     -0.913969      -295.967       295.967       2153.25       2449.22    
   9  0.569492     -0.563010      -182.318       182.318       2198.86       2381.18    
  10  0.812441     -0.207712      -67.2626       67.2626       2182.87       2250.14    
  11  0.222094      -1.50465      -487.247       487.247       2131.53       2618.78    
  12  0.695761     -0.362749      -117.468       117.468       2200.82       2318.29    
  13  0.909536E-01  -2.39741      -776.344       776.344       2122.33       2898.68    
  14  0.297191      -1.21338      -392.924       392.924       2122.01       2514.94    
  15  0.806729     -0.214767      -69.5474       69.5474       2101.37       2170.92    
  16  0.407021     -0.898891      -291.085       291.085       2225.97       2517.06    
  17  0.520426     -0.653107      -211.494       211.494       2157.09       2368.58    
  18  0.826852     -0.190129      -61.5689       61.5689       2011.14       2072.71    
  19  0.729268     -0.315714      -102.237       102.237       2166.51       2268.75    
  20  0.344086      -1.06687      -345.479       345.479       2328.26       2673.74    
  21  0.280849      -1.26994      -411.240       411.240       2033.22       2444.46    
  22  0.301244E-01  -3.50242      -1134.18       1134.18       2154.48       3288.66    
  23  0.503253     -0.686663      -222.360       222.360       1917.25       2139.61    
  24  0.549007     -0.599644      -194.181       194.181       1952.21       2146.39    
  25  0.814230     -0.205513      -66.5505       66.5505       2358.01       2424.56    
  26  0.641489     -0.443963      -143.767       143.767       2303.66       2447.43    
  27  0.248696      -1.39152      -450.612       450.612       2316.27       2766.89    
  28  0.684472     -0.379107      -122.765       122.765       2396.99       2519.75    
  29  0.815126     -0.204413      -66.1942       66.1942       2144.75       2210.94    
  30  0.388210     -0.946208      -306.407       306.407       2460.50       2766.90    
  31  0.670538     -0.399675      -129.425       129.425       2216.95       2346.38    
  32  0.851104     -0.161221      -52.2076       52.2076       2418.74       2470.95    
  33  0.381078     -0.964752      -312.412       312.412       2100.29       2412.71    
  34  0.776256     -0.253273      -82.0165       82.0165       2313.62       2395.64    
  35  0.168040      -1.78355      -577.561       577.561       2415.49       2993.06    
  36  0.229069      -1.47373      -477.233       477.233       2096.94       2574.18    
  37  0.917563     -0.860337E-01  -27.8600       27.8600       2146.03       2173.89    
  38  0.161815      -1.82130      -589.786       589.786       2488.88       3078.67    
  39  0.355170      -1.03516      -335.212       335.212       2032.93       2368.14    
  40  0.221709      -1.50639      -487.809       487.809       2680.66       3168.47    
  41  0.424436     -0.856993      -277.517       277.517       2263.60       2541.12    
  42  0.337698      -1.08560      -351.547       351.547       2108.39       2459.94    
  43  0.574481     -0.554289      -179.494       179.494       2158.84       2338.33    
  44  0.614536     -0.486888      -157.667       157.667       2163.74       2321.40    
  45  0.345602      -1.06247      -344.055       344.055       2167.72       2511.78    
  46  0.330006      -1.10864      -359.009       359.009       2233.42       2592.43    
  47  0.934389     -0.678626E-01  -21.9757       21.9757       2328.25       2350.22    
  48  0.884466     -0.122771      -39.7566       39.7566       2277.30       2317.05    
  49  0.928979     -0.736686E-01  -23.8559       23.8559       2173.41       2197.27    
  50  0.788461     -0.237672      -76.9645       76.9645       2083.98       2160.95    
  51  0.963462     -0.372219E-01  -12.0534       12.0534       2214.01       2226.07    
  52  0.630201     -0.461716      -149.516       149.516       2459.97       2609.48    
  53  0.797085     -0.226794      -73.4419       73.4419       2742.79       2816.24    
  54  0.389249     -0.943537      -305.542       305.542       2092.46       2398.00    
  55  0.660522     -0.414724      -134.299       134.299       2502.50       2636.80    
  56  0.520011     -0.653905      -211.752       211.752       2296.22       2507.97    
  57  0.270094      -1.30899      -423.885       423.885       2532.40       2956.29    
  58  0.218485      -1.52104      -492.552       492.552       2343.10       2835.65    
loop,thermsimp(1:2)       74   58.0216       266.322    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1966.08         68.24          1.18         39.12          0.48          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174       1966.78         68.20          1.20         39.67          0.27          0.05        109.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1966.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    323.827               172
loop is:       74
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    323.827               172
loop is:       75
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    161.913               229

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      173     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -158.906       158.906       1852.82       2011.73    
   2  0.269095      -1.31269      -212.542       212.542       2011.14       2223.68    
   3  0.301960      -1.19746      -193.885       193.885       1926.23       2120.12    
   4  0.927593     -0.751619E-01  -12.1697       12.1697       1917.25       1929.42    
   5  0.783450     -0.244048      -39.5146       39.5146       1952.21       1991.73    
   6  0.716705     -0.333091      -53.9319       53.9319       2083.98       2137.92    
   7  0.728578     -0.316661      -51.2717       51.2717       2101.37       2152.64    
   8  0.752541     -0.284300      -46.0319       46.0319       2146.03       2192.06    
   9  0.111710      -2.19185      -354.889       354.889       2173.41       2528.30    
  10  0.202752E-01  -3.89836      -631.196       631.196       2144.75       2775.95    
  11  0.967738     -0.327937E-01  -5.30974       5.30974       2214.01       2219.32    
  12  0.530869     -0.633240      -102.530       102.530       1979.33       2081.86    
  13  0.752699E-01  -2.58668      -418.817       418.817       2182.87       2601.69    
  14  0.658334     -0.418043      -67.6868       67.6868       2166.51       2234.20    
  15  0.383542     -0.958305      -155.162       155.162       2154.33       2309.49    
  16  0.280803      -1.27010      -205.647       205.647       2277.30       2482.94    
  17  0.976909     -0.233616E-01  -3.78255       3.78255       2200.82       2204.60    
  18  0.611898     -0.491189      -79.5301       79.5301       2163.74       2243.27    
  19  0.860469     -0.150278      -24.3320       24.3320       2158.84       2183.17    
  20  0.375446     -0.979641      -158.617       158.617       2216.95       2375.57    
  21  0.964573     -0.360702E-01  -5.84024       5.84024       2328.25       2334.09    
  22  0.865663     -0.144259      -23.3575       23.3575       2032.93       2056.28    
  23  0.498009     -0.697137      -112.876       112.876       2157.09       2269.97    
  24  0.732547     -0.311228      -50.3920       50.3920       2198.86       2249.25    
  25  0.293766      -1.22497      -198.339       198.339       2313.62       2511.96    
  26  0.805097     -0.216793      -35.1017       35.1017       2092.46       2127.56    
  27  0.236791      -1.44058      -233.249       233.249       2100.29       2333.54    
  28  0.759809     -0.274688      -44.4757       44.4757       2358.01       2402.48    
  29  0.279804      -1.27367      -206.223       206.223       2033.22       2239.44    
  30  0.862550     -0.147862      -23.9409       23.9409       2303.66       2327.60    
  31  0.784800     -0.242327      -39.2359       39.2359       2153.25       2192.49    
  32  0.231425      -1.46350      -236.960       236.960       2175.09       2412.05    
  33  0.839725     -0.174681      -28.2832       28.2832       2108.39       2136.67    
  34  0.204862      -1.58542      -256.700       256.700       2418.74       2675.44    
  35  0.741170     -0.299525      -48.4971       48.4971       2296.22       2344.72    
  36  0.838703     -0.175898      -28.4802       28.4802       2167.72       2196.20    
  37  0.287711      -1.24580      -201.711       201.711       2122.01       2323.73    
  38  0.937479     -0.645611E-01  -10.4533       10.4533       2095.76       2106.21    
  39  0.188655      -1.66783      -270.044       270.044       2225.97       2496.02    
  40  0.818317     -0.200505      -32.4645       32.4645       2396.99       2429.45    
  41  0.903487     -0.101493      -16.4331       16.4331       2263.60       2280.04    
  42  0.148828      -1.90496      -308.439       308.439       2096.94       2405.38    
  43  0.573616E-01  -2.85838      -462.810       462.810       2233.42       2696.23    
  44  0.792726E-01  -2.53486      -410.428       410.428       2459.97       2870.39    
  45  0.150401      -1.89445      -306.737       306.737       2131.53       2438.27    
  46  0.511444     -0.670518      -108.566       108.566       2502.50       2611.06    
  47  0.179810      -1.71585      -277.820       277.820       2328.26       2606.08    
  48  0.167282      -1.78808      -289.513       289.513       2316.27       2605.79    
  49  0.589016     -0.529302      -85.7010       85.7010       2460.50       2546.20    
  50  0.974997     -0.253206E-01  -4.09975       4.09975       2742.79       2746.89    
  51  0.750240     -0.287363      -46.5278       46.5278       2343.10       2389.62    
  52  0.695153     -0.363624      -58.8756       58.8756       2122.33       2181.21    
  53  0.166976      -1.78991      -289.809       289.809       2092.91       2382.72    
  54  0.228686      -1.47540      -238.888       238.888       2532.40       2771.29    
  55  0.728220     -0.317152      -51.3511       51.3511       2415.49       2466.85    
  56  0.321968      -1.13330      -183.497       183.497       2488.88       2672.38    
  57  0.494283     -0.704647      -114.092       114.092       2680.66       2794.76    
  58  0.398916     -0.919004      -148.799       148.799       1966.08       2114.88    
loop,thermsimp(1:2)       75   158.906       212.542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175       3045.48         68.30          1.23         39.16          0.20          0.05        108.93
Just calling func    0   0        108.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176       2333.64         68.38          1.16         39.06          0.42          0.05        109.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2333.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       75
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       76
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      175     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -485.930       485.930       1917.25       2403.18    
   2  0.604222     -0.503814      -81.5742       81.5742       1952.21       2033.79    
   3  0.106168      -2.24273      -363.128       363.128       1852.82       2215.95    
   4  0.342113      -1.07261      -173.670       173.670       2032.93       2206.60    
   5  0.473442     -0.747725      -121.067       121.067       1979.33       2100.40    
   6  0.100866E-01  -4.59655      -744.243       744.243       2095.76       2840.00    
   7  0.911848     -0.922817E-01  -14.9416       14.9416       1966.08       1981.03    
   8  0.633547     -0.456421      -73.9006       73.9006       1926.23       2000.14    
   9  0.729024     -0.316048      -51.1724       51.1724       2092.46       2143.63    
  10  0.620163     -0.477772      -77.3577       77.3577       2108.39       2185.75    
  11  0.867018     -0.142695      -23.1043       23.1043       2083.98       2107.09    
  12  0.969344E-01  -2.33372      -377.860       377.860       2101.37       2479.23    
  13  0.358466      -1.02592      -166.110       166.110       2122.33       2288.44    
  14  0.953168     -0.479638E-01  -7.76597       7.76597       2158.84       2166.61    
  15  0.684510     -0.379052      -61.3735       61.3735       2146.03       2207.40    
  16  0.482047     -0.729713      -118.150       118.150       2153.25       2271.40    
  17  0.974791     -0.255318E-01  -4.13394       4.13394       2167.72       2171.86    
  18  0.978669     -0.215619E-01  -3.49116       3.49116       2200.82       2204.31    
  19  0.929785     -0.728022E-01  -11.7877       11.7877       2214.01       2225.80    
  20  0.715020     -0.335444      -54.3129       54.3129       2011.14       2065.45    
  21  0.598247     -0.513752      -83.1833       83.1833       2166.51       2249.69    
  22  0.107080      -2.23418      -361.744       361.744       2033.22       2394.96    
  23  0.559093     -0.581439      -94.1427       94.1427       2163.74       2257.88    
  24  0.933094     -0.692491E-01  -11.2124       11.2124       2198.86       2210.07    
  25  0.470169E-01  -3.05725      -495.009       495.009       2157.09       2652.10    
  26  0.166768      -1.79115      -290.011       290.011       2263.60       2553.62    
  27  0.331277      -1.10480      -178.882       178.882       2154.33       2333.21    
  28  0.961755     -0.389952E-01  -6.31385       6.31385       2122.01       2128.33    
  29  0.464366E-01  -3.06967      -497.020       497.020       2303.66       2800.68    
  30  0.966136E-03  -6.94221      -1124.04       1124.04       2100.29       3224.33    
  31  0.941012     -0.607999E-01  -9.84431       9.84431       2328.25       2338.09    
  32  0.201947E-01  -3.90233      -631.840       631.840       2296.22       2928.06    
  33  0.679249     -0.386768      -62.6229       62.6229       2216.95       2279.58    
  34  0.318772      -1.14328      -185.112       185.112       2092.91       2278.02    
  35  0.388100     -0.946493      -153.250       153.250       2343.10       2496.34    
  36  0.658606     -0.417629      -67.6197       67.6197       2358.01       2425.63    
  37  0.774362     -0.255715      -41.4037       41.4037       2096.94       2138.35    
  38  0.704871     -0.349740      -56.6275       56.6275       2175.09       2231.72    
  39  0.274189      -1.29394      -209.506       209.506       2396.99       2606.49    
  40  0.881806     -0.125783      -20.3659       20.3659       2131.53       2151.90    
  41  0.198448      -1.61723      -261.850       261.850       2415.49       2677.34    
  42  0.342590      -1.07122      -173.445       173.445       2277.30       2450.74    
  43  0.603787     -0.504534      -81.6908       81.6908       2225.97       2307.66    
  44  0.667409     -0.404353      -65.4701       65.4701       2313.62       2379.09    
  45  0.317014      -1.14881      -186.007       186.007       2173.41       2359.42    
  46  0.368458     -0.998429      -161.659       161.659       2460.50       2622.16    
  47  0.139912      -1.96674      -318.442       318.442       2182.87       2501.32    
  48  0.537645     -0.620557      -100.477       100.477       2316.27       2416.75    
  49  0.159021      -1.83872      -297.713       297.713       2328.26       2625.97    
  50  0.729011     -0.316067      -51.1754       51.1754       2502.50       2553.67    
  51  0.802486     -0.220041      -35.6276       35.6276       2488.88       2524.51    
  52  0.249203      -1.38949      -224.977       224.977       2418.74       2643.72    
  53  0.282362      -1.26456      -204.750       204.750       2233.42       2438.17    
  54  0.803878     -0.218308      -35.3469       35.3469       2742.79       2778.14    
  55  0.183401      -1.69608      -274.618       274.618       2532.40       2807.02    
  56  0.144999      -1.93103      -312.659       312.659       2144.75       2457.41    
  57  0.821026     -0.197200      -31.9293       31.9293       2680.66       2712.59    
  58  0.391750     -0.937132      -151.734       151.734       2333.64       2485.38    
loop,thermsimp(1:2)       76   485.930       81.5742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177       2160.71         68.43          1.14         39.26          0.41          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178       2540.53         68.50          1.08         38.81          0.73          0.05        109.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2160.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       76
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       77
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      177     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -83.5858       83.5858       1966.08       2049.67    
   2  0.476930     -0.740385      -119.878       119.878       1926.23       2046.11    
   3  0.845382     -0.167966      -27.1959       27.1959       1952.21       1979.41    
   4  0.397814     -0.921770      -149.247       149.247       2011.14       2160.39    
   5  0.249923      -1.38660      -224.510       224.510       1979.33       2203.84    
   6  0.591552     -0.525005      -85.0054       85.0054       2083.98       2168.99    
   7  0.143111      -1.94414      -314.782       314.782       2122.01       2436.80    
   8  0.306099      -1.18385      -191.681       191.681       2096.94       2288.62    
   9  0.441827     -0.816836      -132.257       132.257       2092.46       2224.72    
  10  0.504521     -0.684146      -110.772       110.772       2131.53       2242.31    
  11  0.127660      -2.05839      -333.280       333.280       2158.84       2492.12    
  12  0.333524      -1.09804      -177.787       177.787       2167.72       2345.51    
  13  0.130890      -2.03340      -329.234       329.234       2108.39       2437.62    
  14  0.307732      -1.17853      -190.819       190.819       2200.82       2391.64    
  15  0.154434E-01  -4.17057      -675.271       675.271       2032.93       2708.20    
  16  0.357863      -1.02761      -166.383       166.383       2146.03       2312.41    
  17  0.271898      -1.30233      -210.864       210.864       2198.86       2409.72    
  18  0.906228E-01  -2.40105      -388.762       388.762       1852.82       2241.58    
  19  0.344142      -1.06670      -172.713       172.713       2214.01       2386.72    
  20  0.392886     -0.934237      -151.265       151.265       2175.09       2326.36    
  21  0.454318     -0.788958      -127.743       127.743       2166.51       2294.25    
  22  0.384129     -0.956778      -154.915       154.915       2163.74       2318.65    
  23  0.354037      -1.03835      -168.123       168.123       2153.25       2321.37    
  24  0.154212      -1.86943      -302.686       302.686       2092.91       2395.60    
  25  0.816320     -0.202949      -32.8602       32.8602       2216.95       2249.81    
  26  0.994970     -0.504291E-02 -0.816514      0.816514       2122.33       2123.15    
  27  0.374719E-01  -3.28416      -531.750       531.750       2225.97       2757.72    
  28  0.227113      -1.48231      -240.005       240.005       2154.33       2394.33    
  29  0.410587     -0.890167      -144.130       144.130       2328.25       2472.38    
  30  0.104540E-01  -4.56077      -738.449       738.449       2173.41       2911.86    
  31  0.994826     -0.518730E-02 -0.839892      0.839892       2313.62       2314.46    
  32  0.738930     -0.302553      -48.9873       48.9873       2033.22       2082.21    
  33  0.715904     -0.334209      -54.1129       54.1129       1917.25       1971.37    
  34  0.128324      -2.05320      -332.440       332.440       2316.27       2648.71    
  35  0.856095     -0.155374      -25.1570       25.1570       2358.01       2383.16    
  36  0.423967     -0.858099      -138.938       138.938       2233.42       2372.36    
  37  0.504650     -0.683890      -110.731       110.731       2277.30       2388.03    
  38  0.347036      -1.05833      -171.357       171.357       2144.75       2316.11    
  39  0.906779     -0.978566E-01  -15.8443       15.8443       2101.37       2117.21    
  40  0.616911     -0.483030      -78.2090       78.2090       2333.64       2411.85    
  41  0.540209     -0.615800      -99.7062       99.7062       2343.10       2442.80    
  42  0.772932     -0.257564      -41.7030       41.7030       2182.87       2224.58    
  43  0.544989     -0.606989      -98.2797       98.2797       2488.88       2587.16    
  44  0.951523     -0.496917E-01  -8.04575       8.04575       2263.60       2271.65    
  45  0.172505      -1.75733      -284.535       284.535       2502.50       2787.03    
  46  0.871391     -0.137665      -22.2897       22.2897       2396.99       2419.28    
  47  0.127604      -2.05882      -333.351       333.351       2460.50       2793.85    
  48  0.785934     -0.240882      -39.0021       39.0021       2328.26       2367.26    
  49  0.815977     -0.203369      -32.9282       32.9282       2418.74       2451.67    
  50  0.350587      -1.04815      -169.709       169.709       2157.09       2326.80    
  51  0.739645     -0.301584      -48.8305       48.8305       2415.49       2464.32    
  52  0.996274     -0.373345E-02 -0.604495      0.604495       2680.66       2681.27    
  53  0.303822      -1.19131      -192.890       192.890       2742.79       2935.68    
  54  0.708260     -0.344944      -55.8511       55.8511       2303.66       2359.51    
  55  0.646268     -0.436541      -70.6817       70.6817       2532.40       2603.08    
  56  0.696585     -0.361566      -58.5424       58.5424       2095.76       2154.30    
  57  0.439732     -0.821591      -133.026       133.026       2296.22       2429.25    
  58  0.791452     -0.233886      -37.8692       37.8692       2160.71       2198.58    
loop,thermsimp(1:2)       77   83.5858       119.878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       2999.83         68.17          1.12         39.19          0.45          0.05        108.98
Just calling func    0   0        108.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180       2070.57         68.36          1.16         38.93          0.60          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2070.57
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       77
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       78
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      179     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -9.69435       9.69435       1917.25       1926.95    
   2  0.368209     -0.999105      -161.768       161.768       1952.21       2113.98    
   3  0.508630     -0.676034      -109.459       109.459       1926.23       2035.69    
   4  0.744324     -0.295279      -47.8097       47.8097       1966.08       2013.89    
   5  0.401586     -0.912333      -147.719       147.719       2033.22       2180.94    
   6  0.712794     -0.338563      -54.8179       54.8179       2101.37       2156.19    
   7  0.186976      -1.67678      -271.492       271.492       2122.33       2393.83    
   8  0.688451     -0.373311      -60.4441       60.4441       2095.76       2156.20    
   9  0.668652     -0.402492      -65.1688       65.1688       2011.14       2076.31    
  10  0.656767     -0.420426      -68.0726       68.0726       2083.98       2152.06    
  11  0.853336     -0.158602      -25.6798       25.6798       2160.71       2186.39    
  12  0.556440     -0.586195      -94.9128       94.9128       1979.33       2074.24    
  13  0.258558E-01  -3.65522      -591.829       591.829       2182.87       2774.70    
  14  0.121003E-01  -4.41452      -714.770       714.770       2092.46       2807.23    
  15  0.150890      -1.89120      -306.211       306.211       1852.82       2159.03    
  16  0.820074     -0.198360      -32.1172       32.1172       2131.53       2163.65    
  17  0.151452      -1.88748      -305.609       305.609       2216.95       2522.56    
  18  0.305465      -1.18592      -192.016       192.016       2263.60       2455.62    
  19  0.533202     -0.628854      -101.820       101.820       2096.94       2198.76    
  20  0.143416      -1.94201      -314.437       314.437       2166.51       2480.95    
  21  0.687081     -0.375303      -60.7665       60.7665       2146.03       2206.80    
  22  0.546247     -0.604685      -97.9065       97.9065       2313.62       2411.53    
  23  0.356987      -1.03006      -166.780       166.780       2144.75       2311.53    
  24  0.545718     -0.605653      -98.0633       98.0633       2163.74       2261.80    
  25  0.789688     -0.236117      -38.2305       38.2305       2153.25       2191.48    
  26  0.752086     -0.284904      -46.1298       46.1298       2175.09       2221.22    
  27  0.388816     -0.944650      -152.951       152.951       2157.09       2310.04    
  28  0.988428     -0.116395E-01  -1.88460       1.88460       2167.72       2169.61    
  29  0.124991      -2.07952      -336.701       336.701       2303.66       2640.36    
  30  0.568214     -0.565257      -91.5227       91.5227       2328.26       2419.78    
  31  0.551032     -0.595962      -96.4942       96.4942       2233.42       2329.92    
  32  0.423622     -0.858913      -139.069       139.069       2358.01       2497.08    
  33  0.647554     -0.434553      -70.3600       70.3600       2214.01       2284.37    
  34  0.686255     -0.376506      -60.9614       60.9614       2277.30       2338.26    
  35  0.548072     -0.601349      -97.3664       97.3664       2200.82       2298.18    
  36  0.880777     -0.126951      -20.5551       20.5551       2154.33       2174.88    
  37  0.894918     -0.111023      -17.9761       17.9761       2092.91       2110.89    
  38  0.241077      -1.42264      -230.344       230.344       2198.86       2429.20    
  39  0.546141     -0.604877      -97.9377       97.9377       2333.64       2431.58    
  40  0.266590      -1.32204      -214.056       214.056       2396.99       2611.04    
  41  0.575085     -0.553238      -89.5766       89.5766       2296.22       2385.80    
  42  0.907139     -0.974596E-01  -15.7800       15.7800       2122.01       2137.79    
  43  0.469109     -0.756920      -122.555       122.555       2108.39       2230.94    
  44  0.738008     -0.303801      -49.1894       49.1894       2343.10       2392.28    
  45  0.557598     -0.584116      -94.5762       94.5762       2418.74       2513.32    
  46  0.305677      -1.18523      -191.904       191.904       2415.49       2607.40    
  47  0.392927     -0.934131      -151.248       151.248       2328.25       2479.49    
  48  0.121997      -2.10376      -340.626       340.626       2158.84       2499.47    
  49  0.712082     -0.339563      -54.9797       54.9797       2488.88       2543.86    
  50  0.342132      -1.07256      -173.661       173.661       2532.40       2706.06    
  51  0.288307      -1.24373      -201.376       201.376       2316.27       2517.65    
  52  0.554777     -0.589188      -95.3974       95.3974       2680.66       2776.06    
  53  0.116597E-01  -4.45161      -720.776       720.776       2032.93       2753.70    
  54  0.844148     -0.169427      -27.4325       27.4325       2225.97       2253.40    
  55  0.910896     -0.933267E-01  -15.1108       15.1108       2502.50       2517.61    
  56  0.257100      -1.35829      -219.925       219.925       2460.50       2680.42    
  57  0.340199      -1.07823      -174.579       174.579       2173.41       2347.99    
  58  0.656010     -0.421580      -68.2594       68.2594       2070.57       2138.83    
loop,thermsimp(1:2)       78   9.69435       161.768    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181       2017.74         68.41          1.18         39.02          0.40          0.05        109.05
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182       1957.84         68.41          1.16         38.91          0.71          0.05        109.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    2017.7        3.395     -2.815      3.094     -102.6     0.5465    
                      0.1828     0.9540     -99.70      4.834     0.5318    

                       4.771     -2.692      1.540      7460.      7000.    

                      -2.043      0.000      0.000      0.000     -1.221    



                      -1.934      0.000      0.000      7000.      486.0    

                      -1.485     -4.705     -6.234     -8.008      7.796    

                      -12.07     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.9726E-02 0.1281     0.7408E-01 0.8222E-01

                     -0.2486     0.1284     0.1582     0.1223     0.3700E-01



                     -0.9329    -0.5450      0.000     0.6273E-01 0.1896    

                      0.1763     0.2367    -0.7116     0.1371     0.3542    

                      0.1788     0.2346E-01-0.4923     -1.479      7000.    



                      -1.239     -1.161     -2.142     -1.982    -0.3807    

                     -0.3252      9.275      8.482    -0.1705E+05 -5.869    

                     -0.2726     -2.295      8.709      9.166    -0.1969E+05



                      -6.000     0.4995     0.3816E-03  8.842      9.111    

                     -0.1944E+05 -6.000    -0.1557    -0.2483      9.707    

                       8.960    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1957.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       78
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       79
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      181     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -428.541       428.541       1917.25       2345.79    
   2  0.952063     -0.491245E-01  -7.95390       7.95390       1966.08       1974.04    
   3  0.207928      -1.57057      -254.295       254.295       1926.23       2180.53    
   4  0.564009     -0.572686      -92.7254       92.7254       1979.33       2072.06    
   5  0.461636     -0.772979      -125.156       125.156       2011.14       2136.30    
   6  0.683812     -0.380072      -61.5386       61.5386       2092.91       2154.45    
   7  0.153569      -1.87360      -303.361       303.361       1952.21       2255.57    
   8  0.605650     -0.501453      -81.1920       81.1920       2122.01       2203.21    
   9  0.257296      -1.35753      -219.802       219.802       2070.57       2290.37    
  10  0.517987     -0.657805      -106.507       106.507       2083.98       2190.49    
  11  0.571129     -0.560140      -90.6942       90.6942       2101.37       2192.06    
  12  0.735134     -0.307703      -49.8212       49.8212       2095.76       2145.58    
  13  0.766340E-02  -4.87130      -788.728       788.728       1852.82       2641.55    
  14  0.435932     -0.830269      -134.432       134.432       2131.53       2265.97    
  15  0.513945     -0.665639      -107.776       107.776       2167.72       2275.50    
  16  0.447046     -0.805095      -130.356       130.356       2154.33       2284.68    
  17  0.244813      -1.40726      -227.854       227.854       2033.22       2261.07    
  18  0.183933      -1.69318      -274.149       274.149       2160.71       2434.86    
  19  0.413164     -0.883910      -143.117       143.117       2153.25       2296.37    
  20  0.869613     -0.139707      -22.6205       22.6205       2096.94       2119.56    
  21  0.853260     -0.158691      -25.6941       25.6941       2146.03       2171.72    
  22  0.138067      -1.98001      -320.590       320.590       2175.09       2495.68    
  23  0.940528     -0.613134E-01  -9.92745       9.92745       2108.39       2118.32    
  24  0.694939     -0.363931      -58.9253       58.9253       2225.97       2284.90    
  25  0.962776     -0.379346E-01  -6.14212       6.14212       2163.74       2169.88    
  26  0.378266     -0.972158      -157.405       157.405       2214.01       2371.42    
  27  0.855922     -0.155576      -25.1898       25.1898       2200.82       2226.01    
  28  0.393452     -0.932797      -151.032       151.032       2157.09       2308.12    
  29  0.253590      -1.37204      -222.151       222.151       2144.75       2366.90    
  30  0.777948     -0.251096      -40.6558       40.6558       2233.42       2274.08    
  31  0.654890     -0.423288      -68.5360       68.5360       2277.30       2345.83    
  32  0.690016E-01  -2.67363      -432.896       432.896       2173.41       2606.31    
  33  0.101034      -2.29229      -371.153       371.153       2296.22       2667.37    
  34  0.684533     -0.379019      -61.3682       61.3682       2343.10       2404.46    
  35  0.592603     -0.523230      -84.7179       84.7179       2122.33       2207.05    
  36  0.904830     -0.100009      -16.1927       16.1927       2313.62       2329.82    
  37  0.400244     -0.915681      -148.261       148.261       2328.26       2476.52    
  38  0.698191     -0.359263      -58.1695       58.1695       2198.86       2257.03    
  39  0.551449E-01  -2.89779      -469.191       469.191       2333.64       2802.83    
  40  0.500493     -0.692161      -112.070       112.070       2263.60       2375.67    
  41  0.289592      -1.23928      -200.656       200.656       2328.25       2528.90    
  42  0.447163     -0.804833      -130.313       130.313       2166.51       2296.82    
  43  0.690940     -0.369702      -59.8596       59.8596       2358.01       2417.87    
  44  0.631068     -0.460341      -74.5354       74.5354       2158.84       2233.38    
  45  0.926041     -0.768363E-01  -12.4408       12.4408       2418.74       2431.18    
  46  0.436187     -0.829684      -134.337       134.337       2502.50       2636.83    
  47  0.314139      -1.15792      -187.483       187.483       2316.27       2503.76    
  48  0.363110      -1.01305      -164.026       164.026       2216.95       2380.98    
  49  0.446982     -0.805238      -130.379       130.379       2488.88       2619.26    
  50  0.541529     -0.613360      -99.3111       99.3111       2415.49       2514.81    
  51  0.415529     -0.878202      -142.193       142.193       2396.99       2539.18    
  52  0.559792     -0.580190      -93.9405       93.9405       2303.66       2397.60    
  53  0.931332     -0.711389E-01  -11.5183       11.5183       2460.50       2472.01    
  54  0.653342     -0.425655      -68.9191       68.9191       2532.40       2601.32    
  55  0.254324E-01  -3.67173      -594.502       594.502       2032.93       2627.43    
  56  0.365877      -1.00546      -162.797       162.797       2182.87       2345.67    
  57  0.187661      -1.67312      -270.900       270.900       2680.66       2951.56    
  58  0.592744     -0.522993      -84.6795       84.6795       1957.84       2042.52    
loop,thermsimp(1:2)       79   428.541       7.95390    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183       2041.92         68.66          1.20         39.20          0.15          0.05        109.26
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184       2297.22         68.75          1.16         39.03          0.23          0.05        109.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2041.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       79
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       80
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      183     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -65.2238       65.2238       1966.08       2031.31    
   2  0.238500      -1.43339      -232.084       232.084       1957.84       2189.92    
   3  0.689211     -0.372208      -60.2655       60.2655       1979.33       2039.60    
   4  0.540774     -0.614753      -99.5367       99.5367       2108.39       2207.93    
   5  0.178857      -1.72117      -278.680       278.680       2096.94       2375.62    
   6  0.884253     -0.123012      -19.9173       19.9173       2011.14       2031.06    
   7  0.755546     -0.280314      -45.3866       45.3866       2095.76       2141.15    
   8  0.654086E-01  -2.72710      -441.554       441.554       2092.91       2534.47    
   9  0.802958     -0.219452      -35.5322       35.5322       2163.74       2199.27    
  10  0.840665     -0.173562      -28.1019       28.1019       2146.03       2174.13    
  11  0.864930     -0.145107      -23.4947       23.4947       1926.23       1949.73    
  12  0.728243     -0.317120      -51.3460       51.3460       2083.98       2135.33    
  13  0.453086     -0.791672      -128.182       128.182       2101.37       2229.55    
  14  0.702549E-01  -2.65563      -429.981       429.981       2122.01       2552.00    
  15  0.610595     -0.493321      -79.8753       79.8753       2122.33       2202.21    
  16  0.728410E-02  -4.92206      -796.947       796.947       2200.82       2997.76    
  17  0.913763     -0.901841E-01  -14.6020       14.6020       2158.84       2173.44    
  18  0.165001      -1.80180      -291.736       291.736       1952.21       2243.95    
  19  0.917747E-01  -2.38842      -386.717       386.717       2198.86       2585.57    
  20  0.338507      -1.08321      -175.386       175.386       2033.22       2208.61    
  21  0.357666      -1.02815      -166.472       166.472       2131.53       2298.01    
  22  0.389441     -0.943044      -152.691       152.691       2233.42       2386.12    
  23  0.879897     -0.127950      -20.7168       20.7168       2167.72       2188.44    
  24  0.418897     -0.870129      -140.885       140.885       2154.33       2295.21    
  25  0.838426     -0.176230      -28.5339       28.5339       2225.97       2254.50    
  26  0.185169      -1.68649      -273.064       273.064       2070.57       2343.63    
  27  0.200952      -1.60469      -259.820       259.820       2153.25       2413.07    
  28  0.877256     -0.130957      -21.2036       21.2036       2166.51       2187.71    
  29  0.386592     -0.950385      -153.880       153.880       2157.09       2310.97    
  30  0.888706     -0.117988      -19.1039       19.1039       2313.62       2332.73    
  31  0.105408      -2.24991      -364.291       364.291       2182.87       2547.17    
  32  0.994268     -0.574873E-02 -0.930796      0.930796       1917.25       1918.18    
  33  0.764077     -0.269087      -43.5687       43.5687       2277.30       2320.87    
  34  0.812108     -0.208121      -33.6976       33.6976       2144.75       2178.45    
  35  0.121669      -2.10645      -341.063       341.063       2214.01       2555.07    
  36  0.637909     -0.449559      -72.7896       72.7896       2263.60       2336.39    
  37  0.316007E-02  -5.75716      -932.161       932.161       2216.95       3149.12    
  38  0.229677      -1.47108      -238.188       238.188       2303.66       2541.85    
  39  0.521374     -0.651288      -105.452       105.452       2343.10       2448.55    
  40  0.391402     -0.938019      -151.878       151.878       2358.01       2509.88    
  41  0.327357      -1.11670      -180.809       180.809       2418.74       2599.55    
  42  0.963139     -0.375576E-01  -6.08108       6.08108       2160.71       2166.79    
  43  0.174261      -1.74720      -282.895       282.895       2460.50       2743.39    
  44  0.331602      -1.10382      -178.723       178.723       2328.26       2506.98    
  45  0.526338     -0.641812      -103.918       103.918       2175.09       2279.01    
  46  0.413265     -0.883667      -143.077       143.077       2316.27       2459.35    
  47  0.541510E-02  -5.21856      -844.955       844.955       2415.49       3260.45    
  48  0.781613     -0.246396      -39.8947       39.8947       2328.25       2368.14    
  49  0.656825     -0.420337      -68.0582       68.0582       2396.99       2465.05    
  50  0.584791     -0.536501      -86.8667       86.8667       2532.40       2619.27    
  51  0.811204     -0.209236      -33.8781       33.8781       2173.41       2207.29    
  52  0.421027     -0.865059      -140.065       140.065       2488.88       2628.94    
  53  0.663739     -0.409866      -66.3628       66.3628       2032.93       2099.29    
  54  0.164765      -1.80323      -291.968       291.968       2502.50       2794.47    
  55  0.883187E-01  -2.42680      -392.932       392.932       1852.82       2245.75    
  56  0.825424     -0.191858      -31.0643       31.0643       2296.22       2327.29    
  57  0.201966E-01  -3.90224      -631.825       631.825       2333.64       2965.47    
  58  0.174898      -1.74355      -282.304       282.304       2041.92       2324.22    
loop,thermsimp(1:2)       80   65.2238       232.084    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       1922.56         68.71          1.19         39.31          0.00          0.05        109.27
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186       2370.65         68.73          1.16         39.11          0.13          0.05        109.17
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1922.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       80
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       81
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      185     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -211.985       211.985       1917.25       2129.24    
   2  0.879265     -0.128669      -20.8332       20.8332       1926.23       1947.07    
   3  0.684902     -0.378479      -61.2808       61.2808       2011.14       2072.42    
   4  0.893896     -0.112166      -18.1611       18.1611       1966.08       1984.24    
   5  0.476761     -0.740739      -119.936       119.936       1979.33       2099.27    
   6  0.755167     -0.280817      -45.4680       45.4680       2032.93       2078.39    
   7  0.452407     -0.793173      -128.425       128.425       2083.98       2212.41    
   8  0.723906     -0.323093      -52.3131       52.3131       2095.76       2148.07    
   9  0.451260     -0.795711      -128.836       128.836       2160.71       2289.55    
  10  0.668265     -0.403071      -65.2626       65.2626       2158.84       2224.10    
  11  0.777249     -0.251995      -40.8013       40.8013       2146.03       2186.83    
  12  0.342240      -1.07224      -173.611       173.611       2144.75       2318.36    
  13  0.639156     -0.447606      -72.4734       72.4734       2166.51       2238.98    
  14  0.166924      -1.79022      -289.860       289.860       2167.72       2457.58    
  15  0.375260     -0.980137      -158.697       158.697       1957.84       2116.54    
  16  0.299730      -1.20487      -195.085       195.085       2163.74       2358.82    
  17  0.407119     -0.898650      -145.503       145.503       2122.33       2267.84    
  18  0.762992E-01  -2.57309      -416.618       416.618       2173.41       2590.03    
  19  0.281066      -1.26917      -205.495       205.495       2108.39       2313.88    
  20  0.220512      -1.51180      -244.781       244.781       2033.22       2278.00    
  21  0.389846     -0.942004      -152.523       152.523       2101.37       2253.89    
  22  0.660048     -0.415443      -67.2658       67.2658       1952.21       2019.48    
  23  0.150026      -1.89695      -307.141       307.141       1852.82       2159.96    
  24  0.113767      -2.17360      -351.935       351.935       2225.97       2577.91    
  25  0.810589     -0.209994      -34.0008       34.0008       2175.09       2209.09    
  26  0.247911      -1.39468      -225.818       225.818       2154.33       2380.15    
  27  0.408875     -0.894345      -144.806       144.806       2131.53       2276.34    
  28  0.310528      -1.16948      -189.355       189.355       2157.09       2346.44    
  29  0.663027     -0.410939      -66.5366       66.5366       2277.30       2343.83    
  30  0.798362     -0.225193      -36.4617       36.4617       2041.92       2078.38    
  31  0.564885     -0.571133      -92.4741       92.4741       2296.22       2388.70    
  32  0.473510E-02  -5.35275      -866.682       866.682       2313.62       3180.30    
  33  0.933475E-01  -2.37143      -383.965       383.965       2263.60       2647.57    
  34  0.931702     -0.707423E-01  -11.4541       11.4541       2070.57       2082.02    
  35  0.341741      -1.07370      -173.847       173.847       2328.25       2502.09    
  36  0.171330      -1.76417      -285.642       285.642       2096.94       2382.59    
  37  0.355860      -1.03322      -167.292       167.292       2233.42       2400.72    
  38  0.469639     -0.755790      -122.373       122.373       2153.25       2275.62    
  39  0.805376     -0.216446      -35.0454       35.0454       2343.10       2378.14    
  40  0.651615     -0.428301      -69.3477       69.3477       2316.27       2385.62    
  41  0.126831      -2.06490      -334.334       334.334       2396.99       2731.32    
  42  0.715737     -0.334442      -54.1506       54.1506       2328.26       2382.41    
  43  0.444007     -0.811915      -131.460       131.460       2358.01       2489.47    
  44  0.887105     -0.119791      -19.3958       19.3958       2092.91       2112.31    
  45  0.492139     -0.708993      -114.795       114.795       2303.66       2418.45    
  46  0.590315     -0.527098      -85.3442       85.3442       2182.87       2268.22    
  47  0.313130      -1.16114      -188.003       188.003       2122.01       2310.02    
  48  0.824070     -0.193500      -31.3302       31.3302       2214.01       2245.34    
  49  0.785026     -0.242039      -39.1893       39.1893       2198.86       2238.05    
  50  0.105781      -2.24638      -363.719       363.719       2418.74       2782.46    
  51  0.644933     -0.438608      -71.0165       71.0165       2532.40       2603.42    
  52  0.656932     -0.420175      -68.0320       68.0320       2488.88       2556.91    
  53  0.418239     -0.871703      -141.140       141.140       2460.50       2601.64    
  54  0.191132      -1.65479      -267.932       267.932       2502.50       2770.43    
  55  0.493587     -0.706055      -114.320       114.320       2333.64       2447.96    
  56  0.490289     -0.712761      -115.405       115.405       2200.82       2316.22    
  57  0.703124     -0.352222      -57.0295       57.0295       2216.95       2273.98    
  58  0.514219E-01  -2.96769      -480.509       480.509       1922.56       2403.07    
loop,thermsimp(1:2)       81   211.985       20.8332    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       2283.35         68.46          1.24         39.28          0.04          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2283.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       81
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       82
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      186     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -703.141       703.141       1926.23       2629.38    
   2  0.906957E-01  -2.40025      -388.632       388.632       1966.08       2354.72    
   3  0.973677     -0.266758E-01  -4.31917       4.31917       1952.21       1956.53    
   4  0.764409     -0.268653      -43.4984       43.4984       2011.14       2054.64    
   5  0.647718     -0.434300      -70.3190       70.3190       2041.92       2112.24    
   6  0.450945     -0.796410      -128.949       128.949       2032.93       2161.87    
   7  0.342138      -1.07254      -173.659       173.659       2070.57       2244.22    
   8  0.491560     -0.710170      -114.986       114.986       1979.33       2094.32    
   9  0.728901     -0.316218      -51.1999       51.1999       2092.91       2144.11    
  10  0.361124      -1.01853      -164.914       164.914       1957.84       2122.75    
  11  0.187026      -1.67651      -271.449       271.449       1917.25       2188.70    
  12  0.560514     -0.578901      -93.7318       93.7318       2095.76       2189.49    
  13  0.218776      -1.51971      -246.061       246.061       1852.82       2098.88    
  14  0.109271      -2.21392      -358.463       358.463       2146.03       2504.49    
  15  0.263420E-01  -3.63659      -588.813       588.813       2175.09       2763.90    
  16  0.654642     -0.423667      -68.5973       68.5973       2083.98       2152.58    
  17  0.975959     -0.243343E-01  -3.94004       3.94004       2158.84       2162.78    
  18  0.107212      -2.23295      -361.544       361.544       2198.86       2560.40    
  19  0.972340     -0.280494E-01  -4.54157       4.54157       2166.51       2171.05    
  20  0.259158      -1.35032      -218.634       218.634       2214.01       2432.65    
  21  0.889970     -0.116568      -18.8738       18.8738       2101.37       2120.24    
  22  0.956672     -0.442943E-01  -7.17183       7.17183       2122.33       2129.51    
  23  0.299261      -1.20644      -195.338       195.338       2182.87       2378.21    
  24  0.114836      -2.16425      -350.421       350.421       2216.95       2567.37    
  25  0.728848     -0.316291      -51.2117       51.2117       2153.25       2204.46    
  26  0.650336     -0.430267      -69.6659       69.6659       2131.53       2201.20    
  27  0.816983     -0.202137      -32.7287       32.7287       2033.22       2065.95    
  28  0.507860     -0.677550      -109.704       109.704       2160.71       2270.42    
  29  0.920661     -0.826634E-01  -13.3843       13.3843       2122.01       2135.40    
  30  0.253772      -1.37132      -222.035       222.035       2108.39       2330.42    
  31  0.667512     -0.404198      -65.4450       65.4450       2200.82       2266.26    
  32  0.772715     -0.257844      -41.7484       41.7484       2144.75       2186.50    
  33  0.757620     -0.277573      -44.9428       44.9428       2277.30       2322.24    
  34  0.776421     -0.253060      -40.9738       40.9738       2157.09       2198.06    
  35  0.886642     -0.120314      -19.4805       19.4805       2163.74       2183.22    
  36  0.238693E-01  -3.73516      -604.772       604.772       2343.10       2947.87    
  37  0.303957      -1.19087      -192.818       192.818       2154.33       2347.15    
  38  0.875267     -0.133226      -21.5711       21.5711       2328.26       2349.83    
  39  0.144246      -1.93624      -313.503       313.503       2096.94       2410.45    
  40  0.993963     -0.605564E-02 -0.980489      0.980489       2316.27       2317.25    
  41  0.172168      -1.75928      -284.851       284.851       2296.22       2581.07    
  42  0.979713     -0.204952E-01  -3.31845       3.31845       2233.42       2236.74    
  43  0.938694     -0.632658E-01  -10.2436       10.2436       1922.56       1932.81    
  44  0.716061     -0.333990      -54.0775       54.0775       2303.66       2357.74    
  45  0.764601     -0.268402      -43.4578       43.4578       2333.64       2377.10    
  46  0.546951     -0.603396      -97.6979       97.6979       2167.72       2265.42    
  47  0.104442      -2.25912      -365.782       365.782       2358.01       2723.79    
  48  0.669980     -0.400508      -64.8475       64.8475       2328.25       2393.09    
  49  0.255048      -1.36630      -221.223       221.223       2488.88       2710.10    
  50  0.761153     -0.272921      -44.1895       44.1895       2225.97       2270.16    
  51  0.273269      -1.29730      -210.050       210.050       2173.41       2383.46    
  52  0.789047E-01  -2.53951      -411.181       411.181       2460.50       2871.68    
  53  0.723703     -0.323374      -52.3586       52.3586       2532.40       2584.76    
  54  0.535422     -0.624699      -101.147       101.147       2263.60       2364.75    
  55  0.394266     -0.930730      -150.698       150.698       2396.99       2547.68    
  56  0.334209      -1.09599      -177.455       177.455       2502.50       2679.95    
  57  0.713084     -0.338156      -54.7519       54.7519       2418.74       2473.49    
  58  0.335811      -1.09121      -176.681       176.681       2283.35       2460.03    
loop,thermsimp(1:2)       82   703.141       388.632    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       2862.54         68.60          1.23         39.37          0.00          0.05        109.24
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2862.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       82
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       83
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      187     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -80.2631       80.2631       1922.56       2002.83    
   2  0.266275      -1.32323      -214.248       214.248       1952.21       2166.46    
   3  0.545538     -0.605984      -98.1168       98.1168       2011.14       2109.26    
   4  0.196234      -1.62845      -263.667       263.667       2033.22       2296.89    
   5  0.786411     -0.240275      -38.9038       38.9038       1979.33       2018.24    
   6  0.453912     -0.789853      -127.888       127.888       1852.82       1980.71    
   7  0.900549     -0.104751      -16.9605       16.9605       2041.92       2058.88    
   8  0.339919      -1.07905      -174.712       174.712       2101.37       2276.08    
   9  0.511643     -0.670128      -108.503       108.503       1957.84       2066.34    
  10  0.628202     -0.464894      -75.2725       75.2725       2122.33       2197.61    
  11  0.672886E-01  -2.69876      -436.966       436.966       2122.01       2558.98    
  12  0.518493     -0.656829      -106.349       106.349       2092.91       2199.26    
  13  0.994926     -0.508642E-02 -0.823558      0.823558       2083.98       2084.81    
  14  0.733191     -0.310349      -50.2496       50.2496       2032.93       2083.18    
  15  0.952818     -0.483318E-01  -7.82557       7.82557       2158.84       2166.67    
  16  0.735955     -0.306586      -49.6404       49.6404       2166.51       2216.15    
  17  0.743149     -0.296859      -48.0654       48.0654       2163.74       2211.80    
  18  0.549375     -0.598975      -96.9820       96.9820       2144.75       2241.73    
  19  0.355140      -1.03524      -167.620       167.620       1917.25       2084.87    
  20  0.482165     -0.729469      -118.111       118.111       2095.76       2213.87    
  21  0.577197     -0.549571      -88.9829       88.9829       2157.09       2246.07    
  22  0.107316E-01  -4.53456      -734.206       734.206       2131.53       2865.74    
  23  0.923969     -0.790764E-01  -12.8035       12.8035       2153.25       2166.05    
  24  0.810451     -0.210164      -34.0284       34.0284       2233.42       2267.45    
  25  0.143346      -1.94249      -314.515       314.515       2070.57       2385.08    
  26  0.994184     -0.583318E-02 -0.944470      0.944470       2167.72       2168.67    
  27  0.870737     -0.138415      -22.4112       22.4112       2200.82       2223.23    
  28  0.970691     -0.297469E-01  -4.81642       4.81642       2225.97       2230.79    
  29  0.351269      -1.04620      -169.394       169.394       2160.71       2330.11    
  30  0.464982     -0.765756      -123.986       123.986       2316.27       2440.26    
  31  0.921785     -0.814432E-01  -13.1867       13.1867       2277.30       2290.48    
  32  0.110512      -2.20263      -356.635       356.635       2108.39       2465.02    
  33  0.261408      -1.34167      -217.234       217.234       2154.33       2371.56    
  34  0.908908     -0.955118E-01  -15.4646       15.4646       2328.26       2343.73    
  35  0.819412     -0.199168      -32.2479       32.2479       1966.08       1998.33    
  36  0.466482     -0.762536      -123.465       123.465       2303.66       2427.12    
  37  0.717237     -0.332349      -53.8117       53.8117       2263.60       2317.42    
  38  0.802331     -0.220234      -35.6588       35.6588       2333.64       2369.30    
  39  0.949390     -0.519355E-01  -8.40904       8.40904       2182.87       2191.28    
  40  0.258511      -1.35282      -219.039       219.039       2173.41       2392.45    
  41  0.270423      -1.30777      -211.745       211.745       2328.25       2539.99    
  42  0.366439      -1.00392      -162.549       162.549       2096.94       2259.49    
  43  0.934403     -0.678476E-01  -10.9854       10.9854       2214.01       2225.00    
  44  0.956654     -0.443133E-01  -7.17491       7.17491       2283.35       2290.53    
  45  0.377790     -0.973417      -157.609       157.609       2418.74       2576.35    
  46  0.203667      -1.59127      -257.648       257.648       2146.03       2403.68    
  47  0.673892     -0.394685      -63.9047       63.9047       2396.99       2460.89    
  48  0.347380      -1.05734      -171.197       171.197       2198.86       2370.05    
  49  0.144339      -1.93559      -313.398       313.398       2216.95       2530.35    
  50  0.728571     -0.316670      -51.2730       51.2730       2296.22       2347.49    
  51  0.243065      -1.41443      -229.014       229.014       2532.40       2761.42    
  52  0.686711     -0.375841      -60.8537       60.8537       1926.23       1987.09    
  53  0.159440      -1.83609      -297.287       297.287       2502.50       2799.79    
  54  0.426258     -0.852711      -138.065       138.065       2488.88       2626.94    
  55  0.929286     -0.733386E-01  -11.8745       11.8745       2358.01       2369.88    
  56  0.335987E-01  -3.39327      -549.415       549.415       2175.09       2724.51    
  57  0.539383     -0.617330      -99.9539       99.9539       2460.50       2560.45    
  58  0.384768     -0.955116      -154.646       154.646       2862.54       3017.18    
loop,thermsimp(1:2)       83   80.2631       214.248    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189       2343.10         68.75          1.28         39.07          0.05          0.05        109.20
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2343.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       83
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       84
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      188     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -90.2700       90.2700       1852.82       1943.09    
   2  0.468879     -0.757411      -122.635       122.635       1926.23       2048.87    
   3  0.886741E-01  -2.42279      -392.282       392.282       1966.08       2358.37    
   4  0.211783      -1.55219      -251.320       251.320       1922.56       2173.88    
   5  0.573306     -0.556336      -90.0781       90.0781       1979.33       2069.41    
   6  0.401711     -0.912021      -147.668       147.668       2041.92       2189.58    
   7  0.505706     -0.681800      -110.393       110.393       1957.84       2068.23    
   8  0.603045     -0.505763      -81.8898       81.8898       2032.93       2114.82    
   9  0.696575     -0.361580      -58.5447       58.5447       2083.98       2142.53    
  10  0.294614      -1.22209      -197.873       197.873       1917.25       2115.13    
  11  0.527550     -0.639511      -103.545       103.545       2011.14       2114.69    
  12  0.657157     -0.419832      -67.9764       67.9764       2153.25       2221.23    
  13  0.627866     -0.465428      -75.3590       75.3590       1952.21       2027.57    
  14  0.993353E-02  -4.61184      -746.718       746.718       2158.84       2905.56    
  15  0.885166E-01  -2.42456      -392.569       392.569       2167.72       2560.29    
  16  0.265764      -1.32515      -214.559       214.559       2182.87       2397.43    
  17  0.446403     -0.806534      -130.589       130.589       2122.33       2252.92    
  18  0.287864      -1.24527      -201.625       201.625       2092.91       2294.54    
  19  0.926928E-01  -2.37846      -385.105       385.105       2163.74       2548.84    
  20  0.394849     -0.929252      -150.458       150.458       2095.76       2246.22    
  21  0.540746     -0.614805      -99.5451       99.5451       2166.51       2266.06    
  22  0.846435     -0.166721      -26.9944       26.9944       2200.82       2227.81    
  23  0.417037     -0.874580      -141.606       141.606       2214.01       2355.62    
  24  0.210713      -1.55726      -252.141       252.141       2225.97       2478.11    
  25  0.764669     -0.268312      -43.4433       43.4433       2144.75       2188.19    
  26  0.219471E-01  -3.81912      -618.367       618.367       2157.09       2775.46    
  27  0.200728      -1.60581      -260.001       260.001       2096.94       2356.94    
  28  0.572660     -0.557463      -90.2607       90.2607       2233.42       2323.68    
  29  0.599083E-01  -2.81494      -455.776       455.776       2101.37       2557.15    
  30  0.214614      -1.53891      -249.170       249.170       2277.30       2526.47    
  31  0.489389     -0.714598      -115.703       115.703       2283.35       2399.05    
  32  0.162616      -1.81636      -294.094       294.094       2033.22       2327.31    
  33  0.710022     -0.342459      -55.4487       55.4487       2263.60       2319.05    
  34  0.753583     -0.282916      -45.8079       45.8079       2160.71       2206.52    
  35  0.743317     -0.296633      -48.0288       48.0288       2328.26       2376.29    
  36  0.155416      -1.86165      -301.426       301.426       2296.22       2597.65    
  37  0.643355     -0.441059      -71.4133       71.4133       2333.64       2405.06    
  38  0.656098     -0.421444      -68.2374       68.2374       2358.01       2426.24    
  39  0.327550      -1.11611      -180.714       180.714       2198.86       2379.57    
  40  0.192244      -1.64899      -266.994       266.994       2154.33       2421.32    
  41  0.433590     -0.835657      -135.304       135.304       2070.57       2205.87    
  42  0.788561     -0.237545      -38.4618       38.4618       2173.41       2211.87    
  43  0.978028     -0.222173E-01  -3.59728       3.59728       2146.03       2149.63    
  44  0.110322      -2.20435      -356.914       356.914       2303.66       2660.57    
  45  0.795332     -0.228995      -37.0774       37.0774       2316.27       2353.35    
  46  0.497518E-01  -3.00071      -485.855       485.855       2396.99       2882.84    
  47  0.852459     -0.159631      -25.8463       25.8463       2108.39       2134.24    
  48  0.133240      -2.01560      -326.353       326.353       2216.95       2543.31    
  49  0.671163     -0.398743      -64.5618       64.5618       2328.25       2392.81    
  50  0.245122      -1.40600      -227.650       227.650       2122.01       2349.66    
  51  0.820498     -0.197843      -32.0334       32.0334       2460.50       2492.53    
  52  0.422422     -0.861751      -139.529       139.529       2418.74       2558.27    
  53  0.946612E-01  -2.35745      -381.703       381.703       2488.88       2870.58    
  54  0.902486     -0.102603      -16.6127       16.6127       2175.09       2191.70    
  55  0.858585     -0.152469      -24.6868       24.6868       2532.40       2557.09    
  56  0.713346     -0.337789      -54.6925       54.6925       2502.50       2557.19    
  57  0.497785     -0.697587      -112.949       112.949       2131.53       2244.48    
  58  0.971461     -0.289536E-01  -4.68798       4.68798       2343.10       2347.78    
loop,thermsimp(1:2)       84   90.2700       122.635    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190       1946.55         68.63          1.24         39.17          0.10          0.05        109.20
Just calling func    0   0        109.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191       1913.70         68.70          1.19         39.00          0.18          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1913.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       84
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       85
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      190     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -262.627       262.627       1852.82       2115.45    
   2  0.793097     -0.231809      -37.5330       37.5330       1952.21       1989.75    
   3  0.261081      -1.34293      -217.437       217.437       1926.23       2143.67    
   4  0.912198     -0.918984E-01  -14.8796       14.8796       1957.84       1972.72    
   5  0.493539     -0.706153      -114.336       114.336       1979.33       2093.67    
   6  0.721001     -0.327115      -52.9642       52.9642       2011.14       2064.11    
   7  0.578790     -0.546816      -88.5368       88.5368       2032.93       2121.46    
   8  0.684127     -0.379612      -61.4642       61.4642       1917.25       1978.72    
   9  0.627712     -0.465674      -75.3988       75.3988       2108.39       2183.79    
  10  0.858540     -0.152522      -24.6954       24.6954       2083.98       2108.68    
  11  0.712254E-01  -2.64191      -427.760       427.760       2146.03       2573.79    
  12  0.927250     -0.755316E-01  -12.2296       12.2296       1922.56       1934.79    
  13  0.458073     -0.780727      -126.410       126.410       2144.75       2271.16    
  14  0.940004     -0.618714E-01  -10.0178       10.0178       2041.92       2051.93    
  15  0.322549      -1.13150      -183.205       183.205       2175.09       2358.30    
  16  0.939473     -0.624358E-01  -10.1092       10.1092       2070.57       2080.67    
  17  0.726080     -0.320095      -51.8277       51.8277       2160.71       2212.54    
  18  0.602088E-02  -5.11252      -827.785       827.785       2173.41       3001.20    
  19  0.735289     -0.307492      -49.7871       49.7871       2153.25       2203.04    
  20  0.847617     -0.165326      -26.7686       26.7686       2200.82       2227.59    
  21  0.747190E-01  -2.59402      -420.006       420.006       2131.53       2551.54    
  22  0.248374      -1.39282      -225.516       225.516       2095.76       2321.28    
  23  0.350184      -1.04930      -169.895       169.895       2122.33       2292.23    
  24  0.327739E-03  -8.02329      -1299.08       1299.08       2166.51       3465.59    
  25  0.130012      -2.04013      -330.324       330.324       2092.91       2423.24    
  26  0.609791     -0.494639      -80.0887       80.0887       2263.60       2343.69    
  27  0.793414     -0.231410      -37.4684       37.4684       2233.42       2270.89    
  28  0.962567     -0.381519E-01  -6.17730       6.17730       2033.22       2039.40    
  29  0.499469     -0.694211      -112.402       112.402       2343.10       2455.50    
  30  0.887491     -0.119357      -19.3255       19.3255       2122.01       2141.34    
  31  0.136374      -1.99236      -322.589       322.589       2316.27       2638.86    
  32  0.292356      -1.22978      -199.118       199.118       2214.01       2413.13    
  33  0.301564      -1.19877      -194.098       194.098       2096.94       2291.04    
  34  0.352543      -1.04258      -168.808       168.808       1966.08       2134.89    
  35  0.483726     -0.726236      -117.587       117.587       2328.26       2445.85    
  36  0.410499     -0.890381      -144.165       144.165       2198.86       2343.02    
  37  0.458111     -0.780644      -126.397       126.397       2328.25       2454.64    
  38  0.670071     -0.400372      -64.8256       64.8256       2182.87       2247.70    
  39  0.175486      -1.74020      -281.761       281.761       2283.35       2565.11    
  40  0.798907     -0.224511      -36.3513       36.3513       2333.64       2369.99    
  41  0.270487      -1.30753      -211.707       211.707       2154.33       2366.03    
  42  0.480368     -0.733202      -118.715       118.715       2358.01       2476.72    
  43  0.658406     -0.417933      -67.6689       67.6689       2225.97       2293.64    
  44  0.937976     -0.640304E-01  -10.3674       10.3674       2460.50       2470.86    
  45  0.710083     -0.342373      -55.4347       55.4347       2277.30       2332.73    
  46  0.567340     -0.566797      -91.7720       91.7720       2216.95       2308.73    
  47  0.201426      -1.60233      -259.439       259.439       2163.74       2423.17    
  48  0.660313     -0.415042      -67.2008       67.2008       2532.40       2599.60    
  49  0.524008     -0.646249      -104.636       104.636       2101.37       2206.01    
  50  0.513616     -0.666280      -107.880       107.880       2502.50       2610.38    
  51  0.951218     -0.500122E-01  -8.09765       8.09765       2418.74       2426.84    
  52  0.703465     -0.351737      -56.9510       56.9510       2167.72       2224.68    
  53  0.702859     -0.352600      -57.0906       57.0906       2296.22       2353.31    
  54  0.453067     -0.791715      -128.189       128.189       2303.66       2431.85    
  55  0.202116      -1.59891      -258.885       258.885       2157.09       2415.98    
  56  0.491988     -0.709301      -114.845       114.845       2488.88       2603.72    
  57  0.632131     -0.458659      -74.2629       74.2629       2396.99       2471.25    
  58  0.911086     -0.931178E-01  -15.0770       15.0770       1913.70       1928.78    
loop,thermsimp(1:2)       85   262.627       37.5330    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192       2437.58         68.54          1.26         39.16          0.11          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2437.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       85
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       86
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      191     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -124.021       124.021       1913.70       2037.73    
   2  0.948887     -0.524654E-01  -8.49485       8.49485       1922.56       1931.06    
   3  0.532332     -0.630488      -102.084       102.084       1957.84       2059.92    
   4  0.374267     -0.982785      -159.126       159.126       1917.25       2076.38    
   5  0.694531     -0.364519      -59.0205       59.0205       1952.21       2011.23    
   6  0.414371     -0.880994      -142.645       142.645       2033.22       2175.87    
   7  0.208827E-01  -3.86883      -626.415       626.415       2041.92       2668.33    
   8  0.627187     -0.466511      -75.5343       75.5343       2011.14       2086.68    
   9  0.148799E-01  -4.20774      -681.289       681.289       2070.57       2751.86    
  10  0.809008     -0.211946      -34.3169       34.3169       1979.33       2013.65    
  11  0.647680     -0.434359      -70.3285       70.3285       2083.98       2154.31    
  12  0.289351      -1.24012      -200.791       200.791       1852.82       2053.61    
  13  0.222457      -1.50302      -243.359       243.359       2032.93       2276.28    
  14  0.374268     -0.982782      -159.126       159.126       1966.08       2125.21    
  15  0.785765     -0.241097      -39.0368       39.0368       2122.01       2161.05    
  16  0.298051      -1.21049      -195.995       195.995       1926.23       2122.23    
  17  0.725075     -0.321480      -52.0519       52.0519       2108.39       2160.44    
  18  0.386364     -0.950976      -153.976       153.976       2153.25       2307.23    
  19  0.631686     -0.459363      -74.3769       74.3769       2101.37       2175.75    
  20  0.688282     -0.373557      -60.4839       60.4839       2160.71       2221.20    
  21  0.373817     -0.983990      -159.321       159.321       2167.72       2327.05    
  22  0.219845      -1.51483      -245.272       245.272       2200.82       2446.09    
  23  0.926271     -0.765889E-01  -12.4008       12.4008       2182.87       2195.28    
  24  0.618127     -0.481061      -77.8902       77.8902       2233.42       2311.31    
  25  0.176216      -1.73604      -281.089       281.089       2144.75       2425.84    
  26  0.742943     -0.297136      -48.1103       48.1103       2096.94       2145.05    
  27  0.357690      -1.02809      -166.461       166.461       2122.33       2288.80    
  28  0.478359     -0.737394      -119.394       119.394       2225.97       2345.36    
  29  0.395976     -0.926401      -149.997       149.997       2216.95       2366.95    
  30  0.803186     -0.219169      -35.4864       35.4864       2095.76       2131.25    
  31  0.231845      -1.46168      -236.666       236.666       2277.30       2513.96    
  32  0.808968     -0.211996      -34.3250       34.3250       2198.86       2233.18    
  33  0.579217     -0.546078      -88.4172       88.4172       2263.60       2352.02    
  34  0.384357     -0.956183      -154.819       154.819       2296.22       2451.04    
  35  0.856367     -0.155057      -25.1058       25.1058       2175.09       2200.20    
  36  0.265661      -1.32553      -214.621       214.621       2154.33       2368.95    
  37  0.288915      -1.24162      -201.035       201.035       2333.64       2534.68    
  38  0.224915      -1.49203      -241.580       241.580       2214.01       2455.59    
  39  0.685944     -0.376959      -61.0347       61.0347       2157.09       2218.12    
  40  0.265936      -1.32450      -214.454       214.454       2163.74       2378.19    
  41  0.412966     -0.884389      -143.194       143.194       2092.91       2236.11    
  42  0.440796     -0.819173      -132.635       132.635       2418.74       2551.37    
  43  0.572522     -0.557705      -90.2998       90.2998       2303.66       2393.96    
  44  0.798412     -0.225131      -36.4517       36.4517       2328.26       2364.71    
  45  0.127097      -2.06281      -333.996       333.996       2328.25       2662.24    
  46  0.243397      -1.41306      -228.794       228.794       2343.10       2571.89    
  47  0.322195      -1.13260      -183.383       183.383       2460.50       2643.88    
  48  0.512728     -0.668011      -108.160       108.160       2396.99       2505.15    
  49  0.786191     -0.240556      -38.9492       38.9492       2358.01       2396.96    
  50  0.733079     -0.310501      -50.2743       50.2743       2131.53       2181.81    
  51  0.601364     -0.508554      -82.3417       82.3417       2283.35       2365.69    
  52  0.348529      -1.05403      -170.662       170.662       2146.03       2316.69    
  53  0.923986     -0.790584E-01  -12.8006       12.8006       2532.40       2545.20    
  54  0.843742     -0.169908      -27.5104       27.5104       2488.88       2516.39    
  55  0.723581     -0.323543      -52.3859       52.3859       2502.50       2554.88    
  56  0.378158     -0.972444      -157.452       157.452       2316.27       2473.73    
  57  0.463644     -0.768638      -124.453       124.453       2173.41       2297.86    
  58  0.427569     -0.849641      -137.568       137.568       2437.58       2575.15    
loop,thermsimp(1:2)       86   124.021       8.49485    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193       2243.40         68.48          1.22         39.59          0.04          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2243.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       86
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       87
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      192     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -274.999       274.999       1922.56       2197.56    
   2  0.721345     -0.326637      -52.8870       52.8870       1952.21       2005.10    
   3  0.842493     -0.171390      -27.7502       27.7502       1979.33       2007.08    
   4  0.260540      -1.34500      -217.773       217.773       1913.70       2131.48    
   5  0.782605     -0.245127      -39.6893       39.6893       1852.82       1892.51    
   6  0.208492      -1.56785      -253.856       253.856       1957.84       2211.70    
   7  0.290568E-01  -3.53850      -572.930       572.930       1917.25       2490.18    
   8  0.673682     -0.394997      -63.9552       63.9552       2011.14       2075.10    
   9  0.399393     -0.917808      -148.605       148.605       1926.23       2074.84    
  10  0.966971     -0.335863E-01  -5.43807       5.43807       1966.08       1971.52    
  11  0.390645     -0.939956      -152.191       152.191       2095.76       2247.95    
  12  0.259548      -1.34881      -218.391       218.391       2096.94       2315.33    
  13  0.260765      -1.34413      -217.633       217.633       2083.98       2301.62    
  14  0.110601E-01  -4.50441      -729.325       729.325       2108.39       2837.71    
  15  0.727710     -0.317852      -51.4645       51.4645       2122.01       2173.48    
  16  0.717076     -0.332574      -53.8482       53.8482       2101.37       2155.22    
  17  0.612129     -0.490811      -79.4689       79.4689       2033.22       2112.69    
  18  0.589376     -0.528691      -85.6021       85.6021       2131.53       2217.14    
  19  0.541615     -0.613199      -99.2851       99.2851       2182.87       2282.16    
  20  0.330403      -1.10744      -179.309       179.309       2175.09       2354.40    
  21  0.229530      -1.47172      -238.291       238.291       2157.09       2395.38    
  22  0.564010     -0.572684      -92.7251       92.7251       2160.71       2253.44    
  23  0.454226     -0.789161      -127.776       127.776       2198.86       2326.63    
  24  0.579528     -0.545541      -88.3304       88.3304       2092.91       2181.24    
  25  0.245500      -1.40446      -227.400       227.400       2032.93       2260.33    
  26  0.708019     -0.345284      -55.9060       55.9060       2122.33       2178.24    
  27  0.300215      -1.20326      -194.823       194.823       2173.41       2368.24    
  28  0.721461     -0.326478      -52.8611       52.8611       2153.25       2206.11    
  29  0.326772      -1.11849      -181.099       181.099       2233.42       2414.52    
  30  0.580879     -0.543212      -87.9533       87.9533       2146.03       2233.98    
  31  0.963075     -0.376241E-01  -6.09185       6.09185       2167.72       2173.82    
  32  0.656935     -0.420170      -68.0310       68.0310       2225.97       2294.00    
  33  0.908335     -0.961416E-01  -15.5666       15.5666       2263.60       2279.17    
  34  0.765938     -0.266654      -43.1749       43.1749       2328.26       2371.44    
  35  0.497301     -0.698561      -113.106       113.106       2283.35       2396.46    
  36  0.833603     -0.181997      -29.4678       29.4678       2216.95       2246.42    
  37  0.433057     -0.836886      -135.503       135.503       2154.33       2289.83    
  38  0.349547      -1.05112      -170.190       170.190       2163.74       2333.93    
  39  0.142838      -1.94604      -315.090       315.090       2303.66       2618.75    
  40  0.326780      -1.11847      -181.095       181.095       2358.01       2539.10    
  41  0.707709     -0.345723      -55.9771       55.9771       2144.75       2200.73    
  42  0.914339     -0.895538E-01  -14.4999       14.4999       2200.82       2215.32    
  43  0.392800     -0.934454      -151.301       151.301       2296.22       2447.52    
  44  0.434772     -0.832933      -134.863       134.863       2214.01       2348.87    
  45  0.229545      -1.47165      -238.280       238.280       2316.27       2554.55    
  46  0.661281     -0.413577      -66.9636       66.9636       2396.99       2463.95    
  47  0.459966     -0.776602      -125.742       125.742       2277.30       2403.04    
  48  0.352439      -1.04288      -168.856       168.856       2488.88       2657.74    
  49  0.490345     -0.712647      -115.387       115.387       2333.64       2449.03    
  50  0.837788     -0.176990      -28.6570       28.6570       2532.40       2561.06    
  51  0.247493      -1.39637      -226.092       226.092       2418.74       2644.83    
  52  0.221382      -1.50787      -244.144       244.144       2502.50       2746.64    
  53  0.374412     -0.982399      -159.063       159.063       2343.10       2502.16    
  54  0.170580      -1.76855      -286.352       286.352       2437.58       2723.93    
  55  0.464054     -0.767755      -124.310       124.310       2460.50       2584.81    
  56  0.936961     -0.651140E-01  -10.5428       10.5428       2328.25       2338.79    
  57  0.302357      -1.19615      -193.672       193.672       2041.92       2235.59    
  58  0.572748E-01  -2.85990      -463.055       463.055       2243.40       2706.46    
loop,thermsimp(1:2)       87   274.999       52.8870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       1989.17         68.55          1.24         39.38          0.00          0.05        109.23
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195       1984.75         68.44          1.20         39.34          0.12          0.05        109.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1984.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       87
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       88
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      194     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -245.025       245.025       1852.82       2097.85    
   2  0.246752E-01  -3.70196      -599.396       599.396       1966.08       2565.48    
   3  0.679039     -0.387076      -62.6728       62.6728       1952.21       2014.89    
   4  0.709027     -0.343862      -55.6758       55.6758       1979.33       2035.01    
   5  0.577754     -0.548608      -88.8269       88.8269       1926.23       2015.06    
   6  0.738694     -0.302871      -49.0389       49.0389       2011.14       2060.18    
   7  0.181723      -1.70527      -276.106       276.106       2033.22       2309.33    
   8  0.103748      -2.26579      -366.861       366.861       1913.70       2280.57    
   9  0.456811E-02  -5.38866      -872.495       872.495       2101.37       2973.86    
  10  0.303247      -1.19321      -193.196       193.196       2122.01       2315.21    
  11  0.284736      -1.25619      -203.394       203.394       2167.72       2371.12    
  12  0.900494     -0.104812      -16.9705       16.9705       2122.33       2139.30    
  13  0.691792     -0.368470      -59.6601       59.6601       2092.91       2152.57    
  14  0.502714     -0.687735      -111.353       111.353       1922.56       2033.92    
  15  0.305219      -1.18673      -192.147       192.147       2144.75       2336.90    
  16  0.412005     -0.886720      -143.572       143.572       2153.25       2296.82    
  17  0.412225     -0.886186      -143.485       143.485       1957.84       2101.33    
  18  0.121697      -2.10622      -341.025       341.025       2200.82       2541.84    
  19  0.465374     -0.764915      -123.850       123.850       2131.53       2255.38    
  20  0.273016      -1.29823      -210.200       210.200       2146.03       2356.23    
  21  0.502763     -0.687636      -111.337       111.337       2041.92       2153.25    
  22  0.516442     -0.660793      -106.991       106.991       2216.95       2323.95    
  23  0.554333     -0.589990      -95.5273       95.5273       2095.76       2191.29    
  24  0.192397E-01  -3.95078      -639.684       639.684       2160.71       2800.40    
  25  0.451279E-01  -3.09825      -501.649       501.649       2032.93       2534.57    
  26  0.457340     -0.782327      -126.669       126.669       2263.60       2390.27    
  27  0.325184      -1.12336      -181.887       181.887       2182.87       2364.76    
  28  0.700952     -0.355315      -57.5303       57.5303       2154.33       2211.86    
  29  0.961087     -0.396906E-01  -6.42644       6.42644       2225.97       2232.40    
  30  0.195966E-02  -6.23498      -1009.53       1009.53       2083.98       3093.51    
  31  0.766376     -0.266082      -43.0823       43.0823       2096.94       2140.03    
  32  0.398846     -0.919180      -148.827       148.827       2198.86       2347.69    
  33  0.675249     -0.392674      -63.5792       63.5792       2163.74       2227.31    
  34  0.189468      -1.66354      -269.349       269.349       2328.25       2597.60    
  35  0.444608     -0.810562      -131.241       131.241       2214.01       2345.25    
  36  0.514006     -0.665520      -107.757       107.757       2175.09       2282.85    
  37  0.575199     -0.553039      -89.5443       89.5443       2173.41       2262.96    
  38  0.121449      -2.10826      -341.356       341.356       2328.26       2669.62    
  39  0.209130      -1.56480      -253.362       253.362       2157.09       2410.45    
  40  0.466284E-01  -3.06555      -496.353       496.353       2283.35       2779.70    
  41  0.386630E-01  -3.25287      -526.683       526.683       2277.30       2803.98    
  42  0.335751E-01  -3.39397      -549.529       549.529       2233.42       2782.95    
  43  0.878126     -0.129965      -21.0431       21.0431       2296.22       2317.26    
  44  0.652938     -0.426273      -69.0192       69.0192       2333.64       2402.66    
  45  0.932456E-01  -2.37252      -384.142       384.142       2396.99       2781.13    
  46  0.662683     -0.411458      -66.6206       66.6206       1917.25       1983.87    
  47  0.204704      -1.58619      -256.826       256.826       2343.10       2599.92    
  48  0.985446     -0.146609E-01  -2.37380       2.37380       2358.01       2360.38    
  49  0.105847      -2.24576      -363.618       363.618       2316.27       2679.89    
  50  0.843201     -0.170550      -27.6143       27.6143       2532.40       2560.02    
  51  0.364087      -1.01036      -163.591       163.591       2460.50       2624.09    
  52  0.650651E-01  -2.73237      -442.407       442.407       2303.66       2746.07    
  53  0.968103     -0.324171E-01  -5.24876       5.24876       2418.74       2423.99    
  54  0.131933      -2.02546      -327.949       327.949       2488.88       2816.83    
  55  0.906847     -0.977815E-01  -15.8321       15.8321       2243.40       2259.23    
  56  0.443328E-01  -3.11603      -504.527       504.527       2437.58       2942.11    
  57  0.507045     -0.679156      -109.964       109.964       2502.50       2612.46    
  58  0.287709      -1.24581      -201.713       201.713       1984.75       2186.46    
loop,thermsimp(1:2)       88   245.025       599.396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       1925.45         68.70          1.19         39.05          0.17          0.05        109.16
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    197       2046.39         68.55          1.25         39.20          0.20          0.05        109.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1925.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       88
neval is:      196
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       89
neval is:      196


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      196     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -21.2951       21.2951       1917.25       1938.55    
   2  0.765270     -0.267527      -43.3162       43.3162       1952.21       1995.53    
   3  0.215687      -1.53393      -248.363       248.363       1926.23       2174.60    
   4  0.999601E-01  -2.30298      -372.884       372.884       1922.56       2295.45    
   5  0.706519     -0.347405      -56.2495       56.2495       1979.33       2035.58    
   6  0.201358      -1.60267      -259.494       259.494       2011.14       2270.64    
   7  0.450677     -0.797005      -129.046       129.046       1852.82       1981.87    
   8  0.897557     -0.108078      -17.4993       17.4993       1957.84       1975.34    
   9  0.161166      -1.82532      -295.543       295.543       2122.33       2417.88    
  10  0.972556E-01  -2.33041      -377.325       377.325       2096.94       2474.27    
  11  0.742112     -0.298255      -48.2914       48.2914       2092.91       2141.20    
  12  0.172377      -1.75807      -284.655       284.655       2041.92       2326.57    
  13  0.658751     -0.417410      -67.5842       67.5842       1984.75       2052.33    
  14  0.725340     -0.321114      -51.9927       51.9927       2095.76       2147.75    
  15  0.501488     -0.690175      -111.748       111.748       2154.33       2266.08    
  16  0.845372     -0.167978      -27.1979       27.1979       2163.74       2190.93    
  17  0.132369      -2.02216      -327.415       327.415       2225.97       2553.39    
  18  0.734515E-01  -2.61113      -422.777       422.777       2131.53       2554.31    
  19  0.391205     -0.938523      -151.959       151.959       2243.40       2395.36    
  20  0.376983     -0.975555      -157.955       157.955       2173.41       2331.37    
  21  0.315463      -1.15371      -186.801       186.801       1913.70       2100.51    
  22  0.267113      -1.32008      -213.739       213.739       2175.09       2388.83    
  23  0.965292     -0.353243E-01  -5.71948       5.71948       2153.25       2158.97    
  24  0.954592     -0.464714E-01  -7.52434       7.52434       2033.22       2040.75    
  25  0.992414     -0.761515E-02  -1.23299       1.23299       2122.01       2123.25    
  26  0.867953E-02  -4.74679      -768.568       768.568       2296.22       3064.79    
  27  0.829585     -0.186829      -30.2501       30.2501       2216.95       2247.20    
  28  0.349695      -1.05069      -170.121       170.121       2144.75       2314.87    
  29  0.673511     -0.395251      -63.9964       63.9964       2214.01       2278.01    
  30  0.340696      -1.07676      -174.342       174.342       2198.86       2373.20    
  31  0.558731     -0.582087      -94.2476       94.2476       2146.03       2240.28    
  32  0.747295     -0.291295      -47.1645       47.1645       2358.01       2405.17    
  33  0.123287      -2.09324      -338.924       338.924       2182.87       2521.80    
  34  0.355051      -1.03549      -167.660       167.660       2167.72       2335.38    
  35  0.511895     -0.669636      -108.423       108.423       2263.60       2372.03    
  36  0.571856E-01  -2.86145      -463.307       463.307       2333.64       2796.95    
  37  0.507517     -0.678226      -109.814       109.814       2157.09       2266.90    
  38  0.326770      -1.11850      -181.100       181.100       2418.74       2599.84    
  39  0.736001     -0.306523      -49.6302       49.6302       2032.93       2082.56    
  40  0.970046     -0.304120E-01  -4.92410       4.92410       2200.82       2205.74    
  41  0.673510     -0.395253      -63.9966       63.9966       2532.40       2596.40    
  42  0.335032      -1.09353      -177.057       177.057       1966.08       2143.14    
  43  0.872321E-01  -2.43918      -394.936       394.936       2328.25       2723.18    
  44  0.749956     -0.287741      -46.5890       46.5890       2343.10       2389.68    
  45  0.159001      -1.83884      -297.733       297.733       2502.50       2800.23    
  46  0.529687     -0.635468      -102.891       102.891       2460.50       2563.39    
  47  0.142415      -1.94901      -315.571       315.571       2328.26       2643.83    
  48  0.803387     -0.218919      -35.4458       35.4458       2316.27       2351.72    
  49  0.709133     -0.343713      -55.6517       55.6517       2303.66       2359.31    
  50  0.261172      -1.34258      -217.381       217.381       2283.35       2500.73    
  51  0.106599      -2.23868      -362.473       362.473       2396.99       2759.46    
  52  0.955666     -0.453468E-01  -7.34224       7.34224       2233.42       2240.77    
  53  0.376236     -0.977539      -158.277       158.277       2160.71       2318.99    
  54  0.890774     -0.115665      -18.7277       18.7277       2277.30       2296.03    
  55  0.554077     -0.590452      -95.6021       95.6021       2488.88       2584.48    
  56  0.892825E-01  -2.41595      -391.174       391.174       2437.58       2828.76    
  57  0.941033     -0.607774E-01  -9.84067       9.84067       2101.37       2111.21    
  58  0.209380E-01  -3.86619      -625.987       625.987       1925.45       2551.44    
loop,thermsimp(1:2)       89   21.2951       43.3162    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    198       1914.90         68.64          1.26         39.13          0.12          0.05        109.20
Just calling func    0   0        109.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    199       1776.18         68.64          1.20         39.21          0.01          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1776.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       89
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       90
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      198     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -299.401       299.401       1917.25       2216.65    
   2  0.894146     -0.111886      -18.1158       18.1158       1957.84       1975.96    
   3  0.721270     -0.326741      -52.9038       52.9038       1852.82       1905.72    
   4  0.536866     -0.622006      -100.711       100.711       1952.21       2052.92    
   5  0.418107     -0.872017      -141.191       141.191       1979.33       2120.52    
   6  0.391189     -0.938564      -151.966       151.966       2033.22       2185.19    
   7  0.799669     -0.223558      -36.1969       36.1969       1984.75       2020.94    
   8  0.595070     -0.519076      -84.0454       84.0454       2032.93       2116.97    
   9  0.384356E-03  -7.86394      -1273.28       1273.28       1913.70       3186.98    
  10  0.654302     -0.424187      -68.6815       68.6815       2101.37       2170.05    
  11  0.873355     -0.135413      -21.9252       21.9252       2122.01       2143.94    
  12  0.303212      -1.19332      -193.215       193.215       2092.91       2286.13    
  13  0.434159     -0.834344      -135.091       135.091       1966.08       2101.17    
  14  0.970825     -0.296089E-01  -4.79408       4.79408       2095.76       2100.55    
  15  0.405896     -0.901659      -145.991       145.991       2153.25       2299.24    
  16  0.250423      -1.38461      -224.186       224.186       1926.23       2150.42    
  17  0.517030     -0.659654      -106.807       106.807       2163.74       2270.54    
  18  0.165468      -1.79897      -291.278       291.278       2200.82       2492.10    
  19  0.679403     -0.386541      -62.5861       62.5861       2146.03       2208.62    
  20  0.554013     -0.590567      -95.6206       95.6206       2233.42       2329.04    
  21  0.211764E-01  -3.85487      -624.155       624.155       2216.95       2841.11    
  22  0.453828     -0.790038      -127.918       127.918       2154.33       2282.25    
  23  0.377409     -0.974426      -157.772       157.772       2157.09       2314.86    
  24  0.496879     -0.699408      -113.243       113.243       2011.14       2124.39    
  25  0.214619      -1.53889      -249.167       249.167       2214.01       2463.18    
  26  0.724154     -0.322751      -52.2577       52.2577       1922.56       1974.82    
  27  0.385609     -0.952932      -154.292       154.292       2277.30       2431.59    
  28  0.777864     -0.251204      -40.6732       40.6732       2144.75       2185.42    
  29  0.709283     -0.343500      -55.6172       55.6172       2160.71       2216.33    
  30  0.191760      -1.65151      -267.402       267.402       2041.92       2309.32    
  31  0.347616      -1.05666      -171.087       171.087       2173.41       2344.50    
  32  0.191581      -1.65244      -267.553       267.553       2167.72       2435.28    
  33  0.770989     -0.260081      -42.1107       42.1107       2316.27       2358.38    
  34  0.788566E-01  -2.54012      -411.280       411.280       2303.66       2714.94    
  35  0.229474      -1.47197      -238.331       238.331       2263.60       2501.94    
  36  0.339326      -1.08079      -174.995       174.995       2198.86       2373.85    
  37  0.220886      -1.51011      -244.506       244.506       2175.09       2419.60    
  38  0.223644      -1.49770      -242.497       242.497       2343.10       2585.59    
  39  0.138287      -1.97842      -320.333       320.333       2243.40       2563.73    
  40  0.796402     -0.227651      -36.8598       36.8598       2358.01       2394.87    
  41  0.104384      -2.25968      -365.872       365.872       2122.33       2488.21    
  42  0.919642     -0.837713E-01  -13.5637       13.5637       2096.94       2110.51    
  43  0.360767      -1.01952      -165.074       165.074       2283.35       2448.42    
  44  0.924300     -0.787181E-01  -12.7455       12.7455       2182.87       2195.62    
  45  0.561139     -0.577786      -93.5513       93.5513       1925.45       2019.00    
  46  0.509073E-01  -2.97775      -482.137       482.137       2225.97       2708.11    
  47  0.715469     -0.334817      -54.2114       54.2114       2131.53       2185.75    
  48  0.294040E-01  -3.52662      -571.007       571.007       2460.50       3031.50    
  49  0.264026E-02  -5.93688      -961.259       961.259       2488.88       3450.14    
  50  0.634029     -0.455661      -73.7775       73.7775       2532.40       2606.18    
  51  0.319148      -1.14210      -184.921       184.921       2418.74       2603.66    
  52  0.495674     -0.701836      -113.637       113.637       2328.26       2441.90    
  53  0.838343     -0.176328      -28.5499       28.5499       2328.25       2356.80    
  54  0.240556      -1.42480      -230.694       230.694       2396.99       2627.68    
  55  0.919800     -0.835990E-01  -13.5358       13.5358       2333.64       2347.18    
  56  0.652899     -0.426332      -69.0289       69.0289       2502.50       2571.53    
  57  0.777375     -0.251832      -40.7750       40.7750       2437.58       2478.36    
  58  0.988137     -0.119340E-01  -1.93227       1.93227       1776.18       1778.11    
loop,thermsimp(1:2)       90   299.401       18.1158    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       2100.54         68.77          1.19         38.92          0.26          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2100.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       90
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       91
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      199     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -368.215       368.215       1776.18       2144.39    
   2  0.846291     -0.166892      -27.0220       27.0220       1852.82       1879.84    
   3  0.167054      -1.78944      -289.733       289.733       1922.56       2212.30    
   4  0.786038     -0.240750      -38.9807       38.9807       1957.84       1996.82    
   5  0.680218     -0.385341      -62.3919       62.3919       1925.45       1987.85    
   6  0.843894     -0.169729      -27.4814       27.4814       1984.75       2012.23    
   7  0.295559      -1.21889      -197.354       197.354       1952.21       2149.57    
   8  0.383493     -0.958433      -155.183       155.183       2095.76       2250.94    
   9  0.867247     -0.142431      -23.0615       23.0615       1966.08       1989.14    
  10  0.241960      -1.41898      -229.752       229.752       2096.94       2326.70    
  11  0.486925     -0.719645      -116.520       116.520       2032.93       2149.45    
  12  0.750166     -0.287460      -46.5437       46.5437       1979.33       2025.88    
  13  0.507045     -0.679156      -109.964       109.964       2011.14       2121.11    
  14  0.237743      -1.43656      -232.599       232.599       2122.01       2354.61    
  15  0.256837E-01  -3.66190      -592.910       592.910       1926.23       2519.14    
  16  0.776460     -0.253010      -40.9656       40.9656       2101.37       2142.34    
  17  0.316300      -1.15106      -186.373       186.373       2033.22       2219.59    
  18  0.493161     -0.706919      -114.460       114.460       2144.75       2259.21    
  19  0.807271     -0.214096      -34.6650       34.6650       2131.53       2166.20    
  20  0.338915      -1.08201      -175.191       175.191       2182.87       2358.07    
  21  0.132986      -2.01751      -326.662       326.662       2146.03       2472.69    
  22  0.409975     -0.891659      -144.371       144.371       2160.71       2305.08    
  23  0.525021     -0.644317      -104.324       104.324       1917.25       2021.58    
  24  0.393064     -0.933783      -151.192       151.192       2163.74       2314.93    
  25  0.176068      -1.73689      -281.225       281.225       2154.33       2435.55    
  26  0.965490     -0.351191E-01  -5.68625       5.68625       2092.91       2098.60    
  27  0.387767     -0.947350      -153.389       153.389       2153.25       2306.64    
  28  0.936248     -0.658753E-01  -10.6661       10.6661       2041.92       2052.58    
  29  0.914720     -0.891370E-01  -14.4325       14.4325       2157.09       2171.52    
  30  0.332171      -1.10211      -178.446       178.446       2233.42       2411.87    
  31  0.845314E-01  -2.47063      -400.028       400.028       2173.41       2573.44    
  32  0.687741     -0.374343      -60.6111       60.6111       2333.64       2394.25    
  33  0.899776     -0.105610      -17.0996       17.0996       2328.25       2345.35    
  34  0.558791     -0.581980      -94.2302       94.2302       2316.27       2410.50    
  35  0.882799     -0.124658      -20.1838       20.1838       2198.86       2219.04    
  36  0.235569      -1.44575      -234.086       234.086       2358.01       2592.09    
  37  0.533400     -0.628484      -101.760       101.760       2175.09       2276.85    
  38  0.147169      -1.91617      -310.254       310.254       2277.30       2587.55    
  39  0.966208E-01  -2.33696      -378.385       378.385       2167.72       2546.11    
  40  0.952887     -0.482588E-01  -7.81374       7.81374       2328.26       2336.07    
  41  0.155551      -1.86078      -301.285       301.285       2283.35       2584.64    
  42  0.645067     -0.438401      -70.9830       70.9830       2214.01       2284.99    
  43  0.394254     -0.930759      -150.702       150.702       2437.58       2588.28    
  44  0.546893     -0.603501      -97.7149       97.7149       2122.33       2220.05    
  45  0.390314     -0.940803      -152.329       152.329       2200.82       2353.15    
  46  0.311561      -1.16616      -188.817       188.817       2263.60       2452.42    
  47  0.752427E-01  -2.58704      -418.876       418.876       2243.40       2662.28    
  48  0.144673      -1.93328      -313.024       313.024       2502.50       2815.52    
  49  0.297567      -1.21212      -196.258       196.258       2343.10       2539.35    
  50  0.544131     -0.608565      -98.5348       98.5348       2418.74       2517.27    
  51  0.750603E-01  -2.58946      -419.268       419.268       2532.40       2951.67    
  52  0.127547      -2.05927      -333.423       333.423       2396.99       2730.41    
  53  0.839209     -0.175296      -28.3827       28.3827       2225.97       2254.35    
  54  0.718305     -0.330861      -53.5708       53.5708       2303.66       2357.23    
  55  0.246952      -1.39856      -226.446       226.446       2216.95       2443.40    
  56  0.550710     -0.596548      -96.5890       96.5890       2460.50       2557.09    
  57  0.588510     -0.530162      -85.8402       85.8402       1913.70       1999.54    
  58  0.361548      -1.01736      -164.724       164.724       2100.54       2265.26    
loop,thermsimp(1:2)       91   368.215       27.0220    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       2880.92         68.70          1.21         38.84          0.21          0.05        109.02
Just calling func    0   0        109.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       2042.25         68.72          1.20         38.91          0.23          0.05        109.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    2880.9        3.396     -2.814      3.234     -102.6     0.5480    
                      0.3996     0.9554     -99.70      4.836     0.5348    

                       3.148     -2.690      1.540      6940.      7000.    

                      -2.080      0.000      0.000      0.000     -1.221    



                      -1.935      0.000      0.000      7000.      485.3    

                      -1.518     -4.709     -6.238     -8.439      7.412    

                      -13.02     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5817     0.8503E-01 0.1085     0.3458E-01

                     -0.2486     0.1603     0.1489     0.1471     0.5090E-01



                     -0.9353    -0.5509      0.000     0.6043E-01 0.1463    

                      0.1899     0.1933    -0.7116     0.8954E-01 0.3498    

                      0.1383     0.4251E-01-0.4682     -1.511      7000.    



                      -1.239     -1.198     -2.142     -1.982    -0.3807    

                     -0.3252      9.231      8.442    -0.1705E+05 -5.869    

                     -0.3531     -2.343      8.673      9.113    -0.1969E+05



                      -6.000     0.4621    -0.3533E-03  8.829      9.076    

                     -0.1944E+05 -6.000    -0.1564    -0.3065      9.730    

                       8.952    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2042.25
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       91
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       92
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      201     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -246.173       246.173       1852.82       2098.99    
   2  0.389473     -0.942961      -152.678       152.678       1925.45       2078.13    
   3  0.919121     -0.843378E-01  -13.6554       13.6554       1966.08       1979.74    
   4  0.970518     -0.299250E-01  -4.84526       4.84526       1957.84       1962.69    
   5  0.713317     -0.337830      -54.6991       54.6991       1913.70       1968.40    
   6  0.639607     -0.446902      -72.3594       72.3594       1984.75       2057.11    
   7  0.712661     -0.338749      -54.8479       54.8479       1917.25       1972.10    
   8  0.212311      -1.54970      -250.918       250.918       1979.33       2230.25    
   9  0.831769     -0.184200      -29.8245       29.8245       2041.92       2071.74    
  10  0.794875     -0.229571      -37.1705       37.1705       2092.91       2130.08    
  11  0.909815     -0.945137E-01  -15.3030       15.3030       2011.14       2026.44    
  12  0.753651E-01  -2.58541      -418.612       418.612       2101.37       2519.98    
  13  0.676081     -0.391442      -63.3797       63.3797       1776.18       1839.56    
  14  0.597437     -0.515107      -83.4027       83.4027       2032.93       2116.33    
  15  0.146947      -1.91768      -310.498       310.498       1952.21       2262.71    
  16  0.854910     -0.156760      -25.3815       25.3815       2131.53       2156.92    
  17  0.984999     -0.151146E-01  -2.44725       2.44725       2157.09       2159.54    
  18  0.533419     -0.628448      -101.754       101.754       1922.56       2024.32    
  19  0.383774     -0.957703      -155.065       155.065       2198.86       2353.92    
  20  0.691729     -0.368561      -59.6750       59.6750       2033.22       2092.90    
  21  0.313732E-01  -3.46180      -560.512       560.512       2122.33       2682.85    
  22  0.415635     -0.877947      -142.151       142.151       2095.76       2237.91    
  23  0.288746      -1.24221      -201.130       201.130       2225.97       2427.10    
  24  0.176464      -1.73464      -280.861       280.861       2144.75       2425.61    
  25  0.881312     -0.126344      -20.4568       20.4568       2100.54       2121.00    
  26  0.962783     -0.379267E-01  -6.14084       6.14084       2175.09       2181.23    
  27  0.415450     -0.878393      -142.224       142.224       2214.01       2356.24    
  28  0.271836      -1.30256      -210.901       210.901       2160.71       2371.61    
  29  0.926655     -0.761736E-01  -12.3335       12.3335       2153.25       2165.58    
  30  0.277790      -1.28089      -207.393       207.393       2163.74       2371.13    
  31  0.189974      -1.66087      -268.917       268.917       2096.94       2365.86    
  32  0.410540     -0.890281      -144.148       144.148       2328.26       2472.41    
  33  0.952387     -0.487839E-01  -7.89876       7.89876       2328.25       2336.15    
  34  0.896015     -0.109798      -17.7777       17.7777       2200.82       2218.60    
  35  0.121549E-01  -4.41002      -714.041       714.041       2122.01       2836.06    
  36  0.723911     -0.323087      -52.3122       52.3122       2303.66       2355.97    
  37  0.759053     -0.275683      -44.6368       44.6368       2182.87       2227.51    
  38  0.969929     -0.305320E-01  -4.94354       4.94354       2333.64       2338.59    
  39  0.852636     -0.159422      -25.8126       25.8126       2316.27       2342.09    
  40  0.730471     -0.314065      -50.8514       50.8514       2233.42       2284.28    
  41  0.528358     -0.637981      -103.298       103.298       2154.33       2257.63    
  42  0.404403     -0.905344      -146.587       146.587       2216.95       2363.54    
  43  0.232822      -1.45748      -235.985       235.985       2263.60       2499.59    
  44  0.847643     -0.165296      -26.7636       26.7636       2146.03       2172.79    
  45  0.429393E-01  -3.14797      -509.698       509.698       2418.74       2928.44    
  46  0.673157     -0.395777      -64.0816       64.0816       1926.23       1990.32    
  47  0.806068E-01  -2.51817      -407.726       407.726       2343.10       2750.82    
  48  0.926018     -0.768619E-01  -12.4450       12.4450       2167.72       2180.17    
  49  0.167973      -1.78395      -288.845       288.845       2460.50       2749.34    
  50  0.780773     -0.247471      -40.0689       40.0689       2173.41       2213.48    
  51  0.565702E-01  -2.87227      -465.059       465.059       2283.35       2748.41    
  52  0.646011     -0.436939      -70.7463       70.7463       2277.30       2348.04    
  53  0.455316     -0.786763      -127.387       127.387       2437.58       2564.97    
  54  0.410066     -0.891437      -144.335       144.335       2358.01       2502.34    
  55  0.934064     -0.682104E-01  -11.0442       11.0442       2243.40       2254.44    
  56  0.511079     -0.671231      -108.681       108.681       2396.99       2505.67    
  57  0.578130     -0.547957      -88.7215       88.7215       2502.50       2591.22    
  58  0.458047     -0.780783      -126.419       126.419       2042.25       2168.67    
loop,thermsimp(1:2)       92   246.173       152.678    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       1980.74         68.71          1.20         39.09          0.08          0.05        109.12
Just calling func    0   0        109.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204       1952.51         68.75          1.19         39.02          0.11          0.05        109.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1952.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       92
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       93
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      203     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -308.693       308.693       1776.18       2084.87    
   2  0.695074     -0.363738      -58.8940       58.8940       1957.84       2016.73    
   3  0.541180     -0.614003      -99.4152       99.4152       1913.70       2013.12    
   4  0.189791      -1.66183      -269.073       269.073       1917.25       2186.33    
   5  0.245553      -1.40424      -227.365       227.365       1966.08       2193.45    
   6  0.641474     -0.443986      -71.8873       71.8873       1926.23       1998.12    
   7  0.308462      -1.17616      -190.435       190.435       1922.56       2113.00    
   8  0.478005     -0.738133      -119.514       119.514       2011.14       2130.66    
   9  0.395759     -0.926951      -150.086       150.086       1984.75       2134.83    
  10  0.438776E-01  -3.12635      -506.198       506.198       2041.92       2548.11    
  11  0.294628E-01  -3.52463      -570.684       570.684       1925.45       2496.14    
  12  0.331052E-01  -3.40806      -551.811       551.811       2033.22       2585.03    
  13  0.916325E-01  -2.38997      -386.968       386.968       1852.82       2239.79    
  14  0.985908     -0.141919E-01  -2.29785       2.29785       2032.93       2035.22    
  15  0.511724     -0.669970      -108.477       108.477       2100.54       2209.02    
  16  0.185695      -1.68365      -272.605       272.605       2092.91       2365.52    
  17  0.830711     -0.185474      -30.0306       30.0306       2131.53       2161.56    
  18  0.765179E-04  -9.47799      -1534.61       1534.61       2157.09       3691.70    
  19  0.129365      -2.04512      -331.132       331.132       2153.25       2484.38    
  20  0.796363     -0.227700      -36.8676       36.8676       2042.25       2079.12    
  21  0.589256     -0.528895      -85.6352       85.6352       2146.03       2231.67    
  22  0.770995     -0.260073      -42.1093       42.1093       2167.72       2209.83    
  23  0.685430     -0.377709      -61.1562       61.1562       2175.09       2236.25    
  24  0.487688     -0.718080      -116.267       116.267       2173.41       2289.68    
  25  0.114898      -2.16371      -350.334       350.334       2200.82       2551.15    
  26  0.165093      -1.80124      -291.645       291.645       2182.87       2474.52    
  27  0.302275      -1.19642      -193.716       193.716       1979.33       2173.05    
  28  0.123669      -2.09014      -338.422       338.422       2095.76       2434.18    
  29  0.960526     -0.402739E-01  -6.52087       6.52087       2243.40       2249.92    
  30  0.744557     -0.294966      -47.7589       47.7589       2154.33       2202.09    
  31  0.418436     -0.871232      -141.064       141.064       1952.21       2093.28    
  32  0.624411     -0.470947      -76.2526       76.2526       2233.42       2309.68    
  33  0.920055     -0.833222E-01  -13.4910       13.4910       2328.25       2341.74    
  34  0.330507      -1.10713      -179.259       179.259       2333.64       2512.90    
  35  0.889566     -0.117022      -18.9474       18.9474       2316.27       2335.22    
  36  0.269410      -1.31152      -212.353       212.353       2277.30       2489.65    
  37  0.458780     -0.779184      -126.160       126.160       2198.86       2325.02    
  38  0.952588     -0.485730E-01  -7.86461       7.86461       2303.66       2311.52    
  39  0.213836      -1.54254      -249.759       249.759       2214.01       2463.77    
  40  0.460697     -0.775015      -125.485       125.485       2216.95       2342.44    
  41  0.571693     -0.559153      -90.5344       90.5344       2096.94       2187.48    
  42  0.201363      -1.60265      -259.490       259.490       2163.74       2423.23    
  43  0.707817     -0.345570      -55.9524       55.9524       2160.71       2216.66    
  44  0.927118     -0.756745E-01  -12.2527       12.2527       2144.75       2157.00    
  45  0.288916      -1.24162      -201.035       201.035       2225.97       2427.01    
  46  0.702737     -0.352773      -57.1186       57.1186       2328.26       2385.38    
  47  0.253190      -1.37362      -222.407       222.407       2263.60       2486.01    
  48  0.709086     -0.343779      -55.6623       55.6623       2358.01       2413.67    
  49  0.399421     -0.917738      -148.594       148.594       2396.99       2545.58    
  50  0.837301     -0.177572      -28.7513       28.7513       2101.37       2130.12    
  51  0.906694     -0.979507E-01  -15.8595       15.8595       2437.58       2453.44    
  52  0.479547     -0.734913      -118.992       118.992       2502.50       2621.49    
  53  0.573668     -0.555704      -89.9759       89.9759       2122.33       2212.31    
  54  0.616113     -0.484325      -78.4187       78.4187       2283.35       2361.77    
  55  0.899004     -0.106467      -17.2385       17.2385       2460.50       2477.73    
  56  0.668105     -0.403310      -65.3013       65.3013       2343.10       2408.40    
  57  0.464354     -0.767107      -124.205       124.205       2122.01       2246.22    
  58  0.298472E-01  -3.51166      -568.585       568.585       1952.51       2521.10    
loop,thermsimp(1:2)       93   308.693       58.8940    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       1905.54         68.64          1.20         39.20          0.12          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206       1862.49         68.70          1.19         39.04          0.09          0.05        109.06
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1862.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       93
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       94
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      205     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -27.7904       27.7904       1926.23       1954.03    
   2  0.478368     -0.737375      -119.391       119.391       1913.70       2033.10    
   3  0.283498      -1.26055      -204.100       204.100       1957.84       2161.94    
   4  0.520516     -0.652935      -105.719       105.719       2032.93       2138.64    
   5  0.703282E-01  -2.65458      -429.812       429.812       2042.25       2472.07    
   6  0.914137     -0.897748E-01  -14.5357       14.5357       1776.18       1790.71    
   7  0.479535     -0.734938      -118.996       118.996       1952.21       2071.21    
   8  0.921875     -0.813456E-01  -13.1709       13.1709       1922.56       1935.73    
   9  0.739547     -0.301718      -48.8521       48.8521       2101.37       2150.22    
  10  0.790753     -0.234770      -38.0124       38.0124       2011.14       2049.15    
  11  0.212247E-01  -3.85259      -623.785       623.785       1984.75       2608.53    
  12  0.286971      -1.24837      -202.128       202.128       2144.75       2346.88    
  13  0.695666     -0.362886      -58.7560       58.7560       2131.53       2190.29    
  14  0.534590     -0.626255      -101.399       101.399       1979.33       2080.73    
  15  0.945577     -0.559603E-01  -9.06072       9.06072       1917.25       1926.31    
  16  0.619446     -0.478930      -77.5451       77.5451       2096.94       2174.49    
  17  0.291083E-01  -3.53673      -572.644       572.644       1966.08       2538.73    
  18  0.372584E-01  -3.28988      -532.675       532.675       2154.33       2687.00    
  19  0.713241     -0.337936      -54.7163       54.7163       2100.54       2155.26    
  20  0.280281      -1.27196      -205.947       205.947       2167.72       2373.67    
  21  0.254796      -1.36729      -221.383       221.383       2122.33       2343.72    
  22  0.498598     -0.695955      -112.684       112.684       2160.71       2273.40    
  23  0.515261E-01  -2.96567      -480.181       480.181       2146.03       2626.21    
  24  0.347627      -1.05662      -171.081       171.081       2175.09       2346.17    
  25  0.696212     -0.362102      -58.6291       58.6291       1852.82       1911.45    
  26  0.707749E-01  -2.64825      -428.787       428.787       2122.01       2550.80    
  27  0.364523E-01  -3.31175      -536.216       536.216       2243.40       2779.62    
  28  0.895087E-02  -4.71600      -763.584       763.584       2173.41       2937.00    
  29  0.333194      -1.09903      -177.948       177.948       2233.42       2411.37    
  30  0.451375     -0.795457      -128.795       128.795       2303.66       2432.45    
  31  0.849961E-01  -2.46515      -399.141       399.141       2198.86       2598.00    
  32  0.524791     -0.644756      -104.395       104.395       2316.27       2420.67    
  33  0.641068     -0.444619      -71.9898       71.9898       2328.25       2400.24    
  34  0.757376     -0.277895      -44.9949       44.9949       2216.95       2261.95    
  35  0.760597     -0.273651      -44.3078       44.3078       2283.35       2327.66    
  36  0.709070     -0.343801      -55.6659       55.6659       2092.91       2148.58    
  37  0.794718     -0.229768      -37.2025       37.2025       2328.26       2365.46    
  38  0.869679     -0.139632      -22.6082       22.6082       2343.10       2365.70    
  39  0.229100E-01  -3.77618      -611.414       611.414       2358.01       2969.42    
  40  0.935590     -0.665776E-01  -10.7798       10.7798       2163.74       2174.52    
  41  0.889453     -0.117149      -18.9679       18.9679       2225.97       2244.94    
  42  0.529054     -0.636665      -103.085       103.085       2095.76       2198.84    
  43  0.907902     -0.966186E-01  -15.6438       15.6438       2437.58       2453.23    
  44  0.693802     -0.365568      -59.1903       59.1903       2214.01       2273.20    
  45  0.883803     -0.123521      -19.9997       19.9997       2182.87       2202.87    
  46  0.275134E-01  -3.59308      -581.768       581.768       2460.50       3042.26    
  47  0.324767      -1.12465      -182.095       182.095       2153.25       2335.35    
  48  0.853326     -0.158614      -25.6817       25.6817       2263.60       2289.29    
  49  0.325639      -1.12197      -181.661       181.661       2277.30       2458.96    
  50  0.773280     -0.257115      -41.6303       41.6303       1925.45       1967.08    
  51  0.108890      -2.21741      -359.029       359.029       2333.64       2692.67    
  52  0.188532E-01  -3.97107      -642.970       642.970       1952.51       2595.48    
  53  0.970927     -0.295045E-01  -4.77717       4.77717       2396.99       2401.76    
  54  0.549714     -0.598357      -96.8820       96.8820       2041.92       2138.80    
  55  0.937888E-01  -2.36671      -383.202       383.202       2200.82       2584.02    
  56  0.293516      -1.22582      -198.477       198.477       2033.22       2231.70    
  57  0.598789     -0.512846      -83.0365       83.0365       2502.50       2585.53    
  58  0.173412      -1.75209      -283.686       283.686       1862.49       2146.18    
loop,thermsimp(1:2)       94   27.7904       119.391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       2576.32         68.58          1.20         39.09          0.20          0.05        109.12
Just calling func    0   0        109.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2576.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       94
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       95
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      206     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -47.7386       47.7386       1776.18       1823.92    
   2  0.739179     -0.302215      -48.9326       48.9326       1852.82       1901.75    
   3  0.131167      -2.03128      -328.891       328.891       1917.25       2246.14    
   4  0.523356     -0.647493      -104.838       104.838       1922.56       2027.40    
   5  0.660412     -0.414891      -67.1764       67.1764       1926.23       1993.41    
   6  0.433074E-01  -3.13943      -508.316       508.316       1925.45       2433.77    
   7  0.480352     -0.733236      -118.721       118.721       1913.70       2032.43    
   8  0.808114     -0.213053      -34.4961       34.4961       2011.14       2045.64    
   9  0.723804     -0.323235      -52.3360       52.3360       1952.21       2004.55    
  10  0.322682      -1.13109      -183.138       183.138       1979.33       2162.47    
  11  0.898907     -0.106576      -17.2561       17.2561       2032.93       2050.18    
  12  0.359972      -1.02173      -165.431       165.431       2041.92       2207.35    
  13  0.879118     -0.128836      -20.8603       20.8603       1862.49       1883.35    
  14  0.963559     -0.371220E-01  -6.01054       6.01054       2092.91       2098.92    
  15  0.662848     -0.411210      -66.5803       66.5803       2101.37       2167.95    
  16  0.648402     -0.433244      -70.1480       70.1480       2100.54       2170.69    
  17  0.375343     -0.979916      -158.661       158.661       1957.84       2116.50    
  18  0.812441     -0.207712      -33.6314       33.6314       2096.94       2130.57    
  19  0.248177E-01  -3.69620      -598.464       598.464       2163.74       2762.20    
  20  0.653530     -0.425366      -68.8724       68.8724       2131.53       2200.41    
  21  0.712244     -0.339334      -54.9427       54.9427       2095.76       2150.70    
  22  0.358229      -1.02658      -166.217       166.217       2182.87       2349.09    
  23  0.325518      -1.12234      -181.721       181.721       2033.22       2214.94    
  24  0.770349     -0.260912      -42.2450       42.2450       2225.97       2268.22    
  25  0.633518E-01  -2.75905      -446.727       446.727       2216.95       2663.68    
  26  0.168796      -1.77907      -288.054       288.054       2214.01       2502.07    
  27  0.562007     -0.576241      -93.3010       93.3010       2160.71       2254.01    
  28  0.156316      -1.85588      -300.491       300.491       2263.60       2564.10    
  29  0.967732     -0.328002E-01  -5.31079       5.31079       2283.35       2288.66    
  30  0.538071     -0.619766      -100.348       100.348       2153.25       2253.60    
  31  0.967495     -0.330453E-01  -5.35048       5.35048       2122.33       2127.68    
  32  0.771619     -0.259265      -41.9784       41.9784       2175.09       2217.07    
  33  0.246044      -1.40225      -227.042       227.042       2144.75       2371.79    
  34  0.700731     -0.355631      -57.5814       57.5814       2328.26       2385.84    
  35  0.382714     -0.960468      -155.513       155.513       2343.10       2498.61    
  36  0.580395     -0.544047      -88.0884       88.0884       2167.72       2255.81    
  37  0.305131      -1.18701      -192.193       192.193       2328.25       2520.44    
  38  0.624250     -0.471204      -76.2942       76.2942       2396.99       2473.28    
  39  0.575432     -0.552634      -89.4788       89.4788       2233.42       2322.90    
  40  0.701335     -0.354770      -57.4420       57.4420       2316.27       2373.72    
  41  0.290211      -1.23715      -200.310       200.310       2303.66       2503.97    
  42  0.140976      -1.95916      -317.214       317.214       2437.58       2754.80    
  43  0.275714      -1.28839      -208.608       208.608       2277.30       2485.91    
  44  0.856479     -0.154925      -25.0845       25.0845       2042.25       2067.34    
  45  0.994286     -0.573084E-02 -0.927899      0.927899       1966.08       1967.01    
  46  0.913008     -0.910102E-01  -14.7358       14.7358       2122.01       2136.75    
  47  0.204063      -1.58933      -257.333       257.333       2200.82       2458.15    
  48  0.388833     -0.944605      -152.944       152.944       2502.50       2655.44    
  49  0.781619     -0.246387      -39.8934       39.8934       1952.51       1992.40    
  50  0.373421     -0.985049      -159.493       159.493       2198.86       2358.35    
  51  0.834918     -0.180422      -29.2127       29.2127       1984.75       2013.96    
  52  0.174969      -1.74315      -282.239       282.239       2146.03       2428.27    
  53  0.531353     -0.632329      -102.382       102.382       2154.33       2256.71    
  54  0.339530      -1.08019      -174.898       174.898       2333.64       2508.54    
  55  0.929760     -0.728288E-01  -11.7919       11.7919       2243.40       2255.19    
  56  0.223523      -1.49824      -242.585       242.585       2173.41       2416.00    
  57  0.557869     -0.583631      -94.4976       94.4976       2358.01       2452.50    
  58  0.521577     -0.650898      -105.389       105.389       2576.32       2681.70    
loop,thermsimp(1:2)       95   47.7386       48.9326    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       1904.36         68.68          1.21         39.08          0.08          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1904.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       95
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   169.963    

hmean,hstd :    2135.50       169.963    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    2135.50       169.963    
h(1),h(best1),h(np1) :    1776.18       1776.18       1904.36    
htherm(1),htherm(best1),htherm(np1) :    1823.92       1823.92       2762.20    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        1
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      207     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -629.784       629.784       1776.18       2405.96    
   2  0.977100     -0.231667E-01  -3.75099       3.75099       1862.49       1866.24    
   3  0.491467     -0.710361      -115.017       115.017       1852.82       1967.84    
   4  0.802113E-01  -2.52309      -408.522       408.522       1966.08       2374.61    
   5  0.891044     -0.115361      -18.6785       18.6785       1952.51       1971.19    
   6  0.397551     -0.922433      -149.354       149.354       1926.23       2075.59    
   7  0.121203      -2.11029      -341.684       341.684       1952.21       2293.90    
   8  0.789985E-01  -2.53833      -410.989       410.989       1984.75       2395.74    
   9  0.921855     -0.813679E-01  -13.1745       13.1745       1922.56       1935.74    
  10  0.252671      -1.37567      -222.739       222.739       1913.70       2136.44    
  11  0.787271     -0.239182      -38.7268       38.7268       2011.14       2049.87    
  12  0.634653     -0.454676      -73.6181       73.6181       2032.93       2106.54    
  13  0.706648     -0.347222      -56.2199       56.2199       2042.25       2098.47    
  14  0.349740E-01  -3.35315      -542.920       542.920       2092.91       2635.83    
  15  0.686787     -0.375731      -60.8358       60.8358       1957.84       2018.68    
  16  0.309348      -1.17329      -189.971       189.971       2122.33       2312.31    
  17  0.703748     -0.351336      -56.8859       56.8859       2096.94       2153.83    
  18  0.985092     -0.150207E-01  -2.43206       2.43206       2122.01       2124.45    
  19  0.440741     -0.819298      -132.655       132.655       2095.76       2228.41    
  20  0.796112     -0.228015      -36.9187       36.9187       1979.33       2016.25    
  21  0.451938     -0.794210      -128.593       128.593       2101.37       2229.96    
  22  0.230902      -1.46576      -237.326       237.326       2100.54       2337.87    
  23  0.760212     -0.274159      -44.3899       44.3899       2131.53       2175.92    
  24  0.250434E-02  -5.98973      -969.817       969.817       2041.92       3011.73    
  25  0.627913E-01  -2.76794      -448.166       448.166       2033.22       2481.39    
  26  0.263128      -1.33511      -216.173       216.173       2175.09       2391.26    
  27  0.177986      -1.72605      -279.470       279.470       1917.25       2196.72    
  28  0.919776     -0.836247E-01  -13.5400       13.5400       2153.25       2166.79    
  29  0.854272     -0.157506      -25.5023       25.5023       2160.71       2186.21    
  30  0.648187     -0.433576      -70.2016       70.2016       2243.40       2313.60    
  31  0.853797     -0.158061      -25.5923       25.5923       2167.72       2193.32    
  32  0.484551     -0.724533      -117.312       117.312       2154.33       2271.64    
  33  0.423817     -0.858454      -138.995       138.995       2225.97       2364.97    
  34  0.932015     -0.704065E-01  -11.3997       11.3997       2283.35       2294.75    
  35  0.161906      -1.82074      -294.802       294.802       2233.42       2528.23    
  36  0.812519     -0.207617      -33.6159       33.6159       2182.87       2216.49    
  37  0.346838      -1.05890      -171.450       171.450       2198.86       2370.31    
  38  0.477141     -0.739943      -119.807       119.807       2144.75       2264.56    
  39  0.931946     -0.704808E-01  -11.4118       11.4118       2316.27       2327.69    
  40  0.189794      -1.66182      -269.070       269.070       2328.26       2597.33    
  41  0.361902      -1.01638      -164.566       164.566       2173.41       2337.98    
  42  0.775630E-02  -4.85925      -786.777       786.777       2146.03       2932.81    
  43  0.292497      -1.22930      -199.040       199.040       1925.45       2124.49    
  44  0.264300      -1.33067      -215.453       215.453       2358.01       2573.46    
  45  0.529597     -0.635638      -102.918       102.918       2200.82       2303.74    
  46  0.163272      -1.81234      -293.441       293.441       2396.99       2690.43    
  47  0.212593      -1.54838      -250.703       250.703       2277.30       2528.00    
  48  0.359173      -1.02395      -165.791       165.791       2343.10       2508.89    
  49  0.993707     -0.631295E-02  -1.02215       1.02215       2214.01       2215.03    
  50  0.261479      -1.34140      -217.191       217.191       2303.66       2520.85    
  51  0.441392     -0.817822      -132.416       132.416       2333.64       2466.06    
  52  0.624656     -0.470554      -76.1890       76.1890       2328.25       2404.44    
  53  0.646784     -0.435743      -70.5525       70.5525       2263.60       2334.16    
  54  0.343734      -1.06789      -172.905       172.905       2502.50       2675.40    
  55  0.438651     -0.824052      -133.425       133.425       2216.95       2350.38    
  56  0.476250     -0.741811      -120.109       120.109       2576.32       2696.42    
  57  0.665451     -0.407291      -65.9458       65.9458       2437.58       2503.53    
  58  0.903561E-01  -2.40400      -389.239       389.239       1904.36       2293.60    
loop,thermsimp(1:2)        1   629.784       3.75099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209       2459.65         68.60          1.19         39.02          0.06          0.05        108.91
Just calling func    0   0        108.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2459.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        1
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        2
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      208     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -241.036       241.036       1862.49       2103.53    
   2  0.726663     -0.319292      -51.6976       51.6976       1922.56       1974.26    
   3  0.929061     -0.735808E-01  -11.9137       11.9137       1852.82       1864.73    
   4  0.764703     -0.268268      -43.4362       43.4362       1952.51       1995.95    
   5  0.119617      -2.12346      -343.817       343.817       1979.33       2323.15    
   6  0.369672     -0.995138      -161.126       161.126       1957.84       2118.97    
   7  0.875806     -0.132611      -21.4715       21.4715       2011.14       2032.61    
   8  0.657886     -0.418723      -67.7968       67.7968       1926.23       1994.03    
   9  0.387095E-01  -3.25167      -526.489       526.489       2042.25       2568.74    
  10  0.454078     -0.789485      -127.828       127.828       2032.93       2160.75    
  11  0.890470     -0.116006      -18.7829       18.7829       2122.01       2140.80    
  12  0.118445      -2.13331      -345.411       345.411       1925.45       2270.86    
  13  0.190238      -1.65948      -268.692       268.692       1913.70       2182.40    
  14  0.435624     -0.830976      -134.546       134.546       2096.94       2231.49    
  15  0.768655     -0.263114      -42.6016       42.6016       2153.25       2195.85    
  16  0.870896E-01  -2.44082      -395.201       395.201       2131.53       2526.73    
  17  0.936453     -0.656556E-01  -10.6305       10.6305       2160.71       2171.34    
  18  0.159312      -1.83689      -297.417       297.417       2167.72       2465.14    
  19  0.988165     -0.119051E-01  -1.92760       1.92760       1917.25       1919.18    
  20  0.713347     -0.337787      -54.6922       54.6922       2214.01       2268.70    
  21  0.417075     -0.874489      -141.591       141.591       2182.87       2324.47    
  22  0.719048     -0.329827      -53.4033       53.4033       2095.76       2149.16    
  23  0.785519     -0.241411      -39.0877       39.0877       2101.37       2140.46    
  24  0.356994      -1.03004      -166.776       166.776       2144.75       2311.53    
  25  0.357951      -1.02736      -166.343       166.343       2154.33       2320.67    
  26  0.154816      -1.86552      -302.052       302.052       1904.36       2206.42    
  27  0.246912      -1.39872      -226.472       226.472       1952.21       2178.68    
  28  0.553458     -0.591570      -95.7830       95.7830       2283.35       2379.13    
  29  0.729602     -0.315256      -51.0442       51.0442       2200.82       2251.86    
  30  0.605470     -0.501750      -81.2401       81.2401       2122.33       2203.57    
  31  0.278987E-01  -3.57918      -579.516       579.516       2243.40       2822.92    
  32  0.187991      -1.67136      -270.616       270.616       2316.27       2586.89    
  33  0.543158     -0.610355      -98.8246       98.8246       2263.60       2362.43    
  34  0.996749     -0.325625E-02 -0.527230      0.527230       2100.54       2101.07    
  35  0.540727     -0.614841      -99.5509       99.5509       2173.41       2272.96    
  36  0.833271E-01  -2.48498      -402.351       402.351       2216.95       2619.31    
  37  0.404538     -0.905011      -146.533       146.533       2225.97       2372.50    
  38  0.147302      -1.91527      -310.108       310.108       2198.86       2508.97    
  39  0.364226E-01  -3.31257      -536.349       536.349       1966.08       2502.43    
  40  0.381304     -0.964158      -156.110       156.110       2175.09       2331.20    
  41  0.737758     -0.304140      -49.2443       49.2443       1984.75       2033.99    
  42  0.179374      -1.71828      -278.212       278.212       2328.25       2606.46    
  43  0.281757      -1.26671      -205.097       205.097       1776.18       1981.28    
  44  0.192633      -1.64697      -266.666       266.666       2333.64       2600.31    
  45  0.954983     -0.460617E-01  -7.45800       7.45800       2033.22       2040.68    
  46  0.710258     -0.342127      -55.3949       55.3949       2437.58       2492.98    
  47  0.831769     -0.184201      -29.8246       29.8246       2343.10       2372.92    
  48  0.912541     -0.915218E-01  -14.8186       14.8186       2303.66       2318.48    
  49  0.221543      -1.50714      -244.026       244.026       2277.30       2521.32    
  50  0.690803E-02  -4.97507      -805.530       805.530       2233.42       3038.95    
  51  0.162616      -1.81637      -294.094       294.094       2358.01       2652.10    
  52  0.869433     -0.139913      -22.6539       22.6539       2328.26       2350.91    
  53  0.541563     -0.613295      -99.3007       99.3007       2092.91       2192.21    
  54  0.310811      -1.16857      -189.207       189.207       2502.50       2691.71    
  55  0.879573     -0.128319      -20.7766       20.7766       2396.99       2417.76    
  56  0.262339      -1.33812      -216.659       216.659       2576.32       2792.97    
  57  0.651476     -0.428515      -69.3822       69.3822       2146.03       2215.41    
  58  0.498193     -0.696767      -112.816       112.816       2459.65       2572.47    
loop,thermsimp(1:2)        2   241.036       51.6976    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       2031.45         68.38          1.21         39.38          0.11          0.05        109.12
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2031.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        2
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        3
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      209     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -142.191       142.191       1852.82       1995.01    
   2  0.117190E-02  -6.74913      -1092.77       1092.77       1917.25       3010.03    
   3  0.432199     -0.838870      -135.824       135.824       1922.56       2058.39    
   4  0.466381     -0.762753      -123.500       123.500       1776.18       1899.68    
   5  0.696685     -0.361422      -58.5190       58.5190       1926.23       1984.75    
   6  0.193714      -1.64137      -265.760       265.760       1952.51       2218.27    
   7  0.535145     -0.625217      -101.231       101.231       2011.14       2112.37    
   8  0.812984     -0.207044      -33.5232       33.5232       1984.75       2018.27    
   9  0.956789     -0.441723E-01  -7.15208       7.15208       2033.22       2040.37    
  10  0.496711E-01  -3.00233      -486.117       486.117       2100.54       2586.66    
  11  0.206308E-01  -3.88097      -628.381       628.381       1862.49       2490.87    
  12  0.423434     -0.859358      -139.142       139.142       1957.84       2096.98    
  13  0.216826      -1.52866      -247.510       247.510       2101.37       2348.88    
  14  0.792422     -0.232661      -37.6710       37.6710       2122.01       2159.69    
  15  0.265940      -1.32449      -214.452       214.452       2095.76       2310.21    
  16  0.993400     -0.662201E-02  -1.07219       1.07219       2032.93       2034.00    
  17  0.645200E-01  -2.74078      -443.769       443.769       2160.71       2604.48    
  18  0.651527     -0.428436      -69.3695       69.3695       1952.21       2021.58    
  19  0.858875     -0.152131      -24.6321       24.6321       1913.70       1938.34    
  20  0.126056      -2.07103      -335.327       335.327       2092.91       2428.24    
  21  0.772661E-01  -2.56050      -414.579       414.579       2153.25       2567.83    
  22  0.441429     -0.817737      -132.402       132.402       2122.33       2254.74    
  23  0.166586      -1.79224      -290.188       290.188       1904.36       2194.55    
  24  0.217490      -1.52560      -247.016       247.016       2146.03       2393.05    
  25  0.632871     -0.457488      -74.0734       74.0734       2096.94       2171.02    
  26  0.201694      -1.60100      -259.224       259.224       2200.82       2460.04    
  27  0.282690      -1.26341      -204.562       204.562       2214.01       2418.57    
  28  0.255086E-01  -3.66874      -594.018       594.018       1925.45       2519.47    
  29  0.562308     -0.575706      -93.2144       93.2144       2173.41       2266.63    
  30  0.283366E-01  -3.56360      -576.994       576.994       2144.75       2721.74    
  31  0.404254E-01  -3.20830      -519.466       519.466       2303.66       2823.12    
  32  0.170475      -1.76917      -286.452       286.452       2154.33       2440.78    
  33  0.141712      -1.95396      -316.371       316.371       1979.33       2295.70    
  34  0.773173     -0.257253      -41.6526       41.6526       2182.87       2224.53    
  35  0.255978      -1.36266      -220.633       220.633       2175.09       2395.72    
  36  0.823739     -0.193902      -31.3953       31.3953       2328.26       2359.66    
  37  0.166307      -1.79392      -290.459       290.459       2263.60       2554.06    
  38  0.676319     -0.391090      -63.3226       63.3226       2225.97       2289.29    
  39  0.144546      -1.93416      -313.166       313.166       2343.10       2656.26    
  40  0.593436     -0.521826      -84.4906       84.4906       2283.35       2367.84    
  41  0.762921     -0.270600      -43.8138       43.8138       2396.99       2440.80    
  42  0.855796     -0.155724      -25.2137       25.2137       2167.72       2192.94    
  43  0.433555     -0.835737      -135.317       135.317       2437.58       2572.90    
  44  0.252891      -1.37480      -222.598       222.598       1966.08       2188.68    
  45  0.942909     -0.587850E-01  -9.51808       9.51808       2198.86       2208.38    
  46  0.432313     -0.838605      -135.781       135.781       2277.30       2413.08    
  47  0.975713     -0.245869E-01  -3.98094       3.98094       2131.53       2135.51    
  48  0.541226     -0.613919      -99.4017       99.4017       2042.25       2141.66    
  49  0.255057      -1.36627      -221.217       221.217       2459.65       2680.87    
  50  0.202141      -1.59879      -258.865       258.865       2316.27       2575.14    
  51  0.949562     -0.517549E-01  -8.37981       8.37981       2333.64       2342.02    
  52  0.255660E-01  -3.66649      -593.654       593.654       2328.25       2921.90    
  53  0.306802      -1.18155      -191.309       191.309       2216.95       2408.26    
  54  0.243277E-01  -3.71614      -601.692       601.692       2358.01       2959.70    
  55  0.466793     -0.761870      -123.357       123.357       2502.50       2625.85    
  56  0.200407      -1.60740      -260.260       260.260       2576.32       2836.58    
  57  0.282970      -1.26241      -204.402       204.402       2243.40       2447.80    
  58  0.214232      -1.54069      -249.459       249.459       2031.45       2280.91    
loop,thermsimp(1:2)        3   142.191       1092.77    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       2520.79         68.34          1.23         39.32          0.07          0.05        109.00
Just calling func    0   0        109.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2520.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        3
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        4
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      210     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -68.1072       68.1072       1776.18       1844.29    
   2  0.880966     -0.126736      -20.5202       20.5202       1913.70       1934.22    
   3  0.854972     -0.156687      -25.3697       25.3697       1926.23       1951.60    
   4  0.797101     -0.226774      -36.7177       36.7177       1852.82       1889.54    
   5  0.158477      -1.84214      -298.268       298.268       1984.75       2283.01    
   6  0.593839     -0.521148      -84.3807       84.3807       1952.21       2036.59    
   7  0.817101     -0.201993      -32.7053       32.7053       2032.93       2065.63    
   8  0.997190     -0.281377E-02 -0.455586      0.455586       2033.22       2033.68    
   9  0.402857     -0.909174      -147.207       147.207       1922.56       2069.77    
  10  0.690455     -0.370405      -59.9735       59.9735       1957.84       2017.81    
  11  0.609635     -0.494895      -80.1301       80.1301       2011.14       2091.27    
  12  0.491117     -0.711073      -115.132       115.132       2131.53       2246.67    
  13  0.990676     -0.936814E-02  -1.51683       1.51683       2042.25       2043.77    
  14  0.976919     -0.233519E-01  -3.78098       3.78098       2122.01       2125.80    
  15  0.692556     -0.367366      -59.4815       59.4815       2096.94       2156.42    
  16  0.549694     -0.598394      -96.8880       96.8880       1966.08       2062.97    
  17  0.538267E-01  -2.92199      -473.108       473.108       2167.72       2640.83    
  18  0.602193     -0.507178      -82.1189       82.1189       1904.36       1986.48    
  19  0.537276     -0.621243      -100.588       100.588       2198.86       2299.45    
  20  0.338220      -1.08406      -175.523       175.523       1952.51       2128.03    
  21  0.306772      -1.18165      -191.325       191.325       2182.87       2374.20    
  22  0.895389     -0.110497      -17.8910       17.8910       2122.33       2140.23    
  23  0.120096      -2.11946      -343.169       343.169       2173.41       2516.58    
  24  0.680166     -0.385418      -62.4043       62.4043       2031.45       2093.85    
  25  0.369434     -0.995782      -161.230       161.230       2225.97       2387.20    
  26  0.235484      -1.44611      -234.145       234.145       1979.33       2213.48    
  27  0.260836      -1.34386      -217.589       217.589       2095.76       2313.35    
  28  0.720259     -0.328144      -53.1309       53.1309       2333.64       2386.77    
  29  0.695069     -0.363744      -58.8950       58.8950       2101.37       2160.26    
  30  0.105076      -2.25307      -364.803       364.803       2328.26       2693.06    
  31  0.968349     -0.321628E-01  -5.20759       5.20759       2283.35       2288.56    
  32  0.974131     -0.262091E-01  -4.24360       4.24360       2146.03       2150.27    
  33  0.647785E-01  -2.73678      -443.121       443.121       2175.09       2618.21    
  34  0.910402     -0.938690E-01  -15.1986       15.1986       2216.95       2232.15    
  35  0.488733     -0.715939      -115.920       115.920       2277.30       2393.22    
  36  0.377436E-01  -3.27694      -530.580       530.580       2214.01       2744.59    
  37  0.154608      -1.86686      -302.270       302.270       2092.91       2395.18    
  38  0.277804      -1.28084      -207.385       207.385       2154.33       2361.71    
  39  0.969547     -0.309263E-01  -5.00738       5.00738       2396.99       2401.99    
  40  0.380083     -0.967367      -156.630       156.630       2243.40       2400.03    
  41  0.751822     -0.285256      -46.1867       46.1867       2200.82       2247.00    
  42  0.137692      -1.98274      -321.032       321.032       1862.49       2183.53    
  43  0.293470      -1.22598      -198.503       198.503       1925.45       2123.96    
  44  0.433705     -0.835390      -135.261       135.261       2263.60       2398.87    
  45  0.418034     -0.872194      -141.220       141.220       2153.25       2294.47    
  46  0.166728      -1.79139      -290.051       290.051       2437.58       2727.63    
  47  0.921960     -0.812537E-01  -13.1561       13.1561       2316.27       2329.43    
  48  0.412601     -0.885275      -143.338       143.338       2100.54       2243.88    
  49  0.925181     -0.777655E-01  -12.5913       12.5913       2160.71       2173.30    
  50  0.687711     -0.374386      -60.6181       60.6181       2502.50       2563.12    
  51  0.729890     -0.314862      -50.9804       50.9804       2343.10       2394.08    
  52  0.355028      -1.03556      -167.671       167.671       2459.65       2627.32    
  53  0.123338      -2.09283      -338.857       338.857       2144.75       2483.61    
  54  0.638370E-01  -2.75142      -445.492       445.492       2303.66       2749.15    
  55  0.379414     -0.969128      -156.915       156.915       2576.32       2733.23    
  56  0.643705     -0.440515      -71.3253       71.3253       2328.25       2399.57    
  57  0.172292      -1.75856      -284.735       284.735       2358.01       2642.74    
  58  0.996763     -0.324212E-02 -0.524942      0.524942       2520.79       2521.31    
loop,thermsimp(1:2)        4   68.1072       20.5202    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212       2049.88         68.55          1.26         39.16          0.11          0.05        109.12
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    213       2752.04         68.53          1.23         39.01          0.27          0.05        109.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2049.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        4
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        5
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      212     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -74.7509       74.7509       1776.18       1850.93    
   2  0.876370     -0.131967      -21.3672       21.3672       1852.82       1874.19    
   3  0.840080     -0.174259      -28.2148       28.2148       1913.70       1941.92    
   4  0.608986E-01  -2.79854      -453.122       453.122       1926.23       2379.36    
   5  0.311901      -1.16507      -188.640       188.640       1904.36       2093.00    
   6  0.937552E-01  -2.36707      -383.260       383.260       1957.84       2341.10    
   7  0.608418     -0.496893      -80.4536       80.4536       2033.22       2113.67    
   8  0.297707      -1.21164      -196.181       196.181       1952.21       2148.39    
   9  0.365777      -1.00573      -162.841       162.841       2042.25       2205.10    
  10  0.194673      -1.63643      -264.960       264.960       1966.08       2231.04    
  11  0.941388     -0.604003E-01  -9.77962       9.77962       2032.93       2042.71    
  12  0.984881     -0.152343E-01  -2.46663       2.46663       1922.56       1925.03    
  13  0.750245     -0.287355      -46.5266       46.5266       2011.14       2057.67    
  14  0.437446     -0.826803      -133.870       133.870       2031.45       2165.32    
  15  0.174754      -1.74437      -282.437       282.437       1925.45       2207.89    
  16  0.300465E-01  -3.50501      -567.507       567.507       2122.01       2689.52    
  17  0.372924     -0.986380      -159.708       159.708       1952.51       2112.22    
  18  0.803506     -0.218771      -35.4219       35.4219       2122.33       2157.76    
  19  0.232583      -1.45851      -236.152       236.152       2146.03       2382.18    
  20  0.383368     -0.958759      -155.236       155.236       2096.94       2252.18    
  21  0.622786     -0.473552      -76.6744       76.6744       2101.37       2178.04    
  22  0.356422      -1.03164      -167.036       167.036       2160.71       2327.75    
  23  0.919964     -0.834212E-01  -13.5070       13.5070       1862.49       1876.00    
  24  0.550740     -0.596492      -96.5800       96.5800       1979.33       2075.91    
  25  0.402627     -0.909745      -147.300       147.300       2216.95       2364.25    
  26  0.256265      -1.36154      -220.452       220.452       2100.54       2320.99    
  27  0.763510     -0.269828      -43.6888       43.6888       2131.53       2175.22    
  28  0.388963     -0.944271      -152.890       152.890       2200.82       2353.71    
  29  0.981923     -0.182423E-01  -2.95367       2.95367       1984.75       1987.70    
  30  0.656629     -0.420635      -68.1065       68.1065       2283.35       2351.46    
  31  0.932472     -0.699161E-01  -11.3204       11.3204       2153.25       2164.57    
  32  0.336775      -1.08834      -176.217       176.217       2198.86       2375.07    
  33  0.810758     -0.209786      -33.9671       33.9671       2095.76       2129.73    
  34  0.557014     -0.585166      -94.7461       94.7461       2316.27       2411.02    
  35  0.652747     -0.426565      -69.0666       69.0666       2154.33       2223.39    
  36  0.890774     -0.115665      -18.7277       18.7277       2182.87       2201.60    
  37  0.703035     -0.352349      -57.0500       57.0500       2333.64       2390.69    
  38  0.534296     -0.626805      -101.488       101.488       2225.97       2327.46    
  39  0.604162     -0.503914      -81.5903       81.5903       2277.30       2358.89    
  40  0.545557     -0.605948      -98.1110       98.1110       2343.10       2441.21    
  41  0.371346     -0.990620      -160.395       160.395       2092.91       2253.31    
  42  0.491801     -0.709680      -114.907       114.907       2263.60       2378.51    
  43  0.879731     -0.128139      -20.7475       20.7475       2328.25       2348.99    
  44  0.995113     -0.489866E-02 -0.793157      0.793157       2243.40       2244.19    
  45  0.467927     -0.759444      -122.964       122.964       2396.99       2519.95    
  46  0.355083      -1.03540      -167.645       167.645       2144.75       2312.40    
  47  0.216960      -1.52804      -247.410       247.410       2173.41       2420.82    
  48  0.276988      -1.28378      -207.861       207.861       2520.79       2728.65    
  49  0.905458     -0.993144E-01  -16.0803       16.0803       2502.50       2518.58    
  50  0.704241     -0.350635      -56.7724       56.7724       2175.09       2231.86    
  51  0.784564     -0.242627      -39.2846       39.2846       2459.65       2498.94    
  52  0.329376      -1.11055      -179.813       179.813       2167.72       2347.54    
  53  0.845894     -0.167361      -27.0980       27.0980       2358.01       2385.10    
  54  0.645172     -0.438238      -70.9566       70.9566       2328.26       2399.22    
  55  0.279949      -1.27315      -206.139       206.139       2437.58       2643.72    
  56  0.149089      -1.90321      -308.156       308.156       2576.32       2884.47    
  57  0.887681     -0.119143      -19.2908       19.2908       2214.01       2233.30    
  58  0.582426     -0.540553      -87.5228       87.5228       2049.88       2137.41    
loop,thermsimp(1:2)        5   74.7509       21.3672    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       2506.28         68.35          1.23         39.42          0.09          0.05        109.16
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2506.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        5
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        6
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      213     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -248.146       248.146       1776.18       2024.33    
   2  0.942431     -0.592928E-01  -9.60030       9.60030       1852.82       1862.42    
   3  0.193824      -1.64081      -265.668       265.668       1862.49       2128.16    
   4  0.162512      -1.81700      -294.197       294.197       1922.56       2216.76    
   5  0.625243     -0.469616      -76.0370       76.0370       1913.70       1989.74    
   6  0.499178     -0.694793      -112.496       112.496       1984.75       2097.24    
   7  0.706095     -0.348006      -56.3468       56.3468       2032.93       2089.27    
   8  0.527414     -0.639770      -103.587       103.587       2011.14       2114.73    
   9  0.575748     -0.552085      -89.3899       89.3899       1979.33       2068.72    
  10  0.490522     -0.712286      -115.329       115.329       1904.36       2019.69    
  11  0.306517      -1.18248      -191.460       191.460       1952.51       2143.97    
  12  0.798470     -0.225057      -36.4398       36.4398       2033.22       2069.66    
  13  0.333550      -1.09796      -177.775       177.775       2095.76       2273.53    
  14  0.166731      -1.79138      -290.048       290.048       2049.88       2339.93    
  15  0.443580     -0.812878      -131.616       131.616       1952.21       2083.83    
  16  0.669985     -0.400500      -64.8463       64.8463       2122.33       2187.18    
  17  0.339921      -1.07904      -174.711       174.711       2153.25       2327.96    
  18  0.201260      -1.60316      -259.573       259.573       2031.45       2291.02    
  19  0.772250     -0.258447      -41.8459       41.8459       2131.53       2173.38    
  20  0.401372E-01  -3.21545      -520.624       520.624       2101.37       2621.99    
  21  0.940962     -0.608526E-01  -9.85285       9.85285       2182.87       2192.73    
  22  0.115324      -2.16001      -349.735       349.735       2042.25       2391.99    
  23  0.939991E-01  -2.36447      -382.839       382.839       1925.45       2308.29    
  24  0.412221     -0.886196      -143.487       143.487       2154.33       2297.81    
  25  0.136462      -1.99171      -322.484       322.484       1966.08       2288.57    
  26  0.310095      -1.17088      -189.580       189.580       2175.09       2364.67    
  27  0.985727     -0.143755E-01  -2.32758       2.32758       2214.01       2216.34    
  28  0.900161     -0.105182      -17.0303       17.0303       2243.40       2260.43    
  29  0.250220      -1.38542      -224.317       224.317       2096.94       2321.26    
  30  0.780405     -0.247942      -40.1451       40.1451       2092.91       2133.06    
  31  0.228719      -1.47526      -238.864       238.864       2144.75       2383.61    
  32  0.407088     -0.898727      -145.516       145.516       2100.54       2246.06    
  33  0.975627     -0.246749E-01  -3.99520       3.99520       2225.97       2229.97    
  34  0.885140     -0.122009      -19.7550       19.7550       2160.71       2180.47    
  35  0.896135     -0.109664      -17.7561       17.7561       1957.84       1975.60    
  36  0.856661     -0.154713      -25.0501       25.0501       2167.72       2192.77    
  37  0.258643      -1.35231      -218.957       218.957       2328.25       2547.20    
  38  0.336283      -1.08980      -176.453       176.453       2283.35       2459.80    
  39  0.868205     -0.141327      -22.8827       22.8827       2200.82       2223.70    
  40  0.937935     -0.640747E-01  -10.3745       10.3745       2277.30       2287.67    
  41  0.418906     -0.870109      -140.882       140.882       2216.95       2357.84    
  42  0.351040      -1.04685      -169.500       169.500       2198.86       2368.36    
  43  0.611628E-01  -2.79422      -452.421       452.421       2263.60       2716.03    
  44  0.153518      -1.87394      -303.415       303.415       1926.23       2229.65    
  45  0.938341     -0.636423E-01  -10.3045       10.3045       2146.03       2156.33    
  46  0.598133     -0.513942      -83.2140       83.2140       2358.01       2441.22    
  47  0.795771     -0.228444      -36.9882       36.9882       2333.64       2370.63    
  48  0.295375      -1.21951      -197.455       197.455       2328.26       2525.72    
  49  0.804738     -0.217239      -35.1739       35.1739       2316.27       2351.45    
  50  0.260094      -1.34671      -218.051       218.051       2173.41       2391.46    
  51  0.640517     -0.445479      -72.1290       72.1290       2343.10       2415.22    
  52  0.221872      -1.50566      -243.786       243.786       2459.65       2703.44    
  53  0.837141     -0.177762      -28.7821       28.7821       2502.50       2531.28    
  54  0.212745      -1.54766      -250.587       250.587       2396.99       2647.57    
  55  0.162033      -1.81996      -294.675       294.675       2437.58       2732.26    
  56  0.631631     -0.459450      -74.3911       74.3911       2122.01       2196.41    
  57  0.816014E-01  -2.50591      -405.740       405.740       2520.79       2926.53    
  58  0.754954     -0.281099      -45.5136       45.5136       2506.28       2551.79    
loop,thermsimp(1:2)        6   248.146       9.60030    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       1908.00         68.75          1.16         38.98          0.28          0.05        109.21
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216       2360.80         68.71          1.16         39.10          0.09          0.05        109.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1908.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        6
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        7
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      215     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -215.506       215.506       1852.82       2068.33    
   2  0.401807     -0.911784      -147.630       147.630       1957.84       2105.47    
   3  0.418885     -0.870159      -140.890       140.890       1913.70       2054.59    
   4  0.753378     -0.283189      -45.8520       45.8520       1904.36       1950.22    
   5  0.792066     -0.233111      -37.7438       37.7438       1776.18       1813.92    
   6  0.868474     -0.141017      -22.8325       22.8325       1979.33       2002.16    
   7  0.318670      -1.14360      -185.164       185.164       2033.22       2218.38    
   8  0.863267     -0.147031      -23.8063       23.8063       1952.21       1976.02    
   9  0.589255     -0.528896      -85.6353       85.6353       2032.93       2118.56    
  10  0.632079E-01  -2.76133      -447.095       447.095       1984.75       2431.84    
  11  0.992270     -0.775975E-02  -1.25641       1.25641       2011.14       2012.40    
  12  0.466140     -0.763269      -123.583       123.583       1862.49       1986.08    
  13  0.177509      -1.72873      -279.905       279.905       2092.91       2372.82    
  14  0.933326     -0.690005E-01  -11.1721       11.1721       1952.51       1963.68    
  15  0.876357     -0.131982      -21.3696       21.3696       2146.03       2167.40    
  16  0.673496     -0.395274      -64.0001       64.0001       2131.53       2195.53    
  17  0.648708     -0.432773      -70.0717       70.0717       2160.71       2230.78    
  18  0.400813     -0.914259      -148.031       148.031       2122.33       2270.36    
  19  0.763164     -0.270282      -43.7623       43.7623       2182.87       2226.64    
  20  0.196240      -1.62842      -263.662       263.662       2167.72       2431.39    
  21  0.923666     -0.794046E-01  -12.8567       12.8567       2122.01       2134.87    
  22  0.999600     -0.400298E-03 -0.648135E-01  0.648135E-01   2214.01       2214.08    
  23  0.379715     -0.968335      -156.786       156.786       1922.56       2079.35    
  24  0.197375      -1.62265      -262.728       262.728       2200.82       2463.55    
  25  0.760736     -0.273468      -44.2782       44.2782       1926.23       1970.51    
  26  0.392182     -0.936030      -151.556       151.556       2225.97       2377.53    
  27  0.256208      -1.36177      -220.488       220.488       2100.54       2321.03    
  28  0.251796      -1.37914      -223.300       223.300       2243.40       2466.70    
  29  0.332089E-01  -3.40494      -551.305       551.305       2095.76       2647.06    
  30  0.970457     -0.299883E-01  -4.85551       4.85551       2277.30       2282.15    
  31  0.467370E-01  -3.06322      -495.976       495.976       1966.08       2462.06    
  32  0.716125     -0.333901      -54.0630       54.0630       2031.45       2085.51    
  33  0.757897     -0.277208      -44.8836       44.8836       2154.33       2199.21    
  34  0.765628     -0.267059      -43.2404       43.2404       1925.45       1968.69    
  35  0.323816      -1.12758      -182.570       182.570       2096.94       2279.51    
  36  0.909845     -0.944807E-01  -15.2977       15.2977       2153.25       2168.55    
  37  0.515782     -0.662071      -107.198       107.198       2049.88       2157.08    
  38  0.464370     -0.767074      -124.199       124.199       2316.27       2440.47    
  39  0.445707     -0.808094      -130.841       130.841       2216.95       2347.80    
  40  0.786320     -0.240391      -38.9226       38.9226       2175.09       2214.01    
  41  0.631860     -0.459087      -74.3322       74.3322       2198.86       2273.19    
  42  0.672488     -0.396772      -64.2426       64.2426       2333.64       2397.89    
  43  0.251717E-02  -5.98462      -968.990       968.990       2144.75       3113.74    
  44  0.245023      -1.40640      -227.716       227.716       2173.41       2401.13    
  45  0.252688      -1.37560      -222.728       222.728       2042.25       2264.98    
  46  0.268946      -1.31324      -212.632       212.632       2343.10       2555.73    
  47  0.550357     -0.597189      -96.6928       96.6928       2358.01       2454.70    
  48  0.826205     -0.190912      -30.9112       30.9112       2283.35       2314.26    
  49  0.964276     -0.363780E-01  -5.89009       5.89009       2328.26       2334.15    
  50  0.415479     -0.878324      -142.212       142.212       2502.50       2644.71    
  51  0.599143E-01  -2.81484      -455.760       455.760       2328.25       2784.01    
  52  0.348555      -1.05396      -170.650       170.650       2506.28       2676.93    
  53  0.243819      -1.41133      -228.513       228.513       2101.37       2329.88    
  54  0.233297      -1.45544      -235.656       235.656       2396.99       2632.64    
  55  0.705284     -0.349155      -56.5329       56.5329       2459.65       2516.18    
  56  0.258436      -1.35311      -219.086       219.086       2263.60       2482.69    
  57  0.328631      -1.11282      -180.181       180.181       2437.58       2617.76    
  58  0.676481     -0.390852      -63.2841       63.2841       1908.00       1971.29    
loop,thermsimp(1:2)        7   215.506       147.630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217       2164.62         68.62          1.20         39.02          0.34          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2164.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        7
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        8
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      216     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -363.671       363.671       1776.18       2139.85    
   2  0.476819     -0.740619      -119.916       119.916       1904.36       2024.28    
   3  0.564430     -0.571938      -92.6044       92.6044       1952.51       2045.11    
   4  0.211741      -1.55239      -251.353       251.353       1925.45       2176.81    
   5  0.154226E-01  -4.17192      -675.489       675.489       1926.23       2601.72    
   6  0.489577     -0.714213      -115.641       115.641       1908.00       2023.65    
   7  0.583965     -0.537914      -87.0954       87.0954       1952.21       2039.31    
   8  0.430258     -0.843370      -136.553       136.553       1862.49       1999.05    
   9  0.280982      -1.26946      -205.543       205.543       1979.33       2184.87    
  10  0.535183     -0.625146      -101.220       101.220       2011.14       2112.36    
  11  0.306750      -1.18172      -191.337       191.337       1913.70       2105.04    
  12  0.924930     -0.780370E-01  -12.6352       12.6352       1852.82       1865.46    
  13  0.829670E-01  -2.48931      -403.053       403.053       1922.56       2325.61    
  14  0.330275      -1.10783      -179.372       179.372       2031.45       2210.82    
  15  0.229751      -1.47076      -238.135       238.135       1957.84       2195.98    
  16  0.455737     -0.785839      -127.238       127.238       2032.93       2160.16    
  17  0.830949     -0.185187      -29.9843       29.9843       2122.01       2152.00    
  18  0.148624      -1.90634      -308.662       308.662       2049.88       2358.55    
  19  0.883001     -0.124429      -20.1467       20.1467       2146.03       2166.18    
  20  0.668001     -0.403466      -65.3264       65.3264       2153.25       2218.58    
  21  0.610583     -0.493341      -79.8785       79.8785       2131.53       2211.41    
  22  0.689050     -0.372441      -60.3032       60.3032       2154.33       2214.63    
  23  0.124417      -2.08412      -337.446       337.446       2175.09       2512.54    
  24  0.785584E-01  -2.54391      -411.893       411.893       2214.01       2625.91    
  25  0.936565     -0.655366E-01  -10.6112       10.6112       2033.22       2043.83    
  26  0.483719     -0.726252      -117.590       117.590       2182.87       2300.46    
  27  0.715685     -0.334515      -54.1625       54.1625       2160.71       2214.87    
  28  0.786437     -0.240243      -38.8985       38.8985       2042.25       2081.15    
  29  0.361023      -1.01881      -164.960       164.960       2122.33       2287.29    
  30  0.325559      -1.12221      -181.701       181.701       2198.86       2380.56    
  31  0.850460     -0.161978      -26.2264       26.2264       2096.94       2123.17    
  32  0.301358      -1.19946      -194.208       194.208       2277.30       2471.51    
  33  0.304725      -1.18834      -192.409       192.409       2283.35       2475.76    
  34  0.887065     -0.119838      -19.4033       19.4033       2100.54       2119.94    
  35  0.762822     -0.270730      -43.8348       43.8348       2101.37       2145.20    
  36  0.364130      -1.01024      -163.572       163.572       2328.26       2491.83    
  37  0.762041     -0.271754      -44.0006       44.0006       2216.95       2260.95    
  38  0.941180     -0.606207E-01  -9.81529       9.81529       2092.91       2102.73    
  39  0.449403     -0.799835      -129.504       129.504       2225.97       2355.47    
  40  0.743855     -0.295910      -47.9117       47.9117       2333.64       2381.55    
  41  0.743104     -0.296920      -48.0753       48.0753       2173.41       2221.49    
  42  0.350527      -1.04832      -169.736       169.736       2167.72       2337.46    
  43  0.607240     -0.498831      -80.7674       80.7674       1984.75       2065.51    
  44  0.557347     -0.584567      -94.6491       94.6491       2316.27       2410.92    
  45  0.217970      -1.52340      -246.658       246.658       2358.01       2604.66    
  46  0.364570      -1.00904      -163.376       163.376       1966.08       2129.46    
  47  0.330900      -1.10594      -179.066       179.066       2200.82       2379.88    
  48  0.861127     -0.149514      -24.2082       24.2082       2243.40       2267.61    
  49  0.710764E-01  -2.64400      -428.099       428.099       2263.60       2691.70    
  50  0.264543      -1.32975      -215.305       215.305       2459.65       2674.96    
  51  0.985836     -0.142654E-01  -2.30976       2.30976       2343.10       2345.40    
  52  0.296563      -1.21550      -196.805       196.805       2437.58       2634.39    
  53  0.875112     -0.133403      -21.5997       21.5997       2396.99       2418.59    
  54  0.808637     -0.212405      -34.3912       34.3912       2502.50       2536.89    
  55  0.394372     -0.930461      -150.654       150.654       2095.76       2246.41    
  56  0.209815      -1.56153      -252.833       252.833       2506.28       2759.11    
  57  0.154667      -1.86648      -302.208       302.208       2328.25       2630.45    
  58  0.741232     -0.299442      -48.4836       48.4836       2164.62       2213.11    
loop,thermsimp(1:2)        8   363.671       119.916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218       2532.14         68.34          1.21         39.27          0.23          0.05        109.09
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2532.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        8
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:        9
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      217     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -71.9005       71.9005       1852.82       1924.72    
   2  0.805197     -0.216668      -35.0814       35.0814       1862.49       1897.57    
   3  0.976428     -0.238543E-01  -3.86233       3.86233       1908.00       1911.87    
   4  0.599028     -0.512447      -82.9720       82.9720       1904.36       1987.34    
   5  0.591081     -0.525802      -85.1344       85.1344       1952.21       2037.35    
   6  0.151500      -1.88717      -305.557       305.557       2033.22       2338.78    
   7  0.565682     -0.569723      -92.2457       92.2457       1952.51       2044.76    
   8  0.345258      -1.06346      -172.189       172.189       1984.75       2156.94    
   9  0.658101     -0.418397      -67.7440       67.7440       2042.25       2110.00    
  10  0.691977E-01  -2.67079      -432.436       432.436       2092.91       2525.35    
  11  0.289062      -1.24111      -200.953       200.953       1913.70       2114.66    
  12  0.949819     -0.514835E-01  -8.33587       8.33587       2011.14       2019.48    
  13  0.791632     -0.233658      -37.8324       37.8324       2100.54       2138.37    
  14  0.400532     -0.914962      -148.144       148.144       2096.94       2245.09    
  15  0.241886      -1.41929      -229.802       229.802       1966.08       2195.89    
  16  0.383016     -0.959678      -155.385       155.385       1776.18       1931.56    
  17  0.993978     -0.604041E-02 -0.978022      0.978022       2101.37       2102.35    
  18  0.807089     -0.214322      -34.7015       34.7015       2122.01       2156.72    
  19  0.732161     -0.311755      -50.4772       50.4772       2032.93       2083.40    
  20  0.176507      -1.73440      -280.822       280.822       2146.03       2426.85    
  21  0.628098     -0.465059      -75.2992       75.2992       1925.45       2000.75    
  22  0.383392     -0.958697      -155.226       155.226       1979.33       2134.56    
  23  0.906421     -0.982517E-01  -15.9083       15.9083       1957.84       1973.75    
  24  0.329288      -1.11082      -179.857       179.857       2031.45       2211.30    
  25  0.869436     -0.139911      -22.6534       22.6534       2131.53       2154.19    
  26  0.354994      -1.03565      -167.686       167.686       2164.62       2332.31    
  27  0.127935      -2.05623      -332.932       332.932       2154.33       2487.26    
  28  0.840123     -0.174207      -28.2064       28.2064       2160.71       2188.92    
  29  0.625861     -0.468627      -75.8769       75.8769       2153.25       2229.13    
  30  0.488384     -0.716653      -116.036       116.036       2173.41       2289.45    
  31  0.888226E-01  -2.42111      -392.011       392.011       2095.76       2487.77    
  32  0.262955      -1.33577      -216.279       216.279       2216.95       2433.23    
  33  0.153205E-01  -4.17856      -676.565       676.565       2243.40       2919.97    
  34  0.432355     -0.838509      -135.766       135.766       2122.33       2258.10    
  35  0.225273      -1.49044      -241.323       241.323       2182.87       2424.20    
  36  0.812147     -0.208074      -33.6900       33.6900       1922.56       1956.25    
  37  0.832805E-01  -2.48554      -402.442       402.442       2167.72       2570.17    
  38  0.442280     -0.815813      -132.091       132.091       2343.10       2475.19    
  39  0.106639      -2.23831      -362.412       362.412       2225.97       2588.38    
  40  0.143053      -1.94454      -314.846       314.846       2049.88       2364.73    
  41  0.871774     -0.137225      -22.2186       22.2186       2200.82       2223.04    
  42  0.137692      -1.98273      -321.031       321.031       2198.86       2519.89    
  43  0.366512      -1.00372      -162.516       162.516       2333.64       2496.16    
  44  0.617157     -0.482633      -78.1446       78.1446       2316.27       2394.42    
  45  0.420337     -0.866700      -140.330       140.330       2396.99       2537.32    
  46  0.935846     -0.663044E-01  -10.7356       10.7356       2277.30       2288.03    
  47  0.979912     -0.202925E-01  -3.28562       3.28562       2283.35       2286.64    
  48  0.692793     -0.367024      -59.4261       59.4261       2328.26       2387.69    
  49  0.155424      -1.86160      -301.418       301.418       2175.09       2476.51    
  50  0.703218     -0.352088      -57.0078       57.0078       2502.50       2559.51    
  51  0.396734     -0.924489      -149.687       149.687       1926.23       2075.92    
  52  0.247863      -1.39488      -225.850       225.850       2358.01       2583.86    
  53  0.176690      -1.73336      -280.654       280.654       2214.01       2494.67    
  54  0.832421     -0.183417      -29.6976       29.6976       2328.25       2357.94    
  55  0.598900     -0.512660      -83.0065       83.0065       2437.58       2520.59    
  56  0.940005     -0.618702E-01  -10.0176       10.0176       2459.65       2469.67    
  57  0.556954     -0.585272      -94.7634       94.7634       2263.60       2358.37    
  58  0.920495     -0.828436E-01  -13.4135       13.4135       2532.14       2545.55    
loop,thermsimp(1:2)        9   71.9005       35.0814    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219       1965.45         68.56          1.25         39.56          0.00          0.04        109.41
Just calling func    0   0        109.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1965.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:        9
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       10
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      218     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -29.5533       29.5533       1862.49       1892.05    
   2  0.367543      -1.00091      -162.061       162.061       1908.00       2070.07    
   3  0.528755     -0.637231      -103.176       103.176       1852.82       1956.00    
   4  0.776829     -0.252535      -40.8888       40.8888       1776.18       1817.07    
   5  0.149594E-01  -4.20242      -680.427       680.427       1922.56       2602.99    
   6  0.892228     -0.114033      -18.4635       18.4635       1957.84       1976.30    
   7  0.191037      -1.65529      -268.013       268.013       1904.36       2172.38    
   8  0.516533     -0.660616      -106.962       106.962       1925.45       2032.42    
   9  0.273230      -1.29744      -210.073       210.073       2011.14       2221.22    
  10  0.822225     -0.195741      -31.6931       31.6931       1952.21       1983.91    
  11  0.359850      -1.02207      -165.486       165.486       1952.51       2118.00    
  12  0.611658     -0.491581      -79.5935       79.5935       1926.23       2005.83    
  13  0.249481      -1.38837      -224.796       224.796       2032.93       2257.72    
  14  0.441252     -0.818139      -132.468       132.468       2101.37       2233.84    
  15  0.910514E-01  -2.39633      -387.998       387.998       2042.25       2430.25    
  16  0.745146     -0.294175      -47.6308       47.6308       1913.70       1961.34    
  17  0.758301     -0.276675      -44.7974       44.7974       1979.33       2024.13    
  18  0.638521     -0.448601      -72.6344       72.6344       2100.54       2173.17    
  19  0.150180      -1.89592      -306.975       306.975       2131.53       2438.51    
  20  0.144147      -1.93692      -313.613       313.613       2122.01       2435.63    
  21  0.104928      -2.25448      -365.030       365.030       1984.75       2349.78    
  22  0.398120     -0.921002      -149.123       149.123       2160.71       2309.83    
  23  0.802258     -0.220325      -35.6736       35.6736       1966.08       2001.76    
  24  0.399299     -0.918044      -148.643       148.643       2031.45       2180.09    
  25  0.493060     -0.707124      -114.493       114.493       2200.82       2315.31    
  26  0.504407     -0.684372      -110.809       110.809       2153.25       2264.06    
  27  0.762058     -0.271733      -43.9972       43.9972       2096.94       2140.94    
  28  0.430267     -0.843350      -136.550       136.550       2122.33       2258.88    
  29  0.993832     -0.618725E-02  -1.00180       1.00180       2283.35       2284.35    
  30  0.705390     -0.349005      -56.5086       56.5086       2277.30       2333.81    
  31  0.969760     -0.307069E-01  -4.97185       4.97185       2173.41       2178.38    
  32  0.245618      -1.40398      -227.323       227.323       2164.62       2391.95    
  33  0.685790     -0.377184      -61.0712       61.0712       2033.22       2094.29    
  34  0.905089     -0.997222E-01  -16.1463       16.1463       2328.25       2344.39    
  35  0.414065     -0.881732      -142.764       142.764       2263.60       2406.37    
  36  0.714747E-01  -2.63841      -427.194       427.194       2049.88       2477.08    
  37  0.694510     -0.364548      -59.0252       59.0252       2328.26       2387.29    
  38  0.770213E-01  -2.56367      -415.093       415.093       2316.27       2731.37    
  39  0.846173     -0.167031      -27.0446       27.0446       2182.87       2209.92    
  40  0.485012     -0.723582      -117.158       117.158       2146.03       2263.19    
  41  0.345787      -1.06193      -171.941       171.941       2216.95       2388.90    
  42  0.851861     -0.160332      -25.9598       25.9598       2459.65       2485.61    
  43  0.774151     -0.255989      -41.4480       41.4480       2343.10       2384.54    
  44  0.512382     -0.668685      -108.269       108.269       2175.09       2283.36    
  45  0.839798     -0.174594      -28.2692       28.2692       2154.33       2182.60    
  46  0.430550     -0.842692      -136.443       136.443       2095.76       2232.20    
  47  0.988263     -0.118067E-01  -1.91166       1.91166       2214.01       2215.92    
  48  0.349495      -1.05127      -170.214       170.214       2333.64       2503.86    
  49  0.290701      -1.23546      -200.037       200.037       2198.86       2398.90    
  50  0.210466      -1.55843      -252.331       252.331       2437.58       2689.91    
  51  0.361038      -1.01877      -164.953       164.953       2092.91       2257.87    
  52  0.168890      -1.77851      -287.964       287.964       2396.99       2684.95    
  53  0.176000      -1.73727      -281.287       281.287       2532.14       2813.42    
  54  0.494423     -0.704364      -114.046       114.046       2502.50       2616.54    
  55  0.887313     -0.119558      -19.3580       19.3580       2167.72       2187.08    
  56  0.318781      -1.14325      -185.107       185.107       2358.01       2543.11    
  57  0.385435     -0.953382      -154.365       154.365       2225.97       2380.34    
  58  0.557906     -0.583564      -94.4868       94.4868       1965.45       2059.94    
loop,thermsimp(1:2)       10   29.5533       162.061    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       2497.87         68.62          1.21         39.05          0.15          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2497.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       10
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       11
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      219     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -13.6068       13.6068       1776.18       1789.79    
   2  0.309089      -1.17413      -190.107       190.107       1862.49       2052.60    
   3  0.237901      -1.43590      -232.491       232.491       1852.82       2085.31    
   4  0.542467     -0.611627      -99.0306       99.0306       1913.70       2012.74    
   5  0.523672     -0.646889      -104.740       104.740       1957.84       2062.58    
   6  0.850058     -0.162450      -26.3028       26.3028       1952.21       1978.52    
   7  0.589343     -0.528746      -85.6111       85.6111       1966.08       2051.69    
   8  0.979269     -0.209490E-01  -3.39191       3.39191       1926.23       1929.63    
   9  0.110419      -2.20347      -356.772       356.772       1979.33       2336.10    
  10  0.557914     -0.583550      -94.4845       94.4845       1925.45       2019.94    
  11  0.474464     -0.745569      -120.717       120.717       1965.45       2086.17    
  12  0.312482      -1.16321      -188.339       188.339       1908.00       2096.34    
  13  0.297011      -1.21399      -196.561       196.561       2033.22       2229.78    
  14  0.857571     -0.153651      -24.8782       24.8782       1952.51       1977.39    
  15  0.792567     -0.232479      -37.6414       37.6414       2096.94       2134.58    
  16  0.963006     -0.376958E-01  -6.10346       6.10346       1904.36       1910.47    
  17  0.294103      -1.22382      -198.153       198.153       2100.54       2298.69    
  18  0.403484     -0.907618      -146.955       146.955       2173.41       2320.37    
  19  0.449313     -0.800035      -129.536       129.536       2031.45       2160.98    
  20  0.721912     -0.325852      -52.7598       52.7598       2154.33       2207.09    
  21  0.512488     -0.668479      -108.236       108.236       2167.72       2275.96    
  22  0.885190     -0.121953      -19.7458       19.7458       2182.87       2202.62    
  23  0.694751E-01  -2.66679      -431.788       431.788       2214.01       2645.80    
  24  0.820879     -0.197380      -31.9584       31.9584       2011.14       2043.10    
  25  0.211527      -1.55340      -251.517       251.517       2095.76       2347.28    
  26  0.937420     -0.646236E-01  -10.4634       10.4634       2101.37       2111.83    
  27  0.515756E-01  -2.96471      -480.025       480.025       2032.93       2512.95    
  28  0.695222     -0.363525      -58.8595       58.8595       2092.91       2151.77    
  29  0.718776     -0.330205      -53.4646       53.4646       2122.33       2175.80    
  30  0.536080     -0.623471      -100.948       100.948       2146.03       2246.98    
  31  0.585855     -0.534682      -86.5722       86.5722       2153.25       2239.82    
  32  0.693572     -0.365900      -59.2441       59.2441       2175.09       2234.33    
  33  0.700823     -0.355500      -57.5601       57.5601       2283.35       2340.91    
  34  0.250985      -1.38236      -223.823       223.823       2160.71       2384.53    
  35  0.290600      -1.23581      -200.093       200.093       2200.82       2400.91    
  36  0.828609     -0.188007      -30.4409       30.4409       2277.30       2307.74    
  37  0.225820      -1.48802      -240.930       240.930       2328.25       2569.18    
  38  0.999674     -0.326354E-03 -0.528410E-01  0.528410E-01   1984.75       1984.80    
  39  0.878216     -0.129862      -21.0265       21.0265       2225.97       2247.00    
  40  0.685898E-01  -2.67961      -433.865       433.865       2343.10       2776.96    
  41  0.273860      -1.29514      -209.700       209.700       2328.26       2537.96    
  42  0.697655     -0.360030      -58.2937       58.2937       2216.95       2275.25    
  43  0.293168      -1.22701      -198.669       198.669       2164.62       2363.29    
  44  0.319476      -1.14107      -184.755       184.755       2198.86       2383.61    
  45  0.874681     -0.133896      -21.6796       21.6796       2263.60       2285.28    
  46  0.408697     -0.894781      -144.877       144.877       2042.25       2187.13    
  47  0.142130E-01  -4.25360      -688.714       688.714       2122.01       2810.73    
  48  0.164528      -1.80468      -292.201       292.201       2131.53       2423.73    
  49  0.652669     -0.426685      -69.0859       69.0859       2049.88       2118.97    
  50  0.492107     -0.709060      -114.806       114.806       2459.65       2574.46    
  51  0.542705     -0.611189      -98.9597       98.9597       2333.64       2432.60    
  52  0.798603     -0.224891      -36.4129       36.4129       2358.01       2394.42    
  53  0.474092E-01  -3.04894      -493.664       493.664       1922.56       2416.23    
  54  0.425084     -0.855468      -138.512       138.512       2502.50       2641.01    
  55  0.349722      -1.05062      -170.109       170.109       2396.99       2567.10    
  56  0.499235     -0.694678      -112.478       112.478       2437.58       2550.06    
  57  0.193091      -1.64459      -266.282       266.282       2316.27       2582.56    
  58  0.876894     -0.131369      -21.2704       21.2704       2497.87       2519.14    
loop,thermsimp(1:2)       11   13.6068       190.107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221       2702.42         68.74          1.19         38.90          0.13          0.05        109.02
Just calling func    0   0        109.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    2702.4        3.393     -2.817      3.199     -102.6     0.5449    
                      0.3078      1.334     -99.70      4.832     0.5228    

                       3.303     -2.694      1.540      6704.      7000.    

                      -2.044      0.000      0.000      0.000     -1.221    



                      -1.934      0.000      0.000      7000.      486.8    

                      -1.544     -4.701     -7.121     -8.156      7.566    

                      -13.39     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.2930E-01 0.1279     0.6442E-01 0.6101E-01

                     -0.2486     0.1227     0.1525     0.2136     0.1290E-02



                     -0.8944    -0.5479      0.000     0.5821E-01 0.1273    

                      0.2087     0.2080    -0.7116     0.1086     0.3503    

                      0.1521     0.7969E-01-0.4286     -1.534      7000.    



                      -1.239     -1.185     -2.142     -1.982    -0.3807    

                     -0.3252      9.226      8.468    -0.1705E+05 -5.868    

                     -0.2928     -2.390      8.682      9.093    -0.1969E+05



                      -6.000     0.5744    -0.8705E-01  8.788      9.580    

                     -0.1944E+05 -6.000    -0.1549    -0.3570      9.757    

                       8.952    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2702.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       11
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       12
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      220     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -43.8252       43.8252       1776.18       1820.00    
   2  0.482922E-01  -3.03048      -490.676       490.676       1904.36       2395.04    
   3  0.612960     -0.489456      -79.2495       79.2495       1926.23       2005.48    
   4  0.910127     -0.941714E-01  -15.2476       15.2476       1952.51       1967.76    
   5  0.362433      -1.01492      -164.329       164.329       1952.21       2116.54    
   6  0.476779     -0.740702      -119.930       119.930       1984.75       2104.68    
   7  0.179006E-01  -4.02292      -651.364       651.364       1913.70       2565.07    
   8  0.589646     -0.528233      -85.5279       85.5279       1925.45       2010.98    
   9  0.926206     -0.766581E-01  -12.4120       12.4120       2011.14       2023.55    
  10  0.492629     -0.707999      -114.634       114.634       1966.08       2080.72    
  11  0.661123     -0.413815      -67.0021       67.0021       1862.49       1929.50    
  12  0.542248     -0.612032      -99.0961       99.0961       1957.84       2056.94    
  13  0.216527      -1.53004      -247.734       247.734       1852.82       2100.55    
  14  0.549832     -0.598143      -96.8473       96.8473       1965.45       2062.30    
  15  0.429556     -0.845003      -136.817       136.817       1908.00       2044.82    
  16  0.264838      -1.32864      -215.124       215.124       2101.37       2316.49    
  17  0.251706      -1.37949      -223.358       223.358       2049.88       2273.24    
  18  0.701724     -0.354215      -57.3521       57.3521       2096.94       2154.30    
  19  0.324289      -1.12612      -182.334       182.334       2092.91       2275.25    
  20  0.160749E-02  -6.43308      -1041.60       1041.60       2031.45       3073.05    
  21  0.533627     -0.628058      -101.691       101.691       2122.33       2224.03    
  22  0.883065     -0.124357      -20.1350       20.1350       2042.25       2062.39    
  23  0.484824     -0.723969      -117.220       117.220       2182.87       2300.09    
  24  0.724157     -0.322747      -52.2570       52.2570       2154.33       2206.58    
  25  0.847375     -0.165612      -26.8148       26.8148       2033.22       2060.04    
  26  0.167586      -1.78626      -289.219       289.219       2175.09       2464.31    
  27  0.890079     -0.116445      -18.8540       18.8540       2153.25       2172.10    
  28  0.235223      -1.44722      -234.325       234.325       2146.03       2380.35    
  29  0.206112      -1.57934      -255.715       255.715       2225.97       2481.69    
  30  0.463385     -0.769198      -124.543       124.543       2216.95       2341.50    
  31  0.487880E-01  -3.02027      -489.022       489.022       2167.72       2656.75    
  32  0.244157      -1.40994      -228.288       228.288       2263.60       2491.89    
  33  0.770602     -0.260583      -42.1918       42.1918       2100.54       2142.73    
  34  0.264159      -1.33120      -215.539       215.539       2277.30       2492.84    
  35  0.189030E-01  -3.96843      -642.542       642.542       2173.41       2815.95    
  36  0.635342     -0.453592      -73.4426       73.4426       1979.33       2052.77    
  37  0.139550      -1.96933      -318.861       318.861       2283.35       2602.21    
  38  0.561566     -0.577026      -93.4281       93.4281       2095.76       2189.19    
  39  0.951789     -0.494118E-01  -8.00043       8.00043       2164.62       2172.62    
  40  0.527693     -0.639242      -103.502       103.502       2198.86       2302.36    
  41  0.925337     -0.775972E-01  -12.5640       12.5640       2160.71       2173.28    
  42  0.795352     -0.228971      -37.0735       37.0735       2358.01       2395.08    
  43  0.530799     -0.633371      -102.551       102.551       2200.82       2303.37    
  44  0.642763     -0.441979      -71.5623       71.5623       1922.56       1994.12    
  45  0.485146     -0.723305      -117.113       117.113       2131.53       2248.65    
  46  0.795896     -0.228287      -36.9627       36.9627       2333.64       2370.61    
  47  0.519140     -0.655581      -106.147       106.147       2032.93       2139.07    
  48  0.694073E-01  -2.66776      -431.946       431.946       2497.87       2929.82    
  49  0.401486     -0.912583      -147.759       147.759       2328.26       2476.02    
  50  0.587982E-01  -2.83364      -458.805       458.805       2437.58       2896.39    
  51  0.752652     -0.284152      -46.0080       46.0080       2396.99       2443.00    
  52  0.139929      -1.96662      -318.423       318.423       2328.25       2646.67    
  53  0.136759      -1.98953      -322.132       322.132       2459.65       2781.78    
  54  0.690728     -0.370009      -59.9094       59.9094       2316.27       2376.18    
  55  0.409546     -0.892705      -144.541       144.541       2502.50       2647.04    
  56  0.422285     -0.862075      -139.581       139.581       2214.01       2353.59    
  57  0.160439      -1.82984      -296.276       296.276       2343.10       2639.37    
  58  0.230463      -1.46767      -237.635       237.635       2702.42       2940.06    
loop,thermsimp(1:2)       12   43.8252       490.676    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       2212.47         68.67          1.18         39.02          0.21          0.05        109.12
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223       6015.22         68.49          1.14         38.88          0.27          0.05        108.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2212.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       12
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       13
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      222     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -84.6619       84.6619       1776.18       1860.84    
   2  0.691791     -0.368472      -59.6604       59.6604       1862.49       1922.15    
   3  0.688173     -0.373715      -60.5094       60.5094       1952.51       2013.02    
   4  0.439966     -0.821058      -132.940       132.940       1922.56       2055.50    
   5  0.945690     -0.558403E-01  -9.04129       9.04129       1926.23       1935.28    
   6  0.238956      -1.43147      -231.775       231.775       1925.45       2157.23    
   7  0.280830E-01  -3.57259      -578.450       578.450       2011.14       2589.59    
   8  0.902031E-01  -2.40569      -389.513       389.513       1908.00       2297.52    
   9  0.198361      -1.61767      -261.922       261.922       1979.33       2241.25    
  10  0.201288      -1.60302      -259.550       259.550       1957.84       2217.39    
  11  0.710033     -0.342444      -55.4462       55.4462       2033.22       2088.67    
  12  0.182913      -1.69874      -275.049       275.049       1965.45       2240.50    
  13  0.817316     -0.201730      -32.6627       32.6627       2042.25       2074.92    
  14  0.894732     -0.111231      -18.0097       18.0097       1966.08       1984.09    
  15  0.854000     -0.157824      -25.5538       25.5538       1852.82       1878.37    
  16  0.248066      -1.39406      -225.717       225.717       1984.75       2210.46    
  17  0.670877     -0.399170      -64.6309       64.6309       1952.21       2016.84    
  18  0.701473     -0.354573      -57.4101       57.4101       2032.93       2090.34    
  19  0.199467      -1.61210      -261.021       261.021       2100.54       2361.56    
  20  0.391533     -0.937685      -151.824       151.824       2096.94       2248.77    
  21  0.586761     -0.533138      -86.3221       86.3221       2153.25       2239.57    
  22  0.163799      -1.80912      -292.920       292.920       2164.62       2457.54    
  23  0.955964     -0.450353E-01  -7.29181       7.29181       2160.71       2168.00    
  24  0.365727      -1.00587      -162.863       162.863       2095.76       2258.62    
  25  0.733577     -0.309822      -50.1643       50.1643       2154.33       2204.49    
  26  0.111597      -2.19286      -355.053       355.053       2122.33       2477.39    
  27  0.714895     -0.335619      -54.3412       54.3412       2131.53       2185.88    
  28  0.816688     -0.202498      -32.7871       32.7871       2049.88       2082.67    
  29  0.480603     -0.732714      -118.636       118.636       2092.91       2211.55    
  30  0.573891     -0.555316      -89.9130       89.9130       2182.87       2272.79    
  31  0.204452      -1.58742      -257.025       257.025       2198.86       2455.88    
  32  0.845356E-01  -2.47058      -400.020       400.020       2200.82       2600.84    
  33  0.524789E-01  -2.94734      -477.214       477.214       2101.37       2578.58    
  34  0.631781     -0.459213      -74.3527       74.3527       2216.95       2291.31    
  35  0.620363     -0.477450      -77.3055       77.3055       2214.01       2291.32    
  36  0.553551     -0.591402      -95.7558       95.7558       2333.64       2429.40    
  37  0.546271     -0.604640      -97.8993       97.8993       2316.27       2414.17    
  38  0.402204     -0.910797      -147.470       147.470       2146.03       2293.50    
  39  0.735174     -0.307648      -49.8122       49.8122       1904.36       1954.18    
  40  0.359565      -1.02286      -165.615       165.615       2358.01       2523.62    
  41  0.564111     -0.572504      -92.6961       92.6961       2396.99       2489.68    
  42  0.412661     -0.885128      -143.314       143.314       2175.09       2318.40    
  43  0.795853     -0.228341      -36.9714       36.9714       2328.26       2365.23    
  44  0.909991E-01  -2.39691      -388.091       388.091       2225.97       2614.06    
  45  0.830687     -0.185502      -30.0353       30.0353       2263.60       2293.64    
  46  0.592588     -0.523256      -84.7221       84.7221       2277.30       2362.02    
  47  0.489472     -0.714427      -115.675       115.675       1913.70       2029.38    
  48  0.992056     -0.797586E-02  -1.29140       1.29140       2283.35       2284.64    
  49  0.808208     -0.212936      -34.4771       34.4771       2343.10       2377.57    
  50  0.212569      -1.54849      -250.721       250.721       2328.25       2578.97    
  51  0.214041      -1.54159      -249.604       249.604       2502.50       2752.10    
  52  0.586527     -0.533536      -86.3866       86.3866       2167.72       2254.11    
  53  0.603460     -0.505075      -81.7783       81.7783       2459.65       2541.43    
  54  0.819887     -0.198589      -32.1541       32.1541       2173.41       2205.57    
  55  0.204248      -1.58842      -257.187       257.187       2437.58       2694.77    
  56  0.540917     -0.614489      -99.4940       99.4940       2497.87       2597.37    
  57  0.430522     -0.842757      -136.454       136.454       2702.42       2838.88    
  58  0.637009E-01  -2.75356      -445.837       445.837       2212.47       2658.30    
loop,thermsimp(1:2)       13   84.6619       59.6604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       2118.77         68.68          1.22         39.11          0.02          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2118.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       13
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       14
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      223     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -175.159       175.159       1776.18       1951.34    
   2  0.649641     -0.431335      -69.8389       69.8389       1852.82       1922.66    
   3  0.930116     -0.724456E-01  -11.7299       11.7299       1862.49       1874.22    
   4  0.297326      -1.21293      -196.389       196.389       1926.23       2122.62    
   5  0.751734     -0.285373      -46.2056       46.2056       1904.36       1950.57    
   6  0.409056     -0.893902      -144.735       144.735       1966.08       2110.82    
   7  0.115094      -2.16201      -350.058       350.058       1952.51       2302.57    
   8  0.606681     -0.499753      -80.9166       80.9166       1952.21       2033.13    
   9  0.140571      -1.96204      -317.681       317.681       1913.70       2231.39    
  10  0.447669E-01  -3.10629      -502.949       502.949       1922.56       2425.51    
  11  0.517394     -0.658951      -106.693       106.693       2042.25       2148.95    
  12  0.587057     -0.532633      -86.2404       86.2404       2049.88       2136.12    
  13  0.384993E-01  -3.25712      -527.370       527.370       2033.22       2560.59    
  14  0.829105E-01  -2.48999      -403.163       403.163       2032.93       2436.09    
  15  0.382179     -0.961866      -155.739       155.739       1925.45       2081.19    
  16  0.269516      -1.31113      -212.289       212.289       2160.71       2373.00    
  17  0.879580     -0.128311      -20.7752       20.7752       2131.53       2152.31    
  18  0.760503E-01  -2.57636      -417.147       417.147       2154.33       2571.47    
  19  0.482544     -0.728684      -117.984       117.984       2173.41       2291.40    
  20  0.561499     -0.577145      -93.4475       93.4475       1984.75       2078.19    
  21  0.254621      -1.36798      -221.494       221.494       2092.91       2314.41    
  22  0.479261     -0.735511      -119.089       119.089       1957.84       2076.93    
  23  0.638455     -0.448704      -72.6512       72.6512       2153.25       2225.90    
  24  0.289082      -1.24105      -200.942       200.942       1965.45       2166.40    
  25  0.656024     -0.421558      -68.2559       68.2559       1979.33       2047.59    
  26  0.597431     -0.515117      -83.4043       83.4043       2096.94       2180.35    
  27  0.859562     -0.151333      -24.5028       24.5028       2167.72       2192.23    
  28  0.554826     -0.589100      -95.3831       95.3831       2095.76       2191.14    
  29  0.128413      -2.05250      -332.328       332.328       2182.87       2515.20    
  30  0.311170      -1.16742      -189.020       189.020       2283.35       2472.37    
  31  0.606679     -0.499755      -80.9170       80.9170       2216.95       2297.87    
  32  0.923238     -0.798686E-01  -12.9318       12.9318       2214.01       2226.94    
  33  0.734154     -0.309037      -50.0372       50.0372       2146.03       2196.07    
  34  0.988670     -0.113947E-01  -1.84496       1.84496       2263.60       2265.45    
  35  0.136308      -1.99284      -322.667       322.667       1908.00       2230.67    
  36  0.345839      -1.06178      -171.917       171.917       2175.09       2347.01    
  37  0.349440      -1.05142      -170.240       170.240       2100.54       2270.78    
  38  0.625658E-01  -2.77154      -448.749       448.749       2277.30       2726.05    
  39  0.394804     -0.929365      -150.476       150.476       2328.26       2478.74    
  40  0.899667E-02  -4.71090      -762.757       762.757       2343.10       3105.85    
  41  0.823946     -0.193651      -31.3546       31.3546       2316.27       2347.63    
  42  0.834235     -0.181240      -29.3452       29.3452       2333.64       2362.99    
  43  0.777534     -0.251627      -40.7418       40.7418       2198.86       2239.60    
  44  0.384993     -0.954531      -154.551       154.551       2164.62       2319.17    
  45  0.247443E-01  -3.69916      -598.943       598.943       2122.33       2721.28    
  46  0.810695     -0.209863      -33.9796       33.9796       2396.99       2430.97    
  47  0.893618     -0.112477      -18.2115       18.2115       2358.01       2376.22    
  48  0.545617     -0.605837      -98.0931       98.0931       2459.65       2557.74    
  49  0.587193     -0.532402      -86.2030       86.2030       2101.37       2187.57    
  50  0.991207     -0.883185E-02  -1.42999       1.42999       2328.25       2329.68    
  51  0.477440     -0.739316      -119.705       119.705       2011.14       2130.85    
  52  0.444858     -0.810000      -131.150       131.150       2497.87       2629.02    
  53  0.103440      -2.26876      -367.343       367.343       2200.82       2568.16    
  54  0.320718      -1.13719      -184.127       184.127       2225.97       2410.10    
  55  0.161721      -1.82188      -294.987       294.987       2212.47       2507.45    
  56  0.912244     -0.918481E-01  -14.8714       14.8714       2437.58       2452.45    
  57  0.358583      -1.02559      -166.057       166.057       2502.50       2668.56    
  58  0.263871      -1.33229      -215.716       215.716       2118.77       2334.48    
loop,thermsimp(1:2)       14   175.159       69.8389    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       2620.57         68.59          1.18         39.27          0.00          0.04        109.08
Just calling func    0   0        109.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2620.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       14
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       15
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      224     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -245.361       245.361       1862.49       2107.85    
   2  0.894567E-01  -2.41400      -390.859       390.859       1852.82       2243.68    
   3  0.863615     -0.146628      -23.7410       23.7410       1904.36       1928.10    
   4  0.807990     -0.213206      -34.5209       34.5209       1776.18       1810.70    
   5  0.318173      -1.14516      -185.417       185.417       1952.21       2137.63    
   6  0.464606     -0.766566      -124.117       124.117       1979.33       2103.45    
   7  0.574933     -0.553501      -89.6192       89.6192       1957.84       2047.46    
   8  0.974939     -0.253802E-01  -4.10939       4.10939       1984.75       1988.86    
   9  0.415757     -0.877653      -142.104       142.104       1925.45       2067.56    
  10  0.187109      -1.67606      -271.377       271.377       1966.08       2237.46    
  11  0.730515E-01  -2.61659      -423.661       423.661       1926.23       2349.90    
  12  0.209185      -1.56454      -253.320       253.320       2011.14       2264.46    
  13  0.496690     -0.699790      -113.305       113.305       2049.88       2163.19    
  14  0.862986     -0.147356      -23.8590       23.8590       2042.25       2066.11    
  15  0.888200     -0.118558      -19.1961       19.1961       2131.53       2150.73    
  16  0.380888     -0.965250      -156.287       156.287       1965.45       2121.74    
  17  0.135305      -2.00022      -323.863       323.863       2096.94       2420.81    
  18  0.927079     -0.757167E-01  -12.2595       12.2595       2101.37       2113.63    
  19  0.603067     -0.505727      -81.8839       81.8839       2095.76       2177.64    
  20  0.136202      -1.99362      -322.793       322.793       2167.72       2490.52    
  21  0.954653     -0.464076E-01  -7.51401       7.51401       2146.03       2153.54    
  22  0.151192      -1.88920      -305.887       305.887       2153.25       2459.14    
  23  0.449259     -0.800155      -129.556       129.556       2214.01       2343.57    
  24  0.780874     -0.247341      -40.0479       40.0479       1908.00       1948.05    
  25  0.456238     -0.784740      -127.060       127.060       1913.70       2040.76    
  26  0.163284      -1.81227      -293.430       293.430       2198.86       2492.29    
  27  0.821444     -0.196692      -31.8470       31.8470       2263.60       2295.45    
  28  0.861448     -0.149141      -24.1479       24.1479       2100.54       2124.69    
  29  0.924167     -0.788621E-01  -12.7688       12.7688       2173.41       2186.18    
  30  0.195059      -1.63445      -264.640       264.640       2216.95       2481.59    
  31  0.375134     -0.980472      -158.752       158.752       1952.51       2111.26    
  32  0.909862     -0.944628E-01  -15.2948       15.2948       2092.91       2108.21    
  33  0.831459     -0.184574      -29.8850       29.8850       2164.62       2194.51    
  34  0.627278     -0.466365      -75.5107       75.5107       2328.25       2403.76    
  35  0.918890     -0.845891E-01  -13.6961       13.6961       2118.77       2132.46    
  36  0.475784     -0.742791      -120.268       120.268       2175.09       2295.36    
  37  0.344524      -1.06559      -172.534       172.534       2316.27       2488.81    
  38  0.286778      -1.24905      -202.237       202.237       2333.64       2535.88    
  39  0.336148      -1.09020      -176.518       176.518       2160.71       2337.23    
  40  0.709840     -0.342716      -55.4903       55.4903       2358.01       2413.50    
  41  0.219827      -1.51491      -245.284       245.284       2225.97       2471.26    
  42  0.347594      -1.05672      -171.097       171.097       1922.56       2093.66    
  43  0.905734     -0.990099E-01  -16.0310       16.0310       2396.99       2413.02    
  44  0.826231     -0.190881      -30.9061       30.9061       2032.93       2063.83    
  45  0.400277     -0.915599      -148.248       148.248       2437.58       2585.83    
  46  0.555153     -0.588512      -95.2879       95.2879       2283.35       2378.64    
  47  0.864397     -0.145723      -23.5946       23.5946       2328.26       2351.86    
  48  0.277380E-01  -3.58495      -580.452       580.452       2212.47       2792.92    
  49  0.993968     -0.605015E-02 -0.979600      0.979600       2182.87       2183.85    
  50  0.717076     -0.332573      -53.8480       53.8480       2459.65       2513.50    
  51  0.736253     -0.306182      -49.5749       49.5749       2033.22       2082.80    
  52  0.278813      -1.27722      -206.798       206.798       2200.82       2407.62    
  53  0.646460     -0.436245      -70.6338       70.6338       2154.33       2224.96    
  54  0.600312     -0.510306      -82.6253       82.6253       2497.87       2580.50    
  55  0.295434      -1.21931      -197.423       197.423       2502.50       2699.92    
  56  0.946129     -0.553767E-01  -8.96622       8.96622       2122.33       2131.30    
  57  0.722008     -0.325719      -52.7383       52.7383       2277.30       2330.04    
  58  0.789514     -0.236338      -38.2663       38.2663       2620.57       2658.83    
loop,thermsimp(1:2)       15   245.361       390.859    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       2002.85         68.76          1.17         39.01          0.24          0.05        109.23
Just calling func    0   0        109.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2002.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       15
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       16
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      225     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -236.751       236.751       1776.18       2012.93    
   2  0.641193     -0.444425      -71.9583       71.9583       1904.36       1976.32    
   3  0.353033      -1.04119      -168.583       168.583       1908.00       2076.59    
   4  0.928955     -0.736953E-01  -11.9322       11.9322       1984.75       1996.68    
   5  0.350257      -1.04909      -169.861       169.861       1913.70       2083.57    
   6  0.682617     -0.381821      -61.8219       61.8219       1957.84       2019.66    
   7  0.162763      -1.81546      -293.947       293.947       2032.93       2326.87    
   8  0.874032     -0.134639      -21.7998       21.7998       2042.25       2064.05    
   9  0.518909     -0.656027      -106.219       106.219       1925.45       2031.67    
  10  0.461984     -0.772226      -125.034       125.034       2033.22       2158.25    
  11  0.449468     -0.799691      -129.481       129.481       1922.56       2052.04    
  12  0.523281     -0.647637      -104.861       104.861       1979.33       2084.19    
  13  0.637377     -0.450394      -72.9249       72.9249       1862.49       1935.42    
  14  0.596329     -0.516963      -83.7032       83.7032       2092.91       2176.62    
  15  0.286246      -1.25090      -202.538       202.538       1952.51       2155.05    
  16  0.590425     -0.526913      -85.3143       85.3143       2101.37       2186.68    
  17  0.853637     -0.158249      -25.6226       25.6226       1965.45       1991.08    
  18  0.245572      -1.40416      -227.353       227.353       2100.54       2327.89    
  19  0.375654     -0.979088      -158.527       158.527       2122.33       2280.86    
  20  0.281654      -1.26708      -205.156       205.156       2118.77       2323.92    
  21  0.443392     -0.813302      -131.684       131.684       1952.21       2083.90    
  22  0.442934     -0.814335      -131.852       131.852       2131.53       2263.39    
  23  0.171790      -1.76149      -285.208       285.208       2146.03       2431.24    
  24  0.802582     -0.219921      -35.6082       35.6082       2049.88       2085.49    
  25  0.162733      -1.81564      -293.977       293.977       2095.76       2389.74    
  26  0.838320     -0.176355      -28.5542       28.5542       2182.87       2211.43    
  27  0.210754      -1.55706      -252.109       252.109       2173.41       2425.52    
  28  0.240377      -1.42554      -230.815       230.815       2164.62       2395.44    
  29  0.173042E-01  -4.05680      -656.851       656.851       2154.33       2811.18    
  30  0.640146     -0.446059      -72.2229       72.2229       1966.08       2038.31    
  31  0.749210     -0.288736      -46.7502       46.7502       1852.82       1899.57    
  32  0.666162     -0.406222      -65.7728       65.7728       2011.14       2076.91    
  33  0.601746     -0.507920      -82.2389       82.2389       2175.09       2257.33    
  34  0.677044     -0.390020      -63.1494       63.1494       2263.60       2326.75    
  35  0.290379      -1.23657      -200.217       200.217       2277.30       2477.51    
  36  0.439723     -0.821610      -133.030       133.030       2160.71       2293.74    
  37  0.680091     -0.385528      -62.4221       62.4221       2214.01       2276.43    
  38  0.803784     -0.218425      -35.3659       35.3659       1926.23       1961.60    
  39  0.507823     -0.677622      -109.716       109.716       2328.26       2437.98    
  40  0.894573     -0.111408      -18.0385       18.0385       2283.35       2301.39    
  41  0.826908     -0.190062      -30.7736       30.7736       2328.25       2359.02    
  42  0.815562     -0.203878      -33.0106       33.0106       2200.82       2233.83    
  43  0.352457      -1.04283      -168.848       168.848       2396.99       2565.83    
  44  0.104059      -2.26279      -366.376       366.376       2358.01       2724.38    
  45  0.601892     -0.507677      -82.1996       82.1996       2096.94       2179.14    
  46  0.988184     -0.118862E-01  -1.92453       1.92453       2153.25       2155.18    
  47  0.733912     -0.309366      -50.0905       50.0905       2225.97       2276.06    
  48  0.107394      -2.23125      -361.268       361.268       2216.95       2578.22    
  49  0.592150     -0.523995      -84.8418       84.8418       2316.27       2401.12    
  50  0.821901     -0.196136      -31.7570       31.7570       2167.72       2199.48    
  51  0.400070E-01  -3.21870      -521.151       521.151       2198.86       2720.01    
  52  0.271211      -1.30486      -211.274       211.274       2459.65       2670.93    
  53  0.296309      -1.21635      -196.943       196.943       2333.64       2530.59    
  54  0.436334     -0.829346      -134.282       134.282       2497.87       2632.16    
  55  0.372372     -0.987863      -159.948       159.948       2437.58       2597.53    
  56  0.806182     -0.215446      -34.8835       34.8835       2620.57       2655.45    
  57  0.194087      -1.63945      -265.449       265.449       2502.50       2767.95    
  58  0.739876     -0.301273      -48.7801       48.7801       2002.85       2051.63    
loop,thermsimp(1:2)       16   236.751       71.9583    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       1907.59         68.69          1.16         38.99          0.33          0.05        109.22
Just calling func    0   0        109.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1907.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       16
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       17
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      226     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -40.8713       40.8713       1852.82       1893.69    
   2  0.350417      -1.04863      -169.787       169.787       1862.49       2032.28    
   3  0.533846     -0.627648      -101.625       101.625       1926.23       2027.86    
   4  0.622955     -0.473280      -76.6304       76.6304       1904.36       1980.99    
   5  0.661091E-01  -2.71645      -439.829       439.829       1965.45       2405.28    
   6  0.759206     -0.275482      -44.6042       44.6042       1984.75       2029.35    
   7  0.430535     -0.842727      -136.449       136.449       1776.18       1912.63    
   8  0.257678      -1.35604      -219.561       219.561       1957.84       2177.40    
   9  0.296561      -1.21550      -196.806       196.806       1925.45       2122.26    
  10  0.805929     -0.215760      -34.9344       34.9344       1966.08       2001.02    
  11  0.421616     -0.863661      -139.838       139.838       2002.85       2142.69    
  12  0.767803     -0.264223      -42.7812       42.7812       1922.56       1965.34    
  13  0.605260     -0.502097      -81.2962       81.2962       2042.25       2123.55    
  14  0.566784     -0.567776      -91.9305       91.9305       1908.00       1999.94    
  15  0.292740      -1.22847      -198.906       198.906       2011.14       2210.05    
  16  0.898463     -0.107069      -17.3360       17.3360       1913.70       1931.04    
  17  0.218067      -1.52295      -246.587       246.587       1952.21       2198.80    
  18  0.856756     -0.154603      -25.0322       25.0322       1979.33       2004.36    
  19  0.338883      -1.08210      -175.207       175.207       2049.88       2225.09    
  20  0.796034     -0.228113      -36.9346       36.9346       1952.51       1989.44    
  21  0.778636     -0.250212      -40.5126       40.5126       2153.25       2193.76    
  22  0.575989     -0.551667      -89.3223       89.3223       2033.22       2122.54    
  23  0.355531      -1.03414      -167.442       167.442       2092.91       2260.35    
  24  0.164949      -1.80212      -291.787       291.787       2096.94       2388.73    
  25  0.315998      -1.15202      -186.527       186.527       2101.37       2287.90    
  26  0.330933      -1.10584      -179.050       179.050       2167.72       2346.77    
  27  0.429436     -0.845283      -136.863       136.863       2182.87       2319.74    
  28  0.464808     -0.766130      -124.047       124.047       2200.82       2324.86    
  29  0.192211      -1.64916      -267.021       267.021       2175.09       2442.11    
  30  0.866849     -0.142891      -23.1359       23.1359       2131.53       2154.67    
  31  0.474973     -0.744498      -120.544       120.544       2225.97       2346.51    
  32  0.667713     -0.403897      -65.3962       65.3962       2214.01       2279.41    
  33  0.994155     -0.586200E-02 -0.949136      0.949136       2122.33       2123.28    
  34  0.577739     -0.548634      -88.8311       88.8311       2160.71       2249.54    
  35  0.381919     -0.962546      -155.849       155.849       2283.35       2439.20    
  36  0.733204     -0.310331      -50.2467       50.2467       2118.77       2169.01    
  37  0.492382     -0.708500      -114.716       114.716       2263.60       2378.32    
  38  0.188899E-01  -3.96913      -642.655       642.655       2032.93       2675.58    
  39  0.741920E-01  -2.60110      -421.152       421.152       2100.54       2521.69    
  40  0.210592      -1.55783      -252.234       252.234       2328.25       2580.48    
  41  0.682838     -0.381498      -61.7696       61.7696       2095.76       2157.53    
  42  0.656831     -0.420328      -68.0567       68.0567       2164.62       2232.68    
  43  0.444670     -0.810424      -131.218       131.218       2316.27       2447.49    
  44  0.872301     -0.136621      -22.1207       22.1207       2173.41       2195.53    
  45  0.932741     -0.696282E-01  -11.2737       11.2737       2146.03       2157.30    
  46  0.601727     -0.507951      -82.2441       82.2441       2328.26       2410.50    
  47  0.940344     -0.615097E-01  -9.95924       9.95924       2277.30       2287.26    
  48  0.208477E-01  -3.87051      -626.687       626.687       2333.64       2960.33    
  49  0.257831      -1.35545      -219.465       219.465       2396.99       2616.45    
  50  0.522803     -0.648550      -105.009       105.009       2216.95       2321.96    
  51  0.676437     -0.390915      -63.2944       63.2944       2437.58       2500.88    
  52  0.612346     -0.490458      -79.4116       79.4116       2497.87       2577.29    
  53  0.206854      -1.57574      -255.134       255.134       2620.57       2875.70    
  54  0.201156      -1.60367      -259.656       259.656       2459.65       2719.31    
  55  0.785118     -0.241921      -39.1702       39.1702       2198.86       2238.03    
  56  0.534951     -0.625580      -101.290       101.290       2358.01       2459.30    
  57  0.147432      -1.91439      -309.965       309.965       2502.50       2812.46    
  58  0.696605     -0.361537      -58.5377       58.5377       1907.59       1966.12    
loop,thermsimp(1:2)       17   40.8713       169.787    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228       2010.04         68.75          1.18         39.02          0.22          0.05        109.22
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229       2640.20         68.78          1.17         38.95          0.12          0.05        109.06
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2010.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       17
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       18
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      228     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -230.803       230.803       1852.82       2083.62    
   2  0.711556E-02  -4.94547      -800.738       800.738       1776.18       2576.92    
   3  0.909796     -0.945347E-01  -15.3064       15.3064       1913.70       1929.01    
   4  0.659218     -0.416702      -67.4695       67.4695       1922.56       1990.03    
   5  0.833482     -0.182144      -29.4915       29.4915       1907.59       1937.08    
   6  0.726295E-01  -2.62238      -424.599       424.599       1904.36       2328.96    
   7  0.687091     -0.375288      -60.7641       60.7641       1952.51       2013.27    
   8  0.860775     -0.149922      -24.2743       24.2743       1908.00       1932.28    
   9  0.846215     -0.166982      -27.0366       27.0366       1966.08       1993.12    
  10  0.398551     -0.919919      -148.947       148.947       1979.33       2128.28    
  11  0.416092     -0.876849      -141.974       141.974       1926.23       2068.21    
  12  0.463389     -0.769189      -124.542       124.542       1984.75       2109.29    
  13  0.207356      -1.57332      -254.741       254.741       1862.49       2117.23    
  14  0.133003      -2.01738      -326.641       326.641       1925.45       2252.09    
  15  0.464971     -0.765779      -123.990       123.990       2033.22       2157.21    
  16  0.568281     -0.565140      -91.5037       91.5037       2122.33       2213.84    
  17  0.638811     -0.448147      -72.5609       72.5609       2042.25       2114.81    
  18  0.865664     -0.144259      -23.3574       23.3574       2002.85       2026.21    
  19  0.475002     -0.744436      -120.534       120.534       2131.53       2252.07    
  20  0.537086     -0.621597      -100.645       100.645       2146.03       2246.67    
  21  0.782345     -0.245459      -39.7431       39.7431       2095.76       2135.50    
  22  0.725469     -0.320937      -51.9639       51.9639       2118.77       2170.73    
  23  0.701426E-01  -2.65723      -430.240       430.240       1957.84       2388.08    
  24  0.297043      -1.21388      -196.543       196.543       2153.25       2349.79    
  25  0.444870     -0.809973      -131.145       131.145       2173.41       2304.56    
  26  0.685684     -0.377338      -61.0961       61.0961       1952.21       2013.31    
  27  0.651244     -0.428871      -69.4400       69.4400       2011.14       2080.58    
  28  0.269082      -1.31274      -212.550       212.550       2049.88       2262.43    
  29  0.177107      -1.73100      -280.272       280.272       2164.62       2444.90    
  30  0.766464     -0.265968      -43.0637       43.0637       2198.86       2241.92    
  31  0.801833     -0.220855      -35.7593       35.7593       2160.71       2196.47    
  32  0.759414     -0.275209      -44.5599       44.5599       2092.91       2137.47    
  33  0.566307     -0.568618      -92.0668       92.0668       2214.01       2306.08    
  34  0.297948      -1.21084      -196.050       196.050       2277.30       2473.35    
  35  0.430097E-01  -3.14633      -509.432       509.432       2101.37       2610.80    
  36  0.529414     -0.635984      -102.974       102.974       2182.87       2285.85    
  37  0.717133     -0.332494      -53.8351       53.8351       2216.95       2270.79    
  38  0.209457      -1.56323      -253.108       253.108       2200.82       2453.93    
  39  0.732428     -0.311390      -50.4182       50.4182       2225.97       2276.39    
  40  0.697782     -0.359849      -58.2643       58.2643       2167.72       2225.99    
  41  0.977227     -0.230362E-01  -3.72986       3.72986       2263.60       2267.33    
  42  0.744700     -0.294773      -47.7277       47.7277       2096.94       2144.67    
  43  0.713341     -0.337796      -54.6937       54.6937       1965.45       2020.15    
  44  0.497823     -0.697510      -112.936       112.936       2328.26       2441.20    
  45  0.968758     -0.317404E-01  -5.13919       5.13919       2283.35       2288.49    
  46  0.287665      -1.24596      -201.737       201.737       2175.09       2376.83    
  47  0.964672     -0.359674E-01  -5.82360       5.82360       2316.27       2322.10    
  48  0.733769     -0.309561      -50.1221       50.1221       2358.01       2408.13    
  49  0.692680     -0.367187      -59.4525       59.4525       2437.58       2497.03    
  50  0.328873      -1.11208      -180.061       180.061       2100.54       2280.60    
  51  0.744920     -0.294478      -47.6800       47.6800       2497.87       2545.55    
  52  0.655188     -0.422834      -68.4624       68.4624       2328.25       2396.71    
  53  0.255467      -1.36466      -220.957       220.957       2396.99       2617.94    
  54  0.262199E-02  -5.94382      -962.384       962.384       2032.93       2995.31    
  55  0.538310     -0.619321      -100.276       100.276       2459.65       2559.93    
  56  0.456270     -0.784671      -127.049       127.049       2502.50       2629.55    
  57  0.990209     -0.983957E-02  -1.59316       1.59316       2620.57       2622.16    
  58  0.262373      -1.33799      -216.638       216.638       2010.04       2226.68    
loop,thermsimp(1:2)       18   230.803       800.738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230       1913.96         68.64          1.22         38.98          0.16          0.04        109.05
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    231       1939.77         68.55          1.19         39.15          0.11          0.05        109.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1913.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    161.913               229
loop is:       18
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    161.913               229
loop is:       19
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    80.9567               286

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      230     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -26.3476       26.3476       1913.70       1940.05    
   2  0.240049      -1.42691      -115.518       115.518       1908.00       2023.52    
   3  0.365543      -1.00637      -81.4724       81.4724       1907.59       1989.06    
   4  0.399010     -0.918769      -74.3805       74.3805       1922.56       1996.94    
   5  0.685268     -0.377945      -30.5972       30.5972       1966.08       1996.68    
   6  0.335805E-01  -3.39381      -274.751       274.751       1952.51       2227.26    
   7  0.820520     -0.197817      -16.0146       16.0146       1952.21       1968.23    
   8  0.756560     -0.278973      -22.5847       22.5847       1965.45       1988.04    
   9  0.869461     -0.139882      -11.3244       11.3244       2002.85       2014.18    
  10  0.787378     -0.239047      -19.3524       19.3524       1926.23       1945.59    
  11  0.330926      -1.10586      -89.5267       89.5267       2011.14       2100.67    
  12  0.339084E-01  -3.38409      -273.965       273.965       1852.82       2126.79    
  13  0.672805     -0.396300      -32.0831       32.0831       1984.75       2016.83    
  14  0.822413     -0.195513      -15.8281       15.8281       2042.25       2058.08    
  15  0.928870     -0.737865E-01  -5.97350       5.97350       1862.49       1868.47    
  16  0.778944     -0.249816      -20.2243       20.2243       1979.33       1999.56    
  17  0.301602E-01  -3.50123      -283.448       283.448       2095.76       2379.21    
  18  0.292626      -1.22886      -99.4845       99.4845       2092.91       2192.40    
  19  0.149515      -1.90036      -153.847       153.847       2096.94       2250.79    
  20  0.500330E-01  -2.99507      -242.471       242.471       2033.22       2275.69    
  21  0.759114E-01  -2.57819      -208.722       208.722       2118.77       2327.49    
  22  0.613440     -0.488673      -39.5613       39.5613       2160.71       2200.27    
  23  0.132502      -2.02116      -163.626       163.626       2122.33       2285.96    
  24  0.189750E-02  -6.26722      -507.373       507.373       2167.72       2675.10    
  25  0.507622     -0.678018      -54.8901       54.8901       2010.04       2064.93    
  26  0.378733     -0.970924      -78.6027       78.6027       2198.86       2277.46    
  27  0.139411      -1.97033      -159.511       159.511       2146.03       2305.54    
  28  0.298599      -1.20865      -97.8486       97.8486       2131.53       2229.38    
  29  0.767617     -0.264464      -21.4101       21.4101       1925.45       1946.86    
  30  0.656077     -0.421478      -34.1214       34.1214       2049.88       2084.01    
  31  0.701883     -0.353988      -28.6577       28.6577       2263.60       2292.26    
  32  0.940950     -0.608655E-01  -4.92747       4.92747       2216.95       2221.88    
  33  0.621043     -0.476355      -38.5641       38.5641       2225.97       2264.53    
  34  0.622910     -0.473353      -38.3210       38.3210       2100.54       2138.86    
  35  0.525019     -0.644320      -52.1620       52.1620       2182.87       2235.04    
  36  0.871126     -0.137969      -11.1695       11.1695       2283.35       2294.52    
  37  0.475532     -0.743322      -60.1768       60.1768       2173.41       2233.59    
  38  0.320094      -1.13914      -92.2210       92.2210       2214.01       2306.23    
  39  0.688986     -0.372534      -30.1591       30.1591       2316.27       2346.43    
  40  0.831218     -0.184863      -14.9659       14.9659       1904.36       1919.33    
  41  0.639633     -0.446861      -36.1763       36.1763       2153.25       2189.43    
  42  0.628257     -0.464807      -37.6292       37.6292       2175.09       2212.72    
  43  0.925835     -0.770596E-01  -6.23848       6.23848       1957.84       1964.08    
  44  0.611089     -0.492512      -39.8721       39.8721       2328.25       2368.12    
  45  0.423003E-01  -3.16296      -256.063       256.063       2358.01       2614.07    
  46  0.430763     -0.842198      -68.1815       68.1815       2328.26       2396.44    
  47  0.374764     -0.981459      -79.4556       79.4556       2164.62       2244.08    
  48  0.109336      -2.21333      -179.184       179.184       2200.82       2380.00    
  49  0.642636E-02  -5.04735      -408.616       408.616       2277.30       2685.91    
  50  0.232984      -1.45679      -117.936       117.936       2437.58       2555.52    
  51  0.169005E-01  -4.08041      -330.336       330.336       2497.87       2828.21    
  52  0.183441      -1.69586      -137.291       137.291       2459.65       2596.94    
  53  0.257429      -1.35701      -109.859       109.859       1776.18       1886.04    
  54  0.784332     -0.242922      -19.6662       19.6662       2101.37       2121.04    
  55  0.417881     -0.872558      -70.6394       70.6394       2396.99       2467.63    
  56  0.597408E-01  -2.81774      -228.115       228.115       2620.57       2848.68    
  57  0.854186E-01  -2.46019      -199.169       199.169       2502.50       2701.67    
  58  0.484163     -0.725335      -58.7207       58.7207       1913.96       1972.68    
loop,thermsimp(1:2)       19   26.3476       115.518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       2335.22         68.66          1.22         39.15          0.08          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2335.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       19
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       20
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      231     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -94.3316       94.3316       1862.49       1956.83    
   2  0.362384      -1.01505      -82.1751       82.1751       1776.18       1858.35    
   3  0.900627     -0.104664      -8.47326       8.47326       1904.36       1912.84    
   4  0.233893      -1.45289      -117.621       117.621       1913.70       2031.33    
   5  0.183338      -1.69642      -137.337       137.337       1926.23       2063.57    
   6  0.351708      -1.04495      -84.5959       84.5959       1925.45       2010.05    
   7  0.979617     -0.205938E-01  -1.66720       1.66720       1957.84       1959.51    
   8  0.801294     -0.221527      -17.9341       17.9341       1952.21       1970.15    
   9  0.423893     -0.858275      -69.4831       69.4831       1913.96       1983.44    
  10  0.486446     -0.720630      -58.3398       58.3398       1965.45       2023.79    
  11  0.430531     -0.842736      -68.2250       68.2250       1907.59       1975.81    
  12  0.214629      -1.53884      -124.580       124.580       1966.08       2090.66    
  13  0.860310     -0.150463      -12.1810       12.1810       1922.56       1934.74    
  14  0.450659     -0.797045      -64.5261       64.5261       1979.33       2043.86    
  15  0.867432     -0.142218      -11.5135       11.5135       2002.85       2014.37    
  16  0.850327     -0.162134      -13.1258       13.1258       1984.75       1997.87    
  17  0.914193     -0.897130E-01  -7.26287       7.26287       1908.00       1915.27    
  18  0.908448     -0.960172E-01  -7.77323       7.77323       2042.25       2050.03    
  19  0.349788E-01  -3.35301      -271.449       271.449       2010.04       2281.49    
  20  0.825048     -0.192314      -15.5691       15.5691       2049.88       2065.45    
  21  0.628933     -0.463730      -37.5420       37.5420       2011.14       2048.68    
  22  0.756366     -0.279229      -22.6055       22.6055       2101.37       2123.98    
  23  0.545707     -0.605674      -49.0333       49.0333       1852.82       1901.85    
  24  0.653619     -0.425231      -34.4253       34.4253       2100.54       2134.96    
  25  0.781643     -0.246357      -19.9442       19.9442       2153.25       2173.20    
  26  0.444411     -0.811005      -65.6562       65.6562       2092.91       2158.57    
  27  0.223111      -1.50008      -121.442       121.442       2160.71       2282.15    
  28  0.143901      -1.93863      -156.945       156.945       2175.09       2332.04    
  29  0.419282E-01  -3.17180      -256.778       256.778       2216.95       2473.73    
  30  0.407367     -0.898040      -72.7023       72.7023       1952.51       2025.21    
  31  0.722138     -0.325538      -26.3545       26.3545       2131.53       2157.89    
  32  0.290143      -1.23738      -100.174       100.174       2173.41       2273.59    
  33  0.236931E-01  -3.74257      -302.986       302.986       2182.87       2485.86    
  34  0.198981      -1.61454      -130.708       130.708       2164.62       2295.33    
  35  0.765966     -0.266617      -21.5844       21.5844       2096.94       2118.53    
  36  0.522733     -0.648684      -52.5153       52.5153       2225.97       2278.49    
  37  0.297579E-01  -3.51466      -284.535       284.535       2033.22       2317.76    
  38  0.175475      -1.74026      -140.885       140.885       2198.86       2339.74    
  39  0.311931      -1.16497      -94.3122       94.3122       2122.33       2216.65    
  40  0.310920      -1.16822      -94.5752       94.5752       2263.60       2358.18    
  41  0.122272      -2.10150      -170.131       170.131       2283.35       2453.48    
  42  0.949359     -0.519686E-01  -4.20720       4.20720       2146.03       2150.24    
  43  0.500750     -0.691648      -55.9935       55.9935       2214.01       2270.01    
  44  0.729401E-01  -2.61812      -211.954       211.954       2118.77       2330.72    
  45  0.952528     -0.486360E-01  -3.93741       3.93741       2316.27       2320.21    
  46  0.718842     -0.330114      -26.7249       26.7249       2328.25       2354.97    
  47  0.529396     -0.636019      -51.4900       51.4900       2095.76       2147.25    
  48  0.314661      -1.15626      -93.6068       93.6068       2200.82       2294.42    
  49  0.947465     -0.539649E-01  -4.36882       4.36882       2328.26       2332.63    
  50  0.613869     -0.487974      -39.5048       39.5048       2396.99       2436.49    
  51  0.303056      -1.19384      -96.6492       96.6492       2437.58       2534.23    
  52  0.749186     -0.288769      -23.3777       23.3777       2459.65       2483.03    
  53  0.671119E-01  -2.70139      -218.696       218.696       2358.01       2576.70    
  54  0.545553E-02  -5.21113      -421.875       421.875       2167.72       2589.60    
  55  0.866985     -0.142734      -11.5552       11.5552       2277.30       2288.85    
  56  0.622088     -0.474673      -38.4280       38.4280       2502.50       2540.93    
  57  0.471050     -0.752790      -60.9434       60.9434       2497.87       2558.82    
  58  0.433456     -0.835964      -67.6769       67.6769       2335.22       2402.90    
loop,thermsimp(1:2)       20   94.3316       82.1751    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       1861.95         68.78          1.19         39.19          0.00          0.05        109.20
Just calling func    0   0        109.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234       1835.62         68.83          1.19         38.98          0.16          0.05        109.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1835.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       20
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       21
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      233     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -95.5513       95.5513       1776.18       1871.73    
   2  0.575213     -0.553015      -44.7702       44.7702       1852.82       1897.59    
   3  0.632244     -0.458480      -37.1170       37.1170       1904.36       1941.48    
   4  0.819203     -0.199424      -16.1447       16.1447       1908.00       1924.15    
   5  0.137693E-02  -6.58790      -533.334       533.334       1922.56       2455.90    
   6  0.367814      -1.00018      -80.9711       80.9711       1862.49       1943.46    
   7  0.452636     -0.792666      -64.1716       64.1716       1957.84       2022.01    
   8  0.278102      -1.27977      -103.606       103.606       1952.21       2055.82    
   9  0.417803     -0.872745      -70.6545       70.6545       1907.59       1978.24    
  10  0.682140     -0.382521      -30.9676       30.9676       1913.96       1944.92    
  11  0.204733      -1.58605      -128.401       128.401       1984.75       2113.15    
  12  0.637442     -0.450292      -36.4542       36.4542       1925.45       1961.91    
  13  0.114518      -2.16702      -175.435       175.435       2002.85       2178.29    
  14  0.724207     -0.322678      -26.1230       26.1230       1965.45       1991.58    
  15  0.461399     -0.773492      -62.6193       62.6193       1952.51       2015.13    
  16  0.731739     -0.312332      -25.2853       25.2853       1913.70       1938.99    
  17  0.773272     -0.257124      -20.8159       20.8159       1979.33       2000.15    
  18  0.789195     -0.236742      -19.1658       19.1658       2011.14       2030.31    
  19  0.762001     -0.271807      -22.0046       22.0046       2042.25       2064.26    
  20  0.933384     -0.689386E-01  -5.58104       5.58104       1926.23       1931.82    
  21  0.694037     -0.365230      -29.5678       29.5678       2049.88       2079.45    
  22  0.423570     -0.859038      -69.5448       69.5448       1966.08       2035.63    
  23  0.272919      -1.29858      -105.129       105.129       2096.94       2202.07    
  24  0.535843     -0.623914      -50.5100       50.5100       2101.37       2151.88    
  25  0.902288     -0.102822      -8.32409       8.32409       2100.54       2108.86    
  26  0.479374     -0.735275      -59.5254       59.5254       2095.76       2155.28    
  27  0.494900E-01  -3.00599      -243.355       243.355       2146.03       2389.38    
  28  0.921867     -0.813539E-01  -6.58614       6.58614       2131.53       2138.12    
  29  0.132425      -2.02174      -163.673       163.673       2092.91       2256.59    
  30  0.640539     -0.445446      -36.0618       36.0618       2153.25       2189.31    
  31  0.215363      -1.53543      -124.303       124.303       2122.33       2246.64    
  32  0.437204E-01  -3.12994      -253.389       253.389       2214.01       2467.40    
  33  0.166028      -1.79560      -145.366       145.366       2173.41       2318.78    
  34  0.425825     -0.853727      -69.1149       69.1149       2225.97       2295.09    
  35  0.810393     -0.210235      -17.0200       17.0200       2010.04       2027.06    
  36  0.855958     -0.155534      -12.5915       12.5915       2160.71       2173.30    
  37  0.830452     -0.185786      -15.0406       15.0406       2277.30       2292.34    
  38  0.658784     -0.417359      -33.7880       33.7880       2200.82       2234.61    
  39  0.910965     -0.932509E-01  -7.54928       7.54928       2164.62       2172.17    
  40  0.603480     -0.505043      -40.8866       40.8866       2033.22       2074.11    
  41  0.702610     -0.352953      -28.5739       28.5739       2316.27       2344.85    
  42  0.329065      -1.11150      -89.9832       89.9832       2118.77       2208.75    
  43  0.790497     -0.235094      -19.0324       19.0324       2175.09       2194.12    
  44  0.641572     -0.443834      -35.9313       35.9313       2328.26       2364.19    
  45  0.650683     -0.429733      -34.7898       34.7898       2198.86       2233.65    
  46  0.194049E-02  -6.24481      -505.559       505.559       2328.25       2833.81    
  47  0.662053     -0.412409      -33.3873       33.3873       2263.60       2296.99    
  48  0.294846      -1.22130      -98.8724       98.8724       2335.22       2434.09    
  49  0.709874     -0.342668      -27.7413       27.7413       2396.99       2424.73    
  50  0.700314     -0.356226      -28.8389       28.8389       2283.35       2312.19    
  51  0.639811E-01  -2.74917      -222.563       222.563       2216.95       2439.52    
  52  0.251451      -1.38051      -111.761       111.761       2459.65       2571.41    
  53  0.828691     -0.187907      -15.2124       15.2124       2182.87       2198.09    
  54  0.962710     -0.380034E-01  -3.07663       3.07663       2437.58       2440.66    
  55  0.429583     -0.844940      -68.4035       68.4035       2502.50       2570.90    
  56  0.871108     -0.137990      -11.1712       11.1712       2497.87       2509.05    
  57  0.328516      -1.11317      -90.1185       90.1185       2358.01       2448.12    
  58  0.401423     -0.912741      -73.8924       73.8924       1835.62       1909.51    
loop,thermsimp(1:2)       21   95.5513       44.7702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       1879.41         68.55          1.24         39.20          0.11          0.05        109.15
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236       1887.86         68.79          1.18         39.05          0.06          0.05        109.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1879.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       21
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       22
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      235     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -14.2213       14.2213       1776.18       1790.40    
   2  0.801853     -0.220830      -17.8777       17.8777       1852.82       1870.70    
   3  0.768645     -0.263126      -21.3018       21.3018       1835.62       1856.92    
   4  0.855557     -0.156003      -12.6295       12.6295       1908.00       1920.63    
   5  0.845591     -0.167720      -13.5780       13.5780       1926.23       1939.81    
   6  0.350050      -1.04968      -84.9785       84.9785       1913.70       1998.68    
   7  0.927608     -0.751463E-01  -6.08359       6.08359       1904.36       1910.45    
   8  0.655345E-01  -2.72518      -220.621       220.621       1862.49       2083.11    
   9  0.355481      -1.03428      -83.7322       83.7322       1913.96       1997.69    
  10  0.728523     -0.316737      -25.6419       25.6419       1925.45       1951.10    
  11  0.573220     -0.556486      -45.0512       45.0512       1907.59       1952.64    
  12  0.112478      -2.18499      -176.890       176.890       1965.45       2142.34    
  13  0.338739      -1.08253      -87.6377       87.6377       1979.33       2066.97    
  14  0.239648      -1.42858      -115.653       115.653       1952.51       2068.16    
  15  0.918959     -0.845134E-01  -6.84192       6.84192       1957.84       1964.68    
  16  0.283771      -1.25959      -101.972       101.972       2010.04       2112.01    
  17  0.414404     -0.880913      -71.3158       71.3158       2011.14       2082.46    
  18  0.716403     -0.333512      -27.0000       27.0000       1966.08       1993.08    
  19  0.317726      -1.14657      -92.8222       92.8222       1952.21       2045.04    
  20  0.339005      -1.08174      -87.5741       87.5741       2042.25       2129.83    
  21  0.163059      -1.81364      -146.827       146.827       2033.22       2180.05    
  22  0.477081     -0.740069      -59.9135       59.9135       2049.88       2109.80    
  23  0.105851      -2.24573      -181.807       181.807       2100.54       2282.35    
  24  0.840431     -0.173840      -14.0735       14.0735       1984.75       1998.82    
  25  0.235315      -1.44683      -117.131       117.131       2131.53       2248.66    
  26  0.865464     -0.144489      -11.6974       11.6974       2101.37       2113.07    
  27  0.909462     -0.949026E-01  -7.68300       7.68300       2095.76       2103.44    
  28  0.152105E-01  -4.18577      -338.866       338.866       2164.62       2503.49    
  29  0.962485     -0.382371E-01  -3.09555       3.09555       2160.71       2163.81    
  30  0.259410      -1.34934      -109.238       109.238       2002.85       2112.09    
  31  0.364880      -1.00819      -81.6194       81.6194       2153.25       2234.87    
  32  0.467235     -0.760923      -61.6017       61.6017       2175.09       2236.69    
  33  0.844908     -0.168527      -13.6434       13.6434       2182.87       2196.52    
  34  0.188232      -1.67008      -135.204       135.204       2096.94       2232.15    
  35  0.496585     -0.700000      -56.6697       56.6697       2118.77       2175.44    
  36  0.410505     -0.890367      -72.0811       72.0811       2198.86       2270.94    
  37  0.533875     -0.627594      -50.8079       50.8079       2200.82       2251.63    
  38  0.610668     -0.493202      -39.9280       39.9280       2122.33       2162.26    
  39  0.241933      -1.41910      -114.885       114.885       2092.91       2207.80    
  40  0.642629     -0.442188      -35.7980       35.7980       2277.30       2313.10    
  41  0.775072     -0.254799      -20.6277       20.6277       2225.97       2246.60    
  42  0.345343      -1.06322      -86.0744       86.0744       2263.60       2349.68    
  43  0.844097     -0.169488      -13.7212       13.7212       2283.35       2297.07    
  44  0.426886     -0.851239      -68.9135       68.9135       2173.41       2242.33    
  45  0.594109     -0.520693      -42.1536       42.1536       2316.27       2358.43    
  46  0.489527     -0.714316      -57.8286       57.8286       2328.26       2386.09    
  47  0.313882      -1.15874      -93.8077       93.8077       2146.03       2239.84    
  48  0.687066     -0.375325      -30.3851       30.3851       2396.99       2427.37    
  49  0.394505     -0.930124      -75.2997       75.2997       2335.22       2410.52    
  50  0.971200     -0.292233E-01  -2.36582       2.36582       2216.95       2219.32    
  51  0.916939     -0.867145E-01  -7.02011       7.02011       2437.58       2444.60    
  52  0.968457     -0.320511E-01  -2.59475       2.59475       2358.01       2360.60    
  53  0.437414     -0.826876      -66.9411       66.9411       1922.56       1989.50    
  54  0.647516     -0.434611      -35.1847       35.1847       2214.01       2249.20    
  55  0.181293      -1.70764      -138.245       138.245       2497.87       2636.12    
  56  0.836714     -0.178273      -14.4323       14.4323       2502.50       2516.93    
  57  0.940459     -0.613876E-01  -4.96973       4.96973       2459.65       2464.62    
  58  0.141896      -1.95266      -158.081       158.081       1879.41       2037.50    
loop,thermsimp(1:2)       22   14.2213       17.8777    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237       2437.86         68.62          1.20         39.41          0.02          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2437.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       22
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       23
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      236     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -13.3138       13.3138       1776.18       1789.49    
   2  0.848474     -0.164316      -13.3025       13.3025       1835.62       1848.92    
   3  0.146795      -1.91872      -155.333       155.333       1852.82       2008.15    
   4  0.398624     -0.919738      -74.4589       74.4589       1904.36       1978.82    
   5  0.888093     -0.118679      -9.60782       9.60782       1908.00       1917.61    
   6  0.475009     -0.744421      -60.2658       60.2658       1926.23       1986.50    
   7  0.120824      -2.11342      -171.096       171.096       1925.45       2096.55    
   8  0.270052      -1.30914      -105.984       105.984       1907.59       2013.57    
   9  0.201748E-01  -3.90332      -316.000       316.000       1957.84       2273.84    
  10  0.999386     -0.614559E-03 -0.497526E-01  0.497526E-01   1922.56       1922.61    
  11  0.212655      -1.54808      -125.328       125.328       1966.08       2091.41    
  12  0.197911      -1.61994      -131.145       131.145       1913.96       2045.10    
  13  0.786394     -0.240297      -19.4537       19.4537       1913.70       1933.16    
  14  0.781263     -0.246844      -19.9837       19.9837       1984.75       2004.73    
  15  0.788011     -0.238244      -19.2874       19.2874       1879.41       1898.70    
  16  0.956387     -0.445927E-01  -3.61007       3.61007       1952.21       1955.82    
  17  0.717415     -0.332100      -26.8857       26.8857       1979.33       2006.22    
  18  0.808756     -0.212258      -17.1837       17.1837       1952.51       1969.69    
  19  0.756838     -0.278606      -22.5550       22.5550       2011.14       2033.70    
  20  0.570684     -0.560919      -45.4101       45.4101       1862.49       1907.90    
  21  0.946031     -0.554796E-01  -4.49145       4.49145       2095.76       2100.25    
  22  0.678634E-01  -2.69026      -217.794       217.794       2049.88       2267.68    
  23  0.631502     -0.459654      -37.2120       37.2120       2010.04       2047.25    
  24  0.114784E-01  -4.46729      -361.657       361.657       2002.85       2364.51    
  25  0.549681     -0.598417      -48.4459       48.4459       2101.37       2149.82    
  26  0.846433     -0.166725      -13.4975       13.4975       2042.25       2055.75    
  27  0.441841     -0.816805      -66.1258       66.1258       1965.45       2031.58    
  28  0.299100      -1.20698      -97.7128       97.7128       2122.33       2220.05    
  29  0.378130     -0.972517      -78.7317       78.7317       2160.71       2239.44    
  30  0.830469     -0.185764      -15.0389       15.0389       2118.77       2133.81    
  31  0.675108     -0.392883      -31.8065       31.8065       2033.22       2065.03    
  32  0.997619     -0.238377E-02 -0.192982      0.192982       2182.87       2183.07    
  33  0.897623     -0.108005      -8.74370       8.74370       2092.91       2101.66    
  34  0.591811E-01  -2.82715      -228.877       228.877       2216.95       2445.83    
  35  0.229825      -1.47044      -119.042       119.042       2096.94       2215.98    
  36  0.654017     -0.424622      -34.3760       34.3760       2153.25       2187.63    
  37  0.305777      -1.18490      -95.9256       95.9256       2175.09       2271.02    
  38  0.936135     -0.659954E-01  -5.34277       5.34277       2146.03       2151.37    
  39  0.698153     -0.359317      -29.0891       29.0891       2173.41       2202.50    
  40  0.829975     -0.186360      -15.0871       15.0871       2225.97       2241.06    
  41  0.951351     -0.498721E-01  -4.03748       4.03748       2131.53       2135.57    
  42  0.883299     -0.124092      -10.0461       10.0461       2214.01       2224.06    
  43  0.910087     -0.942154E-01  -7.62737       7.62737       2200.82       2208.44    
  44  0.590840     -0.526210      -42.6002       42.6002       2198.86       2241.46    
  45  0.146785      -1.91879      -155.339       155.339       2100.54       2255.88    
  46  0.830381E-01  -2.48846      -201.457       201.457       2283.35       2484.81    
  47  0.289482      -1.23966      -100.359       100.359       2277.30       2377.66    
  48  0.594462     -0.520098      -42.1054       42.1054       2263.60       2305.71    
  49  0.241311      -1.42167      -115.093       115.093       2316.27       2431.37    
  50  0.612368     -0.490422      -39.7029       39.7029       2358.01       2397.71    
  51  0.952207     -0.489727E-01  -3.96467       3.96467       2328.26       2332.23    
  52  0.857144     -0.154149      -12.4794       12.4794       2335.22       2347.70    
  53  0.221746      -1.50622      -121.939       121.939       2396.99       2518.93    
  54  0.874757     -0.133809      -10.8328       10.8328       2437.58       2448.41    
  55  0.474241     -0.746040      -60.3969       60.3969       2459.65       2520.05    
  56  0.679995E-01  -2.68826      -217.632       217.632       2164.62       2382.26    
  57  0.276977      -1.28382      -103.934       103.934       2502.50       2606.43    
  58  0.308562      -1.17583      -95.1915       95.1915       2437.86       2533.05    
loop,thermsimp(1:2)       23   13.3138       13.3025    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238       2783.96         68.59          1.17         39.16          0.23          0.05        109.20
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    239       2033.28         68.75          1.18         39.12          0.09          0.05        109.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2033.28
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       23
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       24
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      238     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -184.786       184.786       1776.18       1960.97    
   2  0.372115     -0.988552      -80.0299       80.0299       1835.62       1915.65    
   3  0.732875     -0.310780      -25.1597       25.1597       1879.41       1904.57    
   4  0.341646      -1.07398      -86.9458       86.9458       1862.49       1949.44    
   5  0.406512     -0.900141      -72.8724       72.8724       1908.00       1980.88    
   6  0.271848      -1.30251      -105.447       105.447       1922.56       2028.01    
   7  0.738418     -0.303245      -24.5497       24.5497       1913.70       1938.25    
   8  0.903199     -0.101813      -8.24243       8.24243       1952.21       1960.46    
   9  0.511789     -0.669842      -54.2282       54.2282       1952.51       2006.74    
  10  0.202674      -1.59616      -129.220       129.220       1904.36       2033.58    
  11  0.325695      -1.12179      -90.8168       90.8168       1926.23       2017.05    
  12  0.719720     -0.328893      -26.6261       26.6261       1984.75       2011.37    
  13  0.715609     -0.334622      -27.0899       27.0899       1979.33       2006.42    
  14  0.973328     -0.270339E-01  -2.18858       2.18858       1852.82       1855.01    
  15  0.373998     -0.983504      -79.6212       79.6212       1907.59       1987.21    
  16  0.977965     -0.222815E-01  -1.80384       1.80384       1965.45       1967.26    
  17  0.105495      -2.24909      -182.079       182.079       2011.14       2193.22    
  18  0.729809     -0.314973      -25.4992       25.4992       1913.96       1939.46    
  19  0.378008     -0.972839      -78.7578       78.7578       2010.04       2088.80    
  20  0.678326     -0.388127      -31.4214       31.4214       2042.25       2073.68    
  21  0.671993     -0.397507      -32.1809       32.1809       2033.22       2065.40    
  22  0.515926     -0.661792      -53.5765       53.5765       1966.08       2019.66    
  23  0.363490      -1.01200      -81.9284       81.9284       1925.45       2007.38    
  24  0.206319      -1.57833      -127.776       127.776       2095.76       2223.54    
  25  0.755157E-01  -2.58341      -209.145       209.145       2092.91       2302.06    
  26  0.413763     -0.882461      -71.4411       71.4411       2118.77       2190.21    
  27  0.279023      -1.27646      -103.338       103.338       2131.53       2234.87    
  28  0.506422     -0.680385      -55.0817       55.0817       2101.37       2156.45    
  29  0.643082E-02  -5.04665      -408.560       408.560       2146.03       2554.59    
  30  0.285888E-01  -3.55474      -287.780       287.780       2182.87       2470.65    
  31  0.660419     -0.414880      -33.5873       33.5873       2153.25       2186.84    
  32  0.739369     -0.301959      -24.4456       24.4456       2173.41       2197.86    
  33  0.270269      -1.30834      -105.919       105.919       2200.82       2306.74    
  34  0.663889     -0.409640      -33.1631       33.1631       2096.94       2130.11    
  35  0.898739E-01  -2.40935      -195.053       195.053       2122.33       2317.39    
  36  0.832427     -0.183410      -14.8483       14.8483       2214.01       2228.86    
  37  0.723106     -0.324200      -26.2462       26.2462       2160.71       2186.96    
  38  0.986274     -0.138207E-01  -1.11888       1.11888       2225.97       2227.09    
  39  0.812861     -0.207195      -16.7738       16.7738       2198.86       2215.63    
  40  0.553236     -0.591971      -47.9240       47.9240       2100.54       2148.46    
  41  0.693785E-01  -2.66818      -216.007       216.007       2049.88       2265.89    
  42  0.117256      -2.14340      -173.522       173.522       2175.09       2348.61    
  43  0.807809     -0.213430      -17.2785       17.2785       1957.84       1975.12    
  44  0.900249     -0.105084      -8.50723       8.50723       2263.60       2272.11    
  45  0.753470     -0.283066      -22.9161       22.9161       2328.26       2351.18    
  46  0.127159      -2.06232      -166.958       166.958       2335.22       2502.18    
  47  0.535389     -0.624762      -50.5787       50.5787       2002.85       2053.43    
  48  0.957281     -0.436582E-01  -3.53442       3.53442       2277.30       2280.83    
  49  0.227700      -1.47973      -119.794       119.794       2164.62       2284.42    
  50  0.636404     -0.451921      -36.5860       36.5860       2358.01       2394.59    
  51  0.905015     -0.998042E-01  -8.07981       8.07981       2316.27       2324.35    
  52  0.555191     -0.588444      -47.6385       47.6385       2216.95       2264.59    
  53  0.687780     -0.374286      -30.3010       30.3010       2437.58       2467.88    
  54  0.759422E-01  -2.57778      -208.689       208.689       2283.35       2492.04    
  55  0.374598     -0.981902      -79.4915       79.4915       2396.99       2476.48    
  56  0.399521     -0.917488      -74.2767       74.2767       2459.65       2533.93    
  57  0.997363     -0.264016E-02 -0.213738      0.213738       2437.86       2438.07    
  58  0.164658      -1.80389      -146.037       146.037       2033.28       2179.32    
loop,thermsimp(1:2)       24   184.786       80.0299    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       1841.83         68.46          1.23         39.23          0.18          0.05        109.15
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241       2206.30         68.83          1.19         39.17          0.27          0.05        109.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    2206.3        2.920     -2.918      3.603     -102.6     0.7138E-01
                      0.5814E-01  1.470     -99.70      4.359     0.3663    

                       3.800     -3.167      1.540      6319.      7000.    

                      -2.051      0.000      0.000      0.000     -1.221    



                      -1.816      0.000      0.000      7000.      723.6    

                      -1.596     -3.517     -7.362      5.760      6.094    

                      -14.33     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1186E-01-0.3874E-02 0.1656     0.1194    

                     -0.2486     0.2008     0.9038E-01 0.1642     0.2428E-01



                     -0.9733    -0.6627      0.000    -0.7709E-01 0.1688    

                      0.1574     0.5310E-01-0.7116    -0.7917E-01 0.2288    

                      0.1002E-01 0.7875E-01-0.3668     -1.639      7000.    



                      -1.239     -1.323     -2.142     -1.982    -0.3807    

                     -0.3252      9.183      8.286    -0.1686E+05 -5.631    

                     -0.4719     -2.421      8.574      9.094    -0.1969E+05



                      -6.000     0.6414     0.1850E-01  8.885      8.978    

                     -0.1944E+05 -6.000     0.8189E-01-0.4363      9.824    

                       8.857    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1841.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       24
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       25
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      240     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -3.07056       3.07056       1852.82       1855.89    
   2  0.355374      -1.03458      -83.7564       83.7564       1879.41       1963.17    
   3  0.294461      -1.22261      -98.9783       98.9783       1835.62       1934.60    
   4  0.644538     -0.439222      -35.5579       35.5579       1913.70       1949.26    
   5  0.741622     -0.298915      -24.1992       24.1992       1913.96       1938.16    
   6  0.805913E-01  -2.51837      -203.878       203.878       1862.49       2066.37    
   7  0.498180     -0.696794      -56.4101       56.4101       1952.21       2008.62    
   8  0.771004     -0.260061      -21.0537       21.0537       1776.18       1797.23    
   9  0.753480     -0.283053      -22.9150       22.9150       1965.45       1988.37    
  10  0.460525     -0.775387      -62.7728       62.7728       1957.84       2020.61    
  11  0.918626     -0.848759E-01  -6.87127       6.87127       1908.00       1914.88    
  12  0.355379      -1.03457      -83.7553       83.7553       1907.59       1991.34    
  13  0.664646     -0.408501      -33.0709       33.0709       1979.33       2012.40    
  14  0.328018      -1.11469      -90.2414       90.2414       1952.51       2042.75    
  15  0.529583     -0.635665      -51.4613       51.4613       1925.45       1976.91    
  16  0.259823      -1.34775      -109.110       109.110       1984.75       2093.86    
  17  0.463690E-01  -3.07112      -248.628       248.628       1926.23       2174.86    
  18  0.366509      -1.00373      -81.2587       81.2587       1966.08       2047.34    
  19  0.794534     -0.229999      -18.6200       18.6200       1922.56       1941.18    
  20  0.669373     -0.401413      -32.4971       32.4971       1904.36       1936.86    
  21  0.798901     -0.224518      -18.1763       18.1763       2002.85       2021.03    
  22  0.610403     -0.493636      -39.9631       39.9631       2033.22       2073.18    
  23  0.267818      -1.31745      -106.656       106.656       2042.25       2148.91    
  24  0.663049     -0.410906      -33.2656       33.2656       2010.04       2043.30    
  25  0.782871     -0.244788      -19.8172       19.8172       2096.94       2116.76    
  26  0.706545     -0.347368      -28.1218       28.1218       2100.54       2128.66    
  27  0.120119      -2.11927      -171.569       171.569       2101.37       2272.94    
  28  0.270575      -1.30721      -105.827       105.827       2033.28       2139.11    
  29  0.505391     -0.682422      -55.2466       55.2466       2153.25       2208.50    
  30  0.665734     -0.406865      -32.9384       32.9384       2160.71       2193.65    
  31  0.836788     -0.178185      -14.4253       14.4253       2118.77       2133.19    
  32  0.866983     -0.142736      -11.5554       11.5554       2011.14       2022.70    
  33  0.552904     -0.592571      -47.9725       47.9725       2173.41       2221.38    
  34  0.554153     -0.590314      -47.7899       47.7899       2198.86       2246.65    
  35  0.592407E-01  -2.82615      -228.795       228.795       2095.76       2324.56    
  36  0.902163     -0.102960      -8.33527       8.33527       2225.97       2234.31    
  37  0.266638E-01  -3.62445      -293.423       293.423       2214.01       2507.43    
  38  0.897053     -0.108640      -8.79514       8.79514       2131.53       2140.33    
  39  0.840496     -0.173763      -14.0673       14.0673       2216.95       2231.02    
  40  0.288358      -1.24355      -100.674       100.674       2049.88       2150.56    
  41  0.835972E-01  -2.48175      -200.914       200.914       2263.60       2464.52    
  42  0.412070     -0.886563      -71.7732       71.7732       2277.30       2349.07    
  43  0.725010     -0.321570      -26.0332       26.0332       2164.62       2190.66    
  44  0.316556      -1.15026      -93.1209       93.1209       2092.91       2186.03    
  45  0.486178     -0.721181      -58.3844       58.3844       2200.82       2259.20    
  46  0.143341      -1.94253      -157.261       157.261       2122.33       2279.60    
  47  0.956913     -0.440430E-01  -3.56558       3.56558       2316.27       2319.84    
  48  0.362697      -1.01419      -82.1052       82.1052       2175.09       2257.20    
  49  0.951746     -0.494572E-01  -4.00389       4.00389       2328.26       2332.26    
  50  0.511140     -0.671112      -54.3310       54.3310       2358.01       2412.34    
  51  0.364891E-01  -3.31074      -268.027       268.027       2437.86       2705.89    
  52  0.377076     -0.975308      -78.9577       78.9577       2437.58       2516.54    
  53  0.670030E-01  -2.70302      -218.827       218.827       2182.87       2401.70    
  54  0.448832     -0.801107      -64.8550       64.8550       2396.99       2461.84    
  55  0.252392      -1.37677      -111.459       111.459       2283.35       2394.81    
  56  0.910592     -0.936608E-01  -7.58247       7.58247       2335.22       2342.80    
  57  0.801917     -0.220751      -17.8712       17.8712       2459.65       2477.52    
  58  0.473432     -0.747746      -60.5350       60.5350       1841.83       1902.36    
loop,thermsimp(1:2)       25   3.07056       83.7564    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242       2483.26         68.62          1.18         39.15          0.22          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2483.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       25
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       26
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      241     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -1.01640       1.01640       1776.18       1777.20    
   2  0.516099     -0.661457      -53.5494       53.5494       1852.82       1906.37    
   3  0.202206      -1.59847      -129.407       129.407       1841.83       1971.24    
   4  0.240260      -1.42603      -115.447       115.447       1908.00       2023.45    
   5  0.717263E-01  -2.63490      -213.313       213.313       1835.62       2048.93    
   6  0.395382     -0.927902      -75.1198       75.1198       1904.36       1979.48    
   7  0.494348     -0.704516      -57.0353       57.0353       1913.96       1970.99    
   8  0.970815     -0.296196E-01  -2.39791       2.39791       1922.56       1924.96    
   9  0.992795     -0.723105E-02 -0.585402      0.585402       1913.70       1914.29    
  10  0.387320     -0.948503      -76.7876       76.7876       1879.41       1956.20    
  11  0.586568     -0.533466      -43.1876       43.1876       1925.45       1968.64    
  12  0.119144      -2.12742      -172.229       172.229       1965.45       2137.68    
  13  0.145144      -1.93003      -156.249       156.249       1907.59       2063.83    
  14  0.767931     -0.264056      -21.3771       21.3771       1952.21       1973.59    
  15  0.415014     -0.879442      -71.1967       71.1967       1979.33       2050.53    
  16  0.994477     -0.553801E-02 -0.448338      0.448338       1957.84       1958.29    
  17  0.757243     -0.278071      -22.5117       22.5117       2002.85       2025.36    
  18  0.669290     -0.401537      -32.5071       32.5071       2011.14       2043.65    
  19  0.112026      -2.18903      -177.216       177.216       1952.51       2129.73    
  20  0.434244     -0.834148      -67.5299       67.5299       2010.04       2077.57    
  21  0.491828     -0.709627      -57.4490       57.4490       1966.08       2023.53    
  22  0.517535     -0.658677      -53.3243       53.3243       1862.49       1915.82    
  23  0.411147     -0.888804      -71.9546       71.9546       2033.22       2105.18    
  24  0.250164      -1.38564      -112.177       112.177       1984.75       2096.92    
  25  0.109742E-01  -4.51221      -365.294       365.294       2096.94       2462.24    
  26  0.559459     -0.580786      -47.0185       47.0185       2100.54       2147.56    
  27  0.289677      -1.23899      -100.304       100.304       2118.77       2219.07    
  28  0.835809     -0.179356      -14.5200       14.5200       2033.28       2047.80    
  29  0.236182      -1.44315      -116.833       116.833       2131.53       2248.37    
  30  0.700988     -0.355264      -28.7610       28.7610       2042.25       2071.01    
  31  0.886914     -0.120007      -9.71539       9.71539       2049.88       2059.60    
  32  0.182911      -1.69875      -137.525       137.525       1926.23       2063.76    
  33  0.693089     -0.366597      -29.6785       29.6785       2092.91       2122.59    
  34  0.108523      -2.22079      -179.788       179.788       2164.62       2344.41    
  35  0.141600      -1.95475      -158.250       158.250       2160.71       2318.96    
  36  0.168348E-01  -4.08431      -330.652       330.652       2153.25       2483.90    
  37  0.419419E-01  -3.17147      -256.752       256.752       2173.41       2430.16    
  38  0.244896      -1.40692      -113.900       113.900       2216.95       2330.85    
  39  0.360662      -1.01981      -82.5608       82.5608       2225.97       2308.53    
  40  0.927013     -0.757879E-01  -6.13553       6.13553       2198.86       2204.99    
  41  0.869067     -0.140335      -11.3610       11.3610       2175.09       2186.45    
  42  0.827083     -0.189851      -15.3697       15.3697       2200.82       2216.19    
  43  0.928403     -0.742893E-01  -6.01421       6.01421       2101.37       2107.38    
  44  0.513193     -0.667103      -54.0064       54.0064       2122.33       2176.34    
  45  0.809080     -0.211858      -17.1513       17.1513       2316.27       2333.43    
  46  0.341224E-02  -5.68039      -459.865       459.865       2095.76       2555.62    
  47  0.734431     -0.308659      -24.9880       24.9880       2328.26       2353.25    
  48  0.688454     -0.373307      -30.2217       30.2217       2335.22       2365.44    
  49  0.990614     -0.943067E-02 -0.763475      0.763475       2277.30       2278.06    
  50  0.143408      -1.94206      -157.223       157.223       2283.35       2440.57    
  51  0.868596     -0.140878      -11.4050       11.4050       2182.87       2194.28    
  52  0.244103      -1.41016      -114.162       114.162       2358.01       2472.17    
  53  0.207986      -1.57029      -127.125       127.125       2396.99       2524.11    
  54  0.426578E-01  -3.15455      -255.381       255.381       2263.60       2518.99    
  55  0.111938      -2.18981      -177.280       177.280       2459.65       2636.93    
  56  0.304345      -1.18959      -96.3054       96.3054       2214.01       2310.32    
  57  0.911041     -0.931671E-01  -7.54249       7.54249       2437.58       2445.12    
  58  0.144299      -1.93587      -156.721       156.721       2483.26       2639.98    
loop,thermsimp(1:2)       26   1.01640       53.5494    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243       2437.86         68.49          1.22         39.63          0.01          0.05        109.40
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2437.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       26
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       27
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      242     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -130.453       130.453       1776.18       1906.63    
   2  0.983274     -0.168677E-01  -1.36555       1.36555       1852.82       1854.19    
   3  0.569108     -0.563685      -45.6340       45.6340       1913.70       1959.34    
   4  0.411179     -0.888728      -71.9484       71.9484       1862.49       1934.44    
   5  0.889241     -0.117387      -9.50322       9.50322       1922.56       1932.07    
   6  0.109537      -2.21149      -179.035       179.035       1879.41       2058.45    
   7  0.658027     -0.418509      -33.8811       33.8811       1957.84       1991.72    
   8  0.427534     -0.849722      -68.7906       68.7906       1925.45       1994.24    
   9  0.277803      -1.28084      -103.693       103.693       1913.96       2017.65    
  10  0.568421     -0.564892      -45.7318       45.7318       1841.83       1887.56    
  11  0.368489     -0.998346      -80.8227       80.8227       1952.21       2033.04    
  12  0.100945E-01  -4.59576      -372.058       372.058       1904.36       2276.42    
  13  0.811445     -0.208939      -16.9150       16.9150       1908.00       1924.92    
  14  0.135138      -2.00146      -162.031       162.031       1966.08       2128.11    
  15  0.600340     -0.510258      -41.3088       41.3088       2002.85       2044.16    
  16  0.537538     -0.620755      -50.2543       50.2543       2011.14       2061.40    
  17  0.923261     -0.798434E-01  -6.46385       6.46385       2033.28       2039.75    
  18  0.296505      -1.21569      -98.4184       98.4184       1835.62       1934.04    
  19  0.975666     -0.246348E-01  -1.99435       1.99435       1979.33       1981.33    
  20  0.102971      -2.27331      -184.040       184.040       2049.88       2233.92    
  21  0.110137      -2.20603      -178.593       178.593       1926.23       2104.83    
  22  0.874539     -0.134058      -10.8529       10.8529       1907.59       1918.44    
  23  0.887507     -0.119339      -9.66132       9.66132       2042.25       2051.92    
  24  0.811767     -0.208543      -16.8829       16.8829       2010.04       2026.92    
  25  0.304283      -1.18980      -96.3219       96.3219       1984.75       2081.07    
  26  0.304144      -1.19025      -96.3590       96.3590       2033.22       2129.58    
  27  0.854538     -0.157194      -12.7259       12.7259       2101.37       2114.10    
  28  0.543001     -0.610645      -49.4357       49.4357       2092.91       2142.35    
  29  0.808766     -0.212246      -17.1827       17.1827       1952.51       1969.69    
  30  0.286176      -1.25115      -101.289       101.289       1965.45       2066.74    
  31  0.328161      -1.11425      -90.2059       90.2059       2100.54       2190.75    
  32  0.563264     -0.574006      -46.4696       46.4696       2122.33       2168.80    
  33  0.180895      -1.70984      -138.423       138.423       2175.09       2313.51    
  34  0.977796     -0.224538E-01  -1.81778       1.81778       2182.87       2184.69    
  35  0.650784     -0.429577      -34.7771       34.7771       2198.86       2233.63    
  36  0.350586      -1.04815      -84.8545       84.8545       2200.82       2285.67    
  37  0.852996E-01  -2.46159      -199.282       199.282       2118.77       2318.05    
  38  0.363921      -1.01082      -81.8325       81.8325       2131.53       2213.37    
  39  0.715496E-01  -2.63737      -213.512       213.512       2277.30       2490.81    
  40  0.540542     -0.615184      -49.8032       49.8032       2225.97       2275.77    
  41  0.458744E-02  -5.38443      -435.906       435.906       2214.01       2649.92    
  42  0.684509     -0.379054      -30.6869       30.6869       2160.71       2191.40    
  43  0.827193     -0.189717      -15.3589       15.3589       2216.95       2232.31    
  44  0.430712     -0.842315      -68.1910       68.1910       2316.27       2384.46    
  45  0.925073     -0.778822E-01  -6.30509       6.30509       2164.62       2170.93    
  46  0.139567      -1.96921      -159.421       159.421       2328.26       2487.68    
  47  0.905138     -0.996680E-01  -8.06878       8.06878       2335.22       2343.29    
  48  0.230323      -1.46827      -118.866       118.866       2173.41       2292.28    
  49  0.854981     -0.156676      -12.6839       12.6839       2283.35       2296.03    
  50  0.526676     -0.641170      -51.9070       51.9070       2437.58       2489.49    
  51  0.425904     -0.853542      -69.0999       69.0999       2096.94       2166.04    
  52  0.770395     -0.260852      -21.1177       21.1177       2358.01       2379.12    
  53  0.222399      -1.50328      -121.701       121.701       2153.25       2274.95    
  54  0.849203     -0.163457      -13.2330       13.2330       2263.60       2276.84    
  55  0.409521     -0.892766      -72.2754       72.2754       2396.99       2469.26    
  56  0.526161     -0.642147      -51.9861       51.9861       2095.76       2147.75    
  57  0.705716     -0.348543      -28.2169       28.2169       2459.65       2487.87    
  58  0.548845E-03  -7.50769      -607.798       607.798       2437.86       3045.66    
loop,thermsimp(1:2)       27   130.453       1.36555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244       2483.26         68.66          1.23         38.98          0.14          0.05        109.06
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2483.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       27
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       28
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      243     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -118.396       118.396       1852.82       1971.22    
   2  0.922423     -0.807516E-01  -6.53738       6.53738       1841.83       1848.37    
   3  0.556007     -0.586974      -47.5195       47.5195       1776.18       1823.70    
   4  0.921345     -0.819211E-01  -6.63206       6.63206       1907.59       1914.22    
   5  0.623358     -0.472635      -38.2629       38.2629       1908.00       1946.27    
   6  0.967150     -0.334012E-01  -2.70405       2.70405       1922.56       1925.27    
   7  0.239844      -1.42777      -115.587       115.587       1835.62       1951.20    
   8  0.707370     -0.346201      -28.0273       28.0273       1862.49       1890.52    
   9  0.375591     -0.979256      -79.2773       79.2773       1913.70       1992.98    
  10  0.164915      -1.80233      -145.910       145.910       1952.51       2098.42    
  11  0.634729     -0.454558      -36.7995       36.7995       1979.33       2016.13    
  12  0.956585     -0.443852E-01  -3.59328       3.59328       1957.84       1961.43    
  13  0.281051      -1.26922      -102.752       102.752       1925.45       2028.20    
  14  0.332446      -1.10128      -89.1558       89.1558       1913.96       2003.11    
  15  0.417901     -0.872510      -70.6355       70.6355       2010.04       2080.67    
  16  0.454459     -0.788647      -63.8462       63.8462       1952.21       2016.06    
  17  0.163150      -1.81309      -146.781       146.781       2033.28       2180.07    
  18  0.412675     -0.885095      -71.6543       71.6543       2002.85       2074.51    
  19  0.510076     -0.673195      -54.4996       54.4996       2042.25       2096.75    
  20  0.159872E-02  -6.43855      -521.244       521.244       1879.41       2400.66    
  21  0.279094      -1.27620      -103.317       103.317       2011.14       2114.46    
  22  0.229843E-01  -3.77294      -305.445       305.445       1965.45       2270.90    
  23  0.829240E-02  -4.79242      -387.978       387.978       1984.75       2372.72    
  24  0.722732     -0.324717      -26.2880       26.2880       1926.23       1952.52    
  25  0.399402     -0.917787      -74.3010       74.3010       2101.37       2175.67    
  26  0.321457      -1.13489      -91.8771       91.8771       1966.08       2057.96    
  27  0.103147      -2.27160      -183.901       183.901       2033.22       2217.12    
  28  0.488570     -0.716273      -57.9871       57.9871       2092.91       2150.90    
  29  0.775391     -0.254388      -20.5944       20.5944       2095.76       2116.35    
  30  0.264831      -1.32866      -107.564       107.564       2096.94       2204.51    
  31  0.291634      -1.23225      -99.7592       99.7592       2122.33       2222.09    
  32  0.754799E-02  -4.88647      -395.593       395.593       2164.62       2560.22    
  33  0.403715     -0.907047      -73.4315       73.4315       2182.87       2256.31    
  34  0.794963     -0.229460      -18.5763       18.5763       2100.54       2119.12    
  35  0.482612E-01  -3.03113      -245.390       245.390       2160.71       2406.10    
  36  0.309506      -1.17278      -94.9441       94.9441       2131.53       2226.48    
  37  0.265676      -1.32548      -107.306       107.306       2216.95       2324.26    
  38  0.793358     -0.231480      -18.7399       18.7399       2198.86       2217.60    
  39  0.603192E-01  -2.80811      -227.335       227.335       2049.88       2277.22    
  40  0.516664     -0.660363      -53.4608       53.4608       2153.25       2206.71    
  41  0.524892E-01  -2.94715      -238.591       238.591       2225.97       2464.56    
  42  0.581500     -0.542144      -43.8902       43.8902       1904.36       1948.25    
  43  0.403805     -0.906823      -73.4133       73.4133       2263.60       2337.02    
  44  0.447829     -0.803344      -65.0360       65.0360       2200.82       2265.85    
  45  0.470604     -0.753737      -61.0201       61.0201       2173.41       2234.43    
  46  0.479088     -0.735871      -59.5736       59.5736       2283.35       2342.92    
  47  0.959223     -0.416322E-01  -3.37040       3.37040       2175.09       2178.46    
  48  0.527403     -0.639789      -51.7952       51.7952       2118.77       2170.56    
  49  0.731687     -0.312402      -25.2910       25.2910       2335.22       2360.51    
  50  0.682707     -0.381689      -30.9003       30.9003       2358.01       2388.91    
  51  0.386616     -0.950322      -76.9349       76.9349       2316.27       2393.21    
  52  0.120332      -2.11750      -171.426       171.426       2396.99       2568.41    
  53  0.285899      -1.25212      -101.367       101.367       2328.26       2429.63    
  54  0.798593     -0.224904      -18.2075       18.2075       2459.65       2477.86    
  55  0.305098      -1.18712      -96.1054       96.1054       2437.58       2533.69    
  56  0.274289      -1.29357      -104.723       104.723       2277.30       2382.02    
  57  0.805459     -0.216343      -17.5144       17.5144       2214.01       2231.53    
  58  0.665552     -0.407139      -32.9606       32.9606       2483.26       2516.22    
loop,thermsimp(1:2)       28   118.396       6.53738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       2025.73         68.59          1.18         39.16          0.34          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2025.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       28
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       29
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      244     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -89.2521       89.2521       1776.18       1865.43    
   2  0.991191     -0.884791E-02 -0.716297      0.716297       1841.83       1842.54    
   3  0.752830     -0.283916      -22.9849       22.9849       1862.49       1885.48    
   4  0.718872     -0.330071      -26.7215       26.7215       1907.59       1934.31    
   5  0.362244      -1.01544      -82.2065       82.2065       1922.56       2004.77    
   6  0.993342E-01  -2.30927      -186.950       186.950       1908.00       2094.95    
   7  0.734379     -0.308729      -24.9937       24.9937       1904.36       1929.36    
   8  0.190509      -1.65806      -134.231       134.231       1835.62       1969.85    
   9  0.113713      -2.17408      -176.006       176.006       1926.23       2102.24    
  10  0.582158     -0.541014      -43.7987       43.7987       1957.84       2001.64    
  11  0.100405E-01  -4.60113      -372.492       372.492       1852.82       2225.31    
  12  0.614877     -0.486333      -39.3719       39.3719       1913.70       1953.08    
  13  0.996806     -0.319890E-02 -0.258973      0.258973       1913.96       1914.22    
  14  0.439871E-01  -3.12386      -252.897       252.897       1952.21       2205.11    
  15  0.610456     -0.493549      -39.9561       39.9561       1979.33       2019.29    
  16  0.676471     -0.390866      -31.6432       31.6432       1925.45       1957.10    
  17  0.263829      -1.33246      -107.871       107.871       1966.08       2073.95    
  18  0.761962     -0.271858      -22.0087       22.0087       2002.85       2024.86    
  19  0.405295     -0.903140      -73.1152       73.1152       2010.04       2083.15    
  20  0.184680      -1.68913      -136.746       136.746       2042.25       2179.00    
  21  0.695434     -0.363219      -29.4050       29.4050       1952.51       1981.92    
  22  0.597154     -0.515580      -41.7396       41.7396       2011.14       2052.88    
  23  0.254276      -1.36933      -110.857       110.857       2095.76       2206.62    
  24  0.777974     -0.251062      -20.3252       20.3252       2100.54       2120.86    
  25  0.597236     -0.515443      -41.7285       41.7285       2092.91       2134.64    
  26  0.658168     -0.418295      -33.8638       33.8638       2118.77       2152.63    
  27  0.917953     -0.856086E-01  -6.93058       6.93058       2101.37       2108.30    
  28  0.167567      -1.78637      -144.619       144.619       2175.09       2319.71    
  29  0.867739E-02  -4.74703      -384.304       384.304       2033.28       2417.59    
  30  0.157469      -1.84853      -149.651       149.651       2096.94       2246.59    
  31  0.947458     -0.539724E-01  -4.36943       4.36943       2153.25       2157.62    
  32  0.883772     -0.123556      -10.0027       10.0027       2033.22       2043.22    
  33  0.873100     -0.135705      -10.9862       10.9862       2198.86       2209.84    
  34  0.138043      -1.98019      -160.309       160.309       2122.33       2282.64    
  35  0.833185     -0.182500      -14.7746       14.7746       2131.53       2146.31    
  36  0.907894     -0.966275E-01  -7.82264       7.82264       2214.01       2221.83    
  37  0.858432     -0.152648      -12.3579       12.3579       2173.41       2185.77    
  38  0.192050      -1.65000      -133.579       133.579       2182.87       2316.45    
  39  0.890666     -0.115786      -9.37361       9.37361       2200.82       2210.19    
  40  0.389935     -0.941775      -76.2429       76.2429       1965.45       2041.70    
  41  0.842362     -0.171545      -13.8877       13.8877       2049.88       2063.77    
  42  0.143912      -1.93855      -156.939       156.939       2216.95       2373.89    
  43  0.678545     -0.387804      -31.3953       31.3953       2263.60       2295.00    
  44  0.621021     -0.476390      -38.5670       38.5670       2283.35       2321.92    
  45  0.533199     -0.628861      -50.9105       50.9105       2335.22       2386.13    
  46  0.891703     -0.114623      -9.27947       9.27947       1984.75       1994.03    
  47  0.675469     -0.392349      -31.7632       31.7632       2277.30       2309.06    
  48  0.757471     -0.277770      -22.4873       22.4873       2358.01       2380.49    
  49  0.855441     -0.156139      -12.6405       12.6405       2316.27       2328.91    
  50  0.737982     -0.303836      -24.5976       24.5976       1879.41       1904.01    
  51  0.630328     -0.461515      -37.3627       37.3627       2160.71       2198.07    
  52  0.701612     -0.354375      -28.6890       28.6890       2328.26       2356.95    
  53  0.161537E-01  -4.12561      -333.995       333.995       2225.97       2559.97    
  54  0.716145     -0.333873      -27.0292       27.0292       2459.65       2486.68    
  55  0.644842     -0.438751      -35.5198       35.5198       2483.26       2518.78    
  56  0.465420E-01  -3.06740      -248.327       248.327       2437.58       2685.91    
  57  0.644178     -0.439780      -35.6031       35.6031       2164.62       2200.23    
  58  0.297766      -1.21145      -98.0748       98.0748       2025.73       2123.81    
loop,thermsimp(1:2)       29   89.2521      0.716297    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246       1994.14         68.68          1.19         38.88          0.19          0.05        108.98
Just calling func    0   0        108.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1994.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       29
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       30
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      245     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -149.605       149.605       1841.83       1991.43    
   2  0.553200     -0.592035      -47.9292       47.9292       1776.18       1824.11    
   3  0.825049     -0.192313      -15.5690       15.5690       1862.49       1878.06    
   4  0.767336     -0.264830      -21.4398       21.4398       1879.41       1900.85    
   5  0.966534     -0.340385E-01  -2.75564       2.75564       1913.96       1916.71    
   6  0.954430     -0.466410E-01  -3.77590       3.77590       1904.36       1908.14    
   7  0.780674     -0.247598      -20.0447       20.0447       1907.59       1927.63    
   8  0.312863      -1.16199      -94.0709       94.0709       1913.70       2007.78    
   9  0.990226     -0.982218E-02 -0.795171      0.795171       1925.45       1926.25    
  10  0.893872     -0.112193      -9.08273       9.08273       1835.62       1844.70    
  11  0.322320      -1.13221      -91.6599       91.6599       1952.51       2044.17    
  12  0.927465     -0.752997E-01  -6.09601       6.09601       1984.75       1990.84    
  13  0.539466     -0.617176      -49.9645       49.9645       1957.84       2007.81    
  14  0.461474     -0.773330      -62.6062       62.6062       1922.56       1985.17    
  15  0.745701     -0.293430      -23.7551       23.7551       1979.33       2003.09    
  16  0.703580     -0.351573      -28.4622       28.4622       2002.85       2031.31    
  17  0.917420E-01  -2.38878      -193.387       193.387       1965.45       2158.84    
  18  0.671661     -0.398001      -32.2209       32.2209       2033.22       2065.44    
  19  0.845179     -0.168207      -13.6175       13.6175       2011.14       2024.76    
  20  0.283605E-01  -3.56276      -288.429       288.429       2049.88       2338.31    
  21  0.108883E-01  -4.52006      -365.929       365.929       1966.08       2332.01    
  22  0.506006     -0.681208      -55.1483       55.1483       2010.04       2065.19    
  23  0.353918      -1.03869      -84.0890       84.0890       1908.00       1992.09    
  24  0.656862     -0.420282      -34.0246       34.0246       1926.23       1960.26    
  25  0.691560     -0.368806      -29.8573       29.8573       2101.37       2131.23    
  26  0.445402     -0.808779      -65.4760       65.4760       2100.54       2166.02    
  27  0.832700     -0.183081      -14.8216       14.8216       2025.73       2040.55    
  28  0.963063     -0.376360E-01  -3.04689       3.04689       2092.91       2095.96    
  29  0.422212     -0.862247      -69.8046       69.8046       2131.53       2201.34    
  30  0.917895     -0.856720E-01  -6.93571       6.93571       2118.77       2125.70    
  31  0.767210     -0.264994      -21.4530       21.4530       2153.25       2174.70    
  32  0.360836      -1.01933      -82.5216       82.5216       2042.25       2124.78    
  33  0.635930     -0.452667      -36.6464       36.6464       2173.41       2210.06    
  34  0.687292     -0.374995      -30.3584       30.3584       2160.71       2191.07    
  35  0.833832     -0.181724      -14.7118       14.7118       2164.62       2179.34    
  36  0.362075      -1.01590      -82.2443       82.2443       1952.21       2034.46    
  37  0.385764     -0.952530      -77.1136       77.1136       2095.76       2172.87    
  38  0.752556     -0.284279      -23.0143       23.0143       2198.86       2221.87    
  39  0.547433     -0.602515      -48.7776       48.7776       2200.82       2249.60    
  40  0.171004      -1.76607      -142.975       142.975       2214.01       2356.99    
  41  0.159022      -1.83871      -148.856       148.856       1852.82       2001.68    
  42  0.850806     -0.161571      -13.0802       13.0802       2096.94       2110.02    
  43  0.926075     -0.768001E-01  -6.21748       6.21748       2122.33       2128.55    
  44  0.584885     -0.536340      -43.4203       43.4203       2263.60       2307.02    
  45  0.547650     -0.602120      -48.7456       48.7456       2277.30       2326.04    
  46  0.864296     -0.145840      -11.8067       11.8067       2182.87       2194.68    
  47  0.384639     -0.955450      -77.3500       77.3500       2175.09       2252.44    
  48  0.359776      -1.02227      -82.7599       82.7599       2283.35       2366.11    
  49  0.147032      -1.91711      -155.203       155.203       2316.27       2471.48    
  50  0.649806     -0.431082      -34.8989       34.8989       2328.26       2363.16    
  51  0.909946     -0.943695E-01  -7.63984       7.63984       2216.95       2224.59    
  52  0.740699     -0.300161      -24.3000       24.3000       2358.01       2382.31    
  53  0.959446     -0.413992E-01  -3.35154       3.35154       2335.22       2338.57    
  54  0.993892     -0.612654E-02 -0.495984      0.495984       2033.28       2033.78    
  55  0.499875     -0.693397      -56.1351       56.1351       2459.65       2515.79    
  56  0.716813     -0.332941      -26.9538       26.9538       2483.26       2510.21    
  57  0.586555     -0.533488      -43.1894       43.1894       2225.97       2269.16    
  58  0.687999     -0.373968      -30.2752       30.2752       1994.14       2024.41    
loop,thermsimp(1:2)       30   149.605       47.9292    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       2007.43         68.75          1.19         39.18          0.12          0.05        109.28
Just calling func    0   0        109.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2007.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       30
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       31
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      246     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -103.778       103.778       1776.18       1879.96    
   2  0.202445      -1.59728      -129.311       129.311       1835.62       1964.93    
   3  0.927152     -0.756373E-01  -6.12335       6.12335       1862.49       1868.62    
   4  0.403144     -0.908460      -73.5459       73.5459       1879.41       1952.96    
   5  0.791838     -0.233398      -18.8951       18.8951       1904.36       1923.26    
   6  0.292576      -1.22903      -99.4981       99.4981       1913.96       2013.46    
   7  0.135578      -1.99821      -161.768       161.768       1925.45       2087.22    
   8  0.516570     -0.660545      -53.4755       53.4755       1907.59       1961.06    
   9  0.730579     -0.313918      -25.4137       25.4137       1926.23       1951.65    
  10  0.508248     -0.676786      -54.7903       54.7903       1922.56       1977.35    
  11  0.928455     -0.742338E-01  -6.00972       6.00972       1984.75       1990.76    
  12  0.696477     -0.361721      -29.2837       29.2837       1841.83       1871.11    
  13  0.465556     -0.764522      -61.8931       61.8931       1908.00       1969.90    
  14  0.194653      -1.63654      -132.489       132.489       1852.82       1985.31    
  15  0.650312     -0.430303      -34.8359       34.8359       1979.33       2014.17    
  16  0.555802     -0.587343      -47.5493       47.5493       1913.70       1961.25    
  17  0.985517     -0.145893E-01  -1.18110       1.18110       1957.84       1959.02    
  18  0.923066     -0.800544E-01  -6.48093       6.48093       1994.14       2000.62    
  19  0.658765     -0.417388      -33.7903       33.7903       2011.14       2044.93    
  20  0.197878      -1.62010      -131.158       131.158       2002.85       2134.01    
  21  0.449673     -0.799236      -64.7034       64.7034       2033.28       2097.99    
  22  0.208093      -1.56977      -127.083       127.083       1952.21       2079.30    
  23  0.102791      -2.27506      -184.181       184.181       2025.73       2209.91    
  24  0.650538     -0.429955      -34.8077       34.8077       1952.51       1987.32    
  25  0.223365      -1.49895      -121.350       121.350       2010.04       2131.39    
  26  0.520729     -0.652525      -52.8262       52.8262       2033.22       2086.05    
  27  0.919707E-01  -2.38629      -193.186       193.186       2092.91       2286.10    
  28  0.788427     -0.237716      -19.2447       19.2447       2096.94       2116.19    
  29  0.395754     -0.926961      -75.0437       75.0437       2042.25       2117.30    
  30  0.903388     -0.101603      -8.22547       8.22547       2118.77       2126.99    
  31  0.569415     -0.563145      -45.5904       45.5904       2122.33       2167.92    
  32  0.974677     -0.256496E-01  -2.07651       2.07651       2101.37       2103.45    
  33  0.376411     -0.977073      -79.1005       79.1005       1965.45       2044.55    
  34  0.309090      -1.17412      -95.0531       95.0531       2100.54       2195.59    
  35  0.248039      -1.39417      -112.867       112.867       2095.76       2208.63    
  36  0.941329     -0.604621E-01  -4.89481       4.89481       2153.25       2158.15    
  37  0.131879      -2.02587      -164.008       164.008       2164.62       2328.63    
  38  0.188022      -1.67120      -135.295       135.295       2160.71       2296.01    
  39  0.898649E-01  -2.40945      -195.061       195.061       2182.87       2377.94    
  40  0.853893     -0.157949      -12.7870       12.7870       2131.53       2144.32    
  41  0.643577     -0.440714      -35.6787       35.6787       2173.41       2209.09    
  42  0.664391     -0.408885      -33.1020       33.1020       2198.86       2231.96    
  43  0.825262     -0.192054      -15.5481       15.5481       2216.95       2232.50    
  44  0.611498     -0.491843      -39.8180       39.8180       2200.82       2240.64    
  45  0.284000      -1.25878      -101.907       101.907       2175.09       2277.00    
  46  0.108174      -2.22402      -180.049       180.049       2225.97       2406.02    
  47  0.293070      -1.22734      -99.3616       99.3616       2263.60       2362.97    
  48  0.412045     -0.886623      -71.7780       71.7780       2277.30       2349.08    
  49  0.464041     -0.767783      -62.1572       62.1572       1966.08       2028.24    
  50  0.711768     -0.340003      -27.5255       27.5255       2049.88       2077.41    
  51  0.919970     -0.834138E-01  -6.75291       6.75291       2335.22       2341.97    
  52  0.551321     -0.595437      -48.2046       48.2046       2214.01       2262.22    
  53  0.720690E-01  -2.63013      -212.927       212.927       2328.26       2541.19    
  54  0.788823     -0.237213      -19.2040       19.2040       2283.35       2302.55    
  55  0.339304      -1.08086      -87.5028       87.5028       2358.01       2445.51    
  56  0.824115     -0.193445      -15.6607       15.6607       2316.27       2331.93    
  57  0.564535     -0.571754      -46.2873       46.2873       2483.26       2529.54    
  58  0.608050     -0.497498      -40.2758       40.2758       2007.43       2047.70    
loop,thermsimp(1:2)       31   103.778       129.311    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248       1929.90         68.70          1.18         39.02          0.12          0.05        109.06
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249       3183.14         68.73          1.20         38.99          0.16          0.05        109.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1929.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       31
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       32
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      248     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -28.7201       28.7201       1862.49       1891.21    
   2  0.779682     -0.248869      -20.1476       20.1476       1841.83       1861.98    
   3  0.611645     -0.491604      -39.7986       39.7986       1776.18       1815.98    
   4  0.380626     -0.965937      -78.1990       78.1990       1904.36       1982.56    
   5  0.986599     -0.134915E-01  -1.09222       1.09222       1926.23       1927.33    
   6  0.699021     -0.358075      -28.9885       28.9885       1879.41       1908.40    
   7  0.981217E-01  -2.32155      -187.945       187.945       1957.84       2145.79    
   8  0.221199      -1.50869      -122.139       122.139       1907.59       2029.72    
   9  0.802460     -0.220073      -17.8164       17.8164       1913.70       1931.52    
  10  0.623430     -0.472519      -38.2535       38.2535       1835.62       1873.87    
  11  0.669862     -0.400684      -32.4380       32.4380       1908.00       1940.44    
  12  0.957999     -0.429090E-01  -3.47377       3.47377       1922.56       1926.04    
  13  0.569879E-01  -2.86492      -231.934       231.934       1852.82       2084.75    
  14  0.245244      -1.40550      -113.785       113.785       1952.51       2066.29    
  15  0.870123     -0.139121      -11.2628       11.2628       1984.75       1996.01    
  16  0.429679     -0.844716      -68.3854       68.3854       1994.14       2062.52    
  17  0.369880     -0.994577      -80.5176       80.5176       1913.96       1994.47    
  18  0.964882     -0.357490E-01  -2.89412       2.89412       1979.33       1982.23    
  19  0.625983     -0.468432      -37.9227       37.9227       1966.08       2004.01    
  20  0.508652     -0.675991      -54.7259       54.7259       1965.45       2020.18    
  21  0.694697     -0.364279      -29.4908       29.4908       2011.14       2040.63    
  22  0.817819     -0.201114      -16.2815       16.2815       2007.43       2023.71    
  23  0.655732     -0.422003      -34.1640       34.1640       2049.88       2084.05    
  24  0.658757     -0.417401      -33.7913       33.7913       1952.21       1986.00    
  25  0.325934      -1.12106      -90.7573       90.7573       2033.22       2123.98    
  26  0.849137     -0.163535      -13.2392       13.2392       1925.45       1938.69    
  27  0.953435     -0.476843E-01  -3.86036       3.86036       2033.28       2037.15    
  28  0.435049     -0.832297      -67.3799       67.3799       2101.37       2168.75    
  29  0.155341E-01  -4.16472      -337.162       337.162       2096.94       2434.11    
  30  0.390095     -0.941364      -76.2097       76.2097       2042.25       2118.46    
  31  0.400867E-02  -5.51929      -446.824       446.824       2118.77       2565.59    
  32  0.989750     -0.103025E-01 -0.834057      0.834057       2010.04       2010.87    
  33  0.194149      -1.63913      -132.698       132.698       2002.85       2135.55    
  34  0.573547     -0.555915      -45.0050       45.0050       2131.53       2176.54    
  35  0.570216     -0.561740      -45.4766       45.4766       2153.25       2198.73    
  36  0.802122     -0.220494      -17.8505       17.8505       2122.33       2140.18    
  37  0.831214E-01  -2.48745      -201.376       201.376       2100.54       2301.92    
  38  0.280368      -1.27165      -102.949       102.949       2095.76       2198.71    
  39  0.568263     -0.565171      -45.7543       45.7543       2173.41       2219.17    
  40  0.570544     -0.561165      -45.4300       45.4300       2025.73       2071.16    
  41  0.524202     -0.645877      -52.2881       52.2881       2198.86       2251.15    
  42  0.625335E-01  -2.77205      -224.416       224.416       2216.95       2441.37    
  43  0.717146     -0.332476      -26.9162       26.9162       2200.82       2227.73    
  44  0.234175      -1.45169      -117.524       117.524       2214.01       2331.54    
  45  0.366320      -1.00425      -81.3006       81.3006       2175.09       2256.39    
  46  0.458915     -0.778891      -63.0564       63.0564       2092.91       2155.97    
  47  0.379536     -0.968806      -78.4313       78.4313       2160.71       2239.14    
  48  0.854466     -0.157278      -12.7327       12.7327       2283.35       2296.08    
  49  0.452738E-01  -3.09503      -250.563       250.563       2164.62       2415.19    
  50  0.966525     -0.340477E-01  -2.75639       2.75639       2316.27       2319.03    
  51  0.400949     -0.913920      -73.9879       73.9879       2335.22       2409.21    
  52  0.563096     -0.574305      -46.4938       46.4938       2277.30       2323.79    
  53  0.612298     -0.490536      -39.7121       39.7121       2263.60       2303.32    
  54  0.395518     -0.927559      -75.0921       75.0921       2182.87       2257.97    
  55  0.693522     -0.365972      -29.6278       29.6278       2225.97       2255.60    
  56  0.270894      -1.30603      -105.732       105.732       2358.01       2463.74    
  57  0.885600     -0.121490      -9.83541       9.83541       2483.26       2493.09    
  58  0.862297     -0.148155      -11.9941       11.9941       1929.90       1941.90    
loop,thermsimp(1:2)       32   28.7201       20.1476    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250       2478.82         68.76          1.20         39.02          0.09          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2478.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       32
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       33
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      249     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -73.3801       73.3801       1776.18       1849.56    
   2  0.598662     -0.513057      -41.5354       41.5354       1841.83       1883.36    
   3  0.165178      -1.80073      -145.781       145.781       1835.62       1981.40    
   4  0.785331     -0.241651      -19.5632       19.5632       1862.49       1882.06    
   5  0.422061     -0.862604      -69.8336       69.8336       1879.41       1949.25    
   6  0.343624      -1.06821      -86.4784       86.4784       1922.56       2009.04    
   7  0.988862     -0.112001E-01 -0.906722      0.906722       1926.23       1927.14    
   8  0.586093E-01  -2.83686      -229.663       229.663       1913.70       2143.37    
   9  0.324880      -1.12430      -91.0195       91.0195       1925.45       2016.47    
  10  0.869373     -0.139983      -11.3326       11.3326       1908.00       1919.34    
  11  0.314362      -1.15721      -93.6838       93.6838       1929.90       2023.59    
  12  0.635265     -0.453712      -36.7310       36.7310       1979.33       2016.06    
  13  0.800738     -0.222221      -17.9903       17.9903       1904.36       1922.35    
  14  0.234515      -1.45024      -117.406       117.406       1952.21       2069.62    
  15  0.818766     -0.199957      -16.1878       16.1878       1913.96       1930.14    
  16  0.480807     -0.732289      -59.2836       59.2836       1984.75       2044.03    
  17  0.173083      -1.75398      -141.997       141.997       1966.08       2108.08    
  18  0.544835     -0.607272      -49.1627       49.1627       2010.04       2059.20    
  19  0.955728     -0.452816E-01  -3.66584       3.66584       1965.45       1969.12    
  20  0.909631     -0.947157E-01  -7.66787       7.66787       2007.43       2015.10    
  21  0.538276     -0.619384      -50.1432       50.1432       1907.59       1957.73    
  22  0.640373     -0.445705      -36.0828       36.0828       2033.28       2069.37    
  23  0.588429     -0.530300      -42.9313       42.9313       2011.14       2054.07    
  24  0.954392     -0.466804E-01  -3.77909       3.77909       1994.14       1997.92    
  25  0.976738     -0.235363E-01  -1.90542       1.90542       1952.51       1954.42    
  26  0.801897     -0.220775      -17.8732       17.8732       2025.73       2043.60    
  27  0.679499     -0.386400      -31.2817       31.2817       2049.88       2081.17    
  28  0.303686      -1.19176      -96.4810       96.4810       1852.82       1949.30    
  29  0.907562     -0.969936E-01  -7.85228       7.85228       2042.25       2050.11    
  30  0.117971E-01  -4.43990      -359.440       359.440       2033.22       2392.66    
  31  0.324683      -1.12491      -91.0687       91.0687       2002.85       2093.92    
  32  0.662106     -0.412329      -33.3808       33.3808       2122.33       2155.72    
  33  0.334080      -1.09637      -88.7588       88.7588       1957.84       2046.60    
  34  0.307577      -1.17903      -95.4503       95.4503       2092.91       2188.36    
  35  0.539029     -0.617986      -50.0301       50.0301       2101.37       2151.40    
  36  0.822737     -0.195119      -15.7962       15.7962       2131.53       2147.33    
  37  0.973480     -0.268776E-01  -2.17592       2.17592       2095.76       2097.94    
  38  0.918970     -0.845018E-01  -6.84098       6.84098       2153.25       2160.09    
  39  0.203072      -1.59419      -129.061       129.061       2173.41       2302.47    
  40  0.467655     -0.760024      -61.5290       61.5290       2200.82       2262.35    
  41  0.323145      -1.12965      -91.4529       91.4529       2160.71       2252.16    
  42  0.505961     -0.681295      -55.1554       55.1554       2198.86       2254.01    
  43  0.699853E-01  -2.65947      -215.302       215.302       2225.97       2441.27    
  44  0.188263      -1.66991      -135.191       135.191       2175.09       2310.28    
  45  0.663178     -0.410711      -33.2498       33.2498       2182.87       2216.12    
  46  0.680233     -0.385320      -31.1942       31.1942       2283.35       2314.54    
  47  0.717812     -0.331548      -26.8410       26.8410       2100.54       2127.38    
  48  0.319374      -1.14139      -92.4033       92.4033       2263.60       2356.01    
  49  0.667076     -0.404851      -32.7754       32.7754       2316.27       2349.05    
  50  0.755360     -0.280560      -22.7132       22.7132       2277.30       2300.01    
  51  0.105804      -2.24617      -181.842       181.842       2214.01       2395.85    
  52  0.432752     -0.837590      -67.8085       67.8085       2335.22       2403.03    
  53  0.258710      -1.35205      -109.457       109.457       2164.62       2274.08    
  54  0.826410     -0.190665      -15.4356       15.4356       2096.94       2112.38    
  55  0.958430     -0.424590E-01  -3.43734       3.43734       2216.95       2220.39    
  56  0.898442     -0.107093      -8.66987       8.66987       2358.01       2366.68    
  57  0.794924     -0.229509      -18.5803       18.5803       2483.26       2501.84    
  58  0.191148      -1.65471      -133.960       133.960       2478.82       2612.78    
loop,thermsimp(1:2)       33   73.3801       41.5354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       2118.77         68.58          1.23         39.30          0.05          0.05        109.20
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2118.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       33
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       34
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      250     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -119.360       119.360       1776.18       1895.54    
   2  0.299376      -1.20605      -97.6381       97.6381       1862.49       1960.13    
   3  0.220114      -1.51361      -122.537       122.537       1841.83       1964.37    
   4  0.229209      -1.47312      -119.259       119.259       1908.00       2027.26    
   5  0.902477     -0.102612      -8.30716       8.30716       1904.36       1912.67    
   6  0.659052     -0.416953      -33.7551       33.7551       1926.23       1959.99    
   7  0.100321E-01  -4.60197      -372.560       372.560       1913.96       2286.52    
   8  0.588837     -0.529606      -42.8751       42.8751       1879.41       1922.29    
   9  0.270943      -1.30585      -105.717       105.717       1852.82       1958.54    
  10  0.505518     -0.682171      -55.2263       55.2263       1952.51       2007.74    
  11  0.264565      -1.32967      -107.646       107.646       1907.59       2015.23    
  12  0.806386     -0.215193      -17.4213       17.4213       1965.45       1982.88    
  13  0.340560      -1.07716      -87.2036       87.2036       1835.62       1922.82    
  14  0.906186     -0.985106E-01  -7.97508       7.97508       1994.14       2002.11    
  15  0.786070     -0.240709      -19.4870       19.4870       1922.56       1942.05    
  16  0.540508     -0.615247      -49.8083       49.8083       2007.43       2057.24    
  17  0.935065     -0.671392E-01  -5.43536       5.43536       1979.33       1984.77    
  18  0.915359     -0.884391E-01  -7.15974       7.15974       1925.45       1932.61    
  19  0.958261     -0.426353E-01  -3.45161       3.45161       1929.90       1933.36    
  20  0.935110     -0.670907E-01  -5.43144       5.43144       2025.73       2031.16    
  21  0.637755     -0.449800      -36.4143       36.4143       1984.75       2021.16    
  22  0.975714     -0.245861E-01  -1.99041       1.99041       1957.84       1959.83    
  23  0.797424     -0.226369      -18.3261       18.3261       2042.25       2060.58    
  24  0.214179      -1.54094      -124.750       124.750       2011.14       2135.89    
  25  0.372145     -0.988472      -80.0234       80.0234       2010.04       2090.06    
  26  0.925208     -0.777367E-01  -6.29330       6.29330       2033.28       2039.58    
  27  0.175897      -1.73786      -140.691       140.691       1952.21       2092.90    
  28  0.952033     -0.491554E-01  -3.97946       3.97946       2049.88       2053.86    
  29  0.158274E-01  -4.14601      -335.647       335.647       2002.85       2338.50    
  30  0.799308     -0.224008      -18.1350       18.1350       2095.76       2113.89    
  31  0.248227      -1.39341      -112.806       112.806       1966.08       2078.89    
  32  0.244914      -1.40685      -113.894       113.894       2096.94       2210.84    
  33  0.390842     -0.939452      -76.0549       76.0549       2100.54       2176.59    
  34  0.146784      -1.91879      -155.339       155.339       1913.70       2069.04    
  35  0.500975     -0.691199      -55.9572       55.9572       2131.53       2187.49    
  36  0.480131E-01  -3.03628      -245.807       245.807       2101.37       2347.18    
  37  0.124503      -2.08343      -168.667       168.667       2122.33       2291.00    
  38  0.670304     -0.400024      -32.3846       32.3846       2153.25       2185.64    
  39  0.997449     -0.255468E-02 -0.206818      0.206818       2092.91       2093.12    
  40  0.681761     -0.383076      -31.0125       31.0125       2182.87       2213.89    
  41  0.440529     -0.819778      -66.3665       66.3665       2216.95       2283.32    
  42  0.342489      -1.07152      -86.7464       86.7464       2160.71       2247.46    
  43  0.735753     -0.306861      -24.8424       24.8424       2198.86       2223.70    
  44  0.614752     -0.486537      -39.3884       39.3884       2200.82       2240.21    
  45  0.351660      -1.04509      -84.6070       84.6070       2164.62       2249.23    
  46  0.777165     -0.252103      -20.4094       20.4094       2277.30       2297.71    
  47  0.392618     -0.934919      -75.6879       75.6879       2173.41       2249.10    
  48  0.385647     -0.952832      -77.1381       77.1381       2175.09       2252.23    
  49  0.834392     -0.181052      -14.6574       14.6574       2283.35       2298.01    
  50  0.469158     -0.756815      -61.2692       61.2692       2316.27       2377.54    
  51  0.697320     -0.360511      -29.1858       29.1858       2263.60       2292.79    
  52  0.987150     -0.129333E-01  -1.04703       1.04703       2358.01       2359.05    
  53  0.512413     -0.668624      -54.1296       54.1296       2033.22       2087.35    
  54  0.781282     -0.246819      -19.9817       19.9817       2214.01       2233.99    
  55  0.290579      -1.23588      -100.053       100.053       2335.22       2435.27    
  56  0.921499     -0.817534E-01  -6.61848       6.61848       2225.97       2232.59    
  57  0.198558      -1.61668      -130.881       130.881       2483.26       2614.14    
  58  0.488340     -0.716743      -58.0251       58.0251       2118.77       2176.79    
loop,thermsimp(1:2)       34   119.360       97.6381    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       2465.48         68.59          1.20         39.11          0.21          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2465.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       34
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       35
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      251     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -85.6318       85.6318       1776.18       1861.81    
   2  0.621479     -0.475653      -38.5073       38.5073       1904.36       1942.87    
   3  0.221273      -1.50836      -122.112       122.112       1879.41       2001.53    
   4  0.180626E-01  -4.01391      -324.953       324.953       1835.62       2160.57    
   5  0.216093      -1.53205      -124.030       124.030       1925.45       2049.48    
   6  0.351343      -1.04599      -84.6800       84.6800       1929.90       2014.58    
   7  0.360847      -1.01930      -82.5193       82.5193       1922.56       2005.08    
   8  0.439525     -0.822061      -66.5513       66.5513       1852.82       1919.37    
   9  0.910616E-01  -2.39622      -193.990       193.990       1957.84       2151.83    
  10  0.549745     -0.598300      -48.4364       48.4364       1926.23       1974.67    
  11  0.619825     -0.478318      -38.7230       38.7230       1862.49       1901.22    
  12  0.548169E-01  -2.90376      -235.078       235.078       1841.83       2076.91    
  13  0.947163     -0.542842E-01  -4.39467       4.39467       1965.45       1969.85    
  14  0.725459     -0.320951      -25.9831       25.9831       1979.33       2005.31    
  15  0.481613     -0.730615      -59.1482       59.1482       1994.14       2053.29    
  16  0.866286     -0.143540      -11.6206       11.6206       1952.51       1964.13    
  17  0.221988E-01  -3.80772      -308.260       308.260       1907.59       2215.85    
  18  0.980823     -0.193630E-01  -1.56757       1.56757       1984.75       1986.31    
  19  0.332549      -1.10097      -89.1306       89.1306       1908.00       1997.14    
  20  0.989035     -0.110256E-01 -0.892596      0.892596       2025.73       2026.62    
  21  0.364016      -1.01056      -81.8113       81.8113       2033.28       2115.10    
  22  0.861799     -0.148733      -12.0409       12.0409       2049.88       2061.92    
  23  0.622306     -0.474324      -38.3997       38.3997       2007.43       2045.83    
  24  0.575476     -0.552558      -44.7332       44.7332       2042.25       2086.99    
  25  0.205536      -1.58213      -128.084       128.084       1913.70       2041.79    
  26  0.124037      -2.08718      -168.971       168.971       1966.08       2135.05    
  27  0.467008     -0.761408      -61.6411       61.6411       2033.22       2094.86    
  28  0.273870      -1.29510      -104.847       104.847       2010.04       2114.89    
  29  0.842780     -0.171050      -13.8476       13.8476       1952.21       1966.06    
  30  0.709315     -0.343455      -27.8050       27.8050       2092.91       2120.72    
  31  0.677144     -0.389871      -31.5626       31.5626       2095.76       2127.32    
  32  0.656062     -0.421500      -34.1233       34.1233       2011.14       2045.27    
  33  0.721592     -0.326295      -26.4158       26.4158       2100.54       2126.96    
  34  0.120172      -2.11883      -171.534       171.534       2118.77       2290.30    
  35  0.832403     -0.183439      -14.8506       14.8506       2153.25       2168.10    
  36  0.607577     -0.498276      -40.3388       40.3388       2131.53       2171.87    
  37  0.169814      -1.77305      -143.540       143.540       2096.94       2240.48    
  38  0.578085     -0.548034      -44.3670       44.3670       2182.87       2227.24    
  39  0.201144      -1.60373      -129.833       129.833       2198.86       2328.69    
  40  0.922823     -0.803178E-01  -6.50226       6.50226       2225.97       2232.47    
  41  0.136644      -1.99038      -161.134       161.134       2214.01       2375.15    
  42  0.836366     -0.178689      -14.4660       14.4660       2200.82       2215.28    
  43  0.590669     -0.526499      -42.6236       42.6236       2160.71       2203.34    
  44  0.745946     -0.293102      -23.7285       23.7285       2173.41       2197.14    
  45  0.874736     -0.133833      -10.8347       10.8347       2164.62       2175.46    
  46  0.370232     -0.993625      -80.4406       80.4406       2175.09       2255.53    
  47  0.832293     -0.183570      -14.8612       14.8612       2216.95       2231.82    
  48  0.351566      -1.04536      -84.6287       84.6287       1913.96       1998.59    
  49  0.705870     -0.348324      -28.1992       28.1992       2122.33       2150.53    
  50  0.323816      -1.12758      -91.2852       91.2852       2263.60       2354.89    
  51  0.197269      -1.62319      -131.408       131.408       2277.30       2408.71    
  52  0.140686      -1.96123      -158.774       158.774       2283.35       2442.12    
  53  0.913651     -0.903067E-01  -7.31092       7.31092       2002.85       2010.16    
  54  0.515699     -0.662233      -53.6121       53.6121       2101.37       2154.98    
  55  0.217669      -1.52478      -123.441       123.441       2358.01       2481.45    
  56  0.234146      -1.45181      -117.534       117.534       2316.27       2433.81    
  57  0.948303     -0.530813E-01  -4.29728       4.29728       2335.22       2339.52    
  58  0.165683      -1.79768      -145.534       145.534       2465.48       2611.02    
loop,thermsimp(1:2)       35   85.6318       38.5073    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       2483.26         68.62          1.20         39.06          0.12          0.05        109.05
Just calling func    0   0        109.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2483.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       35
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       36
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      252     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -117.684       117.684       1776.18       1893.86    
   2  0.607568     -0.498291      -40.3400       40.3400       1862.49       1902.83    
   3  0.905785     -0.989529E-01  -8.01090       8.01090       1852.82       1860.83    
   4  0.995938E-01  -2.30666      -186.739       186.739       1904.36       2091.10    
   5  0.851360     -0.160920      -13.0276       13.0276       1952.51       1965.54    
   6  0.730583     -0.313913      -25.4133       25.4133       1952.21       1977.63    
   7  0.426216     -0.852810      -69.0406       69.0406       1965.45       2034.49    
   8  0.285108      -1.25489      -101.592       101.592       1926.23       2027.83    
   9  0.839246     -0.175251      -14.1878       14.1878       1984.75       1998.93    
  10  0.217639      -1.52492      -123.452       123.452       1908.00       2031.46    
  11  0.183996E-02  -6.29801      -509.866       509.866       1913.96       2423.82    
  12  0.682631     -0.381801      -30.9093       30.9093       1879.41       1910.32    
  13  0.203596      -1.59162      -128.852       128.852       1922.56       2051.41    
  14  0.881164     -0.126512      -10.2420       10.2420       1979.33       1989.57    
  15  0.711431     -0.340477      -27.5638       27.5638       2002.85       2030.42    
  16  0.874326     -0.134302      -10.8726       10.8726       1929.90       1940.78    
  17  0.814222     -0.205523      -16.6384       16.6384       2025.73       2042.37    
  18  0.995668     -0.434126E-02 -0.351454      0.351454       1913.70       1914.06    
  19  0.693805     -0.365564      -29.5949       29.5949       2011.14       2040.74    
  20  0.958584     -0.422984E-01  -3.42434       3.42434       2007.43       2010.85    
  21  0.748022     -0.290323      -23.5036       23.5036       1925.45       1948.96    
  22  0.696703     -0.361396      -29.2574       29.2574       1994.14       2023.40    
  23  0.732990     -0.310623      -25.1470       25.1470       2049.88       2075.03    
  24  0.534749     -0.625958      -50.6754       50.6754       1841.83       1892.50    
  25  0.691641     -0.368688      -29.8477       29.8477       2042.25       2072.10    
  26  0.300458      -1.20245      -97.3461       97.3461       2033.22       2130.57    
  27  0.977116     -0.231502E-01  -1.87417       1.87417       2010.04       2011.91    
  28  0.542581     -0.611418      -49.4984       49.4984       2033.28       2082.78    
  29  0.266111      -1.32384      -107.174       107.174       2092.91       2200.09    
  30  0.692298     -0.367738      -29.7709       29.7709       2100.54       2130.31    
  31  0.664047     -0.409403      -33.1439       33.1439       2095.76       2128.90    
  32  0.542186     -0.612146      -49.5573       49.5573       1966.08       2015.64    
  33  0.362243      -1.01544      -82.2065       82.2065       2122.33       2204.54    
  34  0.578658     -0.547044      -44.2868       44.2868       1957.84       2002.13    
  35  0.489298     -0.714783      -57.8664       57.8664       2101.37       2159.24    
  36  0.617485     -0.482100      -39.0292       39.0292       1835.62       1874.65    
  37  0.368651     -0.997905      -80.7871       80.7871       2153.25       2234.04    
  38  0.198936      -1.61477      -130.726       130.726       2131.53       2262.26    
  39  0.505263     -0.682676      -55.2672       55.2672       2164.62       2219.89    
  40  0.983997     -0.161325E-01  -1.30603       1.30603       2173.41       2174.72    
  41  0.630553     -0.461159      -37.3339       37.3339       2160.71       2198.05    
  42  0.423821E-01  -3.16103      -255.906       255.906       2200.82       2456.72    
  43  0.488935     -0.715526      -57.9266       57.9266       1907.59       1965.51    
  44  0.402078     -0.911110      -73.7604       73.7604       2182.87       2256.64    
  45  0.380878     -0.965277      -78.1456       78.1456       2216.95       2295.10    
  46  0.260585E-01  -3.64741      -295.282       295.282       2225.97       2521.25    
  47  0.681660     -0.383224      -31.0245       31.0245       2096.94       2127.97    
  48  0.489074     -0.715241      -57.9035       57.9035       2175.09       2232.99    
  49  0.752363     -0.284536      -23.0351       23.0351       2118.77       2141.80    
  50  0.978934     -0.212911E-01  -1.72366       1.72366       2198.86       2200.58    
  51  0.297789      -1.21137      -98.0686       98.0686       2335.22       2433.29    
  52  0.551604     -0.594926      -48.1632       48.1632       2263.60       2311.77    
  53  0.546413     -0.604381      -48.9287       48.9287       2214.01       2262.94    
  54  0.831880     -0.184067      -14.9014       14.9014       2277.30       2292.20    
  55  0.873708     -0.135010      -10.9299       10.9299       2316.27       2327.20    
  56  0.169447      -1.77521      -143.715       143.715       2283.35       2427.07    
  57  0.434000     -0.834712      -67.5755       67.5755       2358.01       2425.58    
  58  0.506119     -0.680984      -55.1302       55.1302       2483.26       2538.39    
loop,thermsimp(1:2)       36   117.684       40.3400    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       2465.48         68.61          1.20         39.18          0.19          0.05        109.23
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2465.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       36
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       37
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      253     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -71.9245       71.9245       1852.82       1924.74    
   2  0.697205     -0.360676      -29.1991       29.1991       1835.62       1864.82    
   3  0.314648E-01  -3.45889      -280.020       280.020       1841.83       2121.85    
   4  0.857269     -0.154003      -12.4676       12.4676       1776.18       1788.65    
   5  0.652165     -0.427457      -34.6055       34.6055       1862.49       1897.10    
   6  0.510145     -0.673060      -54.4887       54.4887       1879.41       1933.90    
   7  0.175175      -1.74197      -141.024       141.024       1913.70       2054.73    
   8  0.373803     -0.984025      -79.6634       79.6634       1929.90       2009.57    
   9  0.514972     -0.663642      -53.7263       53.7263       1925.45       1979.18    
  10  0.548235     -0.601051      -48.6591       48.6591       1907.59       1956.25    
  11  0.541310     -0.613763      -49.6882       49.6882       1952.51       2002.20    
  12  0.734083     -0.309133      -25.0263       25.0263       1952.21       1977.24    
  13  0.422599     -0.861332      -69.7306       69.7306       1979.33       2049.06    
  14  0.287055      -1.24808      -101.040       101.040       1984.75       2085.79    
  15  0.885133     -0.122017      -9.87810       9.87810       1957.84       1967.72    
  16  0.391075     -0.938857      -76.0067       76.0067       2007.43       2083.43    
  17  0.473784     -0.747003      -60.4749       60.4749       2010.04       2070.51    
  18  0.691812     -0.368440      -29.8277       29.8277       1966.08       1995.91    
  19  0.644447     -0.439363      -35.5694       35.5694       1994.14       2029.71    
  20  0.805933     -0.215754      -17.4667       17.4667       1926.23       1943.70    
  21  0.393766     -0.931998      -75.4515       75.4515       2002.85       2078.30    
  22  0.907098E-01  -2.40009      -194.303       194.303       1908.00       2102.31    
  23  0.376515     -0.976796      -79.0781       79.0781       1965.45       2044.53    
  24  0.819190     -0.199439      -16.1460       16.1460       2011.14       2027.29    
  25  0.692438     -0.367536      -29.7545       29.7545       2025.73       2055.49    
  26  0.188370      -1.66935      -135.145       135.145       1922.56       2057.71    
  27  0.500532     -0.692083      -56.0288       56.0288       2042.25       2098.28    
  28  0.282311      -1.26475      -102.390       102.390       2049.88       2152.27    
  29  0.338061      -1.08453      -87.7998       87.7998       2033.28       2121.08    
  30  0.466208     -0.763123      -61.7799       61.7799       1904.36       1966.14    
  31  0.893084     -0.113075      -9.15416       9.15416       2096.94       2106.10    
  32  0.818806     -0.199908      -16.1839       16.1839       2095.76       2111.94    
  33  0.585066     -0.536031      -43.3953       43.3953       2100.54       2143.93    
  34  0.527412     -0.639774      -51.7940       51.7940       2033.22       2085.01    
  35  0.994295     -0.572143E-02 -0.463188      0.463188       2118.77       2119.23    
  36  0.739278     -0.302082      -24.4555       24.4555       2101.37       2125.83    
  37  0.230995      -1.46536      -118.630       118.630       2173.41       2292.04    
  38  0.414929     -0.879648      -71.2133       71.2133       2160.71       2231.93    
  39  0.378446     -0.971682      -78.6641       78.6641       2092.91       2171.58    
  40  0.368620     -0.997990      -80.7939       80.7939       2198.86       2279.65    
  41  0.301312      -1.19961      -97.1162       97.1162       2122.33       2219.45    
  42  0.105882E-01  -4.54801      -368.192       368.192       2164.62       2532.82    
  43  0.481885     -0.730049      -59.1023       59.1023       2175.09       2234.19    
  44  0.446716     -0.805833      -65.2375       65.2375       2153.25       2218.49    
  45  0.482098     -0.729608      -59.0666       59.0666       2182.87       2241.94    
  46  0.278892      -1.27693      -103.376       103.376       2131.53       2234.91    
  47  0.756484     -0.279074      -22.5929       22.5929       2214.01       2236.60    
  48  0.662766     -0.411334      -33.3002       33.3002       2277.30       2310.60    
  49  0.433861E-01  -3.13762      -254.011       254.011       2216.95       2470.96    
  50  0.825649E-02  -4.79676      -388.329       388.329       2263.60       2651.93    
  51  0.476679     -0.740911      -59.9817       59.9817       2316.27       2376.26    
  52  0.128614      -2.05094      -166.037       166.037       1913.96       2079.99    
  53  0.609086     -0.495797      -40.1380       40.1380       2358.01       2398.14    
  54  0.484878E-01  -3.02644      -245.011       245.011       2283.35       2528.36    
  55  0.287383E-02  -5.85211      -473.767       473.767       2335.22       2808.99    
  56  0.699724     -0.357070      -28.9072       28.9072       2200.82       2229.72    
  57  0.407524     -0.897655      -72.6711       72.6711       2225.97       2298.64    
  58  0.530107     -0.634677      -51.3813       51.3813       2465.48       2516.86    
loop,thermsimp(1:2)       37   71.9245       29.1991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       2455.48         68.62          1.18         39.18          0.12          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2455.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       37
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       38
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      254     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -72.4077       72.4077       1776.18       1848.59    
   2  0.259700      -1.34823      -109.148       109.148       1835.62       1944.77    
   3  0.681144E-01  -2.68657      -217.495       217.495       1862.49       2079.99    
   4  0.158140      -1.84427      -149.306       149.306       1852.82       2002.13    
   5  0.497681     -0.697796      -56.4912       56.4912       1879.41       1935.91    
   6  0.800218     -0.222871      -18.0429       18.0429       1926.23       1944.28    
   7  0.831967     -0.183962      -14.8930       14.8930       1907.59       1922.48    
   8  0.707345     -0.346237      -28.0302       28.0302       1904.36       1932.39    
   9  0.265927      -1.32454      -107.230       107.230       1957.84       2065.07    
  10  0.659046     -0.416962      -33.7558       33.7558       1952.21       1985.97    
  11  0.654587E-01  -2.72634      -220.715       220.715       1925.45       2146.17    
  12  0.223329      -1.49911      -121.363       121.363       1966.08       2087.45    
  13  0.996019     -0.398855E-02 -0.322900      0.322900       1952.51       1952.83    
  14  0.553910     -0.590753      -47.8254       47.8254       1929.90       1977.73    
  15  0.218863      -1.51931      -122.998       122.998       2011.14       2134.14    
  16  0.414020     -0.881841      -71.3909       71.3909       1994.14       2065.53    
  17  0.229117      -1.47352      -119.291       119.291       1965.45       2084.75    
  18  0.341764      -1.07363      -86.9179       86.9179       1979.33       2066.25    
  19  0.357052      -1.02987      -83.3750       83.3750       1913.70       1997.08    
  20  0.780779     -0.247463      -20.0338       20.0338       2025.73       2045.77    
  21  0.382234     -0.961721      -77.8577       77.8577       1922.56       2000.42    
  22  0.123899      -2.08829      -169.061       169.061       2010.04       2179.10    
  23  0.393312     -0.933152      -75.5449       75.5449       2002.85       2078.40    
  24  0.481741     -0.730349      -59.1266       59.1266       1913.96       1973.08    
  25  0.120001      -2.12026      -171.649       171.649       2007.43       2179.08    
  26  0.506023     -0.681173      -55.1455       55.1455       2033.22       2088.37    
  27  0.891157     -0.115235      -9.32905       9.32905       1984.75       1994.08    
  28  0.584674     -0.536701      -43.4495       43.4495       2042.25       2085.70    
  29  0.313196      -1.16093      -93.9847       93.9847       1908.00       2001.99    
  30  0.507340     -0.678574      -54.9351       54.9351       2096.94       2151.88    
  31  0.985030     -0.150835E-01  -1.22111       1.22111       2095.76       2096.98    
  32  0.186570      -1.67895      -135.922       135.922       2118.77       2254.69    
  33  0.992622     -0.740493E-02 -0.599478      0.599478       2033.28       2033.88    
  34  0.344152      -1.06667      -86.3541       86.3541       1841.83       1928.18    
  35  0.327214      -1.11714      -90.4400       90.4400       2101.37       2191.81    
  36  0.722008     -0.325719      -26.3692       26.3692       2100.54       2126.91    
  37  0.471441     -0.751960      -60.8762       60.8762       2049.88       2110.76    
  38  0.483594     -0.726510      -58.8158       58.8158       2092.91       2151.73    
  39  0.799410     -0.223881      -18.1246       18.1246       2153.25       2171.38    
  40  0.864070     -0.146101      -11.8279       11.8279       2122.33       2134.16    
  41  0.326419      -1.11957      -90.6370       90.6370       2200.82       2291.45    
  42  0.970166E-01  -2.33287      -188.862       188.862       2160.71       2349.57    
  43  0.822479     -0.195432      -15.8216       15.8216       2175.09       2190.91    
  44  0.719858     -0.328701      -26.6106       26.6106       2131.53       2158.14    
  45  0.359763      -1.02231      -82.7628       82.7628       2214.01       2296.77    
  46  0.879180     -0.128765      -10.4244       10.4244       2182.87       2193.30    
  47  0.152514      -1.88050      -152.239       152.239       2198.86       2351.10    
  48  0.379430     -0.969085      -78.4539       78.4539       2173.41       2251.87    
  49  0.444703     -0.810349      -65.6032       65.6032       2225.97       2291.57    
  50  0.240485      -1.42510      -115.371       115.371       2277.30       2392.67    
  51  0.682479     -0.382024      -30.9274       30.9274       2316.27       2347.20    
  52  0.989508     -0.105479E-01 -0.853922      0.853922       2358.01       2358.86    
  53  0.626329E-01  -2.77046      -224.288       224.288       2216.95       2441.24    
  54  0.217806      -1.52415      -123.390       123.390       2465.48       2588.87    
  55  0.297102      -1.21368      -98.2555       98.2555       2283.35       2381.61    
  56  0.447982     -0.803002      -65.0083       65.0083       2164.62       2229.63    
  57  0.343456      -1.06870      -86.5180       86.5180       2263.60       2350.12    
  58  0.737340     -0.304706      -24.6680       24.6680       2455.48       2480.14    
loop,thermsimp(1:2)       38   72.4077       109.148    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256       2463.11         68.46          1.24         39.05          0.27          0.05        109.07
Just calling func    0   0        109.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2463.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       38
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       39
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      255     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -168.300       168.300       1776.18       1944.48    
   2  0.274837      -1.29158      -104.562       104.562       1907.59       2012.15    
   3  0.305931E-01  -3.48698      -282.294       282.294       1841.83       2124.12    
   4  0.929157     -0.734779E-01  -5.94853       5.94853       1904.36       1910.31    
   5  0.995956     -0.405208E-02 -0.328043      0.328043       1879.41       1879.74    
   6  0.904971     -0.998521E-01  -8.08369       8.08369       1926.23       1934.32    
   7  0.189758      -1.66200      -134.550       134.550       1835.62       1970.17    
   8  0.134931      -2.00299      -162.156       162.156       1952.51       2114.67    
   9  0.302412      -1.19596      -96.8213       96.8213       1913.96       2010.78    
  10  0.389155     -0.943777      -76.4050       76.4050       1929.90       2006.31    
  11  0.947428     -0.540040E-01  -4.37198       4.37198       1952.21       1956.59    
  12  0.338357      -1.08365      -87.7289       87.7289       1984.75       2072.48    
  13  0.937476     -0.645645E-01  -5.22693       5.22693       1913.70       1918.93    
  14  0.399493     -0.917560      -74.2826       74.2826       1922.56       1996.84    
  15  0.527586     -0.639444      -51.7672       51.7672       1908.00       1959.77    
  16  0.297740      -1.21153      -98.0818       98.0818       1852.82       1950.90    
  17  0.557978     -0.583436      -47.2330       47.2330       2033.28       2080.52    
  18  0.267521      -1.31856      -106.746       106.746       2025.73       2132.48    
  19  0.637637     -0.449986      -36.4293       36.4293       1957.84       1994.27    
  20  0.838569     -0.176059      -14.2531       14.2531       1994.14       2008.39    
  21  0.132199E-01  -4.32603      -350.221       350.221       1979.33       2329.55    
  22  0.745606     -0.293557      -23.7654       23.7654       2002.85       2026.62    
  23  0.334504      -1.09511      -88.6561       88.6561       1862.49       1951.15    
  24  0.118852      -2.12987      -172.428       172.428       1965.45       2137.88    
  25  0.319911      -1.13971      -92.2674       92.2674       2042.25       2134.52    
  26  0.638302E-01  -2.75153      -222.755       222.755       1966.08       2188.84    
  27  0.173204      -1.75329      -141.940       141.940       2033.22       2175.16    
  28  0.885640     -0.121444      -9.83173       9.83173       2095.76       2105.59    
  29  0.710758     -0.341423      -27.6405       27.6405       2049.88       2077.52    
  30  0.938919     -0.630265E-01  -5.10241       5.10241       2100.54       2105.64    
  31  0.217740      -1.52445      -123.414       123.414       2011.14       2134.56    
  32  0.130036      -2.03994      -165.147       165.147       2122.33       2287.48    
  33  0.331090      -1.10537      -89.4868       89.4868       1925.45       2014.94    
  34  0.453525E-01  -3.09329      -250.422       250.422       2092.91       2343.34    
  35  0.494600     -0.704006      -56.9939       56.9939       2096.94       2153.94    
  36  0.488771E-01  -3.01845      -244.363       244.363       2131.53       2375.90    
  37  0.262916E-01  -3.63850      -294.561       294.561       2153.25       2447.81    
  38  0.975293     -0.250177E-01  -2.02535       2.02535       2007.43       2009.45    
  39  0.521026     -0.651955      -52.7801       52.7801       2010.04       2062.82    
  40  0.210960      -1.55609      -125.976       125.976       2175.09       2301.07    
  41  0.475166E-02  -5.34926      -433.058       433.058       2101.37       2534.43    
  42  0.675859     -0.391771      -31.7164       31.7164       2182.87       2214.59    
  43  0.691418     -0.369011      -29.8739       29.8739       2164.62       2194.50    
  44  0.425152     -0.855309      -69.2430       69.2430       2173.41       2242.65    
  45  0.141313      -1.95678      -158.414       158.414       2118.77       2277.18    
  46  0.902170     -0.102952      -8.33466       8.33466       2200.82       2209.15    
  47  0.794321     -0.230268      -18.6417       18.6417       2225.97       2244.61    
  48  0.685387     -0.377772      -30.5832       30.5832       2214.01       2244.59    
  49  0.273223      -1.29747      -105.038       105.038       2316.27       2421.31    
  50  0.784111     -0.243205      -19.6891       19.6891       2160.71       2180.40    
  51  0.824524     -0.192949      -15.6205       15.6205       2263.60       2279.22    
  52  0.855082     -0.156558      -12.6744       12.6744       2198.86       2211.53    
  53  0.744692E-01  -2.59737      -210.274       210.274       2358.01       2568.28    
  54  0.294857E-01  -3.52385      -285.279       285.279       2283.35       2568.63    
  55  0.225962      -1.48739      -120.414       120.414       2277.30       2397.71    
  56  0.211073      -1.55555      -125.932       125.932       2216.95       2342.89    
  57  0.525673E-01  -2.94566      -238.471       238.471       2455.48       2693.95    
  58  0.855455     -0.156122      -12.6391       12.6391       2463.11       2475.75    
loop,thermsimp(1:2)       39   168.300       104.562    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257       2347.77         68.68          1.20         38.97          0.28          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2347.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       39
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       40
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      256     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -61.8820       61.8820       1879.41       1941.30    
   2  0.310178      -1.17061      -94.7685       94.7685       1904.36       1999.13    
   3  0.883713     -0.123623      -10.0081       10.0081       1913.70       1923.71    
   4  0.641465     -0.444001      -35.9448       35.9448       1926.23       1962.18    
   5  0.458576E-01  -3.08222      -249.526       249.526       1776.18       2025.71    
   6  0.611421     -0.491970      -39.8282       39.8282       1852.82       1892.65    
   7  0.292603      -1.22894      -99.4908       99.4908       1862.49       1961.98    
   8  0.180818      -1.71026      -138.457       138.457       1952.21       2090.67    
   9  0.490648     -0.712028      -57.6434       57.6434       1908.00       1965.65    
  10  0.538601     -0.618781      -50.0944       50.0944       1835.62       1885.71    
  11  0.451209     -0.795824      -64.4272       64.4272       1957.84       2022.27    
  12  0.610260     -0.493870      -39.9821       39.9821       1922.56       1962.54    
  13  0.425113     -0.855401      -69.2504       69.2504       1929.90       1999.16    
  14  0.647858     -0.434084      -35.1420       35.1420       1994.14       2029.28    
  15  0.394937     -0.929029      -75.2111       75.2111       2007.43       2082.64    
  16  0.452279E-01  -3.09604      -250.645       250.645       1913.96       2164.60    
  17  0.954905     -0.461437E-01  -3.73564       3.73564       1907.59       1911.32    
  18  0.362548      -1.01460      -82.1384       82.1384       1925.45       2007.59    
  19  0.808078     -0.213097      -17.2516       17.2516       2002.85       2020.10    
  20  0.219348      -1.51709      -122.819       122.819       2010.04       2132.86    
  21  0.206981      -1.57513      -127.517       127.517       1984.75       2112.26    
  22  0.719933     -0.328597      -26.6021       26.6021       2049.88       2076.49    
  23  0.950238     -0.510432E-01  -4.13228       4.13228       2033.28       2037.42    
  24  0.845993     -0.167244      -13.5395       13.5395       2095.76       2109.30    
  25  0.157926      -1.84563      -149.416       149.416       2100.54       2249.96    
  26  0.430020     -0.843924      -68.3213       68.3213       1952.51       2020.83    
  27  0.624159     -0.471350      -38.1589       38.1589       1841.83       1879.99    
  28  0.355386      -1.03455      -83.7538       83.7538       2025.73       2109.49    
  29  0.297353      -1.21284      -98.1872       98.1872       2042.25       2140.44    
  30  0.185476      -1.68483      -136.398       136.398       2011.14       2147.54    
  31  0.406569     -0.900002      -72.8611       72.8611       1965.45       2038.32    
  32  0.147052      -1.91697      -155.192       155.192       2096.94       2252.13    
  33  0.205955      -1.58010      -127.919       127.919       2033.22       2161.14    
  34  0.383503     -0.958409      -77.5896       77.5896       2160.71       2238.30    
  35  0.514677E-01  -2.96680      -240.182       240.182       1966.08       2206.27    
  36  0.499194     -0.694760      -56.2454       56.2454       2164.62       2220.87    
  37  0.103172E-01  -4.57394      -370.291       370.291       2200.82       2571.11    
  38  0.470163     -0.754676      -61.0960       61.0960       2198.86       2259.95    
  39  0.983694     -0.164404E-01  -1.33096       1.33096       2182.87       2184.21    
  40  0.880425     -0.127351      -10.3099       10.3099       2173.41       2183.72    
  41  0.969759     -0.307072E-01  -2.48595       2.48595       2214.01       2216.50    
  42  0.761826E-01  -2.57462      -208.433       208.433       2225.97       2434.40    
  43  0.124427      -2.08404      -168.717       168.717       2118.77       2287.48    
  44  0.997702     -0.230032E-02 -0.186226      0.186226       2263.60       2263.79    
  45  0.213939      -1.54206      -124.840       124.840       2122.33       2247.17    
  46  0.471369     -0.752113      -60.8886       60.8886       2175.09       2235.98    
  47  0.421561E-01  -3.16638      -256.339       256.339       1979.33       2235.67    
  48  0.693092     -0.366592      -29.6781       29.6781       2216.95       2246.63    
  49  0.375157     -0.980409      -79.3707       79.3707       2092.91       2172.28    
  50  0.285659      -1.25296      -101.435       101.435       2131.53       2232.97    
  51  0.338951      -1.08190      -87.5871       87.5871       2277.30       2364.88    
  52  0.930127E-01  -2.37502      -192.274       192.274       2316.27       2508.55    
  53  0.840878     -0.173309      -14.0305       14.0305       2153.25       2167.28    
  54  0.384591     -0.955575      -77.3602       77.3602       2463.11       2540.47    
  55  0.212856      -1.54714      -125.251       125.251       2101.37       2226.62    
  56  0.878356     -0.129704      -10.5004       10.5004       2358.01       2368.51    
  57  0.623236E-01  -2.77542      -224.688       224.688       2283.35       2508.04    
  58  0.374221E-02  -5.58808      -452.392       452.392       2347.77       2800.16    
loop,thermsimp(1:2)       40   61.8820       94.7685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258       2455.48         68.52          1.24         39.20          0.04          0.05        109.05
Just calling func    0   0        109.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2455.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       40
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       41
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      257     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -118.602       118.602       1841.83       1960.43    
   2  0.984723     -0.153953E-01  -1.24635       1.24635       1835.62       1836.86    
   3  0.689569     -0.371688      -30.0906       30.0906       1852.82       1882.91    
   4  0.539532     -0.617054      -49.9546       49.9546       1907.59       1957.54    
   5  0.103859      -2.26472      -183.344       183.344       1913.70       2097.05    
   6  0.403261     -0.908171      -73.5225       73.5225       1879.41       1952.94    
   7  0.545138     -0.606716      -49.1177       49.1177       1862.49       1911.61    
   8  0.211198      -1.55496      -125.884       125.884       1926.23       2052.12    
   9  0.533123     -0.629004      -50.9220       50.9220       1922.56       1973.48    
  10  0.891214     -0.115171      -9.32383       9.32383       1908.00       1917.33    
  11  0.604806     -0.502847      -40.7088       40.7088       1904.36       1945.07    
  12  0.176166      -1.73633      -140.568       140.568       1929.90       2070.47    
  13  0.733693     -0.309664      -25.0694       25.0694       1925.45       1950.52    
  14  0.248504      -1.39230      -112.716       112.716       2002.85       2115.57    
  15  0.183808      -1.69387      -137.130       137.130       1952.51       2089.64    
  16  0.308674E-02  -5.78064      -467.981       467.981       1957.84       2425.82    
  17  0.651025     -0.429207      -34.7472       34.7472       1776.18       1810.93    
  18  0.864353     -0.145775      -11.8014       11.8014       1994.14       2005.94    
  19  0.547352     -0.602664      -48.7896       48.7896       2033.28       2082.07    
  20  0.631248     -0.460057      -37.2447       37.2447       1965.45       2002.70    
  21  0.344368E-01  -3.36863      -272.713       272.713       2049.88       2322.60    
  22  0.876828     -0.131444      -10.6413       10.6413       2007.43       2018.07    
  23  0.884538     -0.122690      -9.93260       9.93260       1952.21       1962.15    
  24  0.926808     -0.760084E-01  -6.15339       6.15339       2095.76       2101.91    
  25  0.823462     -0.194237      -15.7248       15.7248       2025.73       2041.46    
  26  0.852580     -0.159489      -12.9117       12.9117       1984.75       1997.66    
  27  0.577707     -0.548689      -44.4200       44.4200       2010.04       2054.46    
  28  0.510093     -0.673163      -54.4970       54.4970       2042.25       2096.75    
  29  0.890288     -0.116210      -9.40797       9.40797       2011.14       2020.55    
  30  0.304875      -1.18785      -96.1645       96.1645       2033.22       2129.39    
  31  0.152164      -1.88279      -152.425       152.425       1913.96       2066.38    
  32  0.718687     -0.330329      -26.7424       26.7424       2153.25       2179.99    
  33  0.488128     -0.717177      -58.0603       58.0603       2092.91       2150.97    
  34  0.373052     -0.986038      -79.8264       79.8264       2173.41       2253.24    
  35  0.247351      -1.39695      -113.092       113.092       2182.87       2295.97    
  36  0.532108     -0.630909      -51.0763       51.0763       1966.08       2017.16    
  37  0.828879E-02  -4.79285      -388.013       388.013       2214.01       2602.02    
  38  0.168277      -1.78214      -144.276       144.276       2164.62       2308.90    
  39  0.253216      -1.37351      -111.195       111.195       2101.37       2212.56    
  40  0.458588     -0.779602      -63.1140       63.1140       2131.53       2194.65    
  41  0.725692     -0.320630      -25.9571       25.9571       1979.33       2005.29    
  42  0.283543      -1.26039      -102.037       102.037       2175.09       2277.13    
  43  0.798055     -0.225578      -18.2620       18.2620       2160.71       2178.97    
  44  0.805371     -0.216453      -17.5233       17.5233       2216.95       2234.48    
  45  0.580747     -0.543441      -43.9952       43.9952       2122.33       2166.33    
  46  0.581119     -0.542799      -43.9432       43.9432       2100.54       2144.48    
  47  0.305196      -1.18680      -96.0795       96.0795       2096.94       2193.02    
  48  0.905702     -0.990454E-01  -8.01839       8.01839       2198.86       2206.88    
  49  0.265633E-01  -3.62822      -293.729       293.729       2263.60       2557.33    
  50  0.114529E-01  -4.46951      -361.837       361.837       2118.77       2480.60    
  51  0.990634     -0.941033E-02 -0.761829      0.761829       2277.30       2278.06    
  52  0.609564     -0.495011      -40.0744       40.0744       2358.01       2398.08    
  53  0.380905     -0.965204      -78.1397       78.1397       2225.97       2304.11    
  54  0.902244     -0.102870      -8.32804       8.32804       2283.35       2291.68    
  55  0.841859     -0.172142      -13.9361       13.9361       2316.27       2330.21    
  56  0.954561     -0.465036E-01  -3.76477       3.76477       2463.11       2466.87    
  57  0.637314     -0.450492      -36.4703       36.4703       2200.82       2237.29    
  58  0.224695      -1.49301      -120.869       120.869       2455.48       2576.35    
loop,thermsimp(1:2)       41   118.602       1.24635    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       2413.54         68.48          1.22         39.32          0.02          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2413.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       41
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       42
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      258     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -252.331       252.331       1776.18       2028.51    
   2  0.196215      -1.62854      -131.841       131.841       1835.62       1967.46    
   3  0.501152     -0.690846      -55.9286       55.9286       1852.82       1908.75    
   4  0.288339      -1.24362      -100.679       100.679       1862.49       1963.17    
   5  0.773132     -0.257306      -20.8306       20.8306       1908.00       1928.84    
   6  0.417683     -0.873033      -70.6779       70.6779       1904.36       1975.04    
   7  0.229479      -1.47195      -119.164       119.164       1925.45       2044.62    
   8  0.964123     -0.365367E-01  -2.95789       2.95789       1879.41       1882.37    
   9  0.263782      -1.33263      -107.885       107.885       1907.59       2015.47    
  10  0.102960      -2.27342      -184.048       184.048       1841.83       2025.88    
  11  0.828790     -0.187788      -15.2027       15.2027       1952.21       1967.42    
  12  0.738697     -0.302868      -24.5192       24.5192       1922.56       1947.08    
  13  0.458595     -0.779589      -63.1129       63.1129       1984.75       2047.86    
  14  0.905176     -0.996260E-01  -8.06538       8.06538       1965.45       1973.52    
  15  0.147067      -1.91687      -155.183       155.183       1979.33       2134.51    
  16  0.142365      -1.94936      -157.814       157.814       1994.14       2151.95    
  17  0.483147     -0.727435      -58.8907       58.8907       1966.08       2024.97    
  18  0.640417     -0.445636      -36.0772       36.0772       2007.43       2043.50    
  19  0.719349     -0.329408      -26.6678       26.6678       2011.14       2037.81    
  20  0.714234     -0.336545      -27.2455       27.2455       2025.73       2052.98    
  21  0.825507     -0.191757      -15.5240       15.5240       1926.23       1941.76    
  22  0.155188      -1.86312      -150.832       150.832       2010.04       2160.87    
  23  0.248874      -1.39081      -112.595       112.595       1913.96       2026.55    
  24  0.107953      -2.22606      -180.214       180.214       1929.90       2110.12    
  25  0.349169      -1.05220      -85.1825       85.1825       2033.28       2118.47    
  26  0.967311     -0.332356E-01  -2.69064       2.69064       1952.51       1955.20    
  27  0.519506     -0.654877      -53.0167       53.0167       2042.25       2095.27    
  28  0.462662     -0.770758      -62.3980       62.3980       1913.70       1976.10    
  29  0.811438     -0.208948      -16.9157       16.9157       2095.76       2112.68    
  30  0.394710E-01  -3.23219      -261.667       261.667       2002.85       2264.52    
  31  0.482930     -0.727884      -58.9270       58.9270       2033.22       2092.15    
  32  0.520883     -0.652231      -52.8024       52.8024       2100.54       2153.34    
  33  0.980978E-01  -2.32179      -187.964       187.964       2092.91       2280.88    
  34  0.626549     -0.467529      -37.8496       37.8496       2122.33       2160.18    
  35  0.618402     -0.480616      -38.9091       38.9091       2160.71       2199.62    
  36  0.681438     -0.383550      -31.0509       31.0509       2153.25       2184.30    
  37  0.816820     -0.202336      -16.3804       16.3804       2096.94       2113.32    
  38  0.578487     -0.547340      -44.3108       44.3108       2131.53       2175.84    
  39  0.349734      -1.05058      -85.0516       85.0516       2198.86       2283.91    
  40  0.945672     -0.558596E-01  -4.52220       4.52220       2101.37       2105.89    
  41  0.767680     -0.264382      -21.4035       21.4035       2216.95       2238.36    
  42  0.122064      -2.10321      -170.269       170.269       2200.82       2371.09    
  43  0.211623      -1.55295      -125.721       125.721       2173.41       2299.13    
  44  0.969992E-01  -2.33305      -188.876       188.876       2175.09       2363.97    
  45  0.877482     -0.130699      -10.5810       10.5810       2277.30       2287.88    
  46  0.448991     -0.800752      -64.8262       64.8262       2283.35       2348.18    
  47  0.833113     -0.182586      -14.7816       14.7816       2182.87       2197.66    
  48  0.691765     -0.368508      -29.8332       29.8332       2225.97       2255.80    
  49  0.310664      -1.16904      -94.6419       94.6419       2164.62       2259.27    
  50  0.422283     -0.862080      -69.7911       69.7911       2049.88       2119.67    
  51  0.382184E-01  -3.26444      -264.278       264.278       2316.27       2580.55    
  52  0.679614E-01  -2.68882      -217.678       217.678       2358.01       2575.68    
  53  0.580404     -0.544031      -44.0429       44.0429       1957.84       2001.88    
  54  0.887981     -0.118805      -9.61803       9.61803       2463.11       2472.73    
  55  0.540749     -0.614799      -49.7721       49.7721       2118.77       2168.54    
  56  0.749712     -0.288066      -23.3208       23.3208       2263.60       2286.93    
  57  0.428385     -0.847733      -68.6296       68.6296       2455.48       2524.11    
  58  0.271790      -1.30272      -105.464       105.464       2413.54       2519.01    
loop,thermsimp(1:2)       42   252.331       131.841    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260       2033.10         68.76          1.19         39.30          0.00          0.05        109.30
Just calling func    0   0        109.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2033.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       42
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       43
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      259     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -97.8499       97.8499       1879.41       1977.26    
   2  0.383173     -0.959268      -77.6591       77.6591       1852.82       1930.48    
   3  0.386205     -0.951387      -77.0211       77.0211       1908.00       1985.03    
   4  0.362178      -1.01562      -82.2211       82.2211       1926.23       2008.46    
   5  0.394462     -0.930233      -75.3086       75.3086       1922.56       1997.87    
   6  0.883072     -0.124349      -10.0669       10.0669       1952.51       1962.58    
   7  0.571477     -0.559531      -45.2978       45.2978       1862.49       1907.79    
   8  0.944036     -0.575912E-01  -4.66239       4.66239       1952.21       1956.88    
   9  0.326573      -1.11910      -90.5987       90.5987       1835.62       1926.22    
  10  0.467297     -0.760791      -61.5911       61.5911       1965.45       2027.05    
  11  0.828365     -0.188301      -15.2442       15.2442       1904.36       1919.61    
  12  0.826991     -0.189962      -15.3787       15.3787       1913.70       1929.08    
  13  0.675447E-01  -2.69497      -218.175       218.175       1957.84       2176.02    
  14  0.924113     -0.789214E-01  -6.38921       6.38921       1907.59       1913.98    
  15  0.810131     -0.210560      -17.0462       17.0462       1966.08       1983.13    
  16  0.410286     -0.890900      -72.1243       72.1243       1841.83       1913.95    
  17  0.334977      -1.09369      -88.5418       88.5418       1913.96       2002.50    
  18  0.119017      -2.12849      -172.315       172.315       1776.18       1948.49    
  19  0.447328     -0.804463      -65.1267       65.1267       2011.14       2076.27    
  20  0.324388E-02  -5.73098      -463.961       463.961       2007.43       2471.39    
  21  0.158272      -1.84344      -149.239       149.239       1925.45       2074.69    
  22  0.241219      -1.42205      -115.125       115.125       1984.75       2099.87    
  23  0.259790      -1.34788      -109.120       109.120       2025.73       2134.85    
  24  0.521973     -0.650139      -52.6331       52.6331       2033.22       2085.85    
  25  0.336335      -1.08965      -88.2142       88.2142       2042.25       2130.47    
  26  0.642248     -0.442780      -35.8460       35.8460       2101.37       2137.22    
  27  0.984615     -0.155047E-01  -1.25521       1.25521       1929.90       1931.16    
  28  0.373782     -0.984082      -79.6680       79.6680       2095.76       2175.43    
  29  0.932479     -0.699087E-01  -5.65957       5.65957       2096.94       2102.60    
  30  0.711360     -0.340577      -27.5720       27.5720       2033.28       2060.86    
  31  0.315363      -1.15403      -93.4266       93.4266       2049.88       2143.31    
  32  0.528583     -0.637556      -51.6144       51.6144       1979.33       2030.95    
  33  0.622355E-01  -2.77683      -224.803       224.803       1994.14       2218.94    
  34  0.144849      -1.93206      -156.413       156.413       2100.54       2256.95    
  35  0.868928     -0.140495      -11.3740       11.3740       2122.33       2133.71    
  36  0.243398      -1.41306      -114.396       114.396       2010.04       2124.44    
  37  0.936928     -0.651491E-01  -5.27426       5.27426       2118.77       2124.04    
  38  0.979804E-01  -2.32299      -188.061       188.061       2131.53       2319.60    
  39  0.805773     -0.215953      -17.4828       17.4828       2153.25       2170.73    
  40  0.210751      -1.55708      -126.056       126.056       2182.87       2308.93    
  41  0.497104     -0.698956      -56.5851       56.5851       2160.71       2217.30    
  42  0.532106     -0.630913      -51.0766       51.0766       2216.95       2268.03    
  43  0.898420     -0.107117      -8.67185       8.67185       2225.97       2234.64    
  44  0.579370     -0.545814      -44.1872       44.1872       2164.62       2208.81    
  45  0.191213      -1.65437      -133.932       133.932       2002.85       2136.78    
  46  0.491633     -0.710023      -57.4811       57.4811       2092.91       2150.39    
  47  0.989123     -0.109370E-01 -0.885423      0.885423       2198.86       2199.74    
  48  0.576855     -0.550164      -44.5394       44.5394       2263.60       2308.14    
  49  0.133368      -2.01464      -163.099       163.099       2277.30       2440.40    
  50  0.708426     -0.344710      -27.9065       27.9065       2173.41       2201.32    
  51  0.183469      -1.69571      -137.279       137.279       2283.35       2420.63    
  52  0.951201     -0.500300E-01  -4.05026       4.05026       2175.09       2179.14    
  53  0.380646E-01  -3.26847      -264.604       264.604       2200.82       2465.42    
  54  0.575108     -0.553198      -44.7851       44.7851       2463.11       2507.89    
  55  0.136357E-01  -4.29506      -347.714       347.714       2413.54       2761.26    
  56  0.665821E-01  -2.70932      -219.337       219.337       2455.48       2674.81    
  57  0.885471     -0.121635      -9.84717       9.84717       2358.01       2367.85    
  58  0.213600E-01  -3.84624      -311.379       311.379       2033.10       2344.47    
loop,thermsimp(1:2)       43   97.8499       77.6591    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       2200.27         68.70          1.19         39.01          0.19          0.05        109.12
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    2200.3        3.558     -2.644      3.065     -102.6     0.7100    
                      0.3582      1.138     -99.70      4.997     0.6973    

                       2.897     -2.528      1.540      7133.      7000.    

                      -2.042      0.000      0.000      0.000     -1.221    



                      -1.975      0.000      0.000      7000.      404.3    

                      -1.481     -5.114     -6.691     -7.588      8.006    

                      -12.55     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.5751E-01 0.1798     0.8987E-01 0.1023    

                     -0.2486     0.1101     0.2372     0.1328     0.5599E-01



                     -0.9002    -0.5101      0.000     0.1080     0.1372    

                      0.2255     0.2575    -0.7116     0.1650    -0.1840    

                      0.1949     0.4162E-01-0.4620     -1.457      7000.    



                      -1.239     -1.141     -2.142     -1.982    -0.3807    

                     -0.3252      9.318      8.518    -0.1683E+05 -5.950    

                     -0.1781     -2.308      8.719      9.121    -0.1969E+05



                      -6.000     0.5370    -0.8613E-01  8.822      9.119    

                     -0.1944E+05 -6.000    -0.2374    -0.2455      9.723    

                       9.052    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2200.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       43
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       44
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      260     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -101.044       101.044       1862.49       1963.54    
   2  0.260243      -1.34614      -108.979       108.979       1841.83       1950.81    
   3  0.646915     -0.435540      -35.2598       35.2598       1907.59       1942.85    
   4  0.572447     -0.557835      -45.1604       45.1604       1904.36       1949.52    
   5  0.105907      -2.24520      -181.764       181.764       1835.62       2017.38    
   6  0.693038     -0.366671      -29.6844       29.6844       1913.70       1943.39    
   7  0.329408      -1.11046      -89.8990       89.8990       1852.82       1942.72    
   8  0.187221      -1.67546      -135.640       135.640       1929.90       2065.54    
   9  0.545731     -0.605630      -49.0297       49.0297       1776.18       1825.21    
  10  0.752820     -0.283930      -22.9860       22.9860       1952.21       1975.20    
  11  0.153542      -1.87378      -151.695       151.695       1952.51       2104.21    
  12  0.400659     -0.914645      -74.0466       74.0466       1879.41       1953.46    
  13  0.306182      -1.18357      -95.8183       95.8183       1966.08       2061.90    
  14  0.270957E-01  -3.60838      -292.123       292.123       1908.00       2200.13    
  15  0.776765     -0.252618      -20.4511       20.4511       1922.56       1943.01    
  16  0.711945     -0.339755      -27.5054       27.5054       1913.96       1941.46    
  17  0.217190      -1.52698      -123.619       123.619       1926.23       2049.85    
  18  0.285226      -1.25447      -101.558       101.558       1965.45       2067.01    
  19  0.348904      -1.05296      -85.2440       85.2440       1979.33       2064.58    
  20  0.686414     -0.376275      -30.4620       30.4620       2033.28       2063.75    
  21  0.212825      -1.54729      -125.263       125.263       1925.45       2050.72    
  22  0.501697     -0.689760      -55.8406       55.8406       2011.14       2066.98    
  23  0.363771      -1.01123      -81.8658       81.8658       2033.22       2115.09    
  24  0.789273     -0.236642      -19.1578       19.1578       1984.75       2003.90    
  25  0.232884      -1.45721      -117.971       117.971       2096.94       2214.91    
  26  0.754896     -0.281175      -22.7630       22.7630       2118.77       2141.53    
  27  0.639358     -0.447290      -36.2111       36.2111       2010.04       2046.25    
  28  0.532505     -0.630163      -51.0159       51.0159       2042.25       2093.27    
  29  0.759813     -0.274683      -22.2374       22.2374       2122.33       2144.57    
  30  0.768360     -0.263497      -21.3319       21.3319       2025.73       2047.06    
  31  0.245116      -1.40602      -113.827       113.827       2002.85       2116.68    
  32  0.672517     -0.396727      -32.1177       32.1177       2101.37       2133.49    
  33  0.910675     -0.935691E-01  -7.57504       7.57504       2049.88       2057.46    
  34  0.441618     -0.817310      -66.1667       66.1667       2092.91       2159.08    
  35  0.212980      -1.54656      -125.204       125.204       2153.25       2278.46    
  36  0.471690     -0.751434      -60.8335       60.8335       2095.76       2156.59    
  37  0.968545     -0.319606E-01  -2.58742       2.58742       1957.84       1960.43    
  38  0.711169     -0.340845      -27.5936       27.5936       2175.09       2202.68    
  39  0.222170      -1.50431      -121.784       121.784       2198.86       2320.64    
  40  0.896100     -0.109703      -8.88122       8.88122       2173.41       2182.29    
  41  0.898054     -0.107525      -8.70486       8.70486       2164.62       2173.33    
  42  0.981364     -0.188122E-01  -1.52297       1.52297       2160.71       2162.23    
  43  0.238126      -1.43496      -116.169       116.169       1994.14       2110.31    
  44  0.884882     -0.122301      -9.90111       9.90111       2225.97       2235.87    
  45  0.206421      -1.57784      -127.737       127.737       2100.54       2228.28    
  46  0.421939     -0.862894      -69.8570       69.8570       2216.95       2286.81    
  47  0.334170E-01  -3.39869      -275.147       275.147       2263.60       2538.75    
  48  0.940374     -0.614772E-01  -4.97699       4.97699       2182.87       2187.85    
  49  0.119361      -2.12561      -172.082       172.082       2131.53       2303.62    
  50  0.493355     -0.706527      -57.1981       57.1981       2033.10       2090.29    
  51  0.239498      -1.42921      -115.704       115.704       2358.01       2473.71    
  52  0.779094     -0.249623      -20.2087       20.2087       2283.35       2303.56    
  53  0.993851     -0.616759E-02 -0.499308      0.499308       2277.30       2277.80    
  54  0.680666     -0.384683      -31.1427       31.1427       2200.82       2231.96    
  55  0.861145     -0.149492      -12.1024       12.1024       2007.43       2019.53    
  56  0.679030     -0.387090      -31.3375       31.3375       2463.11       2494.44    
  57  0.568731E-01  -2.86693      -232.097       232.097       2455.48       2687.57    
  58  0.342751      -1.07075      -86.6845       86.6845       2200.27       2286.95    
loop,thermsimp(1:2)       44   101.044       108.979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       2318.03         68.58          1.20         39.03          0.32          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2318.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       44
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       45
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      261     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -128.572       128.572       1776.18       1904.75    
   2  0.455846E-01  -3.08818      -250.009       250.009       1913.96       2163.97    
   3  0.655807     -0.421889      -34.1547       34.1547       1852.82       1886.98    
   4  0.902989     -0.102045      -8.26123       8.26123       1907.59       1915.85    
   5  0.826012     -0.191146      -15.4745       15.4745       1922.56       1938.04    
   6  0.160871      -1.82715      -147.920       147.920       1913.70       2061.62    
   7  0.516410     -0.660854      -53.5006       53.5006       1904.36       1957.86    
   8  0.506939     -0.679364      -54.9990       54.9990       1841.83       1896.83    
   9  0.728359     -0.316962      -25.6602       25.6602       1879.41       1905.07    
  10  0.453162     -0.791506      -64.0776       64.0776       1957.84       2021.92    
  11  0.837994     -0.176745      -14.3086       14.3086       1862.49       1876.80    
  12  0.118024      -2.13686      -172.993       172.993       1952.21       2125.21    
  13  0.274030      -1.29452      -104.800       104.800       1984.75       2089.55    
  14  0.402227     -0.910738      -73.7303       73.7303       1835.62       1909.35    
  15  0.444245     -0.811380      -65.6866       65.6866       2007.43       2073.11    
  16  0.594880     -0.519396      -42.0486       42.0486       2010.04       2052.09    
  17  0.548806     -0.600010      -48.5748       48.5748       2025.73       2074.31    
  18  0.222827      -1.50136      -121.545       121.545       1926.23       2047.78    
  19  0.152541      -1.88032      -152.224       152.224       1925.45       2077.68    
  20  0.816533     -0.202688      -16.4089       16.4089       2049.88       2066.29    
  21  0.525417     -0.643564      -52.1008       52.1008       1966.08       2018.18    
  22  0.661450     -0.413320      -33.4610       33.4610       2033.28       2066.75    
  23  0.437535     -0.826598      -66.9186       66.9186       1979.33       2046.25    
  24  0.464442     -0.766918      -62.0871       62.0871       1929.90       1991.99    
  25  0.683975     -0.379834      -30.7501       30.7501       2011.14       2041.89    
  26  0.407919     -0.896688      -72.5928       72.5928       1965.45       2038.05    
  27  0.934669     -0.675632E-01  -5.46969       5.46969       2033.10       2038.57    
  28  0.866891     -0.142842      -11.5640       11.5640       2042.25       2053.82    
  29  0.145435E-01  -4.23061      -342.496       342.496       1952.51       2295.01    
  30  0.514599     -0.664368      -53.7850       53.7850       1994.14       2047.92    
  31  0.370591     -0.992656      -80.3621       80.3621       2033.22       2113.58    
  32  0.251726      -1.37941      -111.673       111.673       2002.85       2114.53    
  33  0.959470     -0.413742E-01  -3.34951       3.34951       2101.37       2104.72    
  34  0.344885E-01  -3.36713      -272.592       272.592       2118.77       2391.36    
  35  0.348690      -1.05357      -85.2938       85.2938       2122.33       2207.63    
  36  0.610898     -0.492826      -39.8975       39.8975       2095.76       2135.66    
  37  0.440567     -0.819693      -66.3596       66.3596       2092.91       2159.27    
  38  0.340409      -1.07761      -87.2395       87.2395       2160.71       2247.95    
  39  0.345015E-01  -3.36675      -272.561       272.561       2164.62       2437.18    
  40  0.667224     -0.404630      -32.7575       32.7575       2173.41       2206.17    
  41  0.138336      -1.97807      -160.138       160.138       2182.87       2343.01    
  42  0.412023     -0.886676      -71.7823       71.7823       1908.00       1979.79    
  43  0.578410     -0.547473      -44.3216       44.3216       2175.09       2219.41    
  44  0.972817     -0.275594E-01  -2.23112       2.23112       2096.94       2099.17    
  45  0.152341      -1.88163      -152.331       152.331       2100.54       2252.87    
  46  0.764264     -0.268842      -21.7645       21.7645       2200.82       2222.58    
  47  0.898082E-01  -2.41008      -195.112       195.112       2225.97       2421.08    
  48  0.205097      -1.58427      -128.257       128.257       2277.30       2405.55    
  49  0.249611E-01  -3.69044      -298.765       298.765       2153.25       2452.02    
  50  0.999211     -0.789000E-03 -0.638748E-01  0.638748E-01   2216.95       2217.02    
  51  0.622898E-01  -2.77596      -224.732       224.732       2200.27       2425.00    
  52  0.588779     -0.529705      -42.8831       42.8831       2283.35       2326.23    
  53  0.395562     -0.927447      -75.0830       75.0830       2131.53       2206.62    
  54  0.213371      -1.54472      -125.056       125.056       2198.86       2323.91    
  55  0.801544     -0.221215      -17.9089       17.9089       2358.01       2375.91    
  56  0.392036     -0.936401      -75.8079       75.8079       2463.11       2538.92    
  57  0.504835     -0.683524      -55.3358       55.3358       2263.60       2318.94    
  58  0.389514     -0.942856      -76.3304       76.3304       2318.03       2394.36    
loop,thermsimp(1:2)       45   128.572       250.009    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263       2474.69         68.66          1.20         39.45          0.00          0.05        109.36
Just calling func    0   0        109.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2474.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       45
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       46
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      262     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -18.6214       18.6214       1862.49       1881.11    
   2  0.338444      -1.08340      -87.7081       87.7081       1852.82       1940.53    
   3  0.563800     -0.573055      -46.3926       46.3926       1841.83       1888.22    
   4  0.295284      -1.21982      -98.7522       98.7522       1776.18       1874.93    
   5  0.506481     -0.680269      -55.0723       55.0723       1879.41       1934.49    
   6  0.345803      -1.06189      -85.9668       85.9668       1835.62       1921.58    
   7  0.741641     -0.298890      -24.1971       24.1971       1907.59       1931.78    
   8  0.182310      -1.70204      -137.792       137.792       1922.56       2060.35    
   9  0.315187      -1.15459      -93.4716       93.4716       1904.36       1997.84    
  10  0.598844     -0.512755      -41.5109       41.5109       1908.00       1949.52    
  11  0.659119     -0.416852      -33.7469       33.7469       1929.90       1963.65    
  12  0.247481      -1.39642      -113.050       113.050       1966.08       2079.13    
  13  0.255298      -1.36532      -110.532       110.532       1957.84       2068.37    
  14  0.876488     -0.131833      -10.6727       10.6727       1965.45       1976.13    
  15  0.358010      -1.02719      -83.1582       83.1582       2033.10       2116.25    
  16  0.317480      -1.14734      -92.8849       92.8849       2011.14       2104.03    
  17  0.153422      -1.87456      -151.758       151.758       1979.33       2131.09    
  18  0.296162      -1.21685      -98.5120       98.5120       1926.23       2024.75    
  19  0.629760     -0.462417      -37.4357       37.4357       1994.14       2031.57    
  20  0.458345E-01  -3.08272      -249.567       249.567       2010.04       2259.61    
  21  0.209534      -1.56287      -126.524       126.524       2042.25       2168.78    
  22  0.490210E-01  -3.01551      -244.125       244.125       1913.70       2157.83    
  23  0.144817      -1.93229      -156.431       156.431       2049.88       2206.32    
  24  0.764061     -0.269107      -21.7860       21.7860       2033.28       2055.07    
  25  0.158664      -1.84097      -149.039       149.039       2007.43       2156.47    
  26  0.242818      -1.41544      -114.589       114.589       2025.73       2140.32    
  27  0.779950     -0.248525      -20.1198       20.1198       1925.45       1945.57    
  28  0.763580     -0.269737      -21.8370       21.8370       1984.75       2006.58    
  29  0.817639     -0.201335      -16.2994       16.2994       2096.94       2113.24    
  30  0.656802     -0.420373      -34.0320       34.0320       2101.37       2135.40    
  31  0.202192      -1.59854      -129.412       129.412       2033.22       2162.63    
  32  0.469647     -0.755773      -61.1849       61.1849       2002.85       2064.04    
  33  0.107456      -2.23067      -180.588       180.588       1952.21       2132.80    
  34  0.709118     -0.343734      -27.8276       27.8276       2095.76       2123.59    
  35  0.988480     -0.115868E-01 -0.938032      0.938032       2092.91       2093.85    
  36  0.645173     -0.438236      -35.4781       35.4781       1913.96       1949.44    
  37  0.583143     -0.539322      -43.6617       43.6617       2173.41       2217.07    
  38  0.276552E-01  -3.58794      -290.468       290.468       2131.53       2422.00    
  39  0.560517     -0.578896      -46.8655       46.8655       2122.33       2169.20    
  40  0.292779      -1.22834      -99.4420       99.4420       2216.95       2316.40    
  41  0.486207     -0.721121      -58.3795       58.3795       2175.09       2233.47    
  42  0.379142E-01  -3.27243      -264.925       264.925       2200.82       2465.74    
  43  0.459895     -0.776757      -62.8836       62.8836       2160.71       2223.60    
  44  0.810771     -0.209769      -16.9822       16.9822       2100.54       2117.52    
  45  0.189138      -1.66528      -134.815       134.815       1952.51       2087.33    
  46  0.509870     -0.673599      -54.5323       54.5323       2263.60       2318.14    
  47  0.468020E-01  -3.06183      -247.875       247.875       2198.86       2446.73    
  48  0.568404     -0.564922      -45.7342       45.7342       2283.35       2329.08    
  49  0.891250     -0.115130      -9.32057       9.32057       2182.87       2192.20    
  50  0.415261     -0.878849      -71.1487       71.1487       2358.01       2429.15    
  51  0.714019     -0.336846      -27.2699       27.2699       2118.77       2146.04    
  52  0.606207     -0.500534      -40.5215       40.5215       2318.03       2358.55    
  53  0.106011      -2.24421      -181.684       181.684       2277.30       2458.98    
  54  0.330348      -1.10761      -89.6684       89.6684       2225.97       2315.64    
  55  0.773475     -0.256862      -20.7947       20.7947       2200.27       2221.06    
  56  0.721841     -0.325951      -26.3879       26.3879       2164.62       2191.01    
  57  0.714980     -0.335501      -27.1610       27.1610       2153.25       2180.41    
  58  0.616486     -0.483719      -39.1603       39.1603       2474.69       2513.85    
loop,thermsimp(1:2)       46   18.6214       87.7081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       2463.11         68.61          1.22         38.94          0.36          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2463.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       46
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       47
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      263     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -34.5625       34.5625       1776.18       1810.74    
   2  0.474910     -0.744630      -60.2827       60.2827       1862.49       1922.78    
   3  0.125725      -2.07366      -167.876       167.876       1841.83       2009.71    
   4  0.950967     -0.502756E-01  -4.07014       4.07014       1835.62       1839.69    
   5  0.562475     -0.575409      -46.5832       46.5832       1907.59       1954.17    
   6  0.728528     -0.316729      -25.6413       25.6413       1879.41       1905.06    
   7  0.326058      -1.12068      -90.7265       90.7265       1852.82       1943.55    
   8  0.460979     -0.774402      -62.6930       62.6930       1925.45       1988.15    
   9  0.186861      -1.67739      -135.796       135.796       1913.96       2049.75    
  10  0.737773     -0.304119      -24.6205       24.6205       1908.00       1932.63    
  11  0.254524      -1.36836      -110.778       110.778       1929.90       2040.68    
  12  0.475390     -0.743621      -60.2010       60.2010       1965.45       2025.65    
  13  0.783107     -0.244486      -19.7927       19.7927       1904.36       1924.16    
  14  0.615536     -0.485261      -39.2851       39.2851       1984.75       2024.03    
  15  0.600710E-01  -2.81223      -227.669       227.669       1926.23       2153.90    
  16  0.834417     -0.181022      -14.6550       14.6550       1994.14       2008.79    
  17  0.270355      -1.30802      -105.893       105.893       2033.28       2139.18    
  18  0.408387     -0.895540      -72.4999       72.4999       1922.56       1995.06    
  19  0.248286      -1.39318      -112.787       112.787       2002.85       2115.64    
  20  0.586808E-01  -2.83564      -229.564       229.564       1957.84       2187.40    
  21  0.747050     -0.291623      -23.6088       23.6088       1966.08       1989.69    
  22  0.261869E-01  -3.64250      -294.884       294.884       1952.51       2247.39    
  23  0.495813     -0.701557      -56.7957       56.7957       2092.91       2149.71    
  24  0.600032     -0.510772      -41.3504       41.3504       2011.14       2052.49    
  25  0.936456     -0.656531E-01  -5.31506       5.31506       2096.94       2102.26    
  26  0.583260     -0.539121      -43.6455       43.6455       2033.10       2076.74    
  27  0.994266     -0.575021E-02 -0.465518      0.465518       2100.54       2101.01    
  28  0.149755      -1.89876      -153.717       153.717       2095.76       2249.48    
  29  0.751239     -0.286032      -23.1562       23.1562       1979.33       2002.49    
  30  0.703931     -0.351075      -28.4218       28.4218       1952.21       1980.64    
  31  0.998476     -0.152564E-02 -0.123511      0.123511       2101.37       2101.49    
  32  0.501495     -0.690161      -55.8731       55.8731       2025.73       2081.60    
  33  0.446468     -0.806387      -65.2824       65.2824       2118.77       2184.05    
  34  0.321376      -1.13514      -91.8975       91.8975       2007.43       2099.33    
  35  0.850901     -0.161459      -13.0712       13.0712       1913.70       1926.78    
  36  0.975881     -0.244142E-01  -1.97649       1.97649       2033.22       2035.20    
  37  0.386316     -0.951100      -76.9979       76.9979       2042.25       2119.25    
  38  0.782734     -0.244962      -19.8313       19.8313       2122.33       2142.17    
  39  0.142678      -1.94716      -157.636       157.636       2153.25       2310.89    
  40  0.509914     -0.673514      -54.5254       54.5254       2164.62       2219.15    
  41  0.211111      -1.55537      -125.918       125.918       2182.87       2308.79    
  42  0.212538      -1.54864      -125.372       125.372       2049.88       2175.26    
  43  0.889982     -0.116555      -9.43587       9.43587       2173.41       2182.85    
  44  0.769070     -0.262573      -21.2571       21.2571       2200.27       2221.53    
  45  0.792434     -0.232646      -18.8342       18.8342       2160.71       2179.55    
  46  0.250220E-01  -3.68800      -298.568       298.568       2175.09       2473.66    
  47  0.190304      -1.65913      -134.318       134.318       2010.04       2144.36    
  48  0.579595     -0.545425      -44.1558       44.1558       2225.97       2270.13    
  49  0.373376     -0.985170      -79.7560       79.7560       2216.95       2296.71    
  50  0.933620E-01  -2.37127      -191.970       191.970       2263.60       2455.57    
  51  0.628243     -0.464828      -37.6309       37.6309       2283.35       2320.98    
  52  0.737857     -0.304005      -24.6113       24.6113       2318.03       2342.64    
  53  0.430189     -0.843530      -68.2894       68.2894       2131.53       2199.82    
  54  0.957397     -0.435375E-01  -3.52465       3.52465       2358.01       2361.53    
  55  0.388126     -0.946424      -76.6193       76.6193       2198.86       2275.48    
  56  0.989586     -0.104686E-01 -0.847506      0.847506       2277.30       2278.14    
  57  0.754642     -0.281511      -22.7902       22.7902       2200.82       2223.61    
  58  0.404023E-01  -3.20887      -259.779       259.779       2463.11       2722.89    
loop,thermsimp(1:2)       47   34.5625       60.2827    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265       2474.69         68.57          1.20         39.09          0.20          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2474.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       47
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       48
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      264     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -93.2598       93.2598       1776.18       1869.44    
   2  0.452730     -0.792459      -64.1548       64.1548       1835.62       1899.77    
   3  0.463916     -0.768051      -62.1789       62.1789       1879.41       1941.59    
   4  0.531172E-01  -2.93526      -237.628       237.628       1862.49       2100.12    
   5  0.933113     -0.692290E-01  -5.60454       5.60454       1904.36       1909.97    
   6  0.107612      -2.22922      -180.470       180.470       1913.70       2094.17    
   7  0.228017      -1.47833      -119.681       119.681       1908.00       2027.69    
   8  0.766526     -0.265887      -21.5253       21.5253       1852.82       1874.35    
   9  0.676418     -0.390944      -31.6495       31.6495       1907.59       1939.24    
  10  0.220696      -1.51097      -122.323       122.323       1952.21       2074.54    
  11  0.959946E-01  -2.34346      -189.719       189.719       1925.45       2115.17    
  12  0.570655     -0.560971      -45.4144       45.4144       1966.08       2011.50    
  13  0.736426     -0.305947      -24.7684       24.7684       1922.56       1947.33    
  14  0.966377     -0.342013E-01  -2.76883       2.76883       1979.33       1982.10    
  15  0.797662     -0.226070      -18.3019       18.3019       1994.14       2012.44    
  16  0.413688     -0.882643      -71.4558       71.4558       1841.83       1913.28    
  17  0.200670      -1.60609      -130.024       130.024       1984.75       2114.77    
  18  0.843958E-01  -2.47224      -200.144       200.144       1965.45       2165.60    
  19  0.375580     -0.979284      -79.2796       79.2796       2033.22       2112.50    
  20  0.968669     -0.318322E-01  -2.57703       2.57703       1929.90       1932.48    
  21  0.379263     -0.969525      -78.4895       78.4895       1913.96       1992.45    
  22  0.421746     -0.863352      -69.8941       69.8941       2011.14       2081.04    
  23  0.639909     -0.446429      -36.1414       36.1414       2033.10       2069.24    
  24  0.549878     -0.598059      -48.4169       48.4169       2025.73       2074.15    
  25  0.226469      -1.48515      -120.233       120.233       2007.43       2127.66    
  26  0.547044E-02  -5.20840      -421.654       421.654       2100.54       2522.19    
  27  0.372808     -0.986692      -79.8792       79.8792       2101.37       2181.25    
  28  0.406819E-01  -3.20197      -259.221       259.221       2096.94       2356.16    
  29  0.664564     -0.408624      -33.0808       33.0808       2002.85       2035.93    
  30  0.708700     -0.344323      -27.8752       27.8752       2042.25       2070.13    
  31  0.863329     -0.146959      -11.8973       11.8973       2033.28       2045.18    
  32  0.406109     -0.901134      -72.9528       72.9528       2122.33       2195.29    
  33  0.101947      -2.28330      -184.848       184.848       2010.04       2194.89    
  34  0.660574     -0.414646      -33.5684       33.5684       2092.91       2126.48    
  35  0.839002     -0.175542      -14.2113       14.2113       1926.23       1940.45    
  36  0.735312E-01  -2.61005      -211.301       211.301       2049.88       2261.18    
  37  0.559917     -0.579967      -46.9522       46.9522       2160.71       2207.66    
  38  0.922004     -0.812055E-01  -6.57412       6.57412       2173.41       2179.99    
  39  0.891471     -0.114882      -9.30049       9.30049       2118.77       2128.07    
  40  0.489346     -0.714686      -57.8586       57.8586       1957.84       2015.70    
  41  0.583196     -0.539231      -43.6544       43.6544       2131.53       2175.19    
  42  0.989235     -0.108230E-01 -0.876197      0.876197       2164.62       2165.50    
  43  0.844741     -0.168725      -13.6594       13.6594       2200.27       2213.93    
  44  0.734982     -0.307909      -24.9273       24.9273       2200.82       2225.74    
  45  0.913246     -0.907495E-01  -7.34677       7.34677       1952.51       1959.86    
  46  0.605096     -0.502369      -40.6701       40.6701       2095.76       2136.43    
  47  0.623739     -0.472024      -38.2135       38.2135       2225.97       2264.18    
  48  0.780990     -0.247193      -20.0120       20.0120       2198.86       2218.87    
  49  0.615662E-01  -2.78764      -225.678       225.678       2277.30       2502.98    
  50  0.646443E-02  -5.04144      -408.138       408.138       2216.95       2625.09    
  51  0.848055     -0.164809      -13.3424       13.3424       2182.87       2196.22    
  52  0.740886     -0.299909      -24.2796       24.2796       2153.25       2177.53    
  53  0.350650      -1.04797      -84.8400       84.8400       2283.35       2368.19    
  54  0.873328     -0.135444      -10.9651       10.9651       2318.03       2329.00    
  55  0.353091      -1.04103      -84.2783       84.2783       2358.01       2442.28    
  56  0.867938     -0.141635      -11.4663       11.4663       2263.60       2275.07    
  57  0.746706     -0.292084      -23.6462       23.6462       2175.09       2198.74    
  58  0.701641     -0.354333      -28.6856       28.6856       2474.69       2503.37    
loop,thermsimp(1:2)       48   93.2598       64.1548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266       1963.44         68.52          1.26         39.12          0.18          0.05        109.12
Just calling func    0   0        109.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1963.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       48
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       49
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      265     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.688224      0.688224       1776.18       1776.87    
   2  0.120199      -2.11861      -171.515       171.515       1852.82       2024.34    
   3  0.825835     -0.191360      -15.4919       15.4919       1835.62       1851.11    
   4  0.769690     -0.261767      -21.1918       21.1918       1904.36       1925.56    
   5  0.206534      -1.57729      -127.692       127.692       1841.83       1969.52    
   6  0.435455     -0.831363      -67.3043       67.3043       1929.90       1997.21    
   7  0.408718     -0.894731      -72.4344       72.4344       1907.59       1980.02    
   8  0.504170E-01  -2.98743      -241.852       241.852       1926.23       2168.09    
   9  0.943874     -0.577631E-01  -4.67631       4.67631       1879.41       1884.09    
  10  0.161493      -1.82330      -147.608       147.608       1922.56       2070.17    
  11  0.248560      -1.39207      -112.697       112.697       1952.51       2065.21    
  12  0.952734     -0.484195E-01  -3.91988       3.91988       1979.33       1983.25    
  13  0.349224      -1.05204      -85.1699       85.1699       1913.96       1999.13    
  14  0.245013      -1.40644      -113.861       113.861       1966.08       2079.94    
  15  0.713805     -0.337146      -27.2942       27.2942       1994.14       2021.43    
  16  0.206995      -1.57506      -127.512       127.512       1957.84       2085.35    
  17  0.573984     -0.555154      -44.9434       44.9434       1908.00       1952.95    
  18  0.791297     -0.234082      -18.9505       18.9505       2002.85       2021.80    
  19  0.599323     -0.511955      -41.4462       41.4462       2033.28       2074.73    
  20  0.632893     -0.457454      -37.0340       37.0340       2033.10       2070.13    
  21  0.920472     -0.828688E-01  -6.70878       6.70878       2042.25       2048.96    
  22  0.650695     -0.429713      -34.7882       34.7882       2025.73       2060.52    
  23  0.759327     -0.275322      -22.2892       22.2892       1952.21       1974.50    
  24  0.547563     -0.602278      -48.7584       48.7584       2011.14       2059.90    
  25  0.375945     -0.978312      -79.2009       79.2009       1913.70       1992.91    
  26  0.436593     -0.828753      -67.0931       67.0931       1862.49       1929.59    
  27  0.226348      -1.48568      -120.276       120.276       2033.22       2153.50    
  28  0.889061     -0.117589      -9.51962       9.51962       1984.75       1994.27    
  29  0.294563      -1.22226      -98.9502       98.9502       1925.45       2024.40    
  30  0.760606     -0.273640      -22.1530       22.1530       2092.91       2115.07    
  31  0.131934      -2.02545      -163.974       163.974       2007.43       2171.40    
  32  0.150887      -1.89123      -153.107       153.107       2118.77       2271.87    
  33  0.108814      -2.21811      -179.571       179.571       2095.76       2275.33    
  34  0.392982     -0.933991      -75.6128       75.6128       2164.62       2240.24    
  35  0.524209     -0.645865      -52.2870       52.2870       1965.45       2017.74    
  36  0.779329     -0.249322      -20.1843       20.1843       2131.53       2151.72    
  37  0.684136     -0.379599      -30.7310       30.7310       2153.25       2183.98    
  38  0.898629     -0.106885      -8.65307       8.65307       2173.41       2182.06    
  39  0.885947E-01  -2.42368      -196.213       196.213       2101.37       2297.58    
  40  0.865042     -0.144977      -11.7369       11.7369       2010.04       2021.78    
  41  0.953799     -0.473027E-01  -3.82947       3.82947       2122.33       2126.16    
  42  0.264945      -1.32823      -107.529       107.529       2182.87       2290.40    
  43  0.931660     -0.707875E-01  -5.73072       5.73072       2175.09       2180.82    
  44  0.273150      -1.29773      -105.060       105.060       2160.71       2265.77    
  45  0.773196     -0.257223      -20.8239       20.8239       2200.27       2221.09    
  46  0.936342     -0.657743E-01  -5.32486       5.32486       2198.86       2204.18    
  47  0.367272      -1.00165      -81.0905       81.0905       2200.82       2281.91    
  48  0.970907     -0.295243E-01  -2.39018       2.39018       2049.88       2052.27    
  49  0.722669     -0.324804      -26.2951       26.2951       2225.97       2252.27    
  50  0.247966      -1.39446      -112.891       112.891       2263.60       2376.50    
  51  0.730821     -0.313587      -25.3869       25.3869       2318.03       2343.42    
  52  0.379134     -0.969864      -78.5170       78.5170       2096.94       2175.46    
  53  0.326173      -1.12033      -90.6980       90.6980       2283.35       2374.05    
  54  0.555872     -0.587218      -47.5392       47.5392       2358.01       2405.55    
  55  0.600838     -0.509431      -41.2418       41.2418       2277.30       2318.54    
  56  0.714504     -0.336167      -27.2149       27.2149       2474.69       2501.90    
  57  0.190775      -1.65666      -134.118       134.118       2100.54       2234.66    
  58  0.206210      -1.57886      -127.819       127.819       1963.44       2091.26    
loop,thermsimp(1:2)       49  0.688224       171.515    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267       2456.54         68.30          1.23         39.33          0.04          0.05        108.95
Just calling func    0   0        108.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2456.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       49
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       50
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      266     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -379.646       379.646       1776.18       2155.82    
   2  0.902150     -0.102974      -8.33645       8.33645       1835.62       1843.95    
   3  0.375868     -0.978517      -79.2175       79.2175       1879.41       1958.63    
   4  0.136549E-01  -4.29366      -347.600       347.600       1904.36       2251.96    
   5  0.948329     -0.530533E-01  -4.29502       4.29502       1862.49       1866.79    
   6  0.489379E-01  -3.01720      -244.263       244.263       1908.00       2152.27    
   7  0.319400      -1.14131      -92.3967       92.3967       1841.83       1934.23    
   8  0.748008     -0.290342      -23.5051       23.5051       1952.21       1975.72    
   9  0.468015     -0.759255      -61.4667       61.4667       1907.59       1969.05    
  10  0.467420     -0.760527      -61.5697       61.5697       1979.33       2040.90    
  11  0.345085      -1.06396      -86.1349       86.1349       1913.70       1999.84    
  12  0.598981     -0.512526      -41.4924       41.4924       1984.75       2026.24    
  13  0.231496      -1.46319      -118.455       118.455       1929.90       2048.36    
  14  0.685496     -0.377613      -30.5703       30.5703       1913.96       1944.53    
  15  0.225803      -1.48809      -120.471       120.471       1965.45       2085.92    
  16  0.744991E-01  -2.59697      -210.242       210.242       1994.14       2204.38    
  17  0.436777     -0.828332      -67.0590       67.0590       2010.04       2077.10    
  18  0.241074      -1.42265      -115.173       115.173       2002.85       2118.03    
  19  0.728071     -0.317357      -25.6922       25.6922       1852.82       1878.51    
  20  0.228500      -1.47622      -119.510       119.510       1925.45       2044.96    
  21  0.423678     -0.858781      -69.5241       69.5241       2042.25       2111.78    
  22  0.812855     -0.207202      -16.7744       16.7744       2049.88       2066.66    
  23  0.810546     -0.210047      -17.0047       17.0047       2011.14       2028.15    
  24  0.113500      -2.17595      -176.158       176.158       2025.73       2201.89    
  25  0.197385      -1.62260      -131.360       131.360       1952.51       2083.87    
  26  0.101018      -2.29246      -185.590       185.590       2033.10       2218.69    
  27  0.857009E-01  -2.45689      -198.902       198.902       1922.56       2121.46    
  28  0.693668     -0.365762      -29.6109       29.6109       2033.28       2062.90    
  29  0.705918     -0.348256      -28.1936       28.1936       1966.08       1994.28    
  30  0.309793      -1.17185      -94.8691       94.8691       1957.84       2052.71    
  31  0.144843      -1.93210      -156.417       156.417       1963.44       2119.86    
  32  0.412916     -0.884511      -71.6071       71.6071       2092.91       2164.52    
  33  0.916661     -0.870180E-01  -7.04469       7.04469       2122.33       2129.38    
  34  0.933384E-01  -2.37152      -191.991       191.991       2131.53       2323.52    
  35  0.937330     -0.647200E-01  -5.23951       5.23951       2033.22       2038.46    
  36  0.958012     -0.428952E-01  -3.47265       3.47265       1926.23       1929.71    
  37  0.692877E-01  -2.66949      -216.113       216.113       2007.43       2223.54    
  38  0.228520E-01  -3.77872      -305.912       305.912       2096.94       2402.86    
  39  0.188135      -1.67060      -135.246       135.246       2175.09       2310.34    
  40  0.122595E-01  -4.40146      -356.327       356.327       2173.41       2529.74    
  41  0.776693     -0.252710      -20.4586       20.4586       2153.25       2173.71    
  42  0.571957     -0.558691      -45.2298       45.2298       2198.86       2244.09    
  43  0.313016      -1.16150      -94.0312       94.0312       2200.27       2294.30    
  44  0.512360     -0.668728      -54.1380       54.1380       2100.54       2154.68    
  45  0.874954     -0.133584      -10.8145       10.8145       2164.62       2175.44    
  46  0.617920     -0.481397      -38.9723       38.9723       2225.97       2264.94    
  47  0.529196     -0.636396      -51.5205       51.5205       2160.71       2212.23    
  48  0.389261E-02  -5.54867      -449.202       449.202       2118.77       2567.97    
  49  0.323386E-01  -3.43149      -277.802       277.802       2095.76       2373.56    
  50  0.900641     -0.104648      -8.47198       8.47198       2200.82       2209.29    
  51  0.872638     -0.136235      -11.0291       11.0291       2182.87       2193.90    
  52  0.965349     -0.352660E-01  -2.85502       2.85502       2101.37       2104.22    
  53  0.679490     -0.386413      -31.2827       31.2827       2277.30       2308.58    
  54  0.101129      -2.29136      -185.501       185.501       2318.03       2503.53    
  55  0.885746     -0.121326      -9.82211       9.82211       2283.35       2293.17    
  56  0.307763      -1.17843      -95.4014       95.4014       2263.60       2359.01    
  57  0.978164     -0.220781E-01  -1.78737       1.78737       2358.01       2359.79    
  58  0.678582     -0.387750      -31.3909       31.3909       2456.54       2487.93    
loop,thermsimp(1:2)       50   379.646       8.33645    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       2482.87         68.45          1.22         39.40          0.11          0.05        109.23
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2482.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       50
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       51
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      267     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -8.22331       8.22331       1835.62       1843.84    
   2  0.808902     -0.212077      -17.1691       17.1691       1862.49       1879.66    
   3  0.762147     -0.271616      -21.9891       21.9891       1852.82       1874.81    
   4  0.287851      -1.24531      -100.816       100.816       1926.23       2027.05    
   5  0.212418      -1.54920      -125.418       125.418       1841.83       1967.25    
   6  0.380717     -0.965699      -78.1797       78.1797       1913.96       1992.14    
   7  0.877795     -0.130342      -10.5520       10.5520       1879.41       1889.97    
   8  0.836834     -0.178130      -14.4208       14.4208       1907.59       1922.01    
   9  0.435183     -0.831988      -67.3550       67.3550       1952.21       2019.57    
  10  0.900166     -0.105177      -8.51474       8.51474       1966.08       1974.60    
  11  0.175095      -1.74242      -141.061       141.061       1913.70       2054.77    
  12  0.322232      -1.13248      -91.6820       91.6820       1984.75       2076.43    
  13  0.706662     -0.347203      -28.1084       28.1084       2011.14       2039.25    
  14  0.494297     -0.704618      -57.0435       57.0435       2033.22       2090.26    
  15  0.324383      -1.12583      -91.1435       91.1435       1979.33       2070.48    
  16  0.777122     -0.252157      -20.4138       20.4138       1925.45       1945.87    
  17  0.499054E-01  -2.99763      -242.678       242.678       1929.90       2172.58    
  18  0.489193E-01  -3.01758      -244.294       244.294       1957.84       2202.13    
  19  0.480140     -0.733678      -59.3961       59.3961       2033.28       2092.68    
  20  0.914126     -0.897865E-01  -7.26881       7.26881       2049.88       2057.15    
  21  0.613008     -0.489378      -39.6184       39.6184       2010.04       2049.66    
  22  0.470573     -0.753804      -61.0254       61.0254       1952.51       2013.54    
  23  0.614279     -0.487307      -39.4507       39.4507       1965.45       2004.90    
  24  0.410529     -0.890308      -72.0763       72.0763       2101.37       2173.45    
  25  0.582759     -0.539981      -43.7151       43.7151       2042.25       2085.97    
  26  0.422753E-01  -3.16355      -256.111       256.111       2002.85       2258.96    
  27  0.717044     -0.332618      -26.9277       26.9277       1963.44       1990.37    
  28  0.420765     -0.865682      -70.0827       70.0827       1922.56       1992.64    
  29  0.801392     -0.221405      -17.9242       17.9242       2122.33       2140.26    
  30  0.426188     -0.852875      -69.0459       69.0459       1908.00       1977.05    
  31  0.338881      -1.08211      -87.6038       87.6038       2100.54       2188.14    
  32  0.398160     -0.920902      -74.5532       74.5532       1776.18       1850.73    
  33  0.938837     -0.631132E-01  -5.10943       5.10943       2092.91       2098.02    
  34  0.411860E-01  -3.18966      -258.224       258.224       2153.25       2411.47    
  35  0.180703      -1.71090      -138.509       138.509       2164.62       2303.13    
  36  0.617012     -0.482867      -39.0913       39.0913       2182.87       2221.97    
  37  0.788612     -0.237480      -19.2256       19.2256       2025.73       2044.96    
  38  0.381719     -0.963071      -77.9670       77.9670       1994.14       2072.11    
  39  0.376038     -0.978064      -79.1808       79.1808       2200.82       2280.00    
  40  0.105996      -2.24435      -181.695       181.695       2160.71       2342.41    
  41  0.769932E-01  -2.56404      -207.576       207.576       2033.10       2240.67    
  42  0.365987      -1.00516      -81.3742       81.3742       2007.43       2088.80    
  43  0.731763     -0.312298      -25.2826       25.2826       2198.86       2224.14    
  44  0.447137     -0.804891      -65.1613       65.1613       1904.36       1969.53    
  45  0.273519      -1.29638      -104.951       104.951       2225.97       2330.92    
  46  0.870614     -0.138556      -11.2171       11.2171       2283.35       2294.57    
  47  0.822463     -0.195452      -15.8231       15.8231       2200.27       2216.09    
  48  0.456061     -0.785129      -63.5614       63.5614       2277.30       2340.86    
  49  0.603947     -0.504269      -40.8240       40.8240       2175.09       2215.91    
  50  0.342037      -1.07284      -86.8532       86.8532       2131.53       2218.39    
  51  0.693527     -0.365965      -29.6273       29.6273       2263.60       2293.23    
  52  0.958323     -0.425703E-01  -3.44635       3.44635       2358.01       2361.45    
  53  0.587360     -0.532117      -43.0784       43.0784       2095.76       2138.84    
  54  0.364787      -1.00844      -81.6401       81.6401       2096.94       2178.58    
  55  0.878785     -0.129215      -10.4608       10.4608       2456.54       2467.00    
  56  0.273053      -1.29809      -105.089       105.089       2318.03       2423.12    
  57  0.896174     -0.109620      -8.87450       8.87450       2173.41       2182.29    
  58  0.239994      -1.42714      -115.536       115.536       2482.87       2598.41    
loop,thermsimp(1:2)       51   8.22331       17.1691    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269       2118.77         68.37          1.19         39.45          0.21          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2118.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       51
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       52
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      268     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -70.0199       70.0199       1835.62       1905.64    
   2  0.315135      -1.15476      -93.4851       93.4851       1776.18       1869.66    
   3  0.696708     -0.361389      -29.2569       29.2569       1852.82       1882.08    
   4  0.922116     -0.810842E-01  -6.56431       6.56431       1862.49       1869.06    
   5  0.908133     -0.963648E-01  -7.80137       7.80137       1879.41       1887.22    
   6  0.174132      -1.74794      -141.508       141.508       1907.59       2049.09    
   7  0.490629     -0.712068      -57.6466       57.6466       1925.45       1983.10    
   8  0.382604     -0.960755      -77.7795       77.7795       1841.83       1919.61    
   9  0.985159     -0.149527E-01  -1.21052       1.21052       1904.36       1905.57    
  10  0.182634      -1.70027      -137.648       137.648       1966.08       2103.73    
  11  0.554568     -0.589565      -47.7292       47.7292       1908.00       1955.73    
  12  0.999791     -0.209153E-03 -0.169323E-01  0.169323E-01   1963.44       1963.46    
  13  0.284621      -1.25660      -101.730       101.730       1913.96       2015.69    
  14  0.920706E-01  -2.38520      -193.098       193.098       1922.56       2115.66    
  15  0.243911      -1.41095      -114.226       114.226       1965.45       2079.68    
  16  0.866829     -0.142914      -11.5698       11.5698       1952.51       1964.08    
  17  0.640039     -0.446225      -36.1249       36.1249       1952.21       1988.34    
  18  0.737488E-01  -2.60709      -211.061       211.061       1926.23       2137.30    
  19  0.511916     -0.669594      -54.2081       54.2081       2011.14       2065.35    
  20  0.870220     -0.139009      -11.2537       11.2537       2025.73       2036.99    
  21  0.594690     -0.519714      -42.0743       42.0743       2010.04       2052.11    
  22  0.659508     -0.416262      -33.6992       33.6992       1913.70       1947.40    
  23  0.702023     -0.353789      -28.6416       28.6416       2049.88       2078.53    
  24  0.178121      -1.72529      -139.674       139.674       1979.33       2119.01    
  25  0.622271     -0.474379      -38.4041       38.4041       1994.14       2032.54    
  26  0.877027     -0.131217      -10.6229       10.6229       1984.75       1995.37    
  27  0.206753      -1.57623      -127.607       127.607       2042.25       2169.86    
  28  0.927381     -0.753912E-01  -6.10342       6.10342       2007.43       2013.53    
  29  0.610274     -0.493848      -39.9803       39.9803       2033.22       2073.20    
  30  0.453676     -0.790373      -63.9859       63.9859       2033.28       2097.27    
  31  0.203335      -1.59290      -128.956       128.956       2092.91       2221.87    
  32  0.558786     -0.581989      -47.1159       47.1159       2095.76       2142.88    
  33  0.685013     -0.378317      -30.6273       30.6273       2122.33       2152.96    
  34  0.753574     -0.282929      -22.9050       22.9050       1929.90       1952.81    
  35  0.736990E-01  -2.60777      -211.116       211.116       2101.37       2312.49    
  36  0.719848     -0.328716      -26.6117       26.6117       2096.94       2123.56    
  37  0.177345E-01  -4.03224      -326.437       326.437       2173.41       2499.85    
  38  0.277334E-01  -3.58512      -290.239       290.239       2100.54       2390.78    
  39  0.228604      -1.47576      -119.473       119.473       1957.84       2077.31    
  40  0.874609     -0.133979      -10.8465       10.8465       2175.09       2185.94    
  41  0.875699     -0.132733      -10.7456       10.7456       2200.27       2211.02    
  42  0.540874     -0.614569      -49.7534       49.7534       2131.53       2181.29    
  43  0.343108E-01  -3.37230      -273.010       273.010       2182.87       2455.88    
  44  0.982551     -0.176027E-01  -1.42506       1.42506       2198.86       2200.28    
  45  0.201823      -1.60037      -129.560       129.560       2033.10       2162.66    
  46  0.116838      -2.14697      -173.811       173.811       2002.85       2176.66    
  47  0.520586     -0.652800      -52.8485       52.8485       2200.82       2253.67    
  48  0.515528     -0.662563      -53.6389       53.6389       2263.60       2317.24    
  49  0.814407     -0.205295      -16.6200       16.6200       2283.35       2299.97    
  50  0.436930     -0.827981      -67.0306       67.0306       2164.62       2231.65    
  51  0.802441     -0.220097      -17.8183       17.8183       2225.97       2243.79    
  52  0.366662      -1.00331      -81.2249       81.2249       2277.30       2358.52    
  53  0.915349     -0.884494E-01  -7.16057       7.16057       2160.71       2167.87    
  54  0.619345     -0.479093      -38.7858       38.7858       2358.01       2396.79    
  55  0.984856     -0.152594E-01  -1.23535       1.23535       2153.25       2154.49    
  56  0.594834     -0.519472      -42.0547       42.0547       2318.03       2360.09    
  57  0.295281      -1.21983      -98.7532       98.7532       2456.54       2555.29    
  58  0.363721      -1.01137      -81.8769       81.8769       2118.77       2200.64    
loop,thermsimp(1:2)       52   70.0199       93.4851    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270       2474.69         68.59          1.24         39.15          0.19          0.05        109.23
Just calling func    0   0        109.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2474.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       52
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       53
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      269     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -273.540       273.540       1862.49       2136.03    
   2  0.714674     -0.335928      -27.1956       27.1956       1776.18       1803.37    
   3  0.977792     -0.224587E-01  -1.81818       1.81818       1852.82       1854.64    
   4  0.771231     -0.259767      -21.0299       21.0299       1879.41       1900.44    
   5  0.265148      -1.32747      -107.467       107.467       1904.36       2011.83    
   6  0.559491     -0.580728      -47.0138       47.0138       1835.62       1882.63    
   7  0.934824E-01  -2.36998      -191.866       191.866       1841.83       2033.69    
   8  0.928182     -0.745278E-01  -6.03352       6.03352       1913.70       1919.74    
   9  0.464905     -0.765922      -62.0065       62.0065       1929.90       1991.91    
  10  0.871919     -0.137059      -11.0958       11.0958       1908.00       1919.10    
  11  0.982233     -0.179265E-01  -1.45127       1.45127       1963.44       1964.89    
  12  0.426376     -0.852433      -69.0101       69.0101       1952.51       2021.52    
  13  0.471128E-01  -3.05521      -247.340       247.340       1925.45       2172.79    
  14  0.686439     -0.376238      -30.4590       30.4590       1952.21       1982.67    
  15  0.117826      -2.13855      -173.129       173.129       1984.75       2157.88    
  16  0.756878E-01  -2.58114      -208.960       208.960       2007.43       2216.39    
  17  0.196211      -1.62856      -131.843       131.843       1913.96       2045.80    
  18  0.431930     -0.839491      -67.9624       67.9624       1994.14       2062.10    
  19  0.707794     -0.345602      -27.9788       27.9788       2025.73       2053.71    
  20  0.174358E-01  -4.04923      -327.812       327.812       1907.59       2235.40    
  21  0.267976      -1.31686      -106.608       106.608       2010.04       2116.65    
  22  0.793866     -0.230841      -18.6881       18.6881       2011.14       2029.83    
  23  0.135848      -1.99622      -161.607       161.607       2033.22       2194.83    
  24  0.663958     -0.409536      -33.1547       33.1547       1957.84       1991.00    
  25  0.281101      -1.26904      -102.737       102.737       2049.88       2152.62    
  26  0.606466     -0.500106      -40.4869       40.4869       1965.45       2005.94    
  27  0.940056     -0.618158E-01  -5.00440       5.00440       2033.28       2038.29    
  28  0.124106      -2.08662      -168.926       168.926       1966.08       2135.01    
  29  0.205090      -1.58431      -128.260       128.260       1922.56       2050.82    
  30  0.852960     -0.159043      -12.8756       12.8756       1979.33       1992.21    
  31  0.241701      -1.42005      -114.963       114.963       2096.94       2211.91    
  32  0.744368     -0.295220      -23.9000       23.9000       1926.23       1950.13    
  33  0.279909      -1.27329      -103.081       103.081       2095.76       2198.84    
  34  0.142971      -1.94511      -157.470       157.470       2122.33       2279.80    
  35  0.367233      -1.00176      -81.0990       81.0990       2153.25       2234.35    
  36  0.839044     -0.175493      -14.2073       14.2073       2033.10       2047.30    
  37  0.762369     -0.271325      -21.9656       21.9656       2160.71       2182.68    
  38  0.414704     -0.880189      -71.2572       71.2572       2042.25       2113.51    
  39  0.294445      -1.22266      -98.9827       98.9827       2002.85       2101.84    
  40  0.296874      -1.21445      -98.3175       98.3175       2131.53       2229.85    
  41  0.834777     -0.180590      -14.6200       14.6200       2175.09       2189.71    
  42  0.399354     -0.917907      -74.3106       74.3106       2198.86       2273.17    
  43  0.948666     -0.526981E-01  -4.26626       4.26626       2118.77       2123.03    
  44  0.306553E-01  -3.48495      -282.130       282.130       2200.27       2482.40    
  45  0.768324E-01  -2.56613      -207.745       207.745       2092.91       2300.66    
  46  0.723813     -0.323222      -26.1670       26.1670       2164.62       2190.79    
  47  0.912222     -0.918720E-01  -7.43765       7.43765       2225.97       2233.41    
  48  0.846322     -0.166855      -13.5080       13.5080       2200.82       2214.33    
  49  0.704090     -0.350850      -28.4036       28.4036       2283.35       2311.75    
  50  0.443839     -0.812294      -65.7606       65.7606       2101.37       2167.13    
  51  0.790462     -0.235137      -19.0359       19.0359       2263.60       2282.64    
  52  0.134239      -2.00813      -162.571       162.571       2277.30       2439.87    
  53  0.720618     -0.327646      -26.5251       26.5251       2318.03       2344.56    
  54  0.489652     -0.714061      -57.8080       57.8080       2100.54       2158.35    
  55  0.493891E-01  -3.00802      -243.520       243.520       2358.01       2601.53    
  56  0.524875     -0.644595      -52.1843       52.1843       2182.87       2235.06    
  57  0.919627     -0.837868E-01  -6.78310       6.78310       2173.41       2180.19    
  58  0.372709     -0.986956      -79.9007       79.9007       2474.69       2554.59    
loop,thermsimp(1:2)       53   273.540       27.1956    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271       2141.09         68.55          1.27         39.24          0.16          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2141.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       53
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       54
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      270     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -39.3557       39.3557       1776.18       1815.53    
   2  0.438442     -0.824528      -66.7511       66.7511       1852.82       1919.57    
   3  0.666371     -0.405908      -32.8610       32.8610       1835.62       1868.48    
   4  0.419797     -0.867984      -70.2690       70.2690       1879.41       1949.68    
   5  0.662493     -0.411746      -33.3335       33.3335       1908.00       1941.34    
   6  0.261021      -1.34315      -108.737       108.737       1913.70       2022.44    
   7  0.451731     -0.794667      -64.3336       64.3336       1926.23       1990.57    
   8  0.858047     -0.153096      -12.3942       12.3942       1963.44       1975.84    
   9  0.678039     -0.388550      -31.4557       31.4557       1952.21       1983.67    
  10  0.257304      -1.35750      -109.898       109.898       1957.84       2067.74    
  11  0.379774     -0.968178      -78.3805       78.3805       1929.90       2008.29    
  12  0.200314      -1.60787      -130.168       130.168       1979.33       2109.50    
  13  0.702955E-01  -2.65505      -214.944       214.944       1965.45       2180.40    
  14  0.846007     -0.167228      -13.5382       13.5382       1904.36       1917.90    
  15  0.692217     -0.367856      -29.7804       29.7804       1952.51       1982.29    
  16  0.830541     -0.185678      -15.0319       15.0319       2011.14       2026.17    
  17  0.162133E-02  -6.42451      -520.106       520.106       1841.83       2361.94    
  18  0.829216     -0.187275      -15.1611       15.1611       2033.28       2048.45    
  19  0.464918     -0.765894      -62.0042       62.0042       1913.96       1975.96    
  20  0.204157      -1.58887      -128.629       128.629       2033.10       2161.73    
  21  0.203429      -1.59244      -128.918       128.918       1922.56       2051.48    
  22  0.403935     -0.906500      -73.3872       73.3872       2025.73       2099.12    
  23  0.508037     -0.677201      -54.8239       54.8239       1994.14       2048.96    
  24  0.337702      -1.08559      -87.8857       87.8857       2002.85       2090.74    
  25  0.375672     -0.979039      -79.2597       79.2597       2042.25       2121.51    
  26  0.218755      -1.51980      -123.038       123.038       2010.04       2133.08    
  27  0.803422     -0.218876      -17.7194       17.7194       2118.77       2136.49    
  28  0.324101      -1.12670      -91.2140       91.2140       1966.08       2057.30    
  29  0.804001     -0.218155      -17.6611       17.6611       1862.49       1880.15    
  30  0.727676     -0.317899      -25.7361       25.7361       2049.88       2075.62    
  31  0.769479     -0.262042      -21.2141       21.2141       1984.75       2005.96    
  32  0.632293     -0.458402      -37.1107       37.1107       2100.54       2137.65    
  33  0.300459      -1.20244      -97.3457       97.3457       2101.37       2198.72    
  34  0.567362     -0.566759      -45.8829       45.8829       1925.45       1971.34    
  35  0.803345     -0.218971      -17.7272       17.7272       2173.41       2191.14    
  36  0.764706     -0.268264      -21.7178       21.7178       2160.71       2182.43    
  37  0.159444      -1.83606      -148.641       148.641       2175.09       2323.73    
  38  0.951670     -0.495367E-01  -4.01032       4.01032       2164.62       2168.63    
  39  0.769198     -0.262407      -21.2436       21.2436       2033.22       2054.46    
  40  0.916532     -0.871588E-01  -7.05608       7.05608       2095.76       2102.82    
  41  0.146117E-01  -4.22593      -342.117       342.117       2096.94       2439.06    
  42  0.196164      -1.62880      -131.863       131.863       2200.82       2332.68    
  43  0.399482     -0.917586      -74.2847       74.2847       2007.43       2081.71    
  44  0.646732     -0.435823      -35.2828       35.2828       2131.53       2166.82    
  45  0.207790      -1.57122      -127.201       127.201       2225.97       2353.17    
  46  0.276388      -1.28595      -104.106       104.106       2153.25       2257.36    
  47  0.410494     -0.890394      -72.0833       72.0833       2182.87       2254.96    
  48  0.437747     -0.826115      -66.8795       66.8795       1907.59       1974.47    
  49  0.414886     -0.879752      -71.2217       71.2217       2198.86       2270.08    
  50  0.453890     -0.789901      -63.9478       63.9478       2122.33       2186.28    
  51  0.141383      -1.95628      -158.374       158.374       2263.60       2421.98    
  52  0.264375      -1.33039      -107.704       107.704       2092.91       2200.62    
  53  0.598599     -0.513163      -41.5440       41.5440       2283.35       2324.89    
  54  0.716868     -0.332864      -26.9475       26.9475       2318.03       2344.98    
  55  0.547773     -0.601894      -48.7273       48.7273       2277.30       2326.02    
  56  0.920744     -0.825729E-01  -6.68483       6.68483       2200.27       2206.95    
  57  0.394656     -0.929742      -75.2688       75.2688       2474.69       2549.95    
  58  0.439395     -0.822357      -66.5753       66.5753       2141.09       2207.66    
loop,thermsimp(1:2)       54   39.3557       66.7511    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272       2440.04         68.43          1.23         39.33          0.06          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2440.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       54
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       55
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      271     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -37.9072       37.9072       1776.18       1814.09    
   2  0.909442     -0.949244E-01  -7.68476       7.68476       1835.62       1843.30    
   3  0.449837     -0.798870      -64.6739       64.6739       1862.49       1927.17    
   4  0.761598     -0.272336      -22.0474       22.0474       1904.36       1926.41    
   5  0.706800     -0.347007      -28.0926       28.0926       1852.82       1880.91    
   6  0.214343      -1.54018      -124.688       124.688       1908.00       2032.69    
   7  0.855661     -0.155881      -12.6196       12.6196       1879.41       1892.03    
   8  0.432924E-01  -3.13978      -254.186       254.186       1925.45       2179.64    
   9  0.902784     -0.102271      -8.27955       8.27955       1907.59       1915.87    
  10  0.706965     -0.346774      -28.0737       28.0737       1963.44       1991.51    
  11  0.826667     -0.190354      -15.4104       15.4104       1913.96       1929.37    
  12  0.824436     -0.193055      -15.6291       15.6291       1952.51       1968.14    
  13  0.442772     -0.814700      -65.9554       65.9554       1952.21       2018.17    
  14  0.416355     -0.876217      -70.9356       70.9356       1926.23       1997.17    
  15  0.268464      -1.31504      -106.461       106.461       1984.75       2091.21    
  16  0.779742     -0.248792      -20.1414       20.1414       1929.90       1950.05    
  17  0.406799E-01  -3.20202      -259.225       259.225       1913.70       2172.93    
  18  0.975397     -0.249106E-01  -2.01668       2.01668       2011.14       2013.16    
  19  0.425150E-01  -3.15790      -255.653       255.653       2033.28       2288.94    
  20  0.302481      -1.19574      -96.8028       96.8028       1994.14       2090.94    
  21  0.732033     -0.311930      -25.2528       25.2528       1922.56       1947.81    
  22  0.774561     -0.255459      -20.6811       20.6811       2033.22       2053.90    
  23  0.899897     -0.105475      -8.53889       8.53889       1966.08       1974.62    
  24  0.549624     -0.598520      -48.4542       48.4542       1957.84       2006.29    
  25  0.143543      -1.94112      -157.147       157.147       2049.88       2207.03    
  26  0.229055      -1.47379      -119.313       119.313       2007.43       2126.74    
  27  0.334206      -1.09600      -88.7283       88.7283       2002.85       2091.58    
  28  0.301620      -1.19859      -97.0336       97.0336       2025.73       2122.77    
  29  0.856030     -0.155449      -12.5847       12.5847       2095.76       2108.34    
  30  0.978878     -0.213482E-01  -1.72828       1.72828       1979.33       1981.06    
  31  0.890790E-01  -2.41823      -195.772       195.772       2042.25       2238.03    
  32  0.275076      -1.29071      -104.491       104.491       2010.04       2114.53    
  33  0.506865     -0.679511      -55.0110       55.0110       2118.77       2173.78    
  34  0.628553     -0.464334      -37.5910       37.5910       2100.54       2138.13    
  35  0.787972     -0.238293      -19.2914       19.2914       2033.10       2052.39    
  36  0.746168     -0.292804      -23.7045       23.7045       2131.53       2155.24    
  37  0.116954      -2.14598      -173.731       173.731       2164.62       2338.35    
  38  0.245368      -1.40500      -113.744       113.744       1965.45       2079.20    
  39  0.873952     -0.134729      -10.9072       10.9072       2160.71       2171.62    
  40  0.850596     -0.161818      -13.1002       13.1002       2122.33       2135.43    
  41  0.455763     -0.785783      -63.6144       63.6144       2173.41       2237.03    
  42  0.984333     -0.157910E-01  -1.27839       1.27839       2101.37       2102.65    
  43  0.956700     -0.442655E-01  -3.58359       3.58359       2092.91       2096.50    
  44  0.186161      -1.68114      -136.100       136.100       2200.27       2336.37    
  45  0.791379     -0.233979      -18.9421       18.9421       2141.09       2160.03    
  46  0.262937      -1.33584      -108.145       108.145       2182.87       2291.02    
  47  0.115228E-01  -4.46342      -361.344       361.344       2153.25       2514.59    
  48  0.324912      -1.12420      -91.0115       91.0115       2198.86       2289.87    
  49  0.164288      -1.80613      -146.218       146.218       2175.09       2321.31    
  50  0.334193E-02  -5.70121      -461.551       461.551       2283.35       2744.90    
  51  0.189130      -1.66532      -134.819       134.819       2277.30       2412.12    
  52  0.157956      -1.84544      -149.400       149.400       2200.82       2350.22    
  53  0.414399     -0.880925      -71.3167       71.3167       2318.03       2389.35    
  54  0.445375     -0.808838      -65.4809       65.4809       2225.97       2291.45    
  55  0.674924     -0.393155      -31.8285       31.8285       1841.83       1873.66    
  56  0.204431      -1.58752      -128.521       128.521       2263.60       2392.13    
  57  0.741769     -0.298718      -24.1832       24.1832       2096.94       2121.13    
  58  0.662845     -0.411215      -33.2906       33.2906       2440.04       2473.33    
loop,thermsimp(1:2)       55   37.9072       7.68476    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       2074.00         68.66          1.23         39.12          0.18          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2074.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       55
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       56
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      272     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -113.588       113.588       1776.18       1889.77    
   2  0.963480     -0.372033E-01  -3.01186       3.01186       1835.62       1838.63    
   3  0.633143     -0.457059      -37.0019       37.0019       1841.83       1878.83    
   4  0.939850E-02  -4.66721      -377.841       377.841       1852.82       2230.66    
   5  0.796978     -0.226928      -18.3713       18.3713       1879.41       1897.79    
   6  0.229125      -1.47349      -119.289       119.289       1907.59       2026.88    
   7  0.926958     -0.758467E-01  -6.14030       6.14030       1904.36       1910.50    
   8  0.687512     -0.374676      -30.3325       30.3325       1862.49       1892.83    
   9  0.695030     -0.363800      -29.4520       29.4520       1913.96       1943.41    
  10  0.900736     -0.104543      -8.46342       8.46342       1922.56       1931.03    
  11  0.867179     -0.142510      -11.5371       11.5371       1929.90       1941.44    
  12  0.879271     -0.128662      -10.4160       10.4160       1952.51       1962.93    
  13  0.197557      -1.62173      -131.290       131.290       1966.08       2097.37    
  14  0.790701     -0.234835      -19.0115       19.0115       1979.33       1998.34    
  15  0.807456     -0.213867      -17.3139       17.3139       1963.44       1980.76    
  16  0.688117     -0.373796      -30.2613       30.2613       1926.23       1956.50    
  17  0.227000      -1.48280      -120.043       120.043       1957.84       2077.88    
  18  0.374715     -0.981589      -79.4661       79.4661       2011.14       2090.61    
  19  0.176077      -1.73683      -140.608       140.608       1952.21       2092.82    
  20  0.446126E-01  -3.10974      -251.754       251.754       1908.00       2159.76    
  21  0.997763E-01  -2.30482      -186.591       186.591       2033.10       2219.69    
  22  0.142978E-01  -4.24765      -343.875       343.875       2033.22       2377.10    
  23  0.652216     -0.427379      -34.5992       34.5992       1965.45       2000.05    
  24  0.909797     -0.945339E-01  -7.65315       7.65315       1994.14       2001.79    
  25  0.145015      -1.93092      -156.321       156.321       1984.75       2141.07    
  26  0.189723      -1.66219      -134.566       134.566       2002.85       2137.42    
  27  0.260997      -1.34324      -108.745       108.745       2092.91       2201.66    
  28  0.167755      -1.78525      -144.528       144.528       2101.37       2245.90    
  29  0.148939      -1.90422      -154.159       154.159       2095.76       2249.92    
  30  0.209474      -1.56315      -126.548       126.548       2010.04       2136.59    
  31  0.594522     -0.519998      -42.0973       42.0973       2096.94       2139.04    
  32  0.401703     -0.912043      -73.8359       73.8359       2025.73       2099.57    
  33  0.306469      -1.18264      -95.7426       95.7426       2007.43       2103.17    
  34  0.879335     -0.128589      -10.4101       10.4101       2122.33       2132.74    
  35  0.920707     -0.826134E-01  -6.68811       6.68811       2100.54       2107.23    
  36  0.215616      -1.53425      -124.208       124.208       2131.53       2255.74    
  37  0.821708     -0.196370      -15.8975       15.8975       2141.09       2156.98    
  38  0.935240     -0.669517E-01  -5.42018       5.42018       2160.71       2166.13    
  39  0.691932     -0.368268      -29.8137       29.8137       1913.70       1943.52    
  40  0.493152     -0.706938      -57.2313       57.2313       2118.77       2176.00    
  41  0.362160      -1.01567      -82.2251       82.2251       1925.45       2007.68    
  42  0.636318     -0.452056      -36.5969       36.5969       2049.88       2086.48    
  43  0.178369      -1.72390      -139.561       139.561       2173.41       2312.97    
  44  0.987372     -0.127089E-01  -1.02887       1.02887       2042.25       2043.28    
  45  0.557690     -0.583953      -47.2749       47.2749       2033.28       2080.56    
  46  0.434391     -0.833811      -67.5026       67.5026       2198.86       2266.36    
  47  0.759572     -0.275001      -22.2631       22.2631       2182.87       2205.14    
  48  0.578559     -0.547214      -44.3006       44.3006       2225.97       2270.27    
  49  0.262392      -1.33792      -108.313       108.313       2175.09       2283.40    
  50  0.615619     -0.485127      -39.2742       39.2742       2200.27       2239.54    
  51  0.580502     -0.543861      -44.0292       44.0292       2164.62       2208.65    
  52  0.434749     -0.832986      -67.4357       67.4357       2200.82       2268.25    
  53  0.741569     -0.298987      -24.2050       24.2050       2318.03       2342.24    
  54  0.207475      -1.57274      -127.324       127.324       2263.60       2390.93    
  55  0.610742     -0.493081      -39.9182       39.9182       2277.30       2317.22    
  56  0.746759     -0.292013      -23.6404       23.6404       2440.04       2463.68    
  57  0.846394     -0.166771      -13.5012       13.5012       2153.25       2166.75    
  58  0.114011      -2.17146      -175.794       175.794       2074.00       2249.80    
loop,thermsimp(1:2)       56   113.588       3.01186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       2455.49         68.54          1.22         39.25          0.16          0.05        109.21
Just calling func    0   0        109.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    275       1886.07         68.65          1.23         39.04          0.24          0.05        109.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1886.07
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       56
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       57
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      274     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -96.4237       96.4237       1835.62       1932.04    
   2  0.729962     -0.314762      -25.4821       25.4821       1841.83       1867.31    
   3  0.788140     -0.238080      -19.2742       19.2742       1776.18       1795.45    
   4  0.718031     -0.331242      -26.8163       26.8163       1862.49       1889.31    
   5  0.603575     -0.504885      -40.8738       40.8738       1879.41       1920.29    
   6  0.287757      -1.24564      -100.843       100.843       1904.36       2005.21    
   7  0.690986     -0.369635      -29.9244       29.9244       1922.56       1952.49    
   8  0.976315     -0.239695E-01  -1.94049       1.94049       1929.90       1931.85    
   9  0.983892     -0.162393E-01  -1.31468       1.31468       1913.96       1915.27    
  10  0.858769     -0.152255      -12.3260       12.3260       1913.70       1926.03    
  11  0.968889     -0.316048E-01  -2.55862       2.55862       1926.23       1928.79    
  12  0.364921      -1.00807      -81.6103       81.6103       1952.51       2034.12    
  13  0.540930     -0.614466      -49.7451       49.7451       1963.44       2013.19    
  14  0.812278E-01  -2.51050      -203.242       203.242       1979.33       2182.57    
  15  0.919841     -0.835539E-01  -6.76425       6.76425       1965.45       1972.22    
  16  0.275462      -1.28930      -104.378       104.378       1994.14       2098.52    
  17  0.704362     -0.350463      -28.3723       28.3723       1925.45       1953.83    
  18  0.896809     -0.108913      -8.81722       8.81722       1907.59       1916.40    
  19  0.166873      -1.79052      -144.955       144.955       2042.25       2187.21    
  20  0.927791E-02  -4.68012      -378.887       378.887       1957.84       2336.73    
  21  0.906733     -0.979074E-01  -7.92625       7.92625       2033.28       2041.21    
  22  0.575421     -0.552654      -44.7410       44.7410       2049.88       2094.62    
  23  0.975069     -0.252469E-01  -2.04391       2.04391       2011.14       2013.19    
  24  0.610094     -0.494143      -40.0042       40.0042       1952.21       1992.22    
  25  0.823028     -0.194765      -15.7675       15.7675       1966.08       1981.85    
  26  0.709022     -0.343869      -27.8385       27.8385       2025.73       2053.57    
  27  0.956893     -0.440633E-01  -3.56722       3.56722       2007.43       2010.99    
  28  0.897850E-01  -2.41034      -195.133       195.133       2100.54       2295.67    
  29  0.836996     -0.177936      -14.4051       14.4051       2122.33       2136.74    
  30  0.688664     -0.373001      -30.1970       30.1970       2010.04       2040.24    
  31  0.587454     -0.531957      -43.0655       43.0655       2002.85       2045.92    
  32  0.880970     -0.126731      -10.2597       10.2597       2096.94       2107.20    
  33  0.506724     -0.679789      -55.0334       55.0334       1984.75       2039.78    
  34  0.802262     -0.220320      -17.8363       17.8363       2141.09       2158.92    
  35  0.764787E-01  -2.57074      -208.119       208.119       1908.00       2116.12    
  36  0.907101     -0.975014E-01  -7.89339       7.89339       2160.71       2168.61    
  37  0.797350     -0.226461      -18.3336       18.3336       2153.25       2171.58    
  38  0.257375      -1.35722      -109.876       109.876       2118.77       2228.64    
  39  0.643190     -0.441315      -35.7274       35.7274       2092.91       2128.64    
  40  0.513768     -0.665984      -53.9158       53.9158       2182.87       2236.79    
  41  0.850264     -0.162208      -13.1318       13.1318       2164.62       2177.76    
  42  0.200819      -1.60535      -129.964       129.964       2033.10       2163.06    
  43  0.331940      -1.10280      -89.2791       89.2791       1852.82       1942.10    
  44  0.900490     -0.104816      -8.48555       8.48555       2200.27       2208.76    
  45  0.618957     -0.479719      -38.8365       38.8365       2101.37       2140.21    
  46  0.395756     -0.926956      -75.0433       75.0433       2074.00       2149.05    
  47  0.528166     -0.638345      -51.6783       51.6783       2095.76       2147.44    
  48  0.586635     -0.533352      -43.1784       43.1784       2131.53       2174.71    
  49  0.705559     -0.348765      -28.2349       28.2349       2198.86       2227.09    
  50  0.191018      -1.65539      -134.015       134.015       2200.82       2334.83    
  51  0.581133     -0.542775      -43.9412       43.9412       2225.97       2269.91    
  52  0.297529      -1.21224      -98.1391       98.1391       2175.09       2273.23    
  53  0.532486     -0.630198      -51.0187       51.0187       2173.41       2224.43    
  54  0.396084     -0.926129      -74.9763       74.9763       2277.30       2352.27    
  55  0.209334      -1.56382      -126.602       126.602       2318.03       2444.63    
  56  0.632068     -0.458758      -37.1395       37.1395       2033.22       2070.36    
  57  0.941424     -0.603613E-01  -4.88665       4.88665       2263.60       2268.49    
  58  0.875379     -0.133099      -10.7752       10.7752       1886.07       1896.85    
loop,thermsimp(1:2)       57   96.4237       25.4821    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276       2411.18         68.80          1.28         39.27          0.09          0.05        109.49
Just calling func    0   0        109.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2411.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       57
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       58
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      275     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -51.3659       51.3659       1776.18       1827.55    
   2  0.175946E-01  -4.04016      -327.078       327.078       1841.83       2168.91    
   3  0.419998     -0.867504      -70.2303       70.2303       1862.49       1932.72    
   4  0.448197E-01  -3.10511      -251.379       251.379       1886.07       2137.45    
   5  0.501784     -0.689586      -55.8266       55.8266       1913.96       1969.78    
   6  0.858173     -0.152949      -12.3823       12.3823       1907.59       1919.97    
   7  0.101932      -2.28345      -184.861       184.861       1879.41       2064.28    
   8  0.453268     -0.791273      -64.0588       64.0588       1913.70       1977.76    
   9  0.128092      -2.05501      -166.366       166.366       1926.23       2092.60    
  10  0.779644     -0.248918      -20.1515       20.1515       1929.90       1950.06    
  11  0.769943E-01  -2.56402      -207.575       207.575       1835.62       2043.19    
  12  0.140214      -1.96458      -159.046       159.046       1852.82       2011.87    
  13  0.571588     -0.559337      -45.2820       45.2820       1922.56       1967.84    
  14  0.455096     -0.787247      -63.7329       63.7329       1925.45       1989.19    
  15  0.594240     -0.520471      -42.1356       42.1356       1965.45       2007.59    
  16  0.833288     -0.182376      -14.7645       14.7645       1966.08       1980.85    
  17  0.807090E-01  -2.51691      -203.760       203.760       1952.21       2155.97    
  18  0.430313     -0.843242      -68.2660       68.2660       1904.36       1972.63    
  19  0.990463     -0.958277E-02 -0.775789      0.775789       2007.43       2008.20    
  20  0.907906     -0.966144E-01  -7.82158       7.82158       2011.14       2018.96    
  21  0.607469     -0.498455      -40.3532       40.3532       1963.44       2003.79    
  22  0.927102     -0.756916E-01  -6.12774       6.12774       1952.51       1958.64    
  23  0.379122     -0.969896      -78.5196       78.5196       1984.75       2063.27    
  24  0.183121E-01  -4.00019      -323.842       323.842       2010.04       2333.88    
  25  0.561966     -0.576313      -46.6564       46.6564       2033.28       2079.94    
  26  0.638772     -0.448208      -36.2854       36.2854       2002.85       2039.14    
  27  0.234202      -1.45157      -117.514       117.514       2025.73       2143.25    
  28  0.257221      -1.35782      -109.924       109.924       2033.22       2143.15    
  29  0.688379     -0.373416      -30.2305       30.2305       2049.88       2080.11    
  30  0.360237E-01  -3.32358      -269.066       269.066       1994.14       2263.20    
  31  0.849177     -0.163487      -13.2354       13.2354       2096.94       2110.18    
  32  0.324868E-01  -3.42692      -277.432       277.432       1908.00       2185.44    
  33  0.216483E-01  -3.83283      -310.293       310.293       2092.91       2403.21    
  34  0.794095     -0.230552      -18.6647       18.6647       2122.33       2141.00    
  35  0.453180     -0.791465      -64.0743       64.0743       2101.37       2165.44    
  36  0.286278      -1.25079      -101.260       101.260       2095.76       2197.02    
  37  0.931500     -0.709590E-01  -5.74460       5.74460       2074.00       2079.75    
  38  0.483424     -0.726861      -58.8443       58.8443       2141.09       2199.93    
  39  0.782276     -0.245547      -19.8787       19.8787       2033.10       2052.97    
  40  0.976661     -0.236156E-01  -1.91184       1.91184       2160.71       2162.62    
  41  0.707981     -0.345338      -27.9574       27.9574       2153.25       2181.21    
  42  0.101993      -2.28285      -184.812       184.812       2131.53       2316.35    
  43  0.690974E-01  -2.67224      -216.335       216.335       2164.62       2380.96    
  44  0.767576E-01  -2.56710      -207.824       207.824       1979.33       2187.16    
  45  0.584825     -0.536443      -43.4286       43.4286       2042.25       2085.68    
  46  0.588828     -0.529621      -42.8764       42.8764       2200.27       2243.15    
  47  0.894562     -0.111421      -9.02027       9.02027       2173.41       2182.43    
  48  0.260723      -1.34430      -108.830       108.830       2198.86       2307.69    
  49  0.773456E-01  -2.55947      -207.206       207.206       2118.77       2325.97    
  50  0.848651E-01  -2.46669      -199.695       199.695       2182.87       2382.57    
  51  0.992803     -0.722305E-02 -0.584754      0.584754       2263.60       2264.19    
  52  0.529202     -0.636386      -51.5196       51.5196       2225.97       2277.49    
  53  0.540374     -0.615494      -49.8284       49.8284       2175.09       2224.92    
  54  0.185914      -1.68247      -136.207       136.207       2100.54       2236.75    
  55  0.764153     -0.268988      -21.7764       21.7764       2200.82       2222.59    
  56  0.931974E-01  -2.37304      -192.113       192.113       1957.84       2149.95    
  57  0.753946     -0.282434      -22.8649       22.8649       2277.30       2300.16    
  58  0.279731      -1.27393      -103.133       103.133       2411.18       2514.31    
loop,thermsimp(1:2)       58   51.3659       327.078    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       2318.03         68.68          1.27         39.20          0.04          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2318.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       58
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       59
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      276     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -4.41547       4.41547       1776.18       1780.59    
   2  0.224221      -1.49512      -121.040       121.040       1907.59       2028.63    
   3  0.699642     -0.357186      -28.9166       28.9166       1862.49       1891.41    
   4  0.490916     -0.711482      -57.5992       57.5992       1929.90       1987.50    
   5  0.204251      -1.58840      -128.592       128.592       1952.51       2081.10    
   6  0.356522      -1.03136      -83.4954       83.4954       1922.56       2006.06    
   7  0.745938     -0.293113      -23.7294       23.7294       1913.96       1937.69    
   8  0.451533     -0.795107      -64.3692       64.3692       1904.36       1968.73    
   9  0.101038      -2.29226      -185.574       185.574       1913.70       2099.28    
  10  0.826978     -0.189977      -15.3799       15.3799       1966.08       1981.46    
  11  0.212337      -1.54958      -125.449       125.449       1925.45       2050.90    
  12  0.490540     -0.712248      -57.6612       57.6612       1963.44       2021.10    
  13  0.672078     -0.397381      -32.1706       32.1706       1965.45       1997.62    
  14  0.690580     -0.370223      -29.9720       29.9720       2007.43       2037.40    
  15  0.513190     -0.667108      -54.0069       54.0069       1852.82       1906.83    
  16  0.268393      -1.31530      -106.483       106.483       2011.14       2117.62    
  17  0.896898     -0.108813      -8.80914       8.80914       2002.85       2011.66    
  18  0.911953     -0.921674E-01  -7.46156       7.46156       1835.62       1843.08    
  19  0.355703      -1.03366      -83.6815       83.6815       2033.10       2116.78    
  20  0.293818      -1.22479      -99.1552       99.1552       1984.75       2083.90    
  21  0.713392     -0.337724      -27.3410       27.3410       1879.41       1906.76    
  22  0.660627     -0.414565      -33.5618       33.5618       2074.00       2107.57    
  23  0.795097     -0.229291      -18.5626       18.5626       2033.28       2051.85    
  24  0.919484     -0.839428E-01  -6.79573       6.79573       2049.88       2056.68    
  25  0.976382     -0.239014E-01  -1.93497       1.93497       2042.25       2044.19    
  26  0.922195     -0.809991E-01  -6.55741       6.55741       1926.23       1932.79    
  27  0.436062     -0.829970      -67.1916       67.1916       2096.94       2164.13    
  28  0.271848      -1.30251      -105.447       105.447       1886.07       1991.52    
  29  0.389360     -0.943252      -76.3625       76.3625       2122.33       2198.70    
  30  0.314178E-01  -3.46038      -280.141       280.141       2033.22       2313.36    
  31  0.545460     -0.606126      -49.0699       49.0699       2025.73       2074.80    
  32  0.925479E-01  -2.38003      -192.679       192.679       1957.84       2150.52    
  33  0.971973     -0.284273E-01  -2.30138       2.30138       1952.21       1954.51    
  34  0.403500     -0.907578      -73.4745       73.4745       2160.71       2234.19    
  35  0.392926     -0.934133      -75.6243       75.6243       2101.37       2176.99    
  36  0.718758     -0.330230      -26.7343       26.7343       1841.83       1868.56    
  37  0.746082     -0.292920      -23.7138       23.7138       2153.25       2176.96    
  38  0.353478      -1.03993      -84.1896       84.1896       2173.41       2257.60    
  39  0.843229     -0.170517      -13.8045       13.8045       1908.00       1921.81    
  40  0.388011     -0.946720      -76.6433       76.6433       1979.33       2055.98    
  41  0.969569     -0.309034E-01  -2.50183       2.50183       2095.76       2098.26    
  42  0.441380E-01  -3.12043      -252.620       252.620       2141.09       2393.71    
  43  0.533000     -0.629233      -50.9406       50.9406       2200.82       2251.76    
  44  0.288396      -1.24342      -100.663       100.663       2175.09       2275.75    
  45  0.683115     -0.381092      -30.8519       30.8519       2100.54       2131.39    
  46  0.339511      -1.08025      -87.4534       87.4534       2200.27       2287.72    
  47  0.150420E-01  -4.19691      -339.767       339.767       1994.14       2333.91    
  48  0.141026      -1.95881      -158.579       158.579       2263.60       2422.18    
  49  0.421666     -0.863541      -69.9094       69.9094       2225.97       2295.88    
  50  0.953496     -0.476201E-01  -3.85516       3.85516       2277.30       2281.15    
  51  0.966647     -0.339215E-01  -2.74617       2.74617       2198.86       2201.60    
  52  0.365434      -1.00667      -81.4966       81.4966       2131.53       2213.03    
  53  0.314209      -1.15770      -93.7233       93.7233       2118.77       2212.49    
  54  0.612536     -0.490148      -39.6807       39.6807       2010.04       2049.72    
  55  0.962603     -0.381139E-01  -3.08557       3.08557       2164.62       2167.71    
  56  0.518973     -0.655904      -53.0998       53.0998       2182.87       2235.97    
  57  0.963657     -0.370202E-01  -2.99703       2.99703       2092.91       2095.91    
  58  0.423866     -0.858338      -69.4882       69.4882       2318.03       2387.52    
loop,thermsimp(1:2)       59   4.41547       121.040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278       2026.66         68.45          1.19         39.72          0.06          0.05        109.47
Just calling func    0   0        109.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2026.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       59
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       60
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      277     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -85.6585       85.6585       1776.18       1861.84    
   2  0.605757     -0.501276      -40.5816       40.5816       1835.62       1876.20    
   3  0.690633     -0.370146      -29.9658       29.9658       1841.83       1871.79    
   4  0.400665     -0.914628      -74.0453       74.0453       1862.49       1936.54    
   5  0.862165     -0.148309      -12.0066       12.0066       1879.41       1891.42    
   6  0.874011     -0.134662      -10.9018       10.9018       1852.82       1863.72    
   7  0.389525     -0.942826      -76.3280       76.3280       1908.00       1984.33    
   8  0.102225E-01  -4.58317      -371.038       371.038       1926.23       2297.27    
   9  0.102697      -2.27597      -184.255       184.255       1913.96       2098.21    
  10  0.818271     -0.200561      -16.2368       16.2368       1952.21       1968.45    
  11  0.888768     -0.117920      -9.54637       9.54637       1904.36       1913.91    
  12  0.539210     -0.617651      -50.0030       50.0030       1966.08       2016.09    
  13  0.317914      -1.14597      -92.7743       92.7743       1929.90       2022.68    
  14  0.437422     -0.826857      -66.9395       66.9395       1886.07       1953.01    
  15  0.925263     -0.776773E-01  -6.28850       6.28850       1965.45       1971.74    
  16  0.422436     -0.861717      -69.7617       69.7617       1922.56       1992.32    
  17  0.965248     -0.353697E-01  -2.86341       2.86341       2002.85       2005.72    
  18  0.771278     -0.259706      -21.0249       21.0249       1963.44       1984.47    
  19  0.902488     -0.102600      -8.30616       8.30616       1907.59       1915.89    
  20  0.512816     -0.667839      -54.0660       54.0660       2007.43       2061.49    
  21  0.915966     -0.877758E-01  -7.10603       7.10603       2042.25       2049.36    
  22  0.612605     -0.490035      -39.6716       39.6716       2010.04       2049.71    
  23  0.323528      -1.12847      -91.3571       91.3571       1925.45       2016.81    
  24  0.206646      -1.57675      -127.648       127.648       2033.28       2160.93    
  25  0.481057     -0.731769      -59.2415       59.2415       1979.33       2038.57    
  26  0.287887E-01  -3.54777      -287.216       287.216       2049.88       2337.10    
  27  0.996968     -0.303648E-02 -0.245823      0.245823       2025.73       2025.98    
  28  0.132770      -2.01914      -163.463       163.463       1952.51       2115.97    
  29  0.716038     -0.334023      -27.0413       27.0413       1984.75       2011.79    
  30  0.229552      -1.47162      -119.138       119.138       2092.91       2212.05    
  31  0.236358      -1.44241      -116.772       116.772       2095.76       2212.53    
  32  0.542780     -0.611051      -49.4686       49.4686       1913.70       1963.17    
  33  0.875156     -0.133353      -10.7958       10.7958       2074.00       2084.80    
  34  0.988730     -0.113343E-01 -0.917589      0.917589       2033.10       2034.01    
  35  0.244332      -1.40923      -114.086       114.086       2011.14       2125.23    
  36  0.659246     -0.416659      -33.7313       33.7313       2100.54       2134.27    
  37  0.457872     -0.781166      -63.2406       63.2406       1957.84       2021.08    
  38  0.380652E-01  -3.26846      -264.603       264.603       2096.94       2361.55    
  39  0.358843      -1.02487      -82.9700       82.9700       2164.62       2247.59    
  40  0.846233     -0.166960      -13.5165       13.5165       2153.25       2166.77    
  41  0.359308      -1.02358      -82.8653       82.8653       2101.37       2184.24    
  42  0.533329     -0.628617      -50.8908       50.8908       2122.33       2173.22    
  43  0.645289     -0.438058      -35.4637       35.4637       2198.86       2234.32    
  44  0.311850      -1.16523      -94.3332       94.3332       2118.77       2213.10    
  45  0.270084      -1.30902      -105.974       105.974       2131.53       2237.51    
  46  0.530313     -0.634287      -51.3497       51.3497       2160.71       2212.06    
  47  0.975874     -0.244213E-01  -1.97707       1.97707       2182.87       2184.85    
  48  0.313811      -1.15896      -93.8259       93.8259       2200.82       2294.64    
  49  0.932688     -0.696844E-01  -5.64141       5.64141       2173.41       2179.05    
  50  0.357359      -1.02901      -83.3056       83.3056       2175.09       2258.40    
  51  0.545837     -0.605435      -49.0140       49.0140       2277.30       2326.31    
  52  0.954982     -0.460626E-01  -3.72908       3.72908       2200.27       2204.00    
  53  0.470912     -0.753083      -60.9671       60.9671       2225.97       2286.94    
  54  0.719568     -0.329104      -26.6431       26.6431       2033.22       2059.86    
  55  0.859620     -0.151265      -12.2459       12.2459       1994.14       2006.38    
  56  0.544817     -0.607304      -49.1653       49.1653       2318.03       2367.20    
  57  0.505571E-02  -5.28724      -428.037       428.037       2141.09       2569.12    
  58  0.412350     -0.885884      -71.7182       71.7182       2026.66       2098.37    
loop,thermsimp(1:2)       60   85.6585       40.5816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       2324.43         68.55          1.20         39.60          0.00          0.05        109.40
Just calling func    0   0        109.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2324.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       60
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       61
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      278     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -33.1596       33.1596       1776.18       1809.34    
   2  0.718953     -0.329960      -26.7124       26.7124       1852.82       1879.53    
   3  0.454275     -0.789053      -63.8791       63.8791       1841.83       1905.71    
   4  0.253407E-01  -3.67534      -297.543       297.543       1835.62       2133.16    
   5  0.611947     -0.491110      -39.7586       39.7586       1879.41       1919.17    
   6  0.234016      -1.45237      -117.579       117.579       1904.36       2021.94    
   7  0.359481E-01  -3.32568      -269.236       269.236       1907.59       2176.82    
   8  0.222118E-01  -3.80713      -308.213       308.213       1862.49       2170.71    
   9  0.905838E-01  -2.40148      -194.416       194.416       1886.07       2080.49    
  10  0.791683     -0.233594      -18.9110       18.9110       1913.70       1932.62    
  11  0.557734     -0.583873      -47.2684       47.2684       1952.21       1999.48    
  12  0.936048E-01  -2.36867      -191.760       191.760       1965.45       2157.21    
  13  0.431059     -0.841510      -68.1259       68.1259       1908.00       1976.13    
  14  0.225758      -1.48829      -120.487       120.487       1963.44       2083.93    
  15  0.275181E-01  -3.59291      -290.870       290.870       1922.56       2213.43    
  16  0.802517     -0.220002      -17.8106       17.8106       2002.85       2020.66    
  17  0.423872     -0.858323      -69.4869       69.4869       1994.14       2063.63    
  18  0.300971      -1.20074      -97.2080       97.2080       1984.75       2081.95    
  19  0.479556     -0.734895      -59.4947       59.4947       1966.08       2025.58    
  20  0.621838     -0.475076      -38.4606       38.4606       1925.45       1963.91    
  21  0.397654     -0.922172      -74.6559       74.6559       1957.84       2032.50    
  22  0.664976     -0.408004      -33.0307       33.0307       1929.90       1962.94    
  23  0.288358      -1.24355      -100.674       100.674       2025.73       2126.41    
  24  0.442017     -0.816406      -66.0935       66.0935       2033.10       2099.19    
  25  0.150763E-01  -4.19463      -339.583       339.583       1979.33       2318.92    
  26  0.600886     -0.509350      -41.2353       41.2353       2042.25       2083.49    
  27  0.162927      -1.81446      -146.892       146.892       2010.04       2156.93    
  28  0.932743     -0.696251E-01  -5.63662       5.63662       2033.22       2038.86    
  29  0.997186     -0.281799E-02 -0.228135      0.228135       2007.43       2007.66    
  30  0.418339     -0.871463      -70.5507       70.5507       2074.00       2144.56    
  31  0.694800     -0.364132      -29.4789       29.4789       1913.96       1943.44    
  32  0.852711     -0.159334      -12.8992       12.8992       2026.66       2039.55    
  33  0.624847     -0.470249      -38.0698       38.0698       1952.51       1990.58    
  34  0.427649     -0.849453      -68.7689       68.7689       2011.14       2079.91    
  35  0.149871      -1.89798      -153.654       153.654       2100.54       2254.19    
  36  0.563430     -0.573713      -46.4459       46.4459       2033.28       2079.73    
  37  0.860100     -0.150706      -12.2007       12.2007       2153.25       2165.45    
  38  0.867090E-01  -2.44520      -197.955       197.955       2122.33       2320.29    
  39  0.847848     -0.165054      -13.3622       13.3622       2173.41       2186.77    
  40  0.782599E-01  -2.54772      -206.255       206.255       2101.37       2307.62    
  41  0.697889E-01  -2.66228      -215.529       215.529       2182.87       2398.40    
  42  0.422765     -0.860939      -69.6987       69.6987       2200.27       2269.97    
  43  0.158365      -1.84286      -149.191       149.191       2092.91       2242.10    
  44  0.518935     -0.655976      -53.1056       53.1056       2160.71       2213.82    
  45  0.430406     -0.843027      -68.2486       68.2486       2095.76       2164.01    
  46  0.639805     -0.446592      -36.1546       36.1546       2118.77       2154.92    
  47  0.830453E-01  -2.48837      -201.450       201.450       2198.86       2400.31    
  48  0.639384     -0.447250      -36.2078       36.2078       2131.53       2167.74    
  49  0.833791     -0.181773      -14.7157       14.7157       2164.62       2179.34    
  50  0.453972     -0.789720      -63.9331       63.9331       2175.09       2239.02    
  51  0.542088     -0.612327      -49.5719       49.5719       2225.97       2275.54    
  52  0.271321      -1.30445      -105.604       105.604       2200.82       2306.42    
  53  0.176790      -1.73279      -140.281       140.281       1926.23       2066.52    
  54  0.511778     -0.669865      -54.2300       54.2300       2277.30       2331.53    
  55  0.632948     -0.457366      -37.0269       37.0269       2049.88       2086.91    
  56  0.252444      -1.37657      -111.442       111.442       2096.94       2208.39    
  57  0.726388     -0.319671      -25.8795       25.8795       2318.03       2343.91    
  58  0.483977     -0.725718      -58.7517       58.7517       2324.43       2383.18    
loop,thermsimp(1:2)       61   33.1596       26.7124    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280       2333.78         68.34          1.20         39.13          0.38          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2333.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       61
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       62
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      279     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01  -1.14695       1.14695       1776.18       1777.33    
   2  0.420912     -0.865330      -70.0542       70.0542       1852.82       1922.87    
   3  0.617210     -0.482545      -39.0653       39.0653       1841.83       1880.89    
   4  0.787846     -0.238453      -19.3044       19.3044       1879.41       1898.72    
   5  0.608770     -0.496315      -40.1800       40.1800       1913.70       1953.88    
   6  0.925975     -0.769083E-01  -6.22623       6.22623       1913.96       1920.18    
   7  0.545822     -0.605462      -49.0162       49.0162       1929.90       1978.92    
   8  0.240142      -1.42653      -115.487       115.487       1925.45       2040.94    
   9  0.800257     -0.222822      -18.0389       18.0389       1908.00       1926.04    
  10  0.250149      -1.38570      -112.182       112.182       1952.51       2064.69    
  11  0.814044     -0.205741      -16.6561       16.6561       1952.21       1968.87    
  12  0.897552     -0.108084      -8.75011       8.75011       2007.43       2016.18    
  13  0.807530     -0.213775      -17.3065       17.3065       2002.85       2020.16    
  14  0.369031     -0.996874      -80.7036       80.7036       1904.36       1985.07    
  15  0.892620     -0.113594      -9.19620       9.19620       1966.08       1975.28    
  16  0.992736     -0.729054E-02 -0.590218      0.590218       1957.84       1958.43    
  17  0.264259      -1.33083      -107.739       107.739       2033.22       2140.96    
  18  0.164586      -1.80432      -146.072       146.072       2026.66       2172.73    
  19  0.594739     -0.519633      -42.0677       42.0677       1994.14       2036.21    
  20  0.766319     -0.266156      -21.5471       21.5471       1926.23       1947.78    
  21  0.392663     -0.934804      -75.6786       75.6786       2033.28       2108.96    
  22  0.900399     -0.104917      -8.49376       8.49376       2011.14       2019.64    
  23  0.853164E-01  -2.46139      -199.266       199.266       1886.07       2085.34    
  24  0.753181     -0.283450      -22.9472       22.9472       1984.75       2007.69    
  25  0.801958     -0.220699      -17.8670       17.8670       2042.25       2060.12    
  26  0.840206     -0.174108      -14.0952       14.0952       1963.44       1977.54    
  27  0.899787     -0.105597      -8.54881       8.54881       2049.88       2058.43    
  28  0.555629     -0.587654      -47.5745       47.5745       2033.10       2080.67    
  29  0.117481E-01  -4.44406      -359.776       359.776       2025.73       2385.51    
  30  0.228476      -1.47632      -119.518       119.518       1835.62       1955.14    
  31  0.121877      -2.10474      -170.393       170.393       2074.00       2244.40    
  32  0.475375     -0.743652      -60.2035       60.2035       2118.77       2178.97    
  33  0.208734      -1.56669      -126.834       126.834       2010.04       2136.87    
  34  0.680231     -0.385322      -31.1944       31.1944       1965.45       1996.65    
  35  0.211647      -1.55284      -125.712       125.712       2095.76       2221.47    
  36  0.982763     -0.173870E-01  -1.40760       1.40760       2153.25       2154.66    
  37  0.819904     -0.198568      -16.0754       16.0754       2131.53       2147.61    
  38  0.282339      -1.26465      -102.382       102.382       1862.49       1964.88    
  39  0.391986     -0.936529      -75.8182       75.8182       1907.59       1983.40    
  40  0.218050      -1.52303      -123.300       123.300       2164.62       2287.92    
  41  0.236244      -1.44289      -116.812       116.812       2173.41       2290.22    
  42  0.544673     -0.607570      -49.1868       49.1868       2096.94       2146.13    
  43  0.721937     -0.325818      -26.3771       26.3771       1922.56       1948.94    
  44  0.649728     -0.431202      -34.9086       34.9086       2160.71       2195.62    
  45  0.641823     -0.443443      -35.8996       35.8996       2175.09       2210.99    
  46  0.597293     -0.515347      -41.7207       41.7207       2092.91       2134.63    
  47  0.467405     -0.760558      -61.5722       61.5722       2100.54       2162.11    
  48  0.676900     -0.390232      -31.5919       31.5919       2200.27       2231.86    
  49  0.925913     -0.769750E-01  -6.23164       6.23164       2225.97       2232.20    
  50  0.692551     -0.367374      -29.7414       29.7414       2200.82       2230.56    
  51  0.161390      -1.82393      -147.659       147.659       2101.37       2249.03    
  52  0.513279     -0.666936      -53.9929       53.9929       1979.33       2033.32    
  53  0.379540     -0.968796      -78.4305       78.4305       2122.33       2200.76    
  54  0.557165     -0.584894      -47.3510       47.3510       2277.30       2324.65    
  55  0.459054     -0.778587      -63.0318       63.0318       2318.03       2381.06    
  56  0.466253     -0.763026      -61.7720       61.7720       2324.43       2386.20    
  57  0.635692E-01  -2.75563      -223.086       223.086       2182.87       2405.96    
  58  0.591279     -0.525467      -42.5400       42.5400       2333.78       2376.32    
loop,thermsimp(1:2)       62   1.14695       70.0542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       1798.54         68.74          1.17         39.51          0.02          0.05        109.48
Just calling func    0   0        109.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282       1996.19         68.73          1.15         39.10          0.18          0.05        109.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    1798.5        2.946     -3.001      3.203     -102.6     0.9733E-01
                      0.1194      1.179     -99.70      4.385     0.3099    

                       3.287     -3.141      1.540      6905.      7000.    

                      -2.101      0.000      0.000      0.000     -1.221    



                      -1.822      0.000      0.000      7000.      710.6    

                      -1.503     -8.757     -6.686     -8.179      7.299    

                      -13.22     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1822E-01 0.9756E-01 0.7895E-01 0.8765E-01

                     -0.2486     0.1214     0.1075     0.7100E-01-0.1942E-01



                     -0.8893    -0.6390      0.000    -0.5623E-01 0.2133    

                      0.1369     0.1885    -0.7116     0.7070E-01 0.2517    

                      0.1793     0.7761E-01-0.4059     -1.541      7000.    



                      -1.239     -1.206     -2.142     -1.982    -0.3807    

                     -0.3252      9.248      8.469    -0.1705E+05 -5.644    

                     -0.4067     -2.283      8.677      9.155    -0.1969E+05



                      -6.000     0.5594     0.7282E-01  8.874      9.084    

                     -0.1944E+05 -6.000    -0.7590E-02-0.2648      9.755    

                       8.929    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1798.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       62
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       63
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      281     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01  -1.22500       1.22500       1776.18       1777.40    
   2  0.760415     -0.273890      -22.1733       22.1733       1841.83       1864.00    
   3  0.328612      -1.11288      -90.0948       90.0948       1879.41       1969.51    
   4  0.164880      -1.80254      -145.927       145.927       1913.96       2059.88    
   5  0.706606     -0.347282      -28.1148       28.1148       1852.82       1880.94    
   6  0.832070     -0.183839      -14.8830       14.8830       1908.00       1922.89    
   7  0.231505      -1.46315      -118.452       118.452       1926.23       2044.69    
   8  0.802671E-01  -2.52240      -204.205       204.205       1922.56       2126.77    
   9  0.116349      -2.15116      -174.151       174.151       1913.70       2087.86    
  10  0.874222     -0.134421      -10.8823       10.8823       1835.62       1846.50    
  11  0.729333     -0.315625      -25.5520       25.5520       1957.84       1983.39    
  12  0.301675      -1.19841      -97.0189       97.0189       1862.49       1959.51    
  13  0.496896     -0.699375      -56.6190       56.6190       1952.21       2008.83    
  14  0.692174     -0.367918      -29.7854       29.7854       1966.08       1995.87    
  15  0.717718     -0.331678      -26.8516       26.8516       1963.44       1990.29    
  16  0.867334E-01  -2.44492      -197.932       197.932       1929.90       2127.84    
  17  0.762934     -0.270584      -21.9055       21.9055       1907.59       1929.49    
  18  0.966741     -0.338246E-01  -2.73833       2.73833       1904.36       1907.10    
  19  0.375386     -0.979801      -79.3214       79.3214       1965.45       2044.78    
  20  0.878716     -0.129293      -10.4671       10.4671       1984.75       1995.21    
  21  0.238969      -1.43142      -115.883       115.883       2007.43       2123.31    
  22  0.939578     -0.623249E-01  -5.04561       5.04561       2011.14       2016.19    
  23  0.694828     -0.364091      -29.4756       29.4756       2002.85       2032.33    
  24  0.869149     -0.140241      -11.3534       11.3534       1979.33       1990.69    
  25  0.310010      -1.17115      -94.8125       94.8125       1994.14       2088.95    
  26  0.831753     -0.184219      -14.9138       14.9138       1925.45       1940.37    
  27  0.621050     -0.476344      -38.5632       38.5632       2049.88       2088.45    
  28  0.902274     -0.102837      -8.32536       8.32536       2042.25       2050.58    
  29  0.341345      -1.07486      -87.0173       87.0173       1952.51       2039.53    
  30  0.718647     -0.330385      -26.7468       26.7468       2033.10       2059.84    
  31  0.489532     -0.714305      -57.8277       57.8277       1886.07       1943.90    
  32  0.387793     -0.947282      -76.6888       76.6888       2033.28       2109.97    
  33  0.576785     -0.550285      -44.5492       44.5492       2092.91       2137.46    
  34  0.454048     -0.789552      -63.9195       63.9195       2010.04       2073.96    
  35  0.532728     -0.629744      -50.9820       50.9820       2033.22       2084.20    
  36  0.459832     -0.776895      -62.8948       62.8948       2096.94       2159.84    
  37  0.784910     -0.242187      -19.6066       19.6066       2131.53       2151.14    
  38  0.842297     -0.171622      -13.8939       13.8939       2153.25       2167.14    
  39  0.967556     -0.329823E-01  -2.67014       2.67014       2100.54       2103.21    
  40  0.126414      -2.06819      -167.434       167.434       2026.66       2194.09    
  41  0.407002     -0.898938      -72.7750       72.7750       2118.77       2191.54    
  42  0.903435     -0.101551      -8.22127       8.22127       2160.71       2168.93    
  43  0.430116     -0.843701      -68.3032       68.3032       2122.33       2190.64    
  44  0.675859     -0.391771      -31.7165       31.7165       2175.09       2206.81    
  45  0.444470     -0.810872      -65.6455       65.6455       2095.76       2161.41    
  46  0.728661     -0.316547      -25.6266       25.6266       2200.82       2226.44    
  47  0.143617      -1.94060      -157.105       157.105       2200.27       2357.37    
  48  0.729467E-01  -2.61803      -211.947       211.947       2225.97       2437.92    
  49  0.720547     -0.327745      -26.5331       26.5331       2074.00       2100.54    
  50  0.742905     -0.297187      -24.0592       24.0592       2101.37       2125.43    
  51  0.807330     -0.214023      -17.3266       17.3266       2164.62       2181.95    
  52  0.387442     -0.948190      -76.7623       76.7623       2173.41       2250.17    
  53  0.207045      -1.57482      -127.492       127.492       2277.30       2404.79    
  54  0.823983     -0.193606      -15.6737       15.6737       2333.78       2349.46    
  55  0.950173E-01  -2.35370      -190.547       190.547       2318.03       2508.58    
  56  0.662008     -0.412478      -33.3928       33.3928       2025.73       2059.12    
  57  0.640494E-01  -2.74810      -222.477       222.477       2324.43       2546.90    
  58  0.772515     -0.258104      -20.8953       20.8953       1798.54       1819.43    
loop,thermsimp(1:2)       63   1.22500       22.1733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       2101.82         68.61          1.29         39.02          0.12          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2101.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       63
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       64
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      282     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01  -2.94210       2.94210       1776.18       1779.12    
   2  0.186231      -1.68077      -136.069       136.069       1798.54       1934.61    
   3  0.127308      -2.06115      -166.864       166.864       1835.62       2002.48    
   4  0.305661      -1.18528      -95.9563       95.9563       1841.83       1937.78    
   5  0.685804     -0.377164      -30.5339       30.5339       1852.82       1883.35    
   6  0.713250     -0.337923      -27.3571       27.3571       1904.36       1931.72    
   7  0.562604     -0.575180      -46.5647       46.5647       1908.00       1954.57    
   8  0.410540     -0.890283      -72.0743       72.0743       1907.59       1979.66    
   9  0.667633     -0.404017      -32.7079       32.7079       1925.45       1958.16    
  10  0.111237      -2.19609      -177.788       177.788       1886.07       2063.86    
  11  0.987129     -0.129550E-01  -1.04879       1.04879       1862.49       1863.54    
  12  0.525481     -0.643442      -52.0909       52.0909       1879.41       1931.51    
  13  0.740553     -0.300358      -24.3160       24.3160       1957.84       1982.16    
  14  0.456748E-01  -3.08621      -249.849       249.849       1963.44       2213.29    
  15  0.831796     -0.184168      -14.9097       14.9097       1979.33       1994.24    
  16  0.798422     -0.225118      -18.2248       18.2248       1984.75       2002.97    
  17  0.985535     -0.145708E-01  -1.17960       1.17960       1966.08       1967.26    
  18  0.323340      -1.12905      -91.4041       91.4041       1952.21       2043.62    
  19  0.745026     -0.294336      -23.8285       23.8285       2011.14       2034.97    
  20  0.711871     -0.339858      -27.5138       27.5138       2002.85       2030.37    
  21  0.232875      -1.45725      -117.974       117.974       1952.51       2070.48    
  22  0.118192      -2.13545      -172.879       172.879       1926.23       2099.11    
  23  0.310641      -1.16912      -94.6477       94.6477       1965.45       2060.10    
  24  0.220899      -1.51005      -122.249       122.249       2042.25       2164.50    
  25  0.487797     -0.717856      -58.1152       58.1152       2025.73       2083.85    
  26  0.278848      -1.27709      -103.389       103.389       2033.10       2136.48    
  27  0.159355      -1.83662      -148.687       148.687       1913.96       2062.64    
  28  0.473156     -0.748329      -60.5822       60.5822       2010.04       2070.62    
  29  0.358980      -1.02449      -82.9391       82.9391       2033.22       2116.16    
  30  0.873266     -0.135515      -10.9708       10.9708       1913.70       1924.68    
  31  0.168201      -1.78260      -144.313       144.313       2049.88       2194.20    
  32  0.492581     -0.708096      -57.3251       57.3251       1994.14       2051.46    
  33  0.878329     -0.129734      -10.5029       10.5029       2074.00       2084.51    
  34  0.266147      -1.32371      -107.163       107.163       2100.54       2207.70    
  35  0.510485     -0.672394      -54.4348       54.4348       2033.28       2087.72    
  36  0.810074     -0.210630      -17.0519       17.0519       2007.43       2024.48    
  37  0.950614     -0.506467E-01  -4.10019       4.10019       2101.37       2105.47    
  38  0.329006      -1.11168      -89.9979       89.9979       1922.56       2012.56    
  39  0.934893E-01  -2.36991      -191.860       191.860       1929.90       2121.76    
  40  0.686671     -0.375900      -30.4316       30.4316       2092.91       2123.34    
  41  0.888060     -0.118716      -9.61087       9.61087       2131.53       2141.14    
  42  0.749618     -0.288192      -23.3310       23.3310       2096.94       2120.27    
  43  0.433754     -0.835279      -67.6214       67.6214       2095.76       2163.38    
  44  0.630341     -0.461494      -37.3610       37.3610       2153.25       2190.61    
  45  0.569388     -0.563194      -45.5943       45.5943       2160.71       2206.31    
  46  0.965872     -0.347242E-01  -2.81115       2.81115       2164.62       2167.43    
  47  0.797995     -0.225653      -18.2681       18.2681       2122.33       2140.60    
  48  0.716091     -0.333948      -27.0353       27.0353       2118.77       2145.80    
  49  0.339849      -1.07925      -87.3728       87.3728       2026.66       2114.03    
  50  0.202757      -1.59575      -129.186       129.186       2175.09       2304.28    
  51  0.266068      -1.32400      -107.187       107.187       2200.82       2308.00    
  52  0.985546E-01  -2.31715      -187.588       187.588       2173.41       2361.00    
  53  0.751309     -0.285938      -23.1486       23.1486       2333.78       2356.93    
  54  0.846042     -0.167187      -13.5349       13.5349       2200.27       2213.81    
  55  0.714380     -0.336340      -27.2290       27.2290       2277.30       2304.53    
  56  0.873273     -0.135507      -10.9702       10.9702       2225.97       2236.94    
  57  0.373211     -0.985610      -79.7917       79.7917       2318.03       2397.82    
  58  0.618869     -0.479862      -38.8480       38.8480       2101.82       2140.67    
loop,thermsimp(1:2)       64   2.94210       136.069    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284       2337.92         68.63          1.20         38.93          0.29          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2337.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       64
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       65
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      283     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -69.3577       69.3577       1776.18       1845.54    
   2  0.350039      -1.04971      -84.9810       84.9810       1862.49       1947.47    
   3  0.872911     -0.135921      -11.0037       11.0037       1852.82       1863.82    
   4  0.829005     -0.187529      -15.1817       15.1817       1913.70       1928.89    
   5  0.201827      -1.60035      -129.559       129.559       1879.41       2008.97    
   6  0.735791     -0.306809      -24.8383       24.8383       1904.36       1929.20    
   7  0.985788     -0.143135E-01  -1.15877       1.15877       1798.54       1799.70    
   8  0.962727     -0.379858E-01  -3.07520       3.07520       1841.83       1844.90    
   9  0.796954     -0.226958      -18.3738       18.3738       1908.00       1926.38    
  10  0.563149     -0.574211      -46.4862       46.4862       1925.45       1971.94    
  11  0.776846     -0.252513      -20.4426       20.4426       1966.08       1986.53    
  12  0.921010     -0.822839E-01  -6.66143       6.66143       1907.59       1914.25    
  13  0.884938     -0.122238      -9.89600       9.89600       1957.84       1967.74    
  14  0.850974     -0.161373      -13.0642       13.0642       1979.33       1992.40    
  15  0.391065     -0.938882      -76.0087       76.0087       1835.62       1911.63    
  16  0.150921      -1.89100      -153.089       153.089       1984.75       2137.84    
  17  0.295162      -1.22023      -98.7858       98.7858       1922.56       2021.35    
  18  0.662567     -0.411634      -33.3245       33.3245       2007.43       2040.75    
  19  0.893994     -0.112056      -9.07167       9.07167       2002.85       2011.92    
  20  0.103282      -2.27029      -183.795       183.795       2011.14       2194.94    
  21  0.416341     -0.876251      -70.9383       70.9383       1952.21       2023.15    
  22  0.986101E-01  -2.31658      -187.543       187.543       1994.14       2181.68    
  23  0.617817E-01  -2.78415      -225.395       225.395       1965.45       2190.85    
  24  0.371945     -0.989010      -80.0669       80.0669       1913.96       1994.02    
  25  0.884755     -0.122444      -9.91268       9.91268       1886.07       1895.99    
  26  0.584237     -0.537449      -43.5101       43.5101       1952.51       1996.02    
  27  0.239981      -1.42719      -115.541       115.541       2010.04       2125.58    
  28  0.106477      -2.23982      -181.329       181.329       2025.73       2207.06    
  29  0.142954      -1.94523      -157.479       157.479       2074.00       2231.48    
  30  0.802284     -0.220292      -17.8341       17.8341       2033.28       2051.12    
  31  0.373571     -0.984648      -79.7138       79.7138       1926.23       2005.95    
  32  0.617091     -0.482739      -39.0809       39.0809       2101.37       2140.45    
  33  0.813617     -0.206266      -16.6986       16.6986       2026.66       2043.35    
  34  0.219787E-01  -3.81768      -309.067       309.067       2033.22       2342.29    
  35  0.398995     -0.918807      -74.3836       74.3836       2096.94       2171.33    
  36  0.906985     -0.976296E-01  -7.90376       7.90376       1929.90       1937.81    
  37  0.259146E-01  -3.65295      -295.730       295.730       2092.91       2388.64    
  38  0.347543      -1.05687      -85.5605       85.5605       2033.10       2118.66    
  39  0.879549     -0.128346      -10.3904       10.3904       2122.33       2132.72    
  40  0.618015     -0.481242      -38.9597       38.9597       2101.82       2140.78    
  41  0.173348      -1.75246      -141.873       141.873       2131.53       2273.41    
  42  0.324418      -1.12572      -91.1346       91.1346       2118.77       2209.90    
  43  0.426503     -0.852135      -68.9860       68.9860       2095.76       2164.75    
  44  0.672650     -0.396530      -32.1018       32.1018       2042.25       2074.36    
  45  0.500711     -0.691727      -55.9999       55.9999       2164.62       2220.62    
  46  0.457446     -0.782097      -63.3159       63.3159       2153.25       2216.57    
  47  0.408507     -0.895245      -72.4761       72.4761       2049.88       2122.36    
  48  0.649058     -0.432234      -34.9922       34.9922       2160.71       2195.70    
  49  0.275220      -1.29018      -104.449       104.449       2100.54       2204.99    
  50  0.706820     -0.346979      -28.0903       28.0903       1963.44       1991.53    
  51  0.596044     -0.517441      -41.8903       41.8903       2200.27       2242.16    
  52  0.362601      -1.01445      -82.1267       82.1267       2225.97       2308.10    
  53  0.934637     -0.675969E-01  -5.47242       5.47242       2175.09       2180.56    
  54  0.724055     -0.322888      -26.1399       26.1399       2277.30       2303.44    
  55  0.871040     -0.138067      -11.1774       11.1774       2200.82       2211.99    
  56  0.722457     -0.325097      -26.3187       26.3187       2333.78       2360.10    
  57  0.840721     -0.173495      -14.0456       14.0456       2173.41       2187.46    
  58  0.702714     -0.352805      -28.5619       28.5619       2337.92       2366.49    
loop,thermsimp(1:2)       65   69.3577       84.9810    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       2121.43         68.69          1.18         39.01          0.24          0.05        109.16
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2121.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       65
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       66
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      284     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -60.4115       60.4115       1798.54       1858.95    
   2  0.162949E-01  -4.11691      -333.291       333.291       1841.83       2175.12    
   3  0.560104     -0.579632      -46.9251       46.9251       1776.18       1823.10    
   4  0.583629     -0.538490      -43.5943       43.5943       1852.82       1896.41    
   5  0.794243     -0.230366      -18.6497       18.6497       1886.07       1904.72    
   6  0.183626E-01  -3.99744      -323.619       323.619       1835.62       2159.24    
   7  0.642495     -0.442397      -35.8150       35.8150       1907.59       1943.40    
   8  0.611061E-02  -5.09773      -412.695       412.695       1908.00       2320.70    
   9  0.974115E-01  -2.32881      -188.533       188.533       1913.70       2102.24    
  10  0.817249E-01  -2.50440      -202.748       202.748       1904.36       2107.11    
  11  0.644422     -0.439401      -35.5724       35.5724       1929.90       1965.48    
  12  0.378181     -0.972383      -78.7209       78.7209       1862.49       1941.21    
  13  0.105422      -2.24978      -182.135       182.135       1957.84       2139.98    
  14  0.713647     -0.337367      -27.3121       27.3121       1925.45       1952.77    
  15  0.602100     -0.507333      -41.0719       41.0719       1966.08       2007.16    
  16  0.746624     -0.292194      -23.6551       23.6551       1963.44       1987.10    
  17  0.687673     -0.374442      -30.3136       30.3136       1979.33       2009.65    
  18  0.356323      -1.03192      -83.5407       83.5407       1913.96       1997.50    
  19  0.631203     -0.460128      -37.2505       37.2505       1952.51       1989.76    
  20  0.348432      -1.05431      -85.3536       85.3536       1926.23       2011.59    
  21  0.200848      -1.60521      -129.952       129.952       1879.41       2009.37    
  22  0.863860     -0.146345      -11.8476       11.8476       2002.85       2014.70    
  23  0.278415      -1.27864      -103.515       103.515       1922.56       2026.08    
  24  0.871038     -0.138069      -11.1776       11.1776       1952.21       1963.39    
  25  0.581010     -0.542987      -43.9584       43.9584       2007.43       2051.39    
  26  0.960519     -0.402815E-01  -3.26105       3.26105       2026.66       2029.92    
  27  0.104828      -2.25543      -182.592       182.592       2033.28       2215.88    
  28  0.907238     -0.973501E-01  -7.88114       7.88114       2042.25       2050.14    
  29  0.685005     -0.378330      -30.6283       30.6283       2033.10       2063.72    
  30  0.239566E-01  -3.73151      -302.091       302.091       2049.88       2351.97    
  31  0.643900     -0.440211      -35.6380       35.6380       2010.04       2045.68    
  32  0.526819     -0.640898      -51.8850       51.8850       2122.33       2174.22    
  33  0.463387     -0.769192      -62.2712       62.2712       1984.75       2047.02    
  34  0.847158E-01  -2.46845      -199.838       199.838       2101.37       2301.21    
  35  0.134368E-01  -4.30976      -348.904       348.904       2101.82       2450.72    
  36  0.141068      -1.95851      -158.554       158.554       2095.76       2254.31    
  37  0.239867      -1.42767      -115.579       115.579       2096.94       2212.52    
  38  0.317049      -1.14870      -92.9948       92.9948       2175.09       2268.09    
  39  0.925847     -0.770459E-01  -6.23738       6.23738       1994.14       2000.38    
  40  0.939258     -0.626649E-01  -5.07314       5.07314       2173.41       2178.48    
  41  0.111598      -2.19286      -177.526       177.526       1965.45       2142.98    
  42  0.357545      -1.02849      -83.2634       83.2634       2011.14       2094.41    
  43  0.902640     -0.102432      -8.29254       8.29254       2160.71       2169.00    
  44  0.914421     -0.894640E-01  -7.24271       7.24271       2100.54       2107.78    
  45  0.320420      -1.13812      -92.1385       92.1385       2025.73       2117.87    
  46  0.341333      -1.07490      -87.0201       87.0201       2118.77       2205.79    
  47  0.509727     -0.673879      -54.5550       54.5550       2200.82       2255.37    
  48  0.130581E-02  -6.64093      -537.627       537.627       2153.25       2690.88    
  49  0.105413      -2.24987      -182.142       182.142       2164.62       2346.77    
  50  0.743306     -0.296647      -24.0155       24.0155       2074.00       2098.02    
  51  0.114013      -2.17144      -175.793       175.793       2200.27       2376.06    
  52  0.225326      -1.49021      -120.642       120.642       2131.53       2252.18    
  53  0.131158      -2.03135      -164.451       164.451       2277.30       2441.75    
  54  0.886877     -0.120049      -9.71875       9.71875       2225.97       2235.69    
  55  0.202581      -1.59661      -129.257       129.257       2033.22       2162.48    
  56  0.890722     -0.115722      -9.36850       9.36850       2333.78       2343.15    
  57  0.154728      -1.86608      -151.072       151.072       2337.92       2489.00    
  58  0.246051      -1.40222      -113.519       113.519       2121.43       2234.95    
loop,thermsimp(1:2)       66   60.4115       333.291    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       1795.34         68.66          1.18         39.31          0.09          0.05        109.29
Just calling func    0   0        109.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287       2074.49         68.50          1.19         39.31          0.15          0.05        109.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1795.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       66
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       67
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      286
neval,tstepnext:      286     286

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -27.5884       27.5884       1776.18       1803.77    
   2  0.492413     -0.708438      -57.3528       57.3528       1798.54       1855.89    
   3  0.156563      -1.85430      -150.118       150.118       1852.82       2002.94    
   4  0.185270      -1.68594      -136.488       136.488       1886.07       2022.56    
   5  0.685983     -0.376903      -30.5128       30.5128       1862.49       1893.01    
   6  0.518581     -0.656659      -53.1609       53.1609       1907.59       1960.75    
   7  0.430667     -0.842421      -68.1996       68.1996       1925.45       1993.65    
   8  0.748228     -0.290047      -23.4813       23.4813       1952.21       1975.69    
   9  0.348167      -1.05507      -85.4152       85.4152       1929.90       2015.32    
  10  0.281980E-01  -3.56850      -288.894       288.894       1963.44       2252.34    
  11  0.670749     -0.399360      -32.3309       32.3309       1952.51       1984.84    
  12  0.225031      -1.49152      -120.748       120.748       1913.96       2034.71    
  13  0.258016      -1.35474      -109.675       109.675       1994.14       2103.81    
  14  0.122388      -2.10056      -170.054       170.054       1966.08       2136.14    
  15  0.556210     -0.586609      -47.4899       47.4899       1879.41       1926.90    
  16  0.938933     -0.630108E-01  -5.10115       5.10115       1979.33       1984.43    
  17  0.440352     -0.820180      -66.3990       66.3990       1926.23       1992.63    
  18  0.779048     -0.249683      -20.2135       20.2135       2002.85       2023.07    
  19  0.929725     -0.728667E-01  -5.89904       5.89904       1922.56       1928.46    
  20  0.330740      -1.10642      -89.5724       89.5724       2026.66       2116.23    
  21  0.214890      -1.53763      -124.481       124.481       2010.04       2134.52    
  22  0.363221      -1.01274      -81.9883       81.9883       1984.75       2066.73    
  23  0.681309     -0.383740      -31.0663       31.0663       2042.25       2073.32    
  24  0.107313      -2.23200      -180.696       180.696       2007.43       2188.12    
  25  0.622524     -0.473973      -38.3713       38.3713       2033.10       2071.47    
  26  0.532378     -0.630402      -51.0352       51.0352       2011.14       2062.18    
  27  0.298562      -1.20878      -97.8587       97.8587       2074.00       2171.86    
  28  0.432099     -0.839100      -67.9307       67.9307       1913.70       1981.64    
  29  0.243978      -1.41068      -114.204       114.204       1904.36       2018.57    
  30  0.581243     -0.542587      -43.9260       43.9260       2100.54       2144.47    
  31  0.897127E-01  -2.41114      -195.198       195.198       2025.73       2220.93    
  32  0.738124     -0.303644      -24.5820       24.5820       1957.84       1982.42    
  33  0.462727     -0.770619      -62.3867       62.3867       1965.45       2027.84    
  34  0.984641E-01  -2.31806      -187.663       187.663       1835.62       2023.28    
  35  0.641923     -0.443287      -35.8870       35.8870       2033.22       2069.11    
  36  0.334628      -1.09474      -88.6262       88.6262       2160.71       2249.34    
  37  0.482851     -0.728048      -58.9403       58.9403       2122.33       2181.27    
  38  0.826279     -0.190822      -15.4483       15.4483       1841.83       1857.28    
  39  0.966417     -0.341596E-01  -2.76545       2.76545       2173.41       2176.18    
  40  0.236833      -1.44040      -116.610       116.610       2118.77       2235.38    
  41  0.274744      -1.29192      -104.589       104.589       2096.94       2201.53    
  42  0.310307      -1.17019      -94.7348       94.7348       2033.28       2128.02    
  43  0.697298     -0.360543      -29.1883       29.1883       2121.43       2150.61    
  44  0.239072      -1.43099      -115.848       115.848       2225.97       2341.82    
  45  0.809729     -0.211055      -17.0863       17.0863       2131.53       2148.62    
  46  0.651880     -0.427895      -34.6409       34.6409       2095.76       2130.40    
  47  0.515020     -0.663550      -53.7188       53.7188       2200.82       2254.54    
  48  0.359059      -1.02427      -82.9214       82.9214       2175.09       2258.01    
  49  0.516010E-02  -5.26680      -426.382       426.382       2101.37       2527.75    
  50  0.321807      -1.13380      -91.7888       91.7888       1908.00       1999.79    
  51  0.787972     -0.238293      -19.2914       19.2914       2333.78       2353.08    
  52  0.842264     -0.171662      -13.8972       13.8972       2164.62       2178.52    
  53  0.201829      -1.60034      -129.558       129.558       2049.88       2179.44    
  54  0.650136     -0.430573      -34.8578       34.8578       2200.27       2235.13    
  55  0.498155     -0.696844      -56.4141       56.4141       2277.30       2333.71    
  56  0.780214E-01  -2.55077      -206.502       206.502       2101.82       2308.32    
  57  0.840777     -0.173429      -14.0402       14.0402       2337.92       2351.96    
  58  0.514128     -0.665282      -53.8590       53.8590       1795.34       1849.20    
loop,thermsimp(1:2)       67   27.5884       57.3528    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288       1962.55         68.46          1.23         39.25          0.29          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1962.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    80.9567               286
loop is:       67
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    80.9567               286
loop is:       68
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    40.4783               343

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      287     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -21.0119       21.0119       1776.18       1797.19    
   2  0.204294      -1.58819      -64.2874       64.2874       1795.34       1859.63    
   3  0.902141     -0.102985      -4.16864       4.16864       1798.54       1802.71    
   4  0.317306      -1.14789      -46.4647       46.4647       1841.83       1888.29    
   5  0.914914E-01  -2.39151      -96.8043       96.8043       1862.49       1959.30    
   6  0.362439      -1.01490      -41.0814       41.0814       1879.41       1920.50    
   7  0.284546      -1.25686      -50.8755       50.8755       1922.56       1973.44    
   8  0.752727     -0.284053      -11.4980       11.4980       1907.59       1919.08    
   9  0.972148     -0.282475E-01  -1.14341       1.14341       1952.21       1953.36    
  10  0.312417      -1.16342      -47.0931       47.0931       1913.70       1960.80    
  11  0.772549E-01  -2.56064      -103.651       103.651       1957.84       2061.49    
  12  0.190763      -1.65672      -67.0614       67.0614       1979.33       2046.39    
  13  0.829036     -0.187492      -7.58937       7.58937       1952.51       1960.10    
  14  0.309766      -1.17194      -47.4381       47.4381       1926.23       1973.67    
  15  0.691616     -0.368724      -14.9253       14.9253       1925.45       1940.38    
  16  0.177510      -1.72873      -69.9761       69.9761       1908.00       1977.98    
  17  0.848561     -0.164214      -6.64709       6.64709       1852.82       1859.47    
  18  0.464945     -0.765836      -30.9997       30.9997       1929.90       1960.90    
  19  0.626682     -0.467316      -18.9162       18.9162       1904.36       1923.28    
  20  0.451266     -0.795699      -32.2086       32.2086       1886.07       1918.28    
  21  0.161179E-01  -4.12783      -167.087       167.087       2002.85       2169.94    
  22  0.848853     -0.163869      -6.63316       6.63316       1835.62       1842.25    
  23  0.565946     -0.569256      -23.0425       23.0425       1965.45       1988.50    
  24  0.798567     -0.224937      -9.10507       9.10507       1913.96       1923.06    
  25  0.282371      -1.26453      -51.1862       51.1862       2011.14       2062.33    
  26  0.887219     -0.119663      -4.84377       4.84377       1984.75       1989.59    
  27  0.311981      -1.16481      -47.1496       47.1496       2033.22       2080.37    
  28  0.454937     -0.787596      -31.8806       31.8806       2033.10       2064.98    
  29  0.200774E-01  -3.90816      -158.196       158.196       2042.25       2200.45    
  30  0.549692     -0.598397      -24.2221       24.2221       1994.14       2018.36    
  31  0.928164     -0.745470E-01  -3.01754       3.01754       2026.66       2029.67    
  32  0.876026     -0.132360      -5.35770       5.35770       2033.28       2038.64    
  33  0.360538      -1.02016      -41.2943       41.2943       2095.76       2137.05    
  34  0.810484     -0.210124      -8.50546       8.50546       2010.04       2018.54    
  35  0.350387      -1.04872      -42.4503       42.4503       1966.08       2008.53    
  36  0.609257     -0.495514      -20.0576       20.0576       2100.54       2120.60    
  37  0.847473     -0.165497      -6.69902       6.69902       2131.53       2138.23    
  38  0.459433     -0.777763      -31.4825       31.4825       2121.43       2152.91    
  39  0.213778      -1.54282      -62.4507       62.4507       2074.00       2136.46    
  40  0.983077     -0.170677E-01 -0.690870      0.690870       2173.41       2174.10    
  41  0.719533     -0.329153      -13.3236       13.3236       2164.62       2177.95    
  42  0.317292      -1.14793      -46.4665       46.4665       2049.88       2096.35    
  43  0.300670      -1.20174      -48.6445       48.6445       2122.33       2170.98    
  44  0.486388     -0.720748      -29.1747       29.1747       2007.43       2036.60    
  45  0.309580      -1.17254      -47.4623       47.4623       2096.94       2144.41    
  46  0.111802      -2.19103      -88.6892       88.6892       2025.73       2114.42    
  47  0.913484     -0.904897E-01  -3.66287       3.66287       2200.27       2203.93    
  48  0.438377     -0.824676      -33.3815       33.3815       2118.77       2152.15    
  49  0.773114     -0.257329      -10.4163       10.4163       2160.71       2171.13    
  50  0.248259      -1.39328      -56.3978       56.3978       1963.44       2019.84    
  51  0.502855     -0.687454      -27.8270       27.8270       2200.82       2228.64    
  52  0.827610E-01  -2.49180      -100.864       100.864       2175.09       2275.95    
  53  0.528759     -0.637222      -25.7937       25.7937       2101.82       2127.61    
  54  0.711957     -0.339738      -13.7520       13.7520       2277.30       2291.05    
  55  0.703963     -0.351029      -14.2091       14.2091       2225.97       2240.18    
  56  0.419247     -0.869295      -35.1876       35.1876       2337.92       2373.11    
  57  0.939830     -0.620566E-01  -2.51195       2.51195       2333.78       2336.30    
  58  0.401337     -0.912955      -36.9549       36.9549       1962.55       1999.51    
loop,thermsimp(1:2)       68   21.0119       64.2874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289       2303.26         68.70          1.26         38.98          0.26          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2303.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       68
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       69
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      288     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -33.1744       33.1744       1776.18       1809.35    
   2  0.752309     -0.284608      -11.5204       11.5204       1798.54       1810.06    
   3  0.209108      -1.56490      -63.3447       63.3447       1835.62       1898.96    
   4  0.842922     -0.170881      -6.91699       6.91699       1852.82       1859.74    
   5  0.161148      -1.82543      -73.8903       73.8903       1795.34       1869.23    
   6  0.601748     -0.507917      -20.5596       20.5596       1841.83       1862.39    
   7  0.890912     -0.115510      -4.67565       4.67565       1886.07       1890.75    
   8  0.631939     -0.458963      -18.5781       18.5781       1907.59       1926.16    
   9  0.144759E-01  -4.23527      -171.437       171.437       1879.41       2050.85    
  10  0.653698     -0.425110      -17.2077       17.2077       1913.96       1931.16    
  11  0.401463     -0.912639      -36.9421       36.9421       1904.36       1941.31    
  12  0.906126     -0.985765E-01  -3.99021       3.99021       1925.45       1929.44    
  13  0.480601E-01  -3.03530      -122.864       122.864       1952.21       2075.08    
  14  0.264260      -1.33082      -53.8694       53.8694       1862.49       1916.36    
  15  0.586033     -0.534379      -21.6308       21.6308       1952.51       1974.14    
  16  0.323072      -1.12988      -45.7356       45.7356       1913.70       1959.44    
  17  0.785147     -0.241884      -9.79105       9.79105       1929.90       1939.70    
  18  0.139165      -1.97210      -79.8272       79.8272       1922.56       2002.39    
  19  0.105818E-01  -4.54862      -184.120       184.120       1926.23       2110.36    
  20  0.896943     -0.108763      -4.40256       4.40256       1908.00       1912.41    
  21  0.854239     -0.157544      -6.37711       6.37711       1965.45       1971.83    
  22  0.566003     -0.569157      -23.0385       23.0385       1984.75       2007.79    
  23  0.566387     -0.568477      -23.0110       23.0110       1962.55       1985.56    
  24  0.414905     -0.879707      -35.6091       35.6091       1966.08       2001.69    
  25  0.173772      -1.75001      -70.8376       70.8376       1994.14       2064.98    
  26  0.884308E-01  -2.42554      -98.1816       98.1816       2010.04       2108.22    
  27  0.417457     -0.873573      -35.3608       35.3608       1963.44       1998.80    
  28  0.334615      -1.09477      -44.3146       44.3146       2026.66       2070.97    
  29  0.706024E-01  -2.65069      -107.296       107.296       2007.43       2114.72    
  30  0.996422     -0.358418E-02 -0.145081      0.145081       2033.28       2033.43    
  31  0.894500     -0.111491      -4.51296       4.51296       1979.33       1983.84    
  32  0.827855     -0.188917      -7.64704       7.64704       1957.84       1965.49    
  33  0.434964     -0.832492      -33.6979       33.6979       2011.14       2044.84    
  34  0.121450      -2.10825      -85.3385       85.3385       2033.10       2118.43    
  35  0.498977     -0.695195      -28.1403       28.1403       2033.22       2061.36    
  36  0.117961      -2.13740      -86.5184       86.5184       2049.88       2136.40    
  37  0.309211      -1.17373      -47.5106       47.5106       2025.73       2073.24    
  38  0.786265     -0.240461      -9.73348       9.73348       2100.54       2110.27    
  39  0.614330     -0.487222      -19.7219       19.7219       2101.82       2121.54    
  40  0.820857     -0.197407      -7.99069       7.99069       2074.00       2082.00    
  41  0.670448     -0.399809      -16.1836       16.1836       2095.76       2111.94    
  42  0.742403     -0.297863      -12.0570       12.0570       2131.53       2143.59    
  43  0.760912E-01  -2.57582      -104.265       104.265       2096.94       2201.21    
  44  0.709677     -0.342945      -13.8818       13.8818       2118.77       2132.65    
  45  0.943449     -0.582133E-01  -2.35638       2.35638       2121.43       2123.78    
  46  0.176370      -1.73517      -70.2369       70.2369       2002.85       2073.09    
  47  0.866890     -0.142843      -5.78206       5.78206       2122.33       2128.12    
  48  0.711056     -0.341004      -13.8033       13.8033       2160.71       2174.52    
  49  0.929667E-01  -2.37551      -96.1568       96.1568       2173.41       2269.57    
  50  0.960091     -0.407270E-01  -1.64856       1.64856       2164.62       2166.27    
  51  0.948380     -0.530000E-01  -2.14535       2.14535       2042.25       2044.40    
  52  0.257449      -1.35693      -54.9264       54.9264       2200.27       2255.20    
  53  0.117236      -2.14357      -86.7680       86.7680       2200.82       2287.59    
  54  0.218340E-01  -3.82429      -154.801       154.801       2225.97       2380.77    
  55  0.523421     -0.647370      -26.2045       26.2045       2175.09       2201.29    
  56  0.577211     -0.549547      -22.2447       22.2447       2277.30       2299.54    
  57  0.288682      -1.24243      -50.2915       50.2915       2333.78       2384.08    
  58  0.672927E-01  -2.69870      -109.239       109.239       2303.26       2412.50    
loop,thermsimp(1:2)       69   33.1744       11.5204    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       2337.92         68.55          1.16         38.99          0.45          0.05        109.20
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2337.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       69
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       70
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      289     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.472711      0.472711       1776.18       1776.65    
   2  0.482301     -0.729186      -29.5162       29.5162       1798.54       1828.05    
   3  0.546964     -0.603372      -24.4235       24.4235       1852.82       1877.24    
   4  0.543918     -0.608957      -24.6496       24.6496       1841.83       1866.48    
   5  0.427641     -0.849472      -34.3852       34.3852       1795.34       1829.73    
   6  0.498345     -0.696462      -28.1916       28.1916       1886.07       1914.27    
   7  0.989308     -0.107494E-01 -0.435116      0.435116       1835.62       1836.05    
   8  0.658822     -0.417302      -16.8917       16.8917       1908.00       1924.90    
   9  0.917808     -0.857673E-01  -3.47172       3.47172       1862.49       1865.97    
  10  0.914490E-04  -9.29973      -376.437       376.437       1907.59       2284.02    
  11  0.989901     -0.101499E-01 -0.410851      0.410851       1925.45       1925.86    
  12  0.558183     -0.583069      -23.6017       23.6017       1913.96       1937.56    
  13  0.706994     -0.346733      -14.0352       14.0352       1929.90       1943.94    
  14  0.599152     -0.512240      -20.7346       20.7346       1904.36       1925.10    
  15  0.845909     -0.167343      -6.77376       6.77376       1913.70       1920.48    
  16  0.655384     -0.422534      -17.1035       17.1035       1957.84       1974.94    
  17  0.412232E-01  -3.18875      -129.075       129.075       1965.45       2094.53    
  18  0.495401     -0.702387      -28.4315       28.4315       1952.51       1980.94    
  19  0.378829     -0.970671      -39.2911       39.2911       1979.33       2018.62    
  20  0.653665E-02  -5.03033      -203.619       203.619       1962.55       2166.17    
  21  0.782670     -0.245045      -9.91900       9.91900       1963.44       1973.36    
  22  0.945547     -0.559921E-01  -2.26647       2.26647       1966.08       1968.35    
  23  0.969857     -0.306063E-01  -1.23889       1.23889       1922.56       1923.80    
  24  0.822249     -0.195712      -7.92208       7.92208       1984.75       1992.67    
  25  0.265012E-01  -3.63056      -146.959       146.959       2033.28       2180.24    
  26  0.360432E-01  -3.32304      -134.511       134.511       2042.25       2176.76    
  27  0.796418     -0.227631      -9.21411       9.21411       2011.14       2020.36    
  28  0.292313E-01  -3.53252      -142.990       142.990       1879.41       2022.40    
  29  0.227321      -1.48139      -59.9643       59.9643       2033.22       2093.19    
  30  0.812637     -0.207471      -8.39806       8.39806       1994.14       2002.54    
  31  0.930544     -0.719857E-01  -2.91386       2.91386       2026.66       2029.57    
  32  0.674873     -0.393231      -15.9173       15.9173       2002.85       2018.77    
  33  0.264030      -1.33169      -53.9046       53.9046       2025.73       2079.64    
  34  0.807464     -0.213856      -8.65655       8.65655       1952.21       1960.87    
  35  0.653731     -0.425060      -17.2057       17.2057       2074.00       2091.21    
  36  0.858536     -0.152527      -6.17404       6.17404       2010.04       2016.21    
  37  0.538887     -0.618250      -25.0257       25.0257       2100.54       2125.57    
  38  0.468049     -0.759182      -30.7304       30.7304       1926.23       1956.97    
  39  0.401324     -0.912987      -36.9562       36.9562       2095.76       2132.72    
  40  0.363356      -1.01237      -40.9792       40.9792       2007.43       2048.41    
  41  0.924933     -0.780342E-01  -3.15869       3.15869       2033.10       2036.25    
  42  0.797289     -0.226538      -9.16988       9.16988       2101.82       2110.99    
  43  0.200097      -1.60895      -65.1276       65.1276       2121.43       2186.55    
  44  0.686219     -0.376559      -15.2425       15.2425       2122.33       2137.58    
  45  0.895629     -0.110230      -4.46191       4.46191       2118.77       2123.23    
  46  0.331830      -1.10313      -44.6529       44.6529       2049.88       2094.54    
  47  0.967018     -0.335379E-01  -1.35756       1.35756       2131.53       2132.89    
  48  0.268282      -1.31572      -53.2580       53.2580       2164.62       2217.88    
  49  0.472399     -0.749931      -30.3560       30.3560       2160.71       2191.07    
  50  0.399276E-01  -3.22069      -130.368       130.368       2096.94       2227.31    
  51  0.956493     -0.444820E-01  -1.80056       1.80056       2175.09       2176.89    
  52  0.444161     -0.811569      -32.8509       32.8509       2200.27       2233.12    
  53  0.308942      -1.17460      -47.5459       47.5459       2173.41       2220.96    
  54  0.602319     -0.506968      -20.5212       20.5212       2200.82       2221.34    
  55  0.533797     -0.627740      -25.4099       25.4099       2277.30       2302.71    
  56  0.990519     -0.952607E-02 -0.385600      0.385600       2225.97       2226.36    
  57  0.931261     -0.712158E-01  -2.88270       2.88270       2333.78       2336.67    
  58  0.185125      -1.68672      -68.2757       68.2757       2337.92       2406.20    
loop,thermsimp(1:2)       70  0.472711       29.5162    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291       2303.26         68.64          1.21         39.09          0.24          0.05        109.23
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2303.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       70
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       71
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      290     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -6.09504       6.09504       1776.18       1782.27    
   2  0.573661     -0.555717      -22.4945       22.4945       1798.54       1821.03    
   3  0.499290     -0.694569      -28.1150       28.1150       1795.34       1823.46    
   4  0.677563     -0.389253      -15.7563       15.7563       1835.62       1851.37    
   5  0.476566     -0.741149      -30.0005       30.0005       1862.49       1892.49    
   6  0.153036      -1.87708      -75.9811       75.9811       1841.83       1917.81    
   7  0.626270     -0.467973      -18.9428       18.9428       1852.82       1871.76    
   8  0.794744     -0.229735      -9.29930       9.29930       1886.07       1895.37    
   9  0.111868E-01  -4.49302      -181.870       181.870       1913.70       2095.57    
  10  0.643880     -0.440243      -17.8203       17.8203       1922.56       1940.38    
  11  0.634705     -0.454595      -18.4012       18.4012       1908.00       1926.41    
  12  0.653568     -0.425308      -17.2158       17.2158       1904.36       1921.58    
  13  0.888231     -0.118524      -4.79765       4.79765       1925.45       1930.25    
  14  0.681775E-01  -2.68564      -108.710       108.710       1913.96       2022.67    
  15  0.241248      -1.42193      -57.5574       57.5574       1929.90       1987.46    
  16  0.208857      -1.56610      -63.3933       63.3933       1926.23       1989.63    
  17  0.652439     -0.427038      -17.2858       17.2858       1952.21       1969.50    
  18  0.489833     -0.713691      -28.8890       28.8890       1966.08       1994.97    
  19  0.719225     -0.329581      -13.3409       13.3409       1963.44       1976.78    
  20  0.924762     -0.782189E-01  -3.16617       3.16617       1957.84       1961.01    
  21  0.845502     -0.167825      -6.79327       6.79327       1952.51       1959.30    
  22  0.665989     -0.406482      -16.4537       16.4537       1984.75       2001.20    
  23  0.378562     -0.971376      -39.3197       39.3197       1994.14       2033.46    
  24  0.396889     -0.924098      -37.4060       37.4060       2010.04       2047.45    
  25  0.158089      -1.84460      -74.6663       74.6663       1979.33       2054.00    
  26  0.590577     -0.526655      -21.3181       21.3181       2002.85       2024.17    
  27  0.949513     -0.518061E-01  -2.09702       2.09702       2011.14       2013.24    
  28  0.518198     -0.657398      -26.6104       26.6104       1879.41       1906.02    
  29  0.551080     -0.595875      -24.1200       24.1200       2026.66       2050.78    
  30  0.986285     -0.138097E-01 -0.558995      0.558995       2033.10       2033.65    
  31  0.920142     -0.832276E-01  -3.36892       3.36892       2007.43       2010.80    
  32  0.133201      -2.01590      -81.6002       81.6002       2025.73       2107.33    
  33  0.584507     -0.536987      -21.7363       21.7363       2074.00       2095.74    
  34  0.790583     -0.234984      -9.51177       9.51177       2033.22       2042.73    
  35  0.702664     -0.352876      -14.2838       14.2838       1965.45       1979.74    
  36  0.148885      -1.90458      -77.0942       77.0942       2049.88       2126.98    
  37  0.290436      -1.23637      -50.0463       50.0463       2101.82       2151.87    
  38  0.638249     -0.449027      -18.1759       18.1759       2118.77       2136.94    
  39  0.381605     -0.963369      -38.9956       38.9956       2100.54       2139.54    
  40  0.823069     -0.194716      -7.88177       7.88177       2095.76       2103.64    
  41  0.492318     -0.708630      -28.6841       28.6841       2131.53       2160.22    
  42  0.773199     -0.257218      -10.4118       10.4118       2122.33       2132.75    
  43  0.289475E-01  -3.54227      -143.385       143.385       1962.55       2105.94    
  44  0.355683      -1.03371      -41.8430       41.8430       2042.25       2084.10    
  45  0.160396      -1.83011      -74.0798       74.0798       2175.09       2249.17    
  46  0.972861     -0.275140E-01  -1.11372       1.11372       2033.28       2034.40    
  47  0.781938E-02  -4.85115      -196.366       196.366       2121.43       2317.79    
  48  0.225299      -1.49033      -60.3260       60.3260       2160.71       2221.04    
  49  0.631686     -0.459363      -18.5942       18.5942       2164.62       2183.22    
  50  0.212316      -1.54968      -62.7284       62.7284       2173.41       2236.14    
  51  0.673664     -0.395024      -15.9899       15.9899       2200.82       2216.81    
  52  0.728322     -0.317012      -12.8321       12.8321       2225.97       2238.80    
  53  0.368576     -0.998108      -40.4017       40.4017       2096.94       2137.35    
  54  0.381088     -0.964725      -39.0505       39.0505       2200.27       2239.32    
  55  0.481283     -0.731301      -29.6018       29.6018       1907.59       1937.19    
  56  0.801664     -0.221066      -8.94836       8.94836       2277.30       2286.25    
  57  0.285936      -1.25199      -50.6784       50.6784       2333.78       2384.46    
  58  0.412374     -0.885823      -35.8567       35.8567       2303.26       2339.12    
loop,thermsimp(1:2)       71   6.09504       22.4945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       2141.09         68.47          1.20         39.47          0.00          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2141.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       71
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       72
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      291     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -33.1611       33.1611       1776.18       1809.34    
   2  0.202294      -1.59803      -64.6856       64.6856       1798.54       1863.22    
   3  0.873786     -0.134920      -5.46135       5.46135       1795.34       1800.80    
   4  0.262141      -1.33887      -54.1954       54.1954       1835.62       1889.81    
   5  0.342005      -1.07293      -43.4304       43.4304       1852.82       1896.25    
   6  0.421217     -0.864607      -34.9978       34.9978       1862.49       1897.49    
   7  0.618489     -0.480477      -19.4489       19.4489       1886.07       1905.52    
   8  0.412552     -0.885393      -35.8392       35.8392       1879.41       1915.25    
   9  0.951192     -0.500396E-01  -2.02552       2.02552       1841.83       1843.85    
  10  0.298546      -1.20883      -48.9315       48.9315       1904.36       1953.30    
  11  0.805120     -0.216763      -8.77422       8.77422       1908.00       1916.78    
  12  0.208146      -1.56951      -63.5313       63.5313       1925.45       1988.98    
  13  0.924021     -0.790209E-01  -3.19864       3.19864       1907.59       1910.78    
  14  0.447624     -0.803802      -32.5366       32.5366       1922.56       1955.10    
  15  0.667709     -0.403903      -16.3493       16.3493       1952.51       1968.86    
  16  0.767295E-01  -2.56747      -103.927       103.927       1957.84       2061.77    
  17  0.301582      -1.19871      -48.5219       48.5219       1952.21       2000.74    
  18  0.788580     -0.237522      -9.61448       9.61448       1963.44       1973.06    
  19  0.887020     -0.119888      -4.85285       4.85285       1965.45       1970.31    
  20  0.233035E-01  -3.75915      -152.164       152.164       1929.90       2082.07    
  21  0.899320     -0.106116      -4.29542       4.29542       1926.23       1930.53    
  22  0.144480      -1.93461      -78.3099       78.3099       1966.08       2044.39    
  23  0.274629      -1.29233      -52.3115       52.3115       1984.75       2037.06    
  24  0.831597     -0.184407      -7.46448       7.46448       2007.43       2014.89    
  25  0.388827     -0.944620      -38.2366       38.2366       2011.14       2049.38    
  26  0.257578      -1.35643      -54.9061       54.9061       1913.96       1968.86    
  27  0.427791     -0.849120      -34.3709       34.3709       2002.85       2037.22    
  28  0.837664E-01  -2.47972      -100.375       100.375       1994.14       2094.51    
  29  0.782727     -0.244972      -9.91604       9.91604       2033.10       2043.01    
  30  0.259676E-01  -3.65091      -147.783       147.783       2033.28       2181.07    
  31  0.166181      -1.79468      -72.6456       72.6456       2033.22       2105.87    
  32  0.360749      -1.01957      -41.2706       41.2706       2010.04       2051.31    
  33  0.369697     -0.995071      -40.2788       40.2788       2026.66       2066.93    
  34  0.959392     -0.414553E-01  -1.67804       1.67804       1979.33       1981.01    
  35  0.449170     -0.800353      -32.3970       32.3970       2042.25       2074.65    
  36  0.655790E-02  -5.02708      -203.488       203.488       1913.70       2117.19    
  37  0.133569      -2.01313      -81.4883       81.4883       2074.00       2155.49    
  38  0.282061      -1.26563      -51.2307       51.2307       2095.76       2146.99    
  39  0.431813     -0.839762      -33.9921       33.9921       1962.55       1996.54    
  40  0.713174     -0.338031      -13.6829       13.6829       2025.73       2039.41    
  41  0.511305     -0.670790      -27.1524       27.1524       2049.88       2077.04    
  42  0.264485      -1.32997      -53.8350       53.8350       2122.33       2176.17    
  43  0.779298     -0.249362      -10.0938       10.0938       2118.77       2128.86    
  44  0.709352E-02  -4.94857      -200.310       200.310       2096.94       2297.25    
  45  0.770402     -0.260843      -10.5585       10.5585       2100.54       2111.10    
  46  0.694393     -0.364718      -14.7632       14.7632       2101.82       2116.58    
  47  0.589268E-01  -2.83146      -114.613       114.613       2131.53       2246.15    
  48  0.817644     -0.201328      -8.14942       8.14942       2164.62       2172.77    
  49  0.990168     -0.988073E-02 -0.399955      0.399955       2200.82       2201.22    
  50  0.733536E-01  -2.61246      -105.748       105.748       2160.71       2266.46    
  51  0.781472     -0.246575      -9.98096       9.98096       2173.41       2183.39    
  52  0.582548     -0.540344      -21.8722       21.8722       2225.97       2247.84    
  53  0.644915     -0.438636      -17.7553       17.7553       2200.27       2218.03    
  54  0.726975     -0.318863      -12.9071       12.9071       2175.09       2188.00    
  55  0.562265     -0.575782      -23.3067       23.3067       2277.30       2300.60    
  56  0.166410      -1.79330      -72.5898       72.5898       2121.43       2194.02    
  57  0.847052     -0.165994      -6.71914       6.71914       2303.26       2309.98    
  58  0.437688     -0.826250      -33.4452       33.4452       2141.09       2174.53    
loop,thermsimp(1:2)       72   33.1611       64.6856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293       2345.79         68.49          1.22         39.34          0.09          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    294       1911.00         68.69          1.19         39.10          0.12          0.05        109.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1911.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       72
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       73
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      293     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -8.63509       8.63509       1795.34       1803.98    
   2  0.554495     -0.589697      -23.8699       23.8699       1776.18       1800.05    
   3  0.997056     -0.294851E-02 -0.119351      0.119351       1841.83       1841.95    
   4  0.901183E-01  -2.40663      -97.4164       97.4164       1798.54       1895.95    
   5  0.296736      -1.21491      -49.1777       49.1777       1835.62       1884.79    
   6  0.907820     -0.967094E-01  -3.91464       3.91464       1852.82       1856.73    
   7  0.325542      -1.12226      -45.4273       45.4273       1862.49       1907.92    
   8  0.947537     -0.538896E-01  -2.18136       2.18136       1886.07       1888.26    
   9  0.378276     -0.972130      -39.3502       39.3502       1907.59       1946.94    
  10  0.985613     -0.144920E-01 -0.586610      0.586610       1879.41       1880.00    
  11  0.167434      -1.78717      -72.3415       72.3415       1908.00       1980.35    
  12  0.693849E-01  -2.66809      -108.000       108.000       1926.23       2034.23    
  13  0.434983     -0.832447      -33.6961       33.6961       1904.36       1938.06    
  14  0.998656     -0.134491E-02 -0.544397E-01  0.544397E-01   1922.56       1922.62    
  15  0.650302     -0.430318      -17.4185       17.4185       1952.51       1969.93    
  16  0.152610      -1.87987      -76.0940       76.0940       1913.96       1990.05    
  17  0.273947      -1.29482      -52.4121       52.4121       1965.45       2017.87    
  18  0.990471     -0.957469E-02 -0.387567      0.387567       1963.44       1963.83    
  19  0.684493     -0.379077      -15.3444       15.3444       1979.33       1994.68    
  20  0.864467E-01  -2.44823      -99.1002       99.1002       1925.45       2024.55    
  21  0.546085     -0.604980      -24.4886       24.4886       1962.55       1987.04    
  22  0.246642      -1.39982      -56.6622       56.6622       1952.21       2008.88    
  23  0.484505     -0.724627      -29.3317       29.3317       2007.43       2036.76    
  24  0.567359     -0.566763      -22.9416       22.9416       1984.75       2007.69    
  25  0.564371     -0.572043      -23.1554       23.1554       2002.85       2026.01    
  26  0.825604     -0.191640      -7.75729       7.75729       2025.73       2033.49    
  27  0.302493      -1.19570      -48.3999       48.3999       2033.10       2081.50    
  28  0.630396     -0.461407      -18.6770       18.6770       1966.08       1984.76    
  29  0.886734     -0.120210      -4.86591       4.86591       2011.14       2016.01    
  30  0.389345     -0.943288      -38.1827       38.1827       2010.04       2048.22    
  31  0.181391      -1.70710      -69.1006       69.1006       1957.84       2026.94    
  32  0.933221     -0.691132E-01  -2.79759       2.79759       2026.66       2029.45    
  33  0.169237E-01  -4.07904      -165.113       165.113       2042.25       2207.37    
  34  0.757788     -0.277351      -11.2267       11.2267       2049.88       2061.11    
  35  0.300993E-01  -3.50325      -141.806       141.806       1929.90       2071.71    
  36  0.395621     -0.927300      -37.5355       37.5355       1994.14       2031.67    
  37  0.459505     -0.777605      -31.4761       31.4761       2033.22       2064.70    
  38  0.733176     -0.310370      -12.5633       12.5633       2100.54       2113.10    
  39  0.575459     -0.552587      -22.3678       22.3678       2101.82       2124.19    
  40  0.560889     -0.578233      -23.4059       23.4059       1913.70       1937.11    
  41  0.428351     -0.847812      -34.3180       34.3180       2118.77       2153.08    
  42  0.553832     -0.590895      -23.9184       23.9184       2095.76       2119.68    
  43  0.581118     -0.542801      -21.9717       21.9717       2074.00       2095.98    
  44  0.319195E-01  -3.44454      -139.429       139.429       2164.62       2304.05    
  45  0.224512E-01  -3.79641      -153.672       153.672       2141.09       2294.76    
  46  0.113637E-01  -4.47733      -181.235       181.235       2122.33       2303.57    
  47  0.889134     -0.117508      -4.75652       4.75652       2033.28       2038.04    
  48  0.422937     -0.860531      -34.8329       34.8329       2173.41       2208.24    
  49  0.479928     -0.734119      -29.7159       29.7159       2175.09       2204.81    
  50  0.813133     -0.206861      -8.37338       8.37338       2121.43       2129.80    
  51  0.544683     -0.607551      -24.5926       24.5926       2200.82       2225.41    
  52  0.694184E-01  -2.66760      -107.980       107.980       2200.27       2308.25    
  53  0.656508     -0.420820      -17.0341       17.0341       2131.53       2148.57    
  54  0.532118     -0.630889      -25.5373       25.5373       2225.97       2251.51    
  55  0.485731E-01  -3.02468      -122.434       122.434       2160.71       2283.15    
  56  0.525424     -0.643549      -26.0498       26.0498       2096.94       2122.99    
  57  0.773368E-01  -2.55959      -103.608       103.608       2277.30       2380.91    
  58  0.741245     -0.299424      -12.1202       12.1202       1911.00       1923.12    
loop,thermsimp(1:2)       73   8.63509       23.8699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       1997.51         68.67          1.16         39.07          0.17          0.05        109.13
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1997.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       73
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       74
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      294     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -4.73148       4.73148       1776.18       1780.91    
   2  0.480213     -0.733525      -29.6919       29.6919       1795.34       1825.03    
   3  0.226156      -1.48653      -60.1723       60.1723       1841.83       1902.00    
   4  0.633402     -0.456651      -18.4844       18.4844       1852.82       1871.30    
   5  0.925311     -0.776258E-01  -3.14216       3.14216       1879.41       1882.56    
   6  0.498405     -0.696343      -28.1868       28.1868       1835.62       1863.80    
   7  0.133283      -2.01528      -81.5752       81.5752       1886.07       1967.65    
   8  0.657074E-01  -2.72254      -110.204       110.204       1798.54       1908.74    
   9  0.726758     -0.319162      -12.9191       12.9191       1862.49       1875.41    
  10  0.398365     -0.920388      -37.2557       37.2557       1922.56       1959.82    
  11  0.321047E-01  -3.43875      -139.195       139.195       1911.00       2050.19    
  12  0.276307      -1.28624      -52.0650       52.0650       1913.70       1965.77    
  13  0.483740     -0.726208      -29.3957       29.3957       1904.36       1933.76    
  14  0.224589      -1.49348      -60.4537       60.4537       1907.59       1968.04    
  15  0.832041     -0.183874      -7.44289       7.44289       1963.44       1970.88    
  16  0.939301     -0.626192E-01  -2.53472       2.53472       1952.51       1955.05    
  17  0.624052     -0.471522      -19.0864       19.0864       1908.00       1927.09    
  18  0.172753      -1.75589      -71.0757       71.0757       1966.08       2037.16    
  19  0.468323     -0.758597      -30.7067       30.7067       1962.55       1993.26    
  20  0.963461     -0.372229E-01  -1.50672       1.50672       1913.96       1915.46    
  21  0.812092     -0.208142      -8.42524       8.42524       1979.33       1987.76    
  22  0.376764     -0.976137      -39.5124       39.5124       1984.75       2024.26    
  23  0.791872E-01  -2.53594      -102.651       102.651       1952.21       2054.86    
  24  0.237003      -1.43968      -58.2760       58.2760       2011.14       2069.42    
  25  0.320094      -1.13914      -46.1105       46.1105       1965.45       2011.56    
  26  0.821410E-01  -2.49932      -101.168       101.168       1925.45       2026.62    
  27  0.789147     -0.236802      -9.58536       9.58536       2002.85       2012.44    
  28  0.734353E-01  -2.61135      -105.703       105.703       1957.84       2063.54    
  29  0.226401      -1.48545      -60.1284       60.1284       2026.66       2086.78    
  30  0.380831     -0.965399      -39.0777       39.0777       1994.14       2033.22    
  31  0.264857      -1.32857      -53.7781       53.7781       2025.73       2079.51    
  32  0.246167      -1.40174      -56.7403       56.7403       1926.23       1982.98    
  33  0.142133      -1.95099      -78.9730       78.9730       2007.43       2086.40    
  34  0.123438E-01  -4.39460      -177.886       177.886       2033.28       2211.17    
  35  0.853289     -0.158657      -6.42216       6.42216       2010.04       2016.46    
  36  0.418603     -0.870831      -35.2498       35.2498       2049.88       2085.13    
  37  0.235242      -1.44714      -58.5779       58.5779       2033.22       2091.80    
  38  0.841712     -0.172317      -6.97510       6.97510       1929.90       1936.88    
  39  0.113373      -2.17707      -88.1242       88.1242       2033.10       2121.22    
  40  0.617966     -0.481322      -19.4831       19.4831       2074.00       2093.49    
  41  0.149268      -1.90202      -76.9904       76.9904       2100.54       2177.53    
  42  0.811010     -0.209475      -8.47921       8.47921       2095.76       2104.24    
  43  0.571477     -0.559531      -22.6489       22.6489       2096.94       2119.59    
  44  0.105494      -2.24911      -91.0400       91.0400       2101.82       2192.86    
  45  0.709548     -0.343127      -13.8892       13.8892       2121.43       2135.32    
  46  0.535895     -0.623816      -25.2510       25.2510       2131.53       2156.79    
  47  0.137736      -1.98242      -80.2450       80.2450       2118.77       2199.01    
  48  0.666779     -0.405297      -16.4058       16.4058       2175.09       2191.50    
  49  0.326487      -1.11936      -45.3100       45.3100       2042.25       2087.56    
  50  0.461090     -0.774162      -31.3368       31.3368       2173.41       2204.75    
  51  0.246088      -1.40207      -56.7533       56.7533       2200.82       2257.57    
  52  0.308348      -1.17653      -47.6238       47.6238       2225.97       2273.59    
  53  0.921161     -0.821209E-01  -3.32412       3.32412       2160.71       2164.04    
  54  0.361112      -1.01857      -41.2299       41.2299       2141.09       2182.32    
  55  0.853246     -0.158708      -6.42422       6.42422       2122.33       2128.76    
  56  0.535783     -0.624027      -25.2596       25.2596       2164.62       2189.88    
  57  0.347437      -1.05717      -42.7925       42.7925       2200.27       2243.06    
  58  0.722381     -0.325203      -13.1637       13.1637       1997.51       2010.67    
loop,thermsimp(1:2)       74   4.73148       29.6919    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       1787.50         68.66          1.23         39.57          0.09          0.05        109.60
Just calling func    0   0        109.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297       2477.18         68.66          1.21         38.95          0.50          0.05        109.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1787.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       74
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       75
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      296     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -17.6997       17.6997       1776.18       1793.88    
   2  0.108032      -2.22533      -90.0775       90.0775       1795.34       1885.42    
   3  0.908790     -0.956413E-01  -3.87140       3.87140       1835.62       1839.49    
   4  0.987883     -0.121914E-01 -0.493486      0.493486       1852.82       1853.31    
   5  0.318380      -1.14451      -46.3278       46.3278       1862.49       1908.82    
   6  0.924426     -0.785824E-01  -3.18088       3.18088       1879.41       1882.60    
   7  0.965220     -0.353996E-01  -1.43291       1.43291       1841.83       1843.26    
   8  0.852248     -0.159878      -6.47160       6.47160       1798.54       1805.01    
   9  0.329186      -1.11113      -44.9768       44.9768       1913.96       1958.93    
  10  0.282479      -1.26415      -51.1707       51.1707       1908.00       1959.18    
  11  0.818943     -0.199740      -8.08516       8.08516       1904.36       1912.45    
  12  0.842569     -0.171300      -6.93393       6.93393       1929.90       1936.84    
  13  0.370966     -0.991644      -40.1401       40.1401       1952.51       1992.65    
  14  0.362233      -1.01547      -41.1044       41.1044       1922.56       1963.67    
  15  0.356944E-01  -3.33276      -134.905       134.905       1913.70       2048.61    
  16  0.149119      -1.90301      -77.0307       77.0307       1886.07       1963.11    
  17  0.127170      -2.06223      -83.4758       83.4758       1907.59       1991.06    
  18  0.589256     -0.528895      -21.4088       21.4088       1963.44       1984.85    
  19  0.702139     -0.353624      -14.3141       14.3141       1926.23       1940.55    
  20  0.713819     -0.337127      -13.6463       13.6463       1979.33       1992.98    
  21  0.121783      -2.10552      -85.2278       85.2278       1962.55       2047.78    
  22  0.992321     -0.770837E-02 -0.312022      0.312022       1997.51       1997.82    
  23  0.622746     -0.473616      -19.1712       19.1712       1965.45       1984.63    
  24  0.388486     -0.945499      -38.2722       38.2722       2002.85       2041.12    
  25  0.365204      -1.00730      -40.7738       40.7738       2010.04       2050.81    
  26  0.416566     -0.875710      -35.4473       35.4473       1984.75       2020.19    
  27  0.250735      -1.38336      -55.9960       55.9960       1925.45       1981.45    
  28  0.243824      -1.41131      -57.1275       57.1275       1994.14       2051.27    
  29  0.177195      -1.73050      -70.0478       70.0478       1966.08       2036.13    
  30  0.723685     -0.323399      -13.0906       13.0906       1911.00       1924.09    
  31  0.157256      -1.84988      -74.8800       74.8800       1952.21       2027.09    
  32  0.941988     -0.597623E-01  -2.41908       2.41908       1957.84       1960.26    
  33  0.110785      -2.20016      -89.0590       89.0590       2011.14       2100.20    
  34  0.200758      -1.60566      -64.9943       64.9943       2025.73       2090.73    
  35  0.873323     -0.135450      -5.48279       5.48279       2049.88       2055.37    
  36  0.842283     -0.171639      -6.94765       6.94765       2007.43       2014.38    
  37  0.326633      -1.11892      -45.2919       45.2919       2026.66       2071.95    
  38  0.648559     -0.433003      -17.5272       17.5272       2042.25       2059.78    
  39  0.460689E-01  -3.07762      -124.577       124.577       2033.22       2157.80    
  40  0.676614     -0.390654      -15.8130       15.8130       2074.00       2089.82    
  41  0.863029     -0.147307      -5.96274       5.96274       2095.76       2101.72    
  42  0.646727     -0.435831      -17.6417       17.6417       2096.94       2114.59    
  43  0.310616      -1.16920      -47.3272       47.3272       2033.10       2080.42    
  44  0.521840     -0.650394      -26.3269       26.3269       2122.33       2148.66    
  45  0.381245     -0.964312      -39.0338       39.0338       2121.43       2160.46    
  46  0.815908     -0.203453      -8.23546       8.23546       2131.53       2139.77    
  47  0.209395E-01  -3.86612      -156.494       156.494       2160.71       2317.21    
  48  0.800991E-01  -2.52449      -102.187       102.187       2100.54       2202.73    
  49  0.824204     -0.193337      -7.82597       7.82597       2141.09       2148.91    
  50  0.828636     -0.187975      -7.60890       7.60890       2164.62       2172.23    
  51  0.609810     -0.494608      -20.0209       20.0209       2175.09       2195.11    
  52  0.793631     -0.231137      -9.35605       9.35605       2101.82       2111.18    
  53  0.450040E-01  -3.10100      -125.523       125.523       2118.77       2244.29    
  54  0.758261     -0.276727      -11.2015       11.2015       2173.41       2184.61    
  55  0.450025     -0.798453      -32.3200       32.3200       2033.28       2065.60    
  56  0.687694     -0.374411      -15.1555       15.1555       2200.27       2215.43    
  57  0.851665     -0.160562      -6.49929       6.49929       2200.82       2207.32    
  58  0.964091     -0.365694E-01  -1.48027       1.48027       1787.50       1788.98    
loop,thermsimp(1:2)       75   17.6997       90.0775    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       1777.11         68.70          1.22         38.96          0.27          0.05        109.20
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299       2090.99         68.70          1.23         39.07          0.23          0.05        109.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1777.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       75
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       76
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      298     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -64.6573       64.6573       1787.50       1852.16    
   2  0.337724      -1.08553      -43.9403       43.9403       1776.18       1820.12    
   3  0.870295     -0.138923      -5.62338       5.62338       1798.54       1804.16    
   4  0.837087     -0.177827      -7.19814       7.19814       1835.62       1842.82    
   5  0.512110     -0.669215      -27.0887       27.0887       1841.83       1868.92    
   6  0.998742     -0.125879E-02 -0.509538E-01  0.509538E-01   1852.82       1852.87    
   7  0.203490      -1.59214      -64.4471       64.4471       1879.41       1943.86    
   8  0.525951E-01  -2.94513      -119.214       119.214       1795.34       1914.56    
   9  0.474810     -0.744841      -30.1499       30.1499       1862.49       1892.64    
  10  0.440755     -0.819266      -33.1625       33.1625       1904.36       1937.53    
  11  0.225689      -1.48860      -60.2560       60.2560       1911.00       1971.25    
  12  0.902704     -0.102360      -4.14337       4.14337       1929.90       1934.05    
  13  0.663331     -0.410481      -16.6156       16.6156       1926.23       1942.85    
  14  0.511480     -0.670447      -27.1386       27.1386       1913.96       1941.10    
  15  0.625297     -0.469528      -19.0057       19.0057       1908.00       1927.01    
  16  0.812907     -0.207139      -8.38465       8.38465       1957.84       1966.23    
  17  0.979453     -0.207607E-01 -0.840357      0.840357       1886.07       1886.91    
  18  0.255329      -1.36520      -55.2611       55.2611       1922.56       1977.82    
  19  0.856654     -0.154722      -6.26287       6.26287       1925.45       1931.72    
  20  0.610394     -0.493650      -19.9821       19.9821       1965.45       1985.44    
  21  0.703614     -0.351525      -14.2291       14.2291       1963.44       1977.67    
  22  0.623403     -0.472562      -19.1285       19.1285       1907.59       1926.71    
  23  0.375727     -0.978893      -39.6239       39.6239       1952.51       1992.13    
  24  0.870528     -0.138656      -5.61255       5.61255       1979.33       1984.94    
  25  0.175838E-01  -4.04078      -163.564       163.564       1997.51       2161.07    
  26  0.237914      -1.43585      -58.1206       58.1206       2007.43       2065.55    
  27  0.464352     -0.767112      -31.0514       31.0514       1984.75       2015.80    
  28  0.776873     -0.252478      -10.2199       10.2199       1952.21       1962.43    
  29  0.380679     -0.965800      -39.0940       39.0940       1966.08       2005.18    
  30  0.391295     -0.938295      -37.9806       37.9806       2002.85       2040.83    
  31  0.369488     -0.995636      -40.3017       40.3017       1962.55       2002.85    
  32  0.302398      -1.19601      -48.4125       48.4125       1913.70       1962.12    
  33  0.809138     -0.211786      -8.57274       8.57274       2010.04       2018.61    
  34  0.675473     -0.392342      -15.8814       15.8814       1994.14       2010.02    
  35  0.486217     -0.721100      -29.1889       29.1889       2049.88       2079.07    
  36  0.937468     -0.645730E-01  -2.61381       2.61381       2042.25       2044.87    
  37  0.741025     -0.299721      -12.1322       12.1322       2033.28       2045.42    
  38  0.155236      -1.86281      -75.4034       75.4034       2026.66       2102.06    
  39  0.407249     -0.898331      -36.3629       36.3629       2033.10       2069.46    
  40  0.348550E-01  -3.35656      -135.868       135.868       2074.00       2209.87    
  41  0.178548      -1.72290      -69.7400       69.7400       2025.73       2095.47    
  42  0.127429      -2.06020      -83.3933       83.3933       2011.14       2094.54    
  43  0.919888     -0.835037E-01  -3.38009       3.38009       2095.76       2099.14    
  44  0.520080     -0.653772      -26.4636       26.4636       2101.82       2128.28    
  45  0.574092     -0.554965      -22.4641       22.4641       2096.94       2119.41    
  46  0.893427     -0.112690      -4.56152       4.56152       2131.53       2136.10    
  47  0.658991     -0.417045      -16.8813       16.8813       2122.33       2139.22    
  48  0.803744     -0.218475      -8.84349       8.84349       2141.09       2149.93    
  49  0.499877     -0.693392      -28.0674       28.0674       2033.22       2061.29    
  50  0.723109     -0.324195      -13.1229       13.1229       2121.43       2134.55    
  51  0.477842     -0.738475      -29.8922       29.8922       2164.62       2194.52    
  52  0.946108     -0.553980E-01  -2.24242       2.24242       2173.41       2175.65    
  53  0.296943      -1.21422      -49.1494       49.1494       2175.09       2224.24    
  54  0.702733     -0.352778      -14.2799       14.2799       2100.54       2114.82    
  55  0.644709     -0.438956      -17.7682       17.7682       2200.82       2218.59    
  56  0.687506     -0.374685      -15.1666       15.1666       2200.27       2215.44    
  57  0.682968     -0.381308      -15.4347       15.4347       2118.77       2134.20    
  58  0.695030     -0.363801      -14.7261       14.7261       1777.11       1791.84    
loop,thermsimp(1:2)       76   64.6573       43.9403    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300       1765.83         68.66          1.19         39.12          0.20          0.05        109.23
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    301       2193.50         68.70          1.17         39.05          0.19          0.05        109.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    2193.5        2.262     -3.618      3.382     -102.6    -0.9294    
                     -0.2753      1.247     -99.70      9.499    -0.3413    

                       3.945     -4.168      1.540      6524.      7000.    

                      -2.158      0.000      0.000      0.000     -1.221    



                      -1.565      0.000      0.000      7000.      1224.    

                      -1.527     -1.983     -6.676     -8.861      6.299    

                      -14.33     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.9765E-01 0.1184E-01 0.9197E-01 0.9982E-01

                     -0.2486     0.1073    -0.5209E-01-0.4105E-01-0.8033E-01



                     -0.8447    -0.8651      0.000    -0.2278     0.3410    

                      0.4539E-01 0.2017    -0.7116     0.3074E-01 0.3636E-02

                      0.7881E-01 0.1711    -0.2927     -1.672      7000.    



                      -1.239     -1.292     -2.142     -1.982    -0.3807    

                     -0.3252      9.165      8.416    -0.1743E+05 -5.131    

                     -0.5517     -2.232      8.699      9.212    -0.1969E+05



                      -6.000     0.5301     0.3401      8.975      9.040    

                     -0.1944E+05 -6.000     0.3930    -0.2754      9.842    

                       8.817    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1765.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       76
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       77
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      300     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -20.0846       20.0846       1777.11       1797.20    
   2  0.437836     -0.825911      -33.4315       33.4315       1798.54       1831.97    
   3  0.123560      -2.09103      -84.6415       84.6415       1776.18       1860.82    
   4  0.943438     -0.582242E-01  -2.35682       2.35682       1835.62       1837.97    
   5  0.215054      -1.53686      -62.2097       62.2097       1787.50       1849.71    
   6  0.984763     -0.153546E-01 -0.621528      0.621528       1852.82       1853.44    
   7  0.154160E-01  -4.17235      -168.890       168.890       1841.83       2010.72    
   8  0.231957      -1.46120      -59.1471       59.1471       1886.07       1945.22    
   9  0.476349     -0.741605      -30.0189       30.0189       1862.49       1892.51    
  10  0.620436     -0.477333      -19.3216       19.3216       1795.34       1814.66    
  11  0.456145     -0.784945      -31.7733       31.7733       1907.59       1939.36    
  12  0.507296     -0.678660      -27.4710       27.4710       1908.00       1935.48    
  13  0.910123     -0.941755E-01  -3.81207       3.81207       1925.45       1929.27    
  14  0.323556      -1.12838      -45.6751       45.6751       1929.90       1975.58    
  15  0.666279     -0.406046      -16.4361       16.4361       1904.36       1920.80    
  16  0.781920     -0.246002      -9.95776       9.95776       1913.96       1923.91    
  17  0.921689     -0.815478E-01  -3.30092       3.30092       1926.23       1929.54    
  18  0.152544      -1.88030      -76.1115       76.1115       1879.41       1955.53    
  19  0.265926      -1.32454      -53.6151       53.6151       1913.70       1967.32    
  20  0.812409     -0.207751      -8.40941       8.40941       1952.21       1960.62    
  21  0.517560E-01  -2.96121      -119.865       119.865       1957.84       2077.71    
  22  0.559187     -0.581271      -23.5289       23.5289       1911.00       1934.53    
  23  0.708792     -0.344194      -13.9324       13.9324       1963.44       1977.37    
  24  0.287762      -1.24562      -50.4207       50.4207       1922.56       1972.98    
  25  0.896953     -0.108752      -4.40211       4.40211       1979.33       1983.73    
  26  0.305048      -1.18729      -48.0594       48.0594       1965.45       2013.51    
  27  0.752428     -0.284450      -11.5140       11.5140       1952.51       1964.02    
  28  0.248159      -1.39369      -56.4141       56.4141       1962.55       2018.97    
  29  0.997822     -0.217989E-02 -0.882384E-01  0.882384E-01   1966.08       1966.17    
  30  0.706427     -0.347535      -14.0676       14.0676       1994.14       2008.21    
  31  0.885217     -0.121923      -4.93523       4.93523       1984.75       1989.68    
  32  0.448301     -0.802290      -32.4754       32.4754       2010.04       2042.51    
  33  0.316275      -1.15114      -46.5964       46.5964       2002.85       2049.45    
  34  0.682241     -0.382372      -15.4778       15.4778       2042.25       2057.73    
  35  0.655896     -0.421752      -17.0718       17.0718       2033.28       2050.36    
  36  0.129575      -2.04350      -82.7174       82.7174       2033.22       2115.94    
  37  0.236133      -1.44336      -58.4248       58.4248       2007.43       2065.85    
  38  0.481338     -0.731186      -29.5972       29.5972       2033.10       2062.69    
  39  0.825902     -0.191279      -7.74265       7.74265       2049.88       2057.63    
  40  0.818029     -0.200857      -8.13036       8.13036       2011.14       2019.27    
  41  0.135951E-01  -4.29805      -173.978       173.978       2025.73       2199.71    
  42  0.535484     -0.624585      -25.2822       25.2822       2095.76       2121.04    
  43  0.451882     -0.794334      -32.1533       32.1533       2026.66       2058.81    
  44  0.591282     -0.525463      -21.2699       21.2699       2100.54       2121.81    
  45  0.220584      -1.51148      -61.1820       61.1820       2096.94       2158.13    
  46  0.217569      -1.52524      -61.7391       61.7391       2101.82       2163.56    
  47  0.541669     -0.613101      -24.8173       24.8173       2118.77       2143.58    
  48  0.927891     -0.748411E-01  -3.02944       3.02944       2121.43       2124.46    
  49  0.888902     -0.117768      -4.76704       4.76704       2131.53       2136.30    
  50  0.391529     -0.937694      -37.9563       37.9563       2122.33       2160.29    
  51  0.611187     -0.492353      -19.9296       19.9296       2141.09       2161.02    
  52  0.475002     -0.744437      -30.1335       30.1335       1997.51       2027.64    
  53  0.504237     -0.684709      -27.7159       27.7159       2173.41       2201.13    
  54  0.605691     -0.501385      -20.2952       20.2952       2164.62       2184.92    
  55  0.476618     -0.741039      -29.9960       29.9960       2074.00       2104.00    
  56  0.128287      -2.05348      -83.1215       83.1215       2200.27       2283.39    
  57  0.164258      -1.80632      -73.1167       73.1167       2200.82       2273.93    
  58  0.381764     -0.962954      -38.9788       38.9788       1765.83       1804.81    
loop,thermsimp(1:2)       77   20.0846       33.4315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302       2183.88         68.66          1.18         39.12          0.15          0.05        109.16
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2183.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       77
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       78
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      301     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -94.0141       94.0141       1777.11       1871.13    
   2  0.700279     -0.356277      -14.4215       14.4215       1765.83       1780.26    
   3  0.681564     -0.383366      -15.5180       15.5180       1795.34       1810.86    
   4  0.838213E-01  -2.47907      -100.349       100.349       1798.54       1898.89    
   5  0.708687     -0.344341      -13.9384       13.9384       1835.62       1849.56    
   6  0.253966      -1.37055      -55.4777       55.4777       1787.50       1842.98    
   7  0.210796      -1.55686      -63.0192       63.0192       1852.82       1915.84    
   8  0.967741     -0.327906E-01  -1.32731       1.32731       1776.18       1777.51    
   9  0.901331     -0.103882      -4.20499       4.20499       1862.49       1866.70    
  10  0.985067     -0.150452E-01 -0.609003      0.609003       1904.36       1904.97    
  11  0.153899      -1.87146      -75.7535       75.7535       1913.96       1989.71    
  12  0.297572      -1.21210      -49.0637       49.0637       1925.45       1974.52    
  13  0.111036      -2.19790      -88.9673       88.9673       1926.23       2015.20    
  14  0.489011     -0.715370      -28.9570       28.9570       1911.00       1939.95    
  15  0.970731     -0.297058E-01  -1.20244       1.20244       1908.00       1909.21    
  16  0.246322      -1.40112      -56.7148       56.7148       1907.59       1964.30    
  17  0.293332      -1.22645      -49.6446       49.6446       1886.07       1935.72    
  18  0.545752     -0.605591      -24.5133       24.5133       1879.41       1903.93    
  19  0.455999     -0.785265      -31.7862       31.7862       1952.21       1984.00    
  20  0.427211     -0.850477      -34.4259       34.4259       1952.51       1986.94    
  21  0.185046E-01  -3.98974      -161.498       161.498       1966.08       2127.58    
  22  0.768936     -0.262748      -10.6356       10.6356       1913.70       1924.34    
  23  0.870591     -0.138583      -5.60962       5.60962       1922.56       1928.17    
  24  0.563023     -0.574436      -23.2522       23.2522       1929.90       1953.16    
  25  0.132150E-01  -4.32640      -175.126       175.126       1963.44       2138.57    
  26  0.890415     -0.116068      -4.69823       4.69823       1979.33       1984.03    
  27  0.163417      -1.81145      -73.3246       73.3246       1984.75       2058.07    
  28  0.360288      -1.02085      -41.3223       41.3223       1994.14       2035.46    
  29  0.622131     -0.474604      -19.2112       19.2112       1841.83       1861.04    
  30  0.942630     -0.590811E-01  -2.39151       2.39151       1965.45       1967.85    
  31  0.135626      -1.99785      -80.8698       80.8698       1962.55       2043.42    
  32  0.369646     -0.995208      -40.2844       40.2844       2011.14       2051.43    
  33  0.501457     -0.690237      -27.9397       27.9397       1997.51       2025.45    
  34  0.459762     -0.777047      -31.4536       31.4536       2010.04       2041.49    
  35  0.489970     -0.713411      -28.8777       28.8777       2002.85       2031.73    
  36  0.504194     -0.684794      -27.7193       27.7193       2033.28       2061.00    
  37  0.543102E-01  -2.91304      -117.915       117.915       2049.88       2167.80    
  38  0.873609     -0.135122      -5.46951       5.46951       2042.25       2047.72    
  39  0.425787     -0.853816      -34.5610       34.5610       2026.66       2061.22    
  40  0.792406     -0.232682      -9.41857       9.41857       2033.10       2042.51    
  41  0.691102     -0.369469      -14.9555       14.9555       2007.43       2022.38    
  42  0.752290     -0.284633      -11.5215       11.5215       1957.84       1969.36    
  43  0.279962      -1.27310      -51.5330       51.5330       2074.00       2125.54    
  44  0.315915E-01  -3.45487      -139.847       139.847       2033.22       2173.07    
  45  0.266419      -1.32269      -53.5401       53.5401       2095.76       2149.30    
  46  0.949868     -0.514319E-01  -2.08188       2.08188       2100.54       2102.62    
  47  0.520560     -0.652850      -26.4263       26.4263       2121.43       2147.85    
  48  0.805351     -0.216477      -8.76264       8.76264       2131.53       2140.30    
  49  0.281582      -1.26733      -51.2994       51.2994       2118.77       2170.07    
  50  0.365228      -1.00723      -40.7711       40.7711       2096.94       2137.71    
  51  0.961426     -0.393382E-01  -1.59234       1.59234       2122.33       2123.93    
  52  0.176024      -1.73713      -70.3162       70.3162       2141.09       2211.40    
  53  0.722488     -0.325055      -13.1577       13.1577       2101.82       2114.98    
  54  0.543981     -0.608841      -24.6449       24.6449       2164.62       2189.27    
  55  0.810204     -0.210469      -8.51944       8.51944       2025.73       2034.25    
  56  0.839414     -0.175052      -7.08579       7.08579       2173.41       2180.50    
  57  0.890272     -0.116228      -4.70472       4.70472       2200.82       2205.52    
  58  0.370000     -0.994252      -40.2457       40.2457       2183.88       2224.13    
loop,thermsimp(1:2)       78   94.0141       14.4215    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303       2200.27         68.73          1.19         38.94          0.30          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2200.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       78
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       79
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      302     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -67.1778       67.1778       1776.18       1843.36    
   2  0.812983     -0.207045      -8.38084       8.38084       1765.83       1774.22    
   3  0.820046E-01  -2.50098      -101.235       101.235       1795.34       1896.58    
   4  0.863006     -0.147333      -5.96380       5.96380       1787.50       1793.47    
   5  0.647901     -0.434017      -17.5683       17.5683       1835.62       1853.19    
   6  0.650063E-01  -2.73327      -110.638       110.638       1841.83       1952.47    
   7  0.407685E-02  -5.50243      -222.729       222.729       1862.49       2085.22    
   8  0.935930     -0.662149E-01  -2.68027       2.68027       1777.11       1779.79    
   9  0.158531      -1.84180      -74.5532       74.5532       1798.54       1873.09    
  10  0.846482     -0.166666      -6.74637       6.74637       1879.41       1886.16    
  11  0.252208      -1.37750      -55.7590       55.7590       1904.36       1960.12    
  12  0.781651E-02  -4.85152      -196.381       196.381       1908.00       2104.39    
  13  0.990286     -0.976134E-02 -0.395123      0.395123       1852.82       1853.22    
  14  0.550116     -0.597625      -24.1909       24.1909       1913.70       1937.90    
  15  0.483066     -0.727601      -29.4521       29.4521       1922.56       1952.01    
  16  0.196160      -1.62883      -65.9322       65.9322       1886.07       1952.01    
  17  0.469455     -0.756184      -30.6090       30.6090       1911.00       1941.61    
  18  0.624392     -0.470977      -19.0644       19.0644       1929.90       1948.97    
  19  0.743593     -0.296262      -11.9922       11.9922       1907.59       1919.58    
  20  0.348439      -1.05429      -42.6760       42.6760       1965.45       2008.13    
  21  0.779083     -0.249637      -10.1049       10.1049       1957.84       1967.95    
  22  0.989010     -0.110506E-01 -0.447310      0.447310       1925.45       1925.90    
  23  0.655432E-01  -2.72505      -110.305       110.305       1952.21       2062.52    
  24  0.470908     -0.753092      -30.4839       30.4839       1979.33       2009.82    
  25  0.685537     -0.377553      -15.2827       15.2827       1952.51       1967.79    
  26  0.863060E-02  -4.75244      -192.371       192.371       1913.96       2106.33    
  27  0.526195     -0.642084      -25.9905       25.9905       1926.23       1952.23    
  28  0.767692     -0.264367      -10.7011       10.7011       2007.43       2018.13    
  29  0.380048     -0.967459      -39.1611       39.1611       1997.51       2036.67    
  30  0.337508E-01  -3.38875      -137.171       137.171       2002.85       2140.02    
  31  0.683667     -0.380285      -15.3933       15.3933       2025.73       2041.12    
  32  0.245511      -1.40441      -56.8484       56.8484       1994.14       2050.99    
  33  0.294388      -1.22286      -49.4992       49.4992       2010.04       2059.54    
  34  0.159040      -1.83860      -74.4233       74.4233       2033.10       2107.52    
  35  0.613798     -0.488089      -19.7570       19.7570       1962.55       1982.31    
  36  0.863839E-01  -2.44895      -99.1295       99.1295       2042.25       2141.38    
  37  0.118930      -2.12922      -86.1873       86.1873       2011.14       2097.33    
  38  0.961460     -0.393026E-01  -1.59090       1.59090       1984.75       1986.34    
  39  0.457884     -0.781140      -31.6193       31.6193       2033.28       2064.90    
  40  0.312963      -1.16167      -47.0224       47.0224       2026.66       2073.68    
  41  0.892553     -0.113669      -4.60113       4.60113       2100.54       2105.14    
  42  0.448774     -0.801235      -32.4326       32.4326       2101.82       2134.25    
  43  0.942987E-01  -2.36129      -95.5810       95.5810       2122.33       2217.92    
  44  0.848599     -0.164169      -6.64527       6.64527       2074.00       2080.65    
  45  0.665342     -0.407455      -16.4931       16.4931       1966.08       1982.58    
  46  0.894010     -0.112039      -4.53513       4.53513       2096.94       2101.48    
  47  0.403928     -0.906518      -36.6943       36.6943       1963.44       2000.14    
  48  0.612812     -0.489696      -19.8221       19.8221       2131.53       2151.36    
  49  0.726279     -0.319821      -12.9458       12.9458       2121.43       2134.37    
  50  0.694767     -0.364179      -14.7413       14.7413       2095.76       2110.50    
  51  0.849471     -0.163141      -6.60368       6.60368       2049.88       2056.49    
  52  0.615908     -0.484657      -19.6181       19.6181       2118.77       2138.39    
  53  0.256250      -1.36160      -55.1154       55.1154       2033.22       2088.34    
  54  0.124633      -2.08238      -84.2913       84.2913       2173.41       2257.70    
  55  0.629294E-01  -2.76574      -111.953       111.953       2164.62       2276.58    
  56  0.127527      -2.05943      -83.3622       83.3622       2200.82       2284.18    
  57  0.721510     -0.326409      -13.2125       13.2125       2141.09       2154.30    
  58  0.664696     -0.408425      -16.5324       16.5324       2200.27       2216.80    
loop,thermsimp(1:2)       79   67.1778       8.38084    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       1717.59         68.81          1.18         39.01          0.08          0.05        109.13
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305       2010.47         68.79          1.11         39.05          0.27          0.05        109.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1717.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       79
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       80
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      304     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -44.0134       44.0134       1765.83       1809.85    
   2  0.744737     -0.294724      -11.9299       11.9299       1777.11       1789.04    
   3  0.361564E-01  -3.31990      -134.384       134.384       1787.50       1921.89    
   4  0.312099      -1.16444      -47.1344       47.1344       1776.18       1823.31    
   5  0.119132      -2.12752      -86.1186       86.1186       1835.62       1921.74    
   6  0.617735     -0.481696      -19.4982       19.4982       1852.82       1872.32    
   7  0.117626      -2.14025      -86.6336       86.6336       1798.54       1885.17    
   8  0.258570      -1.35259      -54.7505       54.7505       1879.41       1934.17    
   9  0.851854E-01  -2.46293      -99.6951       99.6951       1795.34       1895.04    
  10  0.220620      -1.51131      -61.1754       61.1754       1907.59       1968.76    
  11  0.648876     -0.432513      -17.5074       17.5074       1925.45       1942.96    
  12  0.958689     -0.421884E-01  -1.70772       1.70772       1913.70       1915.41    
  13  0.240652      -1.42440      -57.6574       57.6574       1911.00       1968.65    
  14  0.975871     -0.244252E-01 -0.988692      0.988692       1929.90       1930.89    
  15  0.467835     -0.759639      -30.7489       30.7489       1886.07       1916.82    
  16  0.398205     -0.920788      -37.2720       37.2720       1922.56       1959.83    
  17  0.757338E-01  -2.58053      -104.456       104.456       1926.23       2030.69    
  18  0.654643     -0.423666      -17.1493       17.1493       1841.83       1858.98    
  19  0.305298      -1.18647      -48.0262       48.0262       1904.36       1952.39    
  20  0.435768     -0.830645      -33.6231       33.6231       1952.51       1986.13    
  21  0.689410     -0.371920      -15.0547       15.0547       1957.84       1972.90    
  22  0.267500      -1.31864      -53.3762       53.3762       1962.55       2015.93    
  23  0.590747     -0.526367      -21.3065       21.3065       1966.08       1987.39    
  24  0.108947E-01  -4.51948      -182.941       182.941       1984.75       2167.69    
  25  0.236025      -1.44382      -58.4434       58.4434       1963.44       2021.88    
  26  0.590760     -0.526345      -21.3056       21.3056       1965.45       1986.76    
  27  0.782443     -0.245334      -9.93071       9.93071       1979.33       1989.26    
  28  0.702257     -0.353456      -14.3073       14.3073       2007.43       2021.73    
  29  0.764991     -0.267891      -10.8438       10.8438       1997.51       2008.35    
  30  0.753362     -0.283210      -11.4639       11.4639       2025.73       2037.20    
  31  0.961949E-01  -2.34138      -94.7751       94.7751       1994.14       2088.91    
  32  0.541564     -0.613294      -24.8251       24.8251       2049.88       2074.71    
  33  0.474786     -0.744891      -30.1519       30.1519       2010.04       2040.19    
  34  0.242842      -1.41534      -57.2907       57.2907       1952.21       2009.50    
  35  0.495414     -0.702361      -28.4304       28.4304       2033.28       2061.72    
  36  0.636645     -0.451543      -18.2777       18.2777       2026.66       2044.93    
  37  0.758087     -0.276957      -11.2108       11.2108       2074.00       2085.22    
  38  0.209321      -1.56389      -63.3036       63.3036       1862.49       1925.80    
  39  0.484343     -0.724961      -29.3452       29.3452       2033.22       2062.57    
  40  0.499790     -0.693567      -28.0744       28.0744       2011.14       2039.22    
  41  0.316628      -1.15003      -46.5512       46.5512       2096.94       2143.49    
  42  0.705469     -0.348892      -14.1226       14.1226       1908.00       1922.13    
  43  0.514591     -0.664383      -26.8931       26.8931       2100.54       2127.43    
  44  0.869006     -0.140406      -5.68339       5.68339       1913.96       1919.64    
  45  0.112600      -2.18392      -88.4012       88.4012       2033.10       2121.50    
  46  0.511991     -0.669449      -27.0982       27.0982       2095.76       2122.86    
  47  0.477456     -0.739283      -29.9249       29.9249       2101.82       2131.75    
  48  0.494460     -0.704290      -28.5085       28.5085       2121.43       2149.93    
  49  0.698938     -0.358193      -14.4991       14.4991       2118.77       2133.27    
  50  0.430212     -0.843478      -34.1426       34.1426       2002.85       2036.99    
  51  0.474243E-01  -3.04862      -123.403       123.403       2042.25       2165.66    
  52  0.167497      -1.78679      -72.3262       72.3262       2131.53       2203.86    
  53  0.233811      -1.45324      -58.8249       58.8249       2141.09       2199.91    
  54  0.760101     -0.274304      -11.1034       11.1034       2200.27       2211.37    
  55  0.195143      -1.63402      -66.1426       66.1426       2122.33       2188.48    
  56  0.822875     -0.194951      -7.89129       7.89129       2173.41       2181.30    
  57  0.332571      -1.10090      -44.5627       44.5627       2164.62       2209.19    
  58  0.682214     -0.382412      -15.4794       15.4794       1717.59       1733.07    
loop,thermsimp(1:2)       80   44.0134       11.9299    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306       2145.97         68.68          1.18         39.48          0.12          0.05        109.52
Just calling func    0   0        109.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2145.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       80
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       81
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      305     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -43.2036       43.2036       1717.59       1760.79    
   2  0.822787     -0.195058      -7.89561       7.89561       1777.11       1785.01    
   3  0.320831E-01  -3.43942      -139.222       139.222       1765.83       1905.06    
   4  0.224034      -1.49596      -60.5539       60.5539       1776.18       1836.73    
   5  0.200770      -1.60559      -64.9917       64.9917       1841.83       1906.82    
   6  0.983846     -0.162863E-01 -0.659241      0.659241       1852.82       1853.48    
   7  0.762274     -0.271449      -10.9878       10.9878       1798.54       1809.53    
   8  0.872649     -0.136221      -5.51402       5.51402       1795.34       1800.86    
   9  0.366891      -1.00269      -40.5872       40.5872       1913.70       1954.29    
  10  0.800852     -0.222079      -8.98940       8.98940       1886.07       1895.06    
  11  0.755695     -0.280117      -11.3387       11.3387       1913.96       1925.30    
  12  0.595174     -0.518902      -21.0043       21.0043       1835.62       1856.62    
  13  0.316509      -1.15040      -46.5664       46.5664       1787.50       1834.07    
  14  0.847901     -0.164991      -6.67855       6.67855       1908.00       1914.68    
  15  0.116195      -2.15248      -87.1289       87.1289       1862.49       1949.62    
  16  0.121963      -2.10403      -85.1678       85.1678       1929.90       2015.07    
  17  0.298485      -1.20903      -48.9397       48.9397       1879.41       1928.35    
  18  0.698751     -0.358461      -14.5099       14.5099       1925.45       1939.96    
  19  0.248186      -1.39358      -56.4096       56.4096       1904.36       1960.77    
  20  0.717251     -0.332329      -13.4521       13.4521       1922.56       1936.01    
  21  0.591856     -0.524491      -21.2305       21.2305       1911.00       1932.23    
  22  0.780177E-01  -2.55082      -103.253       103.253       1907.59       2010.84    
  23  0.314281      -1.15747      -46.8524       46.8524       1957.84       2004.69    
  24  0.565423E-01  -2.87277      -116.285       116.285       1952.51       2068.80    
  25  0.964829     -0.358044E-01  -1.44930       1.44930       1965.45       1966.90    
  26  0.900157     -0.105186      -4.25777       4.25777       1966.08       1970.34    
  27  0.656998     -0.420074      -17.0039       17.0039       1979.33       1996.34    
  28  0.888436E-01  -2.42088      -97.9931       97.9931       1997.51       2095.50    
  29  0.853838     -0.158014      -6.39615       6.39615       1952.21       1958.61    
  30  0.704842     -0.349782      -14.1586       14.1586       1962.55       1976.71    
  31  0.890111     -0.116409      -4.71203       4.71203       2007.43       2012.14    
  32  0.424397     -0.857087      -34.6934       34.6934       1963.44       1998.13    
  33  0.959371     -0.414778E-01  -1.67895       1.67895       1926.23       1927.91    
  34  0.323832      -1.12753      -45.6406       45.6406       2002.85       2048.49    
  35  0.943913     -0.577217E-01  -2.33648       2.33648       2025.73       2028.07    
  36  0.119048      -2.12823      -86.1470       86.1470       2011.14       2097.29    
  37  0.427842E-01  -3.15159      -127.571       127.571       2010.04       2137.61    
  38  0.433544     -0.835761      -33.8302       33.8302       2026.66       2060.49    
  39  0.773173     -0.257253      -10.4132       10.4132       2033.28       2043.70    
  40  0.455657     -0.786014      -31.8165       31.8165       2033.22       2065.04    
  41  0.362132      -1.01575      -41.1157       41.1157       2049.88       2091.00    
  42  0.775394     -0.254384      -10.2970       10.2970       2074.00       2084.30    
  43  0.889906     -0.116639      -4.72136       4.72136       1994.14       1998.86    
  44  0.415923     -0.877255      -35.5098       35.5098       2033.10       2068.61    
  45  0.374532E-01  -3.28466      -132.958       132.958       2095.76       2228.72    
  46  0.904805     -0.100036      -4.04929       4.04929       2100.54       2104.59    
  47  0.130905      -2.03328      -82.3039       82.3039       2101.82       2184.12    
  48  0.951733     -0.494710E-01  -2.00250       2.00250       2118.77       2120.77    
  49  0.720673     -0.327570      -13.2595       13.2595       2096.94       2110.20    
  50  0.425150     -0.855314      -34.6217       34.6217       2121.43       2156.05    
  51  0.464059     -0.767744      -31.0770       31.0770       2042.25       2073.33    
  52  0.822031     -0.195978      -7.93285       7.93285       1984.75       1992.68    
  53  0.325542      -1.12226      -45.4274       45.4274       2173.41       2218.84    
  54  0.701043     -0.355186      -14.3773       14.3773       2122.33       2136.71    
  55  0.135013      -2.00239      -81.0532       81.0532       2141.09       2222.14    
  56  0.911632     -0.925193E-01  -3.74503       3.74503       2131.53       2135.28    
  57  0.172993      -1.75450      -71.0194       71.0194       2164.62       2235.64    
  58  0.401556     -0.912409      -36.9328       36.9328       2145.97       2182.90    
loop,thermsimp(1:2)       81   43.2036       7.89561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307       1901.78         68.70          1.20         39.03          0.24          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1901.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       81
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       82
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      306     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -23.7278       23.7278       1717.59       1741.32    
   2  0.926592     -0.762421E-01  -3.08615       3.08615       1777.11       1780.20    
   3  0.766762     -0.265579      -10.7502       10.7502       1795.34       1806.09    
   4  0.627980     -0.465247      -18.8324       18.8324       1798.54       1817.37    
   5  0.647527     -0.434594      -17.5916       17.5916       1787.50       1805.10    
   6  0.639464     -0.447125      -18.0989       18.0989       1776.18       1794.28    
   7  0.168437      -1.78119      -72.0997       72.0997       1852.82       1924.92    
   8  0.725133     -0.321400      -13.0097       13.0097       1835.62       1848.63    
   9  0.620073     -0.477917      -19.3453       19.3453       1886.07       1905.42    
  10  0.837394     -0.177461      -7.18331       7.18331       1765.83       1773.02    
  11  0.763326     -0.270070      -10.9320       10.9320       1841.83       1852.76    
  12  0.216703      -1.52923      -61.9006       61.9006       1908.00       1969.91    
  13  0.846730     -0.166373      -6.73451       6.73451       1913.96       1920.69    
  14  0.712127     -0.339499      -13.7424       13.7424       1926.23       1939.98    
  15  0.731222     -0.313039      -12.6713       12.6713       1879.41       1892.09    
  16  0.131329      -2.03005      -82.1731       82.1731       1911.00       1993.17    
  17  0.946517     -0.549662E-01  -2.22494       2.22494       1922.56       1924.79    
  18  0.303743      -1.19157      -48.2329       48.2329       1925.45       1973.69    
  19  0.452199     -0.793633      -32.1249       32.1249       1862.49       1894.62    
  20  0.176302      -1.73556      -70.2524       70.2524       1913.70       1983.96    
  21  0.569871     -0.562345      -22.7628       22.7628       1952.21       1974.98    
  22  0.267873      -1.31724      -53.3198       53.3198       1904.36       1957.68    
  23  0.295877      -1.21781      -49.2949       49.2949       1965.45       2014.75    
  24  0.658567     -0.417689      -16.9073       16.9073       1966.08       1982.99    
  25  0.633120     -0.457096      -18.5025       18.5025       1962.55       1981.05    
  26  0.655522     -0.422324      -17.0950       17.0950       1984.75       2001.84    
  27  0.532295     -0.630558      -25.5239       25.5239       1979.33       2004.86    
  28  0.611209     -0.492317      -19.9282       19.9282       1963.44       1983.37    
  29  0.768812E-01  -2.56549      -103.847       103.847       1994.14       2097.99    
  30  0.845132     -0.168262      -6.81096       6.81096       1957.84       1964.65    
  31  0.133696      -2.01219      -81.4499       81.4499       1907.59       1989.04    
  32  0.850522E-01  -2.46449      -99.7584       99.7584       2007.43       2107.19    
  33  0.901960     -0.103185      -4.17675       4.17675       1929.90       1934.08    
  34  0.394454E-01  -3.23284      -130.860       130.860       2025.73       2156.59    
  35  0.152819      -1.87850      -76.0385       76.0385       2033.28       2109.32    
  36  0.951369     -0.498538E-01  -2.01800       2.01800       2002.85       2004.87    
  37  0.909075     -0.953273E-01  -3.85869       3.85869       2026.66       2030.51    
  38  0.552964     -0.592462      -23.9819       23.9819       2033.22       2057.20    
  39  0.904748     -0.100099      -4.05184       4.05184       2033.10       2037.15    
  40  0.434860     -0.832731      -33.7076       33.7076       1952.51       1986.22    
  41  0.807557E-01  -2.51633      -101.857       101.857       2042.25       2144.11    
  42  0.245089      -1.40614      -56.9180       56.9180       2074.00       2130.92    
  43  0.566857     -0.567648      -22.9774       22.9774       2049.88       2072.86    
  44  0.154441      -1.86794      -75.6111       75.6111       1997.51       2073.12    
  45  0.961849     -0.388974E-01  -1.57450       1.57450       2011.14       2012.72    
  46  0.267234      -1.31963      -53.4165       53.4165       2100.54       2153.96    
  47  0.170042      -1.77171      -71.7158       71.7158       2096.94       2168.66    
  48  0.796608     -0.227393      -9.20449       9.20449       2118.77       2127.97    
  49  0.474137     -0.746260      -30.2074       30.2074       2131.53       2161.74    
  50  0.164737      -1.80340      -72.9988       72.9988       2122.33       2195.33    
  51  0.728428     -0.316867      -12.8262       12.8262       2010.04       2022.87    
  52  0.259284      -1.34983      -54.6389       54.6389       2121.43       2176.07    
  53  0.932415     -0.699773E-01  -2.83256       2.83256       2145.97       2148.80    
  54  0.905731     -0.990126E-01  -4.00787       4.00787       2101.82       2105.83    
  55  0.975166     -0.251472E-01  -1.01791       1.01791       2173.41       2174.43    
  56  0.312519      -1.16309      -47.0799       47.0799       2141.09       2188.17    
  57  0.363326      -1.01246      -40.9825       40.9825       2095.76       2136.74    
  58  0.633693     -0.456191      -18.4659       18.4659       1901.78       1920.25    
loop,thermsimp(1:2)       82   23.7278       3.08615    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308       1774.12         68.75          1.20         39.14          0.26          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309       2321.89         68.89          1.16         39.50          0.17          0.05        109.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1774.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       82
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       83
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      308     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -19.3134       19.3134       1717.59       1736.90    
   2  0.835522     -0.179699      -7.27391       7.27391       1765.83       1773.11    
   3  0.626661     -0.467350      -18.9175       18.9175       1777.11       1796.03    
   4  0.197939      -1.61980      -65.5666       65.5666       1776.18       1841.75    
   5  0.842637     -0.171219      -6.93065       6.93065       1787.50       1794.43    
   6  0.873669     -0.135053      -5.46674       5.46674       1795.34       1800.81    
   7  0.298180E-01  -3.51264      -142.186       142.186       1798.54       1940.72    
   8  0.548374     -0.600797      -24.3193       24.3193       1835.62       1859.94    
   9  0.407469E-01  -3.20037      -129.546       129.546       1841.83       1971.37    
  10  0.210105E-02  -6.16532      -249.562       249.562       1879.41       2128.98    
  11  0.631577     -0.459536      -18.6012       18.6012       1862.49       1881.09    
  12  0.944026     -0.576013E-01  -2.33160       2.33160       1886.07       1888.41    
  13  0.492775     -0.707703      -28.6466       28.6466       1901.78       1930.43    
  14  0.195107      -1.63421      -66.1500       66.1500       1913.96       1980.11    
  15  0.775688     -0.254005      -10.2817       10.2817       1922.56       1932.84    
  16  0.763907     -0.269310      -10.9012       10.9012       1852.82       1863.72    
  17  0.797499     -0.226275      -9.15922       9.15922       1929.90       1939.06    
  18  0.639217     -0.447511      -18.1145       18.1145       1926.23       1944.35    
  19  0.775225     -0.254602      -10.3059       10.3059       1904.36       1914.67    
  20  0.680633     -0.384733      -15.5733       15.5733       1957.84       1973.41    
  21  0.532184     -0.630766      -25.5324       25.5324       1908.00       1933.54    
  22  0.843009     -0.170778      -6.91281       6.91281       1925.45       1932.37    
  23  0.943186     -0.584913E-01  -2.36763       2.36763       1952.21       1954.58    
  24  0.601611     -0.508143      -20.5688       20.5688       1962.55       1983.12    
  25  0.259021      -1.35084      -54.6799       54.6799       1966.08       2020.76    
  26  0.855132     -0.156500      -6.33486       6.33486       1963.44       1969.78    
  27  0.351229      -1.04632      -42.3532       42.3532       1913.70       1956.06    
  28  0.950362     -0.509122E-01  -2.06084       2.06084       1952.51       1954.57    
  29  0.447301     -0.804524      -32.5658       32.5658       1907.59       1940.15    
  30  0.325509      -1.12237      -45.4315       45.4315       1911.00       1956.43    
  31  0.717010     -0.332666      -13.4658       13.4658       1984.75       1998.21    
  32  0.676718     -0.390500      -15.8068       15.8068       1979.33       1995.14    
  33  0.493623     -0.705983      -28.5770       28.5770       2002.85       2031.43    
  34  0.155805E-01  -4.16174      -168.460       168.460       2011.14       2179.60    
  35  0.417708     -0.872973      -35.3365       35.3365       1965.45       2000.79    
  36  0.395067     -0.928699      -37.5922       37.5922       2010.04       2047.63    
  37  0.977835     -0.224139E-01 -0.907277      0.907277       2026.66       2027.56    
  38  0.603414     -0.505151      -20.4477       20.4477       2033.10       2053.54    
  39  0.173810      -1.74979      -70.8286       70.8286       2033.22       2104.05    
  40  0.979719     -0.204895E-01 -0.829380      0.829380       2049.88       2050.71    
  41  0.234071      -1.45213      -58.7798       58.7798       1997.51       2056.29    
  42  0.264051      -1.33161      -53.9015       53.9015       1994.14       2048.04    
  43  0.756353     -0.279247      -11.3035       11.3035       2101.82       2113.12    
  44  0.980782     -0.194046E-01 -0.785465      0.785465       2007.43       2008.21    
  45  0.444591E-01  -3.11319      -126.017       126.017       2033.28       2159.30    
  46  0.276895      -1.28412      -51.9789       51.9789       2118.77       2170.75    
  47  0.754338     -0.281915      -11.4115       11.4115       2074.00       2085.42    
  48  0.288496      -1.24308      -50.3176       50.3176       2095.76       2146.08    
  49  0.945547     -0.559915E-01  -2.26644       2.26644       2042.25       2044.52    
  50  0.698722     -0.358502      -14.5116       14.5116       2145.97       2160.48    
  51  0.586821     -0.533035      -21.5764       21.5764       2100.54       2122.12    
  52  0.173241      -1.75307      -70.9614       70.9614       2025.73       2096.69    
  53  0.157974      -1.84532      -74.6957       74.6957       2131.53       2206.23    
  54  0.789304     -0.236604      -9.57733       9.57733       2096.94       2106.52    
  55  0.351815      -1.04465      -42.2856       42.2856       2173.41       2215.70    
  56  0.109517      -2.21167      -89.5248       89.5248       2121.43       2210.95    
  57  0.884115     -0.123168      -4.98564       4.98564       2141.09       2146.07    
  58  0.590256     -0.527198      -21.3401       21.3401       1774.12       1795.46    
loop,thermsimp(1:2)       83   19.3134       7.27391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       1782.09         68.79          1.18         39.00          0.31          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1782.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       83
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       84
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      309     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -22.4887       22.4887       1717.59       1740.08    
   2  0.583943E-01  -2.84054      -114.980       114.980       1765.83       1880.81    
   3  0.377108     -0.975224      -39.4754       39.4754       1787.50       1826.98    
   4  0.117758      -2.13912      -86.5881       86.5881       1774.12       1860.71    
   5  0.531627     -0.631812      -25.5747       25.5747       1777.11       1802.69    
   6  0.348101      -1.05526      -42.7152       42.7152       1795.34       1838.06    
   7  0.713050     -0.338204      -13.6899       13.6899       1776.18       1789.87    
   8  0.895286     -0.110612      -4.47739       4.47739       1835.62       1840.09    
   9  0.873863     -0.134831      -5.45774       5.45774       1852.82       1858.28    
  10  0.225074      -1.49132      -60.3663       60.3663       1862.49       1922.86    
  11  0.542220     -0.612083      -24.7761       24.7761       1886.07       1910.85    
  12  0.262707      -1.33672      -54.1081       54.1081       1904.36       1958.47    
  13  0.864358E-01  -2.44835      -99.1052       99.1052       1901.78       2000.89    
  14  0.468331     -0.758581      -30.7061       30.7061       1925.45       1956.16    
  15  0.896509     -0.109247      -4.42214       4.42214       1922.56       1926.98    
  16  0.169842E-01  -4.07547      -164.968       164.968       1908.00       2072.97    
  17  0.980158     -0.200410E-01 -0.811226      0.811226       1929.90       1930.72    
  18  0.252821      -1.37507      -55.6606       55.6606       1907.59       1963.25    
  19  0.556823     -0.585507      -23.7004       23.7004       1798.54       1822.24    
  20  0.520304     -0.653342      -26.4462       26.4462       1926.23       1952.68    
  21  0.956705E-01  -2.34685      -94.9964       94.9964       1952.51       2047.51    
  22  0.458762     -0.779224      -31.5417       31.5417       1952.21       1983.75    
  23  0.684654     -0.378842      -15.3349       15.3349       1913.70       1929.04    
  24  0.749393     -0.288492      -11.6777       11.6777       1911.00       1922.68    
  25  0.112724      -2.18282      -88.3567       88.3567       1963.44       2051.80    
  26  0.642114     -0.442989      -17.9315       17.9315       1841.83       1859.76    
  27  0.881888     -0.125691      -5.08774       5.08774       1957.84       1962.93    
  28  0.933845     -0.684452E-01  -2.77055       2.77055       1913.96       1916.73    
  29  0.124482      -2.08359      -84.3403       84.3403       1962.55       2046.89    
  30  0.189487      -1.66344      -67.3331       67.3331       1979.33       2046.66    
  31  0.526869     -0.640804      -25.9387       25.9387       1984.75       2010.69    
  32  0.490162     -0.713020      -28.8619       28.8619       1965.45       1994.32    
  33  0.292049      -1.23083      -49.8221       49.8221       2007.43       2057.25    
  34  0.646685     -0.435896      -17.6443       17.6443       1966.08       1983.73    
  35  0.738289     -0.303420      -12.2819       12.2819       2026.66       2038.94    
  36  0.379268     -0.969513      -39.2443       39.2443       2002.85       2042.10    
  37  0.691037     -0.369562      -14.9592       14.9592       2042.25       2057.21    
  38  0.566288     -0.568653      -23.0181       23.0181       2010.04       2033.06    
  39  0.130734      -2.03459      -82.3568       82.3568       1994.14       2076.50    
  40  0.298876      -1.20773      -48.8867       48.8867       2049.88       2098.77    
  41  0.369194     -0.996434      -40.3340       40.3340       2033.10       2073.43    
  42  0.291325      -1.23331      -49.9225       49.9225       1997.51       2047.43    
  43  0.828296     -0.188384      -7.62548       7.62548       2074.00       2081.63    
  44  0.540492E-01  -2.91786      -118.110       118.110       2025.73       2143.84    
  45  0.979889     -0.203162E-01 -0.822367      0.822367       2033.22       2034.04    
  46  0.411533     -0.887866      -35.9393       35.9393       2096.94       2132.88    
  47  0.430635     -0.842495      -34.1028       34.1028       2101.82       2135.92    
  48  0.948338     -0.530447E-01  -2.14716       2.14716       2100.54       2102.69    
  49  0.400713E-02  -5.51968      -223.427       223.427       1879.41       2102.84    
  50  0.963092     -0.376065E-01  -1.52225       1.52225       2141.09       2142.61    
  51  0.101802      -2.28472      -92.4818       92.4818       2095.76       2188.24    
  52  0.161305      -1.82446      -73.8511       73.8511       2033.28       2107.14    
  53  0.579295     -0.545944      -22.0989       22.0989       2145.97       2168.06    
  54  0.246178      -1.40170      -56.7386       56.7386       2118.77       2175.51    
  55  0.783155     -0.244425      -9.89389       9.89389       2011.14       2021.04    
  56  0.643375     -0.441028      -17.8521       17.8521       2131.53       2149.39    
  57  0.440007     -0.820964      -33.2312       33.2312       2121.43       2154.66    
  58  0.478097     -0.737941      -29.8706       29.8706       1782.09       1811.96    
loop,thermsimp(1:2)       84   22.4887       114.980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       1928.88         68.74          1.20         38.93          0.23          0.05        109.15
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1928.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       84
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       85
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      310     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01  -2.64694       2.64694       1717.59       1720.23    
   2  0.765516     -0.267206      -10.8160       10.8160       1776.18       1787.00    
   3  0.899266     -0.106176      -4.29782       4.29782       1777.11       1781.41    
   4  0.953341     -0.477822E-01  -1.93414       1.93414       1782.09       1784.02    
   5  0.642356     -0.442612      -17.9162       17.9162       1798.54       1816.45    
   6  0.265713      -1.32534      -53.6475       53.6475       1787.50       1841.15    
   7  0.379937     -0.967749      -39.1729       39.1729       1795.34       1834.51    
   8  0.449606     -0.799384      -32.3577       32.3577       1835.62       1867.97    
   9  0.810725     -0.209826      -8.49342       8.49342       1852.82       1861.31    
  10  0.218977      -1.51879      -61.4781       61.4781       1841.83       1903.31    
  11  0.456613     -0.783919      -31.7317       31.7317       1774.12       1805.85    
  12  0.439289E-02  -5.42777      -219.707       219.707       1765.83       1985.54    
  13  0.710409     -0.341914      -13.8401       13.8401       1886.07       1899.91    
  14  0.385315     -0.953695      -38.6040       38.6040       1913.96       1952.56    
  15  0.116701      -2.14814      -86.9533       86.9533       1911.00       1997.95    
  16  0.985237     -0.148728E-01 -0.602024      0.602024       1862.49       1863.10    
  17  0.856588     -0.154798      -6.26595       6.26595       1922.56       1928.83    
  18  0.155419      -1.86163      -75.3556       75.3556       1913.70       1989.06    
  19  0.257525      -1.35664      -54.9145       54.9145       1929.90       1984.82    
  20  0.548716     -0.600174      -24.2940       24.2940       1926.23       1950.53    
  21  0.589698     -0.528145      -21.3784       21.3784       1925.45       1946.83    
  22  0.884364     -0.122887      -4.97424       4.97424       1904.36       1909.34    
  23  0.871018E-01  -2.44068      -98.7946       98.7946       1957.84       2056.64    
  24  0.486795     -0.719912      -29.1409       29.1409       1907.59       1936.73    
  25  0.161417      -1.82376      -73.8229       73.8229       1966.08       2039.91    
  26  0.598774     -0.512871      -20.7601       20.7601       1952.21       1972.97    
  27  0.483527     -0.726647      -29.4135       29.4135       1965.45       1994.87    
  28  0.715961     -0.334130      -13.5250       13.5250       1901.78       1915.31    
  29  0.771801     -0.259029      -10.4850       10.4850       1984.75       1995.23    
  30  0.458713     -0.779330      -31.5460       31.5460       2011.14       2042.69    
  31  0.235181      -1.44740      -58.5884       58.5884       2010.04       2068.63    
  32  0.488220     -0.716988      -29.0225       29.0225       2033.22       2062.24    
  33  0.365473      -1.00656      -40.7440       40.7440       2026.66       2067.40    
  34  0.191311      -1.65386      -66.9454       66.9454       2002.85       2069.80    
  35  0.484999     -0.723609      -29.2905       29.2905       1979.33       2008.62    
  36  0.799086     -0.224286      -9.07873       9.07873       1962.55       1971.63    
  37  0.811458     -0.208923      -8.45685       8.45685       1997.51       2005.96    
  38  0.829885E-01  -2.48905      -100.753       100.753       1952.51       2053.26    
  39  0.731085     -0.313226      -12.6789       12.6789       1963.44       1976.12    
  40  0.854012     -0.157810      -6.38787       6.38787       2042.25       2048.64    
  41  0.699629     -0.357205      -14.4591       14.4591       2007.43       2021.89    
  42  0.918965     -0.845069E-01  -3.42070       3.42070       1908.00       1911.43    
  43  0.463498     -0.768952      -31.1259       31.1259       2033.10       2064.22    
  44  0.758690E-01  -2.57875      -104.383       104.383       1994.14       2098.52    
  45  0.577757     -0.548602      -22.2065       22.2065       2074.00       2096.21    
  46  0.897332     -0.108329      -4.38498       4.38498       2049.88       2054.27    
  47  0.522547     -0.649040      -26.2721       26.2721       2100.54       2126.81    
  48  0.408730E-01  -3.19729      -129.421       129.421       1879.41       2008.84    
  49  0.244793      -1.40734      -56.9668       56.9668       2033.28       2090.25    
  50  0.503867     -0.685443      -27.7456       27.7456       2096.94       2124.69    
  51  0.268075      -1.31649      -53.2893       53.2893       2101.82       2155.11    
  52  0.502965     -0.687236      -27.8181       27.8181       2141.09       2168.91    
  53  0.204120      -1.58905      -64.3220       64.3220       2025.73       2090.05    
  54  0.815323     -0.204171      -8.26448       8.26448       2131.53       2139.80    
  55  0.197358      -1.62274      -65.6857       65.6857       2121.43       2187.11    
  56  0.754254     -0.282026      -11.4159       11.4159       2145.97       2157.38    
  57  0.693043E-01  -2.66925      -108.047       108.047       2118.77       2226.81    
  58  0.913327     -0.906616E-01  -3.66983       3.66983       1928.88       1932.55    
loop,thermsimp(1:2)       85   2.64694       10.8160    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       2145.86         68.81          1.17         38.80          0.30          0.05        109.12
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2145.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       85
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       86
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      311     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -44.3408       44.3408       1717.59       1761.93    
   2  0.140144      -1.96508      -79.5433       79.5433       1777.11       1856.65    
   3  0.520913     -0.652172      -26.3988       26.3988       1782.09       1808.49    
   4  0.628337     -0.464678      -18.8094       18.8094       1776.18       1794.99    
   5  0.203324      -1.59296      -64.4802       64.4802       1774.12       1838.60    
   6  0.481205     -0.731462      -29.6083       29.6083       1798.54       1828.15    
   7  0.948759     -0.526009E-01  -2.12920       2.12920       1795.34       1797.47    
   8  0.251825      -1.37902      -55.8204       55.8204       1787.50       1843.32    
   9  0.363806      -1.01114      -40.9291       40.9291       1852.82       1893.75    
  10  0.465077     -0.765552      -30.9883       30.9883       1862.49       1893.48    
  11  0.580920     -0.543143      -21.9855       21.9855       1835.62       1857.60    
  12  0.957129     -0.438167E-01  -1.77363       1.77363       1886.07       1887.85    
  13  0.345007      -1.06419      -43.0766       43.0766       1841.83       1884.91    
  14  0.177852E-01  -4.02939      -163.103       163.103       1904.36       2067.47    
  15  0.843779     -0.169864      -6.87581       6.87581       1908.00       1914.88    
  16  0.765452     -0.267288      -10.8194       10.8194       1901.78       1912.60    
  17  0.453925     -0.789824      -31.9707       31.9707       1922.56       1954.53    
  18  0.378234     -0.972243      -39.3548       39.3548       1928.88       1968.23    
  19  0.167312      -1.78790      -72.3710       72.3710       1907.59       1979.96    
  20  0.240345      -1.42568      -57.7091       57.7091       1925.45       1983.16    
  21  0.868226     -0.141303      -5.71972       5.71972       1926.23       1931.95    
  22  0.907002     -0.976102E-01  -3.95110       3.95110       1913.96       1917.91    
  23  0.433040     -0.836925      -33.8773       33.8773       1962.55       1996.43    
  24  0.291080      -1.23416      -49.9566       49.9566       1952.21       2002.17    
  25  0.391091     -0.938815      -38.0016       38.0016       1963.44       2001.44    
  26  0.541803     -0.612853      -24.8073       24.8073       1929.90       1954.71    
  27  0.494251     -0.704711      -28.5255       28.5255       1765.83       1794.36    
  28  0.617376     -0.482277      -19.5218       19.5218       1913.70       1933.23    
  29  0.919515     -0.839094E-01  -3.39651       3.39651       1965.45       1968.85    
  30  0.836216     -0.178868      -7.24028       7.24028       1984.75       1991.99    
  31  0.436173     -0.829716      -33.5855       33.5855       1911.00       1944.58    
  32  0.175211      -1.74176      -70.5037       70.5037       1997.51       2068.01    
  33  0.304297      -1.18975      -48.1591       48.1591       1979.33       2027.49    
  34  0.996125     -0.388259E-02 -0.157161      0.157161       1879.41       1879.57    
  35  0.146253      -1.92242      -77.8162       77.8162       2007.43       2085.24    
  36  0.110666      -2.20124      -89.1023       89.1023       1966.08       2055.19    
  37  0.481190E-01  -3.03408      -122.814       122.814       2011.14       2133.96    
  38  0.342728      -1.07082      -43.3449       43.3449       2042.25       2085.60    
  39  0.998409E-01  -2.30418      -93.2692       93.2692       1952.51       2045.78    
  40  0.509248     -0.674821      -27.3156       27.3156       2049.88       2077.20    
  41  0.974159     -0.261804E-01  -1.05974       1.05974       1957.84       1958.90    
  42  0.950347     -0.509279E-01  -2.06148       2.06148       2033.22       2035.28    
  43  0.333494      -1.09813      -44.4505       44.4505       2033.10       2077.55    
  44  0.914660     -0.892024E-01  -3.61076       3.61076       2026.66       2030.27    
  45  0.249678      -1.38758      -56.1671       56.1671       2010.04       2066.21    
  46  0.512508     -0.668440      -27.0573       27.0573       2002.85       2029.91    
  47  0.592185     -0.523937      -21.2081       21.2081       2025.73       2046.94    
  48  0.931089     -0.714008E-01  -2.89018       2.89018       2033.28       2036.18    
  49  0.638700     -0.448321      -18.1473       18.1473       2074.00       2092.15    
  50  0.563786     -0.573081      -23.1974       23.1974       1994.14       2017.34    
  51  0.136824      -1.98906      -80.5138       80.5138       2096.94       2177.46    
  52  0.806361     -0.215224      -8.71189       8.71189       2100.54       2109.25    
  53  0.106433      -2.24024      -90.6811       90.6811       2131.53       2222.22    
  54  0.637638     -0.449985      -18.2146       18.2146       2101.82       2120.04    
  55  0.677480     -0.389375      -15.7612       15.7612       2145.97       2161.73    
  56  0.533764     -0.627801      -25.4123       25.4123       2141.09       2166.50    
  57  0.879213     -0.128728      -5.21071       5.21071       2121.43       2126.64    
  58  0.260545E-01  -3.64756      -147.647       147.647       2145.86       2293.51    
loop,thermsimp(1:2)       86   44.3408       79.5433    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313       2118.77         68.68          1.22         39.51          0.00          0.05        109.45
Just calling func    0   0        109.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2118.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       86
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       87
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      312     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -125.786       125.786       1717.59       1843.37    
   2  0.682805     -0.381545      -15.4443       15.4443       1765.83       1781.28    
   3  0.699780     -0.356989      -14.4503       14.4503       1776.18       1790.63    
   4  0.515086     -0.663422      -26.8542       26.8542       1795.34       1822.20    
   5  0.402461     -0.910157      -36.8416       36.8416       1782.09       1818.93    
   6  0.652803     -0.426480      -17.2632       17.2632       1798.54       1815.80    
   7  0.483213     -0.727297      -29.4398       29.4398       1774.12       1803.56    
   8  0.873684     -0.135037      -5.46606       5.46606       1787.50       1792.97    
   9  0.142648      -1.94738      -78.8266       78.8266       1777.11       1855.94    
  10  0.844357     -0.169180      -6.84814       6.84814       1835.62       1842.47    
  11  0.154187      -1.86959      -75.6778       75.6778       1879.41       1955.09    
  12  0.437314E-01  -3.12969      -126.685       126.685       1841.83       1968.51    
  13  0.455393E-02  -5.39176      -218.250       218.250       1886.07       2104.32    
  14  0.236800      -1.44054      -58.3106       58.3106       1862.49       1920.80    
  15  0.660181     -0.415241      -16.8083       16.8083       1852.82       1869.63    
  16  0.652586     -0.426813      -17.2767       17.2767       1901.78       1919.06    
  17  0.153101      -1.87666      -75.9640       75.9640       1908.00       1983.97    
  18  0.753412     -0.283143      -11.4611       11.4611       1913.96       1925.42    
  19  0.240839      -1.42363      -57.6260       57.6260       1926.23       1983.86    
  20  0.684622     -0.378888      -15.3368       15.3368       1913.70       1929.04    
  21  0.243018      -1.41462      -57.2614       57.2614       1911.00       1968.26    
  22  0.815539     -0.203906      -8.25378       8.25378       1922.56       1930.82    
  23  0.589355     -0.528726      -21.4019       21.4019       1929.90       1951.31    
  24  0.243009      -1.41466      -57.2630       57.2630       1957.84       2015.10    
  25  0.821886     -0.196154      -7.93999       7.93999       1928.88       1936.82    
  26  0.261401      -1.34170      -54.3098       54.3098       1965.45       2019.76    
  27  0.571134     -0.560131      -22.6732       22.6732       1907.59       1930.26    
  28  0.406429E-01  -3.20293      -129.649       129.649       1925.45       2055.10    
  29  0.341463      -1.07451      -43.4946       43.4946       1984.75       2028.24    
  30  0.252643      -1.37578      -55.6892       55.6892       1962.55       2018.24    
  31  0.503366     -0.686439      -27.7859       27.7859       1963.44       1991.23    
  32  0.247804      -1.39512      -56.4720       56.4720       1952.21       2008.69    
  33  0.902392     -0.102706      -4.15736       4.15736       1994.14       1998.30    
  34  0.198330E-01  -3.92041      -158.692       158.692       1979.33       2138.02    
  35  0.695627     -0.362942      -14.6913       14.6913       2002.85       2017.54    
  36  0.833441     -0.182192      -7.37484       7.37484       2026.66       2034.03    
  37  0.720954     -0.327181      -13.2437       13.2437       2033.22       2046.46    
  38  0.155604      -1.86044      -75.3076       75.3076       2033.28       2108.59    
  39  0.496580E-01  -3.00260      -121.540       121.540       1952.51       2074.05    
  40  0.804644     -0.217356      -8.79820       8.79820       2025.73       2034.53    
  41  0.329241      -1.11097      -44.9700       44.9700       1966.08       2011.05    
  42  0.889596     -0.116988      -4.73548       4.73548       2010.04       2014.77    
  43  0.857341     -0.153920      -6.23042       6.23042       1904.36       1910.59    
  44  0.238258      -1.43440      -58.0621       58.0621       1997.51       2055.57    
  45  0.998437     -0.156448E-02 -0.633275E-01  0.633275E-01   2049.88       2049.95    
  46  0.280889      -1.26979      -51.3992       51.3992       2033.10       2084.50    
  47  0.518450     -0.656912      -26.5907       26.5907       2007.43       2034.02    
  48  0.348786      -1.05330      -42.6357       42.6357       2042.25       2084.89    
  49  0.250207      -1.38547      -56.0814       56.0814       2074.00       2130.09    
  50  0.442136     -0.816138      -33.0359       33.0359       2100.54       2133.58    
  51  0.881002     -0.126696      -5.12843       5.12843       2101.82       2106.95    
  52  0.903963     -0.100967      -4.08697       4.08697       2121.43       2125.51    
  53  0.227541      -1.48043      -59.9252       59.9252       2011.14       2071.07    
  54  0.468734     -0.757719      -30.6712       30.6712       2145.97       2176.64    
  55  0.622565E-01  -2.77649      -112.388       112.388       2141.09       2253.48    
  56  0.650607     -0.429850      -17.3996       17.3996       2096.94       2114.34    
  57  0.947139     -0.543094E-01  -2.19835       2.19835       2131.53       2133.73    
  58  0.942852     -0.588460E-01  -2.38199       2.38199       2118.77       2121.15    
loop,thermsimp(1:2)       87   125.786       15.4443    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314       2135.80         68.66          1.19         39.05          0.30          0.05        109.25
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2135.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       87
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       88
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      313     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -30.4701       30.4701       1765.83       1796.30    
   2  0.531040     -0.632917      -25.6194       25.6194       1776.18       1801.80    
   3  0.592986E-01  -2.82517      -114.358       114.358       1787.50       1901.86    
   4  0.247694      -1.39556      -56.4900       56.4900       1774.12       1830.61    
   5  0.131832      -2.02623      -82.0183       82.0183       1798.54       1880.56    
   6  0.928797E-01  -2.37645      -96.1947       96.1947       1782.09       1878.28    
   7  0.638590     -0.448492      -18.1542       18.1542       1795.34       1813.50    
   8  0.220145      -1.51347      -61.2628       61.2628       1835.62       1896.88    
   9  0.764323     -0.268765      -10.8792       10.8792       1717.59       1728.47    
  10  0.223429      -1.49866      -60.6632       60.6632       1777.11       1837.77    
  11  0.705665     -0.348615      -14.1113       14.1113       1852.82       1866.93    
  12  0.812667     -0.207434      -8.39659       8.39659       1904.36       1912.76    
  13  0.344167      -1.06663      -43.1753       43.1753       1901.78       1944.96    
  14  0.691720     -0.368573      -14.9192       14.9192       1862.49       1877.41    
  15  0.601584     -0.508189      -20.5706       20.5706       1913.96       1934.53    
  16  0.323598      -1.12825      -45.6698       45.6698       1913.70       1959.37    
  17  0.536181     -0.623284      -25.2295       25.2295       1907.59       1932.82    
  18  0.224445      -1.49412      -60.4796       60.4796       1922.56       1983.04    
  19  0.967837     -0.326916E-01  -1.32330       1.32330       1928.88       1930.20    
  20  0.982234     -0.179257E-01 -0.725604      0.725604       1929.90       1930.63    
  21  0.656459     -0.420894      -17.0371       17.0371       1879.41       1896.45    
  22  0.138036      -1.98024      -80.1567       80.1567       1911.00       1991.15    
  23  0.698821     -0.358360      -14.5058       14.5058       1841.83       1856.33    
  24  0.603237     -0.505446      -20.4596       20.4596       1926.23       1946.69    
  25  0.253585      -1.37205      -55.5385       55.5385       1908.00       1963.54    
  26  0.404885     -0.904153      -36.5986       36.5986       1963.44       2000.04    
  27  0.802083     -0.220543      -8.92720       8.92720       1994.14       2003.07    
  28  0.756447     -0.279123      -11.2984       11.2984       1952.21       1963.51    
  29  0.390929     -0.939231      -38.0185       38.0185       1966.08       2004.10    
  30  0.260757      -1.34417      -54.4096       54.4096       2010.04       2064.45    
  31  0.177681      -1.72776      -69.9370       69.9370       1957.84       2027.78    
  32  0.806362     -0.215223      -8.71186       8.71186       2002.85       2011.56    
  33  0.222380      -1.50337      -60.8537       60.8537       1962.55       2023.41    
  34  0.969986     -0.304736E-01  -1.23352       1.23352       1965.45       1966.69    
  35  0.417166     -0.874272      -35.3891       35.3891       1984.75       2020.14    
  36  0.212672      -1.54800      -62.6606       62.6606       2007.43       2070.09    
  37  0.141187      -1.95767      -79.2432       79.2432       2026.66       2105.90    
  38  0.750343     -0.287224      -11.6264       11.6264       2025.73       2037.36    
  39  0.628172     -0.464941      -18.8200       18.8200       2033.22       2052.04    
  40  0.466629     -0.762221      -30.8534       30.8534       2049.88       2080.74    
  41  0.120425      -2.11672      -85.6815       85.6815       1925.45       2011.13    
  42  0.179567      -1.71721      -69.5098       69.5098       1997.51       2067.02    
  43  0.209268      -1.56414      -63.3137       63.3137       2011.14       2074.46    
  44  0.730304E-01  -2.61688      -105.927       105.927       1952.51       2058.44    
  45  0.985392     -0.147157E-01 -0.595668      0.595668       2033.10       2033.69    
  46  0.726759E-01  -2.62175      -106.124       106.124       2042.25       2148.38    
  47  0.205943      -1.58016      -63.9621       63.9621       1886.07       1950.04    
  48  0.198791      -1.61550      -65.3928       65.3928       2101.82       2167.21    
  49  0.320500      -1.13787      -46.0592       46.0592       2033.28       2079.34    
  50  0.911267     -0.929191E-01  -3.76121       3.76121       2096.94       2100.70    
  51  0.153842      -1.87183      -75.7686       75.7686       2118.77       2194.54    
  52  0.152265      -1.88213      -76.1856       76.1856       2121.43       2197.61    
  53  0.396303     -0.925575      -37.4657       37.4657       2074.00       2111.47    
  54  0.964537     -0.361075E-01  -1.46157       1.46157       2100.54       2102.00    
  55  0.259986      -1.34713      -54.5294       54.5294       2131.53       2186.06    
  56  0.710828     -0.341325      -13.8163       13.8163       1979.33       1993.15    
  57  0.189878E-01  -3.96396      -160.454       160.454       2145.97       2306.42    
  58  0.960744     -0.400468E-01  -1.62103       1.62103       2135.80       2137.42    
loop,thermsimp(1:2)       88   30.4701       25.6194    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315       2112.42         68.55          1.25         39.25          0.03          0.05        109.12
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2112.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       88
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       89
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      314     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -42.4524       42.4524       1717.59       1760.04    
   2  0.650675     -0.429745      -17.3954       17.3954       1765.83       1783.23    
   3  0.849247     -0.163405      -6.61437       6.61437       1776.18       1782.79    
   4  0.910703     -0.935381E-01  -3.78627       3.78627       1795.34       1799.13    
   5  0.188892      -1.66658      -67.4603       67.4603       1774.12       1841.58    
   6  0.256564      -1.36038      -55.0658       55.0658       1777.11       1832.18    
   7  0.465488E-01  -3.06725      -124.157       124.157       1841.83       1965.99    
   8  0.824855     -0.192548      -7.79403       7.79403       1852.82       1860.61    
   9  0.730565     -0.313937      -12.7076       12.7076       1862.49       1875.20    
  10  0.888077     -0.118697      -4.80465       4.80465       1782.09       1786.89    
  11  0.898172     -0.107394      -4.34713       4.34713       1798.54       1802.89    
  12  0.314974      -1.15527      -46.7632       46.7632       1879.41       1926.18    
  13  0.247979      -1.39441      -56.4434       56.4434       1835.62       1892.06    
  14  0.330032E-01  -3.41115      -138.078       138.078       1787.50       1925.58    
  15  0.570783E-01  -2.86333      -115.903       115.903       1904.36       2020.27    
  16  0.694187     -0.365014      -14.7751       14.7751       1928.88       1943.65    
  17  0.314834      -1.15571      -46.7811       46.7811       1929.90       1976.69    
  18  0.917621     -0.859711E-01  -3.47997       3.47997       1907.59       1911.07    
  19  0.613858     -0.487991      -19.7531       19.7531       1913.96       1933.71    
  20  0.744084E-01  -2.59819      -105.170       105.170       1901.78       2006.95    
  21  0.454198     -0.789221      -31.9463       31.9463       1926.23       1958.18    
  22  0.118203E-01  -4.43793      -179.640       179.640       1886.07       2065.71    
  23  0.746996     -0.291695      -11.8073       11.8073       1913.70       1925.51    
  24  0.416160     -0.876686      -35.4868       35.4868       1952.21       1987.70    
  25  0.339178E-01  -3.38381      -136.971       136.971       1908.00       2044.98    
  26  0.824080     -0.193487      -7.83203       7.83203       1965.45       1973.29    
  27  0.589652     -0.528223      -21.3816       21.3816       1922.56       1943.94    
  28  0.680293     -0.385231      -15.5935       15.5935       1911.00       1926.59    
  29  0.864872E-01  -2.44776      -99.0812       99.0812       1979.33       2078.41    
  30  0.672988     -0.396027      -16.0305       16.0305       1963.44       1979.47    
  31  0.797049E-01  -2.52942      -102.387       102.387       1994.14       2096.53    
  32  0.831708     -0.184273      -7.45908       7.45908       1966.08       1973.54    
  33  0.280253E-01  -3.57465      -144.696       144.696       1925.45       2070.15    
  34  0.131717      -2.02710      -82.0536       82.0536       2002.85       2084.91    
  35  0.343675      -1.06806      -43.2333       43.2333       1984.75       2027.98    
  36  0.280745      -1.27031      -51.4200       51.4200       1962.55       2013.97    
  37  0.322275      -1.13235      -45.8357       45.8357       1957.84       2003.68    
  38  0.769830E-01  -2.56417      -103.793       103.793       2033.10       2136.89    
  39  0.851798     -0.160406      -6.49295       6.49295       2025.73       2032.22    
  40  0.864683     -0.145392      -5.88522       5.88522       2033.22       2039.11    
  41  0.157880      -1.84592      -74.7197       74.7197       1952.51       2027.23    
  42  0.371895     -0.989143      -40.0388       40.0388       2010.04       2050.08    
  43  0.861425     -0.149167      -6.03804       6.03804       1997.51       2003.54    
  44  0.778275E-01  -2.55326      -103.352       103.352       2007.43       2110.78    
  45  0.450106     -0.798272      -32.3127       32.3127       2011.14       2043.45    
  46  0.188928      -1.66639      -67.4527       67.4527       2033.28       2100.74    
  47  0.225391      -1.48992      -60.3094       60.3094       2049.88       2110.19    
  48  0.814689     -0.204949      -8.29597       8.29597       2096.94       2105.24    
  49  0.556109     -0.586791      -23.7523       23.7523       2100.54       2124.29    
  50  0.860351     -0.150415      -6.08856       6.08856       2026.66       2032.74    
  51  0.124594      -2.08269      -84.3038       84.3038       2074.00       2158.31    
  52  0.924630     -0.783615E-01  -3.17194       3.17194       2135.80       2138.97    
  53  0.463685     -0.768549      -31.1096       31.1096       2042.25       2073.36    
  54  0.719654     -0.328985      -13.3168       13.3168       2101.82       2115.14    
  55  0.740445     -0.300503      -12.1639       12.1639       2131.53       2143.70    
  56  0.948188     -0.532020E-01  -2.15353       2.15353       2118.77       2120.92    
  57  0.174315      -1.74689      -70.7113       70.7113       2121.43       2192.14    
  58  0.436138     -0.829795      -33.5887       33.5887       2112.42       2146.01    
loop,thermsimp(1:2)       89   42.4524       17.3954    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316       1967.41         68.71          1.20         39.01          0.17          0.05        109.14
Just calling func    0   0        109.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1967.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       89
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       90
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      315     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -82.0842       82.0842       1717.59       1799.67    
   2  0.314760      -1.15594      -46.7907       46.7907       1776.18       1822.97    
   3  0.748375     -0.289851      -11.7327       11.7327       1765.83       1777.57    
   4  0.632472     -0.458119      -18.5439       18.5439       1782.09       1800.63    
   5  0.677472     -0.389387      -15.7617       15.7617       1795.34       1811.10    
   6  0.433475     -0.835921      -33.8367       33.8367       1798.54       1832.37    
   7  0.458976     -0.778758      -31.5228       31.5228       1777.11       1808.63    
   8  0.411427E-02  -5.49329      -222.359       222.359       1774.12       1996.48    
   9  0.904989     -0.998322E-01  -4.04104       4.04104       1852.82       1856.86    
  10  0.480311     -0.733322      -29.6836       29.6836       1862.49       1892.18    
  11  0.277870      -1.28060      -51.8366       51.8366       1835.62       1887.45    
  12  0.958372     -0.425196E-01  -1.72112       1.72112       1907.59       1909.31    
  13  0.321639      -1.13432      -45.9155       45.9155       1913.70       1959.62    
  14  0.562333     -0.575660      -23.3018       23.3018       1787.50       1810.81    
  15  0.665565     -0.407119      -16.4795       16.4795       1879.41       1895.89    
  16  0.307614      -1.17891      -47.7203       47.7203       1911.00       1958.72    
  17  0.504790E-01  -2.98620      -120.876       120.876       1913.96       2034.83    
  18  0.361959      -1.01622      -41.1351       41.1351       1928.88       1970.01    
  19  0.470787     -0.753350      -30.4944       30.4944       1922.56       1953.06    
  20  0.312221      -1.16404      -47.1185       47.1185       1926.23       1973.35    
  21  0.156792      -1.85283      -74.9996       74.9996       1841.83       1916.83    
  22  0.445216     -0.809196      -32.7549       32.7549       1965.45       1998.21    
  23  0.999492     -0.508321E-03 -0.205760E-01  0.205760E-01   1966.08       1966.10    
  24  0.167067      -1.78936      -72.4303       72.4303       1929.90       2002.34    
  25  0.435083     -0.832219      -33.6868       33.6868       1963.44       1997.13    
  26  0.110403      -2.20362      -89.1987       89.1987       1952.21       2041.41    
  27  0.704194     -0.350701      -14.1958       14.1958       1997.51       2011.70    
  28  0.767816     -0.264205      -10.6946       10.6946       1957.84       1968.54    
  29  0.231293      -1.46407      -59.2631       59.2631       1901.78       1961.05    
  30  0.965513     -0.350953E-01  -1.42060       1.42060       1962.55       1963.97    
  31  0.674440     -0.393873      -15.9433       15.9433       1904.36       1920.31    
  32  0.248626      -1.39181      -56.3380       56.3380       1952.51       2008.85    
  33  0.461218     -0.773884      -31.3255       31.3255       1984.75       2016.07    
  34  0.778910     -0.249859      -10.1139       10.1139       2025.73       2035.85    
  35  0.665530     -0.407172      -16.4816       16.4816       2026.66       2043.14    
  36  0.383296     -0.958947      -38.8166       38.8166       2033.22       2072.04    
  37  0.492311     -0.708645      -28.6848       28.6848       2011.14       2039.83    
  38  0.631911     -0.459006      -18.5798       18.5798       1908.00       1926.58    
  39  0.150454E-01  -4.19668      -169.875       169.875       2010.04       2179.91    
  40  0.958677     -0.422006E-01  -1.70821       1.70821       1886.07       1887.78    
  41  0.411899     -0.886977      -35.9033       35.9033       1925.45       1961.36    
  42  0.466999     -0.761428      -30.8213       30.8213       2042.25       2073.08    
  43  0.622674     -0.473731      -19.1759       19.1759       1979.33       1998.51    
  44  0.497710     -0.697737      -28.2432       28.2432       2002.85       2031.10    
  45  0.763352E-01  -2.57262      -104.135       104.135       1994.14       2098.27    
  46  0.192360      -1.64839      -66.7239       66.7239       2033.28       2100.01    
  47  0.444368     -0.811101      -32.8320       32.8320       2096.94       2129.78    
  48  0.617268     -0.482452      -19.5289       19.5289       2049.88       2069.41    
  49  0.898554     -0.106968      -4.32989       4.32989       2007.43       2011.76    
  50  0.382850     -0.960111      -38.8637       38.8637       2101.82       2140.68    
  51  0.769319     -0.262250      -10.6154       10.6154       2118.77       2129.38    
  52  0.356805      -1.03057      -41.7156       41.7156       2100.54       2142.26    
  53  0.159449E-01  -4.13862      -167.524       167.524       2033.10       2200.62    
  54  0.879661     -0.128218      -5.19006       5.19006       2135.80       2140.99    
  55  0.413677     -0.882671      -35.7290       35.7290       2131.53       2167.26    
  56  0.332125      -1.10224      -44.6170       44.6170       2112.42       2157.03    
  57  0.963873     -0.367956E-01  -1.48943       1.48943       2074.00       2075.49    
  58  0.440660     -0.819481      -33.1712       33.1712       1967.41       2000.58    
loop,thermsimp(1:2)       90   82.0842       46.7907    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       1957.87         68.59          1.23         39.38          0.03          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1957.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       90
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       91
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      316     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01  -3.35856       3.35856       1765.83       1769.19    
   2  0.393393     -0.932946      -37.7641       37.7641       1717.59       1755.35    
   3  0.317218      -1.14817      -46.4759       46.4759       1782.09       1828.56    
   4  0.324247      -1.12625      -45.5887       45.5887       1777.11       1822.70    
   5  0.515746E-01  -2.96473      -120.007       120.007       1787.50       1907.51    
   6  0.143224      -1.94335      -78.6634       78.6634       1795.34       1874.00    
   7  0.512136     -0.669164      -27.0866       27.0866       1776.18       1803.27    
   8  0.993896     -0.612239E-02 -0.247824      0.247824       1798.54       1798.79    
   9  0.440900     -0.818937      -33.1492       33.1492       1852.82       1885.97    
  10  0.861233     -0.149390      -6.04707       6.04707       1835.62       1841.66    
  11  0.690005     -0.371056      -15.0197       15.0197       1886.07       1901.09    
  12  0.192792      -1.64614      -66.6331       66.6331       1862.49       1929.13    
  13  0.975175     -0.251388E-01  -1.01757       1.01757       1879.41       1880.43    
  14  0.595327E-01  -2.82123      -114.199       114.199       1907.59       2021.79    
  15  0.142661      -1.94729      -78.8228       78.8228       1841.83       1920.65    
  16  0.141610      -1.95468      -79.1220       79.1220       1904.36       1983.49    
  17  0.976591     -0.236872E-01 -0.958820      0.958820       1908.00       1908.96    
  18  0.894748     -0.111213      -4.50174       4.50174       1922.56       1927.06    
  19  0.747310     -0.291275      -11.7903       11.7903       1911.00       1922.79    
  20  0.434887     -0.832670      -33.7051       33.7051       1913.70       1947.41    
  21  0.673581     -0.395146      -15.9949       15.9949       1901.78       1917.78    
  22  0.624944     -0.470094      -19.0286       19.0286       1925.45       1944.48    
  23  0.617967     -0.481321      -19.4831       19.4831       1962.55       1982.04    
  24  0.659853     -0.415739      -16.8284       16.8284       1966.08       1982.91    
  25  0.963159E-01  -2.34012      -94.7242       94.7242       1957.84       2052.56    
  26  0.179190      -1.71931      -69.5947       69.5947       1928.88       1998.47    
  27  0.251042      -1.38213      -55.9464       55.9464       1926.23       1982.18    
  28  0.116711      -2.14806      -86.9498       86.9498       1774.12       1861.07    
  29  0.890376     -0.116112      -4.70001       4.70001       1963.44       1968.14    
  30  0.880065E-02  -4.73293      -191.581       191.581       1965.45       2157.04    
  31  0.613810     -0.488070      -19.7563       19.7563       1979.33       1999.09    
  32  0.960436E-01  -2.34295      -94.8388       94.8388       1967.41       2062.25    
  33  0.768907E-02  -4.86796      -197.047       197.047       1929.90       2126.95    
  34  0.316163      -1.15150      -46.6106       46.6106       1952.51       1999.12    
  35  0.195769      -1.63082      -66.0128       66.0128       1997.51       2063.52    
  36  0.813020     -0.207000      -8.37900       8.37900       2007.43       2015.81    
  37  0.578245     -0.547758      -22.1723       22.1723       1984.75       2006.92    
  38  0.711511     -0.340365      -13.7774       13.7774       2002.85       2016.63    
  39  0.565886     -0.569362      -23.0468       23.0468       1913.96       1937.00    
  40  0.874556     -0.134039      -5.42567       5.42567       2025.73       2031.16    
  41  0.335685      -1.09158      -44.1854       44.1854       2011.14       2055.33    
  42  0.861776     -0.148759      -6.02153       6.02153       1952.21       1958.23    
  43  0.634500     -0.454918      -18.4143       18.4143       2026.66       2045.07    
  44  0.211879      -1.55174      -62.8119       62.8119       2049.88       2112.70    
  45  0.789454     -0.236414      -9.56966       9.56966       2033.22       2042.79    
  46  0.726316E-01  -2.62235      -106.149       106.149       2042.25       2148.40    
  47  0.344022      -1.06705      -43.1924       43.1924       2074.00       2117.20    
  48  0.367544      -1.00091      -40.5152       40.5152       1994.14       2034.65    
  49  0.634223     -0.455355      -18.4320       18.4320       2033.28       2051.72    
  50  0.462643     -0.770799      -31.2007       31.2007       2118.77       2149.97    
  51  0.904061     -0.100859      -4.08259       4.08259       2096.94       2101.03    
  52  0.183754      -1.69416      -68.5766       68.5766       2101.82       2170.40    
  53  0.214369      -1.54005      -62.3388       62.3388       2135.80       2198.14    
  54  0.515075     -0.663442      -26.8550       26.8550       2100.54       2127.39    
  55  0.173268      -1.75291      -70.9550       70.9550       2112.42       2183.37    
  56  0.788225     -0.237971      -9.63268       9.63268       2131.53       2141.17    
  57  0.657874     -0.418741      -16.9499       16.9499       2010.04       2026.99    
  58  0.262790      -1.33640      -54.0952       54.0952       1957.87       2011.97    
loop,thermsimp(1:2)       91   3.35856       37.7641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318       2127.49         68.50          1.26         39.16          0.12          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2127.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       91
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       92
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      317     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -46.8973       46.8973       1717.59       1764.49    
   2  0.484866     -0.723883      -29.3016       29.3016       1765.83       1795.14    
   3  0.743257     -0.296713      -12.0104       12.0104       1798.54       1810.55    
   4  0.476659     -0.740953      -29.9925       29.9925       1776.18       1806.17    
   5  0.895662E-01  -2.41278      -97.6652       97.6652       1777.11       1874.78    
   6  0.100541      -2.29719      -92.9862       92.9862       1782.09       1875.07    
   7  0.394309     -0.930621      -37.6700       37.6700       1835.62       1873.29    
   8  0.856201     -0.155250      -6.28426       6.28426       1774.12       1780.40    
   9  0.903325     -0.101673      -4.11556       4.11556       1795.34       1799.46    
  10  0.849389     -0.163238      -6.60759       6.60759       1879.41       1886.02    
  11  0.245876      -1.40293      -56.7882       56.7882       1852.82       1909.61    
  12  0.535664     -0.624247      -25.2685       25.2685       1886.07       1911.34    
  13  0.509317     -0.674685      -27.3101       27.3101       1787.50       1814.81    
  14  0.103141      -2.27166      -91.9530       91.9530       1908.00       1999.96    
  15  0.822327     -0.195617      -7.91824       7.91824       1901.78       1909.70    
  16  0.293454      -1.22603      -49.6278       49.6278       1841.83       1891.46    
  17  0.610098E-01  -2.79672      -113.207       113.207       1911.00       2024.20    
  18  0.467864E-01  -3.06216      -123.951       123.951       1922.56       2046.51    
  19  0.888641     -0.118062      -4.77894       4.77894       1862.49       1867.27    
  20  0.371769     -0.989482      -40.0526       40.0526       1913.96       1954.01    
  21  0.770202     -0.261103      -10.5690       10.5690       1925.45       1936.02    
  22  0.752967E-01  -2.58632      -104.690       104.690       1913.70       2018.39    
  23  0.787365E-01  -2.54165      -102.882       102.882       1952.21       2055.09    
  24  0.516026     -0.661597      -26.7804       26.7804       1963.44       1990.22    
  25  0.133613      -2.01281      -81.4752       81.4752       1962.55       2044.03    
  26  0.705575     -0.348742      -14.1165       14.1165       1926.23       1940.35    
  27  0.747326     -0.291254      -11.7895       11.7895       1966.08       1977.87    
  28  0.941066E-01  -2.36333      -95.6635       95.6635       1904.36       2000.03    
  29  0.243001      -1.41469      -57.2643       57.2643       1928.88       1986.14    
  30  0.186020      -1.68190      -68.0805       68.0805       1979.33       2047.41    
  31  0.707073     -0.346621      -14.0307       14.0307       1952.51       1966.54    
  32  0.820399     -0.197964      -8.01325       8.01325       1984.75       1992.76    
  33  0.169787E-01  -4.07580      -164.981       164.981       1957.87       2122.85    
  34  0.196118      -1.62904      -65.9408       65.9408       2007.43       2073.37    
  35  0.910420E-01  -2.39643      -97.0036       97.0036       2002.85       2099.86    
  36  0.101963      -2.28314      -92.4178       92.4178       1907.59       2000.00    
  37  0.816143     -0.203166      -8.22380       8.22380       2010.04       2018.26    
  38  0.921931     -0.812847E-01  -3.29027       3.29027       2025.73       2029.02    
  39  0.867385     -0.142273      -5.75896       5.75896       1994.14       1999.90    
  40  0.534867     -0.625737      -25.3288       25.3288       2033.22       2058.55    
  41  0.354961      -1.03575      -41.9253       41.9253       2026.66       2068.58    
  42  0.707205     -0.346435      -14.0231       14.0231       2033.28       2047.31    
  43  0.341296      -1.07501      -43.5144       43.5144       1957.84       2001.36    
  44  0.615332     -0.485594      -19.6560       19.6560       2011.14       2030.80    
  45  0.100325      -2.29934      -93.0734       93.0734       1967.41       2060.48    
  46  0.218012      -1.52321      -61.6568       61.6568       1997.51       2059.16    
  47  0.346044      -1.06119      -42.9551       42.9551       2096.94       2139.90    
  48  0.313706      -1.15930      -46.9265       46.9265       2049.88       2096.81    
  49  0.884226     -0.123043      -4.98057       4.98057       2074.00       2078.99    
  50  0.562231     -0.575842      -23.3091       23.3091       1929.90       1953.21    
  51  0.208749      -1.56662      -63.4142       63.4142       2100.54       2163.95    
  52  0.553752     -0.591038      -23.9242       23.9242       2131.53       2155.46    
  53  0.389358     -0.943257      -38.1815       38.1815       2042.25       2080.44    
  54  0.290822      -1.23504      -49.9925       49.9925       2118.77       2168.76    
  55  0.592574     -0.523280      -21.1815       21.1815       1965.45       1986.64    
  56  0.816972     -0.202151      -8.18272       8.18272       2101.82       2110.00    
  57  0.674491     -0.393797      -15.9402       15.9402       2112.42       2128.36    
  58  0.136892      -1.98856      -80.4937       80.4937       2127.49       2207.98    
loop,thermsimp(1:2)       92   46.8973       29.3016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319       2135.80         68.33          1.22         39.28          0.22          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2135.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       92
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       93
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      318     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -204.330       204.330       1717.59       1921.92    
   2  0.977343     -0.229176E-01 -0.927668      0.927668       1774.12       1775.05    
   3  0.515611     -0.662402      -26.8129       26.8129       1765.83       1792.65    
   4  0.985018     -0.150949E-01 -0.611018      0.611018       1795.34       1795.95    
   5  0.909744E-01  -2.39718      -97.0337       97.0337       1776.18       1873.21    
   6  0.163485      -1.81103      -73.3076       73.3076       1798.54       1871.85    
   7  0.709610     -0.343039      -13.8856       13.8856       1787.50       1801.39    
   8  0.639309     -0.447368      -18.1087       18.1087       1862.49       1880.60    
   9  0.500633     -0.691882      -28.0062       28.0062       1835.62       1863.62    
  10  0.623218     -0.472859      -19.1406       19.1406       1777.11       1796.25    
  11  0.974620     -0.257075E-01  -1.04060       1.04060       1782.09       1783.13    
  12  0.940866     -0.609540E-01  -2.46732       2.46732       1879.41       1881.88    
  13  0.268848      -1.31361      -53.1726       53.1726       1841.83       1895.00    
  14  0.131404      -2.02948      -82.1499       82.1499       1852.82       1934.97    
  15  0.242045      -1.41863      -57.4239       57.4239       1901.78       1959.21    
  16  0.333489      -1.09815      -44.4511       44.4511       1886.07       1930.53    
  17  0.540917     -0.614489      -24.8735       24.8735       1925.45       1950.33    
  18  0.935945     -0.661981E-01  -2.67959       2.67959       1926.23       1928.91    
  19  0.948265     -0.531218E-01  -2.15028       2.15028       1929.90       1932.06    
  20  0.306672      -1.18198      -47.8445       47.8445       1913.96       1961.80    
  21  0.674766E-01  -2.69597      -109.129       109.129       1952.51       2061.64    
  22  0.304885      -1.18782      -48.0810       48.0810       1966.08       2014.16    
  23  0.987276     -0.128055E-01 -0.518343      0.518343       1928.88       1929.39    
  24  0.866309     -0.143514      -5.80921       5.80921       1965.45       1971.26    
  25  0.325072      -1.12371      -45.4858       45.4858       1963.44       2008.93    
  26  0.882651     -0.124826      -5.05274       5.05274       1984.75       1989.80    
  27  0.608994E-02  -5.10112      -206.485       206.485       1994.14       2200.62    
  28  0.956776     -0.441859E-01  -1.78857       1.78857       1908.00       1909.79    
  29  0.680690E-01  -2.68723      -108.775       108.775       1907.59       2016.36    
  30  0.870194     -0.139039      -5.62806       5.62806       1904.36       1909.99    
  31  0.154954      -1.86463      -75.4769       75.4769       1957.84       2033.32    
  32  0.533144     -0.628963      -25.4594       25.4594       2010.04       2035.50    
  33  0.848128     -0.164724      -6.66774       6.66774       1913.70       1920.37    
  34  0.302343E-01  -3.49878      -141.625       141.625       1911.00       2052.62    
  35  0.670768     -0.399332      -16.1643       16.1643       2025.73       2041.90    
  36  0.575709     -0.552152      -22.3502       22.3502       2011.14       2033.49    
  37  0.961243     -0.395278E-01  -1.60002       1.60002       1962.55       1964.15    
  38  0.174287      -1.74705      -70.7178       70.7178       1922.56       1993.28    
  39  0.450902     -0.796506      -32.2412       32.2412       2033.28       2065.53    
  40  0.807155     -0.214240      -8.67208       8.67208       1979.33       1988.00    
  41  0.245094E-01  -3.70870      -150.122       150.122       1952.21       2102.34    
  42  0.840819     -0.173379      -7.01807       7.01807       2033.22       2040.24    
  43  0.418157     -0.871899      -35.2930       35.2930       1997.51       2032.80    
  44  0.795491     -0.228796      -9.26126       9.26126       1967.41       1976.67    
  45  0.675445E-01  -2.69497      -109.088       109.088       2026.66       2135.74    
  46  0.158617      -1.84126      -74.5313       74.5313       2007.43       2081.96    
  47  0.538475     -0.619015      -25.0567       25.0567       2074.00       2099.06    
  48  0.318292      -1.14479      -46.3391       46.3391       2042.25       2088.59    
  49  0.427160     -0.850596      -34.4307       34.4307       2049.88       2084.31    
  50  0.485422     -0.722737      -29.2552       29.2552       2002.85       2032.11    
  51  0.603579     -0.504879      -20.4367       20.4367       2101.82       2122.26    
  52  0.151674      -1.88602      -76.3431       76.3431       1957.87       2034.21    
  53  0.216599      -1.52971      -61.9200       61.9200       2112.42       2174.34    
  54  0.838062     -0.176664      -7.15105       7.15105       2096.94       2104.09    
  55  0.728698     -0.316496      -12.8112       12.8112       2131.53       2144.35    
  56  0.866837     -0.142904      -5.78453       5.78453       2100.54       2106.32    
  57  0.921748     -0.814837E-01  -3.29833       3.29833       2118.77       2122.07    
  58  0.325236      -1.12320      -45.4654       45.4654       2135.80       2181.26    
loop,thermsimp(1:2)       93   204.330      0.927668    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320       2249.76         68.74          1.27         39.39          0.09          0.05        109.55
Just calling func    0   0        109.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321       1951.17         68.58          1.23         39.29          0.29          0.05        109.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    1951.2        3.221     -2.942      3.249     -102.6     0.2039    
                      0.3093      1.148     -99.70      4.634     0.3794    

                       3.352     -3.034      1.540      6992.      7000.    

                      -1.989      0.000      0.000      0.000     -1.221    



                      -1.883      0.000      0.000      7000.      593.7    

                      -1.483     -4.303     -6.631     -8.095      7.224    

                      -13.38     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6369E-03 0.1363     0.8487E-01 0.1103    

                     -0.2486     0.1311     0.1162     0.8366E-01 0.3209E-01



                     -0.9147    -0.6231      0.000     0.2192E-01 0.2040    

                      0.1484     0.1975    -0.7116     0.1117     0.2744    

                      0.1688     0.4958E-01-0.4190     -1.551      7000.    



                      -1.239     -1.212     -2.142     -1.982    -0.3807    

                     -0.3252      9.282      8.476    -0.1700E+05 -5.697    

                     -0.2791     -2.321      8.706      9.135    -0.1969E+05



                      -6.000     0.5294     0.5281E-01  8.618      9.075    

                     -0.1944E+05 -6.000    -0.7729E-01-0.3012      9.726    

                       8.924    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1951.17
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       93
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       94
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      320     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -35.5331       35.5331       1774.12       1809.65    
   2  0.262668E-01  -3.63945      -147.319       147.319       1782.09       1929.41    
   3  0.620248     -0.477636      -19.3339       19.3339       1765.83       1785.17    
   4  0.249183      -1.38957      -56.2474       56.2474       1795.34       1851.59    
   5  0.999872     -0.128438E-03 -0.519894E-02  0.519894E-02   1777.11       1777.12    
   6  0.933252     -0.690802E-01  -2.79625       2.79625       1787.50       1790.30    
   7  0.857047     -0.154263      -6.24431       6.24431       1835.62       1841.86    
   8  0.365787      -1.00570      -40.7092       40.7092       1798.54       1839.25    
   9  0.499682     -0.693784      -28.0832       28.0832       1776.18       1804.26    
  10  0.761560     -0.272387      -11.0258       11.0258       1862.49       1873.52    
  11  0.793904E-01  -2.53338      -102.547       102.547       1879.41       1981.96    
  12  0.514449     -0.664659      -26.9043       26.9043       1841.83       1868.73    
  13  0.678176     -0.388349      -15.7197       15.7197       1908.00       1923.72    
  14  0.257558      -1.35651      -54.9093       54.9093       1904.36       1959.27    
  15  0.832067E-01  -2.48643      -100.646       100.646       1913.70       2014.35    
  16  0.272851      -1.29883      -52.5745       52.5745       1717.59       1770.16    
  17  0.255245      -1.36553      -55.2744       55.2744       1926.23       1981.51    
  18  0.419883     -0.867779      -35.1262       35.1262       1928.88       1964.00    
  19  0.870346     -0.138865      -5.62101       5.62101       1886.07       1891.70    
  20  0.814510E-01  -2.50775      -101.510       101.510       1929.90       2031.41    
  21  0.560000     -0.579819      -23.4701       23.4701       1852.82       1876.29    
  22  0.860285     -0.150492      -6.09166       6.09166       1925.45       1931.54    
  23  0.538601     -0.618780      -25.0472       25.0472       1901.78       1926.83    
  24  0.542321     -0.611898      -24.7686       24.7686       1913.96       1938.73    
  25  0.836575     -0.178440      -7.22293       7.22293       1962.55       1969.78    
  26  0.705694     -0.348574      -14.1097       14.1097       1965.45       1979.56    
  27  0.301063      -1.20043      -48.5916       48.5916       1967.41       2016.00    
  28  0.125899      -2.07227      -83.8821       83.8821       1979.33       2063.21    
  29  0.476747     -0.740770      -29.9851       29.9851       1984.75       2014.73    
  30  0.676103     -0.391410      -15.8436       15.8436       1922.56       1938.41    
  31  0.385349     -0.953606      -38.6004       38.6004       1963.44       2002.04    
  32  0.141470      -1.95567      -79.1621       79.1621       1966.08       2045.25    
  33  0.146971      -1.91752      -77.6181       77.6181       1907.59       1985.20    
  34  0.616396     -0.483866      -19.5861       19.5861       2002.85       2022.44    
  35  0.962361     -0.383659E-01  -1.55299       1.55299       1997.51       1999.06    
  36  0.618266     -0.480836      -19.4634       19.4634       1957.84       1977.30    
  37  0.369072     -0.996763      -40.3473       40.3473       2011.14       2051.49    
  38  0.312675      -1.16259      -47.0597       47.0597       1957.87       2004.93    
  39  0.367326      -1.00150      -40.5392       40.5392       2010.04       2050.58    
  40  0.184422      -1.69053      -68.4298       68.4298       2033.22       2101.65    
  41  0.113088      -2.17959      -88.2262       88.2262       2025.73       2113.96    
  42  0.333487      -1.09815      -44.4514       44.4514       1911.00       1955.45    
  43  0.407562     -0.897562      -36.3318       36.3318       1952.51       1988.84    
  44  0.443434     -0.813206      -32.9172       32.9172       2033.28       2066.20    
  45  0.265046      -1.32785      -53.7493       53.7493       2007.43       2061.18    
  46  0.444603     -0.810573      -32.8106       32.8106       2049.88       2082.69    
  47  0.689395E-01  -2.67453      -108.260       108.260       2042.25       2150.51    
  48  0.862417     -0.148017      -5.99147       5.99147       2074.00       2080.00    
  49  0.541063     -0.614219      -24.8625       24.8625       1952.21       1977.08    
  50  0.885208     -0.121933      -4.93563       4.93563       2096.94       2101.88    
  51  0.808718     -0.212305      -8.59375       8.59375       2100.54       2109.13    
  52  0.238877E-01  -3.73439      -151.162       151.162       2118.77       2269.93    
  53  0.428951     -0.846414      -34.2614       34.2614       2101.82       2136.08    
  54  0.860433     -0.150319      -6.08468       6.08468       2026.66       2032.74    
  55  0.367713      -1.00045      -40.4967       40.4967       2131.53       2172.03    
  56  0.782210     -0.245632      -9.94278       9.94278       2112.42       2122.36    
  57  0.916512E-01  -2.38976      -96.7337       96.7337       2135.80       2232.53    
  58  0.230050      -1.46946      -59.4813       59.4813       1951.17       2010.65    
loop,thermsimp(1:2)       94   35.5331       147.319    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       2146.90         68.53          1.20         39.28          0.18          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2146.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       94
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       95
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      321     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -49.7062       49.7062       1717.59       1767.29    
   2  0.225242      -1.49058      -60.3361       60.3361       1777.11       1837.45    
   3  0.946430E-01  -2.35764      -95.4335       95.4335       1765.83       1861.27    
   4  0.371694     -0.989684      -40.0607       40.0607       1787.50       1827.56    
   5  0.933291     -0.690381E-01  -2.79455       2.79455       1776.18       1778.97    
   6  0.926571     -0.762651E-01  -3.08708       3.08708       1774.12       1777.21    
   7  0.138048      -1.98015      -80.1533       80.1533       1798.54       1878.69    
   8  0.113008E-01  -4.48288      -181.460       181.460       1835.62       2017.08    
   9  0.405736     -0.902053      -36.5136       36.5136       1795.34       1831.85    
  10  0.390885     -0.939341      -38.0230       38.0230       1841.83       1879.85    
  11  0.873008     -0.135810      -5.49737       5.49737       1862.49       1867.99    
  12  0.945037     -0.565316E-01  -2.28830       2.28830       1852.82       1855.11    
  13  0.642194E-01  -2.74545      -111.131       111.131       1886.07       1997.21    
  14  0.322052E-01  -3.43563      -139.068       139.068       1908.00       2047.07    
  15  0.521559     -0.650933      -26.3487       26.3487       1901.78       1928.13    
  16  0.271788      -1.30273      -52.7325       52.7325       1782.09       1834.82    
  17  0.153503      -1.87403      -75.8578       75.8578       1925.45       2001.31    
  18  0.219303      -1.51730      -61.4178       61.4178       1922.56       1983.98    
  19  0.476616     -0.741044      -29.9962       29.9962       1913.96       1943.95    
  20  0.510024     -0.673297      -27.2539       27.2539       1911.00       1938.25    
  21  0.393388     -0.932959      -37.7646       37.7646       1904.36       1942.13    
  22  0.947927     -0.534776E-01  -2.16469       2.16469       1928.88       1931.04    
  23  0.472009     -0.750758      -30.3894       30.3894       1962.55       1992.94    
  24  0.678717     -0.387551      -15.6874       15.6874       1952.21       1967.90    
  25  0.617620     -0.481882      -19.5058       19.5058       1957.84       1977.35    
  26  0.138594E-01  -4.27879      -173.198       173.198       1965.45       2138.65    
  27  0.588445     -0.530273      -21.4645       21.4645       1926.23       1947.70    
  28  0.950805     -0.504465E-01  -2.04199       2.04199       1879.41       1881.46    
  29  0.444108     -0.811687      -32.8557       32.8557       1907.59       1940.44    
  30  0.299195      -1.20666      -48.8436       48.8436       1952.51       2001.35    
  31  0.808517E-01  -2.51514      -101.809       101.809       1997.51       2099.31    
  32  0.493903     -0.705415      -28.5540       28.5540       1963.44       1992.00    
  33  0.973584     -0.267710E-01  -1.08364       1.08364       1957.87       1958.95    
  34  0.219889      -1.51463      -61.3099       61.3099       1951.17       2012.48    
  35  0.872114     -0.136835      -5.53887       5.53887       1913.70       1919.24    
  36  0.413991     -0.881912      -35.6983       35.6983       1984.75       2020.44    
  37  0.155656      -1.86011      -75.2941       75.2941       1967.41       2042.70    
  38  0.744603     -0.294905      -11.9372       11.9372       2002.85       2014.79    
  39  0.627736     -0.465635      -18.8481       18.8481       1929.90       1948.75    
  40  0.137880      -1.98137      -80.2025       80.2025       2026.66       2106.86    
  41  0.270817      -1.30631      -52.8773       52.8773       1966.08       2018.96    
  42  0.271872      -1.30243      -52.7200       52.7200       2010.04       2062.76    
  43  0.988104     -0.119670E-01 -0.484403      0.484403       2011.14       2011.63    
  44  0.837729E-01  -2.47965      -100.372       100.372       2007.43       2107.80    
  45  0.731806     -0.312240      -12.6390       12.6390       1979.33       1991.97    
  46  0.520356     -0.653242      -26.4421       26.4421       2033.28       2059.73    
  47  0.158934      -1.83927      -74.4505       74.4505       2074.00       2148.46    
  48  0.724534     -0.322226      -13.0432       13.0432       2049.88       2062.93    
  49  0.895315     -0.110580      -4.47608       4.47608       2033.22       2037.70    
  50  0.850194     -0.162291      -6.56926       6.56926       2096.94       2103.51    
  51  0.428755     -0.846869      -34.2798       34.2798       2100.54       2134.82    
  52  0.523907     -0.646440      -26.1668       26.1668       2025.73       2051.90    
  53  0.358551      -1.02568      -41.5180       41.5180       2112.42       2153.93    
  54  0.680509     -0.384914      -15.5807       15.5807       2101.82       2117.40    
  55  0.607274     -0.498775      -20.1896       20.1896       2042.25       2062.44    
  56  0.591502     -0.525090      -21.2548       21.2548       2131.53       2152.79    
  57  0.121812      -2.10527      -85.2180       85.2180       2135.80       2221.02    
  58  0.812950     -0.207086      -8.38249       8.38249       2146.90       2155.28    
loop,thermsimp(1:2)       95   49.7062       60.3361    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323       2132.63         68.56          1.24         39.17          0.04          0.05        109.06
Just calling func    0   0        109.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2132.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       95
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   103.564    

hmean,hstd :    1945.23       103.564    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1945.23       103.564    
h(1),h(best1),h(np1) :    1717.59       1717.59       2132.63    
htherm(1),htherm(best1),htherm(np1) :    1767.29       1767.29       2221.02    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        1
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      322     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -66.0706       66.0706       1717.59       1783.66    
   2  0.313379      -1.16034      -46.9687       46.9687       1774.12       1821.09    
   3  0.769177     -0.262434      -10.6229       10.6229       1776.18       1786.80    
   4  0.884560E-01  -2.42525      -98.1701       98.1701       1787.50       1885.67    
   5  0.890596     -0.115865      -4.69002       4.69002       1795.34       1800.03    
   6  0.657268     -0.419664      -16.9873       16.9873       1782.09       1799.08    
   7  0.960898     -0.398874E-01  -1.61457       1.61457       1777.11       1778.73    
   8  0.613422E-01  -2.79129      -112.987       112.987       1852.82       1965.81    
   9  0.264483E-01  -3.63256      -147.040       147.040       1765.83       1912.87    
  10  0.304822      -1.18803      -48.0894       48.0894       1862.49       1910.58    
  11  0.977907     -0.223409E-01 -0.904321      0.904321       1798.54       1799.44    
  12  0.746737     -0.292042      -11.8214       11.8214       1841.83       1853.65    
  13  0.450918E-01  -3.09905      -125.445       125.445       1879.41       2004.86    
  14  0.625433     -0.469311      -18.9969       18.9969       1913.70       1932.70    
  15  0.990029     -0.100208E-01 -0.405624      0.405624       1901.78       1902.19    
  16  0.985060     -0.150527E-01 -0.609308      0.609308       1928.88       1929.48    
  17  0.691362     -0.369092      -14.9402       14.9402       1911.00       1925.94    
  18  0.864323E-02  -4.75098      -192.312       192.312       1907.59       2099.90    
  19  0.908027E-01  -2.39907      -97.1102       97.1102       1904.36       2001.47    
  20  0.500093     -0.692962      -28.0499       28.0499       1913.96       1942.01    
  21  0.806913     -0.214539      -8.68419       8.68419       1926.23       1934.92    
  22  0.317749      -1.14649      -46.4081       46.4081       1929.90       1976.31    
  23  0.753050     -0.283623      -11.4806       11.4806       1957.87       1969.35    
  24  0.850048     -0.162463      -6.57622       6.57622       1952.21       1958.79    
  25  0.346718      -1.05924      -42.8764       42.8764       1957.84       2000.72    
  26  0.731558     -0.312579      -12.6527       12.6527       1922.56       1935.21    
  27  0.226645      -1.48437      -60.0849       60.0849       1979.33       2039.42    
  28  0.887805     -0.119003      -4.81703       4.81703       1963.44       1968.26    
  29  0.277731      -1.28110      -51.8569       51.8569       1962.55       2014.41    
  30  0.914814     -0.890349E-01  -3.60398       3.60398       1886.07       1889.68    
  31  0.298911      -1.20761      -48.8820       48.8820       1925.45       1974.34    
  32  0.469757     -0.755540      -30.5830       30.5830       1952.51       1983.09    
  33  0.217087      -1.52746      -61.8290       61.8290       2011.14       2072.97    
  34  0.143996      -1.93797      -78.4458       78.4458       1951.17       2029.61    
  35  0.873815     -0.134887      -5.45998       5.45998       2002.85       2008.31    
  36  0.102289      -2.27995      -92.2885       92.2885       1835.62       1927.91    
  37  0.583483     -0.538740      -21.8073       21.8073       1966.08       1987.89    
  38  0.308185      -1.17705      -47.6452       47.6452       1984.75       2032.39    
  39  0.129509      -2.04400      -82.7379       82.7379       2033.22       2115.96    
  40  0.858329     -0.152767      -6.18377       6.18377       1967.41       1973.59    
  41  0.247121      -1.39788      -56.5837       56.5837       1908.00       1964.59    
  42  0.672462     -0.396810      -16.0622       16.0622       2025.73       2041.79    
  43  0.978226     -0.220145E-01 -0.891109      0.891109       2033.28       2034.18    
  44  0.571205     -0.560006      -22.6681       22.6681       2042.25       2064.92    
  45  0.390724E-01  -3.24234      -131.244       131.244       2010.04       2141.28    
  46  0.773307     -0.257080      -10.4062       10.4062       2049.88       2060.29    
  47  0.860034     -0.150783      -6.10345       6.10345       1997.51       2003.61    
  48  0.521048     -0.651913      -26.3883       26.3883       2096.94       2123.33    
  49  0.577715     -0.548675      -22.2095       22.2095       2026.66       2048.86    
  50  0.449025     -0.800676      -32.4100       32.4100       2007.43       2039.84    
  51  0.879701     -0.128173      -5.18824       5.18824       2101.82       2107.01    
  52  0.553161     -0.592107      -23.9675       23.9675       2100.54       2124.51    
  53  0.501250E-01  -2.99324      -121.161       121.161       1965.45       2086.62    
  54  0.600542     -0.509923      -20.6408       20.6408       2074.00       2094.65    
  55  0.268895      -1.31343      -53.1656       53.1656       2131.53       2184.70    
  56  0.966550     -0.340228E-01  -1.37718       1.37718       2112.42       2113.79    
  57  0.223816      -1.49693      -60.5932       60.5932       2146.90       2207.49    
  58  0.422624     -0.861271      -34.8628       34.8628       2132.63       2167.49    
loop,thermsimp(1:2)        1   66.0706       46.9687    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324       2115.63         68.46          1.21         39.29          0.20          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2115.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        1
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        2
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      323     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -58.8710       58.8710       1777.11       1835.98    
   2  0.293881      -1.22458      -49.5690       49.5690       1717.59       1767.16    
   3  0.833435     -0.182199      -7.37512       7.37512       1776.18       1783.55    
   4  0.931284     -0.711905E-01  -2.88167       2.88167       1782.09       1784.97    
   5  0.965536     -0.350722E-01  -1.41967       1.41967       1798.54       1799.96    
   6  0.534034     -0.627296      -25.3919       25.3919       1795.34       1820.73    
   7  0.975689     -0.246118E-01 -0.996243      0.996243       1774.12       1775.12    
   8  0.958131     -0.427704E-01  -1.73128       1.73128       1841.83       1843.56    
   9  0.487835     -0.717779      -29.0545       29.0545       1787.50       1816.56    
  10  0.941751     -0.600144E-01  -2.42928       2.42928       1886.07       1888.50    
  11  0.764698     -0.268274      -10.8593       10.8593       1901.78       1912.64    
  12  0.282403      -1.26442      -51.1816       51.1816       1862.49       1913.67    
  13  0.694349     -0.364781      -14.7657       14.7657       1765.83       1780.60    
  14  0.257622      -1.35626      -54.8992       54.8992       1911.00       1965.90    
  15  0.401572     -0.912369      -36.9312       36.9312       1835.62       1872.55    
  16  0.828654     -0.187952      -7.60798       7.60798       1928.88       1936.48    
  17  0.113844      -2.17292      -87.9563       87.9563       1913.70       2001.66    
  18  0.383967     -0.957199      -38.7458       38.7458       1926.23       1964.98    
  19  0.767294     -0.264886      -10.7221       10.7221       1922.56       1933.28    
  20  0.230085      -1.46930      -59.4750       59.4750       1913.96       1973.43    
  21  0.248551      -1.39211      -56.3502       56.3502       1952.21       2008.56    
  22  0.739043     -0.302399      -12.2406       12.2406       1908.00       1920.25    
  23  0.427702     -0.849328      -34.3794       34.3794       1852.82       1887.20    
  24  0.217549      -1.52533      -61.7428       61.7428       1963.44       2025.18    
  25  0.126759      -2.06546      -83.6065       83.6065       1957.87       2041.48    
  26  0.278624      -1.27789      -51.7270       51.7270       1967.41       2019.14    
  27  0.736668     -0.305618      -12.3709       12.3709       1925.45       1937.82    
  28  0.183809      -1.69386      -68.5645       68.5645       1929.90       1998.47    
  29  0.915242     -0.885666E-01  -3.58503       3.58503       1952.51       1956.10    
  30  0.864610     -0.145477      -5.88866       5.88866       1966.08       1971.97    
  31  0.996457     -0.354911E-02 -0.143662      0.143662       1957.84       1957.98    
  32  0.937047     -0.650222E-01  -2.63199       2.63199       1904.36       1907.00    
  33  0.664908     -0.408106      -16.5195       16.5195       1997.51       2014.03    
  34  0.409422     -0.893009      -36.1475       36.1475       1879.41       1915.56    
  35  0.293825E-01  -3.52736      -142.781       142.781       2002.85       2145.63    
  36  0.528099     -0.638471      -25.8443       25.8443       1962.55       1988.40    
  37  0.582244E-01  -2.84345      -115.098       115.098       1951.17       2066.27    
  38  0.394879     -0.929175      -37.6115       37.6115       1984.75       2022.36    
  39  0.619316     -0.479139      -19.3948       19.3948       2033.28       2052.68    
  40  0.760056     -0.274363      -11.1058       11.1058       1979.33       1990.44    
  41  0.322606      -1.13132      -45.7941       45.7941       2007.43       2053.22    
  42  0.806034     -0.215629      -8.72831       8.72831       2025.73       2034.46    
  43  0.158197      -1.84391      -74.6385       74.6385       2026.66       2101.29    
  44  0.964399     -0.362497E-01  -1.46733       1.46733       2049.88       2051.35    
  45  0.891984     -0.114307      -4.62694       4.62694       2042.25       2046.88    
  46  0.896576E-01  -2.41176      -97.6239       97.6239       2011.14       2108.77    
  47  0.976522     -0.237576E-01 -0.961666      0.961666       1965.45       1966.42    
  48  0.145640      -1.92662      -77.9862       77.9862       2074.00       2151.99    
  49  0.580689E-01  -2.84612      -115.206       115.206       1907.59       2022.79    
  50  0.154224      -1.86935      -75.6682       75.6682       2101.82       2177.49    
  51  0.623776     -0.471964      -19.1043       19.1043       2112.42       2131.52    
  52  0.949887     -0.514119E-01  -2.08107       2.08107       2033.22       2035.30    
  53  0.681810     -0.383005      -15.5034       15.5034       2096.94       2112.45    
  54  0.377382     -0.974497      -39.4460       39.4460       2100.54       2139.99    
  55  0.928894     -0.737604E-01  -2.98570       2.98570       2010.04       2013.02    
  56  0.484665     -0.724298      -29.3184       29.3184       2132.63       2161.95    
  57  0.499587     -0.693974      -28.0909       28.0909       2131.53       2159.62    
  58  0.478934     -0.736193      -29.7999       29.7999       2115.63       2145.43    
loop,thermsimp(1:2)        2   58.8710       49.5690    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325       2222.56         68.65          1.23         39.11          0.03          0.05        109.08
Just calling func    0   0        109.08


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    326       1925.30         68.72          1.19         39.12          0.23          0.05        109.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1925.30
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        2
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        3
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      325     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -36.7923       36.7923       1717.59       1754.38    
   2  0.995767     -0.424237E-02 -0.171724      0.171724       1774.12       1774.29    
   3  0.232708      -1.45797      -59.0162       59.0162       1765.83       1824.85    
   4  0.844104     -0.169480      -6.86027       6.86027       1776.18       1783.04    
   5  0.835080     -0.180228      -7.29531       7.29531       1782.09       1789.38    
   6  0.492927     -0.707395      -28.6342       28.6342       1798.54       1827.17    
   7  0.669838     -0.400719      -16.2204       16.2204       1787.50       1803.72    
   8  0.161727      -1.82184      -73.7452       73.7452       1795.34       1869.09    
   9  0.712877     -0.338447      -13.6998       13.6998       1777.11       1790.81    
  10  0.187101      -1.67610      -67.8459       67.8459       1841.83       1909.67    
  11  0.152475      -1.88075      -76.1297       76.1297       1835.62       1911.75    
  12  0.299805      -1.20462      -48.7611       48.7611       1852.82       1901.58    
  13  0.388928     -0.944360      -38.2261       38.2261       1886.07       1924.30    
  14  0.396030     -0.926264      -37.4936       37.4936       1904.36       1941.86    
  15  0.795332     -0.228996      -9.26938       9.26938       1901.78       1911.05    
  16  0.209301      -1.56398      -63.3073       63.3073       1862.49       1925.80    
  17  0.292717      -1.22855      -49.7296       49.7296       1879.41       1929.14    
  18  0.128603E-01  -4.35361      -176.227       176.227       1908.00       2084.23    
  19  0.386579E-01  -3.25301      -131.676       131.676       1922.56       2054.24    
  20  0.284417      -1.25731      -50.8940       50.8940       1928.88       1979.77    
  21  0.962037     -0.387027E-01  -1.56662       1.56662       1925.45       1927.02    
  22  0.340824      -1.07639      -43.5704       43.5704       1952.51       1996.08    
  23  0.463892     -0.768103      -31.0915       31.0915       1957.84       1988.93    
  24  0.772349     -0.258319      -10.4563       10.4563       1926.23       1936.69    
  25  0.580884     -0.543204      -21.9880       21.9880       1911.00       1932.99    
  26  0.519264     -0.655343      -26.5272       26.5272       1965.45       1991.98    
  27  0.336321      -1.08969      -44.1088       44.1088       1966.08       2010.19    
  28  0.975360     -0.249491E-01  -1.00990       1.00990       1913.96       1914.97    
  29  0.768530     -0.263276      -10.6570       10.6570       1962.55       1973.21    
  30  0.536540     -0.622614      -25.2024       25.2024       1979.33       2004.53    
  31  0.922732     -0.804161E-01  -3.25511       3.25511       1929.90       1933.16    
  32  0.603353     -0.505252      -20.4518       20.4518       1913.70       1934.16    
  33  0.927279E-01  -2.37809      -96.2609       96.2609       1952.21       2048.47    
  34  0.180890      -1.70987      -69.2125       69.2125       2010.04       2079.25    
  35  0.933825E-01  -2.37105      -95.9762       95.9762       1997.51       2093.48    
  36  0.343444      -1.06873      -43.2604       43.2604       1967.41       2010.67    
  37  0.102193      -2.28089      -92.3266       92.3266       1984.75       2077.07    
  38  0.397576     -0.922370      -37.3360       37.3360       1907.59       1944.92    
  39  0.455007     -0.787443      -31.8744       31.8744       1963.44       1995.32    
  40  0.559910     -0.579979      -23.4766       23.4766       2025.73       2049.21    
  41  0.901058     -0.104186      -4.21727       4.21727       2033.22       2037.44    
  42  0.849435     -0.163184      -6.60540       6.60540       1957.87       1964.48    
  43  0.231812      -1.46183      -59.1723       59.1723       2042.25       2101.43    
  44  0.119620      -2.12344      -85.9532       85.9532       2049.88       2135.84    
  45  0.885994     -0.121045      -4.89969       4.89969       2033.28       2038.18    
  46  0.166933      -1.79016      -72.4628       72.4628       2007.43       2079.89    
  47  0.284605      -1.25665      -50.8672       50.8672       1951.17       2002.04    
  48  0.392630     -0.934887      -37.8427       37.8427       2026.66       2064.50    
  49  0.275341      -1.28974      -52.2067       52.2067       2011.14       2063.35    
  50  0.808723     -0.212299      -8.59350       8.59350       2096.94       2105.54    
  51  0.544552     -0.607792      -24.6024       24.6024       2112.42       2137.02    
  52  0.729547     -0.315331      -12.7641       12.7641       2100.54       2113.30    
  53  0.986801     -0.132865E-01 -0.537816      0.537816       2115.63       2116.17    
  54  0.814160     -0.205599      -8.32230       8.32230       2002.85       2011.17    
  55  0.847794     -0.165117      -6.68367       6.68367       2074.00       2080.69    
  56  0.248789      -1.39115      -56.3114       56.3114       2131.53       2187.85    
  57  0.294277      -1.22323      -49.5145       49.5145       2132.63       2182.14    
  58  0.747234     -0.291377      -11.7944       11.7944       1925.30       1937.09    
loop,thermsimp(1:2)        3   36.7923      0.171724    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327       1780.96         68.45          1.14         39.06          0.50          0.05        109.20
Just calling func    0   0        109.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1780.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        3
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        4
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      326     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -43.1108       43.1108       1717.59       1760.70    
   2  0.337825      -1.08523      -43.9282       43.9282       1774.12       1818.05    
   3  0.129257      -2.04595      -82.8168       82.8168       1776.18       1859.00    
   4  0.218013      -1.52320      -61.6567       61.6567       1782.09       1843.74    
   5  0.764988     -0.267896      -10.8440       10.8440       1777.11       1787.96    
   6  0.134235      -2.00816      -81.2870       81.2870       1787.50       1868.79    
   7  0.921891     -0.813288E-01  -3.29205       3.29205       1765.83       1769.13    
   8  0.879140E-01  -2.43140      -98.4188       98.4188       1798.54       1896.96    
   9  0.853506     -0.158403      -6.41187       6.41187       1795.34       1801.75    
  10  0.781888     -0.246043      -9.95942       9.95942       1852.82       1862.78    
  11  0.572060     -0.558512      -22.6076       22.6076       1841.83       1864.44    
  12  0.370929     -0.991745      -40.1442       40.1442       1901.78       1941.93    
  13  0.659208     -0.416716      -16.8680       16.8680       1835.62       1852.49    
  14  0.192080      -1.64984      -66.7828       66.7828       1913.96       1980.74    
  15  0.834249     -0.181224      -7.33563       7.33563       1886.07       1893.41    
  16  0.275735      -1.28831      -52.1488       52.1488       1862.49       1914.64    
  17  0.899896     -0.105476      -4.26948       4.26948       1925.45       1929.72    
  18  0.263842      -1.33241      -53.9336       53.9336       1879.41       1933.35    
  19  0.542051     -0.612396      -24.7888       24.7888       1911.00       1935.79    
  20  0.883103     -0.124314      -5.03201       5.03201       1929.90       1934.94    
  21  0.603547     -0.504931      -20.4388       20.4388       1913.70       1934.14    
  22  0.461006     -0.774344      -31.3442       31.3442       1926.23       1957.58    
  23  0.640920     -0.444850      -18.0068       18.0068       1925.30       1943.30    
  24  0.787319     -0.239122      -9.67926       9.67926       1904.36       1914.04    
  25  0.258775E-01  -3.65438      -147.923       147.923       1907.59       2055.51    
  26  0.838926     -0.175633      -7.10933       7.10933       1957.87       1964.98    
  27  0.184807      -1.68845      -68.3455       68.3455       1962.55       2030.90    
  28  0.642750     -0.441999      -17.8914       17.8914       1928.88       1946.77    
  29  0.962815     -0.378938E-01  -1.53388       1.53388       1957.84       1959.37    
  30  0.866393     -0.143417      -5.80526       5.80526       1965.45       1971.26    
  31  0.652626     -0.426751      -17.2742       17.2742       1963.44       1980.72    
  32  0.170956      -1.76635      -71.4988       71.4988       1952.51       2024.01    
  33  0.769008     -0.262654      -10.6318       10.6318       1951.17       1961.80    
  34  0.156770      -1.85298      -75.0054       75.0054       1979.33       2054.34    
  35  0.256549E-01  -3.66302      -148.273       148.273       1966.08       2114.36    
  36  0.726661     -0.319295      -12.9245       12.9245       1967.41       1980.33    
  37  0.556665     -0.585792      -23.7119       23.7119       2002.85       2026.56    
  38  0.381201     -0.964427      -39.0384       39.0384       2033.22       2072.26    
  39  0.312648      -1.16268      -47.0632       47.0632       2033.28       2080.35    
  40  0.523641     -0.646949      -26.1874       26.1874       1952.21       1978.40    
  41  0.525107     -0.644154      -26.0743       26.0743       2025.73       2051.81    
  42  0.577096     -0.549746      -22.2528       22.2528       1922.56       1944.81    
  43  0.218919      -1.51905      -61.4887       61.4887       2011.14       2072.63    
  44  0.406968     -0.899021      -36.3909       36.3909       2026.66       2063.05    
  45  0.269244      -1.31214      -53.1131       53.1131       1984.75       2037.86    
  46  0.150666      -1.89269      -76.6128       76.6128       2010.04       2086.65    
  47  0.619490     -0.478859      -19.3834       19.3834       2007.43       2026.81    
  48  0.204317      -1.58808      -64.2830       64.2830       2074.00       2138.29    
  49  0.924766     -0.782150E-01  -3.16601       3.16601       1908.00       1911.17    
  50  0.897527E-01  -2.41070      -97.5810       97.5810       1997.51       2095.09    
  51  0.938635     -0.633286E-01  -2.56344       2.56344       2042.25       2044.82    
  52  0.265009      -1.32799      -53.7549       53.7549       2096.94       2150.70    
  53  0.914538     -0.893366E-01  -3.61620       3.61620       2100.54       2104.16    
  54  0.369988     -0.994284      -40.2469       40.2469       2115.63       2155.88    
  55  0.670325     -0.399992      -16.1910       16.1910       2049.88       2066.07    
  56  0.580716     -0.543494      -21.9997       21.9997       2112.42       2134.42    
  57  0.640472     -0.445550      -18.0351       18.0351       2132.63       2150.66    
  58  0.711348E-01  -2.64318      -106.991       106.991       1780.96       1887.95    
loop,thermsimp(1:2)        4   43.1108       43.9282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328       2142.02         68.48          1.14         39.12          0.37          0.05        109.16
Just calling func    0   0        109.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2142.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        4
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        5
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      327     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.248476      0.248476       1717.59       1717.84    
   2  0.544036     -0.608740      -24.6408       24.6408       1765.83       1790.48    
   3  0.752151     -0.284818      -11.5290       11.5290       1777.11       1788.64    
   4  0.128894      -2.04876      -82.9305       82.9305       1795.34       1878.27    
   5  0.954586     -0.464781E-01  -1.88135       1.88135       1774.12       1776.00    
   6  0.699109     -0.357949      -14.4892       14.4892       1782.09       1796.58    
   7  0.158831      -1.83992      -74.4767       74.4767       1835.62       1910.09    
   8  0.317803      -1.14632      -46.4013       46.4013       1776.18       1822.58    
   9  0.533633     -0.628047      -25.4223       25.4223       1852.82       1878.24    
  10  0.232061      -1.46076      -59.1290       59.1290       1841.83       1900.96    
  11  0.798671     -0.224806      -9.09976       9.09976       1787.50       1796.60    
  12  0.629719     -0.462482      -18.7205       18.7205       1780.96       1799.68    
  13  0.285415      -1.25381      -50.7521       50.7521       1886.07       1936.83    
  14  0.101345      -2.28923      -92.6640       92.6640       1798.54       1891.20    
  15  0.523846     -0.646557      -26.1715       26.1715       1908.00       1934.18    
  16  0.570798     -0.560721      -22.6970       22.6970       1904.36       1927.06    
  17  0.471006     -0.752884      -30.4755       30.4755       1862.49       1892.97    
  18  0.439034     -0.823179      -33.3209       33.3209       1925.45       1958.77    
  19  0.755118     -0.280881      -11.3696       11.3696       1879.41       1890.78    
  20  0.987033     -0.130515E-01 -0.528302      0.528302       1913.70       1914.23    
  21  0.800390E-01  -2.52524      -102.218       102.218       1929.90       2032.12    
  22  0.739282     -0.302075      -12.2275       12.2275       1911.00       1923.22    
  23  0.367536      -1.00093      -40.5161       40.5161       1901.78       1942.30    
  24  0.397431     -0.922735      -37.3508       37.3508       1925.30       1962.65    
  25  0.338773      -1.08242      -43.8147       43.8147       1922.56       1966.38    
  26  0.388721     -0.944893      -38.2477       38.2477       1928.88       1967.12    
  27  0.298998      -1.20732      -48.8702       48.8702       1926.23       1975.10    
  28  0.668470     -0.402763      -16.3032       16.3032       1957.84       1974.14    
  29  0.604587     -0.503210      -20.3691       20.3691       1951.17       1971.54    
  30  0.455577     -0.786190      -31.8237       31.8237       1957.87       1989.69    
  31  0.842360     -0.171548      -6.94399       6.94399       1965.45       1972.40    
  32  0.452047     -0.793969      -32.1385       32.1385       1952.21       1984.35    
  33  0.994488     -0.552709E-02 -0.223728      0.223728       1967.41       1967.63    
  34  0.309000E-02  -5.77958      -233.948       233.948       1963.44       2197.39    
  35  0.171789      -1.76149      -71.3020       71.3020       1913.96       1985.26    
  36  0.567417     -0.566661      -22.9375       22.9375       1952.51       1975.45    
  37  0.885121     -0.122031      -4.93961       4.93961       2002.85       2007.79    
  38  0.342608      -1.07117      -43.3591       43.3591       2007.43       2050.79    
  39  0.954017     -0.470733E-01  -1.90545       1.90545       1962.55       1964.46    
  40  0.439346     -0.822467      -33.2921       33.2921       1984.75       2018.04    
  41  0.237365E-01  -3.74074      -151.419       151.419       2042.25       2193.67    
  42  0.100236      -2.30023      -93.1094       93.1094       2025.73       2118.84    
  43  0.539338     -0.617412      -24.9918       24.9918       1979.33       2004.32    
  44  0.825393     -0.191896      -7.76763       7.76763       1907.59       1915.35    
  45  0.252744      -1.37538      -55.6729       55.6729       2026.66       2082.33    
  46  0.676050     -0.391488      -15.8468       15.8468       2049.88       2065.73    
  47  0.621378     -0.475815      -19.2602       19.2602       2033.22       2052.48    
  48  0.375614     -0.979194      -39.6361       39.6361       2011.14       2050.78    
  49  0.638637     -0.448418      -18.1512       18.1512       2033.28       2051.44    
  50  0.540154     -0.615902      -24.9307       24.9307       2010.04       2034.97    
  51  0.295099      -1.22045      -49.4016       49.4016       1997.51       2046.91    
  52  0.195781      -1.63076      -66.0103       66.0103       2100.54       2166.55    
  53  0.430058     -0.843836      -34.1571       34.1571       1966.08       2000.24    
  54  0.686512E-01  -2.67872      -108.430       108.430       2112.42       2220.85    
  55  0.689090     -0.372384      -15.0735       15.0735       2074.00       2089.08    
  56  0.737045     -0.305106      -12.3502       12.3502       2132.63       2144.98    
  57  0.303800      -1.19139      -48.2253       48.2253       2096.94       2145.17    
  58  0.709025     -0.343864      -13.9190       13.9190       2142.02       2155.94    
loop,thermsimp(1:2)        5  0.248476       24.6408    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329       2188.48         68.40          1.12         39.25          0.53          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2188.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        5
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        6
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      328     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -43.3748       43.3748       1717.59       1760.96    
   2  0.738210     -0.303527      -12.2863       12.2863       1774.12       1786.41    
   3  0.254388      -1.36889      -55.4106       55.4106       1777.11       1832.52    
   4  0.184184      -1.69182      -68.4820       68.4820       1765.83       1834.32    
   5  0.467311     -0.760760      -30.7943       30.7943       1782.09       1812.88    
   6  0.718957     -0.329953      -13.3560       13.3560       1787.50       1800.86    
   7  0.233172      -1.45598      -58.9355       58.9355       1780.96       1839.89    
   8  0.855319     -0.156281      -6.32598       6.32598       1776.18       1782.51    
   9  0.331323      -1.10466      -44.7149       44.7149       1852.82       1897.54    
  10  0.737635E-01  -2.60689      -105.523       105.523       1795.34       1900.86    
  11  0.960656     -0.401393E-01  -1.62477       1.62477       1879.41       1881.04    
  12  0.312287      -1.16383      -47.1100       47.1100       1798.54       1845.65    
  13  0.252190      -1.37757      -55.7618       55.7618       1862.49       1918.26    
  14  0.775876     -0.253763      -10.2719       10.2719       1841.83       1852.10    
  15  0.397248     -0.923194      -37.3694       37.3694       1835.62       1872.99    
  16  0.587084E-01  -2.83517      -114.763       114.763       1913.70       2028.47    
  17  0.923214     -0.798941E-01  -3.23398       3.23398       1907.59       1910.82    
  18  0.147001      -1.91731      -77.6096       77.6096       1911.00       1988.61    
  19  0.275551      -1.28898      -52.1759       52.1759       1904.36       1956.54    
  20  0.157032      -1.85131      -74.9379       74.9379       1908.00       1982.94    
  21  0.468534     -0.758146      -30.6885       30.6885       1886.07       1916.76    
  22  0.101055      -2.29209      -92.7799       92.7799       1901.78       1994.56    
  23  0.891765     -0.114553      -4.63690       4.63690       1925.45       1930.09    
  24  0.756241     -0.279395      -11.3094       11.3094       1925.30       1936.61    
  25  0.212181E-01  -3.85290      -155.959       155.959       1962.55       2118.51    
  26  0.807607     -0.213679      -8.64939       8.64939       1922.56       1931.21    
  27  0.233854      -1.45306      -58.8174       58.8174       1928.88       1987.69    
  28  0.622600     -0.473852      -19.1807       19.1807       1967.41       1986.59    
  29  0.188561      -1.66833      -67.5313       67.5313       1951.17       2018.70    
  30  0.938432E-01  -2.36613      -95.7770       95.7770       1965.45       2061.23    
  31  0.846333     -0.166843      -6.75351       6.75351       1957.84       1964.59    
  32  0.258796      -1.35172      -54.7152       54.7152       1926.23       1980.95    
  33  0.503854     -0.685469      -27.7466       27.7466       1952.51       1980.26    
  34  0.577410     -0.549202      -22.2308       22.2308       1952.21       1974.44    
  35  0.282259E-01  -3.56751      -144.407       144.407       1913.96       2058.36    
  36  0.618901     -0.479811      -19.4219       19.4219       1957.87       1977.29    
  37  0.563982     -0.572733      -23.1833       23.1833       1966.08       1989.27    
  38  0.290650      -1.23563      -50.0164       50.0164       1979.33       2029.35    
  39  0.165662      -1.79781      -72.7722       72.7722       2002.85       2075.62    
  40  0.871949E-01  -2.43961      -98.7513       98.7513       1984.75       2083.50    
  41  0.494744     -0.703714      -28.4852       28.4852       1929.90       1958.39    
  42  0.156326      -1.85581      -75.1200       75.1200       2010.04       2085.16    
  43  0.558357     -0.582757      -23.5890       23.5890       1997.51       2021.09    
  44  0.974745     -0.255792E-01  -1.03540       1.03540       2011.14       2012.18    
  45  0.399321     -0.917991      -37.1587       37.1587       2007.43       2044.59    
  46  0.649792     -0.431103      -17.4503       17.4503       2033.28       2050.74    
  47  0.210634      -1.55763      -63.0503       63.0503       2033.22       2096.27    
  48  0.939937     -0.619427E-01  -2.50734       2.50734       2049.88       2052.39    
  49  0.617394     -0.482248      -19.5206       19.5206       2026.66       2046.18    
  50  0.435355     -0.831593      -33.6615       33.6615       2074.00       2107.67    
  51  0.423449     -0.859323      -34.7840       34.7840       2025.73       2060.52    
  52  0.922974     -0.801543E-01  -3.24451       3.24451       2132.63       2135.87    
  53  0.877321     -0.130883      -5.29791       5.29791       2096.94       2102.24    
  54  0.757805     -0.277329      -11.2258       11.2258       2142.02       2153.25    
  55  0.972356     -0.280336E-01  -1.13475       1.13475       2100.54       2101.67    
  56  0.535145     -0.625217      -25.3077       25.3077       2042.25       2067.56    
  57  0.654598     -0.423734      -17.1520       17.1520       1963.44       1980.59    
  58  0.131676E-01  -4.32999      -175.271       175.271       2188.48       2363.75    
loop,thermsimp(1:2)        6   43.3748       12.2863    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330       2112.42         68.21          1.17         39.31          0.44          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2112.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        6
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        7
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      329     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -16.3671       16.3671       1717.59       1733.96    
   2  0.361364E-01  -3.32046      -134.406       134.406       1776.18       1910.59    
   3  0.167171      -1.78874      -72.4050       72.4050       1774.12       1846.52    
   4  0.268590E-01  -3.61716      -146.416       146.416       1787.50       1933.92    
   5  0.979339     -0.208774E-01 -0.845082      0.845082       1782.09       1782.93    
   6  0.285956E-01  -3.55450      -143.880       143.880       1777.11       1920.99    
   7  0.614036     -0.487701      -19.7413       19.7413       1765.83       1785.58    
   8  0.291622      -1.23230      -49.8813       49.8813       1780.96       1830.84    
   9  0.495778     -0.701626      -28.4007       28.4007       1798.54       1826.94    
  10  0.289385      -1.24000      -50.1930       50.1930       1841.83       1892.02    
  11  0.601390     -0.508511      -20.5837       20.5837       1835.62       1856.20    
  12  0.868837     -0.140599      -5.69122       5.69122       1879.41       1885.11    
  13  0.289097E-01  -3.54358      -143.438       143.438       1852.82       1996.26    
  14  0.999895     -0.104574E-03 -0.423300E-02  0.423300E-02   1795.34       1795.35    
  15  0.547924     -0.601620      -24.3526       24.3526       1907.59       1931.94    
  16  0.562607     -0.575175      -23.2821       23.2821       1886.07       1909.36    
  17  0.422387     -0.861832      -34.8855       34.8855       1862.49       1897.38    
  18  0.934703     -0.675264E-01  -2.73336       2.73336       1925.45       1928.19    
  19  0.484044     -0.725579      -29.3702       29.3702       1922.56       1951.93    
  20  0.362136      -1.01574      -41.1153       41.1153       1925.30       1966.41    
  21  0.826677     -0.190341      -7.70467       7.70467       1904.36       1912.07    
  22  0.383965     -0.957204      -38.7460       38.7460       1929.90       1968.65    
  23  0.403854     -0.906702      -36.7018       36.7018       1957.84       1994.54    
  24  0.375365     -0.979857      -39.6630       39.6630       1952.21       1991.88    
  25  0.335540      -1.09201      -44.2029       44.2029       1957.87       2002.07    
  26  0.744256     -0.295370      -11.9561       11.9561       1952.51       1964.47    
  27  0.611040     -0.492593      -19.9393       19.9393       1963.44       1983.38    
  28  0.361728      -1.01686      -41.1609       41.1609       1926.23       1967.40    
  29  0.381582     -0.963430      -38.9980       38.9980       1908.00       1947.00    
  30  0.738884E-01  -2.60520      -105.454       105.454       1967.41       2072.86    
  31  0.185722E-01  -3.98609      -161.350       161.350       1928.88       2090.23    
  32  0.470279     -0.754429      -30.5380       30.5380       1911.00       1941.54    
  33  0.499505     -0.694139      -28.0976       28.0976       1966.08       1994.18    
  34  0.641578     -0.443824      -17.9653       17.9653       1901.78       1919.75    
  35  0.462400     -0.771325      -31.2220       31.2220       2011.14       2042.36    
  36  0.953656     -0.474527E-01  -1.92080       1.92080       1951.17       1953.09    
  37  0.305321E-01  -3.48898      -141.228       141.228       1997.51       2138.73    
  38  0.281396      -1.26799      -51.3262       51.3262       1913.70       1965.03    
  39  0.642231     -0.442807      -17.9241       17.9241       1979.33       1997.26    
  40  0.506226     -0.680772      -27.5565       27.5565       2007.43       2034.98    
  41  0.152451      -1.88091      -76.1363       76.1363       2026.66       2102.79    
  42  0.825356     -0.191941      -7.76943       7.76943       2033.28       2041.05    
  43  0.895901     -0.109926      -4.44960       4.44960       2049.88       2054.33    
  44  0.706880     -0.346894      -14.0417       14.0417       1913.96       1928.00    
  45  0.810453     -0.210162      -8.50702       8.50702       2025.73       2034.24    
  46  0.463153     -0.769698      -31.1561       31.1561       1965.45       1996.61    
  47  0.333587      -1.09785      -44.4391       44.4391       2042.25       2086.69    
  48  0.588678     -0.529875      -21.4485       21.4485       2002.85       2024.30    
  49  0.724542E-01  -2.62480      -106.248       106.248       1984.75       2090.99    
  50  0.550549     -0.596839      -24.1591       24.1591       2010.04       2034.20    
  51  0.945764     -0.557622E-01  -2.25716       2.25716       2033.22       2035.48    
  52  0.903703E-01  -2.40384      -97.3034       97.3034       2100.54       2197.84    
  53  0.435583     -0.831070      -33.6403       33.6403       2096.94       2130.58    
  54  0.364079E-01  -3.31297      -134.103       134.103       2074.00       2208.11    
  55  0.801026     -0.221862      -8.98062       8.98062       1962.55       1971.53    
  56  0.440703     -0.819384      -33.1673       33.1673       2132.63       2165.80    
  57  0.585820     -0.534743      -21.6455       21.6455       2142.02       2163.67    
  58  0.874676     -0.133902      -5.42013       5.42013       2112.42       2117.84    
loop,thermsimp(1:2)        7   16.3671       134.406    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331       2071.02         68.25          1.18         39.57          0.22          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2071.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        7
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        8
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      330     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -7.40314       7.40314       1717.59       1724.99    
   2  0.610299     -0.493806      -19.9885       19.9885       1782.09       1802.08    
   3  0.652915     -0.426308      -17.2562       17.2562       1765.83       1783.09    
   4  0.273016      -1.29823      -52.5500       52.5500       1795.34       1847.89    
   5  0.570853     -0.560623      -22.6931       22.6931       1798.54       1821.23    
   6  0.107477E-01  -4.53306      -183.491       183.491       1780.96       1964.45    
   7  0.651717     -0.428145      -17.3306       17.3306       1774.12       1791.45    
   8  0.214404      -1.53989      -62.3323       62.3323       1835.62       1897.95    
   9  0.132680      -2.01982      -81.7588       81.7588       1879.41       1961.17    
  10  0.370727     -0.992290      -40.1662       40.1662       1841.83       1881.99    
  11  0.330444      -1.10732      -44.8223       44.8223       1862.49       1907.32    
  12  0.462713     -0.770647      -31.1945       31.1945       1886.07       1917.27    
  13  0.514022     -0.665489      -26.9379       26.9379       1776.18       1803.12    
  14  0.644984     -0.438530      -17.7510       17.7510       1904.36       1922.11    
  15  0.813975     -0.205826      -8.33150       8.33150       1901.78       1910.12    
  16  0.434803     -0.832863      -33.7129       33.7129       1777.11       1810.82    
  17  0.212985      -1.54653      -62.6011       62.6011       1913.96       1976.56    
  18  0.796179     -0.227931      -9.22625       9.22625       1925.45       1934.68    
  19  0.259948      -1.34727      -54.5354       54.5354       1907.59       1962.12    
  20  0.526723     -0.641081      -25.9499       25.9499       1787.50       1813.45    
  21  0.392691     -0.934731      -37.8363       37.8363       1911.00       1948.83    
  22  0.949472     -0.518494E-01  -2.09878       2.09878       1908.00       1910.10    
  23  0.665479E-01  -2.70983      -109.690       109.690       1922.56       2032.25    
  24  0.927466E-01  -2.37788      -96.2528       96.2528       1951.17       2047.42    
  25  0.630503     -0.461237      -18.6701       18.6701       1952.51       1971.18    
  26  0.714749     -0.335823      -13.5936       13.5936       1913.70       1927.30    
  27  0.450999     -0.796290      -32.2325       32.2325       1925.30       1957.53    
  28  0.184997      -1.68742      -68.3039       68.3039       1926.23       1994.54    
  29  0.989607     -0.104473E-01 -0.422890      0.422890       1929.90       1930.33    
  30  0.530766     -0.633434      -25.6404       25.6404       1962.55       1988.19    
  31  0.495227     -0.702738      -28.4457       28.4457       1963.44       1991.89    
  32  0.787696     -0.238642      -9.65985       9.65985       1952.21       1961.87    
  33  0.168123      -1.78306      -72.1753       72.1753       1966.08       2038.26    
  34  0.205580      -1.58192      -64.0335       64.0335       1957.84       2021.87    
  35  0.182087      -1.70327      -68.9457       68.9457       1852.82       1921.77    
  36  0.320489      -1.13791      -46.0606       46.0606       1965.45       2011.51    
  37  0.591526     -0.525050      -21.2531       21.2531       1979.33       2000.58    
  38  0.374258     -0.982811      -39.7825       39.7825       1957.87       1997.65    
  39  0.578871     -0.546675      -22.1285       22.1285       2002.85       2024.98    
  40  0.542113     -0.612280      -24.7841       24.7841       2010.04       2034.82    
  41  0.123399      -2.09233      -84.6942       84.6942       2025.73       2110.43    
  42  0.874747     -0.133820      -5.41683       5.41683       2007.43       2012.84    
  43  0.521146     -0.651725      -26.3807       26.3807       2033.22       2059.60    
  44  0.160493      -1.82950      -74.0552       74.0552       2033.28       2107.34    
  45  0.606451     -0.500131      -20.2444       20.2444       2011.14       2031.39    
  46  0.947463     -0.539676E-01  -2.18452       2.18452       2049.88       2052.07    
  47  0.187698      -1.67292      -67.7170       67.7170       1967.41       2035.13    
  48  0.157453      -1.84863      -74.8295       74.8295       2042.25       2117.08    
  49  0.411413     -0.888157      -35.9511       35.9511       1928.88       1964.83    
  50  0.399256     -0.918152      -37.1653       37.1653       1984.75       2021.91    
  51  0.629238     -0.463246      -18.7514       18.7514       2026.66       2045.41    
  52  0.831952     -0.183980      -7.44721       7.44721       2112.42       2119.86    
  53  0.677270     -0.389686      -15.7738       15.7738       2096.94       2112.72    
  54  0.937557     -0.644782E-01  -2.60997       2.60997       1997.51       2000.12    
  55  0.410617     -0.890095      -36.0296       36.0296       2142.02       2178.05    
  56  0.896761E-01  -2.41155      -97.6155       97.6155       2132.63       2230.24    
  57  0.757537     -0.277683      -11.2402       11.2402       2100.54       2111.78    
  58  0.893032     -0.113133      -4.57942       4.57942       2071.02       2075.60    
loop,thermsimp(1:2)        8   7.40314       19.9885    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332       2150.92         68.17          1.16         39.57          0.22          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2150.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        8
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:        9
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      331     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -66.5731       66.5731       1717.59       1784.16    
   2  0.822950     -0.194860      -7.88761       7.88761       1765.83       1773.72    
   3  0.396787     -0.924357      -37.4164       37.4164       1774.12       1811.54    
   4  0.141060      -1.95857      -79.2796       79.2796       1782.09       1861.37    
   5  0.673747     -0.394901      -15.9849       15.9849       1776.18       1792.16    
   6  0.142835      -1.94606      -78.7733       78.7733       1777.11       1855.89    
   7  0.707555     -0.345940      -14.0031       14.0031       1787.50       1801.51    
   8  0.957483     -0.434474E-01  -1.75868       1.75868       1798.54       1800.30    
   9  0.524586     -0.645145      -26.1144       26.1144       1795.34       1821.46    
  10  0.692024     -0.368135      -14.9015       14.9015       1841.83       1856.73    
  11  0.936675E-01  -2.36800      -95.8528       95.8528       1835.62       1931.47    
  12  0.216270      -1.53123      -61.9815       61.9815       1862.49       1924.47    
  13  0.329369      -1.11058      -44.9543       44.9543       1908.00       1952.96    
  14  0.670774     -0.399323      -16.1639       16.1639       1901.78       1917.95    
  15  0.263445      -1.33391      -53.9944       53.9944       1886.07       1940.07    
  16  0.150248      -1.89547      -76.7254       76.7254       1852.82       1929.55    
  17  0.357034      -1.02992      -41.6896       41.6896       1904.36       1946.05    
  18  0.833286E-01  -2.48496      -100.587       100.587       1913.70       2014.29    
  19  0.431395     -0.840731      -34.0314       34.0314       1929.90       1963.94    
  20  0.304550      -1.18892      -48.1255       48.1255       1925.45       1973.58    
  21  0.930203     -0.723520E-01  -2.92869       2.92869       1911.00       1913.93    
  22  0.443091     -0.813979      -32.9485       32.9485       1925.30       1958.25    
  23  0.361548      -1.01736      -41.1810       41.1810       1879.41       1920.60    
  24  0.603851     -0.504427      -20.4184       20.4184       1952.21       1972.63    
  25  0.825014     -0.192355      -7.78620       7.78620       1907.59       1915.37    
  26  0.658742     -0.417424      -16.8966       16.8966       1780.96       1797.85    
  27  0.938632     -0.633319E-01  -2.56357       2.56357       1928.88       1931.44    
  28  0.264383E-01  -3.63294      -147.055       147.055       1952.51       2099.57    
  29  0.770543     -0.260660      -10.5511       10.5511       1913.96       1924.51    
  30  0.536385     -0.622903      -25.2141       25.2141       1962.55       1987.77    
  31  0.173997      -1.74872      -70.7852       70.7852       1963.44       2034.23    
  32  0.876286     -0.132063      -5.34568       5.34568       1926.23       1931.58    
  33  0.447573     -0.803915      -32.5411       32.5411       1957.87       1990.41    
  34  0.521740E-01  -2.95317      -119.539       119.539       1997.51       2117.05    
  35  0.509285     -0.674747      -27.3126       27.3126       1979.33       2006.64    
  36  0.135259      -2.00056      -80.9794       80.9794       1965.45       2046.43    
  37  0.238321      -1.43414      -58.0514       58.0514       2007.43       2065.48    
  38  0.146995      -1.91735      -77.6113       77.6113       1957.84       2035.45    
  39  0.166047      -1.79549      -72.6783       72.6783       1984.75       2057.42    
  40  0.830113     -0.186194      -7.53681       7.53681       2002.85       2010.39    
  41  0.638960     -0.447914      -18.1308       18.1308       2011.14       2029.27    
  42  0.156696      -1.85345      -75.0246       75.0246       1922.56       1997.59    
  43  0.956507     -0.444668E-01  -1.79994       1.79994       2010.04       2011.84    
  44  0.313979      -1.15843      -46.8913       46.8913       1967.41       2014.30    
  45  0.185265      -1.68597      -68.2451       68.2451       1966.08       2034.33    
  46  0.952300     -0.488757E-01  -1.97841       1.97841       2026.66       2028.63    
  47  0.181060      -1.70892      -69.1744       69.1744       1951.17       2020.34    
  48  0.969330     -0.311499E-01  -1.26089       1.26089       2049.88       2051.14    
  49  0.832772     -0.182996      -7.40736       7.40736       2033.22       2040.63    
  50  0.733500     -0.309927      -12.5453       12.5453       2071.02       2083.56    
  51  0.901211     -0.104016      -4.21038       4.21038       2033.28       2037.50    
  52  0.598700     -0.512995      -20.7652       20.7652       2025.73       2046.50    
  53  0.982368     -0.177897E-01 -0.720099      0.720099       2100.54       2101.26    
  54  0.244719      -1.40764      -56.9790       56.9790       2096.94       2153.92    
  55  0.824383     -0.193120      -7.81715       7.81715       2042.25       2050.07    
  56  0.755417     -0.280485      -11.3536       11.3536       2112.42       2123.77    
  57  0.548139     -0.601226      -24.3366       24.3366       2142.02       2166.36    
  58  0.886061     -0.120970      -4.89666       4.89666       2150.92       2155.82    
loop,thermsimp(1:2)        9   66.5731       7.88761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333       2100.37         68.39          1.13         39.00          0.52          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2100.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:        9
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       10
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      332     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -26.7728       26.7728       1765.83       1792.61    
   2  0.677402     -0.389491      -15.7659       15.7659       1717.59       1733.35    
   3  0.899541     -0.105871      -4.28547       4.28547       1776.18       1780.46    
   4  0.235706      -1.44517      -58.4980       58.4980       1780.96       1839.45    
   5  0.194769      -1.63594      -66.2203       66.2203       1798.54       1864.76    
   6  0.814930     -0.204653      -8.28401       8.28401       1787.50       1795.79    
   7  0.727423E-01  -2.62083      -106.087       106.087       1774.12       1880.21    
   8  0.126759      -2.06547      -83.6068       83.6068       1795.34       1878.95    
   9  0.592876     -0.522770      -21.1609       21.1609       1777.11       1798.27    
  10  0.131380      -2.02966      -82.1574       82.1574       1841.83       1923.99    
  11  0.394760E-01  -3.23206      -130.828       130.828       1782.09       1912.92    
  12  0.539964     -0.616252      -24.9448       24.9448       1911.00       1935.94    
  13  0.127256      -2.06155      -83.4483       83.4483       1907.59       1991.03    
  14  0.245583      -1.40412      -56.8364       56.8364       1901.78       1958.62    
  15  0.236145E-01  -3.74590      -151.628       151.628       1879.41       2031.04    
  16  0.791943     -0.233266      -9.44221       9.44221       1862.49       1871.94    
  17  0.223014      -1.50052      -60.7386       60.7386       1913.96       1974.70    
  18  0.943370     -0.582970E-01  -2.35976       2.35976       1852.82       1855.18    
  19  0.844237     -0.169322      -6.85387       6.85387       1928.88       1935.73    
  20  0.600301     -0.510323      -20.6570       20.6570       1835.62       1856.27    
  21  0.742625E-01  -2.60015      -105.250       105.250       1926.23       2031.48    
  22  0.288925E-01  -3.54417      -143.462       143.462       1886.07       2029.54    
  23  0.325834      -1.12137      -45.3911       45.3911       1904.36       1949.75    
  24  0.317147      -1.14839      -46.4849       46.4849       1908.00       1954.49    
  25  0.655873     -0.421788      -17.0733       17.0733       1925.30       1942.37    
  26  0.259034      -1.35080      -54.6779       54.6779       1929.90       1984.58    
  27  0.639742E-01  -2.74927      -111.286       111.286       1952.21       2063.50    
  28  0.110416E-01  -4.50609      -182.399       182.399       1925.45       2107.85    
  29  0.768965E-01  -2.56529      -103.839       103.839       1962.55       2066.39    
  30  0.757182     -0.278151      -11.2591       11.2591       1957.87       1969.13    
  31  0.788615     -0.237477      -9.61266       9.61266       1922.56       1932.17    
  32  0.724297     -0.322554      -13.0564       13.0564       1979.33       1992.39    
  33  0.807261     -0.214109      -8.66677       8.66677       2002.85       2011.52    
  34  0.356497      -1.03143      -41.7505       41.7505       2010.04       2051.79    
  35  0.685602     -0.377458      -15.2789       15.2789       1913.70       1928.98    
  36  0.681617     -0.383288      -15.5148       15.5148       1967.41       1982.92    
  37  0.323748      -1.12779      -45.6510       45.6510       1951.17       1996.82    
  38  0.622817     -0.473503      -19.1666       19.1666       2026.66       2045.82    
  39  0.534584     -0.626266      -25.3502       25.3502       2011.14       2036.49    
  40  0.130255E-02  -6.64343      -268.915       268.915       1963.44       2232.36    
  41  0.357398      -1.02891      -41.6484       41.6484       1966.08       2007.73    
  42  0.290986      -1.23448      -49.9698       49.9698       1957.84       2007.81    
  43  0.182566      -1.70064      -68.8392       68.8392       2033.28       2102.12    
  44  0.695597     -0.362984      -14.6930       14.6930       2033.22       2047.91    
  45  0.612287     -0.490555      -19.8568       19.8568       1965.45       1985.31    
  46  0.845780     -0.167496      -6.77995       6.77995       2025.73       2032.51    
  47  0.628042     -0.465149      -18.8284       18.8284       2042.25       2061.08    
  48  0.830233     -0.186049      -7.53096       7.53096       2049.88       2057.41    
  49  0.373260     -0.985481      -39.8906       39.8906       1984.75       2024.64    
  50  0.711640     -0.340183      -13.7701       13.7701       2007.43       2021.20    
  51  0.449400     -0.799842      -32.3763       32.3763       2071.02       2103.40    
  52  0.253029      -1.37425      -55.6273       55.6273       1952.51       2008.14    
  53  0.956034     -0.449619E-01  -1.81998       1.81998       2100.54       2102.36    
  54  0.544467     -0.607949      -24.6087       24.6087       1997.51       2022.11    
  55  0.419963     -0.867588      -35.1185       35.1185       2112.42       2147.53    
  56  0.372696E-02  -5.59216      -226.361       226.361       2096.94       2323.30    
  57  0.519921     -0.654079      -26.4760       26.4760       2150.92       2177.40    
  58  0.563761     -0.573124      -23.1991       23.1991       2100.37       2123.57    
loop,thermsimp(1:2)       10   26.7728       15.7659    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334       1788.41         68.51          1.11         39.00          0.48          0.05        109.15
Just calling func    0   0        109.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1788.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       10
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       11
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      333     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -12.3382       12.3382       1717.59       1729.93    
   2  0.372515     -0.987477      -39.9714       39.9714       1776.18       1816.15    
   3  0.197611E-01  -3.92404      -158.839       158.839       1765.83       1924.67    
   4  0.939239     -0.626858E-01  -2.53742       2.53742       1787.50       1790.04    
   5  0.212506      -1.54879      -62.6922       62.6922       1777.11       1839.80    
   6  0.141762      -1.95360      -79.0786       79.0786       1780.96       1860.03    
   7  0.183632      -1.69482      -68.6036       68.6036       1852.82       1921.42    
   8  0.479067     -0.735915      -29.7886       29.7886       1835.62       1865.41    
   9  0.113189      -2.17870      -88.1900       88.1900       1798.54       1886.73    
  10  0.314091      -1.15807      -46.8768       46.8768       1862.49       1909.37    
  11  0.457761     -0.781409      -31.6301       31.6301       1795.34       1826.97    
  12  0.923744     -0.793200E-01  -3.21074       3.21074       1774.12       1777.33    
  13  0.805387     -0.216433      -8.76084       8.76084       1782.09       1790.85    
  14  0.979257     -0.209609E-01 -0.848461      0.848461       1841.83       1842.68    
  15  0.634716E-01  -2.75716      -111.605       111.605       1913.70       2025.31    
  16  0.502866     -0.687432      -27.8261       27.8261       1922.56       1950.39    
  17  0.844986     -0.168435      -6.81797       6.81797       1928.88       1935.69    
  18  0.548347     -0.600848      -24.3213       24.3213       1911.00       1935.32    
  19  0.825472     -0.191800      -7.76374       7.76374       1925.30       1933.06    
  20  0.806424     -0.215145      -8.70871       8.70871       1904.36       1913.07    
  21  0.497450E-01  -3.00085      -121.469       121.469       1908.00       2029.47    
  22  0.407289     -0.898233      -36.3590       36.3590       1901.78       1938.14    
  23  0.522833     -0.648493      -26.2499       26.2499       1957.87       1984.12    
  24  0.763038     -0.270448      -10.9473       10.9473       1913.96       1924.90    
  25  0.706120     -0.347970      -14.0853       14.0853       1967.41       1981.49    
  26  0.540862     -0.614591      -24.8776       24.8776       1929.90       1954.78    
  27  0.807340E-01  -2.51660      -101.868       101.868       1965.45       2067.32    
  28  0.310756      -1.16875      -47.3089       47.3089       1907.59       1954.90    
  29  0.689192     -0.372235      -15.0675       15.0675       1979.33       1994.40    
  30  0.634973     -0.454174      -18.3842       18.3842       1951.17       1969.55    
  31  0.598432     -0.513442      -20.7833       20.7833       1966.08       1986.87    
  32  0.393639     -0.932321      -37.7388       37.7388       1957.84       1995.58    
  33  0.369460     -0.995714      -40.3048       40.3048       1952.51       1992.82    
  34  0.129274      -2.04582      -82.8113       82.8113       2002.85       2085.66    
  35  0.250376      -1.38479      -56.0541       56.0541       2007.43       2063.48    
  36  0.536641     -0.622425      -25.1947       25.1947       1997.51       2022.70    
  37  0.495942     -0.701296      -28.3873       28.3873       1984.75       2013.13    
  38  0.650684     -0.429731      -17.3948       17.3948       1886.07       1903.47    
  39  0.889212     -0.117420      -4.75296       4.75296       1879.41       1884.17    
  40  0.314936      -1.15539      -46.7681       46.7681       1926.23       1973.00    
  41  0.943567     -0.580875E-01  -2.35128       2.35128       2025.73       2028.08    
  42  0.672016     -0.397473      -16.0890       16.0890       2011.14       2027.23    
  43  0.133907      -2.01061      -81.3862       81.3862       2026.66       2108.04    
  44  0.259017      -1.35086      -54.6805       54.6805       2033.22       2087.90    
  45  0.112444      -2.18530      -88.4572       88.4572       2010.04       2098.50    
  46  0.235994      -1.44395      -58.4486       58.4486       2049.88       2108.33    
  47  0.879651     -0.128231      -5.19056       5.19056       2042.25       2047.44    
  48  0.750555     -0.286942      -11.6149       11.6149       1952.21       1963.83    
  49  0.996491E-01  -2.30610      -93.3471       93.3471       1962.55       2055.90    
  50  0.100853      -2.29409      -92.8610       92.8610       2033.28       2126.15    
  51  0.520543     -0.652882      -26.4276       26.4276       2100.54       2126.97    
  52  0.886361E-01  -2.42322      -98.0877       98.0877       2071.02       2169.11    
  53  0.152463      -1.88083      -76.1329       76.1329       1925.45       2001.59    
  54  0.286446E-03  -8.15796      -330.221       330.221       2100.37       2430.59    
  55  0.472863     -0.748950      -30.3162       30.3162       2112.42       2142.73    
  56  0.907202     -0.973898E-01  -3.94218       3.94218       2150.92       2154.87    
  57  0.194253      -1.63859      -66.3275       66.3275       1963.44       2029.77    
  58  0.560994     -0.578045      -23.3983       23.3983       1788.41       1811.81    
loop,thermsimp(1:2)       11   12.3382       39.9714    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335       2112.38         68.49          1.14         39.01          0.53          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2112.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       11
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       12
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      334     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -9.87652       9.87652       1717.59       1727.46    
   2  0.973841     -0.265069E-01  -1.07295       1.07295       1774.12       1775.19    
   3  0.294662      -1.22193      -49.4615       49.4615       1787.50       1836.97    
   4  0.702628     -0.352928      -14.2859       14.2859       1782.09       1796.37    
   5  0.763280     -0.270131      -10.9344       10.9344       1788.41       1799.34    
   6  0.578080E-01  -2.85063      -115.389       115.389       1776.18       1891.57    
   7  0.834037     -0.181478      -7.34593       7.34593       1795.34       1802.69    
   8  0.976312     -0.239730E-01 -0.970387      0.970387       1777.11       1778.08    
   9  0.603670     -0.504728      -20.4305       20.4305       1841.83       1862.26    
  10  0.458546     -0.779695      -31.5607       31.5607       1780.96       1812.52    
  11  0.201917      -1.59990      -64.7612       64.7612       1835.62       1900.38    
  12  0.362727      -1.01411      -41.0493       41.0493       1879.41       1920.46    
  13  0.466909E-01  -3.06421      -124.034       124.034       1798.54       1922.57    
  14  0.602192     -0.507180      -20.5298       20.5298       1886.07       1906.60    
  15  0.332545      -1.10098      -44.5659       44.5659       1862.49       1907.06    
  16  0.758378     -0.276574      -11.1952       11.1952       1904.36       1915.56    
  17  0.834950     -0.180384      -7.30164       7.30164       1852.82       1860.12    
  18  0.910410     -0.938599E-01  -3.79929       3.79929       1765.83       1769.63    
  19  0.825418E-01  -2.49445      -100.971       100.971       1913.96       2014.93    
  20  0.639611     -0.446894      -18.0895       18.0895       1925.30       1943.39    
  21  0.345418      -1.06300      -43.0284       43.0284       1911.00       1954.03    
  22  0.961674     -0.390802E-01  -1.58190       1.58190       1928.88       1930.46    
  23  0.274135      -1.29413      -52.3844       52.3844       1901.78       1954.17    
  24  0.275236      -1.29013      -52.2222       52.2222       1922.56       1974.78    
  25  0.373550     -0.984704      -39.8592       39.8592       1929.90       1969.76    
  26  0.407178     -0.898505      -36.3700       36.3700       1907.59       1943.96    
  27  0.908773     -0.956602E-01  -3.87217       3.87217       1952.21       1956.09    
  28  0.578518     -0.547286      -22.1532       22.1532       1951.17       1973.32    
  29  0.674288     -0.394098      -15.9524       15.9524       1926.23       1942.19    
  30  0.758166     -0.276853      -11.2065       11.2065       1967.41       1978.62    
  31  0.764349E-01  -2.57132      -104.083       104.083       1957.87       2061.95    
  32  0.962342     -0.383853E-01  -1.55377       1.55377       1966.08       1967.64    
  33  0.918960     -0.845125E-01  -3.42092       3.42092       1952.51       1955.93    
  34  0.617888     -0.481448      -19.4882       19.4882       1979.33       1998.82    
  35  0.227646      -1.47996      -59.9064       59.9064       1957.84       2017.75    
  36  0.262001      -1.33941      -54.2169       54.2169       1925.45       1979.67    
  37  0.589438     -0.528586      -21.3963       21.3963       1984.75       2006.14    
  38  0.201352      -1.60270      -64.8746       64.8746       1997.51       2062.38    
  39  0.350279      -1.04903      -42.4628       42.4628       1913.70       1956.17    
  40  0.647374     -0.434831      -17.6012       17.6012       2011.14       2028.74    
  41  0.604508     -0.503341      -20.3744       20.3744       2025.73       2046.11    
  42  0.700946     -0.355325      -14.3830       14.3830       1908.00       1922.39    
  43  0.575270     -0.552915      -22.3811       22.3811       1963.44       1985.82    
  44  0.554419     -0.589835      -23.8755       23.8755       2042.25       2066.13    
  45  0.375300     -0.980029      -39.6700       39.6700       1962.55       2002.22    
  46  0.605541     -0.501632      -20.3052       20.3052       2007.43       2027.73    
  47  0.109847      -2.20867      -89.4031       89.4031       1965.45       2054.86    
  48  0.553505     -0.591485      -23.9423       23.9423       2002.85       2026.79    
  49  0.412268     -0.886082      -35.8671       35.8671       2033.22       2069.09    
  50  0.664246     -0.409102      -16.5598       16.5598       2010.04       2026.60    
  51  0.707719     -0.345708      -13.9937       13.9937       2026.66       2040.65    
  52  0.750886     -0.286501      -11.5971       11.5971       2049.88       2061.48    
  53  0.339698      -1.07970      -43.7043       43.7043       2033.28       2076.99    
  54  0.849457     -0.163157      -6.60434       6.60434       2100.54       2107.14    
  55  0.206681E-02  -6.18175      -250.227       250.227       2112.42       2362.64    
  56  0.251051      -1.38210      -55.9450       55.9450       2150.92       2206.87    
  57  0.224827      -1.49242      -60.4108       60.4108       2071.02       2131.43    
  58  0.335724      -1.09147      -44.1807       44.1807       2112.38       2156.56    
loop,thermsimp(1:2)       12   9.87652       1.07295    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336       2132.16         68.42          1.16         39.12          0.46          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2132.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       12
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       13
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      335     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01  -1.47157       1.47157       1717.59       1719.06    
   2  0.963371     -0.373169E-01  -1.51053       1.51053       1765.83       1767.35    
   3  0.851172E-02  -4.76631      -192.932       192.932       1774.12       1967.05    
   4  0.731929E-01  -2.61466      -105.837       105.837       1777.11       1882.95    
   5  0.491869     -0.709543      -28.7211       28.7211       1782.09       1810.81    
   6  0.625436     -0.469306      -18.9967       18.9967       1788.41       1807.40    
   7  0.139469      -1.96991      -79.7389       79.7389       1795.34       1875.08    
   8  0.464987     -0.765746      -30.9961       30.9961       1780.96       1811.95    
   9  0.192956      -1.64529      -66.5987       66.5987       1787.50       1854.10    
  10  0.184589E-01  -3.99221      -161.598       161.598       1852.82       2014.42    
  11  0.327387      -1.11661      -45.1985       45.1985       1841.83       1887.03    
  12  0.447570     -0.803921      -32.5414       32.5414       1776.18       1808.72    
  13  0.282132      -1.26538      -51.2205       51.2205       1835.62       1886.84    
  14  0.991234     -0.880510E-02 -0.356416      0.356416       1886.07       1886.43    
  15  0.574009     -0.555110      -22.4699       22.4699       1862.49       1884.96    
  16  0.884017     -0.123279      -4.99011       4.99011       1904.36       1909.35    
  17  0.332578      -1.10088      -44.5618       44.5618       1879.41       1923.98    
  18  0.294524      -1.22240      -49.4805       49.4805       1908.00       1957.49    
  19  0.865605     -0.144326      -5.84209       5.84209       1798.54       1804.38    
  20  0.441883E-01  -3.11930      -126.264       126.264       1928.88       2055.14    
  21  0.652915     -0.426309      -17.2563       17.2563       1926.23       1943.49    
  22  0.712636E-01  -2.64137      -106.918       106.918       1925.30       2032.22    
  23  0.211397      -1.55402      -62.9040       62.9040       1907.59       1970.49    
  24  0.836672E-01  -2.48091      -100.423       100.423       1911.00       2011.42    
  25  0.397953     -0.921422      -37.2976       37.2976       1901.78       1939.08    
  26  0.545442     -0.606159      -24.5363       24.5363       1952.51       1977.05    
  27  0.628874     -0.463825      -18.7749       18.7749       1952.21       1970.99    
  28  0.243035      -1.41455      -57.2586       57.2586       1913.70       1970.96    
  29  0.700237     -0.356336      -14.4239       14.4239       1966.08       1980.51    
  30  0.887974     -0.118813      -4.80935       4.80935       1929.90       1934.71    
  31  0.354481      -1.03710      -41.9801       41.9801       1951.17       1993.15    
  32  0.579479     -0.545626      -22.0860       22.0860       1922.56       1944.65    
  33  0.873601E-01  -2.43772      -98.6747       98.6747       1967.41       2066.08    
  34  0.414510     -0.880658      -35.6476       35.6476       1925.45       1961.10    
  35  0.263485      -1.33376      -53.9884       53.9884       1963.44       2017.43    
  36  0.174560E-01  -4.04807      -163.859       163.859       1979.33       2143.19    
  37  0.461287     -0.773735      -31.3195       31.3195       1962.55       1993.87    
  38  0.914554     -0.893185E-01  -3.61546       3.61546       1984.75       1988.36    
  39  0.551497     -0.595119      -24.0894       24.0894       1913.96       1938.05    
  40  0.751145     -0.286157      -11.5831       11.5831       1957.84       1969.42    
  41  0.838814     -0.175766      -7.11470       7.11470       2010.04       2017.15    
  42  0.494321     -0.704571      -28.5199       28.5199       2002.85       2031.37    
  43  0.878137     -0.129953      -5.26026       5.26026       2007.43       2012.69    
  44  0.249667      -1.38763      -56.1689       56.1689       2011.14       2067.31    
  45  0.569995     -0.562128      -22.7540       22.7540       2026.66       2049.41    
  46  0.338221      -1.08406      -43.8808       43.8808       2025.73       2069.61    
  47  0.536421     -0.622836      -25.2114       25.2114       1965.45       1990.67    
  48  0.482027     -0.729755      -29.5392       29.5392       2049.88       2079.42    
  49  0.436505     -0.828955      -33.5547       33.5547       1957.87       1991.43    
  50  0.225116      -1.49114      -60.3589       60.3589       1997.51       2057.86    
  51  0.126546      -2.06715      -83.6749       83.6749       2042.25       2125.93    
  52  0.182898      -1.69882      -68.7656       68.7656       2033.22       2101.99    
  53  0.114159      -2.17017      -87.8447       87.8447       2033.28       2121.13    
  54  0.582926     -0.539695      -21.8459       21.8459       2100.54       2122.39    
  55  0.583079     -0.539432      -21.8353       21.8353       2071.02       2092.85    
  56  0.430119     -0.843693      -34.1513       34.1513       2112.38       2146.53    
  57  0.468275     -0.758699      -30.7108       30.7108       2150.92       2181.63    
  58  0.323186      -1.12953      -45.7213       45.7213       2132.16       2177.88    
loop,thermsimp(1:2)       13   1.47157       1.51053    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337       2100.65         68.38          1.14         39.18          0.43          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2100.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       13
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       14
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      336     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -25.2339       25.2339       1717.59       1742.82    
   2  0.902010     -0.103129      -4.17450       4.17450       1765.83       1770.01    
   3  0.918906     -0.845717E-01  -3.42332       3.42332       1798.54       1801.96    
   4  0.300977E-01  -3.50330      -141.808       141.808       1788.41       1930.22    
   5  0.180939      -1.70960      -69.2016       69.2016       1776.18       1845.38    
   6  0.996736     -0.326981E-02 -0.132356      0.132356       1782.09       1782.22    
   7  0.974749     -0.255749E-01  -1.03523       1.03523       1780.96       1781.99    
   8  0.259085      -1.35060      -54.6700       54.6700       1787.50       1842.17    
   9  0.237439      -1.43784      -58.2015       58.2015       1795.34       1853.54    
  10  0.733816     -0.309497      -12.5279       12.5279       1777.11       1789.64    
  11  0.458028     -0.780824      -31.6065       31.6065       1862.49       1894.10    
  12  0.623300     -0.472727      -19.1352       19.1352       1886.07       1905.21    
  13  0.789074     -0.236895      -9.58913       9.58913       1835.62       1845.21    
  14  0.718847     -0.330107      -13.3622       13.3622       1841.83       1855.19    
  15  0.414258     -0.881266      -35.6722       35.6722       1904.36       1940.04    
  16  0.121880E-01  -4.40730      -178.400       178.400       1879.41       2057.81    
  17  0.976927     -0.233433E-01 -0.944896      0.944896       1929.90       1930.85    
  18  0.998133     -0.186873E-02 -0.756431E-01  0.756431E-01   1913.96       1914.03    
  19  0.582806     -0.539901      -21.8543       21.8543       1901.78       1923.64    
  20  0.461010     -0.774335      -31.3438       31.3438       1926.23       1957.58    
  21  0.748404     -0.289812      -11.7311       11.7311       1922.56       1934.29    
  22  0.627394     -0.466180      -18.8702       18.8702       1908.00       1926.87    
  23  0.823247     -0.194499      -7.87301       7.87301       1925.45       1933.33    
  24  0.696302     -0.361971      -14.6520       14.6520       1774.12       1788.77    
  25  0.571207     -0.560004      -22.6680       22.6680       1957.84       1980.51    
  26  0.189272      -1.66457      -67.3791       67.3791       1907.59       1974.97    
  27  0.534816     -0.625833      -25.3327       25.3327       1913.70       1939.04    
  28  0.846241     -0.166951      -6.75790       6.75790       1952.21       1958.97    
  29  0.157466      -1.84855      -74.8260       74.8260       1952.51       2027.34    
  30  0.123756      -2.08945      -84.5772       84.5772       1966.08       2050.66    
  31  0.458067     -0.780739      -31.6030       31.6030       1984.75       2016.35    
  32  0.989772     -0.102804E-01 -0.416132      0.416132       1965.45       1965.87    
  33  0.292614      -1.22890      -49.7438       49.7438       1957.87       2007.62    
  34  0.707885     -0.345474      -13.9842       13.9842       1951.17       1965.15    
  35  0.686290     -0.376455      -15.2383       15.2383       1962.55       1977.79    
  36  0.752747     -0.284026      -11.4969       11.4969       1911.00       1922.49    
  37  0.577950E-01  -2.85085      -115.398       115.398       2007.43       2122.83    
  38  0.496568E-02  -5.30521      -214.746       214.746       1852.82       2067.57    
  39  0.632817     -0.457575      -18.5219       18.5219       2010.04       2028.56    
  40  0.306568      -1.18232      -47.8581       47.8581       1963.44       2011.30    
  41  0.800757     -0.222198      -8.99419       8.99419       2002.85       2011.85    
  42  0.754206     -0.282090      -11.4185       11.4185       1925.30       1936.72    
  43  0.875958     -0.132437      -5.36085       5.36085       2026.66       2032.02    
  44  0.411581     -0.887750      -35.9346       35.9346       1928.88       1964.81    
  45  0.784837     -0.242279      -9.80706       9.80706       1997.51       2007.31    
  46  0.615964     -0.484567      -19.6145       19.6145       1967.41       1987.02    
  47  0.427318     -0.850227      -34.4158       34.4158       2011.14       2045.56    
  48  0.373288     -0.985405      -39.8876       39.8876       2025.73       2065.62    
  49  0.118712      -2.13106      -86.2616       86.2616       2049.88       2136.15    
  50  0.465204     -0.765279      -30.9772       30.9772       2071.02       2102.00    
  51  0.361628      -1.01714      -41.1721       41.1721       2033.22       2074.39    
  52  0.625886     -0.468587      -18.9676       18.9676       2033.28       2052.25    
  53  0.164441      -1.80521      -73.0717       73.0717       2100.54       2173.61    
  54  0.311940      -1.16494      -47.1550       47.1550       2042.25       2089.41    
  55  0.269725E-01  -3.61294      -146.246       146.246       1979.33       2125.58    
  56  0.242465      -1.41690      -57.3537       57.3537       2112.38       2169.73    
  57  0.263333      -1.33434      -54.0118       54.0118       2132.16       2186.17    
  58  0.214624E-02  -6.14404      -248.700       248.700       2100.65       2349.35    
loop,thermsimp(1:2)       14   25.2339       4.17450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338       2150.92         68.40          1.13         39.03          0.67          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2150.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       14
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       15
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      337     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -63.1558       63.1558       1717.59       1780.74    
   2  0.682169     -0.382478      -15.4821       15.4821       1765.83       1781.32    
   3  0.831163     -0.184930      -7.48564       7.48564       1780.96       1788.44    
   4  0.625179     -0.469718      -19.0134       19.0134       1782.09       1801.10    
   5  0.907522     -0.970376E-01  -3.92792       3.92792       1774.12       1778.05    
   6  0.406703     -0.899672      -36.4172       36.4172       1777.11       1813.53    
   7  0.463060     -0.769899      -31.1642       31.1642       1798.54       1829.70    
   8  0.206056      -1.57961      -63.9399       63.9399       1787.50       1851.44    
   9  0.303716      -1.19166      -48.2365       48.2365       1835.62       1883.85    
  10  0.843889     -0.169734      -6.87057       6.87057       1776.18       1783.05    
  11  0.273678      -1.29580      -52.4519       52.4519       1795.34       1847.79    
  12  0.571842     -0.558892      -22.6230       22.6230       1841.83       1864.45    
  13  0.803131     -0.219238      -8.87438       8.87438       1862.49       1871.37    
  14  0.330375      -1.10753      -44.8308       44.8308       1886.07       1930.91    
  15  0.155557      -1.86074      -75.3198       75.3198       1913.96       1989.28    
  16  0.878823     -0.129172      -5.22866       5.22866       1911.00       1916.23    
  17  0.781654     -0.246343      -9.97155       9.97155       1901.78       1911.76    
  18  0.782655     -0.245064      -9.91976       9.91976       1908.00       1917.92    
  19  0.682155     -0.382499      -15.4829       15.4829       1788.41       1803.89    
  20  0.899702     -0.105691      -4.27821       4.27821       1929.90       1934.18    
  21  0.444808     -0.810113      -32.7920       32.7920       1925.45       1958.25    
  22  0.495252     -0.702688      -28.4437       28.4437       1922.56       1951.01    
  23  0.640834     -0.444984      -18.0122       18.0122       1925.30       1943.31    
  24  0.314465      -1.15688      -46.8287       46.8287       1913.70       1960.53    
  25  0.368564     -0.998140      -40.4030       40.4030       1904.36       1944.77    
  26  0.572254E-02  -5.16334      -209.003       209.003       1926.23       2135.24    
  27  0.468080E-01  -3.06170      -123.933       123.933       1952.21       2076.15    
  28  0.598693E-01  -2.81559      -113.970       113.970       1928.88       2042.85    
  29  0.658687     -0.417508      -16.9000       16.9000       1951.17       1968.07    
  30  0.449565     -0.799475      -32.3614       32.3614       1965.45       1997.82    
  31  0.799405     -0.223887      -9.06257       9.06257       1907.59       1916.65    
  32  0.414416     -0.880885      -35.6568       35.6568       1962.55       1998.21    
  33  0.395703E-01  -3.22968      -130.732       130.732       1957.84       2088.57    
  34  0.704129E-01  -2.65338      -107.404       107.404       1967.41       2074.81    
  35  0.336217      -1.09000      -44.1214       44.1214       1997.51       2041.63    
  36  0.169926      -1.77239      -71.7434       71.7434       1957.87       2029.61    
  37  0.846601E-01  -2.46911      -99.9455       99.9455       1963.44       2063.39    
  38  0.798628     -0.224860      -9.10196       9.10196       2002.85       2011.95    
  39  0.377891     -0.973150      -39.3915       39.3915       1984.75       2024.14    
  40  0.183739      -1.69424      -68.5799       68.5799       1952.51       2021.09    
  41  0.930280     -0.722695E-01  -2.92535       2.92535       2010.04       2012.96    
  42  0.280682      -1.27053      -51.4290       51.4290       2026.66       2078.08    
  43  0.475397     -0.743606      -30.0999       30.0999       2011.14       2041.24    
  44  0.705714     -0.348545      -14.1085       14.1085       1966.08       1980.19    
  45  0.307479      -1.17935      -47.7381       47.7381       2033.28       2081.02    
  46  0.408291     -0.895776      -36.2595       36.2595       1879.41       1915.67    
  47  0.174897      -1.74356      -70.5763       70.5763       2025.73       2096.31    
  48  0.462267     -0.771612      -31.2336       31.2336       1852.82       1884.05    
  49  0.805682E-01  -2.51865      -101.951       101.951       2033.22       2135.17    
  50  0.276714      -1.28477      -52.0054       52.0054       2042.25       2094.26    
  51  0.914639     -0.892253E-01  -3.61169       3.61169       2071.02       2074.63    
  52  0.575354     -0.552769      -22.3752       22.3752       2007.43       2029.80    
  53  0.537577     -0.620684      -25.1242       25.1242       1979.33       2004.46    
  54  0.209256      -1.56420      -63.3161       63.3161       2049.88       2113.20    
  55  0.778351     -0.250578      -10.1430       10.1430       2112.38       2122.52    
  56  0.903762E-01  -2.40377      -97.3008       97.3008       2100.54       2197.84    
  57  0.758334E-01  -2.57922      -104.402       104.402       2132.16       2236.56    
  58  0.588112     -0.530837      -21.4874       21.4874       2150.92       2172.41    
loop,thermsimp(1:2)       15   63.1558       15.4821    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339       2112.42         68.30          1.13         39.24          0.49          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2112.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       15
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       16
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      338     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -110.466       110.466       1774.12       1884.59    
   2  0.388935     -0.944342      -38.2254       38.2254       1717.59       1755.81    
   3  0.716732     -0.333053      -13.4814       13.4814       1765.83       1779.32    
   4  0.375936     -0.978336      -39.6014       39.6014       1776.18       1815.78    
   5  0.518505E-01  -2.95939      -119.791       119.791       1780.96       1900.75    
   6  0.892279     -0.113976      -4.61356       4.61356       1782.09       1786.70    
   7  0.145412      -1.92818      -78.0497       78.0497       1788.41       1866.46    
   8  0.759376E-01  -2.57784      -104.347       104.347       1777.11       1881.46    
   9  0.799111     -0.224255      -9.07746       9.07746       1798.54       1807.62    
  10  0.566636     -0.568038      -22.9932       22.9932       1795.34       1818.33    
  11  0.957834     -0.430803E-01  -1.74382       1.74382       1787.50       1789.25    
  12  0.421133     -0.864808      -35.0060       35.0060       1841.83       1876.83    
  13  0.965171     -0.354495E-01  -1.43494       1.43494       1862.49       1863.93    
  14  0.527073     -0.640416      -25.9230       25.9230       1835.62       1861.54    
  15  0.221584      -1.50695      -60.9989       60.9989       1852.82       1913.82    
  16  0.675180     -0.392776      -15.8989       15.8989       1901.78       1917.68    
  17  0.462159     -0.771846      -31.2430       31.2430       1879.41       1910.66    
  18  0.134826      -2.00377      -81.1091       81.1091       1911.00       1992.11    
  19  0.869165     -0.140222      -5.67595       5.67595       1907.59       1913.26    
  20  0.898965     -0.106511      -4.31137       4.31137       1908.00       1912.32    
  21  0.174160      -1.74778      -70.7473       70.7473       1886.07       1956.82    
  22  0.463810     -0.768281      -31.0987       31.0987       1929.90       1961.00    
  23  0.145870      -1.92504      -77.9223       77.9223       1925.30       2003.22    
  24  0.525172     -0.644029      -26.0692       26.0692       1904.36       1930.43    
  25  0.667609     -0.404052      -16.3554       16.3554       1922.56       1938.92    
  26  0.964408     -0.362405E-01  -1.46695       1.46695       1925.45       1926.92    
  27  0.981636     -0.185350E-01 -0.750264      0.750264       1913.70       1914.45    
  28  0.585742     -0.534875      -21.6509       21.6509       1951.17       1972.82    
  29  0.956106     -0.448864E-01  -1.81693       1.81693       1966.08       1967.90    
  30  0.153686      -1.87284      -75.8095       75.8095       1913.96       1989.77    
  31  0.937356     -0.646920E-01  -2.61862       2.61862       1965.45       1968.07    
  32  0.821414     -0.196728      -7.96322       7.96322       1962.55       1970.52    
  33  0.901583     -0.103603      -4.19368       4.19368       1979.33       1983.53    
  34  0.145469      -1.92779      -78.0338       78.0338       2002.85       2080.89    
  35  0.944310     -0.573011E-01  -2.31945       2.31945       2010.04       2012.36    
  36  0.639748     -0.446680      -18.0809       18.0809       1952.51       1970.59    
  37  0.533071     -0.629101      -25.4650       25.4650       1984.75       2010.21    
  38  0.708805     -0.344175      -13.9316       13.9316       1957.87       1971.80    
  39  0.953023     -0.481167E-01  -1.94768       1.94768       2007.43       2009.38    
  40  0.606832     -0.499502      -20.2190       20.2190       2011.14       2031.36    
  41  0.791257     -0.234132      -9.47727       9.47727       1997.51       2006.98    
  42  0.203064      -1.59423      -64.5319       64.5319       1928.88       1993.41    
  43  0.168642      -1.77998      -72.0505       72.0505       1963.44       2035.49    
  44  0.718173     -0.331045      -13.4002       13.4002       2071.02       2084.42    
  45  0.976939E-02  -4.62850      -187.354       187.354       1967.41       2154.76    
  46  0.211685      -1.55265      -62.8489       62.8489       1952.21       2015.06    
  47  0.624191     -0.471298      -19.0774       19.0774       2026.66       2045.73    
  48  0.749801     -0.287948      -11.6556       11.6556       2033.28       2044.94    
  49  0.710340     -0.342011      -13.8440       13.8440       1957.84       1971.68    
  50  0.447179     -0.804797      -32.5768       32.5768       2042.25       2074.83    
  51  0.567779     -0.566023      -22.9117       22.9117       2025.73       2048.64    
  52  0.262390      -1.33792      -54.1569       54.1569       2049.88       2104.04    
  53  0.907024     -0.975861E-01  -3.95012       3.95012       2112.38       2116.33    
  54  0.621682E-01  -2.77791      -112.445       112.445       2033.22       2145.67    
  55  0.667173     -0.404707      -16.3818       16.3818       1926.23       1942.62    
  56  0.429586     -0.844932      -34.2014       34.2014       2150.92       2185.13    
  57  0.758744     -0.276091      -11.1757       11.1757       2100.54       2111.72    
  58  0.890716     -0.115730      -4.68455       4.68455       2112.42       2117.10    
loop,thermsimp(1:2)       16   110.466       38.2254    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340       2104.80         68.40          1.15         39.12          0.37          0.05        109.09
Just calling func    0   0        109.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2104.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       16
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       17
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      339     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -28.9602       28.9602       1717.59       1746.55    
   2  0.243137      -1.41413      -57.2416       57.2416       1765.83       1823.08    
   3  0.530653     -0.633646      -25.6489       25.6489       1782.09       1807.74    
   4  0.926282     -0.765763E-01  -3.09968       3.09968       1787.50       1790.60    
   5  0.374288     -0.982729      -39.7792       39.7792       1798.54       1838.32    
   6  0.675293     -0.392608      -15.8921       15.8921       1776.18       1792.07    
   7  0.605942     -0.500970      -20.2784       20.2784       1795.34       1815.62    
   8  0.280229      -1.27215      -51.4944       51.4944       1835.62       1887.11    
   9  0.297259      -1.21315      -49.1063       49.1063       1862.49       1911.60    
  10  0.697504E-01  -2.66283      -107.787       107.787       1788.41       1896.19    
  11  0.824348     -0.193163      -7.81892       7.81892       1841.83       1849.65    
  12  0.750452     -0.287080      -11.6205       11.6205       1777.11       1788.73    
  13  0.120595      -2.11532      -85.6245       85.6245       1774.12       1859.74    
  14  0.935324     -0.668625E-01  -2.70648       2.70648       1780.96       1783.66    
  15  0.215551      -1.53456      -62.1164       62.1164       1879.41       1941.53    
  16  0.708821     -0.344153      -13.9307       13.9307       1908.00       1921.94    
  17  0.402499     -0.910063      -36.8378       36.8378       1907.59       1944.42    
  18  0.836443     -0.178597      -7.22931       7.22931       1852.82       1860.05    
  19  0.969979E-01  -2.33307      -94.4386       94.4386       1913.70       2008.14    
  20  0.178795      -1.72152      -69.6841       69.6841       1901.78       1971.47    
  21  0.140077      -1.96556      -79.5626       79.5626       1925.45       2005.02    
  22  0.375507     -0.979479      -39.6477       39.6477       1904.36       1944.01    
  23  0.831487     -0.184540      -7.46986       7.46986       1922.56       1930.03    
  24  0.815951     -0.203401      -8.23332       8.23332       1926.23       1934.47    
  25  0.468603     -0.757998      -30.6825       30.6825       1886.07       1916.76    
  26  0.677551     -0.389270      -15.7570       15.7570       1929.90       1945.66    
  27  0.169538      -1.77468      -71.8360       71.8360       1966.08       2037.92    
  28  0.950448     -0.508223E-01  -2.05720       2.05720       1965.45       1967.51    
  29  0.981726     -0.184427E-01 -0.746531      0.746531       1962.55       1963.30    
  30  0.442406     -0.815527      -33.0112       33.0112       1952.51       1985.52    
  31  0.531953     -0.631200      -25.5499       25.5499       1957.84       1983.39    
  32  0.363692      -1.01145      -40.9418       40.9418       1957.87       1998.81    
  33  0.144511E-01  -4.23698      -171.506       171.506       1951.17       2122.67    
  34  0.748780     -0.289310      -11.7108       11.7108       1979.33       1991.04    
  35  0.195075      -1.63437      -66.1566       66.1566       1913.96       1980.11    
  36  0.440325     -0.820241      -33.2020       33.2020       1911.00       1944.20    
  37  0.805864     -0.215841      -8.73688       8.73688       1928.88       1937.61    
  38  0.921415     -0.818451E-01  -3.31295       3.31295       1925.30       1928.61    
  39  0.296293      -1.21641      -49.2380       49.2380       1997.51       2046.74    
  40  0.645874E-01  -2.73974      -110.900       110.900       2007.43       2118.33    
  41  0.488279     -0.716868      -29.0176       29.0176       1984.75       2013.76    
  42  0.573105     -0.556686      -22.5337       22.5337       2010.04       2032.57    
  43  0.967891     -0.326356E-01  -1.32103       1.32103       1952.21       1953.53    
  44  0.780434E-01  -2.55049      -103.240       103.240       2011.14       2114.38    
  45  0.968859     -0.316363E-01  -1.28059       1.28059       1963.44       1964.72    
  46  0.858835     -0.152178      -6.15992       6.15992       2033.28       2039.44    
  47  0.968806     -0.316911E-01  -1.28280       1.28280       2026.66       2027.94    
  48  0.134500      -2.00619      -81.2071       81.2071       2025.73       2106.94    
  49  0.993707     -0.631323E-02 -0.255549      0.255549       2042.25       2042.51    
  50  0.300401      -1.20264      -48.6808       48.6808       2002.85       2051.53    
  51  0.166933      -1.79016      -72.4628       72.4628       2071.02       2143.48    
  52  0.917937     -0.856264E-01  -3.46602       3.46602       2049.88       2053.35    
  53  0.587259     -0.532289      -21.5462       21.5462       2100.54       2122.09    
  54  0.470076     -0.754861      -30.5555       30.5555       2112.38       2142.93    
  55  0.256936      -1.35893      -55.0071       55.0071       2112.42       2167.42    
  56  0.723917     -0.323079      -13.0777       13.0777       2033.22       2046.30    
  57  0.294593      -1.22216      -49.4710       49.4710       1967.41       2016.88    
  58  0.700842     -0.355473      -14.3889       14.3889       2104.80       2119.18    
loop,thermsimp(1:2)       17   28.9602       57.2416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341       2163.47         68.46          1.13         38.98          0.48          0.05        109.10
Just calling func    0   0        109.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    2163.5        3.014     -3.069      3.360     -102.6    -0.8470E-01
                      0.1494      1.307     -99.70      4.397     0.2360    

                       3.623     -3.164      1.540      6606.      7000.    

                      -2.124      0.000      0.000      0.000     -1.221    



                      -1.823      0.000      0.000      7000.      780.4    

                      -1.528     -3.775     -6.956     -8.546      7.140    

                      -13.85     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.5576E-01 0.6744E-01 0.5835E-01 0.7249E-01

                     -0.2486     0.1371     0.4029E-01 0.7178E-01 0.1234E-01



                     -0.8983    -0.6837      0.000    -0.7394E-01 0.2168    

                      0.9008E-01 0.1515    -0.7116     0.7022E-01 0.7954    

                      0.5911E-01 0.1151    -0.3836     -1.600      7000.    



                      -1.239     -1.257     -2.142     -1.982    -0.3807    

                     -0.3252      9.209      8.436    -0.1701E+05 -5.553    

                     -0.4032     -2.330      8.689      9.140    -0.1969E+05



                      -6.000     0.4749     0.9524E-01  8.851      9.083    

                     -0.1944E+05 -6.000     0.3365E-01-0.3290      9.753    

                       8.803    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2163.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       17
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       18
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      340     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -28.8242       28.8242       1717.59       1746.41    
   2  0.486668     -0.720173      -29.1514       29.1514       1780.96       1810.11    
   3  0.319995E-01  -3.44203      -139.328       139.328       1777.11       1916.44    
   4  0.957863     -0.430503E-01  -1.74260       1.74260       1787.50       1789.25    
   5  0.713202E-01  -2.64058      -106.886       106.886       1776.18       1883.07    
   6  0.677570     -0.389242      -15.7559       15.7559       1782.09       1797.84    
   7  0.533853     -0.627634      -25.4056       25.4056       1795.34       1820.75    
   8  0.963967     -0.366984E-01  -1.48549       1.48549       1765.83       1767.32    
   9  0.590118     -0.527432      -21.3496       21.3496       1798.54       1819.89    
  10  0.102350      -2.27936      -92.2645       92.2645       1841.83       1934.09    
  11  0.313487      -1.16000      -46.9548       46.9548       1774.12       1821.07    
  12  0.876181     -0.132183      -5.35053       5.35053       1852.82       1858.17    
  13  0.780541     -0.247768      -10.0292       10.0292       1835.62       1845.65    
  14  0.222922      -1.50093      -60.7552       60.7552       1788.41       1849.16    
  15  0.913991     -0.899351E-01  -3.64042       3.64042       1862.49       1866.13    
  16  0.493176     -0.706888      -28.6137       28.6137       1886.07       1914.69    
  17  0.884766     -0.122432      -4.95584       4.95584       1908.00       1912.96    
  18  0.576549E-01  -2.85328      -115.496       115.496       1925.30       2040.79    
  19  0.398597     -0.919804      -37.2321       37.2321       1922.56       1959.79    
  20  0.980633     -0.195573E-01 -0.791646      0.791646       1926.23       1927.03    
  21  0.304985      -1.18749      -48.0677       48.0677       1928.88       1976.94    
  22  0.628666     -0.464156      -18.7883       18.7883       1879.41       1898.20    
  23  0.367895     -0.999957      -40.4766       40.4766       1904.36       1944.84    
  24  0.442302     -0.815762      -33.0207       33.0207       1911.00       1944.02    
  25  0.656121     -0.421410      -17.0580       17.0580       1907.59       1924.64    
  26  0.229893      -1.47014      -59.5088       59.5088       1929.90       1989.41    
  27  0.475469     -0.743453      -30.0937       30.0937       1952.21       1982.31    
  28  0.801985     -0.220665      -8.93216       8.93216       1962.55       1971.48    
  29  0.454630     -0.788272      -31.9079       31.9079       1963.44       1995.35    
  30  0.858022     -0.153126      -6.19827       6.19827       1965.45       1971.65    
  31  0.692704     -0.367153      -14.8617       14.8617       1901.78       1916.65    
  32  0.466274     -0.762981      -30.8842       30.8842       1913.96       1944.84    
  33  0.682446     -0.382072      -15.4656       15.4656       1957.84       1973.31    
  34  0.660760     -0.414365      -16.7728       16.7728       1952.51       1969.28    
  35  0.957519     -0.434092E-01  -1.75713       1.75713       1979.33       1981.09    
  36  0.108167      -2.22408      -90.0270       90.0270       1957.87       2047.90    
  37  0.846378     -0.166789      -6.75135       6.75135       1925.45       1932.20    
  38  0.621158E-01  -2.77876      -112.479       112.479       1913.70       2026.18    
  39  0.988945E-01  -2.31370      -93.6547       93.6547       1984.75       2078.40    
  40  0.253472      -1.37250      -55.5566       55.5566       1967.41       2022.97    
  41  0.915015     -0.888152E-01  -3.59509       3.59509       2026.66       2030.25    
  42  0.662342     -0.411973      -16.6760       16.6760       2010.04       2026.72    
  43  0.210223      -1.55959      -63.1295       63.1295       1966.08       2029.21    
  44  0.141043      -1.95869      -79.2847       79.2847       2033.28       2112.57    
  45  0.839834     -0.174551      -7.06555       7.06555       2042.25       2049.32    
  46  0.132358      -2.02225      -81.8571       81.8571       2033.22       2115.08    
  47  0.129895E-01  -4.34361      -175.822       175.822       1997.51       2173.33    
  48  0.795497     -0.228788      -9.26095       9.26095       2002.85       2012.11    
  49  0.547485     -0.602421      -24.3850       24.3850       2049.88       2074.27    
  50  0.137643      -1.98309      -80.2722       80.2722       2025.73       2106.00    
  51  0.603188     -0.505526      -20.4628       20.4628       2011.14       2031.60    
  52  0.394039     -0.931305      -37.6977       37.6977       2007.43       2045.13    
  53  0.777307     -0.251920      -10.1973       10.1973       2104.80       2114.99    
  54  0.946969     -0.544893E-01  -2.20563       2.20563       2100.54       2102.75    
  55  0.137504      -1.98410      -80.3130       80.3130       1951.17       2031.48    
  56  0.712611     -0.338820      -13.7148       13.7148       2112.38       2126.09    
  57  0.274991      -1.29102      -52.2582       52.2582       2071.02       2123.28    
  58  0.847791     -0.165121      -6.68384       6.68384       2163.47       2170.15    
loop,thermsimp(1:2)       18   28.8242       29.1514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342       2096.97         68.38          1.15         39.09          0.46          0.05        109.13
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2096.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       18
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       19
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      341     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -75.4281       75.4281       1717.59       1793.02    
   2  0.881882     -0.125697      -5.08802       5.08802       1765.83       1770.92    
   3  0.908319     -0.961592E-01  -3.89236       3.89236       1787.50       1791.40    
   4  0.732380     -0.311455      -12.6072       12.6072       1782.09       1794.70    
   5  0.367412      -1.00127      -40.5298       40.5298       1780.96       1821.49    
   6  0.624330     -0.471077      -19.0684       19.0684       1798.54       1817.61    
   7  0.833858     -0.181693      -7.35461       7.35461       1795.34       1802.70    
   8  0.194603E-02  -6.24197      -252.664       252.664       1774.12       2026.78    
   9  0.995416     -0.459497E-02 -0.185997      0.185997       1835.62       1835.80    
  10  0.665599     -0.407068      -16.4774       16.4774       1788.41       1804.89    
  11  0.747574     -0.290922      -11.7760       11.7760       1852.82       1864.60    
  12  0.539692     -0.616756      -24.9653       24.9653       1862.49       1887.46    
  13  0.958323     -0.425700E-01  -1.72316       1.72316       1776.18       1777.90    
  14  0.111027      -2.19798      -88.9707       88.9707       1879.41       1968.39    
  15  0.520965     -0.652072      -26.3948       26.3948       1908.00       1934.40    
  16  0.177207E-01  -4.03302      -163.250       163.250       1886.07       2049.32    
  17  0.860365     -0.150398      -6.08788       6.08788       1777.11       1783.20    
  18  0.383700     -0.957895      -38.7740       38.7740       1901.78       1940.56    
  19  0.524904     -0.644539      -26.0899       26.0899       1907.59       1933.68    
  20  0.589629     -0.528262      -21.3832       21.3832       1926.23       1947.62    
  21  0.125125      -2.07844      -84.1319       84.1319       1925.45       2009.59    
  22  0.154207      -1.86946      -75.6726       75.6726       1841.83       1917.50    
  23  0.752747     -0.284026      -11.4969       11.4969       1911.00       1922.49    
  24  0.551286     -0.595501      -24.1049       24.1049       1904.36       1928.47    
  25  0.733343     -0.310142      -12.5540       12.5540       1913.96       1926.51    
  26  0.904985     -0.998368E-01  -4.04123       4.04123       1922.56       1926.60    
  27  0.987632     -0.124455E-01 -0.503775      0.503775       1952.51       1953.01    
  28  0.228587      -1.47584      -59.7394       59.7394       1962.55       2022.29    
  29  0.384883     -0.954815      -38.6493       38.6493       1965.45       2004.10    
  30  0.781910     -0.246015      -9.95829       9.95829       1957.84       1967.80    
  31  0.402051E-02  -5.51635      -223.292       223.292       1928.88       2152.17    
  32  0.880575     -0.127180      -5.14805       5.14805       1979.33       1984.48    
  33  0.427180     -0.850550      -34.4288       34.4288       1952.21       1986.64    
  34  0.613064     -0.489286      -19.8055       19.8055       1929.90       1949.71    
  35  0.529053     -0.636668      -25.7712       25.7712       1963.44       1989.21    
  36  0.973505     -0.268519E-01  -1.08692       1.08692       2002.85       2003.94    
  37  0.889868     -0.116682      -4.72310       4.72310       1967.41       1972.13    
  38  0.133989      -2.01000      -81.3613       81.3613       1913.70       1995.07    
  39  0.289828      -1.23847      -50.1311       50.1311       2010.04       2060.17    
  40  0.724995     -0.321591      -13.0175       13.0175       1966.08       1979.10    
  41  0.547932     -0.601605      -24.3519       24.3519       2026.66       2051.01    
  42  0.608240E-01  -2.79977      -113.330       113.330       1951.17       2064.50    
  43  0.481259E-01  -3.03393      -122.809       122.809       2011.14       2133.95    
  44  0.356843      -1.03046      -41.7112       41.7112       1925.30       1967.01    
  45  0.417411     -0.873685      -35.3653       35.3653       2007.43       2042.79    
  46  0.918903     -0.845742E-01  -3.42342       3.42342       1957.87       1961.29    
  47  0.852285     -0.159834      -6.46982       6.46982       2042.25       2048.72    
  48  0.744864     -0.294553      -11.9230       11.9230       2049.88       2061.81    
  49  0.128521      -2.05166      -83.0480       83.0480       1984.75       2067.79    
  50  0.484639     -0.724351      -29.3205       29.3205       2100.54       2129.86    
  51  0.478847     -0.736375      -29.8072       29.8072       2025.73       2055.54    
  52  0.557656     -0.584013      -23.6399       23.6399       2033.28       2056.92    
  53  0.799673     -0.223552      -9.04900       9.04900       2104.80       2113.85    
  54  0.734793     -0.308167      -12.4741       12.4741       2033.22       2045.69    
  55  0.306231      -1.18342      -47.9027       47.9027       2071.02       2118.92    
  56  0.286852      -1.24879      -50.5489       50.5489       2112.38       2162.92    
  57  0.731298     -0.312934      -12.6670       12.6670       2163.47       2176.14    
  58  0.681466     -0.383509      -15.5238       15.5238       2096.97       2112.50    
loop,thermsimp(1:2)       19   75.4281       5.08802    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343       2094.99         68.39          1.11         38.98          0.67          0.05        109.20
Just calling func    0   0        109.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2094.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       19
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       20
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      342     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -52.5839       52.5839       1765.83       1818.42    
   2  0.284829      -1.25587      -50.8353       50.8353       1776.18       1827.01    
   3  0.422534E-01  -3.16407      -128.076       128.076       1777.11       1905.19    
   4  0.788018E-01  -2.54082      -102.848       102.848       1787.50       1890.35    
   5  0.396626E-01  -3.22735      -130.638       130.638       1717.59       1848.23    
   6  0.412432     -0.885684      -35.8510       35.8510       1782.09       1817.94    
   7  0.390866     -0.939390      -38.0249       38.0249       1795.34       1833.37    
   8  0.853334     -0.158604      -6.42002       6.42002       1788.41       1794.83    
   9  0.506127     -0.680968      -27.5644       27.5644       1798.54       1826.10    
  10  0.254200      -1.36963      -55.4405       55.4405       1780.96       1836.40    
  11  0.643116     -0.441430      -17.8684       17.8684       1835.62       1853.49    
  12  0.897721     -0.107896      -4.36746       4.36746       1852.82       1857.19    
  13  0.830899     -0.185247      -7.49850       7.49850       1862.49       1869.99    
  14  0.357312      -1.02915      -41.6581       41.6581       1841.83       1883.49    
  15  0.525942     -0.642564      -26.0099       26.0099       1911.00       1937.01    
  16  0.742929     -0.297155      -12.0283       12.0283       1913.96       1925.99    
  17  0.970959     -0.294711E-01  -1.19294       1.19294       1922.56       1923.75    
  18  0.235894      -1.44437      -58.4658       58.4658       1904.36       1962.83    
  19  0.723381E-01  -2.62640      -106.312       106.312       1907.59       2013.90    
  20  0.190915      -1.65593      -67.0292       67.0292       1908.00       1975.03    
  21  0.524670     -0.644986      -26.1080       26.1080       1901.78       1927.89    
  22  0.536043     -0.623540      -25.2399       25.2399       1926.23       1951.47    
  23  0.281730      -1.26681      -51.2782       51.2782       1929.90       1981.18    
  24  0.747791     -0.290632      -11.7643       11.7643       1952.51       1964.27    
  25  0.255771      -1.36347      -55.1910       55.1910       1957.87       2013.06    
  26  0.194866      -1.63544      -66.2000       66.2000       1925.30       1991.50    
  27  0.639630     -0.446865      -18.0883       18.0883       1957.84       1975.93    
  28  0.485808     -0.721941      -29.2230       29.2230       1879.41       1908.64    
  29  0.659147     -0.416809      -16.8717       16.8717       1967.41       1984.28    
  30  0.196308      -1.62807      -65.9015       65.9015       1966.08       2031.99    
  31  0.308964      -1.17453      -47.5430       47.5430       1979.33       2026.87    
  32  0.181287      -1.70768      -69.1239       69.1239       1952.21       2021.34    
  33  0.386667     -0.950191      -38.4622       38.4622       1963.44       2001.90    
  34  0.947825     -0.535853E-01  -2.16904       2.16904       1913.70       1915.87    
  35  0.699942     -0.356758      -14.4410       14.4410       2002.85       2017.29    
  36  0.208747      -1.56663      -63.4146       63.4146       1965.45       2028.87    
  37  0.717648     -0.331775      -13.4297       13.4297       1925.45       1938.88    
  38  0.734922     -0.307991      -12.4669       12.4669       1962.55       1975.02    
  39  0.862816     -0.147554      -5.97274       5.97274       1774.12       1780.09    
  40  0.677494     -0.389354      -15.7604       15.7604       2007.43       2023.19    
  41  0.829375     -0.187082      -7.57278       7.57278       2033.22       2040.79    
  42  0.393856     -0.931770      -37.7165       37.7165       2042.25       2079.97    
  43  0.447370     -0.804370      -32.5595       32.5595       1886.07       1918.63    
  44  0.485389     -0.722806      -29.2580       29.2580       2026.66       2055.91    
  45  0.522363     -0.649392      -26.2863       26.2863       2025.73       2052.02    
  46  0.740056E-01  -2.60361      -105.390       105.390       2033.28       2138.67    
  47  0.396252     -0.925705      -37.4710       37.4710       2010.04       2047.51    
  48  0.429395     -0.845378      -34.2195       34.2195       2049.88       2084.10    
  49  0.865472     -0.144480      -5.84832       5.84832       1951.17       1957.02    
  50  0.103085      -2.27220      -91.9750       91.9750       1984.75       2076.72    
  51  0.257437      -1.35698      -54.9283       54.9283       2096.97       2151.90    
  52  0.136338      -1.99262      -80.6578       80.6578       2104.80       2185.45    
  53  0.153596      -1.87343      -75.8333       75.8333       2071.02       2146.85    
  54  0.305406      -1.18611      -48.0118       48.0118       2100.54       2148.55    
  55  0.473340     -0.747942      -30.2754       30.2754       2011.14       2041.42    
  56  0.475010     -0.744419      -30.1328       30.1328       1928.88       1959.01    
  57  0.779699     -0.248847      -10.0729       10.0729       2112.38       2122.45    
  58  0.143364      -1.94237      -78.6237       78.6237       2094.99       2173.61    
loop,thermsimp(1:2)       20   52.5839       50.8353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344       2170.83         68.37          1.11         39.07          0.90          0.05        109.50
Just calling func    0   0        109.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2170.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       20
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       21
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      343
neval,tstepnext:      343     343

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -111.659       111.659       1774.12       1885.78    
   2  0.713782     -0.337177      -13.6484       13.6484       1788.41       1802.06    
   3  0.851614     -0.160622      -6.50172       6.50172       1782.09       1788.59    
   4  0.721769     -0.326050      -13.1979       13.1979       1765.83       1779.03    
   5  0.954937     -0.461102E-01  -1.86646       1.86646       1798.54       1800.40    
   6  0.302532E-01  -3.49815      -141.599       141.599       1776.18       1917.78    
   7  0.942920E-01  -2.36136      -95.5839       95.5839       1795.34       1890.93    
   8  0.515750E-01  -2.96472      -120.007       120.007       1780.96       1900.96    
   9  0.612753     -0.489794      -19.8260       19.8260       1717.59       1737.41    
  10  0.758041     -0.277018      -11.2132       11.2132       1835.62       1846.83    
  11  0.530485E-01  -2.93655      -118.867       118.867       1852.82       1971.69    
  12  0.941175     -0.606258E-01  -2.45403       2.45403       1862.49       1864.95    
  13  0.167539      -1.78654      -72.3162       72.3162       1841.83       1914.14    
  14  0.738662E-01  -2.60550      -105.466       105.466       1787.50       1892.97    
  15  0.822155     -0.195827      -7.92675       7.92675       1777.11       1785.04    
  16  0.578765     -0.546859      -22.1359       22.1359       1879.41       1901.55    
  17  0.912739E-01  -2.39389      -96.9007       96.9007       1913.70       2010.61    
  18  0.949215     -0.521197E-01  -2.10972       2.10972       1886.07       1888.18    
  19  0.485124     -0.723351      -29.2800       29.2800       1922.56       1951.84    
  20  0.359009      -1.02441      -41.4663       41.4663       1913.96       1955.42    
  21  0.747559     -0.290942      -11.7769       11.7769       1901.78       1913.56    
  22  0.482847     -0.728056      -29.4705       29.4705       1911.00       1940.47    
  23  0.994301     -0.571526E-02 -0.231344      0.231344       1925.45       1925.68    
  24  0.937801     -0.642177E-01  -2.59942       2.59942       1926.23       1928.83    
  25  0.699033     -0.358058      -14.4936       14.4936       1951.17       1965.66    
  26  0.358162      -1.02677      -41.5620       41.5620       1928.88       1970.44    
  27  0.746418     -0.292470      -11.8387       11.8387       1904.36       1916.20    
  28  0.532195     -0.630744      -25.5315       25.5315       1952.51       1978.04    
  29  0.727066     -0.318738      -12.9020       12.9020       1962.55       1975.45    
  30  0.461510     -0.773252      -31.2999       31.2999       1908.00       1939.30    
  31  0.285112      -1.25487      -50.7952       50.7952       1957.84       2008.64    
  32  0.316830      -1.14939      -46.5254       46.5254       1929.90       1976.43    
  33  0.835731     -0.179448      -7.26376       7.26376       1967.41       1974.67    
  34  0.516269E-02  -5.26630      -213.171       213.171       1925.30       2138.47    
  35  0.309002      -1.17441      -47.5381       47.5381       1963.44       2010.98    
  36  0.770766     -0.260370      -10.5393       10.5393       1957.87       1968.41    
  37  0.878913     -0.129069      -5.22449       5.22449       1907.59       1912.81    
  38  0.981341E-01  -2.32142      -93.9672       93.9672       2002.85       2096.82    
  39  0.634060     -0.455612      -18.4424       18.4424       1952.21       1970.66    
  40  0.359967      -1.02174      -41.3585       41.3585       2007.43       2048.79    
  41  0.480002     -0.733964      -29.7096       29.7096       1979.33       2009.04    
  42  0.706923     -0.346834      -14.0393       14.0393       1965.45       1979.49    
  43  0.497828     -0.697501      -28.2337       28.2337       1966.08       1994.32    
  44  0.885038     -0.122125      -4.94340       4.94340       2033.22       2038.16    
  45  0.504752     -0.683689      -27.6746       27.6746       2011.14       2038.82    
  46  0.719262     -0.329529      -13.3388       13.3388       2010.04       2023.38    
  47  0.516359     -0.660954      -26.7543       26.7543       2025.73       2052.49    
  48  0.584389E-01  -2.83977      -114.949       114.949       2026.66       2141.60    
  49  0.768960E-01  -2.56530      -103.839       103.839       1984.75       2088.59    
  50  0.253658      -1.37177      -55.5268       55.5268       2042.25       2097.78    
  51  0.451822     -0.794468      -32.1587       32.1587       2049.88       2082.04    
  52  0.816822     -0.202334      -8.19014       8.19014       2112.38       2120.57    
  53  0.774668     -0.255321      -10.3350       10.3350       2033.28       2043.62    
  54  0.528070     -0.638526      -25.8464       25.8464       2071.02       2096.87    
  55  0.367170      -1.00193      -40.5564       40.5564       2100.54       2141.10    
  56  0.960919E-01  -2.34245      -94.8185       94.8185       2096.97       2191.79    
  57  0.621616     -0.475432      -19.2447       19.2447       2094.99       2114.24    
  58  0.678193     -0.388324      -15.7187       15.7187       2170.83       2186.54    
loop,thermsimp(1:2)       21   111.659       13.6484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345       2025.04         68.46          1.14         38.97          0.56          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2025.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    40.4783               343
loop is:       21
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    40.4783               343
loop is:       22
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    20.2392               400

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      344     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -16.8539       16.8539       1717.59       1734.44    
   2  0.380177E-01  -3.26970      -66.1761       66.1761       1765.83       1832.01    
   3  0.198795      -1.61548      -32.6960       32.6960       1777.11       1809.81    
   4  0.880944E-01  -2.42935      -49.1679       49.1679       1782.09       1831.26    
   5  0.279105      -1.27617      -25.8286       25.8286       1798.54       1824.37    
   6  0.379482     -0.968948      -19.6107       19.6107       1788.41       1808.02    
   7  0.510142     -0.673065      -13.6223       13.6223       1835.62       1849.24    
   8  0.869007     -0.140404      -2.84166       2.84166       1862.49       1865.34    
   9  0.905256     -0.995378E-01  -2.01456       2.01456       1774.12       1776.13    
  10  0.587200     -0.532390      -10.7751       10.7751       1886.07       1896.85    
  11  0.309008      -1.17439      -23.7687       23.7687       1795.34       1819.11    
  12  0.210718      -1.55723      -31.5171       31.5171       1787.50       1819.02    
  13  0.362152      -1.01569      -20.5567       20.5567       1780.96       1801.51    
  14  0.465452     -0.764747      -15.4778       15.4778       1879.41       1894.89    
  15  0.155270E-01  -4.16518      -84.2997       84.2997       1907.59       1991.89    
  16  0.632166     -0.458603      -9.28173       9.28173       1901.78       1911.07    
  17  0.171028      -1.76593      -35.7409       35.7409       1841.83       1877.57    
  18  0.926401     -0.764482E-01  -1.54725       1.54725       1904.36       1905.91    
  19  0.130449      -2.03678      -41.2226       41.2226       1776.18       1817.40    
  20  0.536069     -0.623492      -12.6190       12.6190       1925.45       1938.07    
  21  0.128128      -2.05472      -41.5859       41.5859       1926.23       1967.82    
  22  0.729730     -0.315081      -6.37697       6.37697       1908.00       1914.38    
  23  0.982387     -0.177702E-01 -0.359654      0.359654       1911.00       1911.36    
  24  0.707707     -0.345726      -6.99720       6.99720       1922.56       1929.56    
  25  0.643878     -0.440245      -8.91020       8.91020       1913.96       1922.87    
  26  0.136721      -1.98982      -40.2722       40.2722       1951.17       1991.44    
  27  0.146320      -1.92196      -38.8989       38.8989       1957.87       1996.77    
  28  0.214169      -1.54099      -31.1884       31.1884       1928.88       1960.06    
  29  0.774008     -0.256172      -5.18472       5.18472       1952.21       1957.40    
  30  0.487333     -0.718808      -14.5481       14.5481       1852.82       1867.37    
  31  0.594481E-01  -2.82265      -57.1281       57.1281       1967.41       2024.54    
  32  0.305368      -1.18624      -24.0084       24.0084       1962.55       1986.56    
  33  0.206200      -1.57891      -31.9558       31.9558       1929.90       1961.86    
  34  0.185235      -1.68613      -34.1258       34.1258       1952.51       1986.64    
  35  0.945154     -0.564077E-01  -1.14165       1.14165       1965.45       1966.60    
  36  0.657328     -0.419572      -8.49179       8.49179       1966.08       1974.58    
  37  0.932191     -0.702171E-01  -1.42114       1.42114       1957.84       1959.26    
  38  0.258055      -1.35458      -27.4156       27.4156       1979.33       2006.75    
  39  0.525568E-01  -2.94586      -59.6218       59.6218       1913.70       1973.33    
  40  0.692807     -0.367004      -7.42785       7.42785       1963.44       1970.87    
  41  0.691658     -0.368664      -7.46145       7.46145       2010.04       2017.50    
  42  0.163447      -1.81127      -36.6585       36.6585       2033.22       2069.88    
  43  0.462923     -0.770194      -15.5881       15.5881       2011.14       2026.73    
  44  0.758611     -0.276266      -5.59139       5.59139       2033.28       2038.88    
  45  0.278938      -1.27677      -25.8407       25.8407       2007.43       2033.27    
  46  0.726655     -0.319304      -6.46245       6.46245       2025.73       2032.19    
  47  0.288418      -1.24334      -25.1643       25.1643       2049.88       2075.05    
  48  0.640221     -0.445941      -9.02548       9.02548       1984.75       1993.77    
  49  0.531981     -0.631147      -12.7739       12.7739       2002.85       2015.63    
  50  0.494380     -0.704450      -14.2575       14.2575       2071.02       2085.28    
  51  0.765719     -0.266940      -5.40265       5.40265       2042.25       2047.66    
  52  0.274236      -1.29377      -26.1847       26.1847       2094.99       2121.18    
  53  0.946599     -0.548792E-01  -1.11071       1.11071       2112.38       2113.49    
  54  0.264711      -1.32912      -26.9002       26.9002       1925.30       1952.20    
  55  0.129097      -2.04719      -41.4334       41.4334       2100.54       2141.97    
  56  0.217636      -1.52493      -30.8633       30.8633       2026.66       2057.52    
  57  0.430633     -0.842500      -17.0515       17.0515       2170.83       2187.88    
  58  0.307617      -1.17890      -23.8600       23.8600       2025.04       2048.90    
loop,thermsimp(1:2)       22   16.8539       66.1761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346       2087.59         68.34          1.16         39.21          0.40          0.05        109.17
Just calling func    0   0        109.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2087.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       22
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       23
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      345     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -27.0431       27.0431       1717.59       1744.63    
   2  0.388449     -0.945595      -19.1380       19.1380       1774.12       1793.26    
   3  0.827051     -0.189889      -3.84320       3.84320       1780.96       1784.80    
   4  0.958395     -0.424951E-01 -0.860065      0.860065       1788.41       1789.27    
   5  0.125400      -2.07625      -42.0215       42.0215       1777.11       1819.13    
   6  0.524174     -0.645931      -13.0731       13.0731       1776.18       1789.25    
   7  0.783721     -0.243702      -4.93233       4.93233       1787.50       1792.44    
   8  0.183361      -1.69630      -34.3317       34.3317       1795.34       1829.67    
   9  0.122208      -2.10203      -42.5433       42.5433       1798.54       1841.08    
  10  0.913915     -0.900182E-01  -1.82189       1.82189       1782.09       1783.91    
  11  0.273776      -1.29545      -26.2187       26.2187       1765.83       1792.05    
  12  0.779874     -0.248622      -5.03191       5.03191       1835.62       1840.65    
  13  0.305314      -1.18641      -24.0120       24.0120       1862.49       1886.51    
  14  0.720732     -0.327488      -6.62809       6.62809       1852.82       1859.45    
  15  0.222329      -1.50360      -30.4315       30.4315       1841.83       1872.26    
  16  0.826299     -0.190798      -3.86160       3.86160       1879.41       1883.28    
  17  0.581574     -0.542017      -10.9700       10.9700       1886.07       1897.04    
  18  0.616258     -0.484089      -9.79756       9.79756       1904.36       1914.16    
  19  0.604230     -0.503801      -10.1965       10.1965       1901.78       1911.98    
  20  0.333333      -1.09861      -22.2350       22.2350       1911.00       1933.23    
  21  0.289888E-01  -3.54085      -71.6638       71.6638       1908.00       1979.67    
  22  0.396892     -0.924091      -18.7028       18.7028       1913.96       1932.66    
  23  0.910378     -0.938957E-01  -1.90037       1.90037       1922.56       1924.46    
  24  0.998355     -0.164683E-02 -0.333304E-01  0.333304E-01   1925.45       1925.49    
  25  0.735990     -0.306539      -6.20409       6.20409       1925.30       1931.50    
  26  0.779044     -0.249688      -5.05348       5.05348       1952.21       1957.27    
  27  0.498268     -0.696618      -14.0990       14.0990       1957.84       1971.94    
  28  0.693129     -0.366539      -7.41844       7.41844       1928.88       1936.29    
  29  0.691370     -0.369080      -7.46987       7.46987       1929.90       1937.37    
  30  0.519398     -0.655086      -13.2584       13.2584       1965.45       1978.71    
  31  0.365801      -1.00567      -20.3538       20.3538       1926.23       1946.59    
  32  0.352392      -1.04301      -21.1097       21.1097       1963.44       1984.55    
  33  0.176642      -1.73363      -35.0872       35.0872       1913.70       1948.79    
  34  0.982977     -0.171697E-01 -0.347500      0.347500       1966.08       1966.43    
  35  0.466781     -0.761894      -15.4201       15.4201       1962.55       1977.97    
  36  0.481130     -0.731617      -14.8073       14.8073       1952.51       1967.32    
  37  0.238852      -1.43191      -28.9807       28.9807       1951.17       1980.15    
  38  0.453247     -0.791318      -16.0156       16.0156       1907.59       1923.60    
  39  0.579188     -0.546129      -11.0532       11.0532       1984.75       1995.80    
  40  0.802776E-01  -2.52226      -51.0485       51.0485       1957.87       2008.92    
  41  0.819632     -0.198900      -4.02558       4.02558       1979.33       1983.36    
  42  0.917023     -0.866231E-01  -1.75318       1.75318       2002.85       2004.61    
  43  0.328296      -1.11384      -22.5432       22.5432       2010.04       2032.58    
  44  0.751681     -0.285443      -5.77712       5.77712       1967.41       1973.19    
  45  0.760454     -0.273840      -5.54229       5.54229       2011.14       2016.68    
  46  0.655053     -0.423039      -8.56196       8.56196       2025.73       2034.29    
  47  0.438192     -0.825097      -16.6993       16.6993       2007.43       2024.13    
  48  0.615984E-01  -2.78712      -56.4090       56.4090       2033.28       2089.69    
  49  0.373345     -0.985252      -19.9407       19.9407       2042.25       2062.19    
  50  0.173578      -1.75113      -35.4413       35.4413       2025.04       2060.48    
  51  0.787098     -0.239402      -4.84530       4.84530       2026.66       2031.50    
  52  0.476899     -0.740450      -14.9861       14.9861       2033.22       2048.21    
  53  0.267079      -1.32021      -26.7199       26.7199       2049.88       2076.60    
  54  0.328534E-01  -3.41570      -69.1309       69.1309       2071.02       2140.15    
  55  0.223376      -1.49890      -30.3364       30.3364       2112.38       2142.71    
  56  0.950133     -0.511529E-01  -1.03529       1.03529       2094.99       2096.03    
  57  0.802688     -0.219789      -4.44834       4.44834       2100.54       2104.99    
  58  0.687564     -0.374601      -7.58160       7.58160       2087.59       2095.17    
loop,thermsimp(1:2)       23   27.0431       19.1380    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347       2107.45         68.19          1.14         39.37          0.29          0.05        109.04
Just calling func    0   0        109.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2107.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       23
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       24
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      346     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -11.6468       11.6468       1717.59       1729.23    
   2  0.429755     -0.844539      -17.0928       17.0928       1782.09       1799.18    
   3  0.598807     -0.512815      -10.3789       10.3789       1780.96       1791.33    
   4  0.757798     -0.277339      -5.61310       5.61310       1776.18       1781.79    
   5  0.954130E-01  -2.34954      -47.5527       47.5527       1788.41       1835.96    
   6  0.968708E-01  -2.33438      -47.2458       47.2458       1765.83       1813.08    
   7  0.196924      -1.62494      -32.8873       32.8873       1787.50       1820.39    
   8  0.616654     -0.483447      -9.78456       9.78456       1774.12       1783.90    
   9  0.181969      -1.70392      -34.4859       34.4859       1777.11       1811.60    
  10  0.383918     -0.957326      -19.3755       19.3755       1795.34       1814.72    
  11  0.377012     -0.975478      -19.7429       19.7429       1835.62       1855.36    
  12  0.899192     -0.106259      -2.15059       2.15059       1798.54       1800.69    
  13  0.409833     -0.892005      -18.0534       18.0534       1852.82       1870.87    
  14  0.728621     -0.316601      -6.40774       6.40774       1841.83       1848.24    
  15  0.568233     -0.565224      -11.4397       11.4397       1879.41       1890.85    
  16  0.647091     -0.435269      -8.80948       8.80948       1862.49       1871.30    
  17  0.118896      -2.12951      -43.0994       43.0994       1886.07       1929.17    
  18  0.910801     -0.934313E-01  -1.89097       1.89097       1901.78       1903.67    
  19  0.484176     -0.725308      -14.6796       14.6796       1904.36       1919.04    
  20  0.327343      -1.11675      -22.6020       22.6020       1907.59       1930.19    
  21  0.674995     -0.393050      -7.95501       7.95501       1922.56       1930.52    
  22  0.234857      -1.44878      -29.3221       29.3221       1925.45       1954.78    
  23  0.800837     -0.222098      -4.49508       4.49508       1925.30       1929.79    
  24  0.619975     -0.478077      -9.67587       9.67587       1913.96       1923.63    
  25  0.578519     -0.547284      -11.0766       11.0766       1911.00       1922.07    
  26  0.837214     -0.177675      -3.59600       3.59600       1928.88       1932.47    
  27  0.935915     -0.662302E-01  -1.34044       1.34044       1929.90       1931.25    
  28  0.779751     -0.248781      -5.03511       5.03511       1926.23       1931.27    
  29  0.801557     -0.221199      -4.47689       4.47689       1913.70       1918.18    
  30  0.827533E-01  -2.49189      -50.4338       50.4338       1952.21       2002.65    
  31  0.640581     -0.445379      -9.01410       9.01410       1966.08       1975.10    
  32  0.226382      -1.48553      -30.0659       30.0659       1952.51       1982.58    
  33  0.198814E-01  -3.91797      -79.2965       79.2965       1957.84       2037.14    
  34  0.147003      -1.91730      -38.8045       38.8045       1967.41       2006.21    
  35  0.568592     -0.564592      -11.4269       11.4269       1962.55       1973.98    
  36  0.650717     -0.429680      -8.69636       8.69636       1965.45       1974.15    
  37  0.259092      -1.35057      -27.3345       27.3345       1908.00       1935.34    
  38  0.935898     -0.662490E-01  -1.34082       1.34082       1951.17       1952.51    
  39  0.702433     -0.353205      -7.14858       7.14858       1979.33       1986.48    
  40  0.622661     -0.473753      -9.58837       9.58837       1963.44       1973.03    
  41  0.546960     -0.603380      -12.2119       12.2119       1984.75       1996.96    
  42  0.883578     -0.123775      -2.50511       2.50511       2002.85       2005.36    
  43  0.728206E-02  -4.92234      -99.6241       99.6241       1957.87       2057.50    
  44  0.112001      -2.18925      -44.3085       44.3085       2011.14       2055.45    
  45  0.689494     -0.371797      -7.52487       7.52487       2007.43       2014.95    
  46  0.872629     -0.136244      -2.75747       2.75747       2026.66       2029.41    
  47  0.688489     -0.373256      -7.55439       7.55439       2010.04       2017.59    
  48  0.947843     -0.535662E-01  -1.08414       1.08414       2025.73       2026.82    
  49  0.294529      -1.22238      -24.7399       24.7399       2033.22       2057.96    
  50  0.717675E-01  -2.63432      -53.3165       53.3165       2025.04       2078.36    
  51  0.738094     -0.303684      -6.14632       6.14632       2042.25       2048.40    
  52  0.237514      -1.43753      -29.0944       29.0944       2049.88       2078.98    
  53  0.932770     -0.695962E-01  -1.40857       1.40857       2033.28       2034.69    
  54  0.973437     -0.269222E-01 -0.544882      0.544882       2087.59       2088.13    
  55  0.216069      -1.53216      -31.0096       31.0096       2094.99       2126.00    
  56  0.927621     -0.751319E-01  -1.52061       1.52061       2100.54       2102.06    
  57  0.882551     -0.124939      -2.52866       2.52866       2071.02       2073.55    
  58  0.958611     -0.422698E-01 -0.855506      0.855506       2107.45       2108.31    
loop,thermsimp(1:2)       24   11.6468       17.0928    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348       2115.07         68.20          1.17         39.56          0.13          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2115.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       24
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       25
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      347     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -5.65792       5.65792       1717.59       1723.25    
   2  0.693006     -0.366716      -7.42203       7.42203       1776.18       1783.60    
   3  0.647780     -0.434203      -8.78791       8.78791       1774.12       1782.91    
   4  0.895769     -0.110072      -2.22777       2.22777       1780.96       1783.18    
   5  0.775956     -0.253659      -5.13384       5.13384       1782.09       1787.22    
   6  0.891264     -0.115114      -2.32982       2.32982       1798.54       1800.87    
   7  0.553736     -0.591068      -11.9627       11.9627       1777.11       1789.07    
   8  0.646797     -0.435723      -8.81867       8.81867       1765.83       1774.65    
   9  0.646048     -0.436881      -8.84211       8.84211       1795.34       1804.18    
  10  0.160937      -1.82675      -36.9718       36.9718       1787.50       1824.48    
  11  0.840732     -0.173482      -3.51113       3.51113       1788.41       1791.92    
  12  0.377447     -0.974325      -19.7195       19.7195       1841.83       1861.55    
  13  0.214649      -1.53875      -31.1430       31.1430       1835.62       1866.76    
  14  0.424093     -0.857804      -17.3612       17.3612       1852.82       1870.18    
  15  0.693510     -0.365990      -7.40733       7.40733       1862.49       1869.90    
  16  0.252894      -1.37478      -27.8245       27.8245       1879.41       1907.24    
  17  0.765441     -0.267303      -5.40999       5.40999       1901.78       1907.19    
  18  0.481029     -0.731828      -14.8116       14.8116       1913.70       1928.52    
  19  0.211808      -1.55207      -31.4127       31.4127       1904.36       1935.78    
  20  0.616599E-01  -2.78612      -56.3888       56.3888       1911.00       1967.39    
  21  0.110259      -2.20492      -44.6257       44.6257       1913.96       1958.58    
  22  0.475319     -0.743769      -15.0533       15.0533       1886.07       1901.13    
  23  0.500411E-01  -2.99491      -60.6145       60.6145       1925.30       1985.91    
  24  0.126445      -2.06795      -41.8535       41.8535       1907.59       1949.44    
  25  0.693760     -0.365629      -7.40003       7.40003       1922.56       1929.96    
  26  0.876607E-01  -2.43428      -49.2678       49.2678       1929.90       1979.17    
  27  0.564718     -0.571429      -11.5652       11.5652       1926.23       1937.80    
  28  0.572706     -0.557383      -11.2810       11.2810       1928.88       1940.16    
  29  0.739618     -0.301621      -6.10457       6.10457       1908.00       1914.11    
  30  0.428028     -0.848566      -17.1743       17.1743       1951.17       1968.34    
  31  0.864224     -0.145923      -2.95336       2.95336       1925.45       1928.41    
  32  0.326884      -1.11815      -22.6304       22.6304       1963.44       1986.07    
  33  0.626295     -0.467933      -9.47057       9.47057       1962.55       1972.02    
  34  0.576680     -0.550467      -11.1410       11.1410       1965.45       1976.59    
  35  0.988375     -0.116929E-01 -0.236655      0.236655       1966.08       1966.32    
  36  0.834431     -0.181006      -3.66340       3.66340       1952.51       1956.17    
  37  0.944839     -0.567403E-01  -1.14838       1.14838       1979.33       1980.48    
  38  0.182182      -1.70275      -34.4622       34.4622       1984.75       2019.21    
  39  0.882984     -0.124449      -2.51874       2.51874       1952.21       1954.73    
  40  0.756839     -0.278604      -5.63872       5.63872       2002.85       2008.49    
  41  0.530350     -0.634218      -12.8360       12.8360       1967.41       1980.24    
  42  0.257866      -1.35531      -27.4304       27.4304       2007.43       2034.86    
  43  0.575794     -0.552006      -11.1721       11.1721       2010.04       2021.21    
  44  0.907029     -0.975811E-01  -1.97496       1.97496       2025.73       2027.71    
  45  0.385513     -0.953180      -19.2916       19.2916       2026.66       2045.95    
  46  0.352081      -1.04389      -21.1275       21.1275       2033.28       2054.41    
  47  0.587153     -0.532470      -10.7767       10.7767       1957.84       1968.62    
  48  0.748916     -0.289129      -5.85173       5.85173       2042.25       2048.11    
  49  0.152024      -1.88371      -38.1248       38.1248       2011.14       2049.27    
  50  0.501193     -0.690765      -13.9805       13.9805       1957.87       1971.85    
  51  0.743551     -0.296318      -5.99722       5.99722       2033.22       2039.22    
  52  0.336569      -1.08895      -22.0395       22.0395       2071.02       2093.06    
  53  0.523746     -0.646748      -13.0896       13.0896       2025.04       2038.13    
  54  0.471323     -0.752211      -15.2241       15.2241       2049.88       2065.11    
  55  0.131680E-01  -4.32996      -87.6349       87.6349       2087.59       2175.22    
  56  0.410982     -0.889205      -17.9968       17.9968       2100.54       2118.54    
  57  0.476445E-01  -3.04399      -61.6078       61.6078       2107.45       2169.06    
  58  0.734680     -0.308321      -6.24015       6.24015       2115.07       2121.31    
loop,thermsimp(1:2)       25   5.65792       7.42203    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349       2130.49         68.20          1.15         39.57          0.33          0.05        109.31
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2130.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       25
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       26
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      348     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -18.0506       18.0506       1717.59       1735.64    
   2  0.389332     -0.943323      -19.0921       19.0921       1765.83       1784.93    
   3  0.765657     -0.267021      -5.40428       5.40428       1774.12       1779.52    
   4  0.505025     -0.683148      -13.8263       13.8263       1780.96       1794.78    
   5  0.681598     -0.383316      -7.75799       7.75799       1776.18       1783.94    
   6  0.895525     -0.110345      -2.23329       2.23329       1782.09       1784.32    
   7  0.540074     -0.616050      -12.4683       12.4683       1777.11       1789.58    
   8  0.125370      -2.07648      -42.0263       42.0263       1788.41       1830.43    
   9  0.306095      -1.18386      -23.9603       23.9603       1798.54       1822.50    
  10  0.898677     -0.106831      -2.16218       2.16218       1795.34       1797.50    
  11  0.355276      -1.03486      -20.9447       20.9447       1787.50       1808.45    
  12  0.855641     -0.155905      -3.15538       3.15538       1841.83       1844.98    
  13  0.894333E-01  -2.41426      -48.8626       48.8626       1835.62       1884.48    
  14  0.291038      -1.23430      -24.9813       24.9813       1862.49       1887.47    
  15  0.848476E-01  -2.46690      -49.9280       49.9280       1852.82       1902.75    
  16  0.655469     -0.422404      -8.54911       8.54911       1886.07       1894.62    
  17  0.181028      -1.70910      -34.5908       34.5908       1901.78       1936.37    
  18  0.801189     -0.221659      -4.48619       4.48619       1879.41       1883.90    
  19  0.659702     -0.415967      -8.41882       8.41882       1908.00       1916.42    
  20  0.500397     -0.692354      -14.0127       14.0127       1925.45       1939.47    
  21  0.901964     -0.103181      -2.08830       2.08830       1913.70       1915.79    
  22  0.331186      -1.10508      -22.3658       22.3658       1922.56       1944.93    
  23  0.572805E-01  -2.85979      -57.8798       57.8798       1904.36       1962.24    
  24  0.511624     -0.670164      -13.5636       13.5636       1926.23       1939.80    
  25  0.953295     -0.478312E-01 -0.968063      0.968063       1928.88       1929.84    
  26  0.454382     -0.788818      -15.9650       15.9650       1907.59       1923.55    
  27  0.697217E-01  -2.66324      -53.9018       53.9018       1952.21       2006.12    
  28  0.269239      -1.31216      -26.5570       26.5570       1952.51       1979.07    
  29  0.855725     -0.155806      -3.15339       3.15339       1913.96       1917.11    
  30  0.408332E-02  -5.50085      -111.333       111.333       1966.08       2077.42    
  31  0.926366     -0.764862E-01  -1.54802       1.54802       1911.00       1912.55    
  32  0.356547      -1.03129      -20.8724       20.8724       1951.17       1972.04    
  33  0.550351     -0.597200      -12.0868       12.0868       1957.84       1969.93    
  34  0.475063     -0.744308      -15.0642       15.0642       1957.87       1972.94    
  35  0.420107     -0.867246      -17.5523       17.5523       1962.55       1980.10    
  36  0.521034     -0.651939      -13.1947       13.1947       1965.45       1978.65    
  37  0.979034     -0.211889E-01 -0.428846      0.428846       1929.90       1930.33    
  38  0.599858     -0.511062      -10.3435       10.3435       1967.41       1977.75    
  39  0.800850     -0.222082      -4.49475       4.49475       1979.33       1983.83    
  40  0.823189     -0.194570      -3.93793       3.93793       1925.30       1929.23    
  41  0.709226E-01  -2.64617      -53.5562       53.5562       1963.44       2017.00    
  42  0.555654     -0.587609      -11.8927       11.8927       2002.85       2014.75    
  43  0.920379     -0.829696E-01  -1.67923       1.67923       1984.75       1986.43    
  44  0.904537     -0.100332      -2.03063       2.03063       2010.04       2012.07    
  45  0.990568     -0.947695E-02 -0.191806      0.191806       2025.73       2025.92    
  46  0.647203     -0.435096      -8.80597       8.80597       2007.43       2016.23    
  47  0.634714     -0.454580      -9.20032       9.20032       2025.04       2034.24    
  48  0.771196     -0.259812      -5.25838       5.25838       2033.22       2038.48    
  49  0.857464     -0.153776      -3.11231       3.11231       2026.66       2029.77    
  50  0.816462     -0.202774      -4.10398       4.10398       2042.25       2046.36    
  51  0.233603      -1.45413      -29.4304       29.4304       2011.14       2040.57    
  52  0.554523     -0.589647      -11.9340       11.9340       2033.28       2045.22    
  53  0.217770      -1.52432      -30.8509       30.8509       2049.88       2080.73    
  54  0.795785     -0.228426      -4.62314       4.62314       2071.02       2075.64    
  55  0.458481     -0.779836      -15.7832       15.7832       2100.54       2116.32    
  56  0.725204     -0.321302      -6.50288       6.50288       2115.07       2121.57    
  57  0.962495     -0.382260E-01 -0.773662      0.773662       2107.45       2108.22    
  58  0.652668     -0.426687      -8.63578       8.63578       2130.49       2139.12    
loop,thermsimp(1:2)       26   18.0506       19.0921    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350       2087.59         68.23          1.17         39.35          0.32          0.05        109.11
Just calling func    0   0        109.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2087.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       26
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       27
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      349     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -14.9048       14.9048       1717.59       1732.49    
   2  0.431280     -0.840999      -17.0211       17.0211       1774.12       1791.14    
   3  0.231120      -1.46482      -29.6467       29.6467       1776.18       1805.83    
   4  0.306155      -1.18366      -23.9563       23.9563       1782.09       1806.04    
   5  0.514107     -0.665324      -13.4656       13.4656       1765.83       1779.30    
   6  0.784944E-01  -2.54473      -51.5032       51.5032       1777.11       1828.61    
   7  0.767893     -0.264105      -5.34526       5.34526       1780.96       1786.30    
   8  0.240450E-02  -6.03041      -122.051       122.051       1795.34       1917.39    
   9  0.185505      -1.68467      -34.0963       34.0963       1787.50       1821.60    
  10  0.405909     -0.901627      -18.2482       18.2482       1798.54       1816.79    
  11  0.681143     -0.383983      -7.77149       7.77149       1788.41       1796.18    
  12  0.529175     -0.636436      -12.8809       12.8809       1841.83       1854.71    
  13  0.873060     -0.135751      -2.74749       2.74749       1879.41       1882.16    
  14  0.457661     -0.781625      -15.8194       15.8194       1835.62       1851.44    
  15  0.564230     -0.572293      -11.5827       11.5827       1862.49       1874.08    
  16  0.949800     -0.515039E-01  -1.04240       1.04240       1886.07       1887.12    
  17  0.581003E-01  -2.84558      -57.5923       57.5923       1852.82       1910.41    
  18  0.180069      -1.71442      -34.6983       34.6983       1911.00       1945.70    
  19  0.222412      -1.50322      -30.4240       30.4240       1913.70       1944.13    
  20  0.821703     -0.196377      -3.97450       3.97450       1908.00       1911.98    
  21  0.948363     -0.530176E-01  -1.07303       1.07303       1913.96       1915.03    
  22  0.796186     -0.227922      -4.61295       4.61295       1907.59       1912.20    
  23  0.881546     -0.126078      -2.55171       2.55171       1925.30       1927.85    
  24  0.702001     -0.353821      -7.16104       7.16104       1928.88       1936.04    
  25  0.878483     -0.129559      -2.62217       2.62217       1929.90       1932.53    
  26  0.158251      -1.84358      -37.3124       37.3124       1901.78       1939.10    
  27  0.759310E-02  -4.88052      -98.7775       98.7775       1925.45       2024.23    
  28  0.549090     -0.599492      -12.1332       12.1332       1926.23       1938.37    
  29  0.294083      -1.22389      -24.7706       24.7706       1922.56       1947.33    
  30  0.358851      -1.02485      -20.7421       20.7421       1904.36       1925.11    
  31  0.591031E-01  -2.82847      -57.2459       57.2459       1957.84       2015.09    
  32  0.413139     -0.883972      -17.8909       17.8909       1951.17       1969.06    
  33  0.564800     -0.571284      -11.5623       11.5623       1957.87       1969.43    
  34  0.472034     -0.750704      -15.1936       15.1936       1967.41       1982.60    
  35  0.270343      -1.30806      -26.4741       26.4741       1965.45       1991.93    
  36  0.704266     -0.350600      -7.09585       7.09585       1952.51       1959.61    
  37  0.317895E-01  -3.44862      -69.7971       69.7971       1962.55       2032.35    
  38  0.489641     -0.714083      -14.4524       14.4524       1979.33       1993.78    
  39  0.558309     -0.582843      -11.7963       11.7963       1984.75       1996.54    
  40  0.239099      -1.43088      -28.9597       28.9597       1952.21       1981.17    
  41  0.387399     -0.948301      -19.1928       19.1928       2010.04       2029.23    
  42  0.434686     -0.833131      -16.8619       16.8619       2002.85       2019.71    
  43  0.713921     -0.336983      -6.82026       6.82026       2007.43       2014.25    
  44  0.655374     -0.422550      -8.55206       8.55206       1963.44       1971.99    
  45  0.739749     -0.301444      -6.10098       6.10098       2025.73       2031.83    
  46  0.758411     -0.276530      -5.59673       5.59673       2026.66       2032.25    
  47  0.750796     -0.286621      -5.80097       5.80097       2025.04       2030.84    
  48  0.557150E-01  -2.88751      -58.4407       58.4407       2033.22       2091.66    
  49  0.438885     -0.823518      -16.6673       16.6673       2011.14       2027.81    
  50  0.384409     -0.956048      -19.3496       19.3496       2033.28       2052.63    
  51  0.163955E-01  -4.11075      -83.1981       83.1981       2042.25       2125.45    
  52  0.493958     -0.705305      -14.2748       14.2748       2071.02       2085.29    
  53  0.654549     -0.423809      -8.57755       8.57755       1966.08       1974.66    
  54  0.779913     -0.248573      -5.03091       5.03091       2049.88       2054.91    
  55  0.173265      -1.75293      -35.4778       35.4778       2107.45       2142.93    
  56  0.179445      -1.71789      -34.7686       34.7686       2100.54       2135.31    
  57  0.278651      -1.27780      -25.8615       25.8615       2115.07       2140.93    
  58  0.413230E-01  -3.18634      -64.4888       64.4888       2087.59       2152.07    
loop,thermsimp(1:2)       27   14.9048       17.0211    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351       2130.49         68.76          1.19         39.46          0.32          0.05        109.79
Just calling func    0   0        109.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2130.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       27
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       28
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      350     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -19.4461       19.4461       1717.59       1737.03    
   2  0.718155     -0.331070      -6.70059       6.70059       1765.83       1772.54    
   3  0.581515     -0.542118      -10.9720       10.9720       1780.96       1791.93    
   4  0.230175E-01  -3.77150      -76.3320       76.3320       1774.12       1850.45    
   5  0.506601     -0.680031      -13.7633       13.7633       1788.41       1802.17    
   6  0.209297      -1.56400      -31.6541       31.6541       1776.18       1807.83    
   7  0.757725     -0.277434      -5.61504       5.61504       1782.09       1787.70    
   8  0.230972      -1.46546      -29.6596       29.6596       1798.54       1828.20    
   9  0.495080     -0.703037      -14.2289       14.2289       1787.50       1801.73    
  10  0.947190     -0.542553E-01  -1.09808       1.09808       1777.11       1778.21    
  11  0.977432     -0.228269E-01 -0.461997      0.461997       1835.62       1836.08    
  12  0.320616      -1.13751      -23.0222       23.0222       1841.83       1864.85    
  13  0.252125      -1.37783      -27.8861       27.8861       1862.49       1890.38    
  14  0.871535     -0.137499      -2.78287       2.78287       1879.41       1882.20    
  15  0.856468E-02  -4.76011      -96.3406       96.3406       1886.07       1982.41    
  16  0.352534      -1.04261      -21.1015       21.1015       1852.82       1873.92    
  17  0.750419     -0.287124      -5.81115       5.81115       1908.00       1913.82    
  18  0.215691      -1.53391      -31.0450       31.0450       1907.59       1938.63    
  19  0.833929     -0.181606      -3.67556       3.67556       1913.96       1917.63    
  20  0.714656E-01  -2.63854      -53.4018       53.4018       1795.34       1848.74    
  21  0.758349     -0.276612      -5.59840       5.59840       1904.36       1909.96    
  22  0.571963     -0.558680      -11.3072       11.3072       1925.30       1936.60    
  23  0.472398     -0.749934      -15.1780       15.1780       1929.90       1945.08    
  24  0.606854     -0.499467      -10.1088       10.1088       1928.88       1938.98    
  25  0.247109      -1.39793      -28.2929       28.2929       1926.23       1954.53    
  26  0.581778     -0.541666      -10.9629       10.9629       1901.78       1912.75    
  27  0.455447     -0.786476      -15.9176       15.9176       1913.70       1929.62    
  28  0.606617     -0.499857      -10.1167       10.1167       1911.00       1921.11    
  29  0.620033     -0.477983      -9.67397       9.67397       1922.56       1932.24    
  30  0.367527      -1.00096      -20.2586       20.2586       1952.51       1972.77    
  31  0.611260     -0.492233      -9.96239       9.96239       1951.17       1961.13    
  32  0.310332      -1.17011      -23.6821       23.6821       1957.87       1981.55    
  33  0.611387     -0.492025      -9.95818       9.95818       1963.44       1973.40    
  34  0.584386     -0.537193      -10.8723       10.8723       1966.08       1976.96    
  35  0.950350     -0.509246E-01  -1.03067       1.03067       1952.21       1953.24    
  36  0.228570      -1.47591      -29.8712       29.8712       1967.41       1997.28    
  37  0.879867     -0.127985      -2.59030       2.59030       1965.45       1968.04    
  38  0.390808E-01  -3.24212      -65.6179       65.6179       1979.33       2044.95    
  39  0.104244      -2.26102      -45.7611       45.7611       1984.75       2030.51    
  40  0.922634     -0.805225E-01  -1.62971       1.62971       2007.43       2009.06    
  41  0.559015     -0.581578      -11.7707       11.7707       1957.84       1969.61    
  42  0.809074     -0.211865      -4.28798       4.28798       2002.85       2007.14    
  43  0.840951     -0.173222      -3.50587       3.50587       1925.45       1928.96    
  44  0.384796     -0.955043      -19.3293       19.3293       2011.14       2030.47    
  45  0.471744     -0.751318      -15.2060       15.2060       2010.04       2025.25    
  46  0.750950     -0.286417      -5.79683       5.79683       2025.04       2030.84    
  47  0.197617      -1.62143      -32.8163       32.8163       2025.73       2058.55    
  48  0.405005     -0.903855      -18.2933       18.2933       2026.66       2044.95    
  49  0.526481     -0.641540      -12.9842       12.9842       1962.55       1975.54    
  50  0.808042     -0.213142      -4.31381       4.31381       2033.28       2037.60    
  51  0.315225      -1.15447      -23.3655       23.3655       2049.88       2073.25    
  52  0.233772      -1.45341      -29.4158       29.4158       2071.02       2100.43    
  53  0.455864E-01  -3.08815      -62.5015       62.5015       2033.22       2095.72    
  54  0.748722     -0.289387      -5.85696       5.85696       2042.25       2048.11    
  55  0.237196E-01  -3.74145      -75.7239       75.7239       2100.54       2176.26    
  56  0.881679     -0.125927      -2.54866       2.54866       2115.07       2117.62    
  57  0.395054     -0.928733      -18.7968       18.7968       2107.45       2126.25    
  58  0.725060     -0.321501      -6.50691       6.50691       2130.49       2137.00    
loop,thermsimp(1:2)       28   19.4461       6.70059    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352       2088.85         68.40          1.14         38.85          0.86          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2088.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       28
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       29
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      351     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -11.3182       11.3182       1717.59       1728.91    
   2  0.243540      -1.41247      -28.5873       28.5873       1765.83       1794.42    
   3  0.374772     -0.981437      -19.8635       19.8635       1777.11       1796.98    
   4  0.700054     -0.356598      -7.21725       7.21725       1782.09       1789.31    
   5  0.301581      -1.19872      -24.2610       24.2610       1780.96       1805.22    
   6  0.531818     -0.631454      -12.7801       12.7801       1787.50       1800.28    
   7  0.185013      -1.68733      -34.1502       34.1502       1788.41       1822.56    
   8  0.107050      -2.23446      -45.2236       45.2236       1776.18       1821.40    
   9  0.979566     -0.206453E-01 -0.417843      0.417843       1798.54       1798.96    
  10  0.706074     -0.348035      -7.04394       7.04394       1835.62       1842.66    
  11  0.112110      -2.18827      -44.2888       44.2888       1795.34       1839.63    
  12  0.212442      -1.54908      -31.3522       31.3522       1774.12       1805.47    
  13  0.625740     -0.468820      -9.48853       9.48853       1841.83       1851.32    
  14  0.265918      -1.32457      -26.8081       26.8081       1852.82       1879.63    
  15  0.369004     -0.996947      -20.1774       20.1774       1879.41       1899.59    
  16  0.531799     -0.631491      -12.7808       12.7808       1862.49       1875.27    
  17  0.227318      -1.48140      -29.9824       29.9824       1904.36       1934.35    
  18  0.512871     -0.667732      -13.5143       13.5143       1901.78       1915.30    
  19  0.394785     -0.929415      -18.8106       18.8106       1908.00       1926.82    
  20  0.720084     -0.328388      -6.64630       6.64630       1913.96       1920.60    
  21  0.185505      -1.68467      -34.0964       34.0964       1911.00       1945.09    
  22  0.658242     -0.418183      -8.46368       8.46368       1925.45       1933.92    
  23  0.888593     -0.118116      -2.39057       2.39057       1913.70       1916.10    
  24  0.773453     -0.256890      -5.19924       5.19924       1922.56       1927.76    
  25  0.594480E-01  -2.82265      -57.1282       57.1282       1925.30       1982.43    
  26  0.112908      -2.18118      -44.1453       44.1453       1907.59       1951.73    
  27  0.940300     -0.615559E-01  -1.24584       1.24584       1928.88       1930.12    
  28  0.990261     -0.978663E-02 -0.198073      0.198073       1929.90       1930.10    
  29  0.686451     -0.376220      -7.61437       7.61437       1952.21       1959.83    
  30  0.558815     -0.581936      -11.7779       11.7779       1926.23       1938.01    
  31  0.574196     -0.554784      -11.2284       11.2284       1951.17       1962.40    
  32  0.678960     -0.387193      -7.83645       7.83645       1965.45       1973.29    
  33  0.306232      -1.18341      -23.9513       23.9513       1957.84       1981.79    
  34  0.969485     -0.309907E-01 -0.627225      0.627225       1952.51       1953.14    
  35  0.520627     -0.652722      -13.2105       13.2105       1963.44       1976.65    
  36  0.870581     -0.138594      -2.80503       2.80503       1962.55       1965.36    
  37  0.127650      -2.05846      -41.6615       41.6615       1966.08       2007.75    
  38  0.276190      -1.28667      -26.0410       26.0410       1957.87       1983.91    
  39  0.842544     -0.171330      -3.46757       3.46757       1886.07       1889.54    
  40  0.336933      -1.08787      -22.0176       22.0176       1967.41       1989.43    
  41  0.685284     -0.377921      -7.64881       7.64881       2002.85       2010.50    
  42  0.555142     -0.588531      -11.9114       11.9114       2007.43       2019.34    
  43  0.857048     -0.154261      -3.12211       3.12211       2010.04       2013.16    
  44  0.612111E-01  -2.79343      -56.5366       56.5366       2011.14       2067.68    
  45  0.672500     -0.396753      -8.02994       8.02994       1984.75       1992.78    
  46  0.820423E-01  -2.50052      -50.6084       50.6084       2025.04       2075.65    
  47  0.546679     -0.603893      -12.2223       12.2223       2033.28       2045.51    
  48  0.624723     -0.470446      -9.52144       9.52144       2026.66       2036.18    
  49  0.906365     -0.983128E-01  -1.98977       1.98977       1979.33       1981.32    
  50  0.807763     -0.213487      -4.32079       4.32079       2042.25       2046.57    
  51  0.347580      -1.05676      -21.3880       21.3880       2025.73       2047.12    
  52  0.233390      -1.45504      -29.4489       29.4489       2049.88       2079.33    
  53  0.265609      -1.32573      -26.8317       26.8317       2033.22       2060.05    
  54  0.277652      -1.28139      -25.9342       25.9342       2071.02       2096.95    
  55  0.836033     -0.179087      -3.62456       3.62456       2115.07       2118.69    
  56  0.170063      -1.77159      -35.8555       35.8555       2107.45       2143.31    
  57  0.798928     -0.224485      -4.54339       4.54339       2130.49       2135.03    
  58  0.707521E-01  -2.64857      -53.6049       53.6049       2088.85       2142.45    
loop,thermsimp(1:2)       29   11.3182       28.5873    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353       2099.94         68.46          1.14         39.11          0.53          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2099.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       29
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       30
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      352     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -30.7833       30.7833       1717.59       1748.37    
   2  0.142120      -1.95108      -39.4882       39.4882       1782.09       1821.58    
   3  0.240947      -1.42318      -28.8039       28.8039       1765.83       1794.64    
   4  0.622235     -0.474438      -9.60223       9.60223       1777.11       1786.71    
   5  0.167679      -1.78570      -36.1411       36.1411       1798.54       1834.68    
   6  0.712985E-01  -2.64088      -53.4492       53.4492       1787.50       1840.95    
   7  0.861645E-02  -4.75408      -96.2186       96.2186       1780.96       1877.17    
   8  0.820106     -0.198321      -4.01386       4.01386       1774.12       1778.13    
   9  0.882469     -0.125032      -2.53054       2.53054       1776.18       1778.71    
  10  0.530124     -0.634644      -12.8447       12.8447       1788.41       1801.25    
  11  0.920027E-01  -2.38594      -48.2894       48.2894       1795.34       1843.63    
  12  0.669458     -0.401287      -8.12171       8.12171       1835.62       1843.74    
  13  0.348419      -1.05435      -21.3391       21.3391       1841.83       1863.17    
  14  0.979616     -0.205944E-01 -0.416814      0.416814       1862.49       1862.91    
  15  0.661083     -0.413875      -8.37649       8.37649       1852.82       1861.20    
  16  0.535120     -0.625265      -12.6548       12.6548       1886.07       1898.73    
  17  0.929679E-01  -2.37550      -48.0782       48.0782       1879.41       1927.49    
  18  0.580221     -0.544346      -11.0171       11.0171       1901.78       1912.80    
  19  0.652449     -0.427023      -8.64258       8.64258       1913.70       1922.35    
  20  0.252328      -1.37703      -27.8699       27.8699       1913.96       1941.83    
  21  0.364859      -1.00824      -20.4060       20.4060       1908.00       1928.41    
  22  0.205873      -1.58049      -31.9879       31.9879       1922.56       1954.55    
  23  0.404183E-01  -3.20847      -64.9368       64.9368       1929.90       1994.84    
  24  0.922242     -0.809474E-01  -1.63831       1.63831       1928.88       1930.51    
  25  0.164359      -1.80570      -36.5459       36.5459       1925.45       1962.00    
  26  0.606051     -0.500791      -10.1356       10.1356       1904.36       1914.50    
  27  0.461849E-01  -3.07510      -62.2375       62.2375       1926.23       1988.47    
  28  0.761223     -0.272829      -5.52183       5.52183       1911.00       1916.52    
  29  0.170682      -1.76796      -35.7819       35.7819       1907.59       1943.37    
  30  0.501713     -0.689726      -13.9595       13.9595       1952.51       1966.47    
  31  0.892390E-01  -2.41644      -48.9067       48.9067       1952.21       2001.12    
  32  0.281632E-01  -3.56974      -72.2485       72.2485       1951.17       2023.42    
  33  0.664381     -0.408899      -8.27577       8.27577       1962.55       1970.83    
  34  0.124936      -2.07995      -42.0965       42.0965       1965.45       2007.55    
  35  0.623262     -0.472788      -9.56884       9.56884       1963.44       1973.01    
  36  0.876206     -0.132154      -2.67469       2.67469       1979.33       1982.01    
  37  0.744183     -0.295469      -5.98004       5.98004       1957.84       1963.82    
  38  0.251914      -1.37867      -27.9031       27.9031       1925.30       1953.20    
  39  0.391818     -0.936959      -18.9633       18.9633       1957.87       1976.83    
  40  0.131094      -2.03184      -41.1228       41.1228       1967.41       2008.53    
  41  0.887574     -0.119263      -2.41378       2.41378       1984.75       1987.16    
  42  0.682509     -0.381980      -7.73095       7.73095       1966.08       1973.81    
  43  0.184805      -1.68846      -34.1729       34.1729       2002.85       2037.03    
  44  0.258729      -1.35197      -27.3628       27.3628       2010.04       2037.40    
  45  0.275506      -1.28915      -26.0913       26.0913       2007.43       2033.52    
  46  0.718710     -0.330297      -6.68494       6.68494       2026.66       2033.34    
  47  0.445066     -0.809533      -16.3843       16.3843       2033.28       2049.67    
  48  0.772965     -0.257522      -5.21203       5.21203       2042.25       2047.47    
  49  0.992595     -0.743255E-02 -0.150429      0.150429       2025.73       2025.88    
  50  0.847655E-01  -2.46787      -49.9475       49.9475       2033.22       2083.17    
  51  0.805100E-01  -2.51937      -50.9900       50.9900       2011.14       2062.13    
  52  0.218783      -1.51968      -30.7570       30.7570       2025.04       2055.80    
  53  0.177967      -1.72616      -34.9360       34.9360       2049.88       2084.82    
  54  0.435468E-02  -5.43650      -110.030       110.030       2071.02       2181.05    
  55  0.189855      -1.66150      -33.6273       33.6273       2115.07       2148.70    
  56  0.483774     -0.726137      -14.6964       14.6964       2130.49       2145.18    
  57  0.407968     -0.896566      -18.1457       18.1457       2088.85       2107.00    
  58  0.895063     -0.110861      -2.24374       2.24374       2099.94       2102.18    
loop,thermsimp(1:2)       30   30.7833       39.4882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354       2033.02         68.57          1.16         39.21          0.35          0.05        109.34
Just calling func    0   0        109.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2033.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       30
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       31
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      353     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -34.7259       34.7259       1717.59       1752.31    
   2  0.422562     -0.861418      -17.4344       17.4344       1774.12       1791.55    
   3  0.186245      -1.68069      -34.0158       34.0158       1776.18       1810.20    
   4  0.567236     -0.566979      -11.4752       11.4752       1777.11       1788.59    
   5  0.464464E-01  -3.06946      -62.1232       62.1232       1765.83       1827.96    
   6  0.349374      -1.05161      -21.2838       21.2838       1788.41       1809.69    
   7  0.336208      -1.09002      -22.0612       22.0612       1782.09       1804.15    
   8  0.631615     -0.459475      -9.29939       9.29939       1798.54       1807.84    
   9  0.225630E-01  -3.79144      -76.7356       76.7356       1787.50       1864.24    
  10  0.221391      -1.50782      -30.5171       30.5171       1795.34       1825.86    
  11  0.635199     -0.453817      -9.18487       9.18487       1835.62       1844.80    
  12  0.957727     -0.431923E-01 -0.874175      0.874175       1852.82       1853.69    
  13  0.284413      -1.25733      -25.4473       25.4473       1862.49       1887.94    
  14  0.814352     -0.205363      -4.15637       4.15637       1841.83       1845.98    
  15  0.699052     -0.358030      -7.24623       7.24623       1780.96       1788.20    
  16  0.145269      -1.92917      -39.0448       39.0448       1886.07       1925.12    
  17  0.397569     -0.922386      -18.6683       18.6683       1901.78       1920.45    
  18  0.610583     -0.493342      -9.98482       9.98482       1904.36       1914.35    
  19  0.737372     -0.304663      -6.16612       6.16612       1911.00       1917.16    
  20  0.230083      -1.46931      -29.7377       29.7377       1913.70       1943.44    
  21  0.721698     -0.326149      -6.60098       6.60098       1879.41       1886.02    
  22  0.469765     -0.755524      -15.2912       15.2912       1908.00       1923.30    
  23  0.148742      -1.90554      -38.5666       38.5666       1928.88       1967.44    
  24  0.631872     -0.459069      -9.29117       9.29117       1913.96       1923.25    
  25  0.456921     -0.783245      -15.8522       15.8522       1907.59       1923.44    
  26  0.631874E-01  -2.76165      -55.8935       55.8935       1925.30       1981.19    
  27  0.470948     -0.753008      -15.2403       15.2403       1922.56       1937.80    
  28  0.313695      -1.15933      -23.4640       23.4640       1925.45       1948.92    
  29  0.856516     -0.154883      -3.13470       3.13470       1957.84       1960.98    
  30  0.487159     -0.719166      -14.5553       14.5553       1952.51       1967.07    
  31  0.383726     -0.957827      -19.3856       19.3856       1962.55       1981.94    
  32  0.242248      -1.41779      -28.6950       28.6950       1963.44       1992.14    
  33  0.760305     -0.274035      -5.54624       5.54624       1966.08       1971.63    
  34  0.524314     -0.645664      -13.0677       13.0677       1957.87       1970.94    
  35  0.759572     -0.275001      -5.56578       5.56578       1979.33       1984.90    
  36  0.784019     -0.243322      -4.92464       4.92464       1984.75       1989.67    
  37  0.430930     -0.841810      -17.0375       17.0375       1926.23       1943.27    
  38  0.670659     -0.399494      -8.08542       8.08542       1929.90       1937.99    
  39  0.458005     -0.780876      -15.8043       15.8043       1952.21       1968.02    
  40  0.413739     -0.882521      -17.8615       17.8615       1965.45       1983.32    
  41  0.388661     -0.945048      -19.1270       19.1270       1967.41       1986.54    
  42  0.753750     -0.282694      -5.72149       5.72149       1951.17       1956.89    
  43  0.505767     -0.681679      -13.7966       13.7966       2025.73       2039.53    
  44  0.759664     -0.274878      -5.56331       5.56331       2026.66       2032.22    
  45  0.468968     -0.757221      -15.3255       15.3255       2007.43       2022.75    
  46  0.740796     -0.300031      -6.07237       6.07237       2002.85       2008.92    
  47  0.737223     -0.304865      -6.17021       6.17021       2010.04       2016.21    
  48  0.584325     -0.537298      -10.8745       10.8745       2042.25       2053.13    
  49  0.850800     -0.161578      -3.27021       3.27021       2033.28       2036.56    
  50  0.181706      -1.70536      -34.5151       34.5151       2025.04       2059.56    
  51  0.801855E-01  -2.52341      -51.0718       51.0718       2011.14       2062.21    
  52  0.989218     -0.108406E-01 -0.219405      0.219405       2033.22       2033.44    
  53  0.214049      -1.54155      -31.1996       31.1996       2049.88       2081.08    
  54  0.522539     -0.649055      -13.1363       13.1363       2099.94       2113.07    
  55  0.964020     -0.366433E-01 -0.741631      0.741631       2088.85       2089.59    
  56  0.559622     -0.580494      -11.7487       11.7487       2130.49       2142.24    
  57  0.944229     -0.573866E-01  -1.16146       1.16146       2115.07       2116.23    
  58  0.212625      -1.54823      -31.3348       31.3348       2033.02       2064.35    
loop,thermsimp(1:2)       31   34.7259       17.4344    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355       2097.76         68.38          1.23         39.31          0.38          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2097.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       31
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       32
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      354     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -57.8035       57.8035       1717.59       1775.39    
   2  0.695439     -0.363212      -7.35111       7.35111       1780.96       1788.31    
   3  0.338668      -1.08273      -21.9136       21.9136       1777.11       1799.03    
   4  0.494821     -0.703559      -14.2395       14.2395       1774.12       1788.36    
   5  0.433638E-02  -5.44072      -110.116       110.116       1782.09       1892.20    
   6  0.270974      -1.30573      -26.4269       26.4269       1798.54       1824.97    
   7  0.926362E-01  -2.37907      -48.1505       48.1505       1788.41       1836.56    
   8  0.437858     -0.825861      -16.7147       16.7147       1776.18       1792.89    
   9  0.297746      -1.21151      -24.5200       24.5200       1795.34       1819.86    
  10  0.948309     -0.530750E-01  -1.07419       1.07419       1765.83       1766.91    
  11  0.845139     -0.168254      -3.40532       3.40532       1835.62       1839.02    
  12  0.930128     -0.724325E-01  -1.46597       1.46597       1841.83       1843.29    
  13  0.921850     -0.813732E-01  -1.64693       1.64693       1852.82       1854.47    
  14  0.447950     -0.803074      -16.2535       16.2535       1787.50       1803.76    
  15  0.712740     -0.338638      -6.85375       6.85375       1879.41       1886.27    
  16  0.574809     -0.553717      -11.2068       11.2068       1862.49       1873.70    
  17  0.136104      -1.99433      -40.3636       40.3636       1904.36       1944.73    
  18  0.340340      -1.07781      -21.8140       21.8140       1911.00       1932.81    
  19  0.149160      -1.90274      -38.5098       38.5098       1901.78       1940.29    
  20  0.433234E-01  -3.13906      -63.5320       63.5320       1913.96       1977.49    
  21  0.909134     -0.952630E-01  -1.92804       1.92804       1908.00       1909.93    
  22  0.619739     -0.478456      -9.68355       9.68355       1907.59       1917.27    
  23  0.726693     -0.319251      -6.46137       6.46137       1886.07       1892.54    
  24  0.962860     -0.378471E-01 -0.765994      0.765994       1922.56       1923.33    
  25  0.615108     -0.485958      -9.83539       9.83539       1929.90       1939.74    
  26  0.500401     -0.692346      -14.0125       14.0125       1926.23       1940.25    
  27  0.402080     -0.911104      -18.4400       18.4400       1913.70       1932.14    
  28  0.749737     -0.288033      -5.82954       5.82954       1925.45       1931.28    
  29  0.926553     -0.762839E-01  -1.54392       1.54392       1951.17       1952.71    
  30  0.519037     -0.655779      -13.2724       13.2724       1957.84       1971.11    
  31  0.498178E-01  -2.99938      -60.7050       60.7050       1952.51       2013.22    
  32  0.473692     -0.747197      -15.1226       15.1226       1928.88       1944.00    
  33  0.574927E-02  -5.15868      -104.407       104.407       1952.21       2056.62    
  34  0.349575      -1.05104      -21.2721       21.2721       1957.87       1979.14    
  35  0.661333     -0.413498      -8.36885       8.36885       1966.08       1974.45    
  36  0.314247E-01  -3.46016      -70.0307       70.0307       1925.30       1995.33    
  37  0.318841      -1.14306      -23.1347       23.1347       1962.55       1985.69    
  38  0.111349E-01  -4.49767      -91.0292       91.0292       1965.45       2056.48    
  39  0.845234E-02  -4.77331      -96.6078       96.6078       1979.33       2075.94    
  40  0.704975E-01  -2.65218      -53.6779       53.6779       1967.41       2021.09    
  41  0.126423      -2.06812      -41.8571       41.8571       1984.75       2026.60    
  42  0.120140      -2.11910      -42.8888       42.8888       1963.44       2006.33    
  43  0.664865     -0.408172      -8.26105       8.26105       2002.85       2011.11    
  44  0.829336     -0.187130      -3.78735       3.78735       2010.04       2013.83    
  45  0.656735     -0.420475      -8.51007       8.51007       2007.43       2015.94    
  46  0.955374     -0.456526E-01 -0.923971      0.923971       2026.66       2027.58    
  47  0.220157      -1.51341      -30.6302       30.6302       2033.22       2063.85    
  48  0.151230      -1.88895      -38.2308       38.2308       2033.28       2071.52    
  49  0.127393      -2.06048      -41.7024       41.7024       2025.73       2067.43    
  50  0.206727      -1.57636      -31.9041       31.9041       2042.25       2074.16    
  51  0.637521     -0.450168      -9.11102       9.11102       2025.04       2034.15    
  52  0.432940     -0.837156      -16.9433       16.9433       2011.14       2028.09    
  53  0.429465     -0.845215      -17.1064       17.1064       2033.02       2050.12    
  54  0.989331E-01  -2.31331      -46.8195       46.8195       2049.88       2096.70    
  55  0.158609      -1.84131      -37.2666       37.2666       2088.85       2126.12    
  56  0.811960     -0.208304      -4.21591       4.21591       2099.94       2104.15    
  57  0.112024      -2.18904      -44.3043       44.3043       2115.07       2159.37    
  58  0.922858     -0.802799E-01  -1.62480       1.62480       2097.76       2099.38    
loop,thermsimp(1:2)       32   57.8035       7.35111    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356       2130.23         68.30          1.21         39.19          0.51          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2130.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       32
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       33
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      355     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739      -4.34614       4.34614       1765.83       1770.18    
   2  0.549594     -0.598576      -12.1147       12.1147       1717.59       1729.70    
   3  0.631143     -0.460223      -9.31454       9.31454       1780.96       1790.27    
   4  0.268455      -1.31507      -26.6160       26.6160       1774.12       1800.73    
   5  0.513519     -0.666468      -13.4888       13.4888       1776.18       1789.67    
   6  0.886725     -0.120220      -2.43315       2.43315       1777.11       1779.54    
   7  0.568618     -0.564546      -11.4259       11.4259       1787.50       1798.93    
   8  0.443178     -0.813783      -16.4703       16.4703       1795.34       1811.81    
   9  0.898491     -0.107039      -2.16637       2.16637       1798.54       1800.70    
  10  0.235118      -1.44767      -29.2996       29.2996       1788.41       1817.71    
  11  0.509444     -0.674434      -13.6500       13.6500       1835.62       1849.27    
  12  0.223921      -1.49646      -30.2871       30.2871       1841.83       1872.12    
  13  0.188995      -1.66603      -33.7191       33.7191       1852.82       1886.54    
  14  0.969568     -0.309049E-01 -0.625488      0.625488       1862.49       1863.12    
  15  0.287265      -1.24735      -25.2453       25.2453       1879.41       1904.66    
  16  0.559573E-01  -2.88317      -58.3529       58.3529       1782.09       1840.44    
  17  0.668393     -0.402878      -8.15392       8.15392       1886.07       1894.23    
  18  0.488393     -0.716635      -14.5041       14.5041       1908.00       1922.51    
  19  0.605591     -0.501551      -10.1510       10.1510       1907.59       1917.74    
  20  0.490783     -0.711753      -14.4053       14.4053       1922.56       1936.97    
  21  0.313180      -1.16098      -23.4972       23.4972       1925.45       1948.95    
  22  0.200234      -1.60827      -32.5500       32.5500       1913.70       1946.25    
  23  0.575811     -0.551975      -11.1715       11.1715       1911.00       1922.17    
  24  0.856965     -0.154358      -3.12407       3.12407       1929.90       1933.03    
  25  0.310774      -1.16869      -23.6533       23.6533       1926.23       1949.89    
  26  0.836513     -0.178513      -3.61296       3.61296       1901.78       1905.40    
  27  0.286335      -1.25059      -25.3110       25.3110       1928.88       1954.19    
  28  0.240507      -1.42500      -28.8409       28.8409       1904.36       1933.20    
  29  0.103511E-01  -4.57066      -92.5063       92.5063       1951.17       2043.67    
  30  0.516897     -0.659912      -13.3561       13.3561       1957.84       1971.20    
  31  0.237615      -1.43710      -29.0858       29.0858       1966.08       1995.17    
  32  0.602330     -0.506950      -10.2602       10.2602       1913.96       1924.22    
  33  0.677792     -0.388915      -7.87132       7.87132       1957.87       1965.74    
  34  0.965031     -0.355954E-01 -0.720421      0.720421       1962.55       1963.27    
  35  0.851769     -0.160440      -3.24718       3.24718       1925.30       1928.54    
  36  0.998637     -0.136415E-02 -0.276092E-01  0.276092E-01   1963.44       1963.47    
  37  0.690071E-01  -2.67355      -54.1103       54.1103       2002.85       2056.96    
  38  0.865316E-02  -4.74983      -96.1326       96.1326       1952.51       2048.64    
  39  0.657551     -0.419234      -8.48494       8.48494       2010.04       2018.52    
  40  0.249918      -1.38662      -28.0641       28.0641       2007.43       2035.49    
  41  0.762839     -0.270708      -5.47890       5.47890       1967.41       1972.89    
  42  0.875176     -0.133331      -2.69850       2.69850       1984.75       1987.45    
  43  0.805569     -0.216207      -4.37584       4.37584       2026.66       2031.03    
  44  0.308797      -1.17507      -23.7824       23.7824       2011.14       2034.92    
  45  0.255763      -1.36350      -27.5962       27.5962       2025.04       2052.64    
  46  0.218508      -1.52093      -30.7824       30.7824       2033.02       2063.80    
  47  0.518593     -0.656637      -13.2898       13.2898       1965.45       1978.74    
  48  0.856838     -0.154506      -3.12707       3.12707       1952.21       1955.34    
  49  0.300810      -1.20128      -24.3128       24.3128       2033.22       2057.53    
  50  0.310312      -1.17018      -23.6834       23.6834       2025.73       2049.42    
  51  0.503825     -0.685526      -13.8745       13.8745       2033.28       2047.16    
  52  0.940514     -0.613291E-01  -1.24125       1.24125       2042.25       2043.50    
  53  0.778953     -0.249804      -5.05583       5.05583       1979.33       1984.39    
  54  0.586433     -0.533697      -10.8016       10.8016       2049.88       2060.69    
  55  0.866496     -0.143298      -2.90023       2.90023       2097.76       2100.66    
  56  0.371870E-01  -3.29180      -66.6232       66.6232       2099.94       2166.56    
  57  0.592656     -0.523141      -10.5879       10.5879       2088.85       2099.44    
  58  0.337285      -1.08683      -21.9964       21.9964       2130.23       2152.22    
loop,thermsimp(1:2)       33   4.34614       12.1147    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357       2111.75         68.34          1.23         39.10          0.57          0.05        109.29
Just calling func    0   0        109.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2111.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       33
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       34
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      356     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -19.8030       19.8030       1717.59       1737.39    
   2  0.356800      -1.03058      -20.8581       20.8581       1765.83       1786.69    
   3  0.686180     -0.376616      -7.62239       7.62239       1777.11       1784.73    
   4  0.443986     -0.811963      -16.4334       16.4334       1776.18       1792.61    
   5  0.837544     -0.177281      -3.58803       3.58803       1780.96       1784.54    
   6  0.902394     -0.102704      -2.07864       2.07864       1787.50       1789.58    
   7  0.509658E-01  -2.97660      -60.2439       60.2439       1798.54       1858.78    
   8  0.662569     -0.411631      -8.33107       8.33107       1774.12       1782.45    
   9  0.226311      -1.48585      -30.0723       30.0723       1795.34       1825.41    
  10  0.336196      -1.09006      -22.0619       22.0619       1788.41       1810.47    
  11  0.122038      -2.10342      -42.5715       42.5715       1782.09       1824.66    
  12  0.323275      -1.12925      -22.8551       22.8551       1835.62       1858.47    
  13  0.326513      -1.11929      -22.6534       22.6534       1862.49       1885.15    
  14  0.904434     -0.100446      -2.03294       2.03294       1841.83       1843.86    
  15  0.856476     -0.154928      -3.13562       3.13562       1852.82       1855.96    
  16  0.873700     -0.135019      -2.73267       2.73267       1886.07       1888.81    
  17  0.989627     -0.104267E-01 -0.211028      0.211028       1879.41       1879.63    
  18  0.546745     -0.603772      -12.2198       12.2198       1901.78       1914.00    
  19  0.731718     -0.312360      -6.32191       6.32191       1907.59       1913.91    
  20  0.859154     -0.151807      -3.07244       3.07244       1911.00       1914.07    
  21  0.419381     -0.868976      -17.5873       17.5873       1908.00       1925.59    
  22  0.587067     -0.532617      -10.7797       10.7797       1913.96       1924.74    
  23  0.460289E-01  -3.07849      -62.3060       62.3060       1925.30       1987.60    
  24  0.522902     -0.648362      -13.1223       13.1223       1929.90       1943.03    
  25  0.398671     -0.919618      -18.6123       18.6123       1904.36       1922.98    
  26  0.881302     -0.126355      -2.55731       2.55731       1922.56       1925.12    
  27  0.226039      -1.48705      -30.0966       30.0966       1913.70       1943.80    
  28  0.124144      -2.08631      -42.2252       42.2252       1925.45       1967.68    
  29  0.542680     -0.611235      -12.3709       12.3709       1926.23       1938.61    
  30  0.167496      -1.78679      -36.1632       36.1632       1928.88       1965.04    
  31  0.619825     -0.478318      -9.68076       9.68076       1952.21       1961.89    
  32  0.169564      -1.77452      -35.9149       35.9149       1962.55       1998.47    
  33  0.781291     -0.246807      -4.99517       4.99517       1963.44       1968.44    
  34  0.486264     -0.721004      -14.5925       14.5925       1957.87       1972.46    
  35  0.895366     -0.110522      -2.23688       2.23688       1957.84       1960.08    
  36  0.321503      -1.13475      -22.9664       22.9664       1967.41       1990.37    
  37  0.607862E-01  -2.80039      -56.6776       56.6776       1965.45       2022.13    
  38  0.365124      -1.00752      -20.3913       20.3913       1979.33       1999.72    
  39  0.110107      -2.20630      -44.6537       44.6537       1984.75       2029.40    
  40  0.905082     -0.997294E-01  -2.01844       2.01844       1966.08       1968.10    
  41  0.960140     -0.406759E-01 -0.823247      0.823247       2010.04       2010.86    
  42  0.320200      -1.13881      -23.0485       23.0485       2026.66       2049.70    
  43  0.396920     -0.924021      -18.7014       18.7014       2011.14       2029.84    
  44  0.674668     -0.393534      -7.96481       7.96481       2007.43       2015.39    
  45  0.894300     -0.111715      -2.26101       2.26101       2042.25       2044.51    
  46  0.875669     -0.132767      -2.68710       2.68710       1951.17       1953.86    
  47  0.881286     -0.126374      -2.55770       2.55770       2033.28       2035.84    
  48  0.779885     -0.248609      -5.03164       5.03164       1952.51       1957.54    
  49  0.691264     -0.369233      -7.47297       7.47297       2025.73       2033.20    
  50  0.406618     -0.899882      -18.2129       18.2129       2025.04       2043.25    
  51  0.225318      -1.49024      -30.1612       30.1612       2002.85       2033.01    
  52  0.172220      -1.75898      -35.6004       35.6004       2033.22       2068.82    
  53  0.479523     -0.734964      -14.8751       14.8751       2049.88       2064.76    
  54  0.313312      -1.16056      -23.4887       23.4887       2033.02       2056.51    
  55  0.389868     -0.941947      -19.0642       19.0642       2088.85       2107.91    
  56  0.510295     -0.672766      -13.6162       13.6162       2097.76       2111.37    
  57  0.782049     -0.245838      -4.97555       4.97555       2130.23       2135.20    
  58  0.193896      -1.64043      -33.2010       33.2010       2111.75       2144.95    
loop,thermsimp(1:2)       34   19.8030       20.8581    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358       2099.94         68.48          1.22         39.47          0.25          0.05        109.47
Just calling func    0   0        109.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2099.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       34
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       35
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      357     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -14.9220       14.9220       1717.59       1732.51    
   2  0.380700     -0.965745      -19.5459       19.5459       1774.12       1793.66    
   3  0.821138     -0.197064      -3.98841       3.98841       1780.96       1784.94    
   4  0.728654     -0.316557      -6.40685       6.40685       1777.11       1783.52    
   5  0.670900     -0.399135      -8.07816       8.07816       1765.83       1773.91    
   6  0.175262      -1.74147      -35.2459       35.2459       1787.50       1822.75    
   7  0.709150     -0.343688      -6.95596       6.95596       1776.18       1783.14    
   8  0.247481      -1.39642      -28.2624       28.2624       1788.41       1816.67    
   9  0.231597      -1.46276      -29.6050       29.6050       1782.09       1811.69    
  10  0.764757     -0.268198      -5.42810       5.42810       1795.34       1800.77    
  11  0.798540     -0.224970      -4.55320       4.55320       1841.83       1846.38    
  12  0.903782     -0.101167      -2.04754       2.04754       1852.82       1854.87    
  13  0.136634      -1.99045      -40.2851       40.2851       1835.62       1875.90    
  14  0.141955      -1.95225      -39.5119       39.5119       1798.54       1838.05    
  15  0.658650     -0.417563      -8.45112       8.45112       1879.41       1887.87    
  16  0.265370      -1.32663      -26.8499       26.8499       1862.49       1889.34    
  17  0.439277E-01  -3.12521      -63.2516       63.2516       1886.07       1949.33    
  18  0.451732     -0.794667      -16.0834       16.0834       1907.59       1923.67    
  19  0.475868     -0.742615      -15.0299       15.0299       1901.78       1916.81    
  20  0.336185      -1.09009      -22.0626       22.0626       1911.00       1933.06    
  21  0.519277     -0.655317      -13.2631       13.2631       1904.36       1917.63    
  22  0.455030     -0.787393      -15.9362       15.9362       1913.96       1929.89    
  23  0.272148E-01  -3.60399      -72.9418       72.9418       1922.56       1995.50    
  24  0.125510      -2.07537      -42.0038       42.0038       1908.00       1950.01    
  25  0.687868     -0.374159      -7.57266       7.57266       1926.23       1933.81    
  26  0.271894      -1.30234      -26.3583       26.3583       1929.90       1956.26    
  27  0.641335     -0.444204      -8.99032       8.99032       1913.70       1922.69    
  28  0.858838E-01  -2.45476      -49.6823       49.6823       1951.17       2000.85    
  29  0.579605     -0.545408      -11.0386       11.0386       1952.51       1963.55    
  30  0.249942      -1.38653      -28.0622       28.0622       1957.84       1985.90    
  31  0.938016     -0.639885E-01  -1.29507       1.29507       1952.21       1953.51    
  32  0.453695     -0.790330      -15.9956       15.9956       1928.88       1944.87    
  33  0.319751      -1.14021      -23.0770       23.0770       1925.45       1948.53    
  34  0.346149      -1.06089      -21.4715       21.4715       1966.08       1987.55    
  35  0.870951     -0.138169      -2.79643       2.79643       1963.44       1966.24    
  36  0.187313      -1.67497      -33.9001       33.9001       1957.87       1991.77    
  37  0.984950     -0.151645E-01 -0.306918      0.306918       1925.30       1925.60    
  38  0.524062     -0.646145      -13.0774       13.0774       1967.41       1980.49    
  39  0.432392     -0.838423      -16.9690       16.9690       1962.55       1979.52    
  40  0.687254     -0.375052      -7.59074       7.59074       1979.33       1986.92    
  41  0.869131     -0.140262      -2.83878       2.83878       2010.04       2012.88    
  42  0.350749      -1.04769      -21.2043       21.2043       2007.43       2028.63    
  43  0.663152E-01  -2.71334      -54.9157       54.9157       1965.45       2020.37    
  44  0.306857      -1.18137      -23.9100       23.9100       1984.75       2008.66    
  45  0.925728     -0.771751E-01  -1.56196       1.56196       2011.14       2012.70    
  46  0.649899     -0.430939      -8.72184       8.72184       2002.85       2011.57    
  47  0.492368     -0.708529      -14.3400       14.3400       2025.73       2040.07    
  48  0.104223      -2.26122      -45.7652       45.7652       2033.28       2079.05    
  49  0.345103      -1.06391      -21.5327       21.5327       2025.04       2046.57    
  50  0.425380     -0.854773      -17.2999       17.2999       2042.25       2059.55    
  51  0.922590     -0.805699E-01  -1.63067       1.63067       2026.66       2028.29    
  52  0.209663      -1.56226      -31.6188       31.6188       2033.02       2064.64    
  53  0.402772     -0.909384      -18.4052       18.4052       2049.88       2068.29    
  54  0.246006      -1.40240      -28.3834       28.3834       2033.22       2061.60    
  55  0.811871     -0.208414      -4.21812       4.21812       2088.85       2093.07    
  56  0.929927     -0.726495E-01  -1.47037       1.47037       2097.76       2099.23    
  57  0.407345     -0.898096      -18.1767       18.1767       2130.23       2148.40    
  58  0.870102     -0.139145      -2.81618       2.81618       2099.94       2102.75    
loop,thermsimp(1:2)       35   14.9220       19.5459    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359       2115.07         68.39          1.24         39.25          0.34          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    360       1817.96         68.30          1.20         39.32          0.33          0.05        109.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1817.96
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       35
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       36
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      359     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01  -1.17270       1.17270       1717.59       1718.76    
   2  0.628336     -0.464680      -9.40474       9.40474       1765.83       1775.24    
   3  0.261321      -1.34200      -27.1610       27.1610       1776.18       1803.34    
   4  0.256100      -1.36219      -27.5695       27.5695       1777.11       1804.68    
   5  0.318070      -1.14548      -23.1836       23.1836       1780.96       1804.14    
   6  0.895943     -0.109878      -2.22385       2.22385       1774.12       1776.34    
   7  0.856491     -0.154912      -3.13529       3.13529       1795.34       1798.48    
   8  0.269953      -1.30951      -26.5034       26.5034       1782.09       1808.59    
   9  0.663616     -0.410051      -8.29909       8.29909       1788.41       1796.71    
  10  0.249338E-01  -3.69153      -74.7135       74.7135       1787.50       1862.22    
  11  0.362852      -1.01376      -20.5176       20.5176       1798.54       1819.06    
  12  0.868529E-02  -4.74612      -96.0576       96.0576       1841.83       1937.89    
  13  0.705785     -0.348444      -7.05221       7.05221       1852.82       1859.87    
  14  0.527358     -0.639875      -12.9505       12.9505       1835.62       1848.57    
  15  0.831399     -0.184645      -3.73706       3.73706       1879.41       1883.15    
  16  0.594963     -0.519255      -10.5093       10.5093       1862.49       1873.00    
  17  0.501981     -0.689193      -13.9487       13.9487       1901.78       1915.73    
  18  0.594311     -0.520353      -10.5315       10.5315       1904.36       1914.90    
  19  0.618124     -0.481066      -9.73638       9.73638       1913.70       1923.44    
  20  0.959578E-01  -2.34385      -47.4375       47.4375       1907.59       1955.02    
  21  0.776845     -0.252514      -5.11068       5.11068       1925.30       1930.41    
  22  0.458742     -0.779266      -15.7717       15.7717       1913.96       1929.73    
  23  0.645084     -0.438374      -8.87233       8.87233       1911.00       1919.87    
  24  0.545194     -0.606614      -12.2774       12.2774       1926.23       1938.51    
  25  0.618072     -0.481151      -9.73809       9.73809       1928.88       1938.61    
  26  0.390168     -0.941179      -19.0487       19.0487       1925.45       1944.50    
  27  0.122318      -2.10113      -42.5252       42.5252       1886.07       1928.60    
  28  0.823049     -0.194740      -3.94136       3.94136       1908.00       1911.95    
  29  0.817844E-01  -2.50367      -50.6722       50.6722       1952.21       2002.89    
  30  0.189400      -1.66389      -33.6758       33.6758       1929.90       1963.58    
  31  0.257378      -1.35721      -27.4688       27.4688       1952.51       1979.98    
  32  0.854384     -0.157375      -3.18514       3.18514       1963.44       1966.63    
  33  0.128350      -2.05300      -41.5509       41.5509       1962.55       2004.10    
  34  0.410790     -0.889673      -18.0062       18.0062       1967.41       1985.41    
  35  0.645584     -0.437599      -8.85664       8.85664       1957.84       1966.70    
  36  0.309517      -1.17274      -23.7353       23.7353       1979.33       2003.07    
  37  0.568550     -0.564667      -11.4284       11.4284       1966.08       1977.51    
  38  0.702184     -0.353560      -7.15577       7.15577       1957.87       1965.03    
  39  0.939991     -0.618850E-01  -1.25250       1.25250       1922.56       1923.81    
  40  0.944105     -0.575180E-01  -1.16412       1.16412       1951.17       1952.33    
  41  0.202943      -1.59483      -32.2781       32.2781       1984.75       2017.02    
  42  0.948631E-02  -4.65791      -94.2721       94.2721       2002.85       2097.12    
  43  0.568674     -0.564449      -11.4240       11.4240       2011.14       2022.57    
  44  0.216733      -1.52909      -30.9475       30.9475       2010.04       2040.99    
  45  0.385755     -0.952553      -19.2789       19.2789       1965.45       1984.73    
  46  0.894850E-01  -2.41368      -48.8510       48.8510       2026.66       2075.51    
  47  0.136648      -1.99035      -40.2830       40.2830       2007.43       2047.71    
  48  0.473765     -0.747044      -15.1195       15.1195       2025.73       2040.85    
  49  0.208114E-01  -3.87225      -78.3712       78.3712       2025.04       2103.41    
  50  0.158159      -1.84415      -37.3241       37.3241       2042.25       2079.58    
  51  0.112432      -2.18541      -44.2308       44.2308       2033.22       2077.45    
  52  0.135630      -1.99782      -40.4343       40.4343       2033.02       2073.45    
  53  0.976001E-01  -2.32688      -47.0940       47.0940       2049.88       2096.98    
  54  0.914947     -0.888887E-01  -1.79903       1.79903       2033.28       2035.08    
  55  0.832290     -0.183575      -3.71540       3.71540       2088.85       2092.57    
  56  0.592436     -0.523513      -10.5955       10.5955       2097.76       2108.35    
  57  0.938858     -0.630909E-01  -1.27691       1.27691       2099.94       2101.21    
  58  0.390466     -0.940415      -19.0332       19.0332       1817.96       1836.99    
loop,thermsimp(1:2)       36   1.17270       9.40474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361       2131.51         68.27          1.20         39.45          0.31          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    362       1839.75         68.27          1.22         39.30          0.41          0.05        109.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    2131.5        2.975     -2.942      3.449     -102.6     0.4631E-01
                      0.2495      1.406     -99.70      4.534     0.3564    

                       3.684     -3.034      1.540      6441.      7000.    

                      -2.005      0.000      0.000      0.000     -1.221    



                      -1.858      0.000      0.000      7000.      654.9    

                      -1.517     -3.675     -7.208     -8.251      6.992    

                      -14.02     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.7575E-02 0.9849E-01 0.7802E-01 0.1084    

                     -0.2486     0.1295     0.1074     0.9466E-01-0.8145E-03



                     -0.8786    -0.6528      0.000    -0.8486E-01 0.1832    

                      0.1463     0.1719    -0.7116     0.5443E-01 0.3165    

                      0.7011     0.8519E-01-0.3672     -1.609      7000.    



                      -1.239     -1.236     -2.142     -1.982    -0.3807    

                     -0.3252      9.252      8.462    -0.1686E+05 -5.618    

                     -0.4090     -2.376      8.669      9.115    -0.1969E+05



                      -6.000     0.5324     0.3648E-01  8.871      8.992    

                     -0.1944E+05 -6.000    -0.2590E-01-0.3758      9.766    

                       8.919    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1839.75
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       36
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       37
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      361     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -11.1069       11.1069       1717.59       1728.69    
   2  0.954687     -0.463716E-01 -0.938522      0.938522       1765.83       1766.77    
   3  0.530232     -0.634441      -12.8406       12.8406       1774.12       1786.96    
   4  0.762581     -0.271046      -5.48575       5.48575       1788.41       1793.89    
   5  0.261488      -1.34137      -27.1481       27.1481       1795.34       1822.49    
   6  0.639820     -0.446569      -9.03818       9.03818       1776.18       1785.22    
   7  0.527286     -0.640012      -12.9533       12.9533       1780.96       1793.91    
   8  0.819676     -0.198846      -4.02447       4.02447       1777.11       1781.14    
   9  0.564974     -0.570976      -11.5561       11.5561       1782.09       1793.64    
  10  0.313261      -1.16072      -23.4920       23.4920       1798.54       1822.03    
  11  0.741013     -0.299737      -6.06644       6.06644       1817.96       1824.02    
  12  0.286155      -1.25122      -25.3237       25.3237       1835.62       1860.94    
  13  0.145515      -1.92747      -39.0105       39.0105       1852.82       1891.83    
  14  0.417445     -0.873602      -17.6810       17.6810       1787.50       1805.19    
  15  0.110117      -2.20621      -44.6518       44.6518       1862.49       1907.15    
  16  0.798228     -0.225361      -4.56112       4.56112       1879.41       1883.98    
  17  0.981317     -0.188596E-01 -0.381702      0.381702       1908.00       1908.39    
  18  0.947313     -0.541256E-01  -1.09546       1.09546       1904.36       1905.46    
  19  0.979175     -0.210453E-01 -0.425938      0.425938       1901.78       1902.21    
  20  0.507968     -0.677337      -13.7087       13.7087       1911.00       1924.71    
  21  0.313327      -1.16051      -23.4877       23.4877       1913.70       1937.19    
  22  0.174912      -1.74347      -35.2865       35.2865       1922.56       1957.85    
  23  0.278222      -1.27933      -25.8927       25.8927       1886.07       1911.97    
  24  0.551320     -0.595439      -12.0512       12.0512       1913.96       1926.01    
  25  0.509281     -0.674756      -13.6565       13.6565       1925.30       1938.95    
  26  0.202795E-01  -3.89814      -78.8951       78.8951       1841.83       1920.72    
  27  0.394215     -0.930860      -18.8398       18.8398       1926.23       1945.07    
  28  0.463302     -0.769377      -15.5715       15.5715       1928.88       1944.45    
  29  0.132020      -2.02480      -40.9803       40.9803       1925.45       1966.43    
  30  0.330810      -1.10621      -22.3888       22.3888       1951.17       1973.56    
  31  0.415110     -0.879212      -17.7945       17.7945       1907.59       1925.38    
  32  0.381803     -0.962850      -19.4873       19.4873       1929.90       1949.39    
  33  0.209798E-01  -3.86420      -78.2081       78.2081       1957.87       2036.08    
  34  0.906539     -0.981217E-01  -1.98590       1.98590       1963.44       1965.43    
  35  0.507460     -0.678337      -13.7290       13.7290       1957.84       1971.57    
  36  0.694619     -0.364392      -7.37499       7.37499       1966.08       1973.46    
  37  0.704259     -0.350610      -7.09605       7.09605       1952.51       1959.61    
  38  0.953152     -0.479806E-01 -0.971086      0.971086       1965.45       1966.43    
  39  0.393408     -0.932907      -18.8813       18.8813       1967.41       1986.29    
  40  0.361825      -1.01659      -20.5750       20.5750       1952.21       1972.79    
  41  0.420592     -0.866091      -17.5290       17.5290       1979.33       1996.86    
  42  0.474514     -0.745463      -15.0876       15.0876       1962.55       1977.64    
  43  0.769306     -0.262267      -5.30806       5.30806       1984.75       1990.05    
  44  0.881065     -0.126624      -2.56275       2.56275       2011.14       2013.70    
  45  0.298206      -1.20997      -24.4888       24.4888       2033.28       2057.77    
  46  0.364982E-01  -3.31049      -67.0016       67.0016       2025.73       2092.73    
  47  0.835758     -0.179417      -3.63124       3.63124       2010.04       2013.67    
  48  0.936392     -0.657215E-01  -1.33015       1.33015       2007.43       2008.76    
  49  0.213316      -1.54498      -31.2691       31.2691       2033.02       2064.29    
  50  0.942026     -0.597221E-01  -1.20872       1.20872       2026.66       2027.86    
  51  0.130068      -2.03970      -41.2817       41.2817       2033.22       2074.50    
  52  0.115047      -2.16241      -43.7654       43.7654       2042.25       2086.02    
  53  0.320926      -1.13654      -23.0027       23.0027       2088.85       2111.85    
  54  0.256901      -1.35906      -27.5063       27.5063       2049.88       2077.39    
  55  0.712293E-02  -4.94444      -100.071       100.071       2002.85       2102.92    
  56  0.470217     -0.754561      -15.2717       15.2717       2099.94       2115.21    
  57  0.934029     -0.682473E-01  -1.38127       1.38127       2025.04       2026.42    
  58  0.312307      -1.16377      -23.5537       23.5537       1839.75       1863.31    
loop,thermsimp(1:2)       37   11.1069      0.938522    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363       2107.81         68.33          1.22         39.61          0.24          0.05        109.44
Just calling func    0   0        109.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2107.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       37
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       38
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      362     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -6.98311       6.98311       1717.59       1724.57    
   2  0.656861     -0.420283      -8.50618       8.50618       1765.83       1774.34    
   3  0.531016     -0.632963      -12.8106       12.8106       1777.11       1789.92    
   4  0.259645      -1.34844      -27.2913       27.2913       1776.18       1803.47    
   5  0.509285E-01  -2.97733      -60.2587       60.2587       1774.12       1834.38    
   6  0.222403      -1.50327      -30.4248       30.4248       1782.09       1812.51    
   7  0.883122E-01  -2.42688      -49.1179       49.1179       1788.41       1837.53    
   8  0.689941     -0.371150      -7.51176       7.51176       1780.96       1788.47    
   9  0.811351     -0.209054      -4.23108       4.23108       1787.50       1791.74    
  10  0.252526      -1.37624      -27.8540       27.8540       1798.54       1826.39    
  11  0.229840      -1.47037      -29.7591       29.7591       1795.34       1825.10    
  12  0.108257      -2.22324      -44.9966       44.9966       1817.96       1862.95    
  13  0.933379E-02  -4.67411      -94.6001       94.6001       1835.62       1930.22    
  14  0.685050E-01  -2.68085      -54.2581       54.2581       1839.75       1894.01    
  15  0.875782     -0.132638      -2.68449       2.68449       1879.41       1882.10    
  16  0.592250     -0.523826      -10.6018       10.6018       1852.82       1863.42    
  17  0.259190E-01  -3.65278      -73.9292       73.9292       1901.78       1975.71    
  18  0.411624     -0.887646      -17.9652       17.9652       1904.36       1922.33    
  19  0.215731      -1.53372      -31.0413       31.0413       1862.49       1893.53    
  20  0.104157      -2.26185      -45.7780       45.7780       1908.00       1953.78    
  21  0.796475     -0.227560      -4.60562       4.60562       1886.07       1890.68    
  22  0.316732      -1.14970      -23.2690       23.2690       1841.83       1865.10    
  23  0.868566     -0.140911      -2.85192       2.85192       1911.00       1913.85    
  24  0.932817     -0.695461E-01  -1.40755       1.40755       1907.59       1908.99    
  25  0.704796E-01  -2.65243      -53.6830       53.6830       1913.96       1967.64    
  26  0.584289     -0.537360      -10.8757       10.8757       1913.70       1924.58    
  27  0.345306      -1.06332      -21.5208       21.5208       1925.30       1946.82    
  28  0.367589E-01  -3.30338      -66.8576       66.8576       1928.88       1995.73    
  29  0.470285     -0.754417      -15.2688       15.2688       1926.23       1941.50    
  30  0.303718      -1.19165      -24.1181       24.1181       1929.90       1954.02    
  31  0.298675      -1.20840      -24.4570       24.4570       1922.56       1947.02    
  32  0.506100     -0.681022      -13.7833       13.7833       1952.51       1966.29    
  33  0.240488      -1.42508      -28.8425       28.8425       1963.44       1992.28    
  34  0.673726     -0.394932      -7.99310       7.99310       1965.45       1973.45    
  35  0.303531      -1.19227      -24.1305       24.1305       1925.45       1949.58    
  36  0.450278     -0.797890      -16.1486       16.1486       1957.84       1973.99    
  37  0.850970     -0.161378      -3.26616       3.26616       1952.21       1955.48    
  38  0.370442     -0.993060      -20.0987       20.0987       1966.08       1986.18    
  39  0.328520      -1.11316      -22.5294       22.5294       1951.17       1973.70    
  40  0.194991      -1.63480      -33.0870       33.0870       1962.55       1995.64    
  41  0.547740     -0.601955      -12.1831       12.1831       1967.41       1979.59    
  42  0.574734     -0.553847      -11.2094       11.2094       1984.75       1995.96    
  43  0.900615     -0.104678      -2.11859       2.11859       1979.33       1981.45    
  44  0.316870      -1.14926      -23.2601       23.2601       2007.43       2030.69    
  45  0.961546     -0.392133E-01 -0.793645      0.793645       2010.04       2010.83    
  46  0.714054     -0.336796      -6.81647       6.81647       2011.14       2017.96    
  47  0.325407E-01  -3.42526      -69.3245       69.3245       2025.04       2094.37    
  48  0.264027      -1.33170      -26.9526       26.9526       2026.66       2053.61    
  49  0.139486      -1.96979      -39.8669       39.8669       1957.87       1997.74    
  50  0.568563     -0.564643      -11.4279       11.4279       2033.28       2044.71    
  51  0.691470     -0.368936      -7.46696       7.46696       2033.02       2040.48    
  52  0.214963      -1.53729      -31.1135       31.1135       2033.22       2064.33    
  53  0.515636     -0.662353      -13.4055       13.4055       2049.88       2063.29    
  54  0.803808     -0.218395      -4.42013       4.42013       2042.25       2046.67    
  55  0.930258     -0.722938E-01  -1.46317       1.46317       2025.73       2027.19    
  56  0.121241      -2.10998      -42.7042       42.7042       2002.85       2045.56    
  57  0.510661     -0.672049      -13.6017       13.6017       2088.85       2102.45    
  58  0.689134     -0.372319      -7.53542       7.53542       2107.81       2115.34    
loop,thermsimp(1:2)       38   6.98311       8.50618    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364       2099.94         68.54          1.18         39.04          0.46          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2099.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       38
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       39
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      363     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912      -4.61274       4.61274       1717.59       1722.20    
   2  0.306803      -1.18155      -23.9136       23.9136       1765.83       1789.75    
   3  0.857946     -0.153214      -3.10092       3.10092       1780.96       1784.06    
   4  0.363815      -1.01111      -20.4640       20.4640       1777.11       1797.58    
   5  0.755322E-01  -2.58320      -52.2817       52.2817       1787.50       1839.79    
   6  0.345998E-01  -3.36391      -68.0826       68.0826       1776.18       1844.26    
   7  0.280587      -1.27087      -25.7214       25.7214       1782.09       1807.81    
   8  0.907418     -0.971519E-01  -1.96627       1.96627       1795.34       1797.31    
   9  0.696180     -0.362147      -7.32956       7.32956       1798.54       1805.87    
  10  0.640049     -0.446211      -9.03094       9.03094       1774.12       1783.15    
  11  0.620842     -0.476679      -9.64759       9.64759       1788.41       1798.06    
  12  0.850691     -0.161706      -3.27280       3.27280       1817.96       1821.23    
  13  0.308317      -1.17663      -23.8139       23.8139       1852.82       1876.63    
  14  0.198496      -1.61698      -32.7264       32.7264       1841.83       1874.56    
  15  0.119809      -2.12186      -42.9446       42.9446       1879.41       1922.36    
  16  0.905871     -0.988582E-01  -2.00081       2.00081       1886.07       1888.08    
  17  0.386344     -0.951028      -19.2480       19.2480       1862.49       1881.74    
  18  0.112809      -2.18206      -44.1630       44.1630       1839.75       1883.92    
  19  0.682866     -0.381457      -7.72038       7.72038       1907.59       1915.31    
  20  0.819362     -0.199230      -4.03225       4.03225       1911.00       1915.03    
  21  0.412742     -0.884933      -17.9103       17.9103       1904.36       1922.27    
  22  0.211811E-01  -3.85464      -78.0148       78.0148       1913.70       1991.72    
  23  0.422800     -0.860857      -17.4230       17.4230       1835.62       1853.04    
  24  0.826028     -0.191126      -3.86823       3.86823       1926.23       1930.10    
  25  0.457858     -0.781197      -15.8108       15.8108       1925.30       1941.11    
  26  0.551067     -0.595900      -12.0605       12.0605       1922.56       1934.62    
  27  0.160440      -1.82984      -37.0343       37.0343       1925.45       1962.49    
  28  0.240310      -1.42582      -28.8575       28.8575       1908.00       1936.86    
  29  0.614859     -0.486362      -9.84356       9.84356       1929.90       1939.75    
  30  0.489204     -0.714976      -14.4705       14.4705       1952.21       1966.68    
  31  0.151691      -1.88591      -38.1692       38.1692       1952.51       1990.68    
  32  0.221776      -1.50609      -30.4819       30.4819       1913.96       1944.44    
  33  0.333050      -1.09946      -22.2522       22.2522       1965.45       1987.71    
  34  0.905001     -0.998190E-01  -2.02025       2.02025       1951.17       1953.19    
  35  0.598599     -0.513164      -10.3860       10.3860       1957.84       1968.23    
  36  0.603742     -0.504608      -10.2128       10.2128       1901.78       1912.00    
  37  0.989214     -0.108448E-01 -0.219490      0.219490       1967.41       1967.63    
  38  0.175887      -1.73792      -35.1740       35.1740       1979.33       2014.51    
  39  0.708621     -0.344434      -6.97107       6.97107       1966.08       1973.05    
  40  0.940581     -0.612570E-01  -1.23979       1.23979       1963.44       1964.68    
  41  0.870068     -0.139184      -2.81696       2.81696       1962.55       1965.37    
  42  0.260264      -1.34606      -27.2431       27.2431       1928.88       1956.12    
  43  0.216654      -1.52946      -30.9549       30.9549       1984.75       2015.70    
  44  0.553762     -0.591020      -11.9617       11.9617       1957.87       1969.83    
  45  0.891465     -0.114889      -2.32526       2.32526       2010.04       2012.36    
  46  0.320048      -1.13928      -23.0582       23.0582       2011.14       2034.20    
  47  0.163518      -1.81083      -36.6498       36.6498       2025.73       2062.38    
  48  0.652431     -0.427050      -8.64313       8.64313       2007.43       2016.07    
  49  0.317737      -1.14653      -23.2049       23.2049       2033.02       2056.22    
  50  0.321191      -1.13572      -22.9860       22.9860       2033.28       2056.27    
  51  0.750162     -0.287466      -5.81808       5.81808       2002.85       2008.67    
  52  0.172611      -1.75672      -35.5545       35.5545       2042.25       2077.81    
  53  0.413556     -0.882963      -17.8704       17.8704       2026.66       2044.53    
  54  0.277750      -1.28103      -25.9271       25.9271       2049.88       2075.81    
  55  0.326826      -1.11833      -22.6340       22.6340       2033.22       2055.85    
  56  0.922327     -0.808557E-01  -1.63645       1.63645       2025.04       2026.68    
  57  0.572255     -0.558170      -11.2969       11.2969       2088.85       2100.15    
  58  0.149549      -1.90013      -38.4570       38.4570       2099.94       2138.39    
loop,thermsimp(1:2)       39   4.61274       23.9136    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365       2107.81         68.55          1.16         39.04          0.52          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    366       1887.27         68.52          1.17         38.98          0.62          0.05        109.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1887.27
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       39
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       40
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      365     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159      -4.94158       4.94158       1717.59       1722.53    
   2  0.179321      -1.71858      -34.7826       34.7826       1774.12       1808.90    
   3  0.331080      -1.10539      -22.3723       22.3723       1780.96       1803.33    
   4  0.130870      -2.03355      -41.1574       41.1574       1765.83       1806.99    
   5  0.604904     -0.502686      -10.1739       10.1739       1795.34       1805.52    
   6  0.140568      -1.96207      -39.7106       39.7106       1777.11       1816.82    
   7  0.127414      -2.06031      -41.6990       41.6990       1788.41       1830.11    
   8  0.389565     -0.942725      -19.0800       19.0800       1798.54       1817.62    
   9  0.835608     -0.179595      -3.63486       3.63486       1782.09       1785.72    
  10  0.934873     -0.673445E-01  -1.36300       1.36300       1817.96       1819.32    
  11  0.639074     -0.447735      -9.06179       9.06179       1787.50       1796.57    
  12  0.349757      -1.05052      -21.2616       21.2616       1776.18       1797.44    
  13  0.175521      -1.74000      -35.2161       35.2161       1835.62       1870.83    
  14  0.761611     -0.272320      -5.51152       5.51152       1841.83       1847.34    
  15  0.162952      -1.81430      -36.7199       36.7199       1852.82       1889.54    
  16  0.542858     -0.610907      -12.3642       12.3642       1862.49       1874.86    
  17  0.715099     -0.335334      -6.78687       6.78687       1839.75       1846.54    
  18  0.996052     -0.395608E-02 -0.800677E-01  0.800677E-01   1886.07       1886.15    
  19  0.668265     -0.403070      -8.15780       8.15780       1901.78       1909.94    
  20  0.294619      -1.22207      -24.7337       24.7337       1911.00       1935.73    
  21  0.721551     -0.326352      -6.60509       6.60509       1907.59       1914.19    
  22  0.216610      -1.52966      -30.9590       30.9590       1904.36       1935.32    
  23  0.649086     -0.432191      -8.74718       8.74718       1879.41       1888.16    
  24  0.692922E-01  -2.66942      -54.0269       54.0269       1926.23       1980.26    
  25  0.271271      -1.30464      -26.4047       26.4047       1922.56       1948.97    
  26  0.407239     -0.898355      -18.1820       18.1820       1908.00       1926.19    
  27  0.435034     -0.832331      -16.8457       16.8457       1929.90       1946.75    
  28  0.638725     -0.448281      -9.07284       9.07284       1925.30       1934.37    
  29  0.932325     -0.700735E-01  -1.41823       1.41823       1913.96       1915.38    
  30  0.958672     -0.422065E-01 -0.854224      0.854224       1951.17       1952.02    
  31  0.336870      -1.08806      -22.0214       22.0214       1928.88       1950.90    
  32  0.453036     -0.791783      -16.0250       16.0250       1925.45       1941.48    
  33  0.422569     -0.861402      -17.4341       17.4341       1963.44       1980.88    
  34  0.596674     -0.516385      -10.4512       10.4512       1962.55       1973.00    
  35  0.586088     -0.534286      -10.8135       10.8135       1952.21       1963.03    
  36  0.174805      -1.74409      -35.2988       35.2988       1967.41       2002.71    
  37  0.854432     -0.157318      -3.18399       3.18399       1957.84       1961.02    
  38  0.754323     -0.281935      -5.70613       5.70613       1957.87       1963.58    
  39  0.956897     -0.440598E-01 -0.891734      0.891734       1966.08       1966.98    
  40  0.334431      -1.09533      -22.1685       22.1685       1965.45       1987.62    
  41  0.750609     -0.286871      -5.80602       5.80602       1952.51       1958.32    
  42  0.778602     -0.250255      -5.06494       5.06494       1913.70       1918.77    
  43  0.330765      -1.10635      -22.3915       22.3915       2002.85       2025.24    
  44  0.601104     -0.508987      -10.3015       10.3015       2010.04       2020.34    
  45  0.578570     -0.547197      -11.0748       11.0748       1979.33       1990.41    
  46  0.381025     -0.964891      -19.5286       19.5286       1984.75       2004.28    
  47  0.764260     -0.268847      -5.44123       5.44123       2007.43       2012.87    
  48  0.194556      -1.63704      -33.1323       33.1323       2025.04       2058.17    
  49  0.785702E-01  -2.54376      -51.4836       51.4836       2011.14       2062.63    
  50  0.253837E-01  -3.67365      -74.3515       74.3515       2026.66       2101.01    
  51  0.149049      -1.90348      -38.5248       38.5248       2033.22       2071.75    
  52  0.591675     -0.524797      -10.6215       10.6215       2033.02       2043.64    
  53  0.471206     -0.752459      -15.2291       15.2291       2033.28       2048.51    
  54  0.734409     -0.308689      -6.24761       6.24761       2025.73       2031.98    
  55  0.183368      -1.69626      -34.3309       34.3309       2049.88       2084.21    
  56  0.296126      -1.21697      -24.6305       24.6305       2042.25       2066.88    
  57  0.664218     -0.409144      -8.28074       8.28074       2088.85       2097.13    
  58  0.863102     -0.147223      -2.97967       2.97967       1887.27       1890.25    
loop,thermsimp(1:2)       40   4.94158       34.7826    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367       1945.17         68.51          1.15         39.09          0.45          0.05        109.24
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1945.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       40
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       41
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      366     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091      -5.48666       5.48666       1717.59       1723.07    
   2  0.700395     -0.356110      -7.20738       7.20738       1782.09       1789.30    
   3  0.110610      -2.20174      -44.5614       44.5614       1787.50       1832.07    
   4  0.542261     -0.612007      -12.3865       12.3865       1776.18       1788.57    
   5  0.993402     -0.662023E-02 -0.133988      0.133988       1780.96       1781.09    
   6  0.370923     -0.991761      -20.0724       20.0724       1795.34       1815.41    
   7  0.311008      -1.16794      -23.6381       23.6381       1765.83       1789.47    
   8  0.120775      -2.11383      -42.7821       42.7821       1774.12       1816.90    
   9  0.496739     -0.699690      -14.1611       14.1611       1777.11       1791.27    
  10  0.823539     -0.194144      -3.92932       3.92932       1798.54       1802.47    
  11  0.401420     -0.912746      -18.4732       18.4732       1817.96       1836.43    
  12  0.467810E-01  -3.06228      -61.9780       61.9780       1788.41       1850.39    
  13  0.104633      -2.25729      -45.6857       45.6857       1839.75       1885.44    
  14  0.233534      -1.45443      -29.4364       29.4364       1841.83       1871.27    
  15  0.959269     -0.415834E-01 -0.841612      0.841612       1835.62       1836.46    
  16  0.359845      -1.02208      -20.6861       20.6861       1862.49       1883.18    
  17  0.141753E-01  -4.25626      -86.1430       86.1430       1886.07       1972.22    
  18  0.566935     -0.567510      -11.4859       11.4859       1879.41       1890.90    
  19  0.901077     -0.104164      -2.10820       2.10820       1852.82       1854.93    
  20  0.465285     -0.765104      -15.4851       15.4851       1887.27       1902.75    
  21  0.315152      -1.15470      -23.3702       23.3702       1901.78       1925.15    
  22  0.954826     -0.462256E-01 -0.935568      0.935568       1907.59       1908.52    
  23  0.110663      -2.20127      -44.5518       44.5518       1913.96       1958.51    
  24  0.851067     -0.161264      -3.26385       3.26385       1913.70       1916.97    
  25  0.768372     -0.263481      -5.33263       5.33263       1908.00       1913.34    
  26  0.243081      -1.41436      -28.6255       28.6255       1925.30       1953.92    
  27  0.434279     -0.834069      -16.8809       16.8809       1904.36       1921.24    
  28  0.855138     -0.156492      -3.16727       3.16727       1911.00       1914.16    
  29  0.238302      -1.43422      -29.0274       29.0274       1925.45       1954.48    
  30  0.445547     -0.808452      -16.3624       16.3624       1929.90       1946.27    
  31  0.290285      -1.23689      -25.0336       25.0336       1922.56       1947.60    
  32  0.479492     -0.735029      -14.8764       14.8764       1928.88       1943.75    
  33  0.359712      -1.02245      -20.6936       20.6936       1951.17       1971.86    
  34  0.429040     -0.846204      -17.1265       17.1265       1952.51       1969.64    
  35  0.570900     -0.560541      -11.3449       11.3449       1957.84       1969.19    
  36  0.151312      -1.88841      -38.2199       38.2199       1952.21       1990.43    
  37  0.671837     -0.397739      -8.04991       8.04991       1957.87       1965.92    
  38  0.699384     -0.357556      -7.23663       7.23663       1966.08       1973.32    
  39  0.337756      -1.08543      -21.9682       21.9682       1962.55       1984.52    
  40  0.508282     -0.676718      -13.6962       13.6962       1926.23       1939.93    
  41  0.153085      -1.87676      -37.9841       37.9841       1963.44       2001.43    
  42  0.859571     -0.151322      -3.06263       3.06263       1965.45       1968.52    
  43  0.240559      -1.42479      -28.8366       28.8366       1979.33       2008.17    
  44  0.956907     -0.440496E-01 -0.891527      0.891527       1967.41       1968.30    
  45  0.695010     -0.363829      -7.36360       7.36360       1984.75       1992.11    
  46  0.258459      -1.35302      -27.3840       27.3840       2007.43       2034.81    
  47  0.851968     -0.160207      -3.24245       3.24245       2010.04       2013.28    
  48  0.755235     -0.280726      -5.68166       5.68166       2002.85       2008.53    
  49  0.618135     -0.481049      -9.73603       9.73603       2025.73       2035.47    
  50  0.366071      -1.00493      -20.3389       20.3389       2033.02       2053.36    
  51  0.768800     -0.262924      -5.32137       5.32137       2033.28       2038.61    
  52  0.704229     -0.350652      -7.09690       7.09690       2025.04       2032.14    
  53  0.900469     -0.104839      -2.12186       2.12186       2011.14       2013.26    
  54  0.175085      -1.74249      -35.2665       35.2665       2042.25       2077.52    
  55  0.905870     -0.988595E-01  -2.00083       2.00083       2033.22       2035.22    
  56  0.107963E-01  -4.52856      -91.6542       91.6542       2049.88       2141.54    
  57  0.493411     -0.706413      -14.2972       14.2972       2088.85       2103.15    
  58  0.538221     -0.619486      -12.5379       12.5379       1945.17       1957.71    
loop,thermsimp(1:2)       41   5.48666       7.20738    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368       1906.36         68.56          1.16         38.90          0.64          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1906.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       41
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       42
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      367     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -9.25335       9.25335       1717.59       1726.84    
   2  0.416661     -0.875483      -17.7190       17.7190       1780.96       1798.67    
   3  0.671058E-01  -2.70149      -54.6758       54.6758       1776.18       1830.86    
   4  0.701446     -0.354612      -7.17705       7.17705       1782.09       1789.27    
   5  0.176715      -1.73321      -35.0788       35.0788       1765.83       1800.91    
   6  0.223035      -1.50042      -30.3673       30.3673       1777.11       1807.48    
   7  0.907694E-01  -2.39943      -48.5625       48.5625       1798.54       1847.10    
   8  0.113202      -2.17858      -44.0926       44.0926       1795.34       1839.43    
   9  0.443192     -0.813753      -16.4697       16.4697       1774.12       1790.59    
  10  0.999048     -0.952172E-03 -0.192712E-01  0.192712E-01   1787.50       1787.52    
  11  0.606200     -0.500546      -10.1306       10.1306       1817.96       1828.09    
  12  0.120370      -2.11718      -42.8500       42.8500       1835.62       1878.47    
  13  0.448885     -0.800988      -16.2113       16.2113       1788.41       1804.62    
  14  0.531880     -0.631338      -12.7778       12.7778       1852.82       1865.60    
  15  0.804789     -0.217176      -4.39545       4.39545       1841.83       1846.22    
  16  0.427230     -0.850433      -17.2121       17.2121       1862.49       1879.71    
  17  0.222958      -1.50077      -30.3744       30.3744       1839.75       1870.13    
  18  0.850765     -0.161619      -3.27103       3.27103       1879.41       1882.69    
  19  0.926988     -0.758150E-01  -1.53443       1.53443       1887.27       1888.80    
  20  0.729073     -0.315981      -6.39520       6.39520       1907.59       1913.98    
  21  0.411512     -0.887916      -17.9707       17.9707       1908.00       1925.98    
  22  0.692157     -0.367942      -7.44685       7.44685       1911.00       1918.44    
  23  0.917319     -0.862998E-01  -1.74664       1.74664       1913.70       1915.45    
  24  0.376398     -0.977107      -19.7758       19.7758       1904.36       1924.14    
  25  0.276694      -1.28484      -26.0041       26.0041       1901.78       1927.79    
  26  0.296319      -1.21632      -24.6173       24.6173       1926.23       1950.85    
  27  0.395623     -0.927294      -18.7677       18.7677       1928.88       1947.64    
  28  0.397122     -0.923511      -18.6911       18.6911       1929.90       1948.60    
  29  0.414944     -0.879612      -17.8026       17.8026       1922.56       1940.36    
  30  0.249325      -1.38900      -28.1121       28.1121       1925.30       1953.41    
  31  0.668798     -0.402273      -8.14167       8.14167       1925.45       1933.59    
  32  0.765717     -0.266942      -5.40269       5.40269       1945.17       1950.57    
  33  0.420183     -0.867066      -17.5487       17.5487       1913.96       1931.51    
  34  0.851189     -0.161121      -3.26095       3.26095       1957.87       1961.13    
  35  0.733154     -0.310400      -6.28224       6.28224       1967.41       1973.69    
  36  0.721185E-01  -2.62944      -53.2178       53.2178       1965.45       2018.67    
  37  0.356766      -1.03068      -20.8600       20.8600       1957.84       1978.70    
  38  0.654280     -0.424220      -8.58586       8.58586       1952.51       1961.10    
  39  0.662515     -0.411712      -8.33270       8.33270       1951.17       1959.50    
  40  0.164156      -1.80694      -36.5709       36.5709       1886.07       1922.65    
  41  0.116179      -2.15263      -43.5674       43.5674       1966.08       2009.65    
  42  0.134772      -2.00417      -40.5628       40.5628       1962.55       2003.12    
  43  0.298842      -1.20784      -24.4456       24.4456       1952.21       1976.66    
  44  0.583690     -0.538385      -10.8965       10.8965       1984.75       1995.64    
  45  0.894896     -0.111047      -2.24751       2.24751       1963.44       1965.69    
  46  0.148951      -1.90414      -38.5382       38.5382       1979.33       2017.87    
  47  0.315615      -1.15323      -23.3405       23.3405       2002.85       2026.19    
  48  0.810942     -0.209558      -4.24128       4.24128       2011.14       2015.38    
  49  0.697490     -0.360268      -7.29152       7.29152       2010.04       2017.33    
  50  0.440376     -0.820127      -16.5987       16.5987       2025.04       2041.64    
  51  0.987477     -0.126020E-01 -0.255053      0.255053       2007.43       2007.68    
  52  0.788027     -0.238223      -4.82143       4.82143       2033.22       2038.04    
  53  0.304959      -1.18758      -24.0356       24.0356       2025.73       2049.77    
  54  0.918046     -0.855075E-01  -1.73060       1.73060       2033.28       2035.02    
  55  0.436819     -0.828237      -16.7628       16.7628       2033.02       2049.78    
  56  0.983182     -0.169609E-01 -0.343275      0.343275       2042.25       2042.60    
  57  0.635334     -0.453604      -9.18056       9.18056       2088.85       2098.03    
  58  0.331329      -1.10464      -22.3570       22.3570       1906.36       1928.71    
loop,thermsimp(1:2)       42   9.25335       17.7190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369       2081.50         68.20          1.19         39.57          0.31          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    370       1855.97         68.56          1.17         39.06          0.45          0.05        109.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1855.97
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       42
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       43
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      369     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -36.4037       36.4037       1717.59       1753.99    
   2  0.737067     -0.305077      -6.17450       6.17450       1787.50       1793.68    
   3  0.332012      -1.10258      -22.3154       22.3154       1782.09       1804.40    
   4  0.756847     -0.278594      -5.63851       5.63851       1774.12       1779.76    
   5  0.168413      -1.78134      -36.0528       36.0528       1780.96       1817.01    
   6  0.422244     -0.862172      -17.4496       17.4496       1765.83       1783.28    
   7  0.865590     -0.144344      -2.92141       2.92141       1788.41       1791.33    
   8  0.820021     -0.198425      -4.01596       4.01596       1777.11       1781.13    
   9  0.681904     -0.382867      -7.74891       7.74891       1817.96       1825.71    
  10  0.476378E-02  -5.34671      -108.213       108.213       1776.18       1884.39    
  11  0.891588     -0.114751      -2.32246       2.32246       1795.34       1797.66    
  12  0.583910     -0.538008      -10.8888       10.8888       1841.83       1852.72    
  13  0.224086      -1.49572      -30.2722       30.2722       1798.54       1828.81    
  14  0.550831     -0.596327      -12.0692       12.0692       1852.82       1864.89    
  15  0.109755      -2.20951      -44.7186       44.7186       1839.75       1884.47    
  16  0.173189      -1.75337      -35.4868       35.4868       1835.62       1871.10    
  17  0.822854     -0.194976      -3.94616       3.94616       1862.49       1866.44    
  18  0.792562     -0.232484      -4.70528       4.70528       1879.41       1884.12    
  19  0.383253     -0.959060      -19.4106       19.4106       1887.27       1906.68    
  20  0.422533     -0.861488      -17.4358       17.4358       1907.59       1925.02    
  21  0.811047     -0.209429      -4.23866       4.23866       1913.70       1917.94    
  22  0.860783     -0.149912      -3.03410       3.03410       1911.00       1914.03    
  23  0.751011     -0.286335      -5.79518       5.79518       1886.07       1891.87    
  24  0.358967      -1.02452      -20.7355       20.7355       1904.36       1925.10    
  25  0.877019     -0.131227      -2.65592       2.65592       1908.00       1910.66    
  26  0.441658     -0.817220      -16.5398       16.5398       1901.78       1918.32    
  27  0.259650      -1.34842      -27.2909       27.2909       1906.36       1933.65    
  28  0.106035      -2.24398      -45.4163       45.4163       1913.96       1959.37    
  29  0.608421     -0.496887      -10.0566       10.0566       1925.45       1935.51    
  30  0.143099      -1.94422      -39.3494       39.3494       1922.56       1961.91    
  31  0.242177      -1.41809      -28.7009       28.7009       1928.88       1957.58    
  32  0.517081     -0.659556      -13.3489       13.3489       1929.90       1943.25    
  33  0.492461     -0.708339      -14.3362       14.3362       1945.17       1959.50    
  34  0.839297     -0.175190      -3.54571       3.54571       1926.23       1929.78    
  35  0.824305     -0.193215      -3.91051       3.91051       1925.30       1929.21    
  36  0.742325     -0.297968      -6.03063       6.03063       1951.17       1957.20    
  37  0.158654      -1.84103      -37.2610       37.2610       1952.51       1989.77    
  38  0.702604     -0.352962      -7.14365       7.14365       1957.87       1965.01    
  39  0.324396      -1.12579      -22.7850       22.7850       1963.44       1986.23    
  40  0.628286     -0.464760      -9.40635       9.40635       1967.41       1976.81    
  41  0.896889     -0.108823      -2.20248       2.20248       1952.21       1954.42    
  42  0.325633      -1.12199      -22.7080       22.7080       1957.84       1980.55    
  43  0.833588     -0.182016      -3.68385       3.68385       1984.75       1988.43    
  44  0.292459      -1.22943      -24.8827       24.8827       1962.55       1987.44    
  45  0.625236     -0.469626      -9.50483       9.50483       2007.43       2016.93    
  46  0.613119     -0.489197      -9.90094       9.90094       1966.08       1975.98    
  47  0.521950     -0.650183      -13.1592       13.1592       2011.14       2024.30    
  48  0.999935     -0.646019E-04 -0.130749E-02  0.130749E-02   2010.04       2010.04    
  49  0.971287E-01  -2.33172      -47.1920       47.1920       1979.33       2026.52    
  50  0.982535     -0.176198E-01 -0.356609      0.356609       1965.45       1965.81    
  51  0.930778     -0.717347E-01  -1.45185       1.45185       2002.85       2004.30    
  52  0.566446     -0.568373      -11.5034       11.5034       2033.28       2044.79    
  53  0.671812     -0.397777      -8.05067       8.05067       2033.22       2041.27    
  54  0.814331     -0.205388      -4.15688       4.15688       2025.04       2029.20    
  55  0.593504     -0.521712      -10.5590       10.5590       2042.25       2052.81    
  56  0.338750      -1.08249      -21.9087       21.9087       2025.73       2047.64    
  57  0.584939     -0.536248      -10.8532       10.8532       2033.02       2043.87    
  58  0.576637     -0.550541      -11.1425       11.1425       1855.97       1867.11    
loop,thermsimp(1:2)       43   36.4037       6.17450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371       1804.23         68.29          1.22         39.80          0.24          0.05        109.60
Just calling func    0   0        109.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1804.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       43
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       44
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      370     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -47.4225       47.4225       1717.59       1765.01    
   2  0.509377     -0.674566      -13.6527       13.6527       1774.12       1787.77    
   3  0.960906     -0.398785E-01 -0.807108      0.807108       1777.11       1777.92    
   4  0.145058      -1.93062      -39.0741       39.0741       1765.83       1804.91    
   5  0.584668     -0.536711      -10.8626       10.8626       1788.41       1799.27    
   6  0.137819      -1.98182      -40.1103       40.1103       1787.50       1827.61    
   7  0.829899     -0.186451      -3.77361       3.77361       1795.34       1799.11    
   8  0.249142      -1.38973      -28.1270       28.1270       1782.09       1810.22    
   9  0.471049     -0.752793      -15.2359       15.2359       1780.96       1796.19    
  10  0.744784E-01  -2.59725      -52.5661       52.5661       1817.96       1870.52    
  11  0.233158      -1.45604      -29.4690       29.4690       1798.54       1828.01    
  12  0.714243E-01  -2.63912      -53.4135       53.4135       1841.83       1895.24    
  13  0.749743     -0.288025      -5.82939       5.82939       1852.82       1858.65    
  14  0.873534     -0.135209      -2.73651       2.73651       1862.49       1865.23    
  15  0.265951      -1.32444      -26.8056       26.8056       1855.97       1882.78    
  16  0.328438      -1.11341      -22.5344       22.5344       1835.62       1858.15    
  17  0.988010     -0.120622E-01 -0.244129      0.244129       1879.41       1879.66    
  18  0.737788     -0.304099      -6.15470       6.15470       1776.18       1782.33    
  19  0.171086E-01  -4.06818      -82.3365       82.3365       1839.75       1922.09    
  20  0.452693     -0.792540      -16.0404       16.0404       1886.07       1902.11    
  21  0.922976     -0.801523E-01  -1.62221       1.62221       1887.27       1888.89    
  22  0.323108      -1.12977      -22.8656       22.8656       1908.00       1930.87    
  23  0.740032     -0.301062      -6.09323       6.09323       1911.00       1917.09    
  24  0.606229     -0.500498      -10.1297       10.1297       1913.70       1923.83    
  25  0.813501     -0.206408      -4.17753       4.17753       1901.78       1905.96    
  26  0.457664     -0.781621      -15.8193       15.8193       1907.59       1923.41    
  27  0.848286     -0.164537      -3.33010       3.33010       1904.36       1907.69    
  28  0.430827E-01  -3.14463      -63.6448       63.6448       1925.30       1988.94    
  29  0.215038      -1.53694      -31.1064       31.1064       1926.23       1957.34    
  30  0.955068     -0.459730E-01 -0.930455      0.930455       1906.36       1907.29    
  31  0.100248      -2.30011      -46.5523       46.5523       1925.45       1972.01    
  32  0.272794      -1.29904      -26.2914       26.2914       1929.90       1956.20    
  33  0.796201E-01  -2.53049      -51.2150       51.2150       1952.21       2003.43    
  34  0.143803      -1.93931      -39.2500       39.2500       1951.17       1990.42    
  35  0.151473      -1.88734      -38.1983       38.1983       1928.88       1967.07    
  36  0.212508      -1.54878      -31.3460       31.3460       1913.96       1945.30    
  37  0.570089     -0.561962      -11.3736       11.3736       1945.17       1956.54    
  38  0.811663     -0.208669      -4.22330       4.22330       1922.56       1926.79    
  39  0.652193E-01  -2.73000      -55.2529       55.2529       1957.87       2013.12    
  40  0.753919     -0.282470      -5.71696       5.71696       1965.45       1971.17    
  41  0.915721     -0.880434E-01  -1.78193       1.78193       1966.08       1967.87    
  42  0.689805     -0.371347      -7.51575       7.51575       1967.41       1974.92    
  43  0.296032      -1.21729      -24.6369       24.6369       1957.84       1982.48    
  44  0.685645     -0.377395      -7.63816       7.63816       1963.44       1971.08    
  45  0.931075     -0.714153E-01  -1.44539       1.44539       1962.55       1964.00    
  46  0.273544      -1.29629      -26.2359       26.2359       1984.75       2010.98    
  47  0.269804E-01  -3.61265      -73.1169       73.1169       1952.51       2025.63    
  48  0.684598     -0.378923      -7.66908       7.66908       2002.85       2010.52    
  49  0.724056     -0.322886      -6.53494       6.53494       2010.04       2016.57    
  50  0.655515     -0.422333      -8.54767       8.54767       2007.43       2015.98    
  51  0.338921E-01  -3.38457      -68.5009       68.5009       2011.14       2079.64    
  52  0.503484     -0.686204      -13.8882       13.8882       1979.33       1993.22    
  53  0.283419      -1.26083      -25.5182       25.5182       2025.04       2050.56    
  54  0.495421     -0.702347      -14.2149       14.2149       2033.22       2047.44    
  55  0.966701     -0.338659E-01 -0.685417      0.685417       2033.02       2033.70    
  56  0.491710     -0.709867      -14.3671       14.3671       2033.28       2047.65    
  57  0.456917     -0.783254      -15.8524       15.8524       2025.73       2041.58    
  58  0.970984E-01  -2.33203      -47.1983       47.1983       1804.23       1851.43    
loop,thermsimp(1:2)       44   47.4225       13.6527    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372       1796.75         68.37          1.17         39.26          0.47          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    373       2430.19         68.50          1.15         39.34          0.43          0.05        109.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1796.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       44
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       45
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      372     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.820794      0.820794       1717.59       1718.41    
   2  0.700631     -0.355774      -7.20058       7.20058       1777.11       1784.31    
   3  0.900697     -0.104586      -2.11674       2.11674       1776.18       1778.30    
   4  0.217613      -1.52504      -30.8655       30.8655       1774.12       1804.98    
   5  0.247850      -1.39493      -28.2323       28.2323       1780.96       1809.19    
   6  0.910358     -0.939170E-01  -1.90080       1.90080       1795.34       1797.24    
   7  0.983752     -0.163817E-01 -0.331553      0.331553       1788.41       1788.74    
   8  0.161223      -1.82497      -36.9358       36.9358       1765.83       1802.77    
   9  0.527720     -0.639190      -12.9367       12.9367       1782.09       1795.02    
  10  0.733734     -0.309609      -6.26623       6.26623       1787.50       1793.77    
  11  0.406982     -0.898986      -18.1947       18.1947       1798.54       1816.73    
  12  0.731735     -0.312337      -6.32145       6.32145       1804.23       1810.55    
  13  0.840576E-01  -2.47625      -50.1173       50.1173       1835.62       1885.73    
  14  0.505764     -0.681685      -13.7967       13.7967       1852.82       1866.62    
  15  0.130210      -2.03861      -41.2597       41.2597       1862.49       1903.75    
  16  0.565496     -0.570053      -11.5374       11.5374       1817.96       1829.49    
  17  0.944307     -0.573044E-01  -1.15979       1.15979       1879.41       1880.57    
  18  0.131761      -2.02676      -41.0200       41.0200       1855.97       1896.99    
  19  0.133275      -2.01534      -40.7888       40.7888       1887.27       1928.05    
  20  0.890936     -0.115482      -2.33726       2.33726       1841.83       1844.17    
  21  0.650633     -0.429809      -8.69897       8.69897       1886.07       1894.77    
  22  0.132428      -2.02172      -40.9179       40.9179       1901.78       1942.70    
  23  0.731494     -0.312666      -6.32810       6.32810       1906.36       1912.68    
  24  0.171092      -1.76556      -35.7334       35.7334       1904.36       1940.10    
  25  0.257579      -1.35643      -27.4530       27.4530       1911.00       1938.45    
  26  0.324882      -1.12429      -22.7548       22.7548       1839.75       1862.51    
  27  0.526591     -0.641331      -12.9800       12.9800       1907.59       1920.57    
  28  0.282402E-01  -3.56701      -72.1932       72.1932       1913.70       1985.90    
  29  0.983943     -0.161877E-01 -0.327625      0.327625       1922.56       1922.89    
  30  0.629559     -0.462735      -9.36538       9.36538       1908.00       1917.37    
  31  0.202469      -1.59717      -32.3254       32.3254       1913.96       1946.28    
  32  0.737565     -0.304401      -6.16081       6.16081       1929.90       1936.07    
  33  0.388307     -0.945960      -19.1454       19.1454       1945.17       1964.31    
  34  0.585207E-01  -2.83837      -57.4463       57.4463       1926.23       1983.68    
  35  0.900578     -0.104719      -2.11943       2.11943       1962.55       1964.67    
  36  0.420335     -0.866702      -17.5413       17.5413       1928.88       1946.42    
  37  0.730143     -0.314515      -6.36551       6.36551       1966.08       1972.45    
  38  0.448331     -0.802224      -16.2363       16.2363       1963.44       1979.68    
  39  0.344846      -1.06466      -21.5478       21.5478       1965.45       1987.00    
  40  0.854608     -0.157113      -3.17983       3.17983       1925.45       1928.63    
  41  0.537300     -0.621198      -12.5725       12.5725       1967.41       1979.98    
  42  0.164937      -1.80219      -36.4748       36.4748       1957.84       1994.32    
  43  0.595120E-01  -2.82158      -57.1064       57.1064       1925.30       1982.40    
  44  0.398267E-01  -3.22322      -65.2352       65.2352       1951.17       2016.40    
  45  0.183210      -1.69712      -34.3483       34.3483       1979.33       2013.68    
  46  0.184498      -1.69011      -34.2065       34.2065       1952.21       1986.42    
  47  0.306635      -1.18210      -23.9246       23.9246       2002.85       2026.78    
  48  0.868924     -0.140500      -2.84361       2.84361       1984.75       1987.59    
  49  0.841633     -0.172412      -3.48947       3.48947       1957.87       1961.36    
  50  0.988826     -0.112370E-01 -0.227427      0.227427       2007.43       2007.65    
  51  0.244835      -1.40717      -28.4799       28.4799       2010.04       2038.52    
  52  0.338105      -1.08440      -21.9473       21.9473       1952.51       1974.46    
  53  0.609151     -0.495689      -10.0323       10.0323       2033.02       2043.05    
  54  0.529733E-01  -2.93797      -59.4620       59.4620       2025.73       2085.19    
  55  0.319654      -1.14052      -23.0831       23.0831       2033.22       2056.30    
  56  0.997722     -0.228025E-02 -0.461503E-01  0.461503E-01   2033.28       2033.33    
  57  0.703037     -0.352346      -7.13119       7.13119       2025.04       2032.17    
  58  0.794182E-01  -2.53303      -51.2664       51.2664       1796.75       1848.01    
loop,thermsimp(1:2)       45  0.820794       7.20058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374       1950.71         68.39          1.17         39.53          0.44          0.05        109.58
Just calling func    0   0        109.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1950.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       45
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       46
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      373     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578      -8.14785       8.14785       1717.59       1725.74    
   2  0.484900     -0.723813      -14.6494       14.6494       1776.18       1790.83    
   3  0.814670     -0.204972      -4.14847       4.14847       1777.11       1781.26    
   4  0.111039      -2.19788      -44.4832       44.4832       1788.41       1832.89    
   5  0.717773     -0.331602      -6.71135       6.71135       1787.50       1794.22    
   6  0.751748     -0.285354      -5.77533       5.77533       1782.09       1787.86    
   7  0.983096E-01  -2.31963      -46.9475       46.9475       1795.34       1842.29    
   8  0.150083      -1.89656      -38.3849       38.3849       1765.83       1804.22    
   9  0.733895     -0.309390      -6.26179       6.26179       1774.12       1780.38    
  10  0.982051     -0.181120E-01 -0.366572      0.366572       1780.96       1781.32    
  11  0.449336E-01  -3.10257      -62.7934       62.7934       1804.23       1867.03    
  12  0.929425     -0.731895E-01  -1.48130       1.48130       1798.54       1800.02    
  13  0.692017E-01  -2.67073      -54.0533       54.0533       1817.96       1872.01    
  14  0.644652     -0.439045      -8.88591       8.88591       1841.83       1850.71    
  15  0.661075     -0.413889      -8.37676       8.37676       1796.75       1805.12    
  16  0.410338     -0.890775      -18.0285       18.0285       1839.75       1857.78    
  17  0.967767     -0.327642E-01 -0.663121      0.663121       1852.82       1853.48    
  18  0.496474     -0.700224      -14.1719       14.1719       1879.41       1893.59    
  19  0.748701     -0.289415      -5.85752       5.85752       1835.62       1841.47    
  20  0.428668     -0.847073      -17.1440       17.1440       1886.07       1903.22    
  21  0.922992     -0.801352E-01  -1.62187       1.62187       1855.97       1857.59    
  22  0.844924     -0.168508      -3.41047       3.41047       1862.49       1865.90    
  23  0.680136     -0.385463      -7.80145       7.80145       1906.36       1914.16    
  24  0.136189      -1.99371      -40.3510       40.3510       1908.00       1948.36    
  25  0.660667     -0.414506      -8.38926       8.38926       1907.59       1915.98    
  26  0.473941     -0.746672      -15.1120       15.1120       1922.56       1937.67    
  27  0.792449     -0.232627      -4.70817       4.70817       1887.27       1891.97    
  28  0.960023     -0.407984E-01 -0.825725      0.825725       1925.45       1926.28    
  29  0.951587     -0.496238E-01  -1.00434       1.00434       1929.90       1930.91    
  30  0.197021      -1.62444      -32.8774       32.8774       1911.00       1943.87    
  31  0.664966     -0.408020      -8.25798       8.25798       1904.36       1912.62    
  32  0.832360     -0.183491      -3.71370       3.71370       1901.78       1905.50    
  33  0.589221     -0.528954      -10.7056       10.7056       1913.96       1924.66    
  34  0.163930      -1.80831      -36.5988       36.5988       1928.88       1965.47    
  35  0.967185E-01  -2.33595      -47.2777       47.2777       1957.87       2005.15    
  36  0.386895     -0.949603      -19.2192       19.2192       1945.17       1964.39    
  37  0.709158     -0.343678      -6.95575       6.95575       1962.55       1969.51    
  38  0.801784     -0.220916      -4.47115       4.47115       1966.08       1970.55    
  39  0.631968     -0.458917      -9.28809       9.28809       1952.51       1961.80    
  40  0.866237     -0.143597      -2.90628       2.90628       1963.44       1966.35    
  41  0.377203     -0.974972      -19.7326       19.7326       1967.41       1987.14    
  42  0.261898      -1.33980      -27.1165       27.1165       1925.30       1952.41    
  43  0.306694      -1.18191      -23.9208       23.9208       1926.23       1950.16    
  44  0.603055     -0.505747      -10.2359       10.2359       1913.70       1923.94    
  45  0.146094      -1.92351      -38.9302       38.9302       1952.21       1991.14    
  46  0.887903     -0.118893      -2.40630       2.40630       1965.45       1967.86    
  47  0.375387     -0.979798      -19.8303       19.8303       1984.75       2004.58    
  48  0.788597     -0.237500      -4.80679       4.80679       1957.84       1962.65    
  49  0.335228      -1.09295      -22.1203       22.1203       2007.43       2029.55    
  50  0.609447     -0.495204      -10.0225       10.0225       1979.33       1989.35    
  51  0.735916     -0.306639      -6.20611       6.20611       1951.17       1957.37    
  52  0.936649     -0.654462E-01  -1.32458       1.32458       2002.85       2004.18    
  53  0.594667     -0.519755      -10.5194       10.5194       2025.04       2035.56    
  54  0.521912     -0.650256      -13.1606       13.1606       2033.28       2046.45    
  55  0.735402     -0.307338      -6.22026       6.22026       2010.04       2016.26    
  56  0.909945     -0.943713E-01  -1.91000       1.91000       2033.02       2034.93    
  57  0.232597      -1.45845      -29.5177       29.5177       2033.22       2062.74    
  58  0.253136      -1.37383      -27.8052       27.8052       1950.71       1978.51    
loop,thermsimp(1:2)       46   8.14785       14.6494    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375       1910.38         68.38          1.20         39.29          0.45          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1910.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       46
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       47
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      374     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -18.0974       18.0974       1717.59       1735.69    
   2  0.431368     -0.840794      -17.0170       17.0170       1774.12       1791.14    
   3  0.292375      -1.22972      -24.8885       24.8885       1777.11       1802.00    
   4  0.336431      -1.08936      -22.0478       22.0478       1780.96       1803.00    
   5  0.370622     -0.992574      -20.0889       20.0889       1782.09       1802.18    
   6  0.398679     -0.919597      -18.6119       18.6119       1776.18       1794.79    
   7  0.672261     -0.397108      -8.03714       8.03714       1787.50       1795.54    
   8  0.451252     -0.795728      -16.1049       16.1049       1798.54       1814.64    
   9  0.527060     -0.640440      -12.9620       12.9620       1765.83       1778.80    
  10  0.131951      -2.02533      -40.9909       40.9909       1796.75       1837.74    
  11  0.903524     -0.101452      -2.05331       2.05331       1788.41       1790.46    
  12  0.881507E-01  -2.42871      -49.1550       49.1550       1835.62       1884.77    
  13  0.464884     -0.765968      -15.5026       15.5026       1795.34       1810.84    
  14  0.985345     -0.147637E-01 -0.298804      0.298804       1841.83       1842.13    
  15  0.587696     -0.531546      -10.7580       10.7580       1852.82       1863.58    
  16  0.581244     -0.542585      -10.9815       10.9815       1855.97       1866.95    
  17  0.137299      -1.98559      -40.1867       40.1867       1839.75       1879.94    
  18  0.330005      -1.10865      -22.4381       22.4381       1862.49       1884.93    
  19  0.911104     -0.930980E-01  -1.88423       1.88423       1804.23       1806.12    
  20  0.487848     -0.717751      -14.5267       14.5267       1817.96       1832.48    
  21  0.518423     -0.656964      -13.2964       13.2964       1887.27       1900.56    
  22  0.645499     -0.437732      -8.85933       8.85933       1879.41       1888.27    
  23  0.914509     -0.893680E-01  -1.80873       1.80873       1886.07       1887.88    
  24  0.763582E-01  -2.57232      -52.0616       52.0616       1901.78       1953.85    
  25  0.708063     -0.345222      -6.98701       6.98701       1904.36       1911.35    
  26  0.719838     -0.328729      -6.65319       6.65319       1906.36       1913.01    
  27  0.113625E-01  -4.47744      -90.6196       90.6196       1907.59       1998.21    
  28  0.272258      -1.30101      -26.3313       26.3313       1913.70       1940.04    
  29  0.211076      -1.55554      -31.4827       31.4827       1913.96       1945.44    
  30  0.931648     -0.708004E-01  -1.43294       1.43294       1925.45       1926.89    
  31  0.572966     -0.556929      -11.2718       11.2718       1929.90       1941.18    
  32  0.116283      -2.15173      -43.5491       43.5491       1922.56       1966.11    
  33  0.247808      -1.39510      -28.2357       28.2357       1911.00       1939.23    
  34  0.294404      -1.22280      -24.7485       24.7485       1908.00       1932.75    
  35  0.252764E-01  -3.67788      -74.4373       74.4373       1926.23       2000.67    
  36  0.408562     -0.895111      -18.1163       18.1163       1925.30       1943.41    
  37  0.753478     -0.283056      -5.72881       5.72881       1951.17       1956.90    
  38  0.680565     -0.384832      -7.78867       7.78867       1952.51       1960.30    
  39  0.973188     -0.271778E-01 -0.550055      0.550055       1957.84       1958.39    
  40  0.986871     -0.132158E-01 -0.267477      0.267477       1945.17       1945.44    
  41  0.363246      -1.01267      -20.4957       20.4957       1928.88       1949.37    
  42  0.138088      -1.97986      -40.0707       40.0707       1963.44       2003.51    
  43  0.929547E-01  -2.37564      -48.0810       48.0810       1965.45       2013.53    
  44  0.781724     -0.246253      -4.98396       4.98396       1962.55       1967.54    
  45  0.732428     -0.311390      -6.30228       6.30228       1966.08       1972.39    
  46  0.294929      -1.22102      -24.7125       24.7125       1950.71       1975.42    
  47  0.406491     -0.900193      -18.2192       18.2192       1967.41       1985.63    
  48  0.721836E-01  -2.62854      -53.1995       53.1995       1979.33       2032.53    
  49  0.982586     -0.175676E-01 -0.355553      0.355553       1952.21       1952.57    
  50  0.211502E-01  -3.85611      -78.0444       78.0444       2002.85       2080.90    
  51  0.790632     -0.234923      -4.75464       4.75464       1984.75       1989.50    
  52  0.120538      -2.11579      -42.8218       42.8218       1957.87       2000.69    
  53  0.586949     -0.532817      -10.7838       10.7838       2010.04       2020.82    
  54  0.660552     -0.414680      -8.39277       8.39277       2007.43       2015.82    
  55  0.627691     -0.465708      -9.42553       9.42553       2033.02       2042.44    
  56  0.470013     -0.754996      -15.2805       15.2805       2025.04       2040.32    
  57  0.735726     -0.306897      -6.21135       6.21135       2033.28       2039.50    
  58  0.320562      -1.13768      -23.0257       23.0257       1910.38       1933.41    
loop,thermsimp(1:2)       47   18.0974       17.0170    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376       1858.79         68.56          1.25         39.16          0.29          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1858.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       47
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       48
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      375     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711      -4.18365       4.18365       1717.59       1721.77    
   2  0.101223E-01  -4.59302      -92.9588       92.9588       1765.83       1858.79    
   3  0.618937E-01  -2.78234      -56.3122       56.3122       1788.41       1844.72    
   4  0.206078      -1.57950      -31.9678       31.9678       1774.12       1806.09    
   5  0.867609     -0.142014      -2.87424       2.87424       1776.18       1779.05    
   6  0.578282     -0.547694      -11.0849       11.0849       1787.50       1798.59    
   7  0.531864     -0.631367      -12.7783       12.7783       1777.11       1789.89    
   8  0.304055      -1.19055      -24.0957       24.0957       1782.09       1806.18    
   9  0.540739     -0.614819      -12.4434       12.4434       1780.96       1793.40    
  10  0.476481     -0.741327      -15.0038       15.0038       1804.23       1819.24    
  11  0.610971     -0.492705      -9.97194       9.97194       1795.34       1805.31    
  12  0.735015     -0.307865      -6.23093       6.23093       1798.54       1804.77    
  13  0.961674     -0.390799E-01 -0.790944      0.790944       1817.96       1818.75    
  14  0.902502     -0.102585      -2.07623       2.07623       1796.75       1798.82    
  15  0.759072     -0.275659      -5.57910       5.57910       1841.83       1847.41    
  16  0.380028E-01  -3.27009      -66.1840       66.1840       1852.82       1919.00    
  17  0.413373     -0.883405      -17.8794       17.8794       1855.97       1873.85    
  18  0.260354      -1.34571      -27.2361       27.2361       1839.75       1866.99    
  19  0.170660      -1.76808      -35.7845       35.7845       1835.62       1871.40    
  20  0.563245     -0.574040      -11.6181       11.6181       1862.49       1874.11    
  21  0.861075     -0.149573      -3.02724       3.02724       1886.07       1889.10    
  22  0.797631     -0.226109      -4.57625       4.57625       1879.41       1883.99    
  23  0.370521E-01  -3.29543      -66.6967       66.6967       1887.27       1953.96    
  24  0.703530     -0.351645      -7.11700       7.11700       1904.36       1911.48    
  25  0.791216E-01  -2.53677      -51.3421       51.3421       1906.36       1957.70    
  26  0.136780      -1.98938      -40.2634       40.2634       1925.45       1965.72    
  27  0.409465     -0.892903      -18.0716       18.0716       1908.00       1926.08    
  28  0.476542     -0.741200      -15.0013       15.0013       1910.38       1925.38    
  29  0.169904      -1.77252      -35.8744       35.8744       1911.00       1946.87    
  30  0.483026     -0.727684      -14.7277       14.7277       1913.70       1928.43    
  31  0.740952     -0.299820      -6.06810       6.06810       1929.90       1935.97    
  32  0.367240      -1.00174      -20.2744       20.2744       1925.30       1945.57    
  33  0.704436     -0.350358      -7.09096       7.09096       1945.17       1952.26    
  34  0.703774     -0.351299      -7.10999       7.10999       1913.96       1921.07    
  35  0.547709     -0.602012      -12.1842       12.1842       1928.88       1941.06    
  36  0.236071      -1.44362      -29.2177       29.2177       1952.21       1981.43    
  37  0.512555     -0.668347      -13.5268       13.5268       1901.78       1915.31    
  38  0.894555     -0.111428      -2.25522       2.25522       1951.17       1953.42    
  39  0.100347      -2.29912      -46.5323       46.5323       1957.84       2004.37    
  40  0.689153     -0.372292      -7.53487       7.53487       1952.51       1960.05    
  41  0.188659      -1.66781      -33.7551       33.7551       1922.56       1956.32    
  42  0.623666     -0.472140      -9.55571       9.55571       1962.55       1972.11    
  43  0.610480     -0.493510      -9.98823       9.98823       1966.08       1976.07    
  44  0.724857     -0.321780      -6.51256       6.51256       1950.71       1957.22    
  45  0.320963      -1.13643      -23.0004       23.0004       1967.41       1990.41    
  46  0.287938      -1.24501      -25.1979       25.1979       1984.75       2009.94    
  47  0.935911     -0.662348E-01  -1.34054       1.34054       1907.59       1908.93    
  48  0.600810     -0.509476      -10.3114       10.3114       1926.23       1936.55    
  49  0.200068      -1.60910      -32.5668       32.5668       1957.87       1990.44    
  50  0.240600E-01  -3.72720      -75.4355       75.4355       1963.44       2038.88    
  51  0.953574     -0.475383E-01 -0.962135      0.962135       1965.45       1966.42    
  52  0.605754     -0.501281      -10.1455       10.1455       2007.43       2017.57    
  53  0.107166      -2.23338      -45.2017       45.2017       2010.04       2055.24    
  54  0.398218     -0.920755      -18.6353       18.6353       1979.33       1997.97    
  55  0.471444     -0.751956      -15.2190       15.2190       2033.28       2048.50    
  56  0.892797E-02  -4.71857      -95.4998       95.4998       2025.04       2120.54    
  57  0.246368      -1.40093      -28.3536       28.3536       2033.02       2061.37    
  58  0.900252E-01  -2.40767      -48.7291       48.7291       1858.79       1907.52    
loop,thermsimp(1:2)       48   4.18365       92.9588    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377       2070.91         68.50          1.16         39.05          0.56          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2070.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       48
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       49
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      376     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735      -2.11974       2.11974       1717.59       1719.71    
   2  0.337202      -1.08707      -22.0014       22.0014       1776.18       1798.18    
   3  0.201324      -1.60284      -32.4401       32.4401       1777.11       1809.55    
   4  0.305897      -1.18451      -23.9735       23.9735       1780.96       1804.93    
   5  0.333562      -1.09793      -22.2211       22.2211       1787.50       1809.73    
   6  0.708340     -0.344831      -6.97909       6.97909       1796.75       1803.73    
   7  0.929963     -0.726100E-01  -1.46957       1.46957       1798.54       1800.01    
   8  0.954883     -0.461669E-01 -0.934380      0.934380       1795.34       1796.28    
   9  0.709141     -0.343701      -6.95621       6.95621       1774.12       1781.08    
  10  0.904936     -0.998906E-01  -2.02170       2.02170       1782.09       1784.11    
  11  0.764543     -0.268477      -5.43375       5.43375       1817.96       1823.39    
  12  0.297182      -1.21341      -24.5584       24.5584       1804.23       1828.79    
  13  0.472241     -0.750266      -15.1848       15.1848       1788.41       1803.59    
  14  0.601817     -0.507801      -10.2775       10.2775       1841.83       1852.11    
  15  0.274906      -1.29132      -26.1353       26.1353       1765.83       1791.97    
  16  0.979328     -0.208884E-01 -0.422765      0.422765       1839.75       1840.18    
  17  0.634279     -0.455267      -9.21422       9.21422       1835.62       1844.83    
  18  0.238460E-01  -3.73614      -75.6163       75.6163       1855.97       1931.59    
  19  0.302486      -1.19572      -24.2003       24.2003       1862.49       1886.69    
  20  0.454285     -0.789030      -15.9693       15.9693       1879.41       1895.38    
  21  0.850435     -0.162007      -3.27888       3.27888       1886.07       1889.35    
  22  0.562689     -0.575029      -11.6381       11.6381       1858.79       1870.43    
  23  0.351622      -1.04520      -21.1539       21.1539       1907.59       1928.74    
  24  0.978081     -0.221628E-01 -0.448556      0.448556       1904.36       1904.81    
  25  0.284594      -1.25669      -25.4344       25.4344       1901.78       1927.22    
  26  0.883683E-01  -2.42624      -49.1051       49.1051       1852.82       1901.93    
  27  0.217395      -1.52604      -30.8857       30.8857       1913.96       1944.84    
  28  0.405933     -0.901568      -18.2470       18.2470       1910.38       1928.63    
  29  0.951690     -0.495156E-01  -1.00215       1.00215       1908.00       1909.01    
  30  0.570178     -0.561806      -11.3705       11.3705       1913.70       1925.08    
  31  0.326664      -1.11882      -22.6440       22.6440       1929.90       1952.55    
  32  0.383874E-01  -3.26003      -65.9802       65.9802       1926.23       1992.21    
  33  0.630130     -0.461829      -9.34704       9.34704       1928.88       1938.22    
  34  0.902033     -0.103105      -2.08675       2.08675       1925.30       1927.38    
  35  0.192240      -1.64901      -33.3746       33.3746       1911.00       1944.37    
  36  0.836744     -0.178237      -3.60736       3.60736       1945.17       1948.78    
  37  0.481446     -0.730962      -14.7941       14.7941       1951.17       1965.96    
  38  0.801468     -0.221310      -4.47913       4.47913       1887.27       1891.75    
  39  0.929206     -0.734244E-01  -1.48605       1.48605       1922.56       1924.05    
  40  0.366038      -1.00502      -20.3407       20.3407       1950.71       1971.05    
  41  0.896697     -0.109037      -2.20682       2.20682       1906.36       1908.56    
  42  0.175481      -1.74022      -35.2207       35.2207       1952.51       1987.73    
  43  0.444632E-01  -3.11309      -63.0064       63.0064       1925.45       1988.46    
  44  0.469791     -0.755467      -15.2900       15.2900       1965.45       1980.74    
  45  0.475427     -0.743541      -15.0487       15.0487       1962.55       1977.60    
  46  0.568468     -0.564810      -11.4313       11.4313       1966.08       1977.51    
  47  0.684504     -0.379060      -7.67186       7.67186       1952.21       1959.89    
  48  0.207720      -1.57157      -31.8072       31.8072       1967.41       1999.22    
  49  0.332731      -1.10042      -22.2716       22.2716       1957.87       1980.14    
  50  0.109337E-01  -4.51591      -91.3982       91.3982       1979.33       2070.73    
  51  0.387975     -0.946815      -19.1627       19.1627       1957.84       1977.00    
  52  0.583841     -0.538126      -10.8912       10.8912       1984.75       1995.64    
  53  0.952086     -0.491003E-01 -0.993749      0.993749       2007.43       2008.42    
  54  0.596262     -0.517074      -10.4652       10.4652       1963.44       1973.91    
  55  0.767710     -0.264344      -5.35010       5.35010       2033.28       2038.63    
  56  0.321305E-01  -3.43795      -69.5812       69.5812       2010.04       2079.62    
  57  0.882163     -0.125378      -2.53755       2.53755       2033.02       2035.55    
  58  0.688790     -0.372818      -7.54553       7.54553       2070.91       2078.46    
loop,thermsimp(1:2)       49   2.11974       22.0014    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378       1840.67         68.54          1.15         39.09          0.60          0.05        109.42
Just calling func    0   0        109.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1840.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       49
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       50
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      377     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -22.6537       22.6537       1717.59       1740.24    
   2  0.656045     -0.421526      -8.53133       8.53133       1774.12       1782.65    
   3  0.702016     -0.353799      -7.16059       7.16059       1782.09       1789.25    
   4  0.659850     -0.415743      -8.41429       8.41429       1765.83       1774.25    
   5  0.587501     -0.531877      -10.7647       10.7647       1795.34       1806.11    
   6  0.118734      -2.13087      -43.1270       43.1270       1776.18       1819.31    
   7  0.484942     -0.723727      -14.6476       14.6476       1798.54       1813.19    
   8  0.809010     -0.211944      -4.28957       4.28957       1788.41       1792.70    
   9  0.107401      -2.23119      -45.1574       45.1574       1796.75       1841.91    
  10  0.912046     -0.920651E-01  -1.86332       1.86332       1780.96       1782.82    
  11  0.752441     -0.284433      -5.75668       5.75668       1777.11       1782.87    
  12  0.389912     -0.941833      -19.0619       19.0619       1787.50       1806.57    
  13  0.805927     -0.215762      -4.36684       4.36684       1817.96       1822.32    
  14  0.537328     -0.621147      -12.5715       12.5715       1804.23       1816.80    
  15  0.276300      -1.28627      -26.0330       26.0330       1839.75       1865.79    
  16  0.618485     -0.480483      -9.72457       9.72457       1835.62       1845.34    
  17  0.130066      -2.03972      -41.2821       41.2821       1841.83       1883.11    
  18  0.885305     -0.121824      -2.46561       2.46561       1858.79       1861.26    
  19  0.513359     -0.666781      -13.4951       13.4951       1862.49       1875.99    
  20  0.235519      -1.44596      -29.2651       29.2651       1886.07       1915.34    
  21  0.693842     -0.365511      -7.39764       7.39764       1887.27       1894.66    
  22  0.445925     -0.807605      -16.3452       16.3452       1879.41       1895.76    
  23  0.946501     -0.549828E-01  -1.11281       1.11281       1852.82       1853.93    
  24  0.108015      -2.22549      -45.0420       45.0420       1904.36       1949.41    
  25  0.988375     -0.116930E-01 -0.236657      0.236657       1906.36       1906.59    
  26  0.931439     -0.710246E-01  -1.43748       1.43748       1908.00       1909.44    
  27  0.915176     -0.886393E-01  -1.79398       1.79398       1922.56       1924.36    
  28  0.670330     -0.399985      -8.09535       8.09535       1913.70       1921.80    
  29  0.172595      -1.75681      -35.5563       35.5563       1901.78       1937.34    
  30  0.496295     -0.700585      -14.1793       14.1793       1925.30       1939.48    
  31  0.627359     -0.466236      -9.43623       9.43623       1910.38       1919.82    
  32  0.914384     -0.895052E-01  -1.81151       1.81151       1907.59       1909.40    
  33  0.197109      -1.62400      -32.8684       32.8684       1855.97       1888.84    
  34  0.830736     -0.185444      -3.75322       3.75322       1928.88       1932.63    
  35  0.554634     -0.589446      -11.9299       11.9299       1911.00       1922.93    
  36  0.386467E-01  -3.25329      -65.8439       65.8439       1913.96       1979.80    
  37  0.259980      -1.34715      -27.2652       27.2652       1945.17       1972.43    
  38  0.876870     -0.131396      -2.65935       2.65935       1929.90       1932.56    
  39  0.651025     -0.429207      -8.68680       8.68680       1952.21       1960.90    
  40  0.171053      -1.76578      -35.7379       35.7379       1951.17       1986.91    
  41  0.708910     -0.344027      -6.96283       6.96283       1950.71       1957.67    
  42  0.501487     -0.690177      -13.9686       13.9686       1963.44       1977.41    
  43  0.766040     -0.266521      -5.39417       5.39417       1957.84       1963.23    
  44  0.189113      -1.66541      -33.7065       33.7065       1966.08       1999.79    
  45  0.250338      -1.38494      -28.0301       28.0301       1962.55       1990.58    
  46  0.830098     -0.186211      -3.76876       3.76876       1957.87       1961.64    
  47  0.337228      -1.08700      -21.9999       21.9999       1965.45       1987.45    
  48  0.290155      -1.23734      -25.0427       25.0427       1952.51       1977.55    
  49  0.382897     -0.959988      -19.4294       19.4294       1925.45       1944.88    
  50  0.484934     -0.723743      -14.6479       14.6479       1926.23       1940.88    
  51  0.867083     -0.142620      -2.88652       2.88652       1984.75       1987.63    
  52  0.151990E-02  -6.48911      -131.334       131.334       1967.41       2098.74    
  53  0.964961     -0.356680E-01 -0.721891      0.721891       2007.43       2008.15    
  54  0.128257      -2.05372      -41.5656       41.5656       2033.02       2074.58    
  55  0.846209     -0.166989      -3.37971       3.37971       2033.28       2036.66    
  56  0.347221      -1.05779      -21.4088       21.4088       1979.33       2000.74    
  57  0.488187     -0.717056      -14.5126       14.5126       2070.91       2085.42    
  58  0.321978      -1.13327      -22.9365       22.9365       1840.67       1863.60    
loop,thermsimp(1:2)       50   22.6537       8.53133    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379       2066.91         68.44          1.14         38.91          0.67          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2066.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       50
neval is:      378
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       51
neval is:      378


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      378     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938      -2.44769       2.44769       1717.59       1720.04    
   2  0.953882E-01  -2.34980      -47.5580       47.5580       1765.83       1813.39    
   3  0.875198     -0.133305      -2.69798       2.69798       1774.12       1776.82    
   4  0.401319     -0.913000      -18.4783       18.4783       1780.96       1799.43    
   5  0.288302      -1.24375      -25.1724       25.1724       1777.11       1802.28    
   6  0.596159E-01  -2.81983      -57.0711       57.0711       1782.09       1839.16    
   7  0.411979     -0.886782      -17.9477       17.9477       1788.41       1806.36    
   8  0.157950      -1.84548      -37.3509       37.3509       1795.34       1832.69    
   9  0.736512     -0.305830      -6.18974       6.18974       1787.50       1793.69    
  10  0.531935     -0.631235      -12.7757       12.7757       1798.54       1811.31    
  11  0.557201     -0.584829      -11.8364       11.8364       1804.23       1816.07    
  12  0.590342     -0.527053      -10.6671       10.6671       1776.18       1786.85    
  13  0.893645     -0.112447      -2.27583       2.27583       1817.96       1820.23    
  14  0.899172     -0.106281      -2.15104       2.15104       1796.75       1798.90    
  15  0.321510      -1.13473      -22.9659       22.9659       1835.62       1858.58    
  16  0.242259E-01  -3.72033      -75.2964       75.2964       1852.82       1928.12    
  17  0.646886     -0.435586      -8.81589       8.81589       1858.79       1867.61    
  18  0.998267     -0.173471E-02 -0.351090E-01  0.351090E-01   1840.67       1840.70    
  19  0.972297     -0.280942E-01 -0.568603      0.568603       1839.75       1840.32    
  20  0.309809      -1.17180      -23.7162       23.7162       1862.49       1886.21    
  21  0.816235     -0.203053      -4.10961       4.10961       1841.83       1845.94    
  22  0.984764     -0.153535E-01 -0.310743      0.310743       1855.97       1856.28    
  23  0.881026     -0.126668      -2.56365       2.56365       1887.27       1889.83    
  24  0.661336E-01  -2.71608      -54.9711       54.9711       1879.41       1934.39    
  25  0.410325     -0.890806      -18.0292       18.0292       1906.36       1924.38    
  26  0.104142E-03  -9.16976      -185.588       185.588       1907.59       2093.17    
  27  0.713949     -0.336943      -6.81945       6.81945       1908.00       1914.82    
  28  0.388242     -0.946126      -19.1488       19.1488       1886.07       1905.22    
  29  0.684780     -0.378657      -7.66370       7.66370       1910.38       1918.05    
  30  0.349297      -1.05183      -21.2882       21.2882       1913.70       1934.99    
  31  0.567533     -0.566456      -11.4646       11.4646       1911.00       1922.46    
  32  0.157115      -1.85078      -37.4582       37.4582       1922.56       1960.02    
  33  0.780641     -0.247640      -5.01203       5.01203       1929.90       1934.92    
  34  0.485397     -0.722789      -14.6286       14.6286       1928.88       1943.50    
  35  0.682517     -0.381968      -7.73071       7.73071       1901.78       1909.51    
  36  0.536829     -0.622075      -12.5903       12.5903       1925.30       1937.89    
  37  0.464187     -0.767467      -15.5329       15.5329       1926.23       1941.77    
  38  0.519819     -0.654274      -13.2420       13.2420       1925.45       1938.70    
  39  0.974252     -0.260857E-01 -0.527952      0.527952       1904.36       1904.89    
  40  0.386009     -0.951894      -19.2655       19.2655       1950.71       1969.97    
  41  0.217232      -1.52679      -30.9009       30.9009       1952.21       1983.11    
  42  0.173910      -1.74922      -35.4027       35.4027       1957.87       1993.27    
  43  0.860958     -0.149709      -3.02999       3.02999       1957.84       1960.87    
  44  0.893333     -0.112796      -2.28289       2.28289       1945.17       1947.45    
  45  0.957904     -0.430073E-01 -0.870432      0.870432       1963.44       1964.31    
  46  0.671164E-01  -2.70133      -54.6726       54.6726       1952.51       2007.18    
  47  0.133176      -2.01608      -40.8038       40.8038       1913.96       1954.76    
  48  0.574942     -0.553487      -11.2021       11.2021       1951.17       1962.37    
  49  0.302503      -1.19566      -24.1992       24.1992       1965.45       1989.65    
  50  0.325458      -1.12252      -22.7189       22.7189       1984.75       2007.47    
  51  0.344075      -1.06690      -21.5931       21.5931       1962.55       1984.15    
  52  0.432303     -0.838628      -16.9731       16.9731       1966.08       1983.06    
  53  0.855511     -0.156056      -3.15844       3.15844       1979.33       1982.49    
  54  0.391695     -0.937273      -18.9696       18.9696       2007.43       2026.40    
  55  0.613683     -0.488277      -9.88232       9.88232       2033.28       2043.17    
  56  0.694249     -0.364925      -7.38577       7.38577       2033.02       2040.40    
  57  0.155282      -1.86251      -37.6957       37.6957       2070.91       2108.61    
  58  0.632564     -0.457973      -9.26900       9.26900       2066.91       2076.18    
loop,thermsimp(1:2)       51   2.44769       47.5580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    380       1992.28         68.26          1.23         39.19          0.58          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1992.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       51
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       52
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      379     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -50.4416       50.4416       1717.59       1768.03    
   2  0.625679E-01  -2.77150      -56.0929       56.0929       1774.12       1830.21    
   3  0.254112      -1.36998      -27.7272       27.7272       1776.18       1803.91    
   4  0.582152     -0.541023      -10.9499       10.9499       1787.50       1798.45    
   5  0.596882     -0.516035      -10.4441       10.4441       1796.75       1807.19    
   6  0.149943      -1.89750      -38.4038       38.4038       1780.96       1819.36    
   7  0.496252     -0.700672      -14.1810       14.1810       1777.11       1791.29    
   8  0.129782      -2.04190      -41.3264       41.3264       1788.41       1829.73    
   9  0.740869     -0.299931      -6.07035       6.07035       1798.54       1804.61    
  10  0.124297      -2.08508      -42.2004       42.2004       1765.83       1808.03    
  11  0.524903     -0.644542      -13.0450       13.0450       1804.23       1817.28    
  12  0.852180     -0.159958      -3.23741       3.23741       1817.96       1821.19    
  13  0.823232     -0.194517      -3.93686       3.93686       1795.34       1799.28    
  14  0.256230      -1.36168      -27.5593       27.5593       1782.09       1809.65    
  15  0.258393      -1.35327      -27.3891       27.3891       1839.75       1867.14    
  16  0.324549      -1.12532      -22.7755       22.7755       1840.67       1863.44    
  17  0.504546     -0.684097      -13.8455       13.8455       1841.83       1855.67    
  18  0.774284     -0.255817      -5.17752       5.17752       1855.97       1861.15    
  19  0.452119E-01  -3.09639      -62.6684       62.6684       1835.62       1898.29    
  20  0.325288      -1.12305      -22.7295       22.7295       1858.79       1881.52    
  21  0.156855      -1.85244      -37.4917       37.4917       1862.49       1899.99    
  22  0.440906     -0.818924      -16.5743       16.5743       1887.27       1903.84    
  23  0.313753E-02  -5.76432      -116.665       116.665       1904.36       2021.03    
  24  0.252529      -1.37623      -27.8537       27.8537       1886.07       1913.93    
  25  0.799267     -0.224060      -4.53478       4.53478       1901.78       1906.32    
  26  0.961010     -0.397708E-01 -0.804928      0.804928       1908.00       1908.81    
  27  0.843711     -0.169946      -3.43956       3.43956       1910.38       1913.82    
  28  0.120002      -2.12025      -42.9120       42.9120       1911.00       1953.91    
  29  0.489889     -0.713576      -14.4422       14.4422       1906.36       1920.80    
  30  0.317246      -1.14808      -23.2361       23.2361       1852.82       1876.06    
  31  0.761766     -0.272116      -5.50739       5.50739       1879.41       1884.92    
  32  0.468167     -0.758930      -15.3601       15.3601       1929.90       1945.26    
  33  0.634908     -0.454275      -9.19414       9.19414       1913.70       1922.90    
  34  0.410644     -0.890029      -18.0134       18.0134       1925.30       1943.31    
  35  0.330962      -1.10575      -22.3795       22.3795       1925.45       1947.83    
  36  0.275422      -1.28945      -26.0974       26.0974       1926.23       1952.33    
  37  0.186052      -1.68173      -34.0368       34.0368       1928.88       1962.91    
  38  0.361178      -1.01838      -20.6113       20.6113       1945.17       1965.78    
  39  0.850100     -0.162402      -3.28687       3.28687       1913.96       1917.24    
  40  0.649062     -0.432226      -8.74790       8.74790       1922.56       1931.31    
  41  0.322988      -1.13014      -22.8731       22.8731       1957.84       1980.71    
  42  0.284964      -1.25539      -25.4081       25.4081       1951.17       1976.58    
  43  0.685335     -0.377848      -7.64733       7.64733       1963.44       1971.09    
  44  0.262422      -1.33780      -27.0760       27.0760       1950.71       1977.78    
  45  0.767375     -0.264780      -5.35893       5.35893       1979.33       1984.69    
  46  0.109385      -2.21288      -44.7869       44.7869       1966.08       2010.87    
  47  0.306599      -1.18221      -23.9270       23.9270       1952.21       1976.14    
  48  0.406201     -0.900907      -18.2336       18.2336       1962.55       1980.79    
  49  0.423601     -0.858964      -17.3847       17.3847       1965.45       1982.84    
  50  0.525023     -0.644313      -13.0404       13.0404       1957.87       1970.91    
  51  0.947103E-01  -2.35693      -47.7023       47.7023       1952.51       2000.21    
  52  0.408122     -0.896189      -18.1381       18.1381       1984.75       2002.88    
  53  0.463749     -0.768411      -15.5520       15.5520       2007.43       2022.98    
  54  0.985471     -0.146353E-01 -0.296206      0.296206       2033.02       2033.31    
  55  0.956569E-01  -2.34699      -47.5011       47.5011       2033.28       2080.79    
  56  0.529007     -0.636753      -12.8873       12.8873       2066.91       2079.80    
  57  0.648382     -0.433275      -8.76912       8.76912       1907.59       1916.36    
  58  0.910357     -0.939189E-01  -1.90084       1.90084       1992.28       1994.18    
loop,thermsimp(1:2)       52   50.4416       56.0929    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381       1815.08         68.38          1.22         39.30          0.44          0.05        109.39
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    1815.1        3.144     -2.978      3.172     -102.6    -0.5500E-01
                      0.3034      1.389     -99.70      4.526     0.3224    

                       3.641     -3.073      1.540      6502.      7000.    

                      -1.988      0.000      0.000      0.000     -1.221    



                      -1.855      0.000      0.000      7000.      660.7    

                      -1.469     -4.143     -7.153     -7.870      7.494    

                      -13.95     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.2563E-01 0.1212     0.9296E-01 0.1128    

                     -0.2486     0.1332    -0.1965     0.5025E-01 0.2151E-01



                     -0.8720    -0.6794      0.000    -0.4279E-01 0.2245    

                      0.1434     0.2317    -0.7116     0.1264     0.2614    

                      0.1644     0.4213E-01-0.3567     -1.607      7000.    



                      -1.239     -1.237     -2.142     -1.982    -0.3807    

                     -0.3252      9.285      8.460    -0.1681E+05 -5.568    

                     -0.2765     -2.342      8.726      9.136    -0.1969E+05



                      -6.000     0.5038     0.6721E-01  8.895      9.070    

                     -0.1944E+05 -6.000     0.4966E-01-0.2507      9.745    

                       8.909    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1815.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       52
neval is:      380
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       53
neval is:      380


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      380     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -26.8565       26.8565       1717.59       1744.44    
   2  0.615112     -0.485951      -9.83524       9.83524       1777.11       1786.95    
   3  0.424286E-01  -3.15993      -63.9544       63.9544       1787.50       1851.46    
   4  0.726479     -0.319546      -6.46734       6.46734       1795.34       1801.81    
   5  0.402368     -0.910388      -18.4255       18.4255       1776.18       1794.60    
   6  0.958941E-01  -2.34451      -47.4509       47.4509       1798.54       1845.99    
   7  0.137400      -1.98486      -40.1718       40.1718       1796.75       1836.92    
   8  0.887138     -0.119755      -2.42375       2.42375       1765.83       1768.26    
   9  0.655001     -0.423119      -8.56358       8.56358       1782.09       1790.65    
  10  0.304836      -1.18798      -24.0437       24.0437       1804.23       1828.28    
  11  0.346250      -1.06059      -21.4655       21.4655       1780.96       1802.42    
  12  0.608663E-01  -2.79908      -56.6509       56.6509       1817.96       1874.61    
  13  0.307248      -1.18010      -23.8842       23.8842       1788.41       1812.29    
  14  0.695201     -0.363555      -7.35804       7.35804       1774.12       1781.48    
  15  0.628698     -0.464104      -9.39308       9.39308       1841.83       1851.22    
  16  0.609308     -0.495432      -10.0271       10.0271       1855.97       1866.00    
  17  0.335400      -1.09243      -22.1099       22.1099       1840.67       1862.78    
  18  0.910258     -0.940273E-01  -1.90303       1.90303       1839.75       1841.66    
  19  0.439254E-01  -3.12526      -63.2527       63.2527       1852.82       1916.07    
  20  0.978338     -0.219001E-01 -0.443240      0.443240       1858.79       1859.24    
  21  0.282939      -1.26252      -25.5524       25.5524       1879.41       1904.97    
  22  0.763165     -0.270281      -5.47027       5.47027       1835.62       1841.09    
  23  0.206330      -1.57828      -31.9431       31.9431       1862.49       1894.44    
  24  0.228687      -1.47540      -29.8609       29.8609       1887.27       1917.13    
  25  0.634584E-01  -2.75737      -55.8069       55.8069       1901.78       1957.59    
  26  0.665745E-01  -2.70943      -54.8367       54.8367       1908.00       1962.84    
  27  0.761759     -0.272125      -5.50759       5.50759       1910.38       1915.89    
  28  0.636615     -0.451590      -9.13980       9.13980       1886.07       1895.21    
  29  0.804468     -0.217574      -4.40352       4.40352       1907.59       1911.99    
  30  0.508586     -0.676120      -13.6841       13.6841       1913.96       1927.64    
  31  0.232797      -1.45759      -29.5004       29.5004       1906.36       1935.86    
  32  0.932655     -0.697196E-01  -1.41107       1.41107       1913.70       1915.12    
  33  0.970411     -0.300359E-01 -0.607902      0.607902       1922.56       1923.17    
  34  0.151993      -1.88392      -38.1290       38.1290       1925.30       1963.43    
  35  0.571421     -0.559629      -11.3264       11.3264       1929.90       1941.23    
  36  0.673371     -0.395458      -8.00374       8.00374       1925.45       1933.46    
  37  0.828783     -0.187797      -3.80085       3.80085       1926.23       1930.04    
  38  0.285628      -1.25307      -25.3610       25.3610       1911.00       1936.36    
  39  0.127849      -2.05691      -41.6301       41.6301       1928.88       1970.51    
  40  0.101247      -2.29019      -46.3515       46.3515       1945.17       1991.52    
  41  0.593355     -0.521962      -10.5641       10.5641       1957.87       1968.44    
  42  0.362303      -1.01527      -20.5483       20.5483       1963.44       1983.99    
  43  0.754411     -0.281818      -5.70376       5.70376       1952.21       1957.92    
  44  0.917727     -0.858556E-01  -1.73765       1.73765       1951.17       1952.91    
  45  0.281495      -1.26764      -25.6560       25.6560       1950.71       1976.36    
  46  0.757766     -0.277381      -5.61397       5.61397       1957.84       1963.45    
  47  0.721843E-01  -2.62853      -53.1993       53.1993       1962.55       2015.75    
  48  0.995421     -0.458990E-02 -0.928958E-01  0.928958E-01   1965.45       1965.55    
  49  0.101230      -2.29036      -46.3551       46.3551       1979.33       2025.69    
  50  0.477194     -0.739832      -14.9736       14.9736       1992.28       2007.25    
  51  0.414653E-01  -3.18290      -64.4192       64.4192       1952.51       2016.93    
  52  0.927379     -0.753934E-01  -1.52590       1.52590       1984.75       1986.27    
  53  0.642274     -0.442741      -8.96070       8.96070       1966.08       1975.04    
  54  0.510784     -0.671809      -13.5968       13.5968       1904.36       1917.96    
  55  0.394196     -0.930907      -18.8408       18.8408       2007.43       2026.27    
  56  0.665507     -0.407206      -8.24151       8.24151       2033.02       2041.26    
  57  0.444368     -0.811101      -16.4160       16.4160       2066.91       2083.32    
  58  0.386291     -0.951164      -19.2508       19.2508       1815.08       1834.33    
loop,thermsimp(1:2)       53   26.8565       9.83524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    382       1999.93         68.53          1.17         39.25          0.38          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1999.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       53
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       54
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      381     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868      -12.0599       12.0599       1717.59       1729.65    
   2  0.390343     -0.940730      -19.0396       19.0396       1765.83       1784.87    
   3  0.506127     -0.680968      -13.7822       13.7822       1774.12       1787.90    
   4  0.964820     -0.358141E-01 -0.724848      0.724848       1777.11       1777.84    
   5  0.647775     -0.434212      -8.78810       8.78810       1782.09       1790.88    
   6  0.251459      -1.38048      -27.9397       27.9397       1776.18       1804.12    
   7  0.908837     -0.955893E-01  -1.93465       1.93465       1795.34       1797.28    
   8  0.800726     -0.222236      -4.49787       4.49787       1780.96       1785.45    
   9  0.480867E-01  -3.03475      -61.4208       61.4208       1788.41       1849.83    
  10  0.859127     -0.151839      -3.07309       3.07309       1804.23       1807.31    
  11  0.618632     -0.480244      -9.71974       9.71974       1815.08       1824.80    
  12  0.262118      -1.33896      -27.0994       27.0994       1796.75       1823.85    
  13  0.373394     -0.985121      -19.9380       19.9380       1835.62       1855.56    
  14  0.698954     -0.358170      -7.24906       7.24906       1839.75       1847.00    
  15  0.698639     -0.358621      -7.25819       7.25819       1798.54       1805.80    
  16  0.683233     -0.380919      -7.70949       7.70949       1841.83       1849.54    
  17  0.475083     -0.744266      -15.0633       15.0633       1787.50       1802.57    
  18  0.957666E-01  -2.34584      -47.4779       47.4779       1858.79       1906.27    
  19  0.767182     -0.265031      -5.36401       5.36401       1840.67       1846.03    
  20  0.418812     -0.870332      -17.6148       17.6148       1855.97       1873.59    
  21  0.940661     -0.611725E-01  -1.23808       1.23808       1817.96       1819.20    
  22  0.827990     -0.188754      -3.82023       3.82023       1862.49       1866.31    
  23  0.463008     -0.770011      -15.5844       15.5844       1886.07       1901.66    
  24  0.723352     -0.323860      -6.55465       6.55465       1879.41       1885.97    
  25  0.330269      -1.10785      -22.4219       22.4219       1907.59       1930.01    
  26  0.640927E-02  -5.05001      -102.208       102.208       1913.70       2015.91    
  27  0.849682     -0.162893      -3.29682       3.29682       1910.38       1913.68    
  28  0.457568     -0.781830      -15.8236       15.8236       1852.82       1868.64    
  29  0.720244     -0.328166      -6.64180       6.64180       1887.27       1893.91    
  30  0.953392     -0.477287E-01 -0.965990      0.965990       1904.36       1905.33    
  31  0.322501      -1.13165      -22.9036       22.9036       1922.56       1945.47    
  32  0.335509      -1.09211      -22.1033       22.1033       1913.96       1936.06    
  33  0.140389      -1.96334      -39.7364       39.7364       1926.23       1965.97    
  34  0.429265     -0.845681      -17.1159       17.1159       1925.45       1942.57    
  35  0.775769E-01  -2.55649      -51.7411       51.7411       1906.36       1958.10    
  36  0.414811     -0.879933      -17.8091       17.8091       1911.00       1928.81    
  37  0.183764      -1.69410      -34.2872       34.2872       1929.90       1964.19    
  38  0.357541      -1.02851      -20.8161       20.8161       1951.17       1971.98    
  39  0.401419E-02  -5.51792      -111.678       111.678       1901.78       2013.46    
  40  0.399411     -0.917764      -18.5748       18.5748       1952.21       1970.79    
  41  0.795187     -0.229178      -4.63837       4.63837       1908.00       1912.64    
  42  0.673332     -0.395517      -8.00493       8.00493       1925.30       1933.30    
  43  0.898211     -0.107350      -2.17268       2.17268       1957.84       1960.01    
  44  0.769733     -0.261711      -5.29681       5.29681       1965.45       1970.75    
  45  0.791938     -0.233272      -4.72122       4.72122       1957.87       1962.59    
  46  0.537104     -0.621563      -12.5799       12.5799       1928.88       1941.46    
  47  0.313282      -1.16065      -23.4906       23.4906       1966.08       1989.57    
  48  0.516025     -0.661601      -13.3902       13.3902       1950.71       1964.10    
  49  0.119673      -2.12299      -42.9675       42.9675       1963.44       2006.41    
  50  0.221920      -1.50544      -30.4688       30.4688       1984.75       2015.22    
  51  0.639805     -0.446592      -9.03865       9.03865       1945.17       1954.21    
  52  0.947460     -0.539710E-01  -1.09233       1.09233       1992.28       1993.37    
  53  0.786966     -0.239570      -4.84870       4.84870       1962.55       1967.40    
  54  0.990455     -0.959131E-02 -0.194120      0.194120       1952.51       1952.70    
  55  0.959621     -0.412173E-01 -0.834203      0.834203       1979.33       1980.17    
  56  0.617783     -0.481618      -9.74754       9.74754       2007.43       2017.18    
  57  0.958668     -0.422110E-01 -0.854315      0.854315       2033.02       2033.87    
  58  0.723379     -0.323823      -6.55390       6.55390       1999.93       2006.48    
loop,thermsimp(1:2)       54   12.0599       19.0396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383       1948.90         68.56          1.16         38.91          0.45          0.05        109.13
Just calling func    0   0        109.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1948.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       54
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       55
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      382     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -38.9127       38.9127       1717.59       1756.50    
   2  0.620947     -0.476510      -9.64416       9.64416       1777.11       1786.76    
   3  0.177272      -1.73007      -35.0151       35.0151       1765.83       1800.85    
   4  0.884738     -0.122464      -2.47856       2.47856       1780.96       1783.43    
   5  0.304829      -1.18800      -24.0442       24.0442       1774.12       1798.16    
   6  0.555834     -0.587286      -11.8862       11.8862       1782.09       1793.97    
   7  0.396848     -0.924202      -18.7051       18.7051       1795.34       1814.05    
   8  0.570840     -0.560646      -11.3470       11.3470       1787.50       1798.85    
   9  0.726203     -0.319926      -6.47503       6.47503       1776.18       1782.65    
  10  0.917349E-01  -2.38885      -48.3484       48.3484       1798.54       1846.89    
  11  0.456603     -0.783941      -15.8663       15.8663       1804.23       1820.10    
  12  0.602259     -0.507068      -10.2626       10.2626       1817.96       1828.22    
  13  0.496888E-01  -3.00198      -60.7575       60.7575       1796.75       1857.51    
  14  0.583997     -0.537860      -10.8858       10.8858       1815.08       1825.97    
  15  0.200789E-01  -3.90809      -79.0964       79.0964       1840.67       1919.76    
  16  0.422855     -0.860726      -17.4204       17.4204       1839.75       1857.17    
  17  0.535645     -0.624284      -12.6350       12.6350       1841.83       1854.46    
  18  0.413266     -0.883663      -17.8846       17.8846       1788.41       1806.29    
  19  0.342457      -1.07161      -21.6885       21.6885       1835.62       1857.31    
  20  0.638345     -0.448876      -9.08488       9.08488       1862.49       1871.58    
  21  0.655695     -0.422060      -8.54213       8.54213       1852.82       1861.36    
  22  0.629392     -0.463001      -9.37075       9.37075       1855.97       1865.34    
  23  0.977606     -0.226486E-01 -0.458389      0.458389       1879.41       1879.87    
  24  0.752980E-01  -2.58630      -52.3446       52.3446       1887.27       1939.61    
  25  0.874423     -0.134191      -2.71592       2.71592       1886.07       1888.79    
  26  0.587202     -0.532387      -10.7751       10.7751       1904.36       1915.14    
  27  0.880682     -0.127059      -2.57157       2.57157       1858.79       1861.37    
  28  0.878591E-01  -2.43202      -49.2221       49.2221       1908.00       1957.23    
  29  0.695678     -0.362869      -7.34417       7.34417       1910.38       1917.73    
  30  0.124758      -2.08138      -42.1254       42.1254       1911.00       1953.12    
  31  0.605547     -0.501622      -10.1524       10.1524       1907.59       1917.74    
  32  0.650291     -0.430335      -8.70963       8.70963       1925.30       1934.01    
  33  0.639591     -0.446926      -9.04540       9.04540       1913.96       1923.00    
  34  0.872983     -0.135839      -2.74926       2.74926       1928.88       1931.62    
  35  0.291503E-01  -3.53529      -71.5513       71.5513       1925.45       1997.00    
  36  0.290539      -1.23602      -25.0159       25.0159       1922.56       1947.58    
  37  0.759349     -0.275294      -5.57173       5.57173       1952.51       1958.08    
  38  0.599537     -0.511597      -10.3543       10.3543       1945.17       1955.52    
  39  0.948707     -0.526557E-01  -1.06571       1.06571       1906.36       1907.42    
  40  0.180828      -1.71021      -34.6132       34.6132       1957.84       1992.45    
  41  0.385708     -0.952674      -19.2813       19.2813       1957.87       1977.15    
  42  0.299380      -1.20604      -24.4093       24.4093       1950.71       1975.11    
  43  0.853891     -0.157952      -3.19681       3.19681       1929.90       1933.10    
  44  0.502000E-01  -2.99174      -60.5503       60.5503       1926.23       1986.79    
  45  0.510049     -0.673249      -13.6260       13.6260       1962.55       1976.18    
  46  0.500368     -0.692411      -14.0138       14.0138       1965.45       1979.47    
  47  0.947833     -0.535774E-01  -1.08436       1.08436       1952.21       1953.30    
  48  0.147734      -1.91235      -38.7043       38.7043       1951.17       1989.87    
  49  0.448609     -0.801603      -16.2238       16.2238       1979.33       1995.56    
  50  0.589816E-01  -2.83053      -57.2876       57.2876       1966.08       2023.37    
  51  0.914696     -0.891630E-01  -1.80458       1.80458       1992.28       1994.08    
  52  0.187672E-01  -3.97564      -80.4637       80.4637       1963.44       2043.90    
  53  0.842801     -0.171024      -3.46139       3.46139       1999.93       2003.39    
  54  0.394775     -0.929438      -18.8111       18.8111       1901.78       1920.59    
  55  0.830091E-01  -2.48880      -50.3713       50.3713       1984.75       2035.12    
  56  0.448195     -0.802527      -16.2425       16.2425       1913.70       1929.95    
  57  0.685603     -0.377456      -7.63939       7.63939       2007.43       2015.07    
  58  0.773262     -0.257137      -5.20424       5.20424       1948.90       1954.10    
loop,thermsimp(1:2)       55   38.9127       9.64416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    384       1860.51         68.56          1.17         38.94          0.55          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1860.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       55
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       56
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      383     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -13.9889       13.9889       1717.59       1731.58    
   2  0.324862      -1.12436      -22.7560       22.7560       1776.18       1798.94    
   3  0.195419      -1.63261      -33.0427       33.0427       1780.96       1814.00    
   4  0.203731      -1.59096      -32.1996       32.1996       1777.11       1809.31    
   5  0.177968      -1.72615      -34.9359       34.9359       1782.09       1817.02    
   6  0.835197     -0.180088      -3.64483       3.64483       1774.12       1777.76    
   7  0.302476      -1.19575      -24.2010       24.2010       1787.50       1811.71    
   8  0.352903E-01  -3.34415      -67.6828       67.6828       1765.83       1833.52    
   9  0.308671      -1.17548      -23.7907       23.7907       1788.41       1812.20    
  10  0.409306E-01  -3.19588      -64.6819       64.6819       1795.34       1860.02    
  11  0.615747     -0.484919      -9.81435       9.81435       1804.23       1814.05    
  12  0.766359     -0.266105      -5.38574       5.38574       1815.08       1820.47    
  13  0.625912     -0.468545      -9.48296       9.48296       1817.96       1827.44    
  14  0.435348     -0.831610      -16.8311       16.8311       1798.54       1815.37    
  15  0.341014      -1.07583      -21.7739       21.7739       1841.83       1863.60    
  16  0.434268E-01  -3.13668      -63.4837       63.4837       1839.75       1903.24    
  17  0.604743     -0.502951      -10.1793       10.1793       1835.62       1845.80    
  18  0.536278     -0.623102      -12.6111       12.6111       1796.75       1809.36    
  19  0.207674      -1.57179      -31.8116       31.8116       1852.82       1884.63    
  20  0.985598E-01  -2.31709      -46.8960       46.8960       1858.79       1905.69    
  21  0.814506     -0.205174      -4.15254       4.15254       1855.97       1860.12    
  22  0.447321     -0.804478      -16.2820       16.2820       1862.49       1878.78    
  23  0.741331     -0.299308      -6.05773       6.05773       1879.41       1885.47    
  24  0.601378     -0.508531      -10.2922       10.2922       1886.07       1896.37    
  25  0.421939E-01  -3.16548      -64.0667       64.0667       1906.36       1970.42    
  26  0.837477     -0.177362      -3.58965       3.58965       1904.36       1907.95    
  27  0.297606      -1.21198      -24.5296       24.5296       1910.38       1934.91    
  28  0.383069     -0.959540      -19.4203       19.4203       1907.59       1927.01    
  29  0.291041      -1.23429      -24.9810       24.9810       1840.67       1865.65    
  30  0.788773     -0.237276      -4.80227       4.80227       1901.78       1906.59    
  31  0.471794     -0.751213      -15.2039       15.2039       1913.96       1929.16    
  32  0.313755      -1.15914      -23.4601       23.4601       1913.70       1937.16    
  33  0.878815     -0.129181      -2.61451       2.61451       1928.88       1931.49    
  34  0.442284     -0.815802      -16.5112       16.5112       1929.90       1946.42    
  35  0.577998     -0.548185      -11.0948       11.0948       1925.30       1936.39    
  36  0.167851      -1.78468      -36.1204       36.1204       1887.27       1923.39    
  37  0.317031      -1.14875      -23.2498       23.2498       1922.56       1945.81    
  38  0.645763     -0.437323      -8.85105       8.85105       1911.00       1919.85    
  39  0.682139     -0.382522      -7.74192       7.74192       1952.21       1959.96    
  40  0.116437      -2.15041      -43.5224       43.5224       1948.90       1992.42    
  41  0.510594     -0.672180      -13.6044       13.6044       1945.17       1958.77    
  42  0.807696E-02  -4.81874      -97.5272       97.5272       1908.00       2005.53    
  43  0.367650      -1.00062      -20.2518       20.2518       1952.51       1972.76    
  44  0.446943     -0.805324      -16.2991       16.2991       1950.71       1967.00    
  45  0.181490      -1.70655      -34.5392       34.5392       1962.55       1997.09    
  46  0.912521     -0.915438E-01  -1.85277       1.85277       1957.87       1959.72    
  47  0.692870     -0.366912      -7.42600       7.42600       1965.45       1972.88    
  48  0.317456      -1.14742      -23.2228       23.2228       1926.23       1949.46    
  49  0.776642     -0.252776      -5.11597       5.11597       1951.17       1956.28    
  50  0.248677      -1.39160      -28.1648       28.1648       1957.84       1986.01    
  51  0.931207     -0.712734E-01  -1.44251       1.44251       1992.28       1993.72    
  52  0.127901      -2.05650      -41.6219       41.6219       1979.33       2020.95    
  53  0.780843     -0.247381      -5.00679       5.00679       1925.45       1930.46    
  54  0.773205     -0.257211      -5.20574       5.20574       1999.93       2005.13    
  55  0.764817     -0.268119      -5.42650       5.42650       2007.43       2012.85    
  56  0.230689      -1.46668      -29.6845       29.6845       1966.08       1995.77    
  57  0.424204     -0.857541      -17.3559       17.3559       1984.75       2002.10    
  58  0.281344      -1.26818      -25.6668       25.6668       1860.51       1886.17    
loop,thermsimp(1:2)       56   13.9889       22.7560    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385       1858.89         68.58          1.16         38.89          0.63          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1858.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       56
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       57
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      384     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980      -3.46048       3.46048       1717.59       1721.05    
   2  0.986423     -0.136696E-01 -0.276661      0.276661       1774.12       1774.40    
   3  0.633540     -0.456433      -9.23782       9.23782       1776.18       1785.42    
   4  0.518217E-01  -2.95995      -59.9068       59.9068       1777.11       1837.02    
   5  0.187161      -1.67579      -33.9165       33.9165       1796.75       1830.66    
   6  0.148298      -1.90853      -38.6271       38.6271       1787.50       1826.13    
   7  0.438795     -0.823722      -16.6714       16.6714       1788.41       1805.08    
   8  0.763297     -0.270109      -5.46677       5.46677       1780.96       1786.42    
   9  0.338275      -1.08390      -21.9371       21.9371       1804.23       1826.17    
  10  0.918815     -0.846702E-01  -1.71365       1.71365       1798.54       1800.25    
  11  0.349782      -1.05045      -21.2601       21.2601       1782.09       1803.35    
  12  0.131188      -2.03112      -41.1082       41.1082       1815.08       1856.19    
  13  0.961440     -0.393229E-01 -0.795863      0.795863       1817.96       1818.75    
  14  0.489949     -0.713455      -14.4397       14.4397       1765.83       1780.27    
  15  0.149956      -1.89742      -38.4021       38.4021       1835.62       1874.02    
  16  0.684004     -0.379791      -7.68666       7.68666       1795.34       1803.03    
  17  0.314778      -1.15589      -23.3942       23.3942       1855.97       1879.37    
  18  0.615260     -0.485711      -9.83038       9.83038       1841.83       1851.66    
  19  0.432805     -0.837468      -16.9497       16.9497       1840.67       1857.62    
  20  0.362224      -1.01549      -20.5527       20.5527       1862.49       1883.05    
  21  0.622697     -0.473696      -9.58720       9.58720       1852.82       1862.41    
  22  0.486392     -0.720740      -14.5872       14.5872       1879.41       1894.00    
  23  0.465513     -0.764615      -15.4752       15.4752       1860.51       1875.98    
  24  0.738251     -0.303471      -6.14199       6.14199       1886.07       1892.22    
  25  0.384600     -0.955551      -19.3395       19.3395       1839.75       1859.09    
  26  0.293922      -1.22444      -24.7817       24.7817       1858.79       1883.58    
  27  0.371803     -0.989390      -20.0244       20.0244       1901.78       1921.81    
  28  0.237589      -1.43721      -29.0880       29.0880       1904.36       1933.45    
  29  0.286147      -1.25125      -25.3242       25.3242       1911.00       1936.32    
  30  0.500459     -0.692230      -14.0102       14.0102       1887.27       1901.28    
  31  0.134865      -2.00348      -40.5488       40.5488       1907.59       1948.14    
  32  0.660213     -0.415193      -8.40316       8.40316       1913.96       1922.36    
  33  0.481817E-01  -3.03278      -61.3808       61.3808       1925.45       1986.83    
  34  0.683728     -0.380195      -7.69482       7.69482       1928.88       1936.57    
  35  0.634601     -0.454758      -9.20393       9.20393       1910.38       1919.59    
  36  0.195153      -1.63397      -33.0702       33.0702       1925.30       1958.37    
  37  0.176401      -1.73499      -35.1148       35.1148       1913.70       1948.82    
  38  0.770296     -0.260980      -5.28202       5.28202       1922.56       1927.84    
  39  0.223005      -1.50056      -30.3701       30.3701       1929.90       1960.27    
  40  0.530844E-01  -2.93587      -59.4196       59.4196       1926.23       1985.65    
  41  0.778354     -0.250574      -5.07140       5.07140       1951.17       1956.24    
  42  0.118362E-02  -6.73917      -136.395       136.395       1945.17       2081.56    
  43  0.658087     -0.418418      -8.46842       8.46842       1957.87       1966.34    
  44  0.832154E-01  -2.48632      -50.3211       50.3211       1952.21       2002.53    
  45  0.569178     -0.563562      -11.4060       11.4060       1950.71       1962.11    
  46  0.511101     -0.671188      -13.5843       13.5843       1906.36       1919.94    
  47  0.585157     -0.535875      -10.8457       10.8457       1952.51       1963.36    
  48  0.821991     -0.196026      -3.96741       3.96741       1965.45       1969.42    
  49  0.433318     -0.836284      -16.9257       16.9257       1957.84       1974.77    
  50  0.286210      -1.25103      -25.3198       25.3198       1948.90       1974.22    
  51  0.455679     -0.785966      -15.9073       15.9073       1992.28       2008.19    
  52  0.729010     -0.316067      -6.39694       6.39694       1966.08       1972.48    
  53  0.608401     -0.496921      -10.0573       10.0573       1962.55       1972.61    
  54  0.432221     -0.838819      -16.9770       16.9770       1984.75       2001.72    
  55  0.772117     -0.258620      -5.23425       5.23425       1999.93       2005.16    
  56  0.380207     -0.967041      -19.5721       19.5721       1908.00       1927.58    
  57  0.636340     -0.452023      -9.14857       9.14857       2007.43       2016.58    
  58  0.327756      -1.11549      -22.5765       22.5765       1858.89       1881.47    
loop,thermsimp(1:2)       57   3.46048      0.276661    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386       1963.91         68.58          1.18         38.93          0.65          0.05        109.38
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1963.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       57
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       58
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      385     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761      -13.0494       13.0494       1717.59       1730.64    
   2  0.210443      -1.55854      -31.5436       31.5436       1774.12       1805.66    
   3  0.930464     -0.720719E-01  -1.45868       1.45868       1765.83       1767.29    
   4  0.858664     -0.152378      -3.08400       3.08400       1776.18       1779.26    
   5  0.285726      -1.25272      -25.3540       25.3540       1780.96       1806.31    
   6  0.144917      -1.93160      -39.0939       39.0939       1798.54       1837.63    
   7  0.999977     -0.230243E-04 -0.465993E-03  0.465993E-03   1795.34       1795.34    
   8  0.985482     -0.146243E-01 -0.295983      0.295983       1782.09       1782.38    
   9  0.204255      -1.58839      -32.1476       32.1476       1788.41       1820.56    
  10  0.932647     -0.697284E-01  -1.41124       1.41124       1817.96       1819.37    
  11  0.916829     -0.868346E-01  -1.75746       1.75746       1787.50       1789.26    
  12  0.468002     -0.759282      -15.3672       15.3672       1804.23       1819.60    
  13  0.314730      -1.15604      -23.3973       23.3973       1796.75       1820.15    
  14  0.641708     -0.443621      -8.97853       8.97853       1777.11       1786.09    
  15  0.829165     -0.187336      -3.79152       3.79152       1841.83       1845.62    
  16  0.163052E-01  -4.11627      -83.3099       83.3099       1815.08       1898.39    
  17  0.795714     -0.228516      -4.62496       4.62496       1840.67       1845.29    
  18  0.933380     -0.689433E-01  -1.39535       1.39535       1839.75       1841.15    
  19  0.839430E-01  -2.47762      -50.1449       50.1449       1852.82       1902.97    
  20  0.684979     -0.378367      -7.65784       7.65784       1835.62       1843.27    
  21  0.473112     -0.748422      -15.1474       15.1474       1860.51       1875.65    
  22  0.513710     -0.666097      -13.4813       13.4813       1855.97       1869.45    
  23  0.360837      -1.01933      -20.6304       20.6304       1858.89       1879.52    
  24  0.427332E-01  -3.15278      -63.8096       63.8096       1862.49       1926.30    
  25  0.772426     -0.258219      -5.22614       5.22614       1858.79       1864.02    
  26  0.514081     -0.665375      -13.4666       13.4666       1886.07       1899.54    
  27  0.794349     -0.230233      -4.65972       4.65972       1879.41       1884.07    
  28  0.306573      -1.18230      -23.9287       23.9287       1887.27       1911.19    
  29  0.542954     -0.610731      -12.3607       12.3607       1910.38       1922.74    
  30  0.309169      -1.17387      -23.7581       23.7581       1906.36       1930.11    
  31  0.870005     -0.139256      -2.81843       2.81843       1901.78       1904.60    
  32  0.559982     -0.579850      -11.7357       11.7357       1913.96       1925.69    
  33  0.779248     -0.249426      -5.04818       5.04818       1908.00       1913.05    
  34  0.852492     -0.159591      -3.22999       3.22999       1922.56       1925.79    
  35  0.513103E-01  -2.96986      -60.1075       60.1075       1904.36       1964.47    
  36  0.843623     -0.170050      -3.44166       3.44166       1911.00       1914.44    
  37  0.514962E-01  -2.96625      -60.0344       60.0344       1928.88       1988.91    
  38  0.509762     -0.673812      -13.6374       13.6374       1907.59       1921.22    
  39  0.511862E-01  -2.97229      -60.1566       60.1566       1913.70       1973.86    
  40  0.118788      -2.13041      -43.1178       43.1178       1951.17       1994.29    
  41  0.156747      -1.85312      -37.5056       37.5056       1925.30       1962.80    
  42  0.715854     -0.334278      -6.76551       6.76551       1929.90       1936.67    
  43  0.472923     -0.748824      -15.1556       15.1556       1950.71       1965.86    
  44  0.105826      -2.24596      -45.4563       45.4563       1952.51       1997.97    
  45  0.214159      -1.54104      -31.1893       31.1893       1957.87       1989.06    
  46  0.212749      -1.54764      -31.3230       31.3230       1965.45       1996.78    
  47  0.173051      -1.75417      -35.5029       35.5029       1966.08       2001.59    
  48  0.301411      -1.19928      -24.2724       24.2724       1962.55       1986.82    
  49  0.438447E-01  -3.12710      -63.2899       63.2899       1948.90       2012.19    
  50  0.480396     -0.733144      -14.8382       14.8382       1957.84       1972.68    
  51  0.537259     -0.621276      -12.5741       12.5741       1926.23       1938.81    
  52  0.252945      -1.37458      -27.8204       27.8204       1925.45       1953.27    
  53  0.273135      -1.29779      -26.2662       26.2662       1984.75       2011.01    
  54  0.225234      -1.49061      -30.1688       30.1688       1952.21       1982.38    
  55  0.443550     -0.812944      -16.4533       16.4533       1999.93       2016.38    
  56  0.592768     -0.522951      -10.5841       10.5841       1992.28       2002.86    
  57  0.455824     -0.785648      -15.9009       15.9009       2007.43       2023.33    
  58  0.630261     -0.461621      -9.34282       9.34282       1963.91       1973.26    
loop,thermsimp(1:2)       58   13.0494       31.5436    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387       1943.73         68.40          1.15         38.99          0.59          0.05        109.18
Just calling func    0   0        109.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1943.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       58
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       59
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      386     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543      -4.26122       4.26122       1717.59       1721.85    
   2  0.897699     -0.107920      -2.18421       2.18421       1765.83       1768.02    
   3  0.719626     -0.329023      -6.65916       6.65916       1776.18       1782.84    
   4  0.415410     -0.878490      -17.7799       17.7799       1782.09       1799.87    
   5  0.991404     -0.863283E-02 -0.174721      0.174721       1777.11       1777.29    
   6  0.700708     -0.355664      -7.19834       7.19834       1787.50       1794.70    
   7  0.358389      -1.02614      -20.7681       20.7681       1795.34       1816.11    
   8  0.726731     -0.319199      -6.46033       6.46033       1774.12       1780.58    
   9  0.386831     -0.949769      -19.2225       19.2225       1780.96       1800.18    
  10  0.294784      -1.22151      -24.7224       24.7224       1817.96       1842.68    
  11  0.315848      -1.15249      -23.3255       23.3255       1804.23       1827.56    
  12  0.284632E-01  -3.55914      -72.0341       72.0341       1796.75       1868.78    
  13  0.316608      -1.15009      -23.2769       23.2769       1788.41       1811.68    
  14  0.309580      -1.17254      -23.7312       23.7312       1798.54       1822.27    
  15  0.758095     -0.276946      -5.60516       5.60516       1839.75       1845.36    
  16  0.132565      -2.02068      -40.8969       40.8969       1835.62       1876.51    
  17  0.963676     -0.369997E-01 -0.748843      0.748843       1840.67       1841.42    
  18  0.428996     -0.846309      -17.1286       17.1286       1841.83       1858.96    
  19  0.975676     -0.246243E-01 -0.498375      0.498375       1858.79       1859.29    
  20  0.475146     -0.744134      -15.0606       15.0606       1855.97       1871.03    
  21  0.507593     -0.678075      -13.7237       13.7237       1860.51       1874.23    
  22  0.275170      -1.29037      -26.1159       26.1159       1858.89       1885.01    
  23  0.475456     -0.743481      -15.0474       15.0474       1879.41       1894.46    
  24  0.302172      -1.19676      -24.2214       24.2214       1815.08       1839.31    
  25  0.243313      -1.41341      -28.6062       28.6062       1886.07       1914.68    
  26  0.356568      -1.03123      -20.8712       20.8712       1852.82       1873.69    
  27  0.630291     -0.461573      -9.34186       9.34186       1901.78       1911.13    
  28  0.642369     -0.442593      -8.95771       8.95771       1887.27       1896.22    
  29  0.593424     -0.521846      -10.5617       10.5617       1908.00       1918.57    
  30  0.813415     -0.206514      -4.17967       4.17967       1911.00       1915.18    
  31  0.623760     -0.471989      -9.55266       9.55266       1907.59       1917.14    
  32  0.314127      -1.15796      -23.4361       23.4361       1910.38       1933.82    
  33  0.333295      -1.09873      -22.2373       22.2373       1913.96       1936.19    
  34  0.974282     -0.260545E-01 -0.527321      0.527321       1922.56       1923.09    
  35  0.217685      -1.52471      -30.8588       30.8588       1862.49       1893.35    
  36  0.327903      -1.11504      -22.5674       22.5674       1906.36       1928.92    
  37  0.336622      -1.08880      -22.0363       22.0363       1929.90       1951.94    
  38  0.569408     -0.563159      -11.3979       11.3979       1926.23       1937.63    
  39  0.577250E-01  -2.85206      -57.7234       57.7234       1925.45       1983.18    
  40  0.237530      -1.43746      -29.0930       29.0930       1925.30       1954.39    
  41  0.622163     -0.474553      -9.60456       9.60456       1904.36       1913.97    
  42  0.476244     -0.741825      -15.0139       15.0139       1950.71       1965.72    
  43  0.914828     -0.890196E-01  -1.80168       1.80168       1957.84       1959.64    
  44  0.555890     -0.587184      -11.8841       11.8841       1963.91       1975.80    
  45  0.874902     -0.133644      -2.70484       2.70484       1913.70       1916.41    
  46  0.637871     -0.449619      -9.09992       9.09992       1952.21       1961.31    
  47  0.574852     -0.553643      -11.2053       11.2053       1962.55       1973.76    
  48  0.753498     -0.283029      -5.72828       5.72828       1928.88       1934.60    
  49  0.678645     -0.387657      -7.84586       7.84586       1957.87       1965.72    
  50  0.361720      -1.01688      -20.5809       20.5809       1951.17       1971.75    
  51  0.123381      -2.09248      -42.3501       42.3501       1965.45       2007.80    
  52  0.350198      -1.04926      -21.2361       21.2361       1952.51       1973.75    
  53  0.392572     -0.935035      -18.9243       18.9243       1966.08       1985.01    
  54  0.567106     -0.567208      -11.4798       11.4798       1992.28       2003.76    
  55  0.583382     -0.538913      -10.9071       10.9071       1984.75       1995.65    
  56  0.128820      -2.04934      -41.4769       41.4769       1948.90       1990.37    
  57  0.180317      -1.71304      -34.6704       34.6704       1999.93       2034.60    
  58  0.447281     -0.804568      -16.2838       16.2838       1943.73       1960.01    
loop,thermsimp(1:2)       59   4.26122       2.18421    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388       2071.75         68.30          1.23         39.23          0.46          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    389       1809.52         68.52          1.17         39.01          0.52          0.05        109.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1809.52
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       59
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       60
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      388     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -17.5041       17.5041       1717.59       1735.09    
   2  0.422022     -0.862697      -17.4603       17.4603       1765.83       1783.29    
   3  0.295550      -1.21892      -24.6698       24.6698       1777.11       1801.78    
   4  0.624681     -0.470513      -9.52280       9.52280       1774.12       1783.64    
   5  0.768652     -0.263117      -5.32527       5.32527       1776.18       1781.50    
   6  0.888855     -0.117822      -2.38461       2.38461       1787.50       1789.89    
   7  0.509140     -0.675031      -13.6621       13.6621       1782.09       1795.75    
   8  0.493628     -0.705973      -14.2883       14.2883       1780.96       1795.24    
   9  0.781578     -0.246440      -4.98775       4.98775       1788.41       1793.40    
  10  0.617265     -0.482456      -9.76451       9.76451       1795.34       1805.11    
  11  0.335801      -1.09124      -22.0857       22.0857       1798.54       1820.62    
  12  0.570262     -0.561660      -11.3675       11.3675       1804.23       1815.60    
  13  0.159269      -1.83716      -37.1826       37.1826       1815.08       1852.27    
  14  0.339767      -1.07950      -21.8481       21.8481       1840.67       1862.52    
  15  0.493989     -0.705242      -14.2735       14.2735       1817.96       1832.23    
  16  0.839254     -0.175242      -3.54675       3.54675       1839.75       1843.30    
  17  0.421889E-01  -3.16560      -64.0690       64.0690       1841.83       1905.90    
  18  0.278070      -1.27988      -25.9038       25.9038       1858.79       1884.70    
  19  0.942016E-01  -2.36232      -47.8113       47.8113       1796.75       1844.56    
  20  0.627802E-01  -2.76812      -56.0244       56.0244       1855.97       1912.00    
  21  0.228221      -1.47744      -29.9022       29.9022       1852.82       1882.72    
  22  0.929298     -0.733263E-01  -1.48406       1.48406       1860.51       1861.99    
  23  0.505346     -0.682512      -13.8135       13.8135       1835.62       1849.43    
  24  0.181316      -1.70751      -34.5587       34.5587       1858.89       1893.45    
  25  0.430977     -0.841701      -17.0353       17.0353       1862.49       1879.53    
  26  0.161604      -1.82261      -36.8880       36.8880       1879.41       1916.30    
  27  0.428774     -0.846826      -17.1390       17.1390       1887.27       1904.40    
  28  0.178213      -1.72477      -34.9080       34.9080       1901.78       1936.69    
  29  0.440884E-01  -3.12156      -63.1777       63.1777       1904.36       1967.54    
  30  0.224754      -1.49275      -30.2120       30.2120       1886.07       1916.29    
  31  0.174128      -1.74796      -35.3773       35.3773       1911.00       1946.37    
  32  0.798091     -0.225532      -4.56458       4.56458       1913.70       1918.27    
  33  0.303667E-01  -3.49441      -70.7239       70.7239       1907.59       1978.31    
  34  0.256290      -1.36145      -27.5545       27.5545       1908.00       1935.56    
  35  0.367468      -1.00112      -20.2618       20.2618       1922.56       1942.82    
  36  0.455395     -0.786590      -15.9199       15.9199       1906.36       1922.28    
  37  0.618612     -0.480277      -9.72040       9.72040       1910.38       1920.10    
  38  0.348147      -1.05513      -21.3550       21.3550       1928.88       1950.23    
  39  0.930736     -0.717801E-01  -1.45277       1.45277       1913.96       1915.41    
  40  0.822258     -0.195701      -3.96082       3.96082       1926.23       1930.20    
  41  0.444031     -0.811860      -16.4314       16.4314       1929.90       1946.34    
  42  0.599515     -0.511634      -10.3551       10.3551       1925.30       1935.65    
  43  0.866231     -0.143603      -2.90641       2.90641       1957.84       1960.75    
  44  0.143678      -1.94018      -39.2677       39.2677       1943.73       1983.00    
  45  0.280081      -1.27267      -25.7579       25.7579       1952.21       1977.97    
  46  0.834705E-01  -2.48326      -50.2591       50.2591       1957.87       2008.13    
  47  0.514478     -0.664603      -13.4510       13.4510       1950.71       1964.16    
  48  0.358853      -1.02484      -20.7420       20.7420       1951.17       1971.91    
  49  0.432015     -0.839295      -16.9866       16.9866       1952.51       1969.50    
  50  0.959030     -0.418333E-01 -0.846670      0.846670       1962.55       1963.40    
  51  0.236715      -1.44090      -29.1626       29.1626       1963.91       1993.08    
  52  0.741102     -0.299618      -6.06401       6.06401       1925.45       1931.52    
  53  0.971037     -0.293910E-01 -0.594849      0.594849       1966.08       1966.68    
  54  0.362643      -1.01434      -20.5293       20.5293       1948.90       1969.42    
  55  0.719521     -0.329170      -6.66212       6.66212       1984.75       1991.41    
  56  0.291024      -1.23435      -24.9822       24.9822       1992.28       2017.26    
  57  0.138234      -1.97881      -40.0494       40.0494       1965.45       2005.50    
  58  0.429879E-01  -3.14684      -63.6893       63.6893       1809.52       1873.21    
loop,thermsimp(1:2)       60   17.5041       17.4603    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    390       2053.75         68.54          1.17         38.98          0.56          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2053.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       60
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       61
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      389     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -24.5675       24.5675       1717.59       1742.16    
   2  0.575341     -0.552793      -11.1881       11.1881       1776.18       1787.37    
   3  0.202897      -1.59506      -32.2826       32.2826       1765.83       1798.12    
   4  0.154497      -1.86758      -37.7982       37.7982       1774.12       1811.92    
   5  0.990348     -0.969851E-02 -0.196290      0.196290       1787.50       1787.70    
   6  0.189774      -1.66192      -33.6359       33.6359       1788.41       1822.04    
   7  0.744626     -0.294873      -5.96799       5.96799       1780.96       1786.92    
   8  0.927855     -0.748799E-01  -1.51551       1.51551       1782.09       1783.60    
   9  0.730698     -0.313755      -6.35014       6.35014       1777.11       1783.46    
  10  0.375841     -0.978590      -19.8058       19.8058       1795.34       1815.15    
  11  0.792754     -0.232243      -4.70040       4.70040       1804.23       1808.93    
  12  0.232963      -1.45687      -29.4859       29.4859       1798.54       1828.02    
  13  0.816440     -0.202802      -4.10453       4.10453       1817.96       1822.06    
  14  0.626790     -0.467144      -9.45459       9.45459       1839.75       1849.21    
  15  0.943587     -0.580664E-01  -1.17522       1.17522       1796.75       1797.92    
  16  0.790178     -0.235497      -4.76626       4.76626       1835.62       1840.38    
  17  0.318791      -1.14322      -23.1378       23.1378       1815.08       1838.22    
  18  0.982573     -0.175804E-01 -0.355812      0.355812       1860.51       1860.86    
  19  0.959024     -0.418390E-01 -0.846787      0.846787       1840.67       1841.51    
  20  0.309588      -1.17251      -23.7307       23.7307       1809.52       1833.25    
  21  0.255297      -1.36533      -27.6331       27.6331       1862.49       1890.13    
  22  0.287931      -1.24504      -25.1985       25.1985       1852.82       1878.02    
  23  0.948191     -0.531995E-01  -1.07671       1.07671       1858.79       1859.87    
  24  0.231941      -1.46127      -29.5749       29.5749       1858.89       1888.47    
  25  0.730836E-01  -2.61615      -52.9487       52.9487       1887.27       1940.21    
  26  0.130964      -2.03283      -41.1428       41.1428       1841.83       1882.97    
  27  0.199641      -1.61124      -32.6101       32.6101       1855.97       1888.58    
  28  0.375837     -0.978600      -19.8061       19.8061       1913.96       1933.76    
  29  0.584992     -0.536158      -10.8514       10.8514       1886.07       1896.93    
  30  0.505862     -0.681491      -13.7928       13.7928       1879.41       1893.21    
  31  0.431310     -0.840928      -17.0197       17.0197       1913.70       1930.72    
  32  0.273049E-01  -3.60069      -72.8749       72.8749       1910.38       1983.26    
  33  0.865419E-01  -2.44713      -49.5278       49.5278       1906.36       1955.88    
  34  0.174989      -1.74303      -35.2775       35.2775       1926.23       1961.51    
  35  0.547517     -0.602362      -12.1913       12.1913       1925.45       1937.64    
  36  0.562902E-02  -5.17982      -104.835       104.835       1908.00       2012.84    
  37  0.386997     -0.949338      -19.2138       19.2138       1925.30       1944.51    
  38  0.750107     -0.287539      -5.81955       5.81955       1901.78       1907.60    
  39  0.218818      -1.51951      -30.7537       30.7537       1922.56       1953.32    
  40  0.821700     -0.196380      -3.97456       3.97456       1929.90       1933.88    
  41  0.223897      -1.49657      -30.2893       30.2893       1911.00       1941.29    
  42  0.744973     -0.294407      -5.95855       5.95855       1928.88       1934.83    
  43  0.279239      -1.27569      -25.8188       25.8188       1957.84       1983.66    
  44  0.210659      -1.55751      -31.5228       31.5228       1962.55       1994.08    
  45  0.998203     -0.179835E-02 -0.363972E-01  0.363972E-01   1950.71       1950.74    
  46  0.355772      -1.03347      -20.9165       20.9165       1966.08       1987.00    
  47  0.437893     -0.825781      -16.7131       16.7131       1904.36       1921.08    
  48  0.897806E-01  -2.41039      -48.7842       48.7842       1948.90       1997.68    
  49  0.970127     -0.303283E-01 -0.613820      0.613820       1952.51       1953.12    
  50  0.463485     -0.768981      -15.5635       15.5635       1951.17       1966.73    
  51  0.605373     -0.501911      -10.1583       10.1583       1952.21       1962.37    
  52  0.622934     -0.473314      -9.57948       9.57948       1907.59       1917.17    
  53  0.937920     -0.640902E-01  -1.29713       1.29713       1943.73       1945.03    
  54  0.130922      -2.03316      -41.1494       41.1494       1984.75       2025.90    
  55  0.165920      -1.79625      -36.3546       36.3546       1963.91       2000.27    
  56  0.797155     -0.226707      -4.58835       4.58835       1965.45       1970.04    
  57  0.172586      -1.75686      -35.5573       35.5573       1957.87       1993.43    
  58  0.150998E-02  -6.49566      -131.467       131.467       2053.75       2185.22    
loop,thermsimp(1:2)       61   24.5675       11.1881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391       1992.28         68.43          1.17         39.03          0.65          0.05        109.34
Just calling func    0   0        109.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1992.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       61
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       62
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      390     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -35.0496       35.0496       1717.59       1752.64    
   2  0.163120      -1.81327      -36.6990       36.6990       1777.11       1813.81    
   3  0.828064     -0.188664      -3.81841       3.81841       1782.09       1785.91    
   4  0.491219     -0.710866      -14.3873       14.3873       1780.96       1795.34    
   5  0.473397     -0.747822      -15.1353       15.1353       1776.18       1791.31    
   6  0.737394     -0.304633      -6.16551       6.16551       1787.50       1793.67    
   7  0.206273      -1.57855      -31.9486       31.9486       1796.75       1828.70    
   8  0.354259      -1.03773      -21.0027       21.0027       1765.83       1786.84    
   9  0.233194      -1.45588      -29.4659       29.4659       1804.23       1833.70    
  10  0.118120E-01  -4.43864      -89.8344       89.8344       1774.12       1863.95    
  11  0.918073     -0.854782E-01  -1.73001       1.73001       1795.34       1797.07    
  12  0.845317     -0.168044      -3.40107       3.40107       1788.41       1791.81    
  13  0.706964     -0.346775      -7.01844       7.01844       1817.96       1824.98    
  14  0.779001     -0.249743      -5.05458       5.05458       1798.54       1803.59    
  15  0.455959     -0.785352      -15.8949       15.8949       1809.52       1825.42    
  16  0.849694     -0.162880      -3.29654       3.29654       1815.08       1818.38    
  17  0.516839     -0.660024      -13.3583       13.3583       1835.62       1848.98    
  18  0.892086     -0.114192      -2.31115       2.31115       1840.67       1842.98    
  19  0.297598      -1.21201      -24.5301       24.5301       1839.75       1864.28    
  20  0.719255E-01  -2.63213      -53.2720       53.2720       1858.79       1912.07    
  21  0.722825     -0.324588      -6.56938       6.56938       1860.51       1867.07    
  22  0.550765     -0.596446      -12.0716       12.0716       1852.82       1864.89    
  23  0.988777     -0.112866E-01 -0.228432      0.228432       1841.83       1842.06    
  24  0.706438     -0.347520      -7.03351       7.03351       1858.89       1865.93    
  25  0.630672     -0.460969      -9.32963       9.32963       1855.97       1865.30    
  26  0.377261     -0.974818      -19.7295       19.7295       1862.49       1882.22    
  27  0.149262E-01  -4.20464      -85.0983       85.0983       1879.41       1964.51    
  28  0.185115      -1.68678      -34.1390       34.1390       1886.07       1920.21    
  29  0.836458     -0.178579      -3.61429       3.61429       1901.78       1905.40    
  30  0.778304     -0.250638      -5.07270       5.07270       1907.59       1912.66    
  31  0.495633     -0.701920      -14.2063       14.2063       1904.36       1918.57    
  32  0.795767E-01  -2.53103      -51.2260       51.2260       1913.70       1964.93    
  33  0.361545      -1.01737      -20.5907       20.5907       1913.96       1934.55    
  34  0.451858     -0.794387      -16.0777       16.0777       1929.90       1945.98    
  35  0.923485     -0.796009E-01  -1.61106       1.61106       1928.88       1930.49    
  36  0.189492      -1.66341      -33.6660       33.6660       1925.45       1959.12    
  37  0.357280      -1.02924      -20.8309       20.8309       1887.27       1908.10    
  38  0.113039      -2.18002      -44.1218       44.1218       1911.00       1955.12    
  39  0.418587     -0.870870      -17.6257       17.6257       1925.30       1942.92    
  40  0.732527E-01  -2.61384      -52.9019       52.9019       1943.73       1996.63    
  41  0.768904     -0.262790      -5.31864       5.31864       1950.71       1956.02    
  42  0.323623      -1.12817      -22.8333       22.8333       1952.51       1975.34    
  43  0.837193     -0.177701      -3.59652       3.59652       1922.56       1926.16    
  44  0.656230     -0.421244      -8.52563       8.52563       1906.36       1914.88    
  45  0.778603     -0.250253      -5.06492       5.06492       1926.23       1931.30    
  46  0.736391     -0.305994      -6.19305       6.19305       1952.21       1958.41    
  47  0.625820E-01  -2.77128      -56.0883       56.0883       1951.17       2007.26    
  48  0.480814     -0.732276      -14.8206       14.8206       1965.45       1980.27    
  49  0.356284      -1.03203      -20.8874       20.8874       1910.38       1931.27    
  50  0.888471     -0.118254      -2.39336       2.39336       1957.84       1960.23    
  51  0.670294     -0.400038      -8.09644       8.09644       1966.08       1974.18    
  52  0.651699     -0.428172      -8.66585       8.66585       1957.87       1966.54    
  53  0.620073E-01  -2.78050      -56.2750       56.2750       1962.55       2018.83    
  54  0.114125      -2.17046      -43.9282       43.9282       1948.90       1992.82    
  55  0.332668      -1.10061      -22.2754       22.2754       1963.91       1986.19    
  56  0.215526      -1.53467      -31.0605       31.0605       1908.00       1939.07    
  57  0.491711     -0.709864      -14.3670       14.3670       1984.75       1999.11    
  58  0.251655      -1.37970      -27.9239       27.9239       1992.28       2020.20    
loop,thermsimp(1:2)       62   35.0496       36.6990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392       2053.75         68.56          1.17         39.10          0.45          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    393       1872.69         68.45          1.15         39.11          0.53          0.05        109.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1872.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       62
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       63
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      392     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -25.8451       25.8451       1717.59       1743.43    
   2  0.603344     -0.505268      -10.2262       10.2262       1782.09       1792.31    
   3  0.363780      -1.01121      -20.4659       20.4659       1765.83       1786.30    
   4  0.298736      -1.20820      -24.4529       24.4529       1776.18       1800.63    
   5  0.992861     -0.716435E-02 -0.145000      0.145000       1788.41       1788.55    
   6  0.166164      -1.79478      -36.3248       36.3248       1787.50       1823.83    
   7  0.416382     -0.876153      -17.7326       17.7326       1780.96       1798.69    
   8  0.770949     -0.260133      -5.26488       5.26488       1795.34       1800.61    
   9  0.782423     -0.245359      -4.96587       4.96587       1798.54       1803.50    
  10  0.115501      -2.15847      -43.6857       43.6857       1777.11       1820.80    
  11  0.348954      -1.05281      -21.3081       21.3081       1815.08       1836.39    
  12  0.441818     -0.816857      -16.5325       16.5325       1817.96       1834.49    
  13  0.888072     -0.118703      -2.40245       2.40245       1809.52       1811.92    
  14  0.808059     -0.213120      -4.31338       4.31338       1796.75       1801.06    
  15  0.432540E-01  -3.14067      -63.5645       63.5645       1804.23       1867.80    
  16  0.369483     -0.995652      -20.1512       20.1512       1841.83       1861.98    
  17  0.262535      -1.33737      -27.0673       27.0673       1840.67       1867.73    
  18  0.873783     -0.134923      -2.73073       2.73073       1835.62       1838.35    
  19  0.636654     -0.451528      -9.13855       9.13855       1774.12       1783.26    
  20  0.534780     -0.625901      -12.6677       12.6677       1839.75       1852.42    
  21  0.557733     -0.583875      -11.8171       11.8171       1852.82       1864.64    
  22  0.929598     -0.730032E-01  -1.47752       1.47752       1855.97       1857.45    
  23  0.350245      -1.04912      -21.2333       21.2333       1858.89       1880.13    
  24  0.391945     -0.936633      -18.9567       18.9567       1860.51       1879.46    
  25  0.123996      -2.08751      -42.2494       42.2494       1862.49       1904.74    
  26  0.609578E-01  -2.79757      -56.6206       56.6206       1901.78       1958.40    
  27  0.165807      -1.79693      -36.3683       36.3683       1887.27       1923.63    
  28  0.766484     -0.265941      -5.38243       5.38243       1858.79       1864.18    
  29  0.629881     -0.462224      -9.35503       9.35503       1907.59       1916.94    
  30  0.273641      -1.29594      -26.2287       26.2287       1906.36       1932.58    
  31  0.344034E-01  -3.36960      -68.1979       68.1979       1904.36       1972.56    
  32  0.747187     -0.291440      -5.89849       5.89849       1886.07       1891.97    
  33  0.511998     -0.669435      -13.5488       13.5488       1922.56       1936.11    
  34  0.544406     -0.608061      -12.3066       12.3066       1928.88       1941.18    
  35  0.272552      -1.29993      -26.3094       26.3094       1910.38       1936.69    
  36  0.605186     -0.502220      -10.1645       10.1645       1926.23       1936.40    
  37  0.923323     -0.797758E-01  -1.61460       1.61460       1913.96       1915.57    
  38  0.373879     -0.983822      -19.9117       19.9117       1908.00       1927.92    
  39  0.325119      -1.12356      -22.7400       22.7400       1925.30       1948.04    
  40  0.746995E-01  -2.59428      -52.5061       52.5061       1929.90       1982.41    
  41  0.465030     -0.765653      -15.4962       15.4962       1911.00       1926.49    
  42  0.150040      -1.89685      -38.3907       38.3907       1950.71       1989.10    
  43  0.127827E-01  -4.35967      -88.2360       88.2360       1952.21       2040.45    
  44  0.667575     -0.404103      -8.17871       8.17871       1925.45       1933.63    
  45  0.725579     -0.320785      -6.49241       6.49241       1957.84       1964.33    
  46  0.555976     -0.587030      -11.8810       11.8810       1879.41       1891.30    
  47  0.834777     -0.180590      -3.65499       3.65499       1913.70       1917.36    
  48  0.582668     -0.540138      -10.9319       10.9319       1957.87       1968.80    
  49  0.265288      -1.32694      -26.8562       26.8562       1966.08       1992.94    
  50  0.935593     -0.665747E-01  -1.34742       1.34742       1952.51       1953.86    
  51  0.789592     -0.236239      -4.78129       4.78129       1965.45       1970.24    
  52  0.337907      -1.08498      -21.9592       21.9592       1963.91       1985.87    
  53  0.359971      -1.02173      -20.6790       20.6790       1948.90       1969.57    
  54  0.655159     -0.422878      -8.55869       8.55869       1943.73       1952.29    
  55  0.293383      -1.22628      -24.8188       24.8188       1984.75       2009.57    
  56  0.647978     -0.433898      -8.78173       8.78173       1951.17       1959.95    
  57  0.571456     -0.559568      -11.3252       11.3252       1962.55       1973.88    
  58  0.516522     -0.660637      -13.3707       13.3707       1872.69       1886.06    
loop,thermsimp(1:2)       63   25.8451       10.2262    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394       2275.06         68.52          1.16         39.13          0.52          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    395       1905.86         68.53          1.16         39.22          0.41          0.05        109.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1905.86
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       63
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       64
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      394     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -66.2384       66.2384       1717.59       1783.83    
   2  0.772352     -0.258315      -5.22807       5.22807       1774.12       1779.35    
   3  0.802807     -0.219640      -4.44534       4.44534       1765.83       1770.28    
   4  0.514956     -0.663673      -13.4322       13.4322       1788.41       1801.84    
   5  0.554302     -0.590045      -11.9420       11.9420       1782.09       1794.03    
   6  0.503754     -0.685667      -13.8773       13.8773       1780.96       1794.83    
   7  0.400624     -0.914733      -18.5134       18.5134       1795.34       1813.85    
   8  0.912762     -0.912806E-01  -1.84744       1.84744       1776.18       1778.03    
   9  0.197841E-01  -3.92288      -79.3958       79.3958       1796.75       1876.14    
  10  0.657402E-02  -5.02463      -101.694       101.694       1798.54       1900.23    
  11  0.802861     -0.219574      -4.44400       4.44400       1809.52       1813.97    
  12  0.494750     -0.703703      -14.2424       14.2424       1777.11       1791.35    
  13  0.533728     -0.627869      -12.7075       12.7075       1787.50       1800.21    
  14  0.202886      -1.59511      -32.2837       32.2837       1817.96       1850.24    
  15  0.459498     -0.777620      -15.7384       15.7384       1815.08       1830.82    
  16  0.476385     -0.741530      -15.0079       15.0079       1835.62       1850.63    
  17  0.604782     -0.502887      -10.1780       10.1780       1839.75       1849.93    
  18  0.652452     -0.427018      -8.64249       8.64249       1855.97       1864.61    
  19  0.611862     -0.491249      -9.94247       9.94247       1841.83       1851.77    
  20  0.974982     -0.253365E-01 -0.512791      0.512791       1858.79       1859.31    
  21  0.950238E-01  -2.35363      -47.6355       47.6355       1852.82       1900.46    
  22  0.322848      -1.13057      -22.8819       22.8819       1840.67       1863.55    
  23  0.581382     -0.542348      -10.9767       10.9767       1804.23       1815.21    
  24  0.267652      -1.31807      -26.6766       26.6766       1860.51       1887.18    
  25  0.232641E-01  -3.76084      -76.1163       76.1163       1858.89       1935.01    
  26  0.515113E-01  -2.96595      -60.0284       60.0284       1872.69       1932.72    
  27  0.300440      -1.20251      -24.3377       24.3377       1879.41       1903.75    
  28  0.760936     -0.273206      -5.52945       5.52945       1886.07       1891.60    
  29  0.447102     -0.804968      -16.2919       16.2919       1862.49       1878.79    
  30  0.550831     -0.596328      -12.0692       12.0692       1913.96       1926.03    
  31  0.314273      -1.15749      -23.4267       23.4267       1907.59       1931.01    
  32  0.967020     -0.335365E-01 -0.678750      0.678750       1913.70       1914.38    
  33  0.505250     -0.682701      -13.8173       13.8173       1887.27       1901.08    
  34  0.416175     -0.876649      -17.7426       17.7426       1911.00       1928.74    
  35  0.450270     -0.797909      -16.1490       16.1490       1908.00       1924.15    
  36  0.521734     -0.650597      -13.1675       13.1675       1906.36       1919.52    
  37  0.135069      -2.00197      -40.5182       40.5182       1925.45       1965.97    
  38  0.186856      -1.67742      -33.9495       33.9495       1922.56       1956.51    
  39  0.965761     -0.348385E-01 -0.705102      0.705102       1926.23       1926.94    
  40  0.419580     -0.868501      -17.5777       17.5777       1910.38       1927.96    
  41  0.558190     -0.583056      -11.8006       11.8006       1928.88       1940.68    
  42  0.862407     -0.148028      -2.99595       2.99595       1925.30       1928.29    
  43  0.507376E-01  -2.98109      -60.3347       60.3347       1943.73       2004.06    
  44  0.568000     -0.565633      -11.4479       11.4479       1952.51       1963.96    
  45  0.750571     -0.286921      -5.80704       5.80704       1901.78       1907.59    
  46  0.873151     -0.135646      -2.74537       2.74537       1951.17       1953.91    
  47  0.204078      -1.58925      -32.1652       32.1652       1957.84       1990.01    
  48  0.610815     -0.492961      -9.97712       9.97712       1957.87       1967.85    
  49  0.666006E-01  -2.70904      -54.8287       54.8287       1948.90       2003.72    
  50  0.785181E-02  -4.84701      -98.0994       98.0994       1965.45       2063.55    
  51  0.922541     -0.806234E-01  -1.63175       1.63175       1904.36       1906.00    
  52  0.576084     -0.551502      -11.1619       11.1619       1962.55       1973.71    
  53  0.589402     -0.528646      -10.6994       10.6994       1929.90       1940.60    
  54  0.319085      -1.14230      -23.1191       23.1191       1963.91       1987.03    
  55  0.120284E-01  -4.42048      -89.4669       89.4669       1950.71       2040.17    
  56  0.801824     -0.220866      -4.47014       4.47014       1966.08       1970.55    
  57  0.498185     -0.696784      -14.1023       14.1023       1984.75       1998.85    
  58  0.190475      -1.65823      -33.5612       33.5612       1905.86       1939.42    
loop,thermsimp(1:2)       64   66.2384       5.22807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    396       1940.25         68.65          1.17         39.01          0.55          0.05        109.42
Just calling func    0   0        109.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1940.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       64
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       65
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      395     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -14.7214       14.7214       1765.83       1780.56    
   2  0.880011     -0.127821      -2.58699       2.58699       1776.18       1778.77    
   3  0.163672      -1.80989      -36.6307       36.6307       1774.12       1810.75    
   4  0.548194     -0.601126      -12.1663       12.1663       1717.59       1729.75    
   5  0.774171     -0.255963      -5.18048       5.18048       1777.11       1782.29    
   6  0.815808     -0.203577      -4.12022       4.12022       1782.09       1786.21    
   7  0.901270     -0.103951      -2.10387       2.10387       1780.96       1783.06    
   8  0.604998     -0.502529      -10.1708       10.1708       1787.50       1797.67    
   9  0.583320     -0.539020      -10.9093       10.9093       1788.41       1799.32    
  10  0.776155     -0.253403      -5.12867       5.12867       1795.34       1800.47    
  11  0.414399     -0.880925      -17.8292       17.8292       1809.52       1827.35    
  12  0.321893      -1.13354      -22.9418       22.9418       1804.23       1827.17    
  13  0.882206     -0.125330      -2.53657       2.53657       1815.08       1817.62    
  14  0.176926      -1.73202      -35.0547       35.0547       1839.75       1874.81    
  15  0.143482      -1.94155      -39.2953       39.2953       1817.96       1857.25    
  16  0.669321     -0.401491      -8.12584       8.12584       1835.62       1843.74    
  17  0.862244     -0.148216      -2.99978       2.99978       1841.83       1844.83    
  18  0.897950     -0.107641      -2.17855       2.17855       1858.79       1860.97    
  19  0.788148     -0.238070      -4.81833       4.81833       1840.67       1845.49    
  20  0.801563     -0.221191      -4.47672       4.47672       1855.97       1860.45    
  21  0.284401      -1.25737      -25.4481       25.4481       1796.75       1822.20    
  22  0.782583     -0.245155      -4.96173       4.96173       1862.49       1867.46    
  23  0.813976     -0.205825      -4.16572       4.16572       1860.51       1864.67    
  24  0.528421     -0.637861      -12.9098       12.9098       1886.07       1898.98    
  25  0.871065     -0.138038      -2.79378       2.79378       1798.54       1801.33    
  26  0.139992      -1.96617      -39.7936       39.7936       1852.82       1892.61    
  27  0.549296     -0.599118      -12.1257       12.1257       1887.27       1899.39    
  28  0.990967     -0.907357E-02 -0.183641      0.183641       1879.41       1879.60    
  29  0.735762     -0.306848      -6.21036       6.21036       1904.36       1910.57    
  30  0.647880     -0.434050      -8.78480       8.78480       1901.78       1910.57    
  31  0.324740      -1.12473      -22.7636       22.7636       1913.70       1936.47    
  32  0.995457E-01  -2.30714      -46.6946       46.6946       1906.36       1953.05    
  33  0.953388     -0.477336E-01 -0.966089      0.966089       1908.00       1908.97    
  34  0.573564     -0.555886      -11.2507       11.2507       1913.96       1925.21    
  35  0.988045     -0.120272E-01 -0.243421      0.243421       1926.23       1926.48    
  36  0.499857     -0.693433      -14.0345       14.0345       1910.38       1924.42    
  37  0.687815E-01  -2.67682      -54.1766       54.1766       1925.30       1979.47    
  38  0.430407     -0.843024      -17.0621       17.0621       1911.00       1928.06    
  39  0.204975      -1.58487      -32.0764       32.0764       1907.59       1939.66    
  40  0.318612      -1.14378      -23.1492       23.1492       1872.69       1895.84    
  41  0.339792      -1.07942      -21.8466       21.8466       1858.89       1880.74    
  42  0.609830     -0.494575      -10.0098       10.0098       1905.86       1915.87    
  43  0.518092     -0.657603      -13.3093       13.3093       1929.90       1943.21    
  44  0.595099     -0.519028      -10.5047       10.5047       1928.88       1939.38    
  45  0.658024     -0.418513      -8.47036       8.47036       1951.17       1959.64    
  46  0.324672      -1.12494      -22.7678       22.7678       1922.56       1945.33    
  47  0.503769     -0.685637      -13.8767       13.8767       1952.51       1966.39    
  48  0.690978     -0.369647      -7.48134       7.48134       1925.45       1932.93    
  49  0.961279     -0.394903E-01 -0.799252      0.799252       1957.87       1958.67    
  50  0.610537     -0.493416      -9.98633       9.98633       1966.08       1976.07    
  51  0.458399     -0.780016      -15.7869       15.7869       1962.55       1978.34    
  52  0.779071     -0.249653      -5.05276       5.05276       1963.91       1968.97    
  53  0.684652     -0.378844      -7.66749       7.66749       1957.84       1965.51    
  54  0.997795     -0.220750E-02 -0.446780E-01  0.446780E-01   1984.75       1984.79    
  55  0.206338      -1.57824      -31.9422       31.9422       1948.90       1980.84    
  56  0.305969      -1.18427      -23.9687       23.9687       1943.73       1967.70    
  57  0.270494      -1.30751      -26.4628       26.4628       1950.71       1977.17    
  58  0.755875     -0.279879      -5.66451       5.66451       1940.25       1945.91    
loop,thermsimp(1:2)       65   14.7214       2.58699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397       1812.16         68.50          1.16         39.10          0.59          0.05        109.40
Just calling func    0   0        109.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1812.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       65
neval is:      396
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       66
neval is:      396


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      396     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -56.7272       56.7272       1717.59       1774.32    
   2  0.695687     -0.362855      -7.34388       7.34388       1776.18       1783.52    
   3  0.695570E-01  -2.66561      -53.9497       53.9497       1765.83       1819.78    
   4  0.320604      -1.13755      -23.0230       23.0230       1777.11       1800.13    
   5  0.469989     -0.755045      -15.2815       15.2815       1780.96       1796.24    
   6  0.571075     -0.560235      -11.3387       11.3387       1782.09       1793.43    
   7  0.881942     -0.125628      -2.54262       2.54262       1787.50       1790.05    
   8  0.195259      -1.63343      -33.0592       33.0592       1788.41       1821.47    
   9  0.825869     -0.191319      -3.87215       3.87215       1795.34       1799.21    
  10  0.213481E-02  -6.14938      -124.458       124.458       1798.54       1923.00    
  11  0.625641     -0.468979      -9.49174       9.49174       1774.12       1783.61    
  12  0.148805      -1.90512      -38.5580       38.5580       1815.08       1853.64    
  13  0.194947      -1.63503      -33.0916       33.0916       1796.75       1829.84    
  14  0.174958      -1.74321      -35.2811       35.2811       1804.23       1839.51    
  15  0.553792     -0.590967      -11.9607       11.9607       1809.52       1821.48    
  16  0.342970      -1.07011      -21.6582       21.6582       1835.62       1857.28    
  17  0.426079E-01  -3.15572      -63.8691       63.8691       1841.83       1905.70    
  18  0.604850E-01  -2.80536      -56.7782       56.7782       1840.67       1897.45    
  19  0.206356      -1.57815      -31.9405       31.9405       1817.96       1849.90    
  20  0.556358     -0.586343      -11.8671       11.8671       1855.97       1867.84    
  21  0.449978     -0.798557      -16.1621       16.1621       1858.79       1874.96    
  22  0.392109     -0.936215      -18.9482       18.9482       1860.51       1879.45    
  23  0.438064     -0.825391      -16.7052       16.7052       1862.49       1879.20    
  24  0.534146     -0.627086      -12.6917       12.6917       1839.75       1852.44    
  25  0.936924     -0.651528E-01  -1.31864       1.31864       1879.41       1880.73    
  26  0.810957     -0.209540      -4.24091       4.24091       1858.89       1863.14    
  27  0.874065     -0.134601      -2.72421       2.72421       1852.82       1855.54    
  28  0.370024     -0.994188      -20.1215       20.1215       1872.69       1892.81    
  29  0.600923     -0.509288      -10.3076       10.3076       1886.07       1896.38    
  30  0.138113E-01  -4.28227      -86.6695       86.6695       1887.27       1973.94    
  31  0.979527E-01  -2.32327      -47.0211       47.0211       1908.00       1955.03    
  32  0.917800     -0.857754E-01  -1.73602       1.73602       1901.78       1903.52    
  33  0.882941     -0.124497      -2.51971       2.51971       1904.36       1906.88    
  34  0.608441E-01  -2.79944      -56.6583       56.6583       1905.86       1962.52    
  35  0.536097E-01  -2.92603      -59.2203       59.2203       1910.38       1969.60    
  36  0.786939     -0.239605      -4.84940       4.84940       1913.96       1918.81    
  37  0.540054     -0.616087      -12.4691       12.4691       1926.23       1938.70    
  38  0.374443     -0.982316      -19.8813       19.8813       1911.00       1930.88    
  39  0.842126     -0.171825      -3.47760       3.47760       1925.45       1928.93    
  40  0.534170     -0.627041      -12.6908       12.6908       1913.70       1926.40    
  41  0.314687      -1.15618      -23.4000       23.4000       1928.88       1952.28    
  42  0.265277E-01  -3.62957      -73.4594       73.4594       1907.59       1981.05    
  43  0.357649      -1.02820      -20.8100       20.8100       1929.90       1950.71    
  44  0.861388E-01  -2.45180      -49.6223       49.6223       1922.56       1972.18    
  45  0.566899     -0.567573      -11.4872       11.4872       1940.25       1951.73    
  46  0.111209      -2.19635      -44.4522       44.4522       1906.36       1950.81    
  47  0.734273     -0.308875      -6.25137       6.25137       1957.87       1964.12    
  48  0.709398     -0.343338      -6.94888       6.94888       1951.17       1958.12    
  49  0.250023      -1.38620      -28.0555       28.0555       1957.84       1985.90    
  50  0.549980     -0.597874      -12.1005       12.1005       1952.51       1964.61    
  51  0.639508     -0.447057      -9.04805       9.04805       1943.73       1952.78    
  52  0.175228E-02  -6.34684      -128.455       128.455       1963.91       2092.37    
  53  0.496773     -0.699622      -14.1598       14.1598       1966.08       1980.24    
  54  0.157058      -1.85114      -37.4655       37.4655       1950.71       1988.17    
  55  0.696226     -0.362081      -7.32821       7.32821       1962.55       1969.88    
  56  0.287746      -1.24568      -25.2115       25.2115       1925.30       1950.51    
  57  0.325977      -1.12093      -22.6867       22.6867       1948.90       1971.58    
  58  0.455904     -0.785472      -15.8973       15.8973       1812.16       1828.05    
loop,thermsimp(1:2)       66   56.7272       7.34388    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    398       1925.41         68.54          1.16         39.20          0.39          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1925.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       66
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       67
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      397     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497686     -0.697786      -14.1226       14.1226       1717.59       1731.71    
   2  0.830216     -0.186069      -3.76588       3.76588       1776.18       1779.95    
   3  0.267818      -1.31745      -26.6640       26.6640       1774.12       1800.78    
   4  0.400053     -0.916159      -18.5423       18.5423       1787.50       1806.05    
   5  0.411376     -0.888247      -17.9774       17.9774       1782.09       1800.07    
   6  0.499480     -0.694187      -14.0498       14.0498       1780.96       1795.01    
   7  0.739436     -0.301868      -6.10956       6.10956       1795.34       1801.45    
   8  0.115625      -2.15740      -43.6640       43.6640       1777.11       1820.78    
   9  0.377594     -0.973934      -19.7116       19.7116       1765.83       1785.55    
  10  0.661021     -0.413970      -8.37840       8.37840       1788.41       1796.79    
  11  0.765898     -0.266707      -5.39792       5.39792       1809.52       1814.92    
  12  0.608440     -0.496856      -10.0560       10.0560       1812.16       1822.21    
  13  0.366717      -1.00316      -20.3032       20.3032       1796.75       1817.05    
  14  0.853974     -0.157855      -3.19485       3.19485       1804.23       1807.43    
  15  0.140386      -1.96336      -39.7368       39.7368       1817.96       1857.69    
  16  0.882944     -0.124493      -2.51963       2.51963       1839.75       1842.27    
  17  0.760784E-01  -2.57599      -52.1359       52.1359       1815.08       1867.22    
  18  0.279297      -1.27548      -25.8147       25.8147       1852.82       1878.64    
  19  0.142650      -1.94736      -39.4130       39.4130       1835.62       1875.03    
  20  0.814861E-01  -2.50732      -50.7461       50.7461       1858.89       1909.64    
  21  0.801810     -0.220884      -4.47051       4.47051       1855.97       1860.44    
  22  0.611082     -0.492524      -9.96828       9.96828       1858.79       1868.76    
  23  0.599700E-01  -2.81391      -56.9512       56.9512       1862.49       1919.44    
  24  0.948704     -0.526589E-01  -1.06577       1.06577       1860.51       1861.57    
  25  0.992398     -0.763115E-02 -0.154448      0.154448       1879.41       1879.57    
  26  0.880498     -0.127268      -2.57580       2.57580       1872.69       1875.26    
  27  0.948340E-01  -2.35563      -47.6759       47.6759       1886.07       1933.75    
  28  0.982098     -0.180639E-01 -0.365599      0.365599       1840.67       1841.03    
  29  0.217652      -1.52486      -30.8619       30.8619       1901.78       1932.65    
  30  0.261545      -1.34115      -27.1437       27.1437       1841.83       1868.97    
  31  0.834479     -0.180948      -3.66224       3.66224       1904.36       1908.03    
  32  0.162789      -1.81530      -36.7402       36.7402       1913.96       1950.70    
  33  0.290203      -1.23718      -25.0394       25.0394       1798.54       1823.58    
  34  0.102916E-01  -4.57642      -92.6230       92.6230       1913.70       2006.33    
  35  0.834050     -0.181462      -3.67263       3.67263       1925.45       1929.13    
  36  0.965796     -0.348022E-01 -0.704368      0.704368       1911.00       1911.70    
  37  0.141898      -1.95265      -39.5199       39.5199       1926.23       1965.75    
  38  0.548366     -0.600813      -12.1600       12.1600       1925.30       1937.46    
  39  0.958993     -0.418714E-01 -0.847442      0.847442       1929.90       1930.75    
  40  0.241914      -1.41918      -28.7229       28.7229       1906.36       1935.08    
  41  0.696563     -0.361597      -7.31841       7.31841       1940.25       1947.57    
  42  0.946714     -0.547579E-01  -1.10825       1.10825       1928.88       1929.98    
  43  0.690193     -0.370783      -7.50434       7.50434       1943.73       1951.23    
  44  0.303289      -1.19307      -24.1467       24.1467       1908.00       1932.15    
  45  0.878282     -0.129787      -2.62679       2.62679       1951.17       1953.80    
  46  0.712048     -0.339610      -6.87341       6.87341       1905.86       1912.73    
  47  0.967351     -0.331944E-01 -0.671827      0.671827       1957.87       1958.54    
  48  0.718486     -0.330609      -6.69125       6.69125       1952.51       1959.20    
  49  0.805024     -0.216883      -4.38954       4.38954       1910.38       1914.77    
  50  0.441546     -0.817473      -16.5450       16.5450       1962.55       1979.10    
  51  0.404968     -0.903946      -18.2951       18.2951       1948.90       1967.19    
  52  0.240159      -1.42645      -28.8702       28.8702       1922.56       1951.43    
  53  0.520187     -0.653567      -13.2276       13.2276       1887.27       1900.49    
  54  0.508825     -0.675651      -13.6746       13.6746       1966.08       1979.76    
  55  0.408928     -0.894217      -18.0982       18.0982       1907.59       1925.68    
  56  0.231472      -1.46330      -29.6159       29.6159       1957.84       1987.46    
  57  0.708505     -0.344598      -6.97438       6.97438       1950.71       1957.68    
  58  0.620619     -0.477037      -9.65484       9.65484       1925.41       1935.07    
loop,thermsimp(1:2)       67   14.1226       3.76588    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399       1786.37         68.53          1.16         39.49          0.40          0.05        109.62
Just calling func    0   0        109.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1786.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       67
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       68
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      398     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.260355      -1.34571      -27.2361       27.2361       1717.59       1744.82    
   2  0.567351     -0.566778      -11.4711       11.4711       1776.18       1787.65    
   3  0.212111      -1.55064      -31.3837       31.3837       1765.83       1797.22    
   4  0.384323     -0.956272      -19.3541       19.3541       1780.96       1800.31    
   5  0.379704     -0.968364      -19.5989       19.5989       1788.41       1808.01    
   6  0.221298      -1.50824      -30.5256       30.5256       1782.09       1812.61    
   7  0.729922     -0.314818      -6.37164       6.37164       1774.12       1780.49    
   8  0.646542     -0.436117      -8.82663       8.82663       1795.34       1804.17    
   9  0.839436     -0.175025      -3.54236       3.54236       1787.50       1791.05    
  10  0.808281     -0.212846      -4.30782       4.30782       1804.23       1808.54    
  11  0.724296     -0.322555      -6.52824       6.52824       1809.52       1816.05    
  12  0.161395      -1.82390      -36.9142       36.9142       1796.75       1833.66    
  13  0.691210     -0.369312      -7.47456       7.47456       1777.11       1784.59    
  14  0.664974     -0.408007      -8.25772       8.25772       1812.16       1820.41    
  15  0.835640     -0.179558      -3.63409       3.63409       1798.54       1802.17    
  16  0.345121      -1.06386      -21.5317       21.5317       1840.67       1862.20    
  17  0.910776     -0.934579E-01  -1.89151       1.89151       1839.75       1841.64    
  18  0.482102     -0.729599      -14.7665       14.7665       1817.96       1832.72    
  19  0.828243     -0.188449      -3.81405       3.81405       1855.97       1859.79    
  20  0.805680     -0.216069      -4.37305       4.37305       1860.51       1864.88    
  21  0.694570     -0.364462      -7.37641       7.37641       1815.08       1822.46    
  22  0.304846      -1.18795      -24.0431       24.0431       1858.79       1882.84    
  23  0.212327      -1.54963      -31.3632       31.3632       1841.83       1873.19    
  24  0.670398     -0.399883      -8.09330       8.09330       1835.62       1843.71    
  25  0.466041     -0.763481      -15.4522       15.4522       1872.69       1888.14    
  26  0.500338E-01  -2.99506      -60.6174       60.6174       1852.82       1913.44    
  27  0.367939     -0.999839      -20.2359       20.2359       1879.41       1899.65    
  28  0.973691     -0.266612E-01 -0.539600      0.539600       1887.27       1887.81    
  29  0.688056     -0.373885      -7.56712       7.56712       1904.36       1911.93    
  30  0.219376      -1.51697      -30.7021       30.7021       1858.89       1889.60    
  31  0.135232      -2.00076      -40.4938       40.4938       1911.00       1951.49    
  32  0.796052     -0.228090      -4.61636       4.61636       1905.86       1910.48    
  33  0.596618E-01  -2.81906      -57.0555       57.0555       1910.38       1967.44    
  34  0.352128      -1.04376      -21.1248       21.1248       1862.49       1883.62    
  35  0.903448     -0.101537      -2.05502       2.05502       1907.59       1909.64    
  36  0.782446E-01  -2.54792      -51.5677       51.5677       1925.45       1977.02    
  37  0.992989     -0.703619E-02 -0.142407      0.142407       1928.88       1929.02    
  38  0.509863     -0.673613      -13.6334       13.6334       1929.90       1943.54    
  39  0.285505E-01  -3.55608      -71.9721       71.9721       1908.00       1979.98    
  40  0.117310      -2.14294      -43.3712       43.3712       1901.78       1945.15    
  41  0.608089     -0.497434      -10.0676       10.0676       1886.07       1896.14    
  42  0.516045     -0.661561      -13.3894       13.3894       1925.41       1938.80    
  43  0.505745     -0.681722      -13.7975       13.7975       1906.36       1920.15    
  44  0.273977      -1.29471      -26.2039       26.2039       1925.30       1951.50    
  45  0.776372     -0.253123      -5.12300       5.12300       1940.25       1945.37    
  46  0.813260     -0.206705      -4.18353       4.18353       1913.96       1918.14    
  47  0.823722     -0.193922      -3.92483       3.92483       1943.73       1947.65    
  48  0.690618     -0.370169      -7.49191       7.49191       1922.56       1930.05    
  49  0.906576     -0.980805E-01  -1.98507       1.98507       1951.17       1953.15    
  50  0.677790     -0.388918      -7.87138       7.87138       1950.71       1958.58    
  51  0.179693      -1.71651      -34.7406       34.7406       1957.87       1992.61    
  52  0.660035     -0.415463      -8.40863       8.40863       1952.51       1960.92    
  53  0.565851     -0.569425      -11.5247       11.5247       1926.23       1937.76    
  54  0.973172     -0.271940E-01 -0.550384      0.550384       1948.90       1949.45    
  55  0.243227      -1.41376      -28.6133       28.6133       1962.55       1991.17    
  56  0.106189      -2.24253      -45.3869       45.3869       1966.08       2011.47    
  57  0.360424      -1.02047      -20.6535       20.6535       1957.84       1978.49    
  58  0.779729     -0.248808      -5.03567       5.03567       1786.37       1791.40    
loop,thermsimp(1:2)       68   27.2361       11.4711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400       1820.53         68.57          1.16         39.05          0.57          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1820.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       68
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       69
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      400
neval,tstepnext:      399     400

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427727     -0.849271      -17.1885       17.1885       1717.59       1734.78    
   2  0.300580      -1.20204      -24.3283       24.3283       1774.12       1798.45    
   3  0.440777     -0.819215      -16.5802       16.5802       1777.11       1793.69    
   4  0.119397      -2.12530      -43.0142       43.0142       1776.18       1819.19    
   5  0.324114      -1.12666      -22.8026       22.8026       1787.50       1810.31    
   6  0.708589E-01  -2.64706      -53.5744       53.5744       1786.37       1839.94    
   7  0.234973      -1.44829      -29.3121       29.3121       1765.83       1795.15    
   8  0.630612     -0.461064      -9.33155       9.33155       1780.96       1790.29    
   9  0.637778     -0.449765      -9.10286       9.10286       1798.54       1807.64    
  10  0.952774     -0.483777E-01 -0.979125      0.979125       1795.34       1796.32    
  11  0.156845      -1.85249      -37.4929       37.4929       1788.41       1825.90    
  12  0.386146     -0.951540      -19.2584       19.2584       1804.23       1823.49    
  13  0.233038      -1.45655      -29.4794       29.4794       1782.09       1811.57    
  14  0.748513     -0.289667      -5.86262       5.86262       1809.52       1815.38    
  15  0.829626     -0.186780      -3.78027       3.78027       1812.16       1815.94    
  16  0.108384      -2.22208      -44.9730       44.9730       1815.08       1860.06    
  17  0.632628     -0.457873      -9.26696       9.26696       1817.96       1827.22    
  18  0.989524     -0.105314E-01 -0.213147      0.213147       1796.75       1796.96    
  19  0.151245      -1.88886      -38.2289       38.2289       1839.75       1877.98    
  20  0.898996E-01  -2.40906      -48.7574       48.7574       1835.62       1884.37    
  21  0.858841     -0.152172      -3.07982       3.07982       1855.97       1859.05    
  22  0.849417     -0.163205      -3.30312       3.30312       1840.67       1843.97    
  23  0.446510     -0.806293      -16.3187       16.3187       1860.51       1876.82    
  24  0.989123     -0.109366E-01 -0.221348      0.221348       1841.83       1842.05    
  25  0.898953E-01  -2.40911      -48.7584       48.7584       1858.79       1907.55    
  26  0.433704     -0.835393      -16.9077       16.9077       1862.49       1879.40    
  27  0.410713     -0.889861      -18.0100       18.0100       1887.27       1905.28    
  28  0.310044      -1.17104      -23.7009       23.7009       1872.69       1896.39    
  29  0.888110     -0.118660      -2.40158       2.40158       1858.89       1861.30    
  30  0.661223     -0.413664      -8.37221       8.37221       1886.07       1894.45    
  31  0.519718     -0.654468      -13.2459       13.2459       1879.41       1892.66    
  32  0.818791     -0.199927      -4.04635       4.04635       1907.59       1911.63    
  33  0.981929     -0.182366E-01 -0.369093      0.369093       1905.86       1906.23    
  34  0.308824E-01  -3.47757      -70.3831       70.3831       1904.36       1974.75    
  35  0.995192E-01  -2.30740      -46.6999       46.6999       1852.82       1899.52    
  36  0.292141      -1.23052      -24.9047       24.9047       1913.96       1938.86    
  37  0.546956     -0.603387      -12.2120       12.2120       1906.36       1918.57    
  38  0.875324     -0.133161      -2.69507       2.69507       1928.88       1931.57    
  39  0.497859     -0.697439      -14.1156       14.1156       1922.56       1936.68    
  40  0.808711     -0.212313      -4.29704       4.29704       1926.23       1930.53    
  41  0.916666     -0.870126E-01  -1.76106       1.76106       1925.41       1927.17    
  42  0.574110     -0.554933      -11.2314       11.2314       1929.90       1941.14    
  43  0.908171     -0.963226E-01  -1.94949       1.94949       1901.78       1903.73    
  44  0.243373      -1.41316      -28.6012       28.6012       1940.25       1968.85    
  45  0.647413     -0.434771      -8.79941       8.79941       1943.73       1952.53    
  46  0.309907      -1.17148      -23.7098       23.7098       1948.90       1972.61    
  47  0.167934      -1.78419      -36.1105       36.1105       1911.00       1947.11    
  48  0.676784     -0.390402      -7.90142       7.90142       1925.30       1933.20    
  49  0.769515     -0.261995      -5.30255       5.30255       1951.17       1956.47    
  50  0.822671     -0.195199      -3.95066       3.95066       1950.71       1954.66    
  51  0.299010E-01  -3.50986      -71.0367       71.0367       1952.51       2023.55    
  52  0.803018     -0.219378      -4.44002       4.44002       1910.38       1914.82    
  53  0.487353E-01  -3.02135      -61.1496       61.1496       1925.45       1986.60    
  54  0.334246      -1.09588      -22.1797       22.1797       1957.84       1980.02    
  55  0.263436      -1.33394      -26.9979       26.9979       1908.00       1935.00    
  56  0.475227     -0.743963      -15.0572       15.0572       1962.55       1977.61    
  57  0.962498     -0.382236E-01 -0.773614      0.773614       1957.87       1958.64    
  58  0.517461     -0.658822      -13.3340       13.3340       1820.53       1833.87    
loop,thermsimp(1:2)       69   17.1885       24.3283    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    401       2831.70         68.50          1.18         39.16          0.48          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    402       2330.26         68.56          1.18         38.99          0.54          0.05        109.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    2831.7        3.445     -2.528      3.248     -102.6     0.2871    
                      0.1676     -4.081     -99.70      4.811     0.7279    

                       3.903     -2.826      1.540      5895.      7000.    

                      -2.074      0.000      0.000      0.000     -1.221    



                      -1.925      0.000      0.000      7000.      527.1    

                      -1.479     -4.910     -9.248     -7.556      7.445    

                      -13.62     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.1764E-01 0.1569     0.6771E-01 0.1158    

                     -0.2486     0.1174     0.1482     0.1038     0.7743E-01



                     -0.8604    -0.6192      0.000     0.1541E-01 0.1542    

                      0.1508     0.2124    -0.7116     0.1015     0.3111    

                      0.1477     0.3780E-01-0.4007     -1.634      7000.    



                      -1.239     -1.261     -2.142     -1.982    -0.3807    

                     -0.3252      9.320      8.465    -0.1597E+05 -5.646    

                     -0.2151     -2.367      8.726      9.078    -0.1969E+05



                      -6.000     0.4585    -0.1730      8.862      9.039    

                     -0.1944E+05 -6.000    -0.7910E-01-0.2991      9.721    

                       8.919    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4   1952.51
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.2392               400
loop is:       69
neval is:      401
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     402       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    403       1716.43         68.53          1.14         39.15          0.37          0.05        109.24
iter,obj,time:    404       1723.86         68.45          1.14         39.19          0.49          0.05        109.33
iter,obj,time:    405       1726.28         68.55          1.13         39.01          0.80          0.05        109.54
iter,obj,time:    406       1748.75         68.44          1.14         39.10          0.58          0.05        109.30
iter,obj,time:    407       1719.50         68.49          1.12         38.97          0.59          0.05        109.21
iter,obj,time:    408       1718.00         68.52          1.14         39.04          0.54          0.05        109.29
iter,obj,time:    409       1742.90         68.52          1.14         39.08          0.48          0.05        109.26
iter,obj,time:    410       1745.80         68.46          1.12         39.06          0.58          0.05        109.26
iter,obj,time:    411       1731.74         68.20          1.15         39.87          0.39          0.05        109.66
iter,obj,time:    412       1742.13         68.23          1.16         39.26          0.52          0.05        109.21
iter,obj,time:    413       1737.68         68.23          1.16         39.17          0.73          0.05        109.33
iter,obj,time:    414       1768.86         68.40          1.12         39.31          0.63          0.05        109.51
iter,obj,time:    415       1729.80         68.53          1.15         38.91          0.69          0.05        109.33
iter,obj,time:    416       1726.24         68.42          1.21         39.26          0.30          0.05        109.24
iter,obj,time:    417       1741.70         68.45          1.15         39.41          0.46          0.05        109.52
iter,obj,time:    418       1746.48         68.50          1.12         39.07          0.50          0.05        109.25
iter,obj,time:    419       1733.46         68.40          1.18         39.17          0.45          0.05        109.24
iter,obj,time:    420       1762.46         68.27          1.15         39.36          0.43          0.05        109.25
iter,obj,time:    421       1769.78         68.20          1.15         39.28          0.62          0.05        109.30
iter,obj,time:    422       1743.24         68.31          1.20         39.63          0.21          0.05        109.41
iter,obj,time:    423       1745.63         68.24          1.18         39.43          0.37          0.05        109.26
iter,obj,time:    424       1726.01         68.28          1.16         39.23          0.54          0.05        109.25
iter,obj,time:    425       1718.88         68.26          1.15         39.53          0.35          0.05        109.33
iter,obj,time:    426       1743.77         68.39          1.16         39.44          0.23          0.05        109.27
iter,obj,time:    427       1779.22         68.42          1.12         38.98          0.66          0.05        109.24
iter,obj,time:    428       1756.87         68.53          1.15         39.19          0.45          0.05        109.36
iter,obj,time:    429       1752.70         68.53          1.12         39.00          0.63          0.05        109.32
iter,obj,time:    430       1765.98         68.40          1.11         38.93          0.79          0.05        109.28
iter,obj,time:    431       1792.26         68.46          1.12         38.95          0.67          0.05        109.25
iter,obj,time:    432       1723.95         68.53          1.13         38.99          0.69          0.05        109.39
iter,obj,time:    433       1733.15         68.47          1.13         39.10          0.52          0.05        109.28
iter,obj,time:    434       1791.57         68.45          1.16         39.12          0.46          0.05        109.25
iter,obj,time:    435       1790.58         68.36          1.20         39.29          0.32          0.05        109.22
iter,obj,time:    436       1748.94         68.42          1.14         39.08          0.65          0.05        109.34
iter,obj,time:    437       1761.86         68.53          1.15         39.12          0.32          0.05        109.17
iter,obj,time:    438       1775.74         68.47          1.13         39.05          0.58          0.05        109.28
iter,obj,time:    439       1761.10         68.26          1.15         39.35          0.43          0.05        109.25
iter,obj,time:    440       1756.22         68.32          1.19         39.35          0.43          0.05        109.34
iter,obj,time:    441       1767.03         68.40          1.17         39.21          0.39          0.05        109.23
iter,obj,time:    442       1790.28         68.17          1.16         39.34          0.46          0.05        109.18
iter,obj,time:    443       1783.81         68.46          1.13         39.09          0.56          0.05        109.29
iter,obj,time:    444       1791.17         68.36          1.18         39.42          0.19          0.05        109.20
iter,obj,time:    445       1795.11         68.28          1.16         39.51          0.20          0.05        109.21
iter,obj,time:    446       1774.67         68.29          1.16         39.50          0.24          0.05        109.24
iter,obj,time:    447       1733.65         68.18          1.17         39.33          0.50          0.05        109.22
iter,obj,time:    448       1780.99         68.45          1.20         39.28          0.33          0.05        109.29
iter,obj,time:    449       1775.88         68.45          1.21         39.09          0.44          0.05        109.25
iter,obj,time:    450       1808.41         68.34          1.15         39.27          0.47          0.05        109.28
iter,obj,time:    451       1791.84         68.26          1.16         39.33          0.47          0.05        109.28
iter,obj,time:    452       1810.92         68.42          1.18         39.21          0.48          0.05        109.35
iter,obj,time:    453       1788.68         68.56          1.13         38.95          0.60          0.05        109.28
iter,obj,time:    454       1753.21         68.43          1.14         39.52          0.40          0.05        109.53
iter,obj,time:    455       1785.45         68.45          1.12         38.93          0.72          0.05        109.27
iter,obj,time:    456       1785.55         68.44          1.13         39.02          0.61          0.05        109.25
iter,obj,time:    457       1805.05         68.43          1.13         38.99          0.69          0.05        109.28
iter,obj,time:    458       1793.97         68.26          1.20         39.68          0.07          0.05        109.27
iter,obj,time:    459       1842.10         68.47          1.14         38.92          0.62          0.05        109.20


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     460      58
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     458




loop,nloop:      69      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    20.2392               400
loop is:       70
neval is:      458


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    10.1196               457

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      457
neval,tstepnext:      458     457

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652194     -0.427413      -4.32524       4.32524       1717.59       1721.91    
   2  0.835191     -0.180095      -1.82249       1.82249       1716.43       1718.26    
   3  0.914573     -0.892985E-01 -0.903664      0.903664       1723.86       1724.76    
   4  0.936996     -0.650763E-01 -0.658545      0.658545       1726.28       1726.94    
   5  0.343704E-01  -3.37056      -34.1086       34.1086       1748.75       1782.86    
   6  0.993168     -0.685505E-02 -0.693703E-01  0.693703E-01   1719.50       1719.57    
   7  0.124012      -2.08737      -21.1233       21.1233       1718.00       1739.12    
   8  0.283107E-01  -3.56451      -36.0714       36.0714       1742.90       1778.97    
   9  0.626631     -0.467398      -4.72987       4.72987       1745.80       1750.53    
  10  0.349067      -1.05249      -10.6508       10.6508       1731.74       1742.39    
  11  0.467982E-01  -3.06191      -30.9852       30.9852       1742.13       1773.12    
  12  0.682524E-01  -2.68454      -27.1664       27.1664       1737.68       1764.85    
  13  0.320603      -1.13755      -11.5116       11.5116       1768.86       1780.37    
  14  0.485411     -0.722759      -7.31402       7.31402       1729.80       1737.11    
  15  0.174639      -1.74503      -17.6590       17.6590       1726.24       1743.90    
  16  0.688366     -0.373434      -3.77900       3.77900       1741.70       1745.48    
  17  0.403792     -0.906856      -9.17700       9.17700       1746.48       1755.65    
  18  0.237008      -1.43966      -14.5688       14.5688       1733.46       1748.03    
  19  0.491286     -0.710728      -7.19227       7.19227       1762.46       1769.65    
  20  0.187095      -1.67614      -16.9618       16.9618       1769.78       1786.74    
  21  0.365844      -1.00555      -10.1757       10.1757       1743.24       1753.41    
  22  0.899359     -0.106073      -1.07341       1.07341       1745.63       1746.70    
  23  0.806501     -0.215051      -2.17622       2.17622       1726.01       1728.18    
  24  0.538739     -0.618525      -6.25921       6.25921       1718.88       1725.14    
  25  0.184808      -1.68844      -17.0863       17.0863       1743.77       1760.85    
  26  0.760157     -0.274230      -2.77509       2.77509       1779.22       1782.00    
  27  0.920762     -0.825532E-01 -0.835404      0.835404       1756.87       1757.70    
  28  0.142687      -1.94710      -19.7039       19.7039       1752.70       1772.41    
  29  0.992793     -0.723301E-02 -0.731951E-01  0.731951E-01   1765.98       1766.05    
  30  0.898687     -0.106820      -1.08098       1.08098       1792.26       1793.34    
  31  0.263660      -1.33309      -13.4903       13.4903       1723.95       1737.45    
  32  0.971768     -0.286379E-01 -0.289804      0.289804       1733.15       1733.44    
  33  0.387765     -0.947357      -9.58685       9.58685       1791.57       1801.15    
  34  0.574064     -0.555014      -5.61651       5.61651       1790.58       1796.20    
  35  0.370709     -0.992338      -10.0420       10.0420       1748.94       1758.99    
  36  0.483362E-01  -3.02957      -30.6580       30.6580       1761.86       1792.52    
  37  0.583245     -0.539148      -5.45595       5.45595       1775.74       1781.19    
  38  0.293950E-01  -3.52693      -35.6911       35.6911       1761.10       1796.79    
  39  0.961670     -0.390837E-01 -0.395510      0.395510       1756.22       1756.61    
  40  0.252096      -1.37794      -13.9442       13.9442       1767.03       1780.97    
  41  0.260270      -1.34604      -13.6213       13.6213       1790.28       1803.91    
  42  0.449392     -0.799860      -8.09425       8.09425       1783.81       1791.90    
  43  0.845367     -0.167985      -1.69994       1.69994       1791.17       1792.87    
  44  0.365557      -1.00633      -10.1837       10.1837       1795.11       1805.30    
  45  0.374516     -0.982121      -9.93866       9.93866       1774.67       1784.61    
  46  0.704289     -0.350566      -3.54758       3.54758       1733.65       1737.20    
  47  0.784654     -0.242512      -2.45412       2.45412       1780.99       1783.44    
  48  0.566446     -0.568374      -5.75171       5.75171       1775.88       1781.64    
  49  0.932234     -0.701720E-01 -0.710111      0.710111       1808.41       1809.12    
  50  0.361623      -1.01715      -10.2932       10.2932       1791.84       1802.13    
  51  0.289968      -1.23799      -12.5279       12.5279       1810.92       1823.45    
  52  0.173332      -1.75255      -17.7351       17.7351       1788.68       1806.41    
  53  0.639885     -0.446466      -4.51805       4.51805       1753.21       1757.72    
  54  0.960811     -0.399777E-01 -0.404557      0.404557       1785.45       1785.86    
  55  0.454979     -0.787504      -7.96921       7.96921       1785.55       1793.52    
  56  0.464001     -0.767868      -7.77050       7.77050       1805.05       1812.82    
  57  0.910483     -0.937798E-01 -0.949013      0.949013       1793.97       1794.92    
  58  0.485489     -0.722599      -7.31240       7.31240       1842.10       1849.41    
loop,thermsimp(1:2)       70   4.32524       1.82249    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    460       2296.19         68.63          1.17         39.06          0.47          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    461       1824.78         68.32          1.19         39.35          0.42          0.05        109.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  460    1824.8        3.123     -2.913      3.240     -102.6     0.6973E-01
                      0.1162    -0.8824E-01 -99.70      4.517     0.3816    

                       3.590     -3.122      1.540      6494.      7000.    

                      -2.084      0.000      0.000      0.000     -1.221    



                      -2.095      0.000      0.000      7000.      691.2    

                      -1.497     -4.084     -7.485     -8.076      7.249    

                      -13.48     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.2725E-01 0.1093     0.7897E-01 0.9483E-01

                     -0.2486     0.1214     0.9989E-01 0.7550E-01 0.2268E-01



                     -0.8754    -0.6556      0.000    -0.2973E-01 0.2038    

                      0.1343     0.2153    -0.7116     0.9286E-01 0.2475    

                      0.1382     0.7904E-01-0.3943     -1.590      7000.    



                      -1.239     -1.235     -2.142     -1.982    -0.3807    

                     -0.3252      9.262      8.457    -0.1674E+05 -5.595    

                     -0.3237     -2.311      8.709      9.131    -0.1969E+05



                      -6.000     0.4955     0.2206E-01  8.874      9.062    

                     -0.1944E+05 -6.000     0.1382E-01-0.2799      9.749    

                       8.907    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1824.78
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1196               457
loop is:       70
neval is:      460
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    10.1196               457
loop is:       71
neval is:      460


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    5.05979               514

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      460     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993388     -0.663381E-02 -0.335657E-01  0.335657E-01   1716.43       1716.47    
   2  0.170387      -1.76968      -8.95422       8.95422       1719.50       1728.45    
   3  0.430235     -0.843424      -4.26755       4.26755       1717.59       1721.86    
   4  0.932962     -0.693906E-01 -0.351102      0.351102       1723.86       1724.21    
   5  0.723435     -0.323745      -1.63808       1.63808       1718.88       1720.52    
   6  0.251650E-01  -3.68230      -18.6317       18.6317       1726.28       1744.91    
   7  0.763909     -0.269307      -1.36264       1.36264       1726.01       1727.37    
   8  0.754456     -0.281759      -1.42564       1.42564       1733.15       1734.57    
   9  0.999559     -0.441576E-03 -0.223428E-02  0.223428E-02   1729.80       1729.80    
  10  0.643558     -0.440744      -2.23007       2.23007       1733.65       1735.88    
  11  0.629665E-01  -2.76515      -13.9911       13.9911       1723.95       1737.95    
  12  0.649053     -0.432241      -2.18705       2.18705       1718.00       1720.19    
  13  0.399773E-01  -3.21944      -16.2897       16.2897       1731.74       1748.03    
  14  0.849328     -0.163310     -0.826314      0.826314       1726.24       1727.07    
  15  0.391842E-01  -3.23948      -16.3911       16.3911       1741.70       1758.09    
  16  0.105710      -2.24706      -11.3696       11.3696       1745.63       1757.00    
  17  0.660078     -0.415397      -2.10182       2.10182       1733.46       1735.56    
  18  0.353251      -1.04058      -5.26510       5.26510       1745.80       1751.06    
  19  0.454778     -0.787946      -3.98684       3.98684       1743.24       1747.22    
  20  0.572414     -0.557893      -2.82282       2.82282       1746.48       1749.30    
  21  0.202701      -1.59602      -8.07555       8.07555       1756.22       1764.29    
  22  0.880730     -0.127005     -0.642617      0.642617       1756.87       1757.51    
  23  0.390523     -0.940268      -4.75756       4.75756       1753.21       1757.96    
  24  0.174911      -1.74348      -8.82164       8.82164       1748.94       1757.77    
  25  0.903407     -0.101582     -0.513982      0.513982       1743.77       1744.28    
  26  0.776206     -0.253337      -1.28183       1.28183       1737.68       1738.96    
  27  0.285894      -1.25213      -6.33554       6.33554       1765.98       1772.32    
  28  0.285213      -1.25452      -6.34760       6.34760       1762.46       1768.80    
  29  0.412143     -0.886385      -4.48492       4.48492       1752.70       1757.19    
  30  0.464292     -0.767242      -3.88208       3.88208       1742.13       1746.01    
  31  0.453886     -0.789909      -3.99677       3.99677       1742.90       1746.89    
  32  0.870789     -0.138356     -0.700052      0.700052       1768.86       1769.56    
  33  0.338222      -1.08405      -5.48508       5.48508       1767.03       1772.51    
  34  0.249181      -1.38958      -7.03097       7.03097       1775.74       1782.77    
  35  0.524083     -0.646104      -3.26915       3.26915       1775.88       1779.15    
  36  0.646957     -0.435475      -2.20341       2.20341       1779.22       1781.43    
  37  0.971194     -0.292293E-01 -0.147894      0.147894       1748.75       1748.90    
  38  0.775832     -0.253820      -1.28427       1.28427       1780.99       1782.27    
  39  0.411875     -0.887037      -4.48822       4.48822       1774.67       1779.16    
  40  0.300823      -1.20123      -6.07798       6.07798       1785.45       1791.53    
  41  0.535760     -0.624069      -3.15766       3.15766       1769.78       1772.94    
  42  0.547709     -0.602011      -3.04605       3.04605       1783.81       1786.85    
  43  0.714758     -0.335812      -1.69914       1.69914       1761.86       1763.56    
  44  0.610789E-01  -2.79559      -14.1451       14.1451       1791.17       1805.32    
  45  0.442447     -0.815435      -4.12593       4.12593       1792.26       1796.38    
  46  0.421127E-01  -3.16741      -16.0264       16.0264       1785.55       1801.57    
  47  0.218962      -1.51886      -7.68510       7.68510       1793.97       1801.65    
  48  0.475680     -0.743009      -3.75947       3.75947       1790.58       1794.34    
  49  0.997535     -0.246821E-02 -0.124886E-01  0.124886E-01   1761.10       1761.11    
  50  0.367564      -1.00086      -5.06413       5.06413       1791.57       1796.63    
  51  0.309823E-01  -3.47434      -17.5794       17.5794       1791.84       1809.42    
  52  0.822588     -0.195300     -0.988177      0.988177       1790.28       1791.27    
  53  0.443457E-01  -3.11574      -15.7650       15.7650       1795.11       1810.88    
  54  0.922033     -0.811740E-01 -0.410724      0.410724       1788.68       1789.09    
  55  0.693266     -0.366342      -1.85361       1.85361       1808.41       1810.27    
  56  0.234230      -1.45145      -7.34404       7.34404       1805.05       1812.40    
  57  0.319502      -1.14099      -5.77319       5.77319       1810.92       1816.70    
  58  0.861372     -0.149229     -0.755067      0.755067       1824.78       1825.53    
loop,thermsimp(1:2)       71  0.335657E-01   8.95422    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    462       1813.63         68.53          1.16         39.08          0.49          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1813.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       71
neval is:      461
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       72
neval is:      461


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      461     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244277      -1.40945      -7.13154       7.13154       1716.43       1723.57    
   2  0.308155      -1.17715      -5.95615       5.95615       1718.00       1723.95    
   3  0.782683     -0.245028      -1.23979       1.23979       1718.88       1720.12    
   4  0.760982     -0.273146      -1.38206       1.38206       1717.59       1718.97    
   5  0.429075     -0.846125      -4.28121       4.28121       1723.86       1728.14    
   6  0.736261     -0.306171      -1.54916       1.54916       1726.24       1727.79    
   7  0.460189     -0.776117      -3.92699       3.92699       1726.01       1729.93    
   8  0.933911     -0.683736E-01 -0.345956      0.345956       1719.50       1719.84    
   9  0.460375     -0.775713      -3.92495       3.92495       1729.80       1733.72    
  10  0.939859     -0.620258E-01 -0.313838      0.313838       1733.15       1733.46    
  11  0.550327     -0.597243      -3.02192       3.02192       1733.46       1736.48    
  12  0.480638     -0.732640      -3.70701       3.70701       1733.65       1737.36    
  13  0.252938      -1.37461      -6.95524       6.95524       1723.95       1730.91    
  14  0.536822     -0.622088      -3.14764       3.14764       1737.68       1740.83    
  15  0.363695      -1.01144      -5.11767       5.11767       1743.77       1748.88    
  16  0.279007      -1.27652      -6.45892       6.45892       1726.28       1732.74    
  17  0.164958      -1.80206      -9.11806       9.11806       1742.13       1751.25    
  18  0.207862      -1.57088      -7.94834       7.94834       1742.90       1750.85    
  19  0.926151     -0.767180E-01 -0.388177      0.388177       1743.24       1743.62    
  20  0.931241     -0.712372E-01 -0.360445      0.360445       1731.74       1732.10    
  21  0.410184     -0.891148      -4.50902       4.50902       1748.75       1753.26    
  22  0.180536      -1.71183      -8.66148       8.66148       1746.48       1755.14    
  23  0.505927     -0.681363      -3.44755       3.44755       1745.80       1749.25    
  24  0.950800     -0.504520E-01 -0.255277      0.255277       1745.63       1745.89    
  25  0.530981     -0.633028      -3.20299       3.20299       1752.70       1755.91    
  26  0.878348     -0.129712     -0.656315      0.656315       1756.87       1757.52    
  27  0.699104     -0.357956      -1.81118       1.81118       1748.94       1750.76    
  28  0.795467     -0.228826      -1.15781       1.15781       1753.21       1754.36    
  29  0.828214     -0.188484     -0.953688      0.953688       1741.70       1742.66    
  30  0.840484     -0.173777     -0.879275      0.879275       1761.10       1761.98    
  31  0.916482E-02  -4.69238      -23.7425       23.7425       1761.86       1785.61    
  32  0.965109     -0.355146E-01 -0.179696      0.179696       1756.22       1756.40    
  33  0.686270E-01  -2.67907      -13.5555       13.5555       1762.46       1776.01    
  34  0.777883     -0.251179      -1.27091       1.27091       1768.86       1770.13    
  35  0.424167     -0.857629      -4.33942       4.33942       1765.98       1770.32    
  36  0.422618     -0.861287      -4.35793       4.35793       1767.03       1771.39    
  37  0.202591      -1.59656      -8.07828       8.07828       1769.78       1777.86    
  38  0.520317     -0.653316      -3.30564       3.30564       1775.88       1779.19    
  39  0.918512     -0.850003E-01 -0.430084      0.430084       1774.67       1775.10    
  40  0.516959     -0.659791      -3.33840       3.33840       1779.22       1782.56    
  41  0.477240     -0.739735      -3.74290       3.74290       1780.99       1784.73    
  42  0.520540E-01  -2.95547      -14.9541       14.9541       1775.74       1790.69    
  43  0.304485      -1.18913      -6.01676       6.01676       1783.81       1789.82    
  44  0.879547     -0.128348     -0.649413      0.649413       1788.68       1789.33    
  45  0.297327      -1.21292      -6.13713       6.13713       1790.28       1796.42    
  46  0.320273      -1.13858      -5.76098       5.76098       1785.45       1791.21    
  47  0.503657E-01  -2.98844      -15.1209       15.1209       1790.58       1805.70    
  48  0.836881     -0.178074     -0.901015      0.901015       1792.26       1793.16    
  49  0.550103     -0.597651      -3.02399       3.02399       1791.57       1794.59    
  50  0.407887E-01  -3.19935      -16.1880       16.1880       1785.55       1801.73    
  51  0.583045     -0.539491      -2.72971       2.72971       1793.97       1796.70    
  52  0.696120     -0.362234      -1.83283       1.83283       1791.17       1793.00    
  53  0.326588      -1.11905      -5.66218       5.66218       1791.84       1797.50    
  54  0.499766     -0.693615      -3.50955       3.50955       1808.41       1811.92    
  55  0.858833     -0.152181     -0.770004      0.770004       1795.11       1795.88    
  56  0.414433     -0.880844      -4.45688       4.45688       1805.05       1809.51    
  57  0.518336     -0.657132      -3.32495       3.32495       1810.92       1814.25    
  58  0.948181     -0.532095E-01 -0.269229      0.269229       1813.63       1813.90    
loop,thermsimp(1:2)       72   7.13154       5.95615    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    463       1790.11         68.48          1.17         39.10          0.58          0.05        109.38
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1790.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       72
neval is:      462
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       73
neval is:      462


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      462     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985694     -0.144094E-01 -0.729087E-01  0.729087E-01   1717.59       1717.66    
   2  0.404696     -0.904619      -4.57718       4.57718       1719.50       1724.07    
   3  0.848366     -0.164443     -0.832046      0.832046       1718.88       1719.71    
   4  0.108805      -2.21820      -11.2236       11.2236       1716.43       1727.66    
   5  0.428300     -0.847930      -4.29035       4.29035       1718.00       1722.29    
   6  0.727573     -0.318041      -1.60922       1.60922       1726.24       1727.85    
   7  0.606234     -0.500489      -2.53237       2.53237       1723.86       1726.39    
   8  0.938951     -0.629916E-01 -0.318724      0.318724       1726.01       1726.32    
   9  0.622391     -0.474187      -2.39929       2.39929       1723.95       1726.35    
  10  0.681292E-01  -2.68635      -13.5924       13.5924       1731.74       1745.33    
  11  0.802944     -0.219471      -1.11048       1.11048       1726.28       1727.39    
  12  0.739251     -0.302118      -1.52865       1.52865       1733.15       1734.67    
  13  0.943417     -0.582465E-01 -0.294715      0.294715       1729.80       1730.09    
  14  0.865420E-01  -2.44712      -12.3819       12.3819       1733.46       1745.84    
  15  0.247017      -1.39830      -7.07510       7.07510       1733.65       1740.72    
  16  0.835884     -0.179266     -0.907048      0.907048       1737.68       1738.59    
  17  0.632625     -0.457877      -2.31676       2.31676       1741.70       1744.02    
  18  0.335470      -1.09222      -5.52642       5.52642       1743.24       1748.76    
  19  0.617355     -0.482312      -2.44040       2.44040       1745.63       1748.07    
  20  0.966107E-01  -2.33707      -11.8251       11.8251       1743.77       1755.59    
  21  0.205299      -1.58329      -8.01110       8.01110       1745.80       1753.81    
  22  0.784372     -0.242871      -1.22888       1.22888       1748.94       1750.17    
  23  0.507274     -0.678705      -3.43410       3.43410       1742.90       1746.33    
  24  0.228591      -1.47582      -7.46734       7.46734       1742.13       1749.60    
  25  0.813037     -0.206978      -1.04727       1.04727       1748.75       1749.80    
  26  0.660021E-02  -5.02065      -25.4035       25.4035       1753.21       1778.61    
  27  0.449216     -0.800252      -4.04911       4.04911       1746.48       1750.52    
  28  0.624836     -0.470267      -2.37945       2.37945       1752.70       1755.08    
  29  0.124036      -2.08718      -10.5607       10.5607       1756.22       1766.78    
  30  0.977322     -0.229386E-01 -0.116065      0.116065       1756.87       1756.98    
  31  0.362007      -1.01609      -5.14122       5.14122       1761.10       1766.24    
  32  0.433687     -0.835432      -4.22711       4.22711       1768.86       1773.09    
  33  0.476592     -0.741094      -3.74978       3.74978       1765.98       1769.73    
  34  0.929976     -0.725968E-01 -0.367325      0.367325       1767.03       1767.40    
  35  0.363976      -1.01067      -5.11377       5.11377       1774.67       1779.78    
  36  0.226804      -1.48367      -7.50705       7.50705       1762.46       1769.96    
  37  0.398930     -0.918968      -4.64979       4.64979       1769.78       1774.43    
  38  0.303955      -1.19087      -6.02558       6.02558       1775.88       1781.91    
  39  0.452647     -0.792643      -4.01061       4.01061       1779.22       1783.23    
  40  0.366024      -1.00506      -5.08537       5.08537       1780.99       1786.07    
  41  0.995807     -0.420220E-02 -0.212622E-01  0.212622E-01   1761.86       1761.88    
  42  0.796944     -0.226970      -1.14842       1.14842       1788.68       1789.83    
  43  0.884128     -0.123153     -0.623129      0.623129       1783.81       1784.43    
  44  0.710294     -0.342076      -1.73083       1.73083       1775.74       1777.47    
  45  0.603169     -0.505558      -2.55802       2.55802       1785.45       1788.01    
  46  0.822382     -0.195551     -0.989446      0.989446       1791.17       1792.16    
  47  0.741673E-01  -2.60143      -13.1627       13.1627       1792.26       1805.42    
  48  0.593116     -0.522366      -2.64306       2.64306       1791.57       1794.21    
  49  0.659441     -0.416363      -2.10671       2.10671       1795.11       1797.22    
  50  0.179982      -1.71490      -8.67702       8.67702       1790.28       1798.96    
  51  0.334225      -1.09594      -5.54523       5.54523       1793.97       1799.51    
  52  0.602331E-01  -2.80953      -14.2156       14.2156       1791.84       1806.05    
  53  0.895459     -0.110419     -0.558699      0.558699       1785.55       1786.11    
  54  0.857093     -0.154209     -0.780266      0.780266       1790.58       1791.36    
  55  0.909112     -0.952871E-01 -0.482133      0.482133       1805.05       1805.53    
  56  0.474044     -0.746456      -3.77691       3.77691       1808.41       1812.19    
  57  0.707398     -0.346162      -1.75151       1.75151       1813.63       1815.38    
  58  0.520137     -0.653664      -3.30740       3.30740       1790.11       1793.42    
loop,thermsimp(1:2)       73  0.729087E-01   4.57718    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    464       1825.62         68.55          1.16         39.08          0.46          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1825.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       73
neval is:      463
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       74
neval is:      463


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      463     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.354251E-01  -3.34033      -16.9014       16.9014       1717.59       1734.49    
   2  0.121809      -2.10530      -10.6524       10.6524       1718.88       1729.53    
   3  0.686317E-01  -2.67900      -13.5552       13.5552       1718.00       1731.55    
   4  0.529445     -0.635926      -3.21765       3.21765       1719.50       1722.71    
   5  0.829516     -0.186912     -0.945738      0.945738       1726.01       1726.95    
   6  0.418811     -0.870336      -4.40372       4.40372       1723.95       1728.36    
   7  0.353353      -1.04029      -5.26364       5.26364       1723.86       1729.12    
   8  0.720073     -0.328403      -1.66165       1.66165       1726.28       1727.94    
   9  0.797644     -0.226092      -1.14398       1.14398       1716.43       1717.58    
  10  0.521803     -0.650466      -3.29122       3.29122       1726.24       1729.53    
  11  0.900951     -0.104305     -0.527761      0.527761       1729.80       1730.33    
  12  0.801614     -0.221128      -1.11886       1.11886       1733.15       1734.26    
  13  0.796757     -0.227205      -1.14961       1.14961       1737.68       1738.83    
  14  0.716648     -0.333170      -1.68577       1.68577       1733.65       1735.33    
  15  0.690691     -0.370062      -1.87244       1.87244       1741.70       1743.58    
  16  0.462468     -0.771178      -3.90200       3.90200       1731.74       1735.64    
  17  0.896079     -0.109726     -0.555191      0.555191       1733.46       1734.02    
  18  0.351033E-02  -5.65205      -28.5982       28.5982       1742.90       1771.49    
  19  0.195795E-01  -3.93327      -19.9015       19.9015       1745.63       1765.53    
  20  0.285350E-01  -3.55662      -17.9958       17.9958       1743.24       1761.23    
  21  0.345848E-01  -3.36434      -17.0229       17.0229       1742.13       1759.15    
  22  0.344304      -1.06623      -5.39490       5.39490       1748.75       1754.15    
  23  0.251512      -1.38026      -6.98385       6.98385       1748.94       1755.93    
  24  0.389628E-01  -3.24515      -16.4198       16.4198       1746.48       1762.90    
  25  0.338848      -1.08220      -5.47572       5.47572       1745.80       1751.27    
  26  0.383648     -0.958031      -4.84744       4.84744       1752.70       1757.55    
  27  0.877462     -0.130722     -0.661427      0.661427       1743.77       1744.43    
  28  0.383552     -0.958280      -4.84870       4.84870       1756.87       1761.71    
  29  0.835013     -0.180308     -0.912319      0.912319       1761.86       1762.78    
  30  0.733865     -0.309430      -1.56565       1.56565       1761.10       1762.66    
  31  0.288449      -1.24324      -6.29053       6.29053       1756.22       1762.51    
  32  0.927737     -0.750074E-01 -0.379522      0.379522       1767.03       1767.41    
  33  0.505507     -0.682193      -3.45176       3.45176       1765.98       1769.43    
  34  0.909677     -0.946660E-01 -0.478990      0.478990       1762.46       1762.93    
  35  0.786508     -0.240152      -1.21512       1.21512       1768.86       1770.08    
  36  0.186545      -1.67908      -8.49580       8.49580       1769.78       1778.27    
  37  0.917771     -0.858077E-01 -0.434169      0.434169       1775.74       1776.17    
  38  0.223043      -1.50039      -7.59165       7.59165       1753.21       1760.80    
  39  0.416209     -0.876568      -4.43525       4.43525       1774.67       1779.10    
  40  0.742048     -0.298341      -1.50954       1.50954       1775.88       1777.39    
  41  0.916531     -0.871589E-01 -0.441006      0.441006       1779.22       1779.66    
  42  0.528872     -0.637009      -3.22313       3.22313       1783.81       1787.03    
  43  0.380167     -0.967145      -4.89355       4.89355       1780.99       1785.88    
  44  0.147221      -1.91582      -9.69365       9.69365       1785.55       1795.24    
  45  0.325715      -1.12173      -5.67573       5.67573       1785.45       1791.13    
  46  0.653191     -0.425886      -2.15490       2.15490       1788.68       1790.83    
  47  0.734482     -0.308590      -1.56140       1.56140       1790.58       1792.14    
  48  0.812100E-01  -2.51072      -12.7037       12.7037       1791.17       1803.88    
  49  0.981448     -0.187266E-01 -0.947525E-01  0.947525E-01   1790.11       1790.20    
  50  0.194830      -1.63563      -8.27593       8.27593       1791.57       1799.84    
  51  0.369514     -0.995566      -5.03736       5.03736       1795.11       1800.15    
  52  0.124069      -2.08692      -10.5594       10.5594       1790.28       1800.84    
  53  0.537017     -0.621726      -3.14580       3.14580       1793.97       1797.11    
  54  0.963796     -0.368752E-01 -0.186581      0.186581       1792.26       1792.44    
  55  0.749360     -0.288536      -1.45993       1.45993       1805.05       1806.51    
  56  0.525033     -0.644294      -3.25999       3.25999       1791.84       1795.10    
  57  0.895210     -0.110697     -0.560104      0.560104       1808.41       1808.97    
  58  0.964986     -0.356416E-01 -0.180339      0.180339       1825.62       1825.80    
loop,thermsimp(1:2)       74   16.9014       10.6524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    465       1813.63         68.59          1.15         38.79          0.67          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1813.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       74
neval is:      464
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       75
neval is:      464


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      464     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.825653E-01  -2.49417      -12.6200       12.6200       1716.43       1729.05    
   2  0.822278     -0.195677     -0.990083      0.990083       1719.50       1720.49    
   3  0.815014     -0.204550      -1.03498       1.03498       1726.01       1727.04    
   4  0.207771      -1.57132      -7.95054       7.95054       1726.28       1734.23    
   5  0.392022E-01  -3.23902      -16.3888       16.3888       1723.95       1740.34    
   6  0.798009     -0.225635      -1.14166       1.14166       1723.86       1725.00    
   7  0.946935     -0.545251E-01 -0.275886      0.275886       1718.88       1719.15    
   8  0.143106      -1.94417      -9.83709       9.83709       1726.24       1736.08    
   9  0.485966     -0.721616      -3.65123       3.65123       1729.80       1733.45    
  10  0.789895     -0.235855      -1.19338       1.19338       1718.00       1719.19    
  11  0.191154      -1.65468      -8.37231       8.37231       1733.46       1741.83    
  12  0.556941     -0.585297      -2.96148       2.96148       1733.15       1736.11    
  13  0.354923      -1.03585      -5.24121       5.24121       1717.59       1722.83    
  14  0.206912      -1.57546      -7.97150       7.97150       1733.65       1741.62    
  15  0.295054E-01  -3.52318      -17.8266       17.8266       1731.74       1749.56    
  16  0.531987     -0.631135      -3.19341       3.19341       1737.68       1740.88    
  17  0.552837     -0.592692      -2.99890       2.99890       1741.70       1744.70    
  18  0.230971      -1.46546      -7.41493       7.41493       1743.77       1751.18    
  19  0.879168     -0.128779     -0.651597      0.651597       1745.80       1746.45    
  20  0.463297     -0.769387      -3.89293       3.89293       1748.75       1752.64    
  21  0.405031     -0.903792      -4.57300       4.57300       1748.94       1753.52    
  22  0.297262      -1.21314      -6.13824       6.13824       1752.70       1758.84    
  23  0.418772     -0.870430      -4.40419       4.40419       1742.13       1746.53    
  24  0.596068     -0.517401      -2.61794       2.61794       1753.21       1755.82    
  25  0.720685     -0.327553      -1.65735       1.65735       1743.24       1744.89    
  26  0.756772     -0.278694      -1.41013       1.41013       1756.87       1758.28    
  27  0.231133      -1.46476      -7.41138       7.41138       1756.22       1763.63    
  28  0.783190     -0.244381      -1.23651       1.23651       1761.10       1762.33    
  29  0.913865     -0.900727E-01 -0.455749      0.455749       1761.86       1762.32    
  30  0.690716     -0.370027      -1.87226       1.87226       1746.48       1748.35    
  31  0.187671      -1.67306      -8.46535       8.46535       1762.46       1770.92    
  32  0.558859     -0.581857      -2.94408       2.94408       1745.63       1748.57    
  33  0.377344     -0.974598      -4.93126       4.93126       1767.03       1771.96    
  34  0.800863     -0.222065      -1.12360       1.12360       1765.98       1767.10    
  35  0.717668     -0.331748      -1.67858       1.67858       1768.86       1770.54    
  36  0.408710     -0.894749      -4.52724       4.52724       1742.90       1747.42    
  37  0.744828     -0.294602      -1.49063       1.49063       1775.74       1777.23    
  38  0.366523      -1.00369      -5.07848       5.07848       1775.88       1780.96    
  39  0.558103     -0.583212      -2.95093       2.95093       1769.78       1772.73    
  40  0.993425     -0.659714E-02 -0.333802E-01  0.333802E-01   1774.67       1774.70    
  41  0.892238     -0.114023     -0.576930      0.576930       1779.22       1779.80    
  42  0.527869     -0.638907      -3.23274       3.23274       1780.99       1784.22    
  43  0.805965     -0.215715      -1.09147       1.09147       1783.81       1784.90    
  44  0.425337     -0.854872      -4.32548       4.32548       1790.11       1794.44    
  45  0.553214     -0.592011      -2.99545       2.99545       1788.68       1791.67    
  46  0.961775     -0.389749E-01 -0.197205      0.197205       1785.45       1785.65    
  47  0.721793     -0.326017      -1.64958       1.64958       1790.58       1792.23    
  48  0.734528     -0.308527      -1.56108       1.56108       1792.26       1793.82    
  49  0.838033E-03  -7.08445      -35.8458       35.8458       1791.84       1827.68    
  50  0.898638E-01  -2.40946      -12.1914       12.1914       1785.55       1797.74    
  51  0.139620      -1.96883      -9.96189       9.96189       1793.97       1803.93    
  52  0.360088      -1.02141      -5.16811       5.16811       1791.57       1796.74    
  53  0.167478E-01  -4.08949      -20.6919       20.6919       1795.11       1815.81    
  54  0.503231     -0.686706      -3.47459       3.47459       1790.28       1793.76    
  55  0.896724     -0.109007     -0.551555      0.551555       1791.17       1791.72    
  56  0.986589E-01  -2.31609      -11.7189       11.7189       1805.05       1816.77    
  57  0.481539     -0.730769      -3.69754       3.69754       1808.41       1812.11    
  58  0.300347      -1.20282      -6.08600       6.08600       1813.63       1819.71    
loop,thermsimp(1:2)       75   12.6200      0.990083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    466       1745.08         68.48          1.22         39.34          0.25          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1745.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       75
neval is:      465
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       76
neval is:      465


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      465     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316695      -1.14982      -5.81784       5.81784       1718.88       1724.70    
   2  0.382504     -0.961016      -4.86254       4.86254       1718.00       1722.86    
   3  0.264614      -1.32948      -6.72690       6.72690       1719.50       1726.22    
   4  0.803265     -0.219071      -1.10845       1.10845       1717.59       1718.70    
   5  0.171034      -1.76589      -8.93504       8.93504       1723.86       1732.79    
   6  0.831601     -0.184402     -0.933037      0.933037       1726.01       1726.94    
   7  0.435344     -0.831619      -4.20782       4.20782       1716.43       1720.64    
   8  0.709095     -0.343766      -1.73938       1.73938       1729.80       1731.54    
   9  0.787618     -0.238742      -1.20798       1.20798       1726.28       1727.49    
  10  0.848523E-01  -2.46684      -12.4817       12.4817       1726.24       1738.72    
  11  0.863403     -0.146874     -0.743152      0.743152       1733.15       1733.89    
  12  0.852899E-04  -9.36945      -47.4075       47.4075       1723.95       1771.36    
  13  0.221667      -1.50658      -7.62297       7.62297       1737.68       1745.31    
  14  0.474061E-01  -3.04901      -15.4273       15.4273       1733.65       1749.08    
  15  0.175322      -1.74113      -8.80976       8.80976       1733.46       1742.27    
  16  0.154041      -1.87053      -9.46451       9.46451       1741.70       1751.17    
  17  0.808967     -0.211997      -1.07266       1.07266       1743.24       1744.31    
  18  0.790119     -0.235572      -1.19194       1.19194       1745.80       1746.99    
  19  0.996800     -0.320514E-02 -0.162173E-01  0.162173E-01   1742.13       1742.15    
  20  0.238948      -1.43151      -7.24314       7.24314       1742.90       1750.14    
  21  0.829852     -0.186508     -0.943693      0.943693       1746.48       1747.42    
  22  0.582759     -0.539981      -2.73219       2.73219       1745.63       1748.36    
  23  0.284746      -1.25616      -6.35590       6.35590       1731.74       1738.09    
  24  0.360633      -1.01989      -5.16045       5.16045       1743.77       1748.93    
  25  0.941077     -0.607306E-01 -0.307284      0.307284       1748.75       1749.06    
  26  0.383331     -0.958856      -4.85161       4.85161       1748.94       1753.80    
  27  0.523735     -0.646770      -3.27252       3.27252       1753.21       1756.48    
  28  0.481378     -0.731103      -3.69923       3.69923       1756.87       1760.57    
  29  0.841845     -0.172159     -0.871090      0.871090       1752.70       1753.57    
  30  0.178872      -1.72108      -8.70833       8.70833       1761.86       1770.57    
  31  0.873649     -0.135077     -0.683460      0.683460       1761.10       1761.78    
  32  0.805285     -0.216559      -1.09574       1.09574       1756.22       1757.31    
  33  0.945892E-01  -2.35821      -11.9321       11.9321       1765.98       1777.91    
  34  0.976997     -0.232719E-01 -0.117751      0.117751       1768.86       1768.98    
  35  0.347817      -1.05608      -5.34354       5.34354       1762.46       1767.80    
  36  0.443928     -0.812092      -4.10902       4.10902       1767.03       1771.14    
  37  0.818184     -0.200668      -1.01534       1.01534       1769.78       1770.79    
  38  0.849587     -0.163005     -0.824770      0.824770       1774.67       1775.49    
  39  0.809085E-01  -2.51444      -12.7225       12.7225       1775.74       1788.46    
  40  0.808062     -0.213117      -1.07833       1.07833       1779.22       1780.30    
  41  0.663621     -0.410044      -2.07474       2.07474       1775.88       1777.96    
  42  0.466900     -0.761639      -3.85374       3.85374       1780.99       1784.84    
  43  0.948620     -0.527466E-01 -0.266887      0.266887       1783.81       1784.07    
  44  0.274490      -1.29284      -6.54150       6.54150       1785.45       1791.99    
  45  0.928375E-01  -2.37690      -12.0266       12.0266       1788.68       1800.70    
  46  0.983714     -0.164200E-01 -0.830818E-01  0.830818E-01   1791.17       1791.25    
  47  0.424265     -0.857398      -4.33825       4.33825       1790.58       1794.92    
  48  0.534428     -0.626558      -3.17025       3.17025       1790.28       1793.45    
  49  0.511115E-01  -2.97374      -15.0465       15.0465       1792.26       1807.30    
  50  0.881621     -0.125993     -0.637496      0.637496       1790.11       1790.75    
  51  0.996483     -0.352291E-02 -0.178252E-01  0.178252E-01   1791.57       1791.58    
  52  0.379271     -0.969504      -4.90549       4.90549       1785.55       1790.45    
  53  0.844840     -0.168609     -0.853124      0.853124       1793.97       1794.82    
  54  0.242994      -1.41472      -7.15818       7.15818       1808.41       1815.57    
  55  0.875393     -0.133082     -0.673368      0.673368       1795.11       1795.79    
  56  0.565062     -0.570819      -2.88823       2.88823       1805.05       1807.94    
  57  0.698179     -0.359279      -1.81788       1.81788       1813.63       1815.44    
  58  0.676907     -0.390222      -1.97444       1.97444       1745.08       1747.06    
loop,thermsimp(1:2)       76   5.81784       4.86254    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    467       1727.18         68.32          1.17         39.65          0.12          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1727.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       76
neval is:      466
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       77
neval is:      466


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      466     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807533     -0.213771      -1.08164       1.08164       1717.59       1718.67    
   2  0.906511     -0.981526E-01 -0.496631      0.496631       1716.43       1716.93    
   3  0.121906      -2.10450      -10.6483       10.6483       1718.00       1728.65    
   4  0.849960     -0.162566     -0.822551      0.822551       1718.88       1719.70    
   5  0.268960      -1.31319      -6.64449       6.64449       1719.50       1726.14    
   6  0.475959     -0.742424      -3.75651       3.75651       1726.01       1729.76    
   7  0.359795      -1.02222      -5.17222       5.17222       1726.28       1731.45    
   8  0.411175     -0.888736      -4.49682       4.49682       1729.80       1734.29    
   9  0.381099     -0.964695      -4.88115       4.88115       1723.86       1728.74    
  10  0.390615     -0.940033      -4.75637       4.75637       1733.15       1737.90    
  11  0.758954     -0.275815      -1.39556       1.39556       1731.74       1733.13    
  12  0.476320     -0.741666      -3.75267       3.75267       1726.24       1729.99    
  13  0.658674     -0.417527      -2.11260       2.11260       1742.13       1744.24    
  14  0.324645      -1.12502      -5.69238       5.69238       1733.46       1739.15    
  15  0.388092     -0.946513      -4.78916       4.78916       1743.24       1748.03    
  16  0.910971     -0.932447E-01 -0.471799      0.471799       1737.68       1738.15    
  17  0.170451E-01  -4.07189      -20.6029       20.6029       1745.80       1766.40    
  18  0.361549      -1.01736      -5.14761       5.14761       1745.08       1750.23    
  19  0.134057      -2.00949      -10.1676       10.1676       1746.48       1756.64    
  20  0.241841      -1.41948      -7.18225       7.18225       1745.63       1752.81    
  21  0.933265     -0.690659E-01 -0.349459      0.349459       1743.77       1744.12    
  22  0.142292      -1.94987      -9.86596       9.86596       1748.75       1758.62    
  23  0.557913     -0.583552      -2.95265       2.95265       1733.65       1736.60    
  24  0.606116     -0.500684      -2.53336       2.53336       1742.90       1745.43    
  25  0.802619     -0.219875      -1.11252       1.11252       1741.70       1742.82    
  26  0.828050E-02  -4.79385      -24.2559       24.2559       1752.70       1776.96    
  27  0.736740E-01  -2.60811      -13.1965       13.1965       1748.94       1762.14    
  28  0.772368     -0.258294      -1.30691       1.30691       1753.21       1754.51    
  29  0.164353      -1.80574      -9.13665       9.13665       1756.22       1765.35    
  30  0.305683      -1.18521      -5.99691       5.99691       1756.87       1762.86    
  31  0.490685     -0.711953      -3.60233       3.60233       1761.10       1764.70    
  32  0.796715     -0.227258      -1.14988       1.14988       1762.46       1763.61    
  33  0.416735     -0.875305      -4.42886       4.42886       1768.86       1773.29    
  34  0.336518      -1.08910      -5.51063       5.51063       1761.86       1767.37    
  35  0.410249     -0.890990      -4.50822       4.50822       1769.78       1774.29    
  36  0.765564     -0.267142      -1.35168       1.35168       1767.03       1768.38    
  37  0.852656     -0.159399     -0.806527      0.806527       1723.95       1724.76    
  38  0.218548      -1.52075      -7.69467       7.69467       1774.67       1782.36    
  39  0.859169     -0.151790     -0.768023      0.768023       1765.98       1766.75    
  40  0.140392      -1.96332      -9.93397       9.93397       1775.88       1785.82    
  41  0.622846     -0.473456      -2.39559       2.39559       1779.22       1781.62    
  42  0.410234     -0.891028      -4.50841       4.50841       1783.81       1788.31    
  43  0.459429     -0.777770      -3.93535       3.93535       1780.99       1784.92    
  44  0.911803     -0.923309E-01 -0.467175      0.467175       1775.74       1776.20    
  45  0.120848      -2.11322      -10.6925       10.6925       1785.55       1796.24    
  46  0.474460     -0.745577      -3.77246       3.77246       1790.11       1793.88    
  47  0.602073     -0.507376      -2.56722       2.56722       1791.17       1793.74    
  48  0.204387      -1.58774      -8.03363       8.03363       1791.57       1799.60    
  49  0.822244     -0.195718     -0.990292      0.990292       1785.45       1786.44    
  50  0.538202     -0.619522      -3.13465       3.13465       1790.28       1793.42    
  51  0.770233     -0.261062      -1.32092       1.32092       1793.97       1795.29    
  52  0.661649     -0.413020      -2.08979       2.08979       1790.58       1792.67    
  53  0.776910     -0.252431      -1.27725       1.27725       1795.11       1796.39    
  54  0.671075     -0.398874      -2.01822       2.01822       1788.68       1790.70    
  55  0.734406E-01  -2.61128      -13.2125       13.2125       1792.26       1805.47    
  56  0.949566     -0.517501E-01 -0.261844      0.261844       1805.05       1805.31    
  57  0.150244      -1.89549      -9.59080       9.59080       1813.63       1823.22    
  58  0.928065     -0.746531E-01 -0.377729      0.377729       1727.18       1727.56    
loop,thermsimp(1:2)       77   1.08164      0.496631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    468       1816.85         68.22          1.16         39.54          0.40          0.05        109.36
Just calling func    0   0        109.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1816.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       77
neval is:      467
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       78
neval is:      467


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      467     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511642     -0.670131      -3.39072       3.39072       1716.43       1719.83    
   2  0.243468      -1.41277      -7.14832       7.14832       1717.59       1724.74    
   3  0.259231      -1.35003      -6.83089       6.83089       1718.88       1725.71    
   4  0.411864     -0.887061      -4.48834       4.48834       1723.95       1728.44    
   5  0.192374      -1.64831      -8.34012       8.34012       1719.50       1727.84    
   6  0.504542     -0.684104      -3.46142       3.46142       1727.18       1730.64    
   7  0.404455E-01  -3.20780      -16.2308       16.2308       1718.00       1734.23    
   8  0.157113      -1.85079      -9.36462       9.36462       1723.86       1733.22    
   9  0.833701     -0.181880     -0.920275      0.920275       1726.01       1726.93    
  10  0.878720     -0.129289     -0.654176      0.654176       1726.24       1726.90    
  11  0.237147      -1.43908      -7.28143       7.28143       1726.28       1733.56    
  12  0.936993     -0.650795E-01 -0.329289      0.329289       1731.74       1732.07    
  13  0.651018     -0.429219      -2.17176       2.17176       1729.80       1731.97    
  14  0.366374      -1.00410      -5.08054       5.08054       1733.65       1738.73    
  15  0.484826E-02  -5.32914      -26.9643       26.9643       1733.15       1760.11    
  16  0.509486     -0.674354      -3.41209       3.41209       1737.68       1741.10    
  17  0.685690     -0.377329      -1.90921       1.90921       1733.46       1735.37    
  18  0.321855E-01  -3.43624      -17.3867       17.3867       1741.70       1759.09    
  19  0.442039     -0.816357      -4.13059       4.13059       1743.77       1747.90    
  20  0.209598      -1.56256      -7.90624       7.90624       1742.13       1750.04    
  21  0.378107     -0.972579      -4.92104       4.92104       1742.90       1747.82    
  22  0.604565     -0.503247      -2.54632       2.54632       1743.24       1745.78    
  23  0.178047      -1.72571      -8.73171       8.73171       1745.08       1753.81    
  24  0.784915     -0.242179      -1.22538       1.22538       1745.63       1746.86    
  25  0.685234     -0.377994      -1.91257       1.91257       1753.21       1755.12    
  26  0.423928     -0.858193      -4.34228       4.34228       1746.48       1750.82    
  27  0.413814E-01  -3.18492      -16.1151       16.1151       1748.75       1764.87    
  28  0.788249     -0.237942      -1.20394       1.20394       1748.94       1750.15    
  29  0.212924      -1.54682      -7.82659       7.82659       1756.87       1764.69    
  30  0.934569     -0.676697E-01 -0.342395      0.342395       1762.46       1762.80    
  31  0.361270      -1.01813      -5.15152       5.15152       1761.10       1766.25    
  32  0.755006     -0.281030      -1.42195       1.42195       1756.22       1757.64    
  33  0.454810     -0.787875      -3.98648       3.98648       1745.80       1749.78    
  34  0.152938      -1.87772      -9.50089       9.50089       1765.98       1775.48    
  35  0.376573     -0.976642      -4.94160       4.94160       1761.86       1766.80    
  36  0.571848E-01  -2.86147      -14.4784       14.4784       1767.03       1781.51    
  37  0.995942     -0.406615E-02 -0.205738E-01  0.205738E-01   1768.86       1768.88    
  38  0.834052     -0.181460     -0.918147      0.918147       1769.78       1770.70    
  39  0.481290     -0.731286      -3.70015       3.70015       1775.74       1779.44    
  40  0.289962E-01  -3.54059      -17.9146       17.9146       1752.70       1770.62    
  41  0.897798     -0.107810     -0.545497      0.545497       1779.22       1779.77    
  42  0.721121     -0.326948      -1.65429       1.65429       1774.67       1776.32    
  43  0.946509     -0.549753E-01 -0.278164      0.278164       1780.99       1781.26    
  44  0.134166      -2.00868      -10.1635       10.1635       1775.88       1786.05    
  45  0.747061     -0.291608      -1.47547       1.47547       1785.45       1786.93    
  46  0.284226      -1.25799      -6.36515       6.36515       1783.81       1790.17    
  47  0.785305     -0.241683      -1.22287       1.22287       1788.68       1789.90    
  48  0.240863      -1.42353      -7.20274       7.20274       1790.58       1797.78    
  49  0.289983      -1.23793      -6.26369       6.26369       1790.28       1796.55    
  50  0.847789     -0.165124     -0.835492      0.835492       1791.17       1792.01    
  51  0.981904     -0.182614E-01 -0.923990E-01  0.923990E-01   1790.11       1790.20    
  52  0.193174      -1.64416      -8.31912       8.31912       1793.97       1802.29    
  53  0.657957     -0.418616      -2.11811       2.11811       1785.55       1787.66    
  54  0.477119     -0.739990      -3.74419       3.74419       1795.11       1798.86    
  55  0.751550     -0.285617      -1.44516       1.44516       1791.57       1793.01    
  56  0.375761     -0.978801      -4.95253       4.95253       1805.05       1810.00    
  57  0.896165     -0.109631     -0.554710      0.554710       1792.26       1792.81    
  58  0.222381      -1.50336      -7.60670       7.60670       1816.85       1824.46    
loop,thermsimp(1:2)       78   3.39072       7.14832    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    469       1813.63         68.47          1.21         39.25          0.31          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    470       1785.82         68.51          1.23         39.29          0.21          0.05        109.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1785.82
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       78
neval is:      469
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       79
neval is:      469


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      469     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674234     -0.394178      -1.99446       1.99446       1716.43       1718.43    
   2  0.763241     -0.270181      -1.36706       1.36706       1717.59       1718.96    
   3  0.181180      -1.70826      -8.64346       8.64346       1718.88       1727.52    
   4  0.986466     -0.136262E-01 -0.689459E-01  0.689459E-01   1726.24       1726.31    
   5  0.907914     -0.966062E-01 -0.488807      0.488807       1726.01       1726.49    
   6  0.686562     -0.376058      -1.90278       1.90278       1719.50       1721.40    
   7  0.269744E-01  -3.61287      -18.2803       18.2803       1723.95       1742.24    
   8  0.305757      -1.18497      -5.99568       5.99568       1727.18       1733.18    
   9  0.678790     -0.387443      -1.96038       1.96038       1729.80       1731.76    
  10  0.376044     -0.978048      -4.94872       4.94872       1731.74       1736.69    
  11  0.569163     -0.563589      -2.85164       2.85164       1723.86       1726.71    
  12  0.700219E-02  -4.96153      -25.1043       25.1043       1726.28       1751.38    
  13  0.271434      -1.30403      -6.59814       6.59814       1718.00       1724.60    
  14  0.412709     -0.885014      -4.47798       4.47798       1733.46       1737.94    
  15  0.230294      -1.46840      -7.42979       7.42979       1733.65       1741.08    
  16  0.453167     -0.791494      -4.00479       4.00479       1737.68       1741.69    
  17  0.225846E-01  -3.79049      -19.1791       19.1791       1743.24       1762.42    
  18  0.295035E-01  -3.52324      -17.8269       17.8269       1745.63       1763.46    
  19  0.766595     -0.265797      -1.34488       1.34488       1742.90       1744.24    
  20  0.995962     -0.404634E-02 -0.204736E-01  0.204736E-01   1743.77       1743.79    
  21  0.816964     -0.202160      -1.02289       1.02289       1745.80       1746.82    
  22  0.376195     -0.977647      -4.94669       4.94669       1742.13       1747.08    
  23  0.557992     -0.583410      -2.95193       2.95193       1748.94       1751.90    
  24  0.643422     -0.440955      -2.23114       2.23114       1746.48       1748.71    
  25  0.999852     -0.147642E-03 -0.747037E-03  0.747037E-03   1745.08       1745.08    
  26  0.644170     -0.439793      -2.22526       2.22526       1753.21       1755.43    
  27  0.216981      -1.52794      -7.73108       7.73108       1756.22       1763.95    
  28  0.469613     -0.755845      -3.82442       3.82442       1741.70       1745.53    
  29  0.241394      -1.42133      -7.19161       7.19161       1733.15       1740.34    
  30  0.598509     -0.513314      -2.59726       2.59726       1762.46       1765.05    
  31  0.671670     -0.397989      -2.01374       2.01374       1756.87       1758.88    
  32  0.508456     -0.676377      -3.42233       3.42233       1748.75       1752.17    
  33  0.142355      -1.94943      -9.86371       9.86371       1761.10       1770.96    
  34  0.314602      -1.15645      -5.85138       5.85138       1761.86       1767.71    
  35  0.595792     -0.517863      -2.62028       2.62028       1768.86       1771.48    
  36  0.980752     -0.194358E-01 -0.983410E-01  0.983410E-01   1752.70       1752.80    
  37  0.574834     -0.553674      -2.80148       2.80148       1769.78       1772.58    
  38  0.176457      -1.73468      -8.77710       8.77710       1765.98       1774.76    
  39  0.972462     -0.279243E-01 -0.141291      0.141291       1774.67       1774.81    
  40  0.914299     -0.895977E-01 -0.453346      0.453346       1775.74       1776.19    
  41  0.844829E-01  -2.47121      -12.5038       12.5038       1779.22       1791.73    
  42  0.173441E-01  -4.05450      -20.5149       20.5149       1780.99       1801.50    
  43  0.558790     -0.581981      -2.94470       2.94470       1767.03       1769.97    
  44  0.102972      -2.27330      -11.5024       11.5024       1775.88       1787.39    
  45  0.479128E-01  -3.03837      -15.3735       15.3735       1785.45       1800.82    
  46  0.955710     -0.453003E-01 -0.229210      0.229210       1785.55       1785.78    
  47  0.768826     -0.262891      -1.33017       1.33017       1788.68       1790.01    
  48  0.634123     -0.455512      -2.30479       2.30479       1783.81       1786.11    
  49  0.460722     -0.774961      -3.92114       3.92114       1790.11       1794.03    
  50  0.376372     -0.977178      -4.94432       4.94432       1791.17       1796.12    
  51  0.784580     -0.242607      -1.22754       1.22754       1792.26       1793.49    
  52  0.870295     -0.138923     -0.702919      0.702919       1791.57       1792.27    
  53  0.554002     -0.590587      -2.98825       2.98825       1790.28       1793.27    
  54  0.186441      -1.67964      -8.49863       8.49863       1790.58       1799.08    
  55  0.267480      -1.31871      -6.67239       6.67239       1795.11       1801.79    
  56  0.867677     -0.141936     -0.718165      0.718165       1793.97       1794.69    
  57  0.172397      -1.75795      -8.89488       8.89488       1805.05       1813.95    
  58  0.959742     -0.410907E-01 -0.207911      0.207911       1785.82       1786.02    
loop,thermsimp(1:2)       79   1.99446       1.36706    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    471       1737.19         68.22          1.15         39.44          0.51          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1737.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       79
neval is:      470
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       80
neval is:      470


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      470     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.684247     -0.379436      -1.91986       1.91986       1716.43       1718.35    
   2  0.345348      -1.06320      -5.37959       5.37959       1717.59       1722.97    
   3  0.950053     -0.512378E-01 -0.259253      0.259253       1719.50       1719.76    
   4  0.837893     -0.176865     -0.894902      0.894902       1718.00       1718.89    
   5  0.333546      -1.09797      -5.55552       5.55552       1726.24       1731.80    
   6  0.161688      -1.82209      -9.21937       9.21937       1726.01       1735.22    
   7  0.617647     -0.481838      -2.43800       2.43800       1723.86       1726.30    
   8  0.401140     -0.913446      -4.62185       4.62185       1718.88       1723.50    
   9  0.358257E-01  -3.32909      -16.8445       16.8445       1729.80       1746.64    
  10  0.349088E-01  -3.35502      -16.9757       16.9757       1727.18       1744.16    
  11  0.152040      -1.88361      -9.53067       9.53067       1731.74       1741.27    
  12  0.703870     -0.351161      -1.77680       1.77680       1733.46       1735.24    
  13  0.550338     -0.597222      -3.02182       3.02182       1733.15       1736.17    
  14  0.320062      -1.13924      -5.76432       5.76432       1733.65       1739.41    
  15  0.842058     -0.171906     -0.869809      0.869809       1737.68       1738.55    
  16  0.872615     -0.136260     -0.689449      0.689449       1723.95       1724.64    
  17  0.687324     -0.374949      -1.89717       1.89717       1743.77       1745.66    
  18  0.707329     -0.346259      -1.75200       1.75200       1742.90       1744.65    
  19  0.781599     -0.246413      -1.24680       1.24680       1745.08       1746.33    
  20  0.257984      -1.35486      -6.85529       6.85529       1741.70       1748.56    
  21  0.624920     -0.470132      -2.37877       2.37877       1745.80       1748.18    
  22  0.816734     -0.202441      -1.02431       1.02431       1742.13       1743.15    
  23  0.740445     -0.300504      -1.52049       1.52049       1746.48       1748.00    
  24  0.433128     -0.836721      -4.23363       4.23363       1726.28       1730.51    
  25  0.964932E-01  -2.33828      -11.8312       11.8312       1748.94       1760.78    
  26  0.336813      -1.08823      -5.50621       5.50621       1748.75       1754.26    
  27  0.631668     -0.459391      -2.32442       2.32442       1752.70       1755.03    
  28  0.173511      -1.75152      -8.86231       8.86231       1753.21       1762.07    
  29  0.714113     -0.336715      -1.70371       1.70371       1756.87       1758.57    
  30  0.856732     -0.154630     -0.782395      0.782395       1743.24       1744.02    
  31  0.871530     -0.137505     -0.695745      0.695745       1745.63       1746.33    
  32  0.524684     -0.644958      -3.26335       3.26335       1756.22       1759.48    
  33  0.199462      -1.61213      -8.15705       8.15705       1762.46       1770.61    
  34  0.848275     -0.164551     -0.832593      0.832593       1761.86       1762.70    
  35  0.836784     -0.178190     -0.901604      0.901604       1767.03       1767.93    
  36  0.478860E-01  -3.03893      -15.3764       15.3764       1761.10       1776.47    
  37  0.297469      -1.21245      -6.13472       6.13472       1768.86       1775.00    
  38  0.649198     -0.432018      -2.18592       2.18592       1769.78       1771.96    
  39  0.657692     -0.419018      -2.12014       2.12014       1765.98       1768.10    
  40  0.684263     -0.379413      -1.91975       1.91975       1774.67       1776.59    
  41  0.249508      -1.38826      -7.02433       7.02433       1775.74       1782.76    
  42  0.745618     -0.293542      -1.48526       1.48526       1785.55       1787.03    
  43  0.338359      -1.08365      -5.48303       5.48303       1785.82       1791.30    
  44  0.472339     -0.750059      -3.79514       3.79514       1783.81       1787.60    
  45  0.796486     -0.227546      -1.15134       1.15134       1775.88       1777.04    
  46  0.241988      -1.41887      -7.17917       7.17917       1788.68       1795.86    
  47  0.162775      -1.81539      -9.18547       9.18547       1779.22       1788.41    
  48  0.749633     -0.288171      -1.45809       1.45809       1791.57       1793.03    
  49  0.942194     -0.595438E-01 -0.301279      0.301279       1790.28       1790.59    
  50  0.823760E-01  -2.49646      -12.6316       12.6316       1792.26       1804.89    
  51  0.437045     -0.827720      -4.18809       4.18809       1790.11       1794.30    
  52  0.812234     -0.207967      -1.05227       1.05227       1793.97       1795.02    
  53  0.690291     -0.370642      -1.87537       1.87537       1791.17       1793.05    
  54  0.592810     -0.522881      -2.64567       2.64567       1790.58       1793.23    
  55  0.547326     -0.602712      -3.04959       3.04959       1785.45       1788.50    
  56  0.132779      -2.01907      -10.2161       10.2161       1780.99       1791.20    
  57  0.613048     -0.489313      -2.47582       2.47582       1795.11       1797.59    
  58  0.569441     -0.563101      -2.84917       2.84917       1737.19       1740.04    
loop,thermsimp(1:2)       80   1.91986       5.37959    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    472       1698.73         68.47          1.23         39.18          0.45          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    473       1761.29         68.56          1.24         39.28          0.26          0.05        109.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1698.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       80
neval is:      472
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       81
neval is:      472


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      472     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.212099      -1.55070      -7.84623       7.84623       1716.43       1724.28    
   2  0.790720E-01  -2.53740      -12.8387       12.8387       1718.00       1730.84    
   3  0.474562     -0.745363      -3.77138       3.77138       1719.50       1723.27    
   4  0.898144E-01  -2.41001      -12.1941       12.1941       1717.59       1729.78    
   5  0.458101     -0.780666      -3.95001       3.95001       1718.88       1722.83    
   6  0.931196     -0.712852E-01 -0.360688      0.360688       1723.95       1724.32    
   7  0.205708      -1.58130      -8.00103       8.00103       1723.86       1731.86    
   8  0.733185     -0.310357      -1.57034       1.57034       1726.28       1727.85    
   9  0.169450      -1.77520      -8.98214       8.98214       1726.24       1735.22    
  10  0.474919     -0.744612      -3.76758       3.76758       1726.01       1729.77    
  11  0.843615     -0.170059     -0.860461      0.860461       1733.46       1734.32    
  12  0.876719     -0.131569     -0.665710      0.665710       1733.15       1733.81    
  13  0.190440E-01  -3.96100      -20.0418       20.0418       1737.68       1757.73    
  14  0.303072      -1.19379      -6.04031       6.04031       1733.65       1739.69    
  15  0.469764     -0.755525      -3.82280       3.82280       1737.19       1741.02    
  16  0.571967     -0.558673      -2.82677       2.82677       1731.74       1734.56    
  17  0.672551E-01  -2.69926      -13.6577       13.6577       1742.13       1755.79    
  18  0.255734      -1.36362      -6.89962       6.89962       1743.24       1750.14    
  19  0.984593E-01  -2.31811      -11.7292       11.7292       1727.18       1738.91    
  20  0.106790      -2.23689      -11.3182       11.3182       1742.90       1754.21    
  21  0.569872     -0.562343      -2.84534       2.84534       1743.77       1746.61    
  22  0.535167     -0.625176      -3.16326       3.16326       1745.63       1748.79    
  23  0.874592     -0.133997     -0.677998      0.677998       1745.08       1745.76    
  24  0.437299     -0.827137      -4.18514       4.18514       1729.80       1733.98    
  25  0.859028     -0.151954     -0.768854      0.768854       1746.48       1747.24    
  26  0.766029     -0.266535      -1.34861       1.34861       1745.80       1747.15    
  27  0.702099     -0.353680      -1.78955       1.78955       1741.70       1743.49    
  28  0.161598      -1.82264      -9.22219       9.22219       1748.75       1757.97    
  29  0.212172      -1.55036      -7.84448       7.84448       1752.70       1760.55    
  30  0.776087     -0.253491      -1.28261       1.28261       1756.87       1758.15    
  31  0.346547      -1.05974      -5.36204       5.36204       1756.22       1761.58    
  32  0.175995      -1.73730      -8.79037       8.79037       1748.94       1757.74    
  33  0.310769      -1.16870      -5.91340       5.91340       1753.21       1759.12    
  34  0.716675     -0.333133      -1.68559       1.68559       1761.86       1763.55    
  35  0.977373E-01  -2.32547      -11.7664       11.7664       1767.03       1778.80    
  36  0.191888      -1.65084      -8.35292       8.35292       1765.98       1774.33    
  37  0.323564      -1.12836      -5.70926       5.70926       1762.46       1768.16    
  38  0.289367      -1.24006      -6.27444       6.27444       1769.78       1776.05    
  39  0.209149      -1.56471      -7.91710       7.91710       1768.86       1776.78    
  40  0.879527     -0.128371     -0.649531      0.649531       1761.10       1761.75    
  41  0.148061      -1.91013      -9.66487       9.66487       1774.67       1784.33    
  42  0.432943     -0.837149      -4.23580       4.23580       1775.88       1780.12    
  43  0.558965     -0.581668      -2.94312       2.94312       1775.74       1778.68    
  44  0.496743     -0.699682      -3.54024       3.54024       1785.55       1789.09    
  45  0.791585     -0.233718      -1.18256       1.18256       1783.81       1784.99    
  46  0.394764E-01  -3.23205      -16.3535       16.3535       1779.22       1795.58    
  47  0.665239E-01  -2.71019      -13.7130       13.7130       1785.45       1799.16    
  48  0.309823      -1.17176      -5.92884       5.92884       1790.28       1796.21    
  49  0.121985      -2.10386      -10.6451       10.6451       1780.99       1791.63    
  50  0.533360     -0.628558      -3.18037       3.18037       1785.82       1789.00    
  51  0.699667     -0.357151      -1.80711       1.80711       1791.57       1793.37    
  52  0.824712     -0.192721     -0.975129      0.975129       1791.17       1792.15    
  53  0.751113     -0.286199      -1.44811       1.44811       1790.58       1792.03    
  54  0.625810     -0.468709      -2.37157       2.37157       1790.11       1792.48    
  55  0.340567      -1.07714      -5.45012       5.45012       1793.97       1799.42    
  56  0.649406     -0.431697      -2.18430       2.18430       1788.68       1790.86    
  57  0.596679E-01  -2.81896      -14.2634       14.2634       1795.11       1809.38    
  58  0.104669      -2.25695      -11.4197       11.4197       1698.73       1710.15    
loop,thermsimp(1:2)       81   7.84623       12.8387    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    474       1683.59         68.60          1.16         38.96          0.62          0.06        109.40
Just calling func    0   0        109.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    475       1731.26         68.54          1.14         38.83          0.75          0.05        109.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1683.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       81
neval is:      474
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       82
neval is:      474


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      474     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.879977     -0.127859     -0.646940      0.646940       1698.73       1699.38    
   2  0.617618     -0.481886      -2.43824       2.43824       1718.88       1721.32    
   3  0.816358E-01  -2.50549      -12.6772       12.6772       1719.50       1732.17    
   4  0.265705      -1.32537      -6.70609       6.70609       1716.43       1723.14    
   5  0.156102      -1.85725      -9.39728       9.39728       1723.95       1733.35    
   6  0.155187      -1.86313      -9.42702       9.42702       1726.28       1735.71    
   7  0.650347     -0.430249      -2.17697       2.17697       1726.01       1728.18    
   8  0.801207     -0.221636      -1.12143       1.12143       1717.59       1718.71    
   9  0.935908     -0.662378E-01 -0.335150      0.335150       1718.00       1718.33    
  10  0.764783E-01  -2.57075      -13.0074       13.0074       1723.86       1736.87    
  11  0.819025     -0.199640      -1.01014       1.01014       1733.15       1734.16    
  12  0.175545      -1.73986      -8.80333       8.80333       1729.80       1738.60    
  13  0.945804     -0.557201E-01 -0.281932      0.281932       1733.46       1733.74    
  14  0.254592      -1.36809      -6.92225       6.92225       1731.74       1738.66    
  15  0.969942     -0.305188E-01 -0.154419      0.154419       1726.24       1726.40    
  16  0.751504     -0.285679      -1.44547       1.44547       1727.18       1728.63    
  17  0.129569E-01  -4.34612      -21.9905       21.9905       1733.65       1755.64    
  18  0.591393     -0.525275      -2.65778       2.65778       1737.19       1739.85    
  19  0.994087     -0.593042E-02 -0.300067E-01  0.300067E-01   1741.70       1741.73    
  20  0.697601     -0.360108      -1.82207       1.82207       1745.08       1746.90    
  21  0.633469     -0.456544      -2.31001       2.31001       1743.77       1746.08    
  22  0.391583     -0.937557      -4.74384       4.74384       1745.80       1750.54    
  23  0.599575     -0.511533      -2.58825       2.58825       1746.48       1749.06    
  24  0.481571     -0.730701      -3.69720       3.69720       1745.63       1749.33    
  25  0.420827     -0.865533      -4.37942       4.37942       1743.24       1747.62    
  26  0.254691      -1.36770      -6.92029       6.92029       1742.90       1749.82    
  27  0.950472     -0.507971E-01 -0.257023      0.257023       1742.13       1742.39    
  28  0.113706      -2.17414      -11.0007       11.0007       1737.68       1748.68    
  29  0.172661      -1.75643      -8.88715       8.88715       1748.94       1757.83    
  30  0.718739     -0.330257      -1.67103       1.67103       1748.75       1750.42    
  31  0.564748     -0.571375      -2.89104       2.89104       1756.87       1759.76    
  32  0.638696     -0.448327      -2.26844       2.26844       1753.21       1755.47    
  33  0.342849      -1.07047      -5.41634       5.41634       1752.70       1758.12    
  34  0.401270     -0.913121      -4.62020       4.62020       1756.22       1760.84    
  35  0.918599     -0.849058E-01 -0.429606      0.429606       1761.10       1761.53    
  36  0.566118     -0.568953      -2.87878       2.87878       1761.86       1764.74    
  37  0.187554      -1.67369      -8.46851       8.46851       1762.46       1770.92    
  38  0.749582E-01  -2.59082      -13.1090       13.1090       1765.98       1779.09    
  39  0.286085      -1.25147      -6.33217       6.33217       1769.78       1776.11    
  40  0.412337     -0.885914      -4.48254       4.48254       1768.86       1773.35    
  41  0.455811     -0.785678      -3.97536       3.97536       1775.74       1779.71    
  42  0.676067     -0.391462      -1.98072       1.98072       1767.03       1769.01    
  43  0.452490     -0.792991      -4.01237       4.01237       1775.88       1779.90    
  44  0.131068E-01  -4.33463      -21.9323       21.9323       1774.67       1796.60    
  45  0.880822     -0.126900     -0.642087      0.642087       1783.81       1784.45    
  46  0.381257E-01  -3.26687      -16.5297       16.5297       1785.82       1802.34    
  47  0.285013      -1.25522      -6.35116       6.35116       1785.55       1791.90    
  48  0.279597      -1.27441      -6.44823       6.44823       1788.68       1795.13    
  49  0.652608     -0.426779      -2.15941       2.15941       1780.99       1783.14    
  50  0.300945      -1.20083      -6.07594       6.07594       1790.58       1796.66    
  51  0.961982     -0.387594E-01 -0.196115      0.196115       1791.17       1791.37    
  52  0.729062E-01  -2.61858      -13.2495       13.2495       1790.11       1803.36    
  53  0.109451      -2.21228      -11.1936       11.1936       1791.57       1802.76    
  54  0.681950     -0.382798      -1.93688       1.93688       1779.22       1781.16    
  55  0.897690     -0.107930     -0.546103      0.546103       1790.28       1790.83    
  56  0.961917     -0.388267E-01 -0.196455      0.196455       1785.45       1785.65    
  57  0.466988E-01  -3.06404      -15.5034       15.5034       1793.97       1809.47    
  58  0.196480      -1.62720      -8.23327       8.23327       1683.59       1691.83    
loop,thermsimp(1:2)       82  0.646940       2.43824    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    476       1710.77         68.54          1.16         39.08          0.51          0.05        109.34
Just calling func    0   0        109.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1710.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       82
neval is:      475
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       83
neval is:      475


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      475     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.552115     -0.593999      -3.00551       3.00551       1683.59       1686.60    
   2  0.319086      -1.14229      -5.77977       5.77977       1698.73       1704.51    
   3  0.987809     -0.122656E-01 -0.620614E-01  0.620614E-01   1718.00       1718.06    
   4  0.730684     -0.313774      -1.58763       1.58763       1717.59       1719.18    
   5  0.330217      -1.10801      -5.60627       5.60627       1718.88       1724.48    
   6  0.228208      -1.47750      -7.47582       7.47582       1716.43       1723.91    
   7  0.531449     -0.632148      -3.19854       3.19854       1726.24       1729.44    
   8  0.291369      -1.23317      -6.23956       6.23956       1726.01       1732.25    
   9  0.868373     -0.141133     -0.714106      0.714106       1727.18       1727.90    
  10  0.750840     -0.286563      -1.44995       1.44995       1719.50       1720.95    
  11  0.922302     -0.808828E-01 -0.409250      0.409250       1723.95       1724.36    
  12  0.835004     -0.180318     -0.912372      0.912372       1733.46       1734.37    
  13  0.839915     -0.174454     -0.882703      0.882703       1733.15       1734.03    
  14  0.436966     -0.827899      -4.18900       4.18900       1726.28       1730.47    
  15  0.960108     -0.407096E-01 -0.205982      0.205982       1723.86       1724.06    
  16  0.651732     -0.428122      -2.16621       2.16621       1729.80       1731.96    
  17  0.309700      -1.17215      -5.93084       5.93084       1731.74       1737.67    
  18  0.526921     -0.640704      -3.24183       3.24183       1737.19       1740.43    
  19  0.853737     -0.158132     -0.800115      0.800115       1741.70       1742.50    
  20  0.266678      -1.32171      -6.68759       6.68759       1742.13       1748.82    
  21  0.299571      -1.20541      -6.09910       6.09910       1743.77       1749.87    
  22  0.846742     -0.166360     -0.841744      0.841744       1745.08       1745.92    
  23  0.818359     -0.200455      -1.01426       1.01426       1743.24       1744.25    
  24  0.234883      -1.44867      -7.32997       7.32997       1737.68       1745.01    
  25  0.986151     -0.139454E-01 -0.705608E-01  0.705608E-01   1746.48       1746.55    
  26  0.974313     -0.260229E-01 -0.131670      0.131670       1745.63       1745.76    
  27  0.620281E-01  -2.78017      -14.0671       14.0671       1742.90       1756.96    
  28  0.368305E-01  -3.30143      -16.7045       16.7045       1748.75       1765.46    
  29  0.111356      -2.19502      -11.1063       11.1063       1745.80       1756.90    
  30  0.617410     -0.482223      -2.43995       2.43995       1753.21       1755.65    
  31  0.275412      -1.28949      -6.52454       6.52454       1733.65       1740.17    
  32  0.173447      -1.75188      -8.86417       8.86417       1748.94       1757.81    
  33  0.570479     -0.561280      -2.83996       2.83996       1752.70       1755.54    
  34  0.359525      -1.02297      -5.17602       5.17602       1756.87       1762.04    
  35  0.933691     -0.686097E-01 -0.347151      0.347151       1756.22       1756.56    
  36  0.510279     -0.672797      -3.40421       3.40421       1761.10       1764.50    
  37  0.347312      -1.05753      -5.35090       5.35090       1761.86       1767.21    
  38  0.491006E-01  -3.01388      -15.2496       15.2496       1767.03       1782.28    
  39  0.410429     -0.890552      -4.50601       4.50601       1762.46       1766.96    
  40  0.344238      -1.06642      -5.39588       5.39588       1768.86       1774.26    
  41  0.472799     -0.749085      -3.79021       3.79021       1769.78       1773.57    
  42  0.785791     -0.241064      -1.21973       1.21973       1765.98       1767.20    
  43  0.925744     -0.771577E-01 -0.390402      0.390402       1775.74       1776.13    
  44  0.529151     -0.636482      -3.22046       3.22046       1775.88       1779.10    
  45  0.815207     -0.204313      -1.03378       1.03378       1779.22       1780.26    
  46  0.825373     -0.191920     -0.971073      0.971073       1780.99       1781.96    
  47  0.876860     -0.131408     -0.664898      0.664898       1783.81       1784.47    
  48  0.579930     -0.544847      -2.75681       2.75681       1785.45       1788.21    
  49  0.593104     -0.522386      -2.64316       2.64316       1790.28       1792.93    
  50  0.376238     -0.977534      -4.94612       4.94612       1791.17       1796.12    
  51  0.987748     -0.123280E-01 -0.623769E-01  0.623769E-01   1785.55       1785.61    
  52  0.985743     -0.143594E-01 -0.726558E-01  0.726558E-01   1788.68       1788.75    
  53  0.991599     -0.843651E-02 -0.426870E-01  0.426870E-01   1774.67       1774.71    
  54  0.497863     -0.697430      -3.52885       3.52885       1790.58       1794.11    
  55  0.787530E-01  -2.54144      -12.8591       12.8591       1785.82       1798.67    
  56  0.232896      -1.45716      -7.37294       7.37294       1791.57       1798.94    
  57  0.971733     -0.286747E-01 -0.145088      0.145088       1790.11       1790.26    
  58  0.434796     -0.832877      -4.21419       4.21419       1710.77       1714.98    
loop,thermsimp(1:2)       83   3.00551       5.77977    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    477       1706.12         68.44          1.21         39.35          0.28          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1706.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       83
neval is:      476
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       84
neval is:      476


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      476     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379478     -0.968959      -4.90273       4.90273       1683.59       1688.50    
   2  0.957028     -0.439225E-01 -0.222239      0.222239       1698.73       1698.95    
   3  0.360821      -1.01937      -5.15782       5.15782       1710.77       1715.92    
   4  0.115816      -2.15575      -10.9077       10.9077       1718.00       1728.91    
   5  0.739959E-01  -2.60375      -13.1744       13.1744       1717.59       1730.76    
   6  0.618280     -0.480813      -2.43282       2.43282       1719.50       1721.93    
   7  0.885995     -0.121044     -0.612456      0.612456       1716.43       1717.05    
   8  0.635424     -0.453462      -2.29442       2.29442       1723.86       1726.15    
   9  0.807967E-01  -2.51582      -12.7295       12.7295       1723.95       1736.68    
  10  0.741317     -0.299327      -1.51453       1.51453       1718.88       1720.39    
  11  0.226644      -1.48438      -7.51063       7.51063       1727.18       1734.69    
  12  0.538747     -0.618510      -3.12953       3.12953       1726.24       1729.37    
  13  0.161559      -1.82289      -9.22342       9.22342       1726.28       1735.50    
  14  0.460148     -0.776207      -3.92744       3.92744       1729.80       1733.73    
  15  0.747711     -0.290739      -1.47108       1.47108       1726.01       1727.48    
  16  0.780108E-01  -2.55091      -12.9071       12.9071       1733.15       1746.05    
  17  0.966572     -0.339994E-01 -0.172030      0.172030       1733.46       1733.63    
  18  0.724118     -0.322802      -1.63331       1.63331       1731.74       1733.37    
  19  0.558090     -0.583236      -2.95105       2.95105       1733.65       1736.60    
  20  0.646658     -0.435938      -2.20575       2.20575       1737.19       1739.40    
  21  0.667537     -0.404161      -2.04497       2.04497       1741.70       1743.75    
  22  0.526422     -0.641653      -3.24663       3.24663       1743.24       1746.48    
  23  0.429996     -0.843979      -4.27036       4.27036       1737.68       1741.95    
  24  0.795573     -0.228692      -1.15714       1.15714       1745.63       1746.79    
  25  0.102698      -2.27597      -11.5159       11.5159       1745.08       1756.60    
  26  0.727545     -0.318079      -1.60941       1.60941       1746.48       1748.08    
  27  0.266601      -1.32200      -6.68906       6.68906       1742.13       1748.82    
  28  0.867357     -0.142304     -0.720030      0.720030       1743.77       1744.49    
  29  0.850002     -0.162516     -0.822299      0.822299       1752.70       1753.52    
  30  0.495621     -0.701943      -3.55168       3.55168       1753.21       1756.76    
  31  0.321507      -1.13474      -5.74153       5.74153       1756.22       1761.96    
  32  0.250033E-01  -3.68875      -18.6643       18.6643       1745.80       1764.46    
  33  0.191559      -1.65256      -8.36161       8.36161       1742.90       1751.26    
  34  0.256845E-01  -3.66187      -18.5283       18.5283       1748.94       1767.47    
  35  0.116644E-01  -4.45121      -22.5222       22.5222       1756.87       1779.39    
  36  0.467566     -0.760214      -3.84653       3.84653       1761.10       1764.94    
  37  0.267525      -1.31854      -6.67155       6.67155       1748.75       1755.42    
  38  0.657917     -0.418676      -2.11841       2.11841       1762.46       1764.57    
  39  0.396760     -0.924425      -4.67740       4.67740       1765.98       1770.66    
  40  0.296989E-01  -3.51664      -17.7935       17.7935       1761.86       1779.66    
  41  0.609352     -0.495360      -2.50642       2.50642       1769.78       1772.29    
  42  0.472240     -0.750268      -3.79620       3.79620       1768.86       1772.66    
  43  0.537782     -0.620302      -3.13860       3.13860       1774.67       1777.81    
  44  0.472387     -0.749957      -3.79463       3.79463       1775.74       1779.53    
  45  0.906366     -0.983121E-01 -0.497438      0.497438       1775.88       1776.38    
  46  0.541294     -0.613793      -3.10567       3.10567       1779.22       1782.33    
  47  0.101850      -2.28426      -11.5579       11.5579       1780.99       1792.54    
  48  0.620195     -0.477721      -2.41717       2.41717       1767.03       1769.45    
  49  0.130970      -2.03278      -10.2855       10.2855       1783.81       1794.09    
  50  0.740802E-01  -2.60261      -13.1686       13.1686       1785.55       1798.72    
  51  0.515656     -0.662314      -3.35117       3.35117       1785.45       1788.80    
  52  0.280360      -1.27168      -6.43444       6.43444       1788.68       1795.11    
  53  0.469428E-01  -3.05882      -15.4770       15.4770       1790.11       1805.59    
  54  0.836383     -0.178668     -0.904024      0.904024       1790.28       1791.19    
  55  0.635255     -0.453729      -2.29578       2.29578       1790.58       1792.88    
  56  0.186177E-01  -3.98364      -20.1564       20.1564       1791.17       1811.33    
  57  0.818627     -0.200127      -1.01260       1.01260       1785.82       1786.83    
  58  0.426336     -0.852527      -4.31361       4.31361       1706.12       1710.43    
loop,thermsimp(1:2)       84   4.90273      0.222239    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    478       1753.56         68.40          1.18         39.34          0.27          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1753.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       84
neval is:      477
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       85
neval is:      477


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      477     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.844994     -0.168425     -0.852198      0.852198       1683.59       1684.45    
   2  0.449571E-01  -3.10205      -15.6957       15.6957       1698.73       1714.43    
   3  0.479268     -0.735496      -3.72146       3.72146       1706.12       1709.84    
   4  0.429117     -0.846026      -4.28071       4.28071       1710.77       1715.05    
   5  0.188230      -1.67009      -8.45030       8.45030       1716.43       1724.88    
   6  0.299420      -1.20591      -6.10164       6.10164       1718.88       1724.98    
   7  0.942772     -0.589312E-01 -0.298179      0.298179       1719.50       1719.79    
   8  0.802892E-01  -2.52212      -12.7614       12.7614       1723.86       1736.62    
   9  0.356076      -1.03261      -5.22480       5.22480       1726.01       1731.23    
  10  0.599935     -0.510933      -2.58521       2.58521       1718.00       1720.58    
  11  0.632404     -0.458227      -2.31853       2.31853       1726.24       1728.56    
  12  0.707791     -0.345606      -1.74869       1.74869       1717.59       1719.34    
  13  0.896171     -0.109624     -0.554673      0.554673       1731.74       1732.29    
  14  0.953459     -0.476587E-01 -0.241143      0.241143       1733.46       1733.70    
  15  0.875614     -0.132830     -0.672091      0.672091       1729.80       1730.47    
  16  0.371483     -0.990253      -5.01047       5.01047       1727.18       1732.19    
  17  0.518071     -0.657644      -3.32754       3.32754       1726.28       1729.61    
  18  0.643549     -0.440757      -2.23014       2.23014       1733.65       1735.88    
  19  0.313409      -1.16025      -5.87060       5.87060       1723.95       1729.83    
  20  0.264619      -1.32946      -6.72680       6.72680       1737.19       1743.92    
  21  0.259435      -1.34925      -6.82692       6.82692       1737.68       1744.51    
  22  0.526335     -0.641817      -3.24746       3.24746       1741.70       1744.95    
  23  0.972976E-01  -2.32998      -11.7892       11.7892       1743.77       1755.56    
  24  0.511532     -0.670346      -3.39181       3.39181       1733.15       1736.54    
  25  0.117109      -2.14465      -10.8515       10.8515       1743.24       1754.09    
  26  0.211716      -1.55251      -7.85538       7.85538       1745.63       1753.49    
  27  0.747149     -0.291491      -1.47488       1.47488       1746.48       1747.95    
  28  0.545786     -0.605529      -3.06385       3.06385       1742.13       1745.19    
  29  0.614707     -0.486610      -2.46215       2.46215       1742.90       1745.36    
  30  0.614766     -0.486514      -2.46166       2.46166       1752.70       1755.16    
  31  0.334093      -1.09634      -5.54724       5.54724       1748.75       1754.30    
  32  0.272402      -1.30048      -6.58013       6.58013       1745.08       1751.66    
  33  0.777384     -0.251821      -1.27416       1.27416       1753.21       1754.48    
  34  0.381316     -0.964128      -4.87829       4.87829       1756.22       1761.10    
  35  0.614497     -0.486952      -2.46387       2.46387       1745.80       1748.26    
  36  0.537037     -0.621687      -3.14561       3.14561       1762.46       1765.60    
  37  0.117965      -2.13737      -10.8146       10.8146       1761.10       1771.91    
  38  0.131038      -2.03226      -10.2828       10.2828       1748.94       1759.23    
  39  0.750151E-01  -2.59007      -13.1052       13.1052       1767.03       1780.13    
  40  0.173299      -1.75273      -8.86847       8.86847       1765.98       1774.85    
  41  0.313111      -1.16120      -5.87541       5.87541       1769.78       1775.65    
  42  0.867565     -0.142065     -0.718817      0.718817       1768.86       1769.58    
  43  0.974158E-01  -2.32877      -11.7831       11.7831       1775.88       1787.67    
  44  0.856967     -0.154356     -0.781011      0.781011       1774.67       1775.45    
  45  0.210880      -1.55647      -7.87540       7.87540       1756.87       1764.74    
  46  0.789931     -0.235810      -1.19315       1.19315       1775.74       1776.93    
  47  0.249169E-01  -3.69221      -18.6818       18.6818       1761.86       1780.54    
  48  0.721362     -0.326614      -1.65260       1.65260       1779.22       1780.88    
  49  0.636302     -0.452082      -2.28744       2.28744       1785.82       1788.10    
  50  0.719367     -0.329384      -1.66661       1.66661       1785.45       1787.12    
  51  0.838578E-01  -2.47863      -12.5414       12.5414       1790.28       1802.83    
  52  0.699941     -0.356759      -1.80513       1.80513       1780.99       1782.79    
  53  0.702066     -0.353728      -1.78979       1.78979       1790.58       1792.37    
  54  0.635085     -0.453996      -2.29712       2.29712       1783.81       1786.10    
  55  0.372725     -0.986914      -4.99358       4.99358       1788.68       1793.67    
  56  0.943328     -0.583412E-01 -0.295194      0.295194       1785.55       1785.84    
  57  0.479975E-01  -3.03661      -15.3646       15.3646       1790.11       1805.47    
  58  0.436429     -0.829129      -4.19522       4.19522       1753.56       1757.76    
loop,thermsimp(1:2)       85  0.852198       15.6957    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    479       1766.67         68.50          1.15         39.11          0.47          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1766.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       85
neval is:      478
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       86
neval is:      478


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      478     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245460E-01  -3.70721      -18.7577       18.7577       1683.59       1702.35    
   2  0.230091      -1.46928      -7.43424       7.43424       1706.12       1713.55    
   3  0.635055     -0.454044      -2.29737       2.29737       1698.73       1701.03    
   4  0.105077      -2.25307      -11.4000       11.4000       1710.77       1722.17    
   5  0.191095      -1.65498      -8.37388       8.37388       1717.59       1725.96    
   6  0.795443     -0.228856      -1.15796       1.15796       1719.50       1720.65    
   7  0.317275      -1.14799      -5.80857       5.80857       1718.00       1723.81    
   8  0.532563     -0.630054      -3.18794       3.18794       1716.43       1719.62    
   9  0.908868E-01  -2.39814      -12.1341       12.1341       1718.88       1731.01    
  10  0.865077E-01  -2.44752      -12.3839       12.3839       1726.24       1738.63    
  11  0.857681E-01  -2.45611      -12.4274       12.4274       1726.28       1738.71    
  12  0.542418     -0.611718      -3.09517       3.09517       1723.95       1727.05    
  13  0.225242      -1.49058      -7.54202       7.54202       1729.80       1737.34    
  14  0.855554E-01  -2.45859      -12.4400       12.4400       1726.01       1738.45    
  15  0.702960E-01  -2.65504      -13.4340       13.4340       1727.18       1740.62    
  16  0.660623     -0.414572      -2.09765       2.09765       1731.74       1733.84    
  17  0.564351     -0.572079      -2.89460       2.89460       1733.46       1736.35    
  18  0.761763     -0.272120      -1.37687       1.37687       1733.65       1735.03    
  19  0.645184     -0.438219      -2.21730       2.21730       1733.15       1735.36    
  20  0.398573     -0.919864      -4.65432       4.65432       1723.86       1728.51    
  21  0.256272E-01  -3.66410      -18.5396       18.5396       1737.19       1755.73    
  22  0.258189      -1.35406      -6.85128       6.85128       1737.68       1744.53    
  23  0.797366     -0.226442      -1.14575       1.14575       1741.70       1742.85    
  24  0.119239E-01  -4.42921      -22.4109       22.4109       1742.13       1764.54    
  25  0.257284E-01  -3.66016      -18.5196       18.5196       1742.90       1761.42    
  26  0.746847     -0.291894      -1.47692       1.47692       1746.48       1747.95    
  27  0.624240     -0.471220      -2.38427       2.38427       1745.80       1748.18    
  28  0.655139     -0.422908      -2.13982       2.13982       1745.08       1747.22    
  29  0.281457      -1.26777      -6.41467       6.41467       1745.63       1752.04    
  30  0.944371     -0.572367E-01 -0.289606      0.289606       1743.24       1743.53    
  31  0.614735     -0.486563      -2.46191       2.46191       1748.75       1751.21    
  32  0.455809     -0.785681      -3.97538       3.97538       1753.21       1757.18    
  33  0.429494     -0.845147      -4.27627       4.27627       1752.70       1756.98    
  34  0.656424     -0.420948      -2.12991       2.12991       1743.77       1745.90    
  35  0.551886     -0.594413      -3.00761       3.00761       1753.56       1756.57    
  36  0.882055     -0.125501     -0.635011      0.635011       1748.94       1749.58    
  37  0.585710E-01  -2.83752      -14.3572       14.3572       1756.22       1770.57    
  38  0.196796      -1.62559      -8.22513       8.22513       1756.87       1765.09    
  39  0.479291     -0.735447      -3.72121       3.72121       1762.46       1766.18    
  40  0.107404      -2.23116      -11.2892       11.2892       1768.86       1780.15    
  41  0.360460      -1.02037      -5.16287       5.16287       1761.10       1766.26    
  42  0.952241     -0.489375E-01 -0.247614      0.247614       1765.98       1766.23    
  43  0.791501     -0.233824      -1.18310       1.18310       1774.67       1775.85    
  44  0.253666      -1.37174      -6.94070       6.94070       1769.78       1776.72    
  45  0.936914     -0.651638E-01 -0.329715      0.329715       1775.74       1776.07    
  46  0.978059     -0.221850E-01 -0.112251      0.112251       1767.03       1767.14    
  47  0.226070E-01  -3.78950      -19.1741       19.1741       1761.86       1781.04    
  48  0.211122      -1.55532      -7.86958       7.86958       1779.22       1787.09    
  49  0.665051     -0.407891      -2.06384       2.06384       1780.99       1783.05    
  50  0.600632     -0.509773      -2.57935       2.57935       1785.55       1788.13    
  51  0.924509     -0.784926E-01 -0.397156      0.397156       1783.81       1784.20    
  52  0.935977     -0.661649E-01 -0.334780      0.334780       1785.45       1785.79    
  53  0.166172      -1.79473      -9.08097       9.08097       1775.88       1784.97    
  54  0.327601      -1.11596      -5.64651       5.64651       1785.82       1791.46    
  55  0.233359      -1.45518      -7.36289       7.36289       1790.58       1797.94    
  56  0.322509E-01  -3.43421      -17.3764       17.3764       1788.68       1806.05    
  57  0.465692     -0.764231      -3.86685       3.86685       1790.28       1794.15    
  58  0.429929     -0.844135      -4.27114       4.27114       1766.67       1770.94    
loop,thermsimp(1:2)       86   18.7577       7.43424    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    480       1725.18         68.41          1.19         39.34          0.38          0.05        109.36
Just calling func    0   0        109.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1725.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       86
neval is:      479
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       87
neval is:      479


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      479     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.785570     -0.241345      -1.22116       1.22116       1698.73       1699.95    
   2  0.738730E-02  -4.90799      -24.8334       24.8334       1683.59       1708.43    
   3  0.167821      -1.78486      -9.03101       9.03101       1706.12       1715.15    
   4  0.136502      -1.99142      -10.0762       10.0762       1716.43       1726.51    
   5  0.100366      -2.29893      -11.6321       11.6321       1719.50       1731.13    
   6  0.439637     -0.821807      -4.15817       4.15817       1710.77       1714.92    
   7  0.745548     -0.293635      -1.48573       1.48573       1718.00       1719.48    
   8  0.374855     -0.981216      -4.96475       4.96475       1717.59       1722.55    
   9  0.144230      -1.93634      -9.79750       9.79750       1723.95       1733.75    
  10  0.776977     -0.252344      -1.27681       1.27681       1723.86       1725.14    
  11  0.524160E-01  -2.94854      -14.9190       14.9190       1718.88       1733.80    
  12  0.454382     -0.788817      -3.99125       3.99125       1731.74       1735.73    
  13  0.128840      -2.04919      -10.3685       10.3685       1733.65       1744.02    
  14  0.621729     -0.475251      -2.40467       2.40467       1733.15       1735.55    
  15  0.974694     -0.256318E-01 -0.129691      0.129691       1733.46       1733.59    
  16  0.965418     -0.351939E-01 -0.178074      0.178074       1729.80       1729.98    
  17  0.370644     -0.992512      -5.02190       5.02190       1726.01       1731.03    
  18  0.246546      -1.40021      -7.08475       7.08475       1726.24       1733.33    
  19  0.702523E-01  -2.65566      -13.4371       13.4371       1726.28       1739.72    
  20  0.326197E-01  -3.42284      -17.3189       17.3189       1727.18       1744.50    
  21  0.419579     -0.868503      -4.39445       4.39445       1741.70       1746.10    
  22  0.466221     -0.763095      -3.86110       3.86110       1743.24       1747.10    
  23  0.240579      -1.42471      -7.20871       7.20871       1737.68       1744.89    
  24  0.901129     -0.104107     -0.526760      0.526760       1743.77       1744.29    
  25  0.533703     -0.627916      -3.17712       3.17712       1745.08       1748.26    
  26  0.617116     -0.482699      -2.44235       2.44235       1746.48       1748.92    
  27  0.431696     -0.840033      -4.25039       4.25039       1745.80       1750.05    
  28  0.490629     -0.712067      -3.60291       3.60291       1748.94       1752.55    
  29  0.727929     -0.317551      -1.60674       1.60674       1748.75       1750.36    
  30  0.751113     -0.286200      -1.44811       1.44811       1745.63       1747.08    
  31  0.128641      -2.05073      -10.3762       10.3762       1737.19       1747.57    
  32  0.592334E-01  -2.82627      -14.3003       14.3003       1753.56       1767.86    
  33  0.692882     -0.366896      -1.85642       1.85642       1752.70       1754.56    
  34  0.600682     -0.509689      -2.57892       2.57892       1753.21       1755.78    
  35  0.658975     -0.417069      -2.11028       2.11028       1742.90       1745.01    
  36  0.696343     -0.361913      -1.83120       1.83120       1742.13       1743.96    
  37  0.605529     -0.501652      -2.53825       2.53825       1756.87       1759.40    
  38  0.492956     -0.707335      -3.57897       3.57897       1762.46       1766.03    
  39  0.561246     -0.577595      -2.92251       2.92251       1765.98       1768.90    
  40  0.184946E-01  -3.99027      -20.1900       20.1900       1761.10       1781.29    
  41  0.483815     -0.726052      -3.67367       3.67367       1767.03       1770.70    
  42  0.358577      -1.02561      -5.18939       5.18939       1756.22       1761.41    
  43  0.316248E-01  -3.45382      -17.4756       17.4756       1766.67       1784.15    
  44  0.103277      -2.27034      -11.4874       11.4874       1774.67       1786.16    
  45  0.216677      -1.52935      -7.73818       7.73818       1775.74       1783.48    
  46  0.316630      -1.15002      -5.81886       5.81886       1769.78       1775.60    
  47  0.930307     -0.722406E-01 -0.365522      0.365522       1768.86       1769.23    
  48  0.668609     -0.402556      -2.03685       2.03685       1761.86       1763.90    
  49  0.932709     -0.696615E-01 -0.352473      0.352473       1780.99       1781.34    
  50  0.277669E-01  -3.58391      -18.1338       18.1338       1783.81       1801.94    
  51  0.541236     -0.613900      -3.10621       3.10621       1775.88       1778.99    
  52  0.938218     -0.637734E-01 -0.322680      0.322680       1785.45       1785.77    
  53  0.844137     -0.169440     -0.857330      0.857330       1779.22       1780.08    
  54  0.416655     -0.875497      -4.42983       4.42983       1785.55       1789.98    
  55  0.516231     -0.661200      -3.34553       3.34553       1785.82       1789.16    
  56  0.108139      -2.22434      -11.2547       11.2547       1790.28       1801.54    
  57  0.211754      -1.55233      -7.85446       7.85446       1790.58       1798.44    
  58  0.650924     -0.429362      -2.17248       2.17248       1725.18       1727.36    
loop,thermsimp(1:2)       87   1.22116       24.8334    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    481       1694.87         68.62          1.16         38.88          0.63          0.05        109.34
Just calling func    0   0        109.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    482       1784.24         68.38          1.19         39.27          0.39          0.05        109.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  480    1694.9        2.915     -3.058      3.247     -102.6    -0.1068    
                      0.3154E-01  1.386     -99.70      4.308     0.2284    

                       3.529     -3.274      1.540      6255.      7000.    

                      -2.076      0.000      0.000      0.000     -1.221    



                      -2.042      0.000      0.000      7000.      798.3    

                      -1.508     -3.661     -7.379     -8.308      7.167    

                      -13.55     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.5464E-01 0.8074E-01 0.8969E-01 0.8947E-01

                     -0.2486     0.1236     0.4349E-01 0.6684E-01-0.1093E-01



                     -0.8815    -0.7046      0.000     0.5806E-01 0.2248    

                      0.1180     0.2035    -0.7116     0.6691E-01 0.1988    

                      0.1419     0.1291    -0.3846     -1.598      7000.    



                      -1.239     -1.259     -2.142     -1.982    -0.3807    

                     -0.3252      9.236      8.446    -0.1684E+05 -5.482    

                     -0.4008     -2.292      8.695      9.155    -0.1969E+05



                      -6.000     0.5070     0.9138E-01  8.892      9.058    

                     -0.1944E+05 -6.000     0.1480    -0.2694      9.765    

                       8.875    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1694.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       87
neval is:      481
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       88
neval is:      481


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      481     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507680     -0.677903      -3.43005       3.43005       1698.73       1702.16    
   2  0.790268     -0.235383      -1.19099       1.19099       1683.59       1684.79    
   3  0.317381      -1.14765      -5.80688       5.80688       1710.77       1716.57    
   4  0.767166     -0.265051      -1.34110       1.34110       1706.12       1707.46    
   5  0.313858      -1.15882      -5.86336       5.86336       1718.00       1723.86    
   6  0.251614      -1.37986      -6.98179       6.98179       1717.59       1724.57    
   7  0.948204     -0.531858E-01 -0.269109      0.269109       1723.86       1724.13    
   8  0.747265     -0.291336      -1.47410       1.47410       1716.43       1717.91    
   9  0.264530      -1.32980      -6.72852       6.72852       1725.18       1731.91    
  10  0.879562     -0.128331     -0.649327      0.649327       1729.80       1730.45    
  11  0.158918      -1.83937      -9.30681       9.30681       1726.01       1735.31    
  12  0.409577E-01  -3.19522      -16.1671       16.1671       1719.50       1735.66    
  13  0.832422     -0.183416     -0.928047      0.928047       1726.24       1727.17    
  14  0.930291     -0.722576E-01 -0.365608      0.365608       1733.46       1733.83    
  15  0.301800      -1.19799      -6.06159       6.06159       1723.95       1730.02    
  16  0.990785     -0.925803E-02 -0.468437E-01  0.468437E-01   1718.88       1718.93    
  17  0.328363      -1.11364      -5.63477       5.63477       1733.15       1738.78    
  18  0.938323     -0.636607E-01 -0.322110      0.322110       1731.74       1732.06    
  19  0.975952     -0.243418E-01 -0.123165      0.123165       1726.28       1726.40    
  20  0.459186     -0.778299      -3.93803       3.93803       1742.13       1746.07    
  21  0.540042     -0.616108      -3.11738       3.11738       1733.65       1736.77    
  22  0.543006     -0.610635      -3.08968       3.08968       1743.77       1746.86    
  23  0.733492     -0.309938      -1.56822       1.56822       1727.18       1728.75    
  24  0.451844     -0.794418      -4.01959       4.01959       1737.68       1741.70    
  25  0.753205     -0.283418      -1.43403       1.43403       1742.90       1744.33    
  26  0.701062     -0.355159      -1.79703       1.79703       1741.70       1743.50    
  27  0.878758     -0.129246     -0.653958      0.653958       1745.63       1746.28    
  28  0.378850     -0.970616      -4.91111       4.91111       1743.24       1748.15    
  29  0.963503     -0.371796E-01 -0.188121      0.188121       1737.19       1737.38    
  30  0.637747     -0.449814      -2.27596       2.27596       1745.08       1747.36    
  31  0.869781     -0.139514     -0.705912      0.705912       1746.48       1747.18    
  32  0.753171     -0.283463      -1.43427       1.43427       1745.80       1747.23    
  33  0.526050E-01  -2.94494      -14.9008       14.9008       1748.75       1763.65    
  34  0.243477      -1.41273      -7.14813       7.14813       1748.94       1756.09    
  35  0.519956E-01  -2.95660      -14.9598       14.9598       1752.70       1767.66    
  36  0.530132E-01  -2.93721      -14.8617       14.8617       1753.21       1768.07    
  37  0.521011     -0.651985      -3.29891       3.29891       1756.87       1760.16    
  38  0.536818     -0.622097      -3.14768       3.14768       1756.22       1759.36    
  39  0.452282     -0.793450      -4.01469       4.01469       1761.86       1765.88    
  40  0.824064     -0.193508     -0.979108      0.979108       1762.46       1763.43    
  41  0.432752     -0.837591      -4.23804       4.23804       1753.56       1757.80    
  42  0.639137     -0.447637      -2.26495       2.26495       1765.98       1768.25    
  43  0.200933      -1.60478      -8.11986       8.11986       1768.86       1776.98    
  44  0.195377      -1.63282      -8.26174       8.26174       1767.03       1775.29    
  45  0.487028     -0.719434      -3.64019       3.64019       1769.78       1773.42    
  46  0.434536     -0.833476      -4.21721       4.21721       1775.88       1780.10    
  47  0.779247     -0.249427      -1.26205       1.26205       1779.22       1780.49    
  48  0.245897      -1.40284      -7.09809       7.09809       1761.10       1768.19    
  49  0.510235     -0.672884      -3.40465       3.40465       1780.99       1784.39    
  50  0.681914E-01  -2.68544      -13.5877       13.5877       1775.74       1789.32    
  51  0.983162     -0.169810E-01 -0.859202E-01  0.859202E-01   1766.67       1766.76    
  52  0.562832     -0.574775      -2.90824       2.90824       1785.45       1788.36    
  53  0.578358     -0.547562      -2.77055       2.77055       1774.67       1777.44    
  54  0.103448      -2.26869      -11.4791       11.4791       1785.82       1797.29    
  55  0.941795     -0.599673E-01 -0.303422      0.303422       1785.55       1785.85    
  56  0.246008      -1.40239      -7.09581       7.09581       1790.58       1797.68    
  57  0.655852     -0.421820      -2.13432       2.13432       1790.28       1792.42    
  58  0.816413     -0.202835      -1.02630       1.02630       1694.87       1695.90    
loop,thermsimp(1:2)       88   3.43005       1.19099    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    483       1648.93         68.27          1.19         39.57          0.23          0.05        109.30
Just calling func    0   0        109.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    484       1687.63         68.30          1.19         39.40          0.35          0.05        109.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1648.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       88
neval is:      483
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       89
neval is:      483


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      483     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880944     -0.126761     -0.641385      0.641385       1683.59       1684.24    
   2  0.678316     -0.388142      -1.96392       1.96392       1694.87       1696.83    
   3  0.135490      -1.99886      -10.1138       10.1138       1698.73       1708.84    
   4  0.362841      -1.01379      -5.12957       5.12957       1706.12       1711.25    
   5  0.288564      -1.24284      -6.28850       6.28850       1710.77       1717.05    
   6  0.722355     -0.325238      -1.64564       1.64564       1716.43       1718.08    
   7  0.978389     -0.218479E-01 -0.110546      0.110546       1718.88       1718.99    
   8  0.883441     -0.123930     -0.627061      0.627061       1718.00       1718.63    
   9  0.537650     -0.620547      -3.13984       3.13984       1723.86       1727.00    
  10  0.945156     -0.564053E-01 -0.285399      0.285399       1717.59       1717.87    
  11  0.902011     -0.103129     -0.521810      0.521810       1726.28       1726.80    
  12  0.953192     -0.479389E-01 -0.242561      0.242561       1726.24       1726.48    
  13  0.287473      -1.24663      -6.30767       6.30767       1727.18       1733.49    
  14  0.403089     -0.908597      -4.59731       4.59731       1723.95       1728.55    
  15  0.441004     -0.818701      -4.14246       4.14246       1729.80       1733.94    
  16  0.639526     -0.447028      -2.26187       2.26187       1725.18       1727.45    
  17  0.380765     -0.965572      -4.88559       4.88559       1731.74       1736.62    
  18  0.659762     -0.415876      -2.10424       2.10424       1733.46       1735.56    
  19  0.375709     -0.978939      -4.95323       4.95323       1726.01       1730.96    
  20  0.963753     -0.369203E-01 -0.186809      0.186809       1719.50       1719.68    
  21  0.550567E-02  -5.20198      -26.3209       26.3209       1733.65       1759.97    
  22  0.406012     -0.901372      -4.56075       4.56075       1737.19       1741.75    
  23  0.718789     -0.330187      -1.67068       1.67068       1733.15       1734.82    
  24  0.634557     -0.454828      -2.30134       2.30134       1737.68       1739.98    
  25  0.531123     -0.632761      -3.20164       3.20164       1741.70       1744.90    
  26  0.839681     -0.174733     -0.884112      0.884112       1742.90       1743.78    
  27  0.404403     -0.905343      -4.58084       4.58084       1742.13       1746.71    
  28  0.364094      -1.01034      -5.11213       5.11213       1745.63       1750.74    
  29  0.195203      -1.63372      -8.26627       8.26627       1743.77       1752.03    
  30  0.895643     -0.110213     -0.557655      0.557655       1746.48       1747.03    
  31  0.350505      -1.04838      -5.30458       5.30458       1745.80       1751.10    
  32  0.246469      -1.40052      -7.08634       7.08634       1745.08       1752.17    
  33  0.491662     -0.709964      -3.59227       3.59227       1743.24       1746.83    
  34  0.570678     -0.560930      -2.83819       2.83819       1748.94       1751.78    
  35  0.127892      -2.05657      -10.4058       10.4058       1753.56       1763.97    
  36  0.671111     -0.398821      -2.01795       2.01795       1756.22       1758.23    
  37  0.492283     -0.708702      -3.58588       3.58588       1756.87       1760.45    
  38  0.784530     -0.242670      -1.22786       1.22786       1762.46       1763.68    
  39  0.804537     -0.217489      -1.10045       1.10045       1748.75       1749.85    
  40  0.951874     -0.493229E-01 -0.249563      0.249563       1761.86       1762.11    
  41  0.860836     -0.149852     -0.758219      0.758219       1766.67       1767.43    
  42  0.441943E-01  -3.11916      -15.7823       15.7823       1752.70       1768.48    
  43  0.863376     -0.146905     -0.743307      0.743307       1753.21       1753.95    
  44  0.717499E-02  -4.93715      -24.9810       24.9810       1761.10       1786.08    
  45  0.257105      -1.35827      -6.87256       6.87256       1765.98       1772.85    
  46  0.834736     -0.180640     -0.913998      0.913998       1769.78       1770.69    
  47  0.406979     -0.898994      -4.54872       4.54872       1767.03       1771.58    
  48  0.751883     -0.285174      -1.44292       1.44292       1768.86       1770.31    
  49  0.426180     -0.852893      -4.31546       4.31546       1774.67       1778.98    
  50  0.780644     -0.247637      -1.25299       1.25299       1775.88       1777.14    
  51  0.334820      -1.09416      -5.53623       5.53623       1779.22       1784.76    
  52  0.690618     -0.370169      -1.87298       1.87298       1780.99       1782.86    
  53  0.786960     -0.239578      -1.21221       1.21221       1785.55       1786.76    
  54  0.762697     -0.270894      -1.37067       1.37067       1785.45       1786.82    
  55  0.224832      -1.49240      -7.55123       7.55123       1775.74       1783.29    
  56  0.159776      -1.83398      -9.27955       9.27955       1790.28       1799.56    
  57  0.635541     -0.453278      -2.29349       2.29349       1785.82       1788.11    
  58  0.515119     -0.663357      -3.35645       3.35645       1648.93       1652.28    
loop,thermsimp(1:2)       89  0.641385       1.96392    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    485       1796.24         68.22          1.17         39.36          0.48          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    486       1751.52         68.15          1.17         39.32          0.60          0.05        109.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1751.52
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       89
neval is:      485
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       90
neval is:      485


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      485     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519767     -0.654376      -3.31100       3.31100       1648.93       1652.24    
   2  0.451273E-03  -7.70344      -38.9778       38.9778       1683.59       1722.57    
   3  0.838605E-01  -2.47860      -12.5412       12.5412       1694.87       1707.41    
   4  0.268196      -1.31604      -6.65888       6.65888       1698.73       1705.39    
   5  0.682721     -0.381669      -1.93117       1.93117       1706.12       1708.05    
   6  0.134603      -2.00542      -10.1470       10.1470       1710.77       1720.91    
   7  0.809634     -0.211173      -1.06849       1.06849       1717.59       1718.66    
   8  0.578058     -0.548081      -2.77317       2.77317       1716.43       1719.21    
   9  0.181348      -1.70734      -8.63876       8.63876       1718.00       1726.64    
  10  0.893989     -0.112062     -0.567008      0.567008       1718.88       1719.45    
  11  0.137049      -1.98742      -10.0559       10.0559       1719.50       1729.55    
  12  0.316319      -1.15100      -5.82384       5.82384       1726.24       1732.07    
  13  0.458104     -0.780660      -3.94998       3.94998       1726.28       1730.23    
  14  0.250826      -1.38300      -6.99767       6.99767       1723.86       1730.86    
  15  0.631289     -0.459992      -2.32746       2.32746       1725.18       1727.51    
  16  0.815448     -0.204018      -1.03229       1.03229       1723.95       1724.99    
  17  0.957573     -0.433532E-01 -0.219358      0.219358       1726.01       1726.22    
  18  0.633470     -0.456542      -2.31001       2.31001       1727.18       1729.49    
  19  0.660593     -0.414617      -2.09787       2.09787       1729.80       1731.90    
  20  0.664533     -0.408671      -2.06779       2.06779       1733.15       1735.21    
  21  0.620837     -0.476686      -2.41193       2.41193       1733.46       1735.87    
  22  0.195138      -1.63405      -8.26795       8.26795       1731.74       1740.01    
  23  0.439070     -0.823096      -4.16469       4.16469       1737.68       1741.85    
  24  0.731595     -0.312528      -1.58133       1.58133       1737.19       1738.77    
  25  0.176973      -1.73176      -8.76234       8.76234       1742.90       1751.66    
  26  0.450618     -0.797135      -4.03334       4.03334       1741.70       1745.74    
  27  0.306042E-01  -3.48662      -17.6416       17.6416       1742.13       1759.77    
  28  0.737213     -0.304879      -1.54262       1.54262       1743.24       1744.78    
  29  0.103939      -2.26395      -11.4551       11.4551       1746.48       1757.93    
  30  0.327275      -1.11695      -5.65156       5.65156       1748.75       1754.40    
  31  0.384261     -0.956434      -4.83935       4.83935       1745.63       1750.47    
  32  0.844251E-01  -2.47189      -12.5072       12.5072       1745.80       1758.31    
  33  0.341620      -1.07406      -5.43450       5.43450       1748.94       1754.38    
  34  0.590291     -0.527140      -2.66722       2.66722       1743.77       1746.43    
  35  0.335291      -1.09276      -5.52913       5.52913       1745.08       1750.61    
  36  0.871923     -0.137055     -0.693468      0.693468       1753.21       1753.90    
  37  0.216579E-01  -3.83238      -19.3911       19.3911       1756.22       1775.61    
  38  0.674344     -0.394015      -1.99363       1.99363       1733.65       1735.64    
  39  0.622707     -0.473679      -2.39672       2.39672       1756.87       1759.26    
  40  0.805084     -0.216809      -1.09701       1.09701       1761.86       1762.96    
  41  0.298614      -1.20860      -6.11528       6.11528       1762.46       1768.57    
  42  0.556750     -0.585639      -2.96321       2.96321       1753.56       1756.53    
  43  0.239374      -1.42973      -7.23413       7.23413       1766.67       1773.90    
  44  0.403553     -0.907447      -4.59149       4.59149       1752.70       1757.29    
  45  0.815210     -0.204309      -1.03376       1.03376       1768.86       1769.90    
  46  0.701880     -0.353993      -1.79113       1.79113       1769.78       1771.57    
  47  0.996873     -0.313153E-02 -0.158449E-01  0.158449E-01   1767.03       1767.05    
  48  0.270799      -1.30638      -6.61000       6.61000       1765.98       1772.59    
  49  0.129999      -2.04023      -10.3231       10.3231       1775.88       1786.21    
  50  0.609288     -0.495465      -2.50695       2.50695       1774.67       1777.18    
  51  0.205179E-01  -3.88646      -19.6647       19.6647       1780.99       1800.65    
  52  0.178070      -1.72558      -8.73108       8.73108       1775.74       1784.47    
  53  0.591536     -0.525033      -2.65656       2.65656       1779.22       1781.88    
  54  0.673211     -0.395696      -2.00214       2.00214       1761.10       1763.10    
  55  0.641161     -0.444474      -2.24895       2.24895       1785.55       1787.80    
  56  0.933700     -0.685999E-01 -0.347101      0.347101       1785.45       1785.80    
  57  0.542010     -0.612470      -3.09897       3.09897       1785.82       1788.91    
  58  0.364404      -1.00949      -5.10782       5.10782       1751.52       1756.63    
loop,thermsimp(1:2)       90   3.31100       38.9778    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    487       1730.45         68.30          1.18         39.35          0.53          0.05        109.40
Just calling func    0   0        109.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1730.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       90
neval is:      486
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       91
neval is:      486


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      486     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.525961     -0.642528      -3.25106       3.25106       1648.93       1652.18    
   2  0.526989E-01  -2.94316      -14.8918       14.8918       1698.73       1713.62    
   3  0.341680      -1.07388      -5.43361       5.43361       1694.87       1700.30    
   4  0.405255     -0.903238      -4.57019       4.57019       1706.12       1710.69    
   5  0.514563     -0.664437      -3.36191       3.36191       1717.59       1720.95    
   6  0.466000     -0.763569      -3.86350       3.86350       1716.43       1720.30    
   7  0.342846      -1.07047      -5.41637       5.41637       1718.88       1724.29    
   8  0.358671      -1.02535      -5.18806       5.18806       1710.77       1715.95    
   9  0.554031     -0.590534      -2.98798       2.98798       1683.59       1686.58    
  10  0.778335     -0.250599      -1.26798       1.26798       1723.95       1725.22    
  11  0.217304      -1.52646      -7.72357       7.72357       1726.01       1733.73    
  12  0.982801     -0.173486E-01 -0.877801E-01  0.877801E-01   1718.00       1718.09    
  13  0.298897      -1.20766      -6.11049       6.11049       1725.18       1731.29    
  14  0.152611      -1.87986      -9.51172       9.51172       1727.18       1736.69    
  15  0.834186E-01  -2.48388      -12.5679       12.5679       1719.50       1732.06    
  16  0.691361     -0.369093      -1.86753       1.86753       1726.28       1728.15    
  17  0.202495E-01  -3.89963      -19.7313       19.7313       1723.86       1743.59    
  18  0.462938     -0.770162      -3.89686       3.89686       1729.80       1733.69    
  19  0.893654     -0.112436     -0.568905      0.568905       1726.24       1726.81    
  20  0.751255     -0.286010      -1.44715       1.44715       1733.15       1734.59    
  21  0.528256E-02  -5.24334      -26.5302       26.5302       1733.65       1760.18    
  22  0.661719     -0.412914      -2.08926       2.08926       1733.46       1735.55    
  23  0.711098     -0.340945      -1.72511       1.72511       1737.19       1738.92    
  24  0.394814     -0.929342      -4.70227       4.70227       1731.74       1736.44    
  25  0.529459     -0.635899      -3.21752       3.21752       1737.68       1740.90    
  26  0.123125      -2.09456      -10.5980       10.5980       1743.24       1753.83    
  27  0.150045      -1.89682      -9.59751       9.59751       1741.70       1751.30    
  28  0.847587     -0.165361     -0.836694      0.836694       1743.77       1744.60    
  29  0.684633     -0.378873      -1.91702       1.91702       1745.63       1747.55    
  30  0.238386      -1.43386      -7.25505       7.25505       1745.08       1752.34    
  31  0.260935      -1.34348      -6.79775       6.79775       1742.90       1749.69    
  32  0.731525E-01  -2.61521      -13.2324       13.2324       1753.21       1766.44    
  33  0.760028     -0.274400      -1.38841       1.38841       1748.94       1750.33    
  34  0.748054     -0.290280      -1.46876       1.46876       1748.75       1750.22    
  35  0.448284     -0.802329      -4.05962       4.05962       1753.56       1757.62    
  36  0.658970     -0.417078      -2.11033       2.11033       1751.52       1753.63    
  37  0.101931      -2.28346      -11.5538       11.5538       1752.70       1764.26    
  38  0.946705     -0.547677E-01 -0.277113      0.277113       1746.48       1746.75    
  39  0.923584     -0.794931E-01 -0.402218      0.402218       1745.80       1746.20    
  40  0.632977     -0.457321      -2.31395       2.31395       1756.87       1759.18    
  41  0.386701     -0.950103      -4.80732       4.80732       1742.13       1746.94    
  42  0.585154     -0.535880      -2.71144       2.71144       1761.86       1764.57    
  43  0.538343     -0.619260      -3.13332       3.13332       1761.10       1764.23    
  44  0.843970     -0.169639     -0.858337      0.858337       1767.03       1767.89    
  45  0.420066     -0.867344      -4.38858       4.38858       1762.46       1766.84    
  46  0.826451     -0.190615     -0.964473      0.964473       1768.86       1769.83    
  47  0.523061     -0.648057      -3.27903       3.27903       1769.78       1773.06    
  48  0.699280     -0.357703      -1.80990       1.80990       1765.98       1767.79    
  49  0.662193     -0.412199      -2.08564       2.08564       1766.67       1768.76    
  50  0.173075E-01  -4.05661      -20.5256       20.5256       1756.22       1776.74    
  51  0.912691     -0.913577E-01 -0.462251      0.462251       1774.67       1775.13    
  52  0.962432     -0.382919E-01 -0.193749      0.193749       1779.22       1779.42    
  53  0.980621E-01  -2.32215      -11.7496       11.7496       1775.74       1787.49    
  54  0.231566      -1.46289      -7.40191       7.40191       1785.45       1792.85    
  55  0.141472      -1.95565      -9.89519       9.89519       1775.88       1785.78    
  56  0.678142     -0.388398      -1.96521       1.96521       1785.55       1787.51    
  57  0.379107     -0.969937      -4.90768       4.90768       1785.82       1790.72    
  58  0.304517E-01  -3.49161      -17.6668       17.6668       1730.45       1748.11    
loop,thermsimp(1:2)       91   3.25106       14.8918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    488       1676.55         68.44          1.20         39.33          0.30          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1676.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       91
neval is:      487
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       92
neval is:      487


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      487     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179926      -1.71521      -8.67861       8.67861       1648.93       1657.61    
   2  0.805701     -0.216043      -1.09313       1.09313       1683.59       1684.69    
   3  0.341067      -1.07568      -5.44270       5.44270       1694.87       1700.31    
   4  0.596982     -0.515868      -2.61018       2.61018       1706.12       1708.73    
   5  0.575413E-01  -2.85525      -14.4470       14.4470       1698.73       1713.18    
   6  0.390921     -0.939249      -4.75240       4.75240       1710.77       1715.52    
   7  0.437495     -0.826689      -4.18287       4.18287       1718.00       1722.18    
   8  0.513955     -0.665620      -3.36790       3.36790       1716.43       1719.80    
   9  0.871599     -0.137426     -0.695345      0.695345       1717.59       1718.28    
  10  0.196691      -1.62612      -8.22783       8.22783       1718.88       1727.11    
  11  0.987685E-01  -2.31498      -11.7133       11.7133       1723.95       1735.67    
  12  0.448984     -0.800769      -4.05172       4.05172       1726.24       1730.29    
  13  0.869491     -0.139847     -0.707597      0.707597       1726.28       1726.99    
  14  0.253569      -1.37212      -6.94265       6.94265       1725.18       1732.13    
  15  0.765994     -0.266581      -1.34885       1.34885       1719.50       1720.85    
  16  0.269007      -1.31302      -6.64359       6.64359       1729.80       1736.44    
  17  0.527354     -0.639883      -3.23767       3.23767       1726.01       1729.24    
  18  0.991870     -0.816303E-02 -0.413032E-01  0.413032E-01   1733.15       1733.19    
  19  0.834963     -0.180368     -0.912626      0.912626       1733.46       1734.37    
  20  0.939146E-01  -2.36537      -11.9683       11.9683       1731.74       1743.71    
  21  0.784991     -0.242082      -1.22489       1.22489       1727.18       1728.41    
  22  0.164899      -1.80242      -9.11988       9.11988       1737.19       1746.31    
  23  0.890878     -0.115548     -0.584647      0.584647       1737.68       1738.27    
  24  0.996288E-01  -2.30630      -11.6694       11.6694       1723.86       1735.53    
  25  0.367348E-01  -3.30403      -16.7177       16.7177       1743.77       1760.48    
  26  0.874828     -0.133728     -0.676636      0.676636       1745.80       1746.47    
  27  0.101428      -2.28841      -11.5789       11.5789       1746.48       1758.05    
  28  0.583716     -0.538341      -2.72389       2.72389       1742.13       1744.85    
  29  0.265971      -1.32437      -6.70102       6.70102       1745.63       1752.33    
  30  0.739852     -0.301305      -1.52454       1.52454       1730.45       1731.97    
  31  0.974346     -0.259889E-01 -0.131498      0.131498       1742.90       1743.03    
  32  0.357297      -1.02919      -5.20747       5.20747       1748.75       1753.96    
  33  0.768033     -0.263923      -1.33539       1.33539       1748.94       1750.28    
  34  0.236843      -1.44036      -7.28791       7.28791       1741.70       1748.99    
  35  0.490030E-01  -3.01587      -15.2597       15.2597       1745.08       1760.34    
  36  0.842269     -0.171656     -0.868541      0.868541       1751.52       1752.39    
  37  0.292342      -1.22983      -6.22268       6.22268       1743.24       1749.46    
  38  0.596407     -0.516832      -2.61506       2.61506       1753.56       1756.18    
  39  0.359551      -1.02290      -5.17566       5.17566       1756.87       1762.04    
  40  0.461849     -0.772517      -3.90877       3.90877       1733.65       1737.56    
  41  0.662754     -0.411352      -2.08135       2.08135       1761.10       1763.18    
  42  0.516002     -0.661645      -3.34779       3.34779       1752.70       1756.05    
  43  0.619599     -0.478683      -2.42204       2.42204       1761.86       1764.28    
  44  0.811136     -0.209319      -1.05911       1.05911       1753.21       1754.26    
  45  0.490033     -0.713282      -3.60906       3.60906       1762.46       1766.06    
  46  0.976838     -0.234348E-01 -0.118575      0.118575       1765.98       1766.10    
  47  0.963378E-01  -2.33989      -11.8394       11.8394       1767.03       1778.87    
  48  0.811272     -0.209152      -1.05826       1.05826       1766.67       1767.73    
  49  0.401456     -0.912658      -4.61786       4.61786       1768.86       1773.48    
  50  0.910235E-01  -2.39664      -12.1265       12.1265       1769.78       1781.91    
  51  0.630523     -0.461206      -2.33361       2.33361       1774.67       1777.00    
  52  0.141261      -1.95715      -9.90275       9.90275       1756.22       1766.12    
  53  0.262014      -1.33936      -6.77687       6.77687       1779.22       1786.00    
  54  0.814315     -0.205408      -1.03932       1.03932       1775.88       1776.92    
  55  0.510597     -0.672174      -3.40106       3.40106       1775.74       1779.14    
  56  0.329822E-01  -3.41179      -17.2629       17.2629       1785.55       1802.81    
  57  0.261292      -1.34212      -6.79082       6.79082       1785.82       1792.61    
  58  0.984526E-02  -4.62077      -23.3801       23.3801       1676.55       1699.93    
loop,thermsimp(1:2)       92   8.67861       1.09313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    489       1715.65         68.32          1.18         39.18          0.54          0.05        109.27
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1715.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       92
neval is:      488
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       93
neval is:      488


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      488     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356532      -1.03133      -5.21832       5.21832       1648.93       1654.15    
   2  0.156780      -1.85291      -9.37536       9.37536       1683.59       1692.97    
   3  0.871556     -0.137475     -0.695596      0.695596       1676.55       1677.25    
   4  0.686712     -0.375840      -1.90167       1.90167       1694.87       1696.77    
   5  0.980206     -0.199924E-01 -0.101157      0.101157       1706.12       1706.22    
   6  0.864789     -0.145270     -0.735033      0.735033       1698.73       1699.46    
   7  0.429178     -0.845883      -4.27999       4.27999       1710.77       1715.05    
   8  0.562262     -0.575787      -2.91336       2.91336       1717.59       1720.50    
   9  0.239176      -1.43056      -7.23831       7.23831       1716.43       1723.67    
  10  0.978598     -0.216345E-01 -0.109466      0.109466       1719.50       1719.61    
  11  0.938327     -0.636569E-01 -0.322091      0.322091       1718.00       1718.32    
  12  0.452510     -0.792946      -4.01214       4.01214       1726.28       1730.29    
  13  0.117352      -2.14257      -10.8410       10.8410       1718.88       1729.72    
  14  0.947736     -0.536798E-01 -0.271609      0.271609       1727.18       1727.45    
  15  0.990891     -0.915035E-02 -0.462989E-01  0.462989E-01   1726.01       1726.05    
  16  0.530083     -0.634722      -3.21156       3.21156       1726.24       1729.45    
  17  0.464385     -0.767041      -3.88107       3.88107       1730.45       1734.33    
  18  0.328231E-01  -3.41662      -17.2874       17.2874       1725.18       1742.47    
  19  0.141399E-01  -4.25876      -21.5484       21.5484       1733.15       1754.69    
  20  0.673551     -0.395192      -1.99959       1.99959       1733.46       1735.46    
  21  0.386316E-01  -3.25369      -16.4630       16.4630       1723.86       1740.32    
  22  0.592304     -0.523735      -2.64999       2.64999       1723.95       1726.60    
  23  0.755966     -0.279758      -1.41552       1.41552       1729.80       1731.21    
  24  0.397655     -0.922171      -4.66599       4.66599       1733.65       1738.31    
  25  0.636306     -0.452076      -2.28741       2.28741       1737.68       1739.97    
  26  0.610031     -0.494246      -2.50078       2.50078       1742.90       1745.40    
  27  0.424783     -0.856176      -4.33207       4.33207       1731.74       1736.07    
  28  0.748792     -0.289294      -1.46377       1.46377       1742.13       1743.59    
  29  0.481989     -0.729833      -3.69280       3.69280       1737.19       1740.89    
  30  0.711380     -0.340548      -1.72310       1.72310       1745.80       1747.52    
  31  0.853958     -0.157873     -0.798804      0.798804       1741.70       1742.50    
  32  0.194550      -1.63706      -8.28320       8.28320       1743.24       1751.52    
  33  0.972044     -0.283541E-01 -0.143466      0.143466       1748.94       1749.09    
  34  0.292837      -1.22814      -6.21412       6.21412       1745.63       1751.84    
  35  0.100865      -2.29397      -11.6070       11.6070       1751.52       1763.13    
  36  0.768654     -0.263114      -1.33130       1.33130       1748.75       1750.08    
  37  0.401537     -0.912456      -4.61684       4.61684       1753.21       1757.82    
  38  0.809292     -0.211595      -1.07063       1.07063       1752.70       1753.77    
  39  0.427839     -0.849009      -4.29581       4.29581       1753.56       1757.86    
  40  0.350578      -1.04817      -5.30353       5.30353       1746.48       1751.78    
  41  0.709565     -0.343104      -1.73603       1.73603       1745.08       1746.82    
  42  0.925864     -0.770281E-01 -0.389746      0.389746       1743.77       1744.16    
  43  0.470142     -0.754721      -3.81873       3.81873       1756.87       1760.68    
  44  0.168112      -1.78312      -9.02224       9.02224       1761.10       1770.12    
  45  0.858320     -0.152778     -0.773023      0.773023       1761.86       1762.64    
  46  0.209215      -1.56439      -7.91551       7.91551       1762.46       1770.37    
  47  0.925371     -0.775610E-01 -0.392442      0.392442       1765.98       1766.37    
  48  0.226229E-01  -3.78879      -19.1705       19.1705       1756.22       1775.39    
  49  0.414630     -0.880370      -4.45449       4.45449       1766.67       1771.12    
  50  0.588747     -0.529758      -2.68047       2.68047       1768.86       1771.54    
  51  0.190202      -1.65967      -8.39757       8.39757       1775.88       1784.28    
  52  0.669939     -0.400569      -2.02679       2.02679       1774.67       1776.70    
  53  0.662360     -0.411945      -2.08436       2.08436       1767.03       1769.11    
  54  0.491671E-01  -3.01253      -15.2428       15.2428       1775.74       1790.98    
  55  0.102120      -2.28160      -11.5444       11.5444       1769.78       1781.32    
  56  0.132651      -2.02004      -10.2210       10.2210       1779.22       1789.44    
  57  0.260061      -1.34684      -6.81473       6.81473       1785.82       1792.63    
  58  0.538873     -0.618275      -3.12834       3.12834       1715.65       1718.78    
loop,thermsimp(1:2)       93   5.21832       9.37536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    490       1693.72         68.42          1.16         39.26          0.47          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1693.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       93
neval is:      489
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       94
neval is:      489


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      489     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.799794     -0.223401      -1.13036       1.13036       1648.93       1650.06    
   2  0.812618     -0.207494      -1.04988       1.04988       1676.55       1677.60    
   3  0.153451      -1.87438      -9.48395       9.48395       1683.59       1693.08    
   4  0.191065      -1.65514      -8.37466       8.37466       1694.87       1703.24    
   5  0.619921     -0.478164      -2.41941       2.41941       1698.73       1701.15    
   6  0.788743     -0.237315      -1.20077       1.20077       1706.12       1707.32    
   7  0.897459     -0.108188     -0.547408      0.547408       1710.77       1711.31    
   8  0.153705      -1.87272      -9.47557       9.47557       1718.00       1727.47    
   9  0.996049     -0.395849E-02 -0.200292E-01  0.200292E-01   1715.65       1715.67    
  10  0.560813E-01  -2.88095      -14.5770       14.5770       1719.50       1734.07    
  11  0.188305      -1.66969      -8.44830       8.44830       1717.59       1726.04    
  12  0.135074      -2.00193      -10.1294       10.1294       1716.43       1726.56    
  13  0.485175     -0.723245      -3.65947       3.65947       1726.01       1729.67    
  14  0.690741     -0.369991      -1.87208       1.87208       1723.95       1725.83    
  15  0.742932     -0.297150      -1.50352       1.50352       1727.18       1728.69    
  16  0.780541     -0.247768      -1.25366       1.25366       1726.24       1727.50    
  17  0.518671E-01  -2.95907      -14.9723       14.9723       1718.88       1733.85    
  18  0.968635     -0.318676E-01 -0.161244      0.161244       1726.28       1726.44    
  19  0.878004     -0.130104     -0.658298      0.658298       1729.80       1730.46    
  20  0.868279     -0.141242     -0.714655      0.714655       1730.45       1731.16    
  21  0.554456     -0.589768      -2.98410       2.98410       1733.46       1736.44    
  22  0.114030      -2.17129      -10.9863       10.9863       1731.74       1742.72    
  23  0.397460     -0.922661      -4.66847       4.66847       1733.65       1738.32    
  24  0.299789      -1.20467      -6.09540       6.09540       1737.68       1743.78    
  25  0.214585      -1.53905      -7.78727       7.78727       1723.86       1731.65    
  26  0.583444     -0.538806      -2.72625       2.72625       1737.19       1739.92    
  27  0.399403     -0.917786      -4.64380       4.64380       1725.18       1729.83    
  28  0.421825     -0.863165      -4.36744       4.36744       1741.70       1746.07    
  29  0.102868      -2.27431      -11.5075       11.5075       1742.13       1753.64    
  30  0.774422     -0.255639      -1.29348       1.29348       1743.77       1745.06    
  31  0.564329     -0.572118      -2.89480       2.89480       1742.90       1745.79    
  32  0.206718      -1.57640      -7.97626       7.97626       1745.08       1753.06    
  33  0.407431     -0.897885      -4.54311       4.54311       1745.80       1750.34    
  34  0.505624     -0.681961      -3.45058       3.45058       1748.94       1752.40    
  35  0.451161     -0.795932      -4.02725       4.02725       1748.75       1752.78    
  36  0.619041     -0.479583      -2.42659       2.42659       1743.24       1745.66    
  37  0.326941      -1.11798      -5.65672       5.65672       1746.48       1752.13    
  38  0.750232     -0.287372      -1.45404       1.45404       1745.63       1747.08    
  39  0.718810     -0.330159      -1.67053       1.67053       1752.70       1754.37    
  40  0.366798      -1.00294      -5.07468       5.07468       1733.15       1738.22    
  41  0.467420     -0.760527      -3.84811       3.84811       1753.21       1757.05    
  42  0.854905     -0.156764     -0.793195      0.793195       1753.56       1754.36    
  43  0.248161      -1.39368      -7.05172       7.05172       1756.87       1763.92    
  44  0.201563      -1.60165      -8.10403       8.10403       1761.86       1769.97    
  45  0.108988      -2.21652      -11.2151       11.2151       1751.52       1762.74    
  46  0.988176     -0.118946E-01 -0.601840E-01  0.601840E-01   1765.98       1766.04    
  47  0.639214     -0.447517      -2.26434       2.26434       1767.03       1769.29    
  48  0.165897E-01  -4.09897      -20.7399       20.7399       1761.10       1781.84    
  49  0.235415      -1.44641      -7.31851       7.31851       1762.46       1769.77    
  50  0.140842      -1.96012      -9.91779       9.91779       1766.67       1776.59    
  51  0.110985      -2.19836      -11.1232       11.1232       1768.86       1779.99    
  52  0.913750     -0.901977E-01 -0.456382      0.456382       1756.22       1756.67    
  53  0.841658E-01  -2.47497      -12.5228       12.5228       1774.67       1787.19    
  54  0.639761     -0.446660      -2.26001       2.26001       1769.78       1772.04    
  55  0.526985E-01  -2.94317      -14.8918       14.8918       1775.88       1790.78    
  56  0.523686     -0.646862      -3.27299       3.27299       1779.22       1782.50    
  57  0.992660     -0.736704E-02 -0.372757E-01  0.372757E-01   1775.74       1775.77    
  58  0.879505     -0.128396     -0.649657      0.649657       1693.72       1694.37    
loop,thermsimp(1:2)       94   1.13036       1.04988    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    491       1767.87         68.35          1.20         39.30          0.50          0.05        109.40
Just calling func    0   0        109.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1767.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       94
neval is:      490
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       95
neval is:      490


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      490     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253064      -1.37411      -6.95272       6.95272       1648.93       1655.88    
   2  0.229389      -1.47233      -7.44970       7.44970       1676.55       1684.00    
   3  0.571162     -0.560083      -2.83390       2.83390       1683.59       1686.43    
   4  0.537902     -0.620079      -3.13747       3.13747       1693.72       1696.85    
   5  0.112268      -2.18686      -11.0651       11.0651       1698.73       1709.79    
   6  0.988186     -0.118842E-01 -0.601318E-01  0.601318E-01   1694.87       1694.93    
   7  0.358165      -1.02676      -5.19519       5.19519       1706.12       1711.31    
   8  0.768403     -0.263441      -1.33296       1.33296       1710.77       1712.10    
   9  0.493061     -0.707122      -3.57789       3.57789       1715.65       1719.23    
  10  0.755030     -0.280998      -1.42179       1.42179       1723.95       1725.38    
  11  0.380853     -0.965342      -4.88443       4.88443       1717.59       1722.47    
  12  0.131667      -2.02748      -10.2586       10.2586       1726.28       1736.54    
  13  0.812799     -0.207272      -1.04875       1.04875       1716.43       1717.48    
  14  0.390991     -0.939070      -4.75150       4.75150       1718.00       1722.75    
  15  0.782458     -0.245315      -1.24124       1.24124       1726.24       1727.48    
  16  0.348518E-01  -3.35665      -16.9840       16.9840       1727.18       1744.17    
  17  0.671068     -0.398885      -2.01828       2.01828       1726.01       1728.02    
  18  0.848918     -0.163793     -0.828759      0.828759       1725.18       1726.01    
  19  0.246224      -1.40151      -7.09136       7.09136       1729.80       1736.89    
  20  0.548254     -0.601017      -3.04102       3.04102       1730.45       1733.49    
  21  0.496910     -0.699346      -3.53854       3.53854       1723.86       1727.40    
  22  0.621299     -0.475942      -2.40817       2.40817       1718.88       1721.29    
  23  0.222686      -1.50199      -7.59977       7.59977       1719.50       1727.10    
  24  0.541907     -0.612662      -3.09994       3.09994       1733.46       1736.56    
  25  0.599206     -0.512150      -2.59137       2.59137       1733.15       1735.74    
  26  0.147915      -1.91112      -9.66985       9.66985       1733.65       1743.32    
  27  0.952413     -0.487561E-01 -0.246696      0.246696       1737.19       1737.44    
  28  0.981186     -0.189927E-01 -0.960993E-01  0.960993E-01   1731.74       1731.83    
  29  0.560306     -0.579272      -2.93100       2.93100       1737.68       1740.61    
  30  0.892317     -0.113934     -0.576482      0.576482       1743.77       1744.34    
  31  0.936237E-03  -6.97364      -35.2852       35.2852       1743.24       1778.52    
  32  0.367075      -1.00219      -5.07086       5.07086       1742.90       1747.97    
  33  0.440672     -0.819456      -4.14627       4.14627       1741.70       1745.85    
  34  0.928002     -0.747214E-01 -0.378075      0.378075       1745.63       1746.01    
  35  0.424766     -0.856216      -4.33227       4.33227       1745.80       1750.13    
  36  0.846974     -0.166085     -0.840354      0.840354       1746.48       1747.32    
  37  0.581252     -0.542571      -2.74530       2.74530       1748.94       1751.69    
  38  0.316247      -1.15123      -5.82500       5.82500       1748.75       1754.58    
  39  0.211145E-01  -3.85779      -19.5196       19.5196       1745.08       1764.60    
  40  0.698864     -0.358299      -1.81292       1.81292       1742.13       1743.94    
  41  0.616376     -0.483899      -2.44843       2.44843       1753.56       1756.01    
  42  0.744369     -0.295219      -1.49375       1.49375       1752.70       1754.20    
  43  0.165839      -1.79674      -9.09113       9.09113       1756.22       1765.31    
  44  0.605775     -0.501246      -2.53620       2.53620       1753.21       1755.74    
  45  0.594138     -0.520643      -2.63435       2.63435       1751.52       1754.16    
  46  0.120602      -2.11526      -10.7028       10.7028       1756.87       1767.57    
  47  0.614289     -0.487290      -2.46559       2.46559       1765.98       1768.45    
  48  0.128959E-01  -4.35085      -22.0144       22.0144       1767.03       1789.04    
  49  0.863875     -0.146327     -0.740386      0.740386       1762.46       1763.20    
  50  0.984175     -0.159514E-01 -0.807109E-01  0.807109E-01   1761.86       1761.94    
  51  0.193234      -1.64385      -8.31754       8.31754       1769.78       1778.10    
  52  0.821829     -0.196223     -0.992845      0.992845       1775.74       1776.73    
  53  0.513646     -0.666220      -3.37093       3.37093       1766.67       1770.04    
  54  0.572807     -0.557207      -2.81935       2.81935       1768.86       1771.68    
  55  0.298452      -1.20915      -6.11803       6.11803       1761.10       1767.21    
  56  0.604405     -0.503511      -2.54766       2.54766       1779.22       1781.77    
  57  0.786763     -0.239828      -1.21348       1.21348       1774.67       1775.88    
  58  0.761650     -0.272268      -1.37762       1.37762       1767.87       1769.24    
loop,thermsimp(1:2)       95   6.95272       7.44970    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    492       1784.66         68.34          1.18         39.34          0.52          0.05        109.43
Just calling func    0   0        109.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1784.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       95
neval is:      491
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   26.4080    

hmean,hstd :    1736.59       26.4080    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1736.59       26.4080    
h(1),h(best1),h(np1) :    1648.93       1648.93       1784.66    
htherm(1),htherm(best1),htherm(np1) :    1655.88       1655.88       1789.04    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        1
neval is:      491


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      491     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.704949     -0.349630      -1.76905       1.76905       1648.93       1650.70    
   2  0.970994     -0.294346E-01 -0.148933      0.148933       1676.55       1676.70    
   3  0.665247     -0.407596      -2.06235       2.06235       1683.59       1685.66    
   4  0.679606     -0.386241      -1.95430       1.95430       1694.87       1696.82    
   5  0.216334      -1.53093      -7.74619       7.74619       1693.72       1701.46    
   6  0.920084     -0.832900E-01 -0.421430      0.421430       1698.73       1699.15    
   7  0.922000     -0.812099E-01 -0.410905      0.410905       1706.12       1706.53    
   8  0.387073     -0.949143      -4.80246       4.80246       1710.77       1715.57    
   9  0.392085     -0.936277      -4.73737       4.73737       1716.43       1721.17    
  10  0.559162     -0.581315      -2.94133       2.94133       1715.65       1718.59    
  11  0.552599     -0.593124      -3.00108       3.00108       1718.88       1721.88    
  12  0.657815     -0.418831      -2.11920       2.11920       1717.59       1719.71    
  13  0.755087     -0.280923      -1.42141       1.42141       1718.00       1719.42    
  14  0.183724      -1.69432      -8.57291       8.57291       1723.95       1732.53    
  15  0.889314     -0.117305     -0.593540      0.593540       1725.18       1725.78    
  16  0.346116      -1.06098      -5.36834       5.36834       1719.50       1724.87    
  17  0.212120      -1.55060      -7.84573       7.84573       1723.86       1731.70    
  18  0.409709     -0.892309      -4.51490       4.51490       1726.24       1730.76    
  19  0.288781      -1.24209      -6.28469       6.28469       1726.01       1732.29    
  20  0.470431     -0.754106      -3.81562       3.81562       1731.74       1735.55    
  21  0.335548      -1.09199      -5.52524       5.52524       1730.45       1735.97    
  22  0.188346      -1.66947      -8.44718       8.44718       1733.15       1741.59    
  23  0.546572     -0.604090      -3.05657       3.05657       1726.28       1729.34    
  24  0.258243      -1.35386      -6.85022       6.85022       1733.46       1740.31    
  25  0.544051     -0.608712      -3.07996       3.07996       1729.80       1732.88    
  26  0.594635     -0.519807      -2.63012       2.63012       1737.19       1739.82    
  27  0.342233      -1.07226      -5.42543       5.42543       1737.68       1743.11    
  28  0.309367      -1.17323      -5.93628       5.93628       1733.65       1739.59    
  29  0.717331E-01  -2.63480      -13.3316       13.3316       1742.13       1755.46    
  30  0.443944E-02  -5.41723      -27.4100       27.4100       1727.18       1754.59    
  31  0.901850     -0.103307     -0.522710      0.522710       1743.77       1744.29    
  32  0.289566      -1.23937      -6.27096       6.27096       1741.70       1747.97    
  33  0.824723     -0.192707     -0.975059      0.975059       1745.63       1746.61    
  34  0.830455     -0.185782     -0.940016      0.940016       1746.48       1747.42    
  35  0.656263     -0.421194      -2.13115       2.13115       1742.90       1745.03    
  36  0.170687      -1.76792      -8.94533       8.94533       1745.80       1754.74    
  37  0.455052     -0.787343      -3.98379       3.98379       1748.94       1752.93    
  38  0.531062     -0.632876      -3.20222       3.20222       1751.52       1754.72    
  39  0.958848     -0.420222E-01 -0.212624      0.212624       1752.70       1752.91    
  40  0.660041     -0.415453      -2.10210       2.10210       1748.75       1750.85    
  41  0.598625     -0.513120      -2.59628       2.59628       1753.21       1755.80    
  42  0.303046      -1.19387      -6.04074       6.04074       1753.56       1759.60    
  43  0.742116     -0.298250      -1.50908       1.50908       1761.86       1763.37    
  44  0.426280     -0.852660      -4.31428       4.31428       1762.46       1766.77    
  45  0.891558     -0.114785     -0.580788      0.580788       1745.08       1745.66    
  46  0.399357     -0.917899      -4.64438       4.64438       1756.22       1760.86    
  47  0.526711     -0.641104      -3.24385       3.24385       1761.10       1764.34    
  48  0.616864     -0.483107      -2.44442       2.44442       1756.87       1759.31    
  49  0.783244E-01  -2.54690      -12.8868       12.8868       1765.98       1778.87    
  50  0.178515      -1.72308      -8.71844       8.71844       1767.87       1776.58    
  51  0.699546     -0.357324      -1.80799       1.80799       1766.67       1768.48    
  52  0.378655     -0.971130      -4.91371       4.91371       1768.86       1773.78    
  53  0.786873     -0.239688      -1.21277       1.21277       1774.67       1775.88    
  54  0.516765     -0.660167      -3.34031       3.34031       1775.74       1779.08    
  55  0.375855     -0.978552      -4.95127       4.95127       1769.78       1774.73    
  56  0.142236      -1.95026      -9.86793       9.86793       1743.24       1753.10    
  57  0.318918      -1.14282      -5.78244       5.78244       1779.22       1785.01    
  58  0.577834E-01  -2.85105      -14.4257       14.4257       1784.66       1799.08    
loop,thermsimp(1:2)        1   1.76905      0.148933    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    493       1767.03         68.46          1.21         39.25          0.35          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1767.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        1
neval is:      492
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        2
neval is:      492


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      492     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.934282     -0.679771E-01 -0.343950      0.343950       1648.93       1649.27    
   2  0.959826     -0.410037E-01 -0.207470      0.207470       1676.55       1676.76    
   3  0.673594     -0.395128      -1.99926       1.99926       1683.59       1685.59    
   4  0.779876     -0.248621      -1.25797       1.25797       1694.87       1696.13    
   5  0.445258     -0.809102      -4.09389       4.09389       1698.73       1702.82    
   6  0.730020     -0.314684      -1.59224       1.59224       1693.72       1695.31    
   7  0.373553     -0.984697      -4.98236       4.98236       1706.12       1711.10    
   8  0.502695     -0.687771      -3.47998       3.47998       1710.77       1714.25    
   9  0.752227     -0.284717      -1.44061       1.44061       1715.65       1717.09    
  10  0.496558     -0.700055      -3.54213       3.54213       1718.00       1721.54    
  11  0.642076     -0.443049      -2.24173       2.24173       1717.59       1719.83    
  12  0.278090      -1.27981      -6.47557       6.47557       1716.43       1722.91    
  13  0.306173E-02  -5.78878      -29.2900       29.2900       1718.88       1748.17    
  14  0.563321     -0.573906      -2.90384       2.90384       1719.50       1722.40    
  15  0.393175     -0.933500      -4.72331       4.72331       1725.18       1729.91    
  16  0.122356E-01  -4.40341      -22.2803       22.2803       1726.28       1748.56    
  17  0.720206     -0.328218      -1.66071       1.66071       1726.24       1727.90    
  18  0.677984     -0.388632      -1.96640       1.96640       1723.86       1725.82    
  19  0.690144     -0.370855      -1.87645       1.87645       1726.01       1727.88    
  20  0.434024     -0.834656      -4.22318       4.22318       1723.95       1728.18    
  21  0.765725     -0.266932      -1.35062       1.35062       1729.80       1731.15    
  22  0.225865      -1.48782      -7.52805       7.52805       1731.74       1739.27    
  23  0.765632     -0.267054      -1.35124       1.35124       1730.45       1731.80    
  24  0.719977     -0.328536      -1.66232       1.66232       1733.65       1735.31    
  25  0.670210     -0.400164      -2.02474       2.02474       1737.19       1739.22    
  26  0.733967     -0.309291      -1.56495       1.56495       1733.46       1735.03    
  27  0.102650      -2.27643      -11.5183       11.5183       1733.15       1744.66    
  28  0.943364     -0.583033E-01 -0.295003      0.295003       1737.68       1737.98    
  29  0.813300     -0.206656      -1.04563       1.04563       1743.77       1744.81    
  30  0.441171     -0.818323      -4.14054       4.14054       1742.90       1747.04    
  31  0.986663     -0.134264E-01 -0.679349E-01  0.679349E-01   1745.08       1745.15    
  32  0.392748     -0.934588      -4.72882       4.72882       1745.63       1750.36    
  33  0.566634     -0.568042      -2.87417       2.87417       1746.48       1749.35    
  34  0.256244      -1.36162      -6.88953       6.88953       1741.70       1748.59    
  35  0.288015      -1.24474      -6.29813       6.29813       1748.75       1755.05    
  36  0.636551     -0.451691      -2.28546       2.28546       1752.70       1754.99    
  37  0.283424      -1.26081      -6.37945       6.37945       1748.94       1755.32    
  38  0.492002     -0.709273      -3.58877       3.58877       1743.24       1746.83    
  39  0.667434     -0.404315      -2.04575       2.04575       1727.18       1729.23    
  40  0.418456     -0.871184      -4.40801       4.40801       1751.52       1755.93    
  41  0.218030      -1.52312      -7.70669       7.70669       1745.80       1753.50    
  42  0.693223     -0.366404      -1.85393       1.85393       1742.13       1743.98    
  43  0.261018      -1.34316      -6.79613       6.79613       1753.21       1760.00    
  44  0.889516     -0.117078     -0.592390      0.592390       1756.87       1757.46    
  45  0.815048     -0.204509      -1.03477       1.03477       1753.56       1754.60    
  46  0.916438     -0.872606E-01 -0.441521      0.441521       1756.22       1756.66    
  47  0.426654     -0.851781      -4.30984       4.30984       1761.86       1766.17    
  48  0.730475     -0.314060      -1.58908       1.58908       1761.10       1762.69    
  49  0.145228      -1.92945      -9.76261       9.76261       1762.46       1772.22    
  50  0.753657     -0.282818      -1.43100       1.43100       1766.67       1768.10    
  51  0.904814     -0.100026     -0.506110      0.506110       1768.86       1769.37    
  52  0.452134     -0.793777      -4.01635       4.01635       1769.78       1773.80    
  53  0.545070     -0.606840      -3.07049       3.07049       1774.67       1777.74    
  54  0.441322     -0.817979      -4.13880       4.13880       1767.87       1772.00    
  55  0.769674     -0.261788      -1.32459       1.32459       1765.98       1767.31    
  56  0.978900     -0.213256E-01 -0.107903      0.107903       1775.74       1775.84    
  57  0.206303E-01  -3.88099      -19.6370       19.6370       1779.22       1798.86    
  58  0.898283     -0.107271     -0.542767      0.542767       1767.03       1767.57    
loop,thermsimp(1:2)        2  0.343950      0.207470    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    494       1636.21         68.42          1.17         39.54          0.25          0.05        109.44
Just calling func    0   0        109.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    495       4377.84         68.45          1.16         39.29          0.50          0.05        109.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1636.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        2
neval is:      494
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        3
neval is:      494


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      494     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.672644     -0.396539      -2.00641       2.00641       1648.93       1650.93    
   2  0.422499     -0.861569      -4.35936       4.35936       1676.55       1680.91    
   3  0.983039     -0.171063E-01 -0.865541E-01  0.865541E-01   1683.59       1683.68    
   4  0.823694     -0.193957     -0.981380      0.981380       1693.72       1694.70    
   5  0.410952E-01  -3.19186      -16.1502       16.1502       1694.87       1711.02    
   6  0.982524     -0.176301E-01 -0.892047E-01  0.892047E-01   1698.73       1698.82    
   7  0.133811      -2.01132      -10.1769       10.1769       1706.12       1716.29    
   8  0.737716     -0.304197      -1.53917       1.53917       1710.77       1712.31    
   9  0.551985     -0.594234      -3.00670       3.00670       1715.65       1718.66    
  10  0.506707     -0.679823      -3.43976       3.43976       1717.59       1721.03    
  11  0.513830     -0.665862      -3.36912       3.36912       1718.00       1721.37    
  12  0.888541     -0.118174     -0.597937      0.597937       1719.50       1720.09    
  13  0.127317      -2.06108      -10.4286       10.4286       1716.43       1726.86    
  14  0.196115      -1.62905      -8.24266       8.24266       1723.86       1732.10    
  15  0.332258      -1.10184      -5.57510       5.57510       1726.01       1731.58    
  16  0.809198     -0.211711      -1.07122       1.07122       1726.24       1727.31    
  17  0.238368      -1.43394      -7.25544       7.25544       1723.95       1731.21    
  18  0.275854      -1.28788      -6.51642       6.51642       1727.18       1733.70    
  19  0.977786     -0.224645E-01 -0.113666      0.113666       1725.18       1725.30    
  20  0.941455     -0.603283E-01 -0.305248      0.305248       1729.80       1730.10    
  21  0.197399      -1.62253      -8.20964       8.20964       1730.45       1738.66    
  22  0.410731     -0.889818      -4.50229       4.50229       1733.46       1737.96    
  23  0.756764     -0.278703      -1.41018       1.41018       1733.65       1735.06    
  24  0.250649      -1.38370      -7.00123       7.00123       1737.68       1744.68    
  25  0.519688E-01  -2.95711      -14.9624       14.9624       1737.19       1752.15    
  26  0.112052      -2.18879      -11.0748       11.0748       1731.74       1742.81    
  27  0.941464     -0.603191E-01 -0.305202      0.305202       1742.13       1742.44    
  28  0.394389     -0.930418      -4.70772       4.70772       1733.15       1737.85    
  29  0.215768      -1.53355      -7.75945       7.75945       1743.77       1751.53    
  30  0.956538     -0.444349E-01 -0.224831      0.224831       1745.08       1745.31    
  31  0.956019     -0.449770E-01 -0.227574      0.227574       1743.24       1743.46    
  32  0.475944     -0.742456      -3.75667       3.75667       1742.90       1746.65    
  33  0.891330     -0.115041     -0.582081      0.582081       1718.88       1719.46    
  34  0.535773     -0.624045      -3.15754       3.15754       1726.28       1729.44    
  35  0.254937      -1.36674      -6.91541       6.91541       1741.70       1748.62    
  36  0.973803     -0.265463E-01 -0.134319      0.134319       1746.48       1746.61    
  37  0.562546     -0.575283      -2.91081       2.91081       1745.63       1748.54    
  38  0.753728     -0.282724      -1.43052       1.43052       1745.80       1747.23    
  39  0.958046     -0.428600E-01 -0.216862      0.216862       1753.56       1753.78    
  40  0.362330      -1.01520      -5.13670       5.13670       1752.70       1757.84    
  41  0.752266     -0.284666      -1.44035       1.44035       1748.75       1750.19    
  42  0.330315      -1.10771      -5.60478       5.60478       1748.94       1754.55    
  43  0.637582     -0.450073      -2.27727       2.27727       1751.52       1753.80    
  44  0.690082E-01  -2.67353      -13.5275       13.5275       1756.22       1769.74    
  45  0.613234     -0.489009      -2.47428       2.47428       1756.87       1759.34    
  46  0.127887      -2.05661      -10.4060       10.4060       1753.21       1763.61    
  47  0.487824     -0.717801      -3.63192       3.63192       1761.10       1764.73    
  48  0.569313     -0.563325      -2.85030       2.85030       1761.86       1764.71    
  49  0.508604     -0.676086      -3.42085       3.42085       1765.98       1769.40    
  50  0.977129     -0.231365E-01 -0.117066      0.117066       1767.03       1767.15    
  51  0.755495     -0.280382      -1.41867       1.41867       1766.67       1768.09    
  52  0.459287     -0.778079      -3.93692       3.93692       1768.86       1772.80    
  53  0.588474     -0.530223      -2.68282       2.68282       1767.87       1770.55    
  54  0.976970     -0.232993E-01 -0.117890      0.117890       1762.46       1762.57    
  55  0.468748     -0.757689      -3.83375       3.83375       1769.78       1773.61    
  56  0.892888     -0.113294     -0.573245      0.573245       1775.74       1776.31    
  57  0.560330     -0.579229      -2.93078       2.93078       1774.67       1777.60    
  58  0.155479      -1.86125      -9.41751       9.41751       1636.21       1645.63    
loop,thermsimp(1:2)        3   2.00641       4.35936    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    496       1703.48         68.58          1.12         39.03          0.61          0.05        109.38
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1703.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        3
neval is:      495
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        4
neval is:      495


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      495     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.798513     -0.225003      -1.13847       1.13847       1636.21       1637.35    
   2  0.638408     -0.448778      -2.27072       2.27072       1648.93       1651.20    
   3  0.680643     -0.384717      -1.94659       1.94659       1676.55       1678.50    
   4  0.961577     -0.391809E-01 -0.198247      0.198247       1683.59       1683.79    
   5  0.847986     -0.164892     -0.834318      0.834318       1693.72       1694.55    
   6  0.272167      -1.30134      -6.58450       6.58450       1698.73       1705.31    
   7  0.617328     -0.482354      -2.44061       2.44061       1694.87       1697.31    
   8  0.988374     -0.116944E-01 -0.591713E-01  0.591713E-01   1710.77       1710.83    
   9  0.542264     -0.612001      -3.09660       3.09660       1706.12       1709.21    
  10  0.415814     -0.877516      -4.44005       4.44005       1715.65       1720.09    
  11  0.267384      -1.31907      -6.67421       6.67421       1718.88       1725.55    
  12  0.457473     -0.782037      -3.95694       3.95694       1719.50       1723.45    
  13  0.652976     -0.426215      -2.15656       2.15656       1717.59       1719.74    
  14  0.358056      -1.02707      -5.19674       5.19674       1718.00       1723.20    
  15  0.872742     -0.136115     -0.688712      0.688712       1725.18       1725.87    
  16  0.903157     -0.101859     -0.515386      0.515386       1716.43       1716.95    
  17  0.177047      -1.73134      -8.76021       8.76021       1726.24       1735.00    
  18  0.302956      -1.19417      -6.04224       6.04224       1726.28       1732.32    
  19  0.948694     -0.526688E-01 -0.266493      0.266493       1729.80       1730.06    
  20  0.692226     -0.367843      -1.86121       1.86121       1723.95       1725.82    
  21  0.466535     -0.762421      -3.85769       3.85769       1726.01       1729.86    
  22  0.159230      -1.83741      -9.29689       9.29689       1723.86       1733.16    
  23  0.573784     -0.555503      -2.81073       2.81073       1727.18       1729.99    
  24  0.294604      -1.22212      -6.18368       6.18368       1733.65       1739.83    
  25  0.619338     -0.479105      -2.42417       2.42417       1733.15       1735.57    
  26  0.357513      -1.02858      -5.20442       5.20442       1733.46       1738.66    
  27  0.135435      -1.99926      -10.1159       10.1159       1730.45       1740.56    
  28  0.490167     -0.713010      -3.60768       3.60768       1742.13       1745.74    
  29  0.409560     -0.892671      -4.51673       4.51673       1731.74       1736.25    
  30  0.657018     -0.420044      -2.12534       2.12534       1743.24       1745.36    
  31  0.410122     -0.891301      -4.50980       4.50980       1737.68       1742.19    
  32  0.407218     -0.898406      -4.54575       4.54575       1745.08       1749.63    
  33  0.932850     -0.695113E-01 -0.351713      0.351713       1746.48       1746.83    
  34  0.139206      -1.97180      -9.97691       9.97691       1742.90       1752.87    
  35  0.416824     -0.875091      -4.42778       4.42778       1745.80       1750.23    
  36  0.665493     -0.407227      -2.06048       2.06048       1745.63       1747.69    
  37  0.948852     -0.525019E-01 -0.265649      0.265649       1741.70       1741.97    
  38  0.110908      -2.19906      -11.1268       11.1268       1748.75       1759.88    
  39  0.116497      -2.14989      -10.8780       10.8780       1743.77       1754.64    
  40  0.835798     -0.179369     -0.907569      0.907569       1737.19       1738.10    
  41  0.389785     -0.942161      -4.76714       4.76714       1753.56       1758.33    
  42  0.689009     -0.372500      -1.88477       1.88477       1751.52       1753.41    
  43  0.599122     -0.512291      -2.59208       2.59208       1748.94       1751.54    
  44  0.977477E-01  -2.32537      -11.7659       11.7659       1752.70       1764.47    
  45  0.394232     -0.930817      -4.70974       4.70974       1756.87       1761.58    
  46  0.785039E-01  -2.54461      -12.8752       12.8752       1762.46       1775.33    
  47  0.983301     -0.168402E-01 -0.852077E-01  0.852077E-01   1753.21       1753.29    
  48  0.997277     -0.272636E-02 -0.137948E-01  0.137948E-01   1761.86       1761.88    
  49  0.846943     -0.166122     -0.840544      0.840544       1761.10       1761.94    
  50  0.410104     -0.891345      -4.51002       4.51002       1767.03       1771.54    
  51  0.149186      -1.90256      -9.62655       9.62655       1766.67       1776.30    
  52  0.721509     -0.326411      -1.65157       1.65157       1765.98       1767.63    
  53  0.181367      -1.70723      -8.63824       8.63824       1756.22       1764.85    
  54  0.110612      -2.20172      -11.1403       11.1403       1767.87       1779.01    
  55  0.418270     -0.871629      -4.41026       4.41026       1768.86       1773.27    
  56  0.477704     -0.738764      -3.73799       3.73799       1769.78       1773.52    
  57  0.698619     -0.358649      -1.81469       1.81469       1775.74       1777.55    
  58  0.887281     -0.119593     -0.605116      0.605116       1703.48       1704.08    
loop,thermsimp(1:2)        4   1.13847       2.27072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    497       1758.92         68.48          1.16         38.94          0.59          0.05        109.21
Just calling func    0   0        109.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1758.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        4
neval is:      496
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        5
neval is:      496


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      496     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.811489     -0.208884      -1.05691       1.05691       1636.21       1637.27    
   2  0.731551     -0.312588      -1.58163       1.58163       1648.93       1650.51    
   3  0.757108     -0.278250      -1.40789       1.40789       1676.55       1677.96    
   4  0.684238     -0.379449      -1.91993       1.91993       1683.59       1685.51    
   5  0.371195     -0.991029      -5.01440       5.01440       1693.72       1698.73    
   6  0.302280      -1.19640      -6.05354       6.05354       1694.87       1700.92    
   7  0.927809     -0.749297E-01 -0.379129      0.379129       1703.48       1703.85    
   8  0.535678     -0.624221      -3.15843       3.15843       1698.73       1701.89    
   9  0.724827     -0.321822      -1.62835       1.62835       1706.12       1707.74    
  10  0.660067     -0.415415      -2.10191       2.10191       1710.77       1712.87    
  11  0.907930E-01  -2.39917      -12.1393       12.1393       1716.43       1728.57    
  12  0.664112E-01  -2.71189      -13.7216       13.7216       1717.59       1731.31    
  13  0.502773     -0.687617      -3.47920       3.47920       1715.65       1719.13    
  14  0.361422      -1.01771      -5.14939       5.14939       1718.00       1723.15    
  15  0.308497E-01  -3.47863      -17.6011       17.6011       1719.50       1737.10    
  16  0.174600      -1.74526      -8.83064       8.83064       1718.88       1727.71    
  17  0.162978      -1.81414      -9.17917       9.17917       1723.95       1733.13    
  18  0.427923     -0.848811      -4.29481       4.29481       1725.18       1729.48    
  19  0.534694     -0.626061      -3.16774       3.16774       1726.01       1729.17    
  20  0.647569     -0.434529      -2.19863       2.19863       1727.18       1729.38    
  21  0.373550     -0.984702      -4.98239       4.98239       1729.80       1734.78    
  22  0.804103     -0.218028      -1.10318       1.10318       1726.28       1727.38    
  23  0.505198     -0.682806      -3.45485       3.45485       1723.86       1727.31    
  24  0.105841      -2.24582      -11.3634       11.3634       1726.24       1737.61    
  25  0.624957     -0.470072      -2.37847       2.37847       1733.15       1735.52    
  26  0.224577      -1.49354      -7.55698       7.55698       1731.74       1739.30    
  27  0.766222     -0.266284      -1.34734       1.34734       1737.19       1738.54    
  28  0.645296E-01  -2.74063      -13.8670       13.8670       1733.46       1747.33    
  29  0.469840     -0.755362      -3.82198       3.82198       1733.65       1737.47    
  30  0.618430     -0.480571      -2.43159       2.43159       1730.45       1732.88    
  31  0.609945     -0.494386      -2.50149       2.50149       1741.70       1744.20    
  32  0.838697E-01  -2.47849      -12.5406       12.5406       1737.68       1750.22    
  33  0.341460      -1.07453      -5.43687       5.43687       1743.24       1748.67    
  34  0.834322     -0.181136     -0.916509      0.916509       1742.13       1743.05    
  35  0.538769     -0.618468      -3.12932       3.12932       1746.48       1749.60    
  36  0.762709     -0.270879      -1.37059       1.37059       1745.63       1747.00    
  37  0.490122     -0.713101      -3.60814       3.60814       1745.08       1748.69    
  38  0.515825     -0.661987      -3.34952       3.34952       1745.80       1749.15    
  39  0.512184     -0.669072      -3.38536       3.38536       1748.94       1752.33    
  40  0.634134     -0.455495      -2.30471       2.30471       1742.90       1745.20    
  41  0.816569     -0.202643      -1.02533       1.02533       1753.21       1754.23    
  42  0.669400     -0.401374      -2.03087       2.03087       1751.52       1753.55    
  43  0.288427      -1.24331      -6.29091       6.29091       1743.77       1750.06    
  44  0.270539      -1.30734      -6.61486       6.61486       1753.56       1760.18    
  45  0.542986     -0.610673      -3.08988       3.08988       1748.75       1751.84    
  46  0.576168E-01  -2.85394      -14.4403       14.4403       1756.87       1771.31    
  47  0.236528      -1.44169      -7.29465       7.29465       1761.86       1769.16    
  48  0.238062      -1.43523      -7.26194       7.26194       1761.10       1768.36    
  49  0.363391      -1.01228      -5.12191       5.12191       1752.70       1757.82    
  50  0.981261     -0.189165E-01 -0.957138E-01  0.957138E-01   1756.22       1756.31    
  51  0.854045     -0.157772     -0.798292      0.798292       1765.98       1766.78    
  52  0.898703     -0.106803     -0.540401      0.540401       1767.03       1767.57    
  53  0.708949     -0.343971      -1.74042       1.74042       1768.86       1770.60    
  54  0.256844      -1.35929      -6.87771       6.87771       1769.78       1776.66    
  55  0.566741     -0.567853      -2.87322       2.87322       1762.46       1765.33    
  56  0.806938E-01  -2.51709      -12.7360       12.7360       1766.67       1779.41    
  57  0.155475      -1.86127      -9.41764       9.41764       1775.74       1785.15    
  58  0.825063     -0.192296     -0.972977      0.972977       1758.92       1759.90    
loop,thermsimp(1:2)        5   1.05691       1.58163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    498       1686.22         68.52          1.15         38.94          0.70          0.05        109.36
Just calling func    0   0        109.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1686.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        5
neval is:      497
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        6
neval is:      497


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      497     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.116004      -2.15413      -10.8994       10.8994       1636.21       1647.11    
   2  0.920667     -0.826568E-01 -0.418226      0.418226       1648.93       1649.35    
   3  0.337815      -1.08526      -5.49118       5.49118       1676.55       1682.05    
   4  0.862304     -0.148147     -0.749593      0.749593       1683.59       1684.34    
   5  0.162138      -1.81931      -9.20533       9.20533       1693.72       1702.92    
   6  0.207583E-01  -3.87481      -19.6057       19.6057       1694.87       1714.48    
   7  0.878541     -0.129492     -0.655203      0.655203       1698.73       1699.38    
   8  0.907223E-01  -2.39995      -12.1433       12.1433       1703.48       1715.62    
   9  0.174924      -1.74340      -8.82126       8.82126       1706.12       1714.94    
  10  0.488034     -0.717371      -3.62975       3.62975       1710.77       1714.40    
  11  0.204702      -1.58620      -8.02583       8.02583       1715.65       1723.68    
  12  0.710103     -0.342345      -1.73220       1.73220       1718.00       1719.73    
  13  0.211817      -1.55203      -7.85295       7.85295       1723.86       1731.71    
  14  0.935943     -0.662008E-01 -0.334962      0.334962       1726.28       1726.62    
  15  0.806563     -0.214973      -1.08772       1.08772       1718.88       1719.97    
  16  0.851420     -0.160850     -0.813869      0.813869       1716.43       1717.25    
  17  0.907489     -0.970743E-01 -0.491175      0.491175       1726.01       1726.50    
  18  0.147948      -1.91089      -9.66872       9.66872       1727.18       1736.85    
  19  0.989899     -0.101525E-01 -0.513694E-01  0.513694E-01   1725.18       1725.24    
  20  0.948348     -0.530338E-01 -0.268340      0.268340       1717.59       1717.86    
  21  0.856160     -0.155298     -0.785775      0.785775       1730.45       1731.23    
  22  0.879524     -0.128375     -0.649550      0.649550       1723.95       1724.60    
  23  0.796764     -0.227197      -1.14957       1.14957       1729.80       1730.95    
  24  0.957780     -0.431369E-01 -0.218264      0.218264       1733.15       1733.36    
  25  0.331827      -1.10314      -5.58167       5.58167       1719.50       1725.08    
  26  0.822007     -0.196007     -0.991752      0.991752       1733.65       1734.64    
  27  0.357574      -1.02841      -5.20355       5.20355       1726.24       1731.45    
  28  0.457030     -0.783007      -3.96185       3.96185       1737.19       1741.15    
  29  0.241929      -1.41911      -7.18041       7.18041       1731.74       1738.92    
  30  0.159420      -1.83622      -9.29087       9.29087       1742.13       1751.42    
  31  0.871392     -0.137663     -0.696546      0.696546       1741.70       1742.40    
  32  0.736579     -0.305739      -1.54698       1.54698       1742.90       1744.44    
  33  0.531818E-01  -2.93404      -14.8456       14.8456       1745.63       1760.48    
  34  0.959148     -0.417102E-01 -0.211045      0.211045       1733.46       1733.67    
  35  0.443867E-01  -3.11482      -15.7603       15.7603       1743.24       1759.00    
  36  0.318432      -1.14435      -5.79016       5.79016       1745.08       1750.87    
  37  0.235807E-01  -3.74733      -18.9607       18.9607       1745.80       1764.76    
  38  0.624487     -0.470824      -2.38227       2.38227       1746.48       1748.86    
  39  0.258614      -1.35242      -6.84295       6.84295       1743.77       1750.61    
  40  0.950845     -0.504045E-01 -0.255036      0.255036       1737.68       1737.94    
  41  0.169965      -1.77216      -8.96678       8.96678       1748.75       1757.72    
  42  0.207476      -1.57274      -7.95773       7.95773       1748.94       1756.90    
  43  0.704531     -0.350224      -1.77206       1.77206       1751.52       1753.29    
  44  0.620530     -0.477181      -2.41443       2.41443       1753.21       1755.62    
  45  0.749647     -0.288152      -1.45799       1.45799       1756.22       1757.67    
  46  0.855503     -0.156065     -0.789659      0.789659       1752.70       1753.49    
  47  0.860063     -0.150749     -0.762759      0.762759       1758.92       1759.69    
  48  0.161316      -1.82439      -9.23102       9.23102       1753.56       1762.79    
  49  0.388396     -0.945731      -4.78520       4.78520       1762.46       1767.24    
  50  0.708828     -0.344142      -1.74129       1.74129       1765.98       1767.72    
  51  0.157417      -1.84886      -9.35483       9.35483       1767.03       1776.38    
  52  0.897032     -0.108663     -0.549814      0.549814       1761.10       1761.65    
  53  0.199511      -1.61189      -8.15581       8.15581       1761.86       1770.02    
  54  0.147419      -1.91448      -9.68686       9.68686       1768.86       1778.55    
  55  0.226766E-01  -3.78642      -19.1585       19.1585       1756.87       1776.02    
  56  0.698824     -0.358357      -1.81321       1.81321       1769.78       1771.59    
  57  0.330302      -1.10775      -5.60497       5.60497       1766.67       1772.28    
  58  0.277084      -1.28343      -6.49390       6.49390       1686.22       1692.72    
loop,thermsimp(1:2)        6   10.8994      0.418226    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    499       1907.46         68.34          1.18         39.50          0.33          0.05        109.41
Just calling func    0   0        109.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    500       1737.48         68.43          1.17         39.62          0.26          0.05        109.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1737.48
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        6
neval is:      499
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        7
neval is:      499


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      499     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932199     -0.702091E-01 -0.355243      0.355243       1636.21       1636.57    
   2  0.510325     -0.672708      -3.40376       3.40376       1648.93       1652.33    
   3  0.863839     -0.146369     -0.740596      0.740596       1676.55       1677.29    
   4  0.707053     -0.346650      -1.75398       1.75398       1683.59       1685.35    
   5  0.808834     -0.212161      -1.07349       1.07349       1686.22       1687.30    
   6  0.684501     -0.379065      -1.91799       1.91799       1698.73       1700.65    
   7  0.386513     -0.950589      -4.80978       4.80978       1693.72       1698.53    
   8  0.480058     -0.733848      -3.71312       3.71312       1710.77       1714.48    
   9  0.697801     -0.359821      -1.82062       1.82062       1694.87       1696.69    
  10  0.806131     -0.215509      -1.09043       1.09043       1706.12       1707.21    
  11  0.529485     -0.635851      -3.21727       3.21727       1703.48       1706.69    
  12  0.547496     -0.602400      -3.04802       3.04802       1716.43       1719.48    
  13  0.502177     -0.688802      -3.48519       3.48519       1717.59       1721.07    
  14  0.714156E-01  -2.63924      -13.3540       13.3540       1718.00       1731.35    
  15  0.676238     -0.391210      -1.97944       1.97944       1718.88       1720.86    
  16  0.225230      -1.49063      -7.54230       7.54230       1715.65       1723.19    
  17  0.587852     -0.531281      -2.68817       2.68817       1723.95       1726.64    
  18  0.156670      -1.85361      -9.37890       9.37890       1719.50       1728.88    
  19  0.116250      -2.15201      -10.8887       10.8887       1725.18       1736.07    
  20  0.549251     -0.599199      -3.03182       3.03182       1726.01       1729.04    
  21  0.926231     -0.766317E-01 -0.387740      0.387740       1726.28       1726.67    
  22  0.269854      -1.30987      -6.62769       6.62769       1729.80       1736.43    
  23  0.388677E-01  -3.24759      -16.4321       16.4321       1730.45       1746.88    
  24  0.497689     -0.697780      -3.53062       3.53062       1726.24       1729.77    
  25  0.125376      -2.07644      -10.5063       10.5063       1723.86       1734.36    
  26  0.957877E-01  -2.34562      -11.8684       11.8684       1733.15       1745.01    
  27  0.739546     -0.301719      -1.52663       1.52663       1733.46       1734.99    
  28  0.300448      -1.20248      -6.08429       6.08429       1733.65       1739.73    
  29  0.356596      -1.03115      -5.21741       5.21741       1727.18       1732.40    
  30  0.600947     -0.509248      -2.57669       2.57669       1737.68       1740.26    
  31  0.521938     -0.650206      -3.28991       3.28991       1731.74       1735.03    
  32  0.535283     -0.624959      -3.16216       3.16216       1737.19       1740.35    
  33  0.770626     -0.260551      -1.31834       1.31834       1741.70       1743.02    
  34  0.773107     -0.257338      -1.30207       1.30207       1742.90       1744.20    
  35  0.353741      -1.03919      -5.25808       5.25808       1746.48       1751.73    
  36  0.309044      -1.17427      -5.94156       5.94156       1743.77       1749.71    
  37  0.263408      -1.33405      -6.75002       6.75002       1745.08       1751.83    
  38  0.583467     -0.538767      -2.72605       2.72605       1742.13       1744.86    
  39  0.219559      -1.51613      -7.67132       7.67132       1751.52       1759.19    
  40  0.949123E-01  -2.35480      -11.9148       11.9148       1752.70       1764.62    
  41  0.926379     -0.764713E-01 -0.386929      0.386929       1753.21       1753.59    
  42  0.146628      -1.91986      -9.71407       9.71407       1748.94       1758.66    
  43  0.998118     -0.188389E-02 -0.953211E-02  0.953211E-02   1756.22       1756.23    
  44  0.241713      -1.42000      -7.18492       7.18492       1748.75       1755.94    
  45  0.550303     -0.597286      -3.02214       3.02214       1743.24       1746.26    
  46  0.878320     -0.129744     -0.656477      0.656477       1758.92       1759.58    
  47  0.679811     -0.385940      -1.95277       1.95277       1745.63       1747.58    
  48  0.137778E-01  -4.28470      -21.6797       21.6797       1761.10       1782.78    
  49  0.752812     -0.283939      -1.43667       1.43667       1753.56       1755.00    
  50  0.842182     -0.171759     -0.869065      0.869065       1745.80       1746.67    
  51  0.917316     -0.863036E-01 -0.436678      0.436678       1762.46       1762.89    
  52  0.418000     -0.872273      -4.41352       4.41352       1765.98       1770.39    
  53  0.203470      -1.59224      -8.05639       8.05639       1761.86       1769.92    
  54  0.278353      -1.27887      -6.47079       6.47079       1769.78       1776.25    
  55  0.968942E-01  -2.33414      -11.8102       11.8102       1766.67       1778.48    
  56  0.361840      -1.01655      -5.14354       5.14354       1756.87       1762.01    
  57  0.188339      -1.66951      -8.44739       8.44739       1767.03       1775.48    
  58  0.417222     -0.874136      -4.42295       4.42295       1737.48       1741.91    
loop,thermsimp(1:2)        7  0.355243       3.40376    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    501       1703.73         68.55          1.23         39.23          0.26          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  500    1703.7        3.033     -3.016      3.275     -102.6     0.3980E-01
                      0.1364E-01  1.354     -99.70      4.429     0.2799    

                       3.401     -3.196      1.540      6428.      7000.    

                      -2.014      0.000      0.000      0.000     -1.221    



                      -2.072      0.000      0.000      7000.      737.8    

                      -1.506     -3.872     -7.005     -8.158      7.131    

                      -13.30     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.3081E-01 0.1240    -0.5344E-01 0.8119E-01

                     -0.2486     0.1504     0.6899E-01 0.8727E-01-0.1190E-01



                     -0.8787    -0.6709      0.000    -0.5134E-01 0.1805    

                      0.1469     0.2127    -0.7116     0.7337E-01 0.2233    

                      0.1246     0.1267    -0.4002     -1.546      7000.    



                      -1.239     -1.258     -2.142     -1.982    -0.3807    

                     -0.3252      9.254      8.456    -0.1682E+05 -5.534    

                     -0.3842     -2.288      8.699      9.150    -0.1969E+05



                      -6.000     0.5237     0.8411E-01  8.877      9.061    

                     -0.1944E+05 -6.000     0.8311E-01-0.2528      9.786    

                       8.895    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1703.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        7
neval is:      500
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        8
neval is:      500


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      500     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534728     -0.625997      -3.16741       3.16741       1636.21       1639.38    
   2  0.891304     -0.115069     -0.582227      0.582227       1648.93       1649.51    
   3  0.710791     -0.341377      -1.72729       1.72729       1676.55       1678.28    
   4  0.574149     -0.554867      -2.80751       2.80751       1683.59       1686.40    
   5  0.220647      -1.51119      -7.64631       7.64631       1686.22       1693.87    
   6  0.774887     -0.255038      -1.29044       1.29044       1694.87       1696.16    
   7  0.941732     -0.600346E-01 -0.303762      0.303762       1693.72       1694.02    
   8  0.564338E-01  -2.87469      -14.5453       14.5453       1698.73       1713.27    
   9  0.573286     -0.556371      -2.81512       2.81512       1703.48       1706.29    
  10  0.807834     -0.213399      -1.07975       1.07975       1706.12       1707.20    
  11  0.431082     -0.841457      -4.25760       4.25760       1710.77       1715.02    
  12  0.936870     -0.652112E-01 -0.329955      0.329955       1716.43       1716.76    
  13  0.524698E-02  -5.25010      -26.5644       26.5644       1718.88       1745.44    
  14  0.480494     -0.732942      -3.70853       3.70853       1717.59       1721.30    
  15  0.736344     -0.306057      -1.54859       1.54859       1715.65       1717.20    
  16  0.143769      -1.93955      -9.81371       9.81371       1723.95       1733.77    
  17  0.926564     -0.762723E-01 -0.385922      0.385922       1726.28       1726.67    
  18  0.760744     -0.273459      -1.38364       1.38364       1719.50       1720.88    
  19  0.210096      -1.56019      -7.89424       7.89424       1726.01       1733.90    
  20  0.453206     -0.791409      -4.00437       4.00437       1726.24       1730.25    
  21  0.371949     -0.988999      -5.00413       5.00413       1718.00       1723.00    
  22  0.629021     -0.463590      -2.34567       2.34567       1727.18       1729.53    
  23  0.165410      -1.79933      -9.10422       9.10422       1723.86       1732.96    
  24  0.265757      -1.32517      -6.70510       6.70510       1733.46       1740.17    
  25  0.506597     -0.680040      -3.44086       3.44086       1731.74       1735.18    
  26  0.271669      -1.30317      -6.59377       6.59377       1725.18       1731.78    
  27  0.789188     -0.236751      -1.19791       1.19791       1729.80       1731.00    
  28  0.422940E-01  -3.16311      -16.0047       16.0047       1733.65       1749.65    
  29  0.226854      -1.48345      -7.50593       7.50593       1737.68       1745.19    
  30  0.320198      -1.13882      -5.76218       5.76218       1737.19       1742.95    
  31  0.998414     -0.158710E-02 -0.803038E-02  0.803038E-02   1737.48       1737.49    
  32  0.943114E-01  -2.36115      -11.9469       11.9469       1741.70       1753.65    
  33  0.107960      -2.22599      -11.2631       11.2631       1742.90       1754.16    
  34  0.864949     -0.145085     -0.734098      0.734098       1742.13       1742.86    
  35  0.182814      -1.69928      -8.59803       8.59803       1733.15       1741.74    
  36  0.763255     -0.270163      -1.36697       1.36697       1743.24       1744.60    
  37  0.866088E-01  -2.44635      -12.3780       12.3780       1745.80       1758.18    
  38  0.927332     -0.754437E-01 -0.381729      0.381729       1730.45       1730.83    
  39  0.693333     -0.366245      -1.85312       1.85312       1745.63       1747.48    
  40  0.671439     -0.398332      -2.01548       2.01548       1743.77       1745.78    
  41  0.173693      -1.75047      -8.85699       8.85699       1746.48       1755.33    
  42  0.574066     -0.555010      -2.80824       2.80824       1745.08       1747.89    
  43  0.216158E-02  -6.13691      -31.0515       31.0515       1753.21       1784.26    
  44  0.611545     -0.491767      -2.48824       2.48824       1753.56       1756.05    
  45  0.318370      -1.14454      -5.79114       5.79114       1748.75       1754.54    
  46  0.110781      -2.20020      -11.1325       11.1325       1756.22       1767.35    
  47  0.442761     -0.814726      -4.12234       4.12234       1748.94       1753.07    
  48  0.953176     -0.479560E-01 -0.242648      0.242648       1751.52       1751.76    
  49  0.836181     -0.178910     -0.905246      0.905246       1758.92       1759.83    
  50  0.625055     -0.469916      -2.37767       2.37767       1756.87       1759.24    
  51  0.570036     -0.562055      -2.84388       2.84388       1762.46       1765.30    
  52  0.637150     -0.450750      -2.28070       2.28070       1752.70       1754.98    
  53  0.268370E-01  -3.61797      -18.3062       18.3062       1761.86       1780.17    
  54  0.915544     -0.882373E-01 -0.446462      0.446462       1765.98       1766.43    
  55  0.146054      -1.92378      -9.73391       9.73391       1767.03       1776.76    
  56  0.844097     -0.169488     -0.857572      0.857572       1769.78       1770.64    
  57  0.946047     -0.554635E-01 -0.280634      0.280634       1766.67       1766.95    
  58  0.822911     -0.194907     -0.986190      0.986190       1703.73       1704.72    
loop,thermsimp(1:2)        8   3.16741      0.582227    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    502       1740.94         68.23          1.15         39.73          0.40          0.05        109.56
Just calling func    0   0        109.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1740.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        8
neval is:      501
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:        9
neval is:      501


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      501     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581292     -0.542503      -2.74495       2.74495       1636.21       1638.96    
   2  0.331354      -1.10457      -5.58888       5.58888       1648.93       1654.52    
   3  0.336751      -1.08841      -5.50713       5.50713       1676.55       1682.06    
   4  0.782784     -0.244898      -1.23913       1.23913       1683.59       1684.83    
   5  0.710059     -0.342408      -1.73251       1.73251       1686.22       1687.96    
   6  0.439315     -0.822538      -4.16187       4.16187       1693.72       1697.88    
   7  0.560088     -0.579662      -2.93297       2.93297       1694.87       1697.80    
   8  0.865331     -0.144643     -0.731863      0.731863       1703.73       1704.46    
   9  0.488379     -0.716663      -3.62616       3.62616       1703.48       1707.10    
  10  0.200096      -1.60896      -8.14099       8.14099       1706.12       1714.26    
  11  0.337191      -1.08710      -5.50052       5.50052       1698.73       1704.23    
  12  0.483996E-01  -3.02826      -15.3224       15.3224       1710.77       1726.09    
  13  0.159942      -1.83295      -9.27432       9.27432       1716.43       1725.71    
  14  0.789831     -0.235936      -1.19379       1.19379       1715.65       1716.84    
  15  0.381325     -0.964105      -4.87817       4.87817       1719.50       1724.37    
  16  0.368149     -0.999267      -5.05608       5.05608       1717.59       1722.64    
  17  0.762585     -0.271042      -1.37141       1.37141       1718.00       1719.37    
  18  0.790018     -0.235700      -1.19259       1.19259       1726.28       1727.47    
  19  0.156980      -1.85163      -9.36888       9.36888       1727.18       1736.55    
  20  0.579774     -0.545116      -2.75817       2.75817       1726.24       1729.00    
  21  0.906727     -0.979137E-01 -0.495423      0.495423       1730.45       1730.94    
  22  0.210301      -1.55922      -7.88931       7.88931       1729.80       1737.69    
  23  0.752685     -0.284108      -1.43753       1.43753       1725.18       1726.62    
  24  0.162798E-01  -4.11783      -20.8354       20.8354       1723.86       1744.69    
  25  0.451422     -0.795354      -4.02432       4.02432       1723.95       1727.98    
  26  0.545943     -0.605240      -3.06239       3.06239       1726.01       1729.07    
  27  0.264638      -1.32939      -6.72645       6.72645       1731.74       1738.46    
  28  0.763507     -0.269833      -1.36530       1.36530       1737.48       1738.85    
  29  0.325754      -1.12161      -5.67513       5.67513       1733.46       1739.14    
  30  0.166837      -1.79074      -9.06076       9.06076       1733.15       1742.21    
  31  0.316780      -1.14955      -5.81647       5.81647       1742.13       1747.95    
  32  0.837666     -0.177136     -0.896271      0.896271       1737.19       1738.09    
  33  0.524790     -0.644757      -3.26233       3.26233       1743.24       1746.50    
  34  0.857916     -0.153249     -0.775409      0.775409       1737.68       1738.46    
  35  0.326689      -1.11875      -5.66063       5.66063       1718.88       1724.54    
  36  0.822390E-01  -2.49813      -12.6400       12.6400       1743.77       1756.41    
  37  0.686804     -0.375706      -1.90100       1.90100       1745.63       1747.53    
  38  0.964837     -0.357963E-01 -0.181122      0.181122       1745.08       1745.26    
  39  0.403522     -0.907524      -4.59188       4.59188       1733.65       1738.24    
  40  0.907874     -0.966498E-01 -0.489028      0.489028       1751.52       1752.01    
  41  0.112705      -2.18298      -11.0454       11.0454       1748.94       1759.99    
  42  0.820851     -0.197414     -0.998873      0.998873       1741.70       1742.70    
  43  0.858032     -0.153114     -0.774725      0.774725       1742.90       1743.67    
  44  0.276820      -1.28439      -6.49874       6.49874       1748.75       1755.25    
  45  0.449277     -0.800116      -4.04842       4.04842       1752.70       1756.75    
  46  0.320311      -1.13846      -5.76038       5.76038       1746.48       1752.24    
  47  0.972239     -0.281531E-01 -0.142449      0.142449       1753.56       1753.71    
  48  0.188436      -1.66899      -8.44476       8.44476       1745.80       1754.24    
  49  0.909331E-01  -2.39763      -12.1315       12.1315       1756.87       1769.00    
  50  0.807786     -0.213458      -1.08005       1.08005       1758.92       1760.00    
  51  0.646184     -0.436671      -2.20946       2.20946       1762.46       1764.66    
  52  0.202485      -1.59709      -8.08094       8.08094       1765.98       1774.06    
  53  0.394970     -0.928945      -4.70026       4.70026       1766.67       1771.37    
  54  0.375932     -0.978347      -4.95023       4.95023       1756.22       1761.17    
  55  0.166898      -1.79037      -9.05890       9.05890       1769.78       1778.84    
  56  0.337985      -1.08475      -5.48863       5.48863       1767.03       1772.52    
  57  0.121225      -2.11011      -10.6767       10.6767       1761.86       1772.54    
  58  0.133255      -2.01549      -10.1979       10.1979       1740.94       1751.14    
loop,thermsimp(1:2)        9   2.74495       5.58888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    503       1730.87         68.44          1.19         39.31          0.25          0.05        109.24
Just calling func    0   0        109.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1730.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:        9
neval is:      502
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       10
neval is:      502


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      502     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822534     -0.195365     -0.988506      0.988506       1636.21       1637.20    
   2  0.782240     -0.245594      -1.24265       1.24265       1648.93       1650.17    
   3  0.322553      -1.13149      -5.72509       5.72509       1676.55       1682.28    
   4  0.467356     -0.760663      -3.84880       3.84880       1683.59       1687.44    
   5  0.147968      -1.91076      -9.66804       9.66804       1686.22       1695.89    
   6  0.159889E-01  -4.13586      -20.9266       20.9266       1694.87       1715.80    
   7  0.562204     -0.575890      -2.91388       2.91388       1693.72       1696.63    
   8  0.299682      -1.20503      -6.09722       6.09722       1698.73       1704.83    
   9  0.859889     -0.150952     -0.763784      0.763784       1703.73       1704.49    
  10  0.587202     -0.532386      -2.69376       2.69376       1703.48       1706.17    
  11  0.815775     -0.203617      -1.03026       1.03026       1706.12       1707.15    
  12  0.480689     -0.732535      -3.70647       3.70647       1715.65       1719.36    
  13  0.183971      -1.69298      -8.56611       8.56611       1718.00       1726.56    
  14  0.541519     -0.613376      -3.10356       3.10356       1717.59       1720.69    
  15  0.731234     -0.313022      -1.58382       1.58382       1719.50       1721.08    
  16  0.174833      -1.74393      -8.82390       8.82390       1718.88       1727.70    
  17  0.922070     -0.811342E-01 -0.410522      0.410522       1716.43       1716.85    
  18  0.599606     -0.511483      -2.58799       2.58799       1710.77       1713.35    
  19  0.215130      -1.53651      -7.77444       7.77444       1725.18       1732.96    
  20  0.810923     -0.209582      -1.06044       1.06044       1726.28       1727.34    
  21  0.210280E-01  -3.86190      -19.5404       19.5404       1723.95       1743.50    
  22  0.346591      -1.05961      -5.36140       5.36140       1726.24       1731.60    
  23  0.110159      -2.20583      -11.1610       11.1610       1726.01       1737.17    
  24  0.987995     -0.120772E-01 -0.611079E-01  0.611079E-01   1730.45       1730.51    
  25  0.195218      -1.63364      -8.26587       8.26587       1727.18       1735.45    
  26  0.863860     -0.146344     -0.740472      0.740472       1729.80       1730.54    
  27  0.326895      -1.11811      -5.65743       5.65743       1737.19       1742.85    
  28  0.285040E-01  -3.55771      -18.0013       18.0013       1733.65       1751.65    
  29  0.203591      -1.59164      -8.05339       8.05339       1737.68       1745.74    
  30  0.371555     -0.990059      -5.00949       5.00949       1731.74       1736.75    
  31  0.478997     -0.736061      -3.72431       3.72431       1737.48       1741.21    
  32  0.619653     -0.478595      -2.42159       2.42159       1733.46       1735.88    
  33  0.196259      -1.62832      -8.23896       8.23896       1733.15       1741.38    
  34  0.983500     -0.166377E-01 -0.841833E-01  0.841833E-01   1741.70       1741.79    
  35  0.694342     -0.364791      -1.84577       1.84577       1742.90       1744.74    
  36  0.901452     -0.103749     -0.524948      0.524948       1723.86       1724.38    
  37  0.850762     -0.161623     -0.817780      0.817780       1745.08       1745.90    
  38  0.837702     -0.177093     -0.896052      0.896052       1743.24       1744.13    
  39  0.632938     -0.457383      -2.31426       2.31426       1745.63       1747.94    
  40  0.320271      -1.13859      -5.76101       5.76101       1742.13       1747.89    
  41  0.851600     -0.160638     -0.812796      0.812796       1740.94       1741.75    
  42  0.238024      -1.43538      -7.26273       7.26273       1751.52       1758.78    
  43  0.987040     -0.130443E-01 -0.660012E-01  0.660012E-01   1746.48       1746.54    
  44  0.901910     -0.103240     -0.522375      0.522375       1753.56       1754.09    
  45  0.124783      -2.08118      -10.5303       10.5303       1745.80       1756.33    
  46  0.564722     -0.571423      -2.89128       2.89128       1748.75       1751.64    
  47  0.106695E-01  -4.54036      -22.9733       22.9733       1743.77       1766.74    
  48  0.517678     -0.658402      -3.33137       3.33137       1752.70       1756.03    
  49  0.791575     -0.233731      -1.18263       1.18263       1748.94       1750.13    
  50  0.340717      -1.07670      -5.44790       5.44790       1758.92       1764.37    
  51  0.250573      -1.38401      -7.00278       7.00278       1756.22       1763.22    
  52  0.433347     -0.836218      -4.23109       4.23109       1762.46       1766.69    
  53  0.246778      -1.39927      -7.07999       7.07999       1756.87       1763.95    
  54  0.946572     -0.549078E-01 -0.277822      0.277822       1766.67       1766.95    
  55  0.628651     -0.464180      -2.34865       2.34865       1767.03       1769.38    
  56  0.182475      -1.70114      -8.60743       8.60743       1761.86       1770.47    
  57  0.477874     -0.738408      -3.73619       3.73619       1765.98       1769.72    
  58  0.806439     -0.215128      -1.08850       1.08850       1730.87       1731.96    
loop,thermsimp(1:2)       10  0.988506       1.24265    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    504       1689.48         68.38          1.15         39.39          0.43          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1689.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       10
neval is:      503
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       11
neval is:      503


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      503     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371518     -0.990158      -5.00999       5.00999       1636.21       1641.22    
   2  0.421352     -0.864286      -4.37311       4.37311       1648.93       1653.30    
   3  0.733796     -0.309524      -1.56613       1.56613       1676.55       1678.12    
   4  0.371282     -0.990794      -5.01321       5.01321       1683.59       1688.61    
   5  0.134163      -2.00870      -10.1636       10.1636       1686.22       1696.39    
   6  0.449085     -0.800544      -4.05059       4.05059       1693.72       1697.77    
   7  0.149770      -1.89865      -9.60678       9.60678       1703.73       1713.34    
   8  0.193351      -1.64325      -8.31449       8.31449       1698.73       1707.04    
   9  0.484872     -0.723871      -3.66264       3.66264       1703.48       1707.14    
  10  0.880665E-01  -2.42966      -12.2936       12.2936       1706.12       1718.41    
  11  0.744885     -0.294526      -1.49024       1.49024       1710.77       1712.26    
  12  0.342439      -1.07166      -5.42239       5.42239       1694.87       1700.29    
  13  0.422063     -0.862602      -4.36458       4.36458       1716.43       1720.80    
  14  0.509795     -0.673746      -3.40902       3.40902       1715.65       1719.06    
  15  0.968021     -0.325017E-01 -0.164452      0.164452       1717.59       1717.75    
  16  0.799941     -0.223218      -1.12944       1.12944       1719.50       1720.63    
  17  0.498769     -0.695612      -3.51965       3.51965       1723.86       1727.38    
  18  0.142481      -1.94855      -9.85925       9.85925       1718.00       1727.86    
  19  0.887657     -0.119170     -0.602975      0.602975       1726.28       1726.88    
  20  0.955972     -0.450263E-01 -0.227824      0.227824       1718.88       1719.11    
  21  0.226776      -1.48379      -7.50767       7.50767       1730.45       1737.95    
  22  0.300982      -1.20070      -6.07531       6.07531       1729.80       1735.87    
  23  0.161728      -1.82184      -9.21813       9.21813       1726.24       1735.46    
  24  0.650156     -0.430542      -2.17845       2.17845       1730.87       1733.05    
  25  0.310921E-01  -3.47080      -17.5615       17.5615       1725.18       1742.75    
  26  0.820549     -0.197781      -1.00073       1.00073       1727.18       1728.18    
  27  0.949162     -0.521757E-01 -0.263998      0.263998       1733.46       1733.72    
  28  0.461471     -0.773336      -3.91292       3.91292       1731.74       1735.65    
  29  0.325925      -1.12109      -5.67247       5.67247       1726.01       1731.68    
  30  0.251186      -1.38156      -6.99041       6.99041       1737.48       1744.48    
  31  0.520836     -0.652320      -3.30060       3.30060       1733.15       1736.45    
  32  0.339093      -1.08148      -5.47207       5.47207       1740.94       1746.41    
  33  0.876178     -0.132186     -0.668834      0.668834       1741.70       1742.37    
  34  0.664406     -0.408862      -2.06876       2.06876       1737.19       1739.26    
  35  0.415159     -0.879094      -4.44803       4.44803       1723.95       1728.40    
  36  0.733952     -0.309312      -1.56505       1.56505       1743.24       1744.80    
  37  0.475133     -0.744161      -3.76530       3.76530       1742.90       1746.66    
  38  0.361789      -1.01670      -5.14427       5.14427       1737.68       1742.83    
  39  0.111891      -2.19023      -11.0821       11.0821       1745.08       1756.16    
  40  0.123346      -2.09276      -10.5889       10.5889       1746.48       1757.06    
  41  0.282401      -1.26443      -6.39774       6.39774       1742.13       1748.53    
  42  0.397590     -0.922334      -4.66682       4.66682       1745.63       1750.30    
  43  0.123972      -2.08770      -10.5633       10.5633       1748.94       1759.51    
  44  0.830800     -0.185367     -0.937916      0.937916       1748.75       1749.69    
  45  0.743291     -0.296668      -1.50108       1.50108       1733.65       1735.15    
  46  0.569177     -0.563564      -2.85152       2.85152       1753.56       1756.42    
  47  0.333222      -1.09895      -5.56044       5.56044       1752.70       1758.26    
  48  0.748913     -0.289132      -1.46295       1.46295       1745.80       1747.26    
  49  0.552776E-01  -2.89539      -14.6501       14.6501       1751.52       1766.17    
  50  0.204981      -1.58484      -8.01894       8.01894       1756.22       1764.24    
  51  0.317642      -1.14683      -5.80272       5.80272       1756.87       1762.67    
  52  0.194743      -1.63607      -8.27819       8.27819       1758.92       1767.20    
  53  0.796100     -0.228030      -1.15378       1.15378       1762.46       1763.61    
  54  0.331225      -1.10496      -5.59086       5.59086       1743.77       1749.36    
  55  0.441129     -0.818417      -4.14102       4.14102       1766.67       1770.81    
  56  0.492658     -0.707940      -3.58203       3.58203       1767.03       1770.61    
  57  0.111182      -2.19659      -11.1143       11.1143       1765.98       1777.10    
  58  0.375486     -0.979534      -4.95623       4.95623       1689.48       1694.44    
loop,thermsimp(1:2)       11   5.00999       4.37311    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    505       1699.05         68.40          1.21         39.45          0.38          0.05        109.50
Just calling func    0   0        109.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1699.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       11
neval is:      504
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       12
neval is:      504


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      504     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932268     -0.701345E-01 -0.354866      0.354866       1636.21       1636.57    
   2  0.331032      -1.10554      -5.59380       5.59380       1648.93       1654.52    
   3  0.694616     -0.364396      -1.84377       1.84377       1676.55       1678.40    
   4  0.993646     -0.637431E-02 -0.322527E-01  0.322527E-01   1683.59       1683.63    
   5  0.400856E-01  -3.21674      -16.2760       16.2760       1689.48       1705.76    
   6  0.633880     -0.455896      -2.30674       2.30674       1686.22       1688.53    
   7  0.601200E-01  -2.81141      -14.2252       14.2252       1693.72       1707.94    
   8  0.649180     -0.432045      -2.18606       2.18606       1694.87       1697.06    
   9  0.870844E-01  -2.44088      -12.3503       12.3503       1698.73       1711.08    
  10  0.735510     -0.307191      -1.55432       1.55432       1703.48       1705.03    
  11  0.359321      -1.02354      -5.17890       5.17890       1710.77       1715.95    
  12  0.497555     -0.698048      -3.53198       3.53198       1703.73       1707.26    
  13  0.686901E-01  -2.67815      -13.5509       13.5509       1717.59       1731.14    
  14  0.906387     -0.982893E-01 -0.497323      0.497323       1706.12       1706.61    
  15  0.380970     -0.965035      -4.88287       4.88287       1715.65       1720.53    
  16  0.604774     -0.502900      -2.54457       2.54457       1718.88       1721.42    
  17  0.377061     -0.975348      -4.93506       4.93506       1719.50       1724.43    
  18  0.788907     -0.237107      -1.19971       1.19971       1716.43       1717.63    
  19  0.741706     -0.298802      -1.51188       1.51188       1726.28       1727.79    
  20  0.395286     -0.928145      -4.69622       4.69622       1723.86       1728.55    
  21  0.553847     -0.590867      -2.98967       2.98967       1718.00       1720.99    
  22  0.592268E-01  -2.82638      -14.3009       14.3009       1727.18       1741.48    
  23  0.667112     -0.404798      -2.04819       2.04819       1723.95       1726.00    
  24  0.544627     -0.607655      -3.07461       3.07461       1726.01       1729.08    
  25  0.438918     -0.823442      -4.16644       4.16644       1730.87       1735.03    
  26  0.748682     -0.289441      -1.46451       1.46451       1733.46       1734.92    
  27  0.457742     -0.781450      -3.95398       3.95398       1733.65       1737.60    
  28  0.917499     -0.861039E-01 -0.435668      0.435668       1726.24       1726.68    
  29  0.711098     -0.340945      -1.72511       1.72511       1731.74       1733.46    
  30  0.936268     -0.658531E-01 -0.333203      0.333203       1729.80       1730.13    
  31  0.677691     -0.389064      -1.96858       1.96858       1733.15       1735.11    
  32  0.154144      -1.86987      -9.46115       9.46115       1730.45       1739.91    
  33  0.375603     -0.979224      -4.95467       4.95467       1737.19       1742.15    
  34  0.470785     -0.753353      -3.81181       3.81181       1741.70       1745.51    
  35  0.306223E-01  -3.48603      -17.6386       17.6386       1725.18       1742.82    
  36  0.320903      -1.13662      -5.75104       5.75104       1737.68       1743.43    
  37  0.721169     -0.326882      -1.65395       1.65395       1737.48       1739.14    
  38  0.235217      -1.44725      -7.32277       7.32277       1743.24       1750.56    
  39  0.172480      -1.75747      -8.89244       8.89244       1740.94       1749.83    
  40  0.617596     -0.481920      -2.43842       2.43842       1742.90       1745.34    
  41  0.661285     -0.413571      -2.09258       2.09258       1745.80       1747.89    
  42  0.298445      -1.20917      -6.11815       6.11815       1742.13       1748.25    
  43  0.569437     -0.563107      -2.84920       2.84920       1743.77       1746.62    
  44  0.394309     -0.930621      -4.70875       4.70875       1748.75       1753.46    
  45  0.350094      -1.04955      -5.31051       5.31051       1745.63       1750.94    
  46  0.231248      -1.46427      -7.40888       7.40888       1745.08       1752.49    
  47  0.866839     -0.142902     -0.723052      0.723052       1753.56       1754.29    
  48  0.867322     -0.142344     -0.720233      0.720233       1746.48       1747.20    
  49  0.116953      -2.14598      -10.8582       10.8582       1752.70       1763.56    
  50  0.773417E-01  -2.55952      -12.9506       12.9506       1748.94       1761.90    
  51  0.200416      -1.60736      -8.13291       8.13291       1756.87       1765.00    
  52  0.354953      -1.03577      -5.24078       5.24078       1762.46       1767.70    
  53  0.294228      -1.22340      -6.19015       6.19015       1756.22       1762.41    
  54  0.763773     -0.269485      -1.36354       1.36354       1751.52       1752.88    
  55  0.206070      -1.57954      -7.99214       7.99214       1758.92       1766.92    
  56  0.565032     -0.570873      -2.88850       2.88850       1767.03       1769.92    
  57  0.422490     -0.861588      -4.35946       4.35946       1766.67       1771.03    
  58  0.651799     -0.428019      -2.16569       2.16569       1699.05       1701.22    
loop,thermsimp(1:2)       12  0.354866       5.59380    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    506       1750.22         68.53          1.15         38.89          0.72          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1750.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       12
neval is:      505
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       13
neval is:      505


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      505     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.922982E-01  -2.38273      -12.0561       12.0561       1636.21       1648.27    
   2  0.398313     -0.920518      -4.65763       4.65763       1648.93       1653.59    
   3  0.966781     -0.337829E-01 -0.170935      0.170935       1676.55       1676.73    
   4  0.834786     -0.180580     -0.913695      0.913695       1683.59       1684.51    
   5  0.897933     -0.107659     -0.544734      0.544734       1686.22       1686.77    
   6  0.754433     -0.281789      -1.42579       1.42579       1694.87       1696.30    
   7  0.365110      -1.00756      -5.09802       5.09802       1699.05       1704.15    
   8  0.153021      -1.87718      -9.49813       9.49813       1703.48       1712.97    
   9  0.269185      -1.31236      -6.64026       6.64026       1689.48       1696.12    
  10  0.343604      -1.06826      -5.40519       5.40519       1706.12       1711.52    
  11  0.834195E-01  -2.48387      -12.5679       12.5679       1703.73       1716.30    
  12  0.868931     -0.140491     -0.710856      0.710856       1693.72       1694.43    
  13  0.939794     -0.620944E-01 -0.314185      0.314185       1698.73       1699.04    
  14  0.618916     -0.479786      -2.42762       2.42762       1710.77       1713.19    
  15  0.486928     -0.719639      -3.64122       3.64122       1716.43       1720.08    
  16  0.573604     -0.555816      -2.81231       2.81231       1715.65       1718.46    
  17  0.172906      -1.75501      -8.87998       8.87998       1718.00       1726.88    
  18  0.100972      -2.29292      -11.6017       11.6017       1718.88       1730.48    
  19  0.152456      -1.88088      -9.51686       9.51686       1719.50       1729.01    
  20  0.663894     -0.409632      -2.07265       2.07265       1723.95       1726.03    
  21  0.529041     -0.636690      -3.22152       3.22152       1726.24       1729.46    
  22  0.388461     -0.945563      -4.78435       4.78435       1726.28       1731.06    
  23  0.785741     -0.241128      -1.22006       1.22006       1723.86       1725.08    
  24  0.620307     -0.477541      -2.41626       2.41626       1726.01       1728.42    
  25  0.948673     -0.526914E-01 -0.266608      0.266608       1729.80       1730.06    
  26  0.173123      -1.75375      -8.87363       8.87363       1717.59       1726.46    
  27  0.663060     -0.410890      -2.07902       2.07902       1731.74       1733.82    
  28  0.552682     -0.592972      -3.00031       3.00031       1733.46       1736.46    
  29  0.911932     -0.921901E-01 -0.466462      0.466462       1730.87       1731.33    
  30  0.587146     -0.532481      -2.69424       2.69424       1733.15       1735.84    
  31  0.620861     -0.476649      -2.41174       2.41174       1733.65       1736.06    
  32  0.757598     -0.277603      -1.40461       1.40461       1737.48       1738.89    
  33  0.970125     -0.303301E-01 -0.153464      0.153464       1730.45       1730.60    
  34  0.934482     -0.677634E-01 -0.342869      0.342869       1727.18       1727.52    
  35  0.455429     -0.786516      -3.97961       3.97961       1737.19       1741.17    
  36  0.489437     -0.714499      -3.61521       3.61521       1725.18       1728.80    
  37  0.462744E-01  -3.07317      -15.5496       15.5496       1737.68       1753.23    
  38  0.343684      -1.06803      -5.40402       5.40402       1742.90       1748.30    
  39  0.263559      -1.33348      -6.74712       6.74712       1741.70       1748.45    
  40  0.195654      -1.63141      -8.25459       8.25459       1743.77       1752.02    
  41  0.762134     -0.271632      -1.37440       1.37440       1746.48       1747.85    
  42  0.385726     -0.952629      -4.82010       4.82010       1745.80       1750.62    
  43  0.970876     -0.295568E-01 -0.149551      0.149551       1742.13       1742.28    
  44  0.517601     -0.658550      -3.33213       3.33213       1740.94       1744.27    
  45  0.587593E-01  -2.83431      -14.3410       14.3410       1743.24       1757.58    
  46  0.465074     -0.765558      -3.87356       3.87356       1745.63       1749.50    
  47  0.609046     -0.495862      -2.50896       2.50896       1745.08       1747.59    
  48  0.251442      -1.38054      -6.98526       6.98526       1751.52       1758.51    
  49  0.555227     -0.588378      -2.97707       2.97707       1748.75       1751.73    
  50  0.811667     -0.208665      -1.05580       1.05580       1753.56       1754.62    
  51  0.193982      -1.63999      -8.29800       8.29800       1748.94       1757.24    
  52  0.590323     -0.527086      -2.66695       2.66695       1756.22       1758.88    
  53  0.169066      -1.77747      -8.99360       8.99360       1752.70       1761.70    
  54  0.637698     -0.449890      -2.27635       2.27635       1756.87       1759.14    
  55  0.675306     -0.392589      -1.98642       1.98642       1758.92       1760.91    
  56  0.433825     -0.835114      -4.22550       4.22550       1762.46       1766.68    
  57  0.464562     -0.766661      -3.87914       3.87914       1767.03       1770.91    
  58  0.199196      -1.61347      -8.16381       8.16381       1750.22       1758.38    
loop,thermsimp(1:2)       13   12.0561       4.65763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    507       1782.59         68.63          1.14         39.04          0.46          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    508       1712.74         68.46          1.14         39.14          0.48          0.05        109.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1712.74
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       13
neval is:      507
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       14
neval is:      507


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      507     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.599112     -0.512306      -2.59216       2.59216       1636.21       1638.81    
   2  0.185288      -1.68584      -8.53001       8.53001       1648.93       1657.46    
   3  0.279580      -1.27447      -6.44853       6.44853       1676.55       1683.00    
   4  0.475871     -0.742608      -3.75744       3.75744       1683.59       1687.35    
   5  0.983460     -0.166786E-01 -0.843904E-01  0.843904E-01   1686.22       1686.31    
   6  0.969959     -0.305019E-01 -0.154333      0.154333       1693.72       1693.87    
   7  0.415873     -0.877376      -4.43934       4.43934       1689.48       1693.92    
   8  0.843097     -0.170673     -0.863570      0.863570       1694.87       1695.73    
   9  0.103621      -2.26701      -11.4706       11.4706       1698.73       1710.20    
  10  0.827012     -0.189936     -0.961038      0.961038       1699.05       1700.01    
  11  0.713709     -0.337280      -1.70657       1.70657       1706.12       1707.82    
  12  0.757171     -0.278166      -1.40746       1.40746       1703.48       1704.88    
  13  0.682415     -0.382118      -1.93344       1.93344       1710.77       1712.70    
  14  0.169850      -1.77284      -8.97021       8.97021       1703.73       1712.70    
  15  0.137912      -1.98114      -10.0242       10.0242       1715.65       1725.67    
  16  0.119797      -2.12195      -10.7366       10.7366       1716.43       1727.17    
  17  0.922340     -0.808412E-01 -0.409039      0.409039       1723.86       1724.27    
  18  0.840095     -0.174240     -0.881617      0.881617       1723.95       1724.84    
  19  0.676264     -0.391172      -1.97925       1.97925       1717.59       1719.57    
  20  0.191981      -1.65036      -8.35048       8.35048       1718.00       1726.35    
  21  0.528247     -0.638192      -3.22912       3.22912       1727.18       1730.41    
  22  0.450794     -0.796745      -4.03136       4.03136       1726.01       1730.04    
  23  0.808149     -0.213009      -1.07778       1.07778       1725.18       1726.26    
  24  0.179092      -1.71986      -8.70211       8.70211       1719.50       1728.20    
  25  0.728727     -0.316456      -1.60120       1.60120       1726.24       1727.84    
  26  0.719748     -0.328854      -1.66393       1.66393       1729.80       1731.46    
  27  0.357902      -1.02750      -5.19891       5.19891       1718.88       1724.08    
  28  0.665239     -0.407609      -2.06242       2.06242       1730.45       1732.51    
  29  0.338401      -1.08352      -5.48240       5.48240       1726.28       1731.76    
  30  0.455504     -0.786351      -3.97877       3.97877       1730.87       1734.85    
  31  0.422358E-01  -3.16449      -16.0116       16.0116       1731.74       1747.75    
  32  0.162108      -1.81949      -9.20626       9.20626       1733.15       1742.35    
  33  0.896138     -0.109661     -0.554862      0.554862       1733.65       1734.20    
  34  0.980701E-01  -2.32207      -11.7492       11.7492       1733.46       1745.21    
  35  0.950264     -0.510154E-01 -0.258127      0.258127       1737.48       1737.74    
  36  0.122991      -2.09565      -10.6035       10.6035       1737.19       1747.80    
  37  0.718373     -0.330767      -1.67361       1.67361       1742.13       1743.80    
  38  0.296907      -1.21434      -6.14429       6.14429       1740.94       1747.08    
  39  0.708585     -0.344486      -1.74303       1.74303       1745.08       1746.82    
  40  0.261253      -1.34227      -6.79159       6.79159       1746.48       1753.27    
  41  0.305559      -1.18561      -5.99895       5.99895       1742.90       1748.90    
  42  0.617226     -0.482519      -2.44145       2.44145       1741.70       1744.14    
  43  0.493544E-01  -3.00873      -15.2235       15.2235       1745.63       1760.85    
  44  0.225264      -1.49048      -7.54153       7.54153       1745.80       1753.34    
  45  0.131490      -2.02883      -10.2654       10.2654       1748.75       1759.02    
  46  0.850946     -0.161406     -0.816683      0.816683       1743.77       1744.58    
  47  0.237517      -1.43751      -7.27352       7.27352       1737.68       1744.96    
  48  0.302781      -1.19475      -6.04516       6.04516       1753.56       1759.61    
  49  0.205804      -1.58083      -7.99867       7.99867       1748.94       1756.94    
  50  0.420670     -0.865907      -4.38131       4.38131       1743.24       1747.62    
  51  0.494045     -0.705128      -3.56780       3.56780       1750.22       1753.79    
  52  0.874250     -0.134389     -0.679980      0.679980       1751.52       1752.20    
  53  0.596327     -0.516965      -2.61574       2.61574       1756.22       1758.83    
  54  0.536687     -0.622341      -3.14891       3.14891       1756.87       1760.01    
  55  0.517547     -0.658655      -3.33266       3.33266       1758.92       1762.26    
  56  0.381486     -0.963681      -4.87603       4.87603       1752.70       1757.58    
  57  0.298557      -1.20879      -6.11624       6.11624       1762.46       1768.57    
  58  0.842903     -0.170904     -0.864737      0.864737       1712.74       1713.60    
loop,thermsimp(1:2)       14   2.59216       8.53001    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    509       1685.12         68.42          1.20         39.37          0.31          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1685.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       14
neval is:      508
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       15
neval is:      508


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      508     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.420890     -0.865383      -4.37866       4.37866       1636.21       1640.59    
   2  0.285132      -1.25480      -6.34903       6.34903       1648.93       1655.28    
   3  0.460665E-01  -3.07767      -15.5724       15.5724       1676.55       1692.13    
   4  0.971233     -0.291885E-01 -0.147688      0.147688       1686.22       1686.37    
   5  0.600439E-01  -2.81268      -14.2316       14.2316       1683.59       1697.83    
   6  0.952970     -0.481718E-01 -0.243739      0.243739       1693.72       1693.96    
   7  0.416605     -0.875617      -4.43044       4.43044       1689.48       1693.91    
   8  0.350276      -1.04903      -5.30789       5.30789       1694.87       1700.18    
   9  0.211258      -1.55467      -7.86632       7.86632       1699.05       1706.92    
  10  0.268913E-01  -3.61595      -18.2960       18.2960       1703.48       1721.77    
  11  0.246487      -1.40045      -7.08596       7.08596       1706.12       1713.20    
  12  0.837295     -0.177579     -0.898511      0.898511       1698.73       1699.63    
  13  0.343497      -1.06858      -5.40677       5.40677       1703.73       1709.14    
  14  0.976296     -0.239900E-01 -0.121384      0.121384       1710.77       1710.89    
  15  0.617570     -0.481963      -2.43863       2.43863       1712.74       1715.18    
  16  0.599441     -0.511758      -2.58939       2.58939       1717.59       1720.18    
  17  0.556766     -0.585610      -2.96306       2.96306       1718.88       1721.84    
  18  0.474984     -0.744475      -3.76689       3.76689       1723.86       1727.63    
  19  0.608207     -0.497240      -2.51593       2.51593       1723.95       1726.47    
  20  0.699514     -0.357370      -1.80822       1.80822       1715.65       1717.46    
  21  0.315591      -1.15331      -5.83549       5.83549       1725.18       1731.02    
  22  0.626925     -0.466928      -2.36256       2.36256       1718.00       1720.36    
  23  0.736823     -0.305408      -1.54530       1.54530       1716.43       1717.98    
  24  0.801749     -0.220960      -1.11801       1.11801       1726.24       1727.36    
  25  0.128079      -2.05510      -10.3984       10.3984       1719.50       1729.90    
  26  0.120118      -2.11928      -10.7231       10.7231       1726.01       1736.73    
  27  0.893214     -0.112929     -0.571396      0.571396       1727.18       1727.75    
  28  0.522618     -0.648904      -3.28332       3.28332       1729.80       1733.08    
  29  0.204056      -1.58936      -8.04183       8.04183       1726.28       1734.32    
  30  0.391878     -0.936804      -4.74003       4.74003       1730.45       1735.19    
  31  0.627452     -0.466089      -2.35831       2.35831       1733.65       1736.01    
  32  0.240488      -1.42509      -7.21064       7.21064       1730.87       1738.08    
  33  0.705929     -0.348241      -1.76203       1.76203       1737.48       1739.25    
  34  0.491002     -0.711306      -3.59906       3.59906       1733.15       1736.74    
  35  0.538395     -0.619162      -3.13283       3.13283       1742.13       1745.26    
  36  0.220833      -1.51035      -7.64204       7.64204       1741.70       1749.34    
  37  0.133511      -2.01357      -10.1883       10.1883       1743.77       1753.95    
  38  0.310483      -1.16963      -5.91806       5.91806       1737.68       1743.60    
  39  0.871017     -0.138093     -0.698723      0.698723       1733.46       1734.16    
  40  0.802109     -0.220510      -1.11574       1.11574       1745.08       1746.20    
  41  0.662318     -0.412009      -2.08468       2.08468       1740.94       1743.02    
  42  0.214000      -1.54178      -7.80108       7.80108       1743.24       1751.04    
  43  0.514688     -0.664194      -3.36068       3.36068       1731.74       1735.10    
  44  0.900118     -0.105230     -0.532440      0.532440       1737.19       1737.73    
  45  0.808205     -0.212939      -1.07743       1.07743       1742.90       1743.97    
  46  0.354487      -1.03708      -5.24743       5.24743       1751.52       1756.77    
  47  0.472469     -0.749783      -3.79375       3.79375       1746.48       1750.27    
  48  0.643540     -0.440770      -2.23021       2.23021       1745.80       1748.03    
  49  0.276975      -1.28383      -6.49590       6.49590       1750.22       1756.72    
  50  0.507013     -0.679219      -3.43671       3.43671       1748.94       1752.38    
  51  0.265033      -1.32790      -6.71890       6.71890       1752.70       1759.42    
  52  0.713646     -0.337368      -1.70701       1.70701       1756.22       1757.92    
  53  0.876167     -0.132198     -0.668896      0.668896       1748.75       1749.42    
  54  0.611182     -0.492360      -2.49124       2.49124       1753.56       1756.05    
  55  0.842471     -0.171417     -0.867332      0.867332       1756.87       1757.73    
  56  0.214798      -1.53806      -7.78224       7.78224       1745.63       1753.41    
  57  0.118222      -2.13519      -10.8036       10.8036       1758.92       1769.73    
  58  0.707852     -0.345520      -1.74826       1.74826       1685.12       1686.87    
loop,thermsimp(1:2)       15   4.37866       6.34903    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    510       1749.99         68.49          1.22         39.34          0.23          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1749.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       15
neval is:      509
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       16
neval is:      509


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      509     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.351711      -1.04494      -5.28720       5.28720       1636.21       1641.50    
   2  0.446554     -0.806196      -4.07918       4.07918       1648.93       1653.01    
   3  0.499035     -0.695080      -3.51696       3.51696       1686.22       1689.74    
   4  0.912667     -0.913840E-01 -0.462384      0.462384       1685.12       1685.58    
   5  0.190815      -1.65645      -8.38130       8.38130       1676.55       1684.94    
   6  0.580538E-01  -2.84638      -14.4021       14.4021       1689.48       1703.88    
   7  0.379811     -0.968081      -4.89829       4.89829       1693.72       1698.62    
   8  0.413317E-01  -3.18613      -16.1211       16.1211       1683.59       1699.72    
   9  0.656412E-01  -2.72355      -13.7806       13.7806       1698.73       1712.51    
  10  0.327977      -1.11481      -5.64071       5.64071       1694.87       1700.51    
  11  0.289775E-01  -3.54124      -17.9179       17.9179       1699.05       1716.97    
  12  0.906603     -0.980504E-01 -0.496114      0.496114       1703.73       1704.23    
  13  0.672845     -0.396240      -2.00489       2.00489       1710.77       1712.77    
  14  0.770685     -0.260476      -1.31795       1.31795       1706.12       1707.43    
  15  0.858998     -0.151989     -0.769033      0.769033       1712.74       1713.51    
  16  0.928076     -0.746418E-01 -0.377672      0.377672       1715.65       1716.03    
  17  0.759965     -0.274484      -1.38883       1.38883       1716.43       1717.82    
  18  0.370372     -0.993247      -5.02562       5.02562       1717.59       1722.61    
  19  0.924580     -0.784161E-01 -0.396769      0.396769       1718.00       1718.40    
  20  0.986760     -0.133287E-01 -0.674407E-01  0.674407E-01   1703.48       1703.54    
  21  0.391274     -0.938348      -4.74785       4.74785       1718.88       1723.63    
  22  0.225004      -1.49164      -7.54738       7.54738       1723.95       1731.50    
  23  0.111834      -2.19074      -11.0847       11.0847       1726.24       1737.33    
  24  0.772679     -0.257892      -1.30488       1.30488       1723.86       1725.16    
  25  0.823786     -0.193845     -0.980815      0.980815       1727.18       1728.16    
  26  0.260636      -1.34463      -6.80356       6.80356       1719.50       1726.30    
  27  0.231902      -1.46144      -7.39458       7.39458       1725.18       1732.58    
  28  0.476798     -0.740663      -3.74760       3.74760       1729.80       1733.55    
  29  0.529578     -0.635676      -3.21639       3.21639       1733.46       1736.68    
  30  0.502254     -0.688650      -3.48442       3.48442       1726.28       1729.76    
  31  0.960912     -0.398724E-01 -0.201746      0.201746       1731.74       1731.94    
  32  0.824704     -0.192731     -0.975180      0.975180       1730.45       1731.42    
  33  0.947114     -0.543359E-01 -0.274928      0.274928       1733.65       1733.92    
  34  0.838762     -0.175829     -0.889657      0.889657       1726.01       1726.90    
  35  0.117179      -2.14405      -10.8485       10.8485       1733.15       1743.99    
  36  0.124953      -2.07981      -10.5234       10.5234       1737.19       1747.72    
  37  0.180085E-01  -4.01691      -20.3247       20.3247       1730.87       1751.19    
  38  0.417258     -0.874050      -4.42251       4.42251       1737.48       1741.91    
  39  0.658693     -0.417497      -2.11245       2.11245       1740.94       1743.05    
  40  0.836351     -0.178707     -0.904221      0.904221       1737.68       1738.59    
  41  0.674746     -0.393418      -1.99062       1.99062       1742.90       1744.89    
  42  0.600998     -0.509164      -2.57626       2.57626       1742.13       1744.71    
  43  0.696617     -0.361519      -1.82921       1.82921       1745.08       1746.91    
  44  0.978384     -0.218530E-01 -0.110572      0.110572       1745.80       1745.91    
  45  0.210888      -1.55643      -7.87519       7.87519       1741.70       1749.58    
  46  0.632852E-01  -2.76010      -13.9655       13.9655       1748.75       1762.72    
  47  0.512852     -0.667767      -3.37876       3.37876       1746.48       1749.85    
  48  0.611085     -0.492520      -2.49205       2.49205       1743.24       1745.73    
  49  0.711944     -0.339756      -1.71910       1.71910       1748.94       1750.66    
  50  0.979549     -0.206627E-01 -0.104549      0.104549       1745.63       1745.73    
  51  0.779633     -0.248932      -1.25955       1.25955       1743.77       1745.03    
  52  0.178175      -1.72499      -8.72808       8.72808       1753.56       1762.29    
  53  0.982869     -0.172793E-01 -0.874298E-01  0.874298E-01   1750.22       1750.31    
  54  0.688584     -0.373118      -1.88790       1.88790       1751.52       1753.41    
  55  0.176989      -1.73167      -8.76189       8.76189       1756.87       1765.63    
  56  0.417020     -0.874622      -4.42540       4.42540       1756.22       1760.64    
  57  0.479439     -0.735138      -3.71965       3.71965       1752.70       1756.42    
  58  0.372078     -0.988653      -5.00238       5.00238       1749.99       1754.99    
loop,thermsimp(1:2)       16   5.28720       4.07918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    511       1729.68         68.50          1.21         39.26          0.38          0.05        109.41
Just calling func    0   0        109.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1729.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       16
neval is:      510
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       17
neval is:      510


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      510     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868687     -0.140773     -0.712281      0.712281       1636.21       1636.93    
   2  0.622683     -0.473718      -2.39692       2.39692       1648.93       1651.32    
   3  0.651914     -0.427842      -2.16479       2.16479       1676.55       1678.72    
   4  0.553842     -0.590876      -2.98971       2.98971       1685.12       1688.11    
   5  0.337973      -1.08479      -5.48881       5.48881       1686.22       1691.71    
   6  0.242640      -1.41618      -7.16556       7.16556       1693.72       1700.88    
   7  0.609172     -0.495655      -2.50791       2.50791       1683.59       1686.10    
   8  0.338499      -1.08323      -5.48094       5.48094       1694.87       1700.35    
   9  0.118472      -2.13308      -10.7929       10.7929       1703.48       1714.27    
  10  0.605491     -0.501716      -2.53858       2.53858       1689.48       1692.02    
  11  0.497482E-01  -3.00078      -15.1833       15.1833       1703.73       1718.91    
  12  0.347530      -1.05691      -5.34772       5.34772       1706.12       1711.46    
  13  0.414309E-01  -3.18373      -16.1090       16.1090       1698.73       1714.84    
  14  0.110553      -2.20226      -11.1430       11.1430       1710.77       1721.91    
  15  0.307437      -1.17948      -5.96794       5.96794       1712.74       1718.71    
  16  0.281641      -1.26712      -6.41138       6.41138       1715.65       1722.06    
  17  0.427972     -0.848697      -4.29423       4.29423       1699.05       1703.35    
  18  0.496057     -0.701064      -3.54723       3.54723       1716.43       1719.98    
  19  0.907084     -0.975199E-01 -0.493430      0.493430       1718.00       1718.49    
  20  0.592111     -0.524061      -2.65164       2.65164       1717.59       1720.24    
  21  0.826994     -0.189958     -0.961149      0.961149       1718.88       1719.84    
  22  0.279030      -1.27644      -6.45850       6.45850       1723.86       1730.32    
  23  0.654717     -0.423553      -2.14309       2.14309       1719.50       1721.64    
  24  0.796995     -0.226907      -1.14810       1.14810       1726.01       1727.15    
  25  0.654627E-01  -2.72627      -13.7944       13.7944       1727.18       1740.98    
  26  0.924427     -0.785809E-01 -0.397603      0.397603       1726.28       1726.68    
  27  0.298307      -1.20963      -6.12049       6.12049       1730.45       1736.57    
  28  0.944398     -0.572079E-01 -0.289460      0.289460       1723.95       1724.24    
  29  0.798146     -0.225464      -1.14080       1.14080       1731.74       1732.88    
  30  0.304773      -1.18819      -6.01199       6.01199       1725.18       1731.20    
  31  0.938512E-01  -2.36604      -11.9717       11.9717       1729.80       1741.77    
  32  0.483033     -0.727670      -3.68186       3.68186       1733.65       1737.33    
  33  0.761373     -0.272632      -1.37946       1.37946       1733.46       1734.84    
  34  0.122125      -2.10271      -10.6393       10.6393       1726.24       1736.88    
  35  0.704283     -0.350575      -1.77384       1.77384       1737.68       1739.46    
  36  0.907284     -0.972998E-01 -0.492317      0.492317       1737.48       1737.98    
  37  0.314579      -1.15652      -5.85175       5.85175       1740.94       1746.79    
  38  0.909859     -0.944657E-01 -0.477977      0.477977       1733.15       1733.62    
  39  0.386535     -0.950533      -4.80950       4.80950       1742.13       1746.94    
  40  0.891371     -0.114994     -0.581847      0.581847       1742.90       1743.48    
  41  0.144567      -1.93401      -9.78568       9.78568       1743.77       1753.55    
  42  0.344336E-01  -3.36872      -17.0450       17.0450       1743.24       1760.28    
  43  0.881575     -0.126045     -0.637760      0.637760       1745.63       1746.27    
  44  0.739451     -0.301847      -1.52728       1.52728       1745.80       1747.33    
  45  0.928626     -0.740488E-01 -0.374671      0.374671       1745.08       1745.46    
  46  0.382928     -0.959908      -4.85693       4.85693       1737.19       1742.05    
  47  0.556888     -0.585391      -2.96196       2.96196       1741.70       1744.66    
  48  0.479341     -0.735343      -3.72068       3.72068       1746.48       1750.20    
  49  0.592914     -0.522706      -2.64478       2.64478       1750.22       1752.86    
  50  0.647965     -0.433919      -2.19554       2.19554       1748.94       1751.14    
  51  0.178104      -1.72539      -8.73009       8.73009       1730.87       1739.60    
  52  0.357680      -1.02812      -5.20205       5.20205       1751.52       1756.72    
  53  0.685413     -0.377734      -1.91125       1.91125       1749.99       1751.90    
  54  0.955579     -0.454379E-01 -0.229906      0.229906       1752.70       1752.93    
  55  0.924596     -0.783987E-01 -0.396681      0.396681       1756.22       1756.61    
  56  0.370610     -0.992604      -5.02237       5.02237       1753.56       1758.59    
  57  0.243342      -1.41329      -7.15094       7.15094       1748.75       1755.90    
  58  0.639259     -0.447445      -2.26398       2.26398       1729.68       1731.94    
loop,thermsimp(1:2)       17  0.712281       2.39692    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    512       1715.15         68.49          1.14         39.25          0.53          0.05        109.46
Just calling func    0   0        109.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1715.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       17
neval is:      511
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       18
neval is:      511


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      511     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.472884     -0.748904      -3.78930       3.78930       1636.21       1640.00    
   2  0.675464     -0.392355      -1.98524       1.98524       1648.93       1650.91    
   3  0.958431     -0.424575E-01 -0.214826      0.214826       1676.55       1676.77    
   4  0.721093     -0.326988      -1.65449       1.65449       1683.59       1685.25    
   5  0.635520     -0.453311      -2.29366       2.29366       1685.12       1687.41    
   6  0.738192     -0.303552      -1.53591       1.53591       1686.22       1687.76    
   7  0.504943     -0.683310      -3.45741       3.45741       1689.48       1692.94    
   8  0.559948     -0.579911      -2.93423       2.93423       1694.87       1697.80    
   9  0.561469     -0.577199      -2.92051       2.92051       1693.72       1696.64    
  10  0.467828     -0.759655      -3.84370       3.84370       1699.05       1702.90    
  11  0.288239      -1.24397      -6.29421       6.29421       1706.12       1712.41    
  12  0.410214     -0.891075      -4.50865       4.50865       1703.48       1707.98    
  13  0.527762     -0.639111      -3.23377       3.23377       1698.73       1701.96    
  14  0.186329      -1.68024      -8.50166       8.50166       1718.00       1726.50    
  15  0.924113     -0.789212E-01 -0.399325      0.399325       1712.74       1713.14    
  16  0.852662     -0.159392     -0.806492      0.806492       1703.73       1704.54    
  17  0.903782     -0.101167     -0.511882      0.511882       1718.88       1719.39    
  18  0.575891     -0.551837      -2.79218       2.79218       1716.43       1719.23    
  19  0.214801      -1.53804      -7.78218       7.78218       1717.59       1725.37    
  20  0.564777E-01  -2.87391      -14.5414       14.5414       1719.50       1734.04    
  21  0.621987     -0.474836      -2.40257       2.40257       1710.77       1713.17    
  22  0.785316     -0.241669      -1.22279       1.22279       1715.65       1716.87    
  23  0.910092     -0.942094E-01 -0.476680      0.476680       1723.95       1724.43    
  24  0.302832      -1.19458      -6.04431       6.04431       1726.28       1732.32    
  25  0.182175      -1.70279      -8.61574       8.61574       1726.01       1734.62    
  26  0.112568      -2.18420      -11.0516       11.0516       1723.86       1734.91    
  27  0.912404     -0.916724E-01 -0.463843      0.463843       1725.18       1725.65    
  28  0.503463     -0.686245      -3.47226       3.47226       1729.68       1733.15    
  29  0.454725     -0.788063      -3.98743       3.98743       1731.74       1735.73    
  30  0.173768      -1.75003      -8.85479       8.85479       1733.15       1742.00    
  31  0.415873     -0.877376      -4.43934       4.43934       1733.46       1737.90    
  32  0.766054     -0.266502      -1.34844       1.34844       1730.45       1731.80    
  33  0.129655      -2.04288      -10.3365       10.3365       1726.24       1736.58    
  34  0.985651     -0.144527E-01 -0.731278E-01  0.731278E-01   1733.65       1733.72    
  35  0.418861     -0.870217      -4.40312       4.40312       1737.48       1741.89    
  36  0.311313      -1.16696      -5.90455       5.90455       1737.68       1743.59    
  37  0.434284     -0.834057      -4.22015       4.22015       1730.87       1735.09    
  38  0.548842     -0.599944      -3.03559       3.03559       1727.18       1730.22    
  39  0.878632     -0.129389     -0.654680      0.654680       1729.80       1730.45    
  40  0.582787     -0.539934      -2.73195       2.73195       1737.19       1739.92    
  41  0.976868     -0.234034E-01 -0.118416      0.118416       1742.90       1743.02    
  42  0.751254     -0.286012      -1.44716       1.44716       1741.70       1743.15    
  43  0.674066     -0.394427      -1.99572       1.99572       1745.08       1747.08    
  44  0.854180     -0.157614     -0.797493      0.797493       1745.63       1746.43    
  45  0.670037E-01  -2.70301      -13.6767       13.6767       1740.94       1754.61    
  46  0.569693     -0.562658      -2.84693       2.84693       1742.13       1744.98    
  47  0.571975     -0.558661      -2.82671       2.82671       1745.80       1748.62    
  48  0.691289     -0.369198      -1.86806       1.86806       1746.48       1748.34    
  49  0.489152     -0.715083      -3.61817       3.61817       1748.94       1752.56    
  50  0.230932      -1.46563      -7.41578       7.41578       1749.99       1757.40    
  51  0.288520      -1.24299      -6.28927       6.28927       1750.22       1756.51    
  52  0.195194      -1.63376      -8.26648       8.26648       1752.70       1760.97    
  53  0.196058      -1.62934      -8.24414       8.24414       1743.77       1752.01    
  54  0.868795     -0.140648     -0.711647      0.711647       1748.75       1749.46    
  55  0.828359     -0.188309     -0.952804      0.952804       1756.22       1757.17    
  56  0.516436     -0.660803      -3.34353       3.34353       1751.52       1754.86    
  57  0.609051     -0.495853      -2.50891       2.50891       1753.56       1756.07    
  58  0.258145      -1.35423      -6.85214       6.85214       1715.15       1722.00    
loop,thermsimp(1:2)       18   3.78930       1.98524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    513       1783.69         68.29          1.17         39.50          0.36          0.05        109.38
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    514       1715.93         68.43          1.14         39.05          0.67          0.05        109.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1715.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       18
neval is:      513
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       19
neval is:      513


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      513     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933067     -0.692784E-01 -0.350534      0.350534       1636.21       1636.57    
   2  0.145621      -1.92675      -9.74893       9.74893       1648.93       1658.68    
   3  0.824080     -0.193487     -0.979006      0.979006       1676.55       1677.53    
   4  0.495241     -0.702711      -3.55557       3.55557       1683.59       1687.15    
   5  0.239042      -1.43112      -7.24115       7.24115       1685.12       1692.36    
   6  0.167453      -1.78705      -9.04210       9.04210       1686.22       1695.27    
   7  0.409279     -0.893358      -4.52021       4.52021       1689.48       1694.00    
   8  0.536324     -0.623017      -3.15234       3.15234       1693.72       1696.87    
   9  0.697150     -0.360755      -1.82534       1.82534       1694.87       1696.70    
  10  0.141562      -1.95502      -9.89199       9.89199       1698.73       1708.62    
  11  0.225624      -1.48889      -7.53345       7.53345       1699.05       1706.59    
  12  0.153144      -1.87638      -9.49407       9.49407       1703.73       1713.22    
  13  0.561596     -0.576973      -2.91936       2.91936       1703.48       1706.39    
  14  0.430163     -0.843592      -4.26840       4.26840       1706.12       1710.38    
  15  0.905216     -0.995811E-01 -0.503860      0.503860       1712.74       1713.24    
  16  0.568360     -0.565000      -2.85878       2.85878       1710.77       1713.62    
  17  0.378285     -0.972108      -4.91866       4.91866       1715.65       1720.57    
  18  0.164072      -1.80745      -9.14533       9.14533       1716.43       1725.58    
  19  0.158717      -1.84063      -9.31320       9.31320       1718.88       1728.19    
  20  0.664145     -0.409255      -2.07074       2.07074       1715.15       1717.22    
  21  0.325635      -1.12198      -5.67698       5.67698       1723.95       1729.63    
  22  0.148489      -1.90725      -9.65027       9.65027       1717.59       1727.24    
  23  0.367680      -1.00054      -5.06253       5.06253       1725.18       1730.25    
  24  0.417596     -0.873242      -4.41842       4.41842       1718.00       1722.42    
  25  0.401862     -0.911646      -4.61274       4.61274       1727.18       1731.79    
  26  0.105239E-01  -4.55411      -23.0428       23.0428       1729.80       1752.84    
  27  0.587188     -0.532410      -2.69388       2.69388       1730.45       1733.14    
  28  0.284127      -1.25833      -6.36691       6.36691       1726.28       1732.65    
  29  0.869365     -0.139992     -0.708333      0.708333       1729.68       1730.39    
  30  0.736143E-01  -2.60892      -13.2006       13.2006       1733.65       1746.85    
  31  0.494320E-01  -3.00716      -15.2156       15.2156       1719.50       1734.71    
  32  0.633016     -0.457260      -2.31364       2.31364       1726.01       1728.32    
  33  0.499988     -0.693171      -3.50730       3.50730       1723.86       1727.37    
  34  0.552781     -0.592793      -2.99941       2.99941       1730.87       1733.87    
  35  0.854618E-01  -2.45969      -12.4455       12.4455       1731.74       1744.18    
  36  0.816312     -0.202959      -1.02693       1.02693       1726.24       1727.27    
  37  0.632597     -0.457921      -2.31698       2.31698       1733.46       1735.78    
  38  0.433466     -0.835942      -4.22969       4.22969       1737.19       1741.42    
  39  0.230856      -1.46596      -7.41745       7.41745       1737.48       1744.90    
  40  0.190541      -1.65789      -8.38856       8.38856       1733.15       1741.53    
  41  0.178324      -1.72416      -8.72387       8.72387       1742.90       1751.62    
  42  0.227176      -1.48203      -7.49876       7.49876       1741.70       1749.20    
  43  0.152649      -1.87961      -9.51045       9.51045       1737.68       1747.19    
  44  0.496683     -0.699804      -3.54086       3.54086       1742.13       1745.67    
  45  0.274448      -1.29300      -6.54228       6.54228       1745.63       1752.17    
  46  0.172783      -1.75572      -8.88357       8.88357       1745.08       1753.96    
  47  0.708684     -0.344346      -1.74232       1.74232       1746.48       1748.22    
  48  0.157838      -1.84618      -9.34131       9.34131       1745.80       1755.14    
  49  0.724663     -0.322049      -1.62950       1.62950       1748.75       1750.38    
  50  0.427231     -0.850431      -4.30300       4.30300       1743.77       1748.07    
  51  0.742432     -0.297824      -1.50693       1.50693       1748.94       1750.45    
  52  0.902586     -0.102491     -0.518582      0.518582       1740.94       1741.46    
  53  0.803636     -0.218609      -1.10612       1.10612       1751.52       1752.63    
  54  0.222881      -1.50112      -7.59533       7.59533       1753.56       1761.16    
  55  0.544102     -0.608618      -3.07948       3.07948       1750.22       1753.30    
  56  0.419264E-01  -3.17184      -16.0488       16.0488       1756.22       1772.27    
  57  0.114380      -2.16823      -10.9708       10.9708       1749.99       1760.96    
  58  0.885187     -0.121957     -0.617075      0.617075       1715.93       1716.55    
loop,thermsimp(1:2)       19  0.350534       9.74893    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    515       1738.60         68.52          1.14         39.12          0.48          0.05        109.31
Just calling func    0   0        109.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1738.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       19
neval is:      514
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       20
neval is:      514


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      514
neval,tstepnext:      514     514

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.203517      -1.59201      -8.05522       8.05522       1636.21       1644.27    
   2  0.880178     -0.127631     -0.645785      0.645785       1648.93       1649.57    
   3  0.253527      -1.37229      -6.94348       6.94348       1676.55       1683.50    
   4  0.546502E-01  -2.90680      -14.7078       14.7078       1683.59       1698.30    
   5  0.489477     -0.714418      -3.61481       3.61481       1685.12       1688.73    
   6  0.178572      -1.72276      -8.71683       8.71683       1689.48       1698.20    
   7  0.948413     -0.529648E-01 -0.267991      0.267991       1686.22       1686.49    
   8  0.572919E-01  -2.85960      -14.4690       14.4690       1694.87       1709.34    
   9  0.615738     -0.484933      -2.45366       2.45366       1693.72       1696.17    
  10  0.885735     -0.121338     -0.613944      0.613944       1703.48       1704.09    
  11  0.997446     -0.255722E-02 -0.129390E-01  0.129390E-01   1699.05       1699.07    
  12  0.349545      -1.05112      -5.31847       5.31847       1698.73       1704.05    
  13  0.988454     -0.116130E-01 -0.587591E-01  0.587591E-01   1706.12       1706.17    
  14  0.809478     -0.211366      -1.06947       1.06947       1703.73       1704.80    
  15  0.978310     -0.219291E-01 -0.110957      0.110957       1712.74       1712.85    
  16  0.808711     -0.212313      -1.07426       1.07426       1710.77       1711.84    
  17  0.447445     -0.804202      -4.06909       4.06909       1715.93       1720.00    
  18  0.495992     -0.701195      -3.54790       3.54790       1715.15       1718.70    
  19  0.208359      -1.56849      -7.93624       7.93624       1715.65       1723.59    
  20  0.707030     -0.346682      -1.75414       1.75414       1718.00       1719.75    
  21  0.991175     -0.886425E-02 -0.448512E-01  0.448512E-01   1716.43       1716.48    
  22  0.744436     -0.295129      -1.49329       1.49329       1717.59       1719.08    
  23  0.475151     -0.744124      -3.76511       3.76511       1726.24       1730.01    
  24  0.403355     -0.907939      -4.59398       4.59398       1723.86       1728.45    
  25  0.182881      -1.69892      -8.59619       8.59619       1718.88       1727.47    
  26  0.862815     -0.147554     -0.746594      0.746594       1726.01       1726.75    
  27  0.771181     -0.259832      -1.31469       1.31469       1723.95       1725.27    
  28  0.139364      -1.97067      -9.97116       9.97116       1725.18       1735.16    
  29  0.563421     -0.573729      -2.90295       2.90295       1729.68       1732.58    
  30  0.308851      -1.17490      -5.94473       5.94473       1727.18       1733.13    
  31  0.785605     -0.241301      -1.22093       1.22093       1726.28       1727.50    
  32  0.233686      -1.45378      -7.35580       7.35580       1730.45       1737.80    
  33  0.145397      -1.92829      -9.75673       9.75673       1730.87       1740.62    
  34  0.620323     -0.477515      -2.41612       2.41612       1719.50       1721.91    
  35  0.454958     -0.787550      -3.98484       3.98484       1733.46       1737.44    
  36  0.362353      -1.01514      -5.13637       5.13637       1737.19       1742.33    
  37  0.368968     -0.997045      -5.04484       5.04484       1740.94       1745.98    
  38  0.623077E-01  -2.77567      -14.0443       14.0443       1733.15       1747.19    
  39  0.764087     -0.269074      -1.36146       1.36146       1731.74       1733.10    
  40  0.326593      -1.11904      -5.66212       5.66212       1737.48       1743.15    
  41  0.665656     -0.406982      -2.05924       2.05924       1742.13       1744.19    
  42  0.518212     -0.657371      -3.32616       3.32616       1733.65       1736.98    
  43  0.416207     -0.876573      -4.43528       4.43528       1737.68       1742.12    
  44  0.704568     -0.350170      -1.77179       1.77179       1743.77       1745.54    
  45  0.391395     -0.938039      -4.74628       4.74628       1746.48       1751.22    
  46  0.253982      -1.37049      -6.93440       6.93440       1741.70       1748.64    
  47  0.373757     -0.984150      -4.97959       4.97959       1748.75       1753.73    
  48  0.866113     -0.143740     -0.727295      0.727295       1748.94       1749.67    
  49  0.938299     -0.636861E-01 -0.322238      0.322238       1742.90       1743.22    
  50  0.292880E-02  -5.83316      -29.5146       29.5146       1745.63       1775.14    
  51  0.669895     -0.400634      -2.02712       2.02712       1751.52       1753.55    
  52  0.147486      -1.91402      -9.68456       9.68456       1729.80       1739.48    
  53  0.992726     -0.730080E-02 -0.369405E-01  0.369405E-01   1750.22       1750.26    
  54  0.989713E-01  -2.31292      -11.7029       11.7029       1745.08       1756.78    
  55  0.908903     -0.955172E-01 -0.483297      0.483297       1745.80       1746.28    
  56  0.768944E-01  -2.56532      -12.9800       12.9800       1749.99       1762.97    
  57  0.314167      -1.15783      -5.85838       5.85838       1753.56       1759.42    
  58  0.745232     -0.294060      -1.48788       1.48788       1738.60       1740.08    
loop,thermsimp(1:2)       20   8.05522      0.645785    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    516       1692.45         68.47          1.20         39.35          0.16          0.05        109.24
Just calling func    0   0        109.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1692.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.05979               514
loop is:       20
neval is:      515
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    5.05979               514
loop is:       21
neval is:      515


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    2.52990               571

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      515     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.689627     -0.371605     -0.940121      0.940121       1636.21       1637.15    
   2  0.933435     -0.688844E-01 -0.174270      0.174270       1648.93       1649.10    
   3  0.416629     -0.875559      -2.21507       2.21507       1676.55       1678.77    
   4  0.562207     -0.575885      -1.45693       1.45693       1686.22       1687.68    
   5  0.966630     -0.339391E-01 -0.858623E-01  0.858623E-01   1685.12       1685.20    
   6  0.202933      -1.59488      -4.03488       4.03488       1693.72       1697.75    
   7  0.288024E-01  -3.54730      -8.97429       8.97429       1689.48       1698.46    
   8  0.585249     -0.535717      -1.35531       1.35531       1683.59       1684.95    
   9  0.210785      -1.55692      -3.93884       3.93884       1699.05       1702.99    
  10  0.672731     -0.396410      -1.00287       1.00287       1698.73       1699.73    
  11  0.313600      -1.15964      -2.93376       2.93376       1703.48       1706.41    
  12  0.429692     -0.844687      -2.13697       2.13697       1703.73       1705.87    
  13  0.714979     -0.335502     -0.848785      0.848785       1706.12       1706.96    
  14  0.806283     -0.215320     -0.544738      0.544738       1694.87       1695.42    
  15  0.105187      -2.25202      -5.69737       5.69737       1710.77       1716.46    
  16  0.397355     -0.922926      -2.33491       2.33491       1712.74       1715.07    
  17  0.452880     -0.792128      -2.00400       2.00400       1716.43       1718.44    
  18  0.272764      -1.29915      -3.28671       3.28671       1715.15       1718.44    
  19  0.696828     -0.361217     -0.913841      0.913841       1717.59       1718.50    
  20  0.667523     -0.404182      -1.02254       1.02254       1718.00       1719.02    
  21  0.137545      -1.98380      -5.01881       5.01881       1715.93       1720.95    
  22  0.486889     -0.719719      -1.82081       1.82081       1719.50       1721.32    
  23  0.973404     -0.269564E-01 -0.681969E-01  0.681969E-01   1715.65       1715.72    
  24  0.210453      -1.55849      -3.94283       3.94283       1723.95       1727.90    
  25  0.459577     -0.777448      -1.96686       1.96686       1726.01       1727.97    
  26  0.278675      -1.27771      -3.23247       3.23247       1718.88       1722.11    
  27  0.280962      -1.26954      -3.21179       3.21179       1726.28       1729.49    
  28  0.105764      -2.24655      -5.68353       5.68353       1723.86       1729.54    
  29  0.500220     -0.692707      -1.75248       1.75248       1726.24       1727.99    
  30  0.791031     -0.234418     -0.593052      0.593052       1729.68       1730.27    
  31  0.856506     -0.154894     -0.391865      0.391865       1731.74       1732.13    
  32  0.904280     -0.100617     -0.254549      0.254549       1727.18       1727.44    
  33  0.332181      -1.10207      -2.78813       2.78813       1725.18       1727.97    
  34  0.904309     -0.100585     -0.254469      0.254469       1733.65       1733.90    
  35  0.763590E-01  -2.57231      -6.50767       6.50767       1733.46       1739.97    
  36  0.703213     -0.352095     -0.890763      0.890763       1730.45       1731.34    
  37  0.332441      -1.10129      -2.78615       2.78615       1729.80       1732.58    
  38  0.445914     -0.807629      -2.04322       2.04322       1738.60       1740.64    
  39  0.154208      -1.86946      -4.72953       4.72953       1730.87       1735.60    
  40  0.815735     -0.203666     -0.515254      0.515254       1737.68       1738.20    
  41  0.210583      -1.55788      -3.94126       3.94126       1737.19       1741.13    
  42  0.839155     -0.175360     -0.443642      0.443642       1737.48       1737.93    
  43  0.930787     -0.717244E-01 -0.181455      0.181455       1742.90       1743.08    
  44  0.754433     -0.281789     -0.712897      0.712897       1742.13       1742.84    
  45  0.708066     -0.345218     -0.873366      0.873366       1743.77       1744.64    
  46  0.488874     -0.715650      -1.81052       1.81052       1740.94       1742.75    
  47  0.646527     -0.436140      -1.10339       1.10339       1745.80       1746.90    
  48  0.446057E-01  -3.10989      -7.86770       7.86770       1733.15       1741.01    
  49  0.337164      -1.08719      -2.75047       2.75047       1741.70       1744.45    
  50  0.830356     -0.185900     -0.470308      0.470308       1748.94       1749.42    
  51  0.412872E-01  -3.18720      -8.06329       8.06329       1750.22       1758.28    
  52  0.666096     -0.406321      -1.02795       1.02795       1746.48       1747.50    
  53  0.304717      -1.18837      -3.00646       3.00646       1751.52       1754.53    
  54  0.374525E-01  -3.28468      -8.30990       8.30990       1748.75       1757.06    
  55  0.646813     -0.435698      -1.10227       1.10227       1745.08       1746.18    
  56  0.514613     -0.664340      -1.68071       1.68071       1753.56       1755.24    
  57  0.988540E-01  -2.31411      -5.85446       5.85446       1749.99       1755.84    
  58  0.569908E-01  -2.86487      -7.24781       7.24781       1692.45       1699.70    
loop,thermsimp(1:2)       21  0.940121      0.174270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    517       1748.49         68.32          1.20         39.41          0.39          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1748.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       21
neval is:      516
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       22
neval is:      516


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      516     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.564979     -0.570967      -1.44449       1.44449       1636.21       1637.66    
   2  0.649914     -0.430915      -1.09017       1.09017       1648.93       1650.02    
   3  0.234494      -1.45033      -3.66917       3.66917       1676.55       1680.22    
   4  0.250059      -1.38606      -3.50658       3.50658       1683.59       1687.10    
   5  0.396140     -0.925987      -2.34265       2.34265       1685.12       1687.46    
   6  0.587608     -0.531696      -1.34513       1.34513       1686.22       1687.57    
   7  0.216174      -1.53167      -3.87496       3.87496       1694.87       1698.75    
   8  0.344171      -1.06662      -2.69843       2.69843       1693.72       1696.42    
   9  0.898582     -0.106937     -0.270540      0.270540       1689.48       1689.75    
  10  0.269335      -1.31180      -3.31872       3.31872       1692.45       1695.77    
  11  0.506240     -0.680744      -1.72221       1.72221       1698.73       1700.45    
  12  0.469054     -0.757038      -1.91523       1.91523       1699.05       1700.97    
  13  0.599330     -0.511942      -1.29516       1.29516       1703.73       1705.02    
  14  0.850776     -0.161606     -0.408846      0.408846       1703.48       1703.88    
  15  0.411587     -0.887735      -2.24588       2.24588       1706.12       1708.36    
  16  0.690925     -0.369723     -0.935361      0.935361       1712.74       1713.68    
  17  0.539174     -0.617717      -1.56276       1.56276       1715.65       1717.21    
  18  0.268467      -1.31503      -3.32688       3.32688       1710.77       1714.09    
  19  0.413033     -0.884227      -2.23700       2.23700       1716.43       1718.67    
  20  0.535238     -0.625044      -1.58130       1.58130       1715.15       1716.73    
  21  0.407229     -0.898380      -2.27281       2.27281       1717.59       1719.86    
  22  0.486369E-01  -3.02337      -7.64882       7.64882       1718.00       1725.65    
  23  0.176950      -1.73189      -4.38150       4.38150       1715.93       1720.31    
  24  0.891669     -0.114660     -0.290078      0.290078       1719.50       1719.79    
  25  0.985364     -0.147443E-01 -0.373016E-01  0.373016E-01   1718.88       1718.92    
  26  0.779121E-01  -2.55217      -6.45673       6.45673       1727.18       1733.64    
  27  0.198695      -1.61599      -4.08827       4.08827       1723.95       1728.04    
  28  0.966734     -0.338319E-01 -0.855913E-01  0.855913E-01   1725.18       1725.27    
  29  0.230243      -1.46862      -3.71546       3.71546       1726.01       1729.72    
  30  0.996515     -0.349094E-02 -0.883172E-02  0.883172E-02   1726.24       1726.25    
  31  0.299142      -1.20684      -3.05317       3.05317       1726.28       1729.33    
  32  0.204924      -1.58512      -4.01018       4.01018       1723.86       1727.87    
  33  0.229288      -1.47278      -3.72597       3.72597       1729.68       1733.40    
  34  0.263068      -1.33534      -3.37828       3.37828       1730.45       1733.83    
  35  0.535099     -0.625303      -1.58195       1.58195       1731.74       1733.32    
  36  0.461620     -0.773013      -1.95564       1.95564       1729.80       1731.75    
  37  0.110748      -2.20050      -5.56703       5.56703       1733.65       1739.22    
  38  0.972332     -0.280583E-01 -0.709845E-01  0.709845E-01   1730.87       1730.94    
  39  0.273306      -1.29716      -3.28169       3.28169       1737.48       1740.77    
  40  0.197973      -1.61962      -4.09748       4.09748       1737.68       1741.78    
  41  0.541456     -0.613494      -1.55207       1.55207       1733.46       1735.01    
  42  0.740418     -0.300540     -0.760335      0.760335       1738.60       1739.36    
  43  0.818704     -0.200033     -0.506063      0.506063       1733.15       1733.65    
  44  0.639833     -0.446547      -1.12972       1.12972       1737.19       1738.32    
  45  0.883244E-01  -2.42674      -6.13940       6.13940       1740.94       1747.08    
  46  0.379012     -0.970189      -2.45448       2.45448       1742.13       1744.58    
  47  0.629399     -0.462989      -1.17131       1.17131       1742.90       1744.07    
  48  0.447172     -0.804811      -2.03609       2.03609       1741.70       1743.74    
  49  0.639763     -0.446657      -1.13000       1.13000       1743.77       1744.90    
  50  0.890417E-01  -2.41865      -6.11893       6.11893       1745.08       1751.20    
  51  0.129636      -2.04302      -5.16863       5.16863       1745.80       1750.97    
  52  0.397860     -0.921655      -2.33169       2.33169       1746.48       1748.81    
  53  0.396503     -0.925073      -2.34034       2.34034       1748.94       1751.29    
  54  0.896543     -0.109209     -0.276286      0.276286       1751.52       1751.80    
  55  0.558316     -0.582830      -1.47450       1.47450       1753.56       1755.04    
  56  0.258142      -1.35425      -3.42610       3.42610       1749.99       1753.42    
  57  0.290113      -1.23749      -3.13071       3.13071       1748.75       1751.88    
  58  0.162781      -1.81535      -4.59265       4.59265       1748.49       1753.09    
loop,thermsimp(1:2)       22   1.44449       1.09017    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    518       1712.12         68.56          1.23         39.73          0.00          0.05        109.58
Just calling func    0   0        109.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1712.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       22
neval is:      517
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       23
neval is:      517


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      517     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.856405     -0.155012     -0.392163      0.392163       1636.21       1636.61    
   2  0.202381      -1.59760      -4.04176       4.04176       1648.93       1652.97    
   3  0.468782E-01  -3.06020      -7.74199       7.74199       1676.55       1684.30    
   4  0.881899     -0.125678     -0.317952      0.317952       1683.59       1683.91    
   5  0.651671     -0.428215      -1.08334       1.08334       1685.12       1686.20    
   6  0.568610     -0.564561      -1.42828       1.42828       1686.22       1687.65    
   7  0.897617     -0.108012     -0.273258      0.273258       1689.48       1689.75    
   8  0.679451     -0.386471     -0.977730      0.977730       1692.45       1693.43    
   9  0.134747      -2.00436      -5.07082       5.07082       1693.72       1698.79    
  10  0.196368      -1.62776      -4.11807       4.11807       1694.87       1698.99    
  11  0.530475     -0.633983      -1.60391       1.60391       1698.73       1700.33    
  12  0.109926      -2.20794      -5.58587       5.58587       1699.05       1704.64    
  13  0.329932      -1.10887      -2.80532       2.80532       1703.48       1706.28    
  14  0.315682E-01  -3.45560      -8.74232       8.74232       1703.73       1712.47    
  15  0.398644     -0.919687      -2.32671       2.32671       1706.12       1708.44    
  16  0.735606E-01  -2.60965      -6.60213       6.60213       1712.74       1719.34    
  17  0.926864     -0.759486E-01 -0.192142      0.192142       1710.77       1710.96    
  18  0.951427E-01  -2.35238      -5.95127       5.95127       1715.15       1721.10    
  19  0.649794     -0.431100      -1.09064       1.09064       1715.65       1716.74    
  20  0.753721     -0.282733     -0.715285      0.715285       1716.43       1717.15    
  21  0.481624     -0.730591      -1.84832       1.84832       1718.88       1720.73    
  22  0.767971E-01  -2.56659      -6.49320       6.49320       1719.50       1725.99    
  23  0.138368      -1.97784      -5.00372       5.00372       1717.59       1722.59    
  24  0.989715     -0.103379E-01 -0.261538E-01  0.261538E-01   1715.93       1715.96    
  25  0.641675     -0.443673      -1.12245       1.12245       1725.18       1726.31    
  26  0.200623      -1.60633      -4.06384       4.06384       1718.00       1722.06    
  27  0.938705     -0.632541E-01 -0.160026      0.160026       1726.24       1726.40    
  28  0.749560     -0.288270     -0.729292      0.729292       1723.86       1724.59    
  29  0.889204     -0.117428     -0.297081      0.297081       1723.95       1724.25    
  30  0.534697     -0.626056      -1.58386       1.58386       1726.28       1727.86    
  31  0.899645E-01  -2.40834      -6.09285       6.09285       1726.01       1732.10    
  32  0.982602     -0.175515E-01 -0.444034E-01  0.444034E-01   1730.87       1730.91    
  33  0.662698     -0.411436      -1.04089       1.04089       1729.80       1730.84    
  34  0.275577      -1.28889      -3.26076       3.26076       1731.74       1735.00    
  35  0.585503     -0.535284      -1.35421       1.35421       1729.68       1731.03    
  36  0.394027     -0.931335      -2.35618       2.35618       1727.18       1729.54    
  37  0.333190      -1.09904      -2.78046       2.78046       1733.15       1735.93    
  38  0.789561     -0.236278     -0.597760      0.597760       1730.45       1731.04    
  39  0.772800     -0.257734     -0.652041      0.652041       1733.46       1734.11    
  40  0.752121     -0.284858     -0.720660      0.720660       1737.19       1737.91    
  41  0.757220     -0.278101     -0.703566      0.703566       1733.65       1734.35    
  42  0.715721     -0.334464     -0.846159      0.846159       1738.60       1739.44    
  43  0.494872     -0.703457      -1.77967       1.77967       1737.48       1739.26    
  44  0.100481      -2.29779      -5.81316       5.81316       1737.68       1743.50    
  45  0.791863     -0.233367     -0.590393      0.590393       1741.70       1742.29    
  46  0.947382     -0.540532E-01 -0.136749      0.136749       1742.90       1743.03    
  47  0.150069      -1.89666      -4.79836       4.79836       1742.13       1746.93    
  48  0.183117      -1.69763      -4.29482       4.29482       1743.77       1748.06    
  49  0.501919     -0.689317      -1.74390       1.74390       1740.94       1742.68    
  50  0.825224E-01  -2.49469      -6.31129       6.31129       1746.48       1752.79    
  51  0.315756      -1.15279      -2.91643       2.91643       1745.80       1748.71    
  52  0.421132E-01  -3.16739      -8.01318       8.01318       1745.08       1753.09    
  53  0.277967      -1.28025      -3.23891       3.23891       1748.94       1752.18    
  54  0.474814     -0.744831      -1.88434       1.88434       1751.52       1753.41    
  55  0.611196     -0.492338      -1.24556       1.24556       1748.75       1750.00    
  56  0.750301     -0.287280     -0.726789      0.726789       1748.49       1749.22    
  57  0.549986     -0.597862      -1.51253       1.51253       1749.99       1751.50    
  58  0.330429E-01  -3.40995      -8.62681       8.62681       1712.12       1720.75    
loop,thermsimp(1:2)       23  0.392163       4.04176    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    519       1714.43         68.22          1.18         39.41          0.49          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1714.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       23
neval is:      518
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       24
neval is:      518


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      518     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265794      -1.32503      -3.35219       3.35219       1636.21       1639.57    
   2  0.873295     -0.135482     -0.342756      0.342756       1648.93       1649.27    
   3  0.876467E-01  -2.43444      -6.15888       6.15888       1683.59       1689.75    
   4  0.629921     -0.462161      -1.16922       1.16922       1676.55       1677.72    
   5  0.434473     -0.833621      -2.10897       2.10897       1685.12       1687.23    
   6  0.346377      -1.06023      -2.68227       2.68227       1686.22       1688.91    
   7  0.140231      -1.96447      -4.96989       4.96989       1689.48       1694.45    
   8  0.162246      -1.81864      -4.60097       4.60097       1692.45       1697.05    
   9  0.944643     -0.569479E-01 -0.144072      0.144072       1693.72       1693.86    
  10  0.612757     -0.489786      -1.23911       1.23911       1694.87       1696.11    
  11  0.154744      -1.86598      -4.72074       4.72074       1698.73       1703.45    
  12  0.357361      -1.02901      -2.60328       2.60328       1699.05       1701.66    
  13  0.370792     -0.992115      -2.50995       2.50995       1703.48       1705.99    
  14  0.309247      -1.17361      -2.96912       2.96912       1706.12       1709.08    
  15  0.779381E-01  -2.55184      -6.45589       6.45589       1710.77       1717.22    
  16  0.364445      -1.00938      -2.55363       2.55363       1703.73       1706.28    
  17  0.952507     -0.486574E-01 -0.123098      0.123098       1715.93       1716.06    
  18  0.449458     -0.799713      -2.02319       2.02319       1715.65       1717.67    
  19  0.561996     -0.576261      -1.45788       1.45788       1716.43       1717.89    
  20  0.143909      -1.93857      -4.90438       4.90438       1712.74       1717.64    
  21  0.433671     -0.835469      -2.11365       2.11365       1718.88       1720.99    
  22  0.774330     -0.255758     -0.647040      0.647040       1712.12       1712.77    
  23  0.671881     -0.397673      -1.00607       1.00607       1715.15       1716.16    
  24  0.233384      -1.45507      -3.68118       3.68118       1718.00       1721.68    
  25  0.715887     -0.334233     -0.845574      0.845574       1717.59       1718.43    
  26  0.279781      -1.27375      -3.22245       3.22245       1723.95       1727.18    
  27  0.139405      -1.97037      -4.98484       4.98484       1723.86       1728.84    
  28  0.869999     -0.139263     -0.352320      0.352320       1719.50       1719.85    
  29  0.890395     -0.116090     -0.293696      0.293696       1725.18       1725.48    
  30  0.453873     -0.789939      -1.99846       1.99846       1726.24       1728.24    
  31  0.688263     -0.373584     -0.945128      0.945128       1726.28       1727.23    
  32  0.349244      -1.05198      -2.66141       2.66141       1727.18       1729.84    
  33  0.508404     -0.676478      -1.71142       1.71142       1729.80       1731.51    
  34  0.235381      -1.44655      -3.65962       3.65962       1730.87       1734.53    
  35  0.487606     -0.718247      -1.81709       1.81709       1729.68       1731.49    
  36  0.275193      -1.29028      -3.26428       3.26428       1730.45       1733.71    
  37  0.844440E-01  -2.47167      -6.25306       6.25306       1726.01       1732.26    
  38  0.788178     -0.238031     -0.602194      0.602194       1733.46       1734.06    
  39  0.517452     -0.658838      -1.66679       1.66679       1733.65       1735.32    
  40  0.970281     -0.301699E-01 -0.763268E-01  0.763268E-01   1731.74       1731.81    
  41  0.298448      -1.20916      -3.05905       3.05905       1733.15       1736.20    
  42  0.269978      -1.30941      -3.31268       3.31268       1737.19       1740.51    
  43  0.368791     -0.997524      -2.52363       2.52363       1737.48       1740.01    
  44  0.613443     -0.488668      -1.23628       1.23628       1738.60       1739.83    
  45  0.227206      -1.48190      -3.74904       3.74904       1741.70       1745.45    
  46  0.232743      -1.45782      -3.68813       3.68813       1740.94       1744.63    
  47  0.350471      -1.04848      -2.65254       2.65254       1742.90       1745.55    
  48  0.546200     -0.604770      -1.53000       1.53000       1737.68       1739.21    
  49  0.427816     -0.849063      -2.14804       2.14804       1742.13       1744.28    
  50  0.457333     -0.782344      -1.97925       1.97925       1743.77       1745.75    
  51  0.228747      -1.47514      -3.73195       3.73195       1745.80       1749.53    
  52  0.679692E-01  -2.68870      -6.80213       6.80213       1748.49       1755.30    
  53  0.241139      -1.42238      -3.59848       3.59848       1748.75       1752.35    
  54  0.282829      -1.26291      -3.19503       3.19503       1749.99       1753.18    
  55  0.958824E-01  -2.34463      -5.93168       5.93168       1748.94       1754.88    
  56  0.551664     -0.594816      -1.50482       1.50482       1746.48       1747.98    
  57  0.211140      -1.55523      -3.93458       3.93458       1745.08       1749.02    
  58  0.666421     -0.405834      -1.02672       1.02672       1714.43       1715.46    
loop,thermsimp(1:2)       24   3.35219      0.342756    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    520       1748.15         68.56          1.15         39.02          0.50          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1748.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       24
neval is:      519
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       25
neval is:      519


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      519     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.959463E-01  -2.34397      -5.92999       5.92999       1636.21       1642.14    
   2  0.865442     -0.144515     -0.365607      0.365607       1648.93       1649.29    
   3  0.429385     -0.845402      -2.13878       2.13878       1676.55       1678.69    
   4  0.880624     -0.127125     -0.321613      0.321613       1685.12       1685.44    
   5  0.364430      -1.00942      -2.55373       2.55373       1686.22       1688.78    
   6  0.546634     -0.603976      -1.52800       1.52800       1683.59       1685.12    
   7  0.822212     -0.195757     -0.495245      0.495245       1693.72       1694.21    
   8  0.269693      -1.31047      -3.31536       3.31536       1689.48       1692.80    
   9  0.956342     -0.446399E-01 -0.112934      0.112934       1694.87       1694.98    
  10  0.428299     -0.847933      -2.14518       2.14518       1692.45       1694.60    
  11  0.284104      -1.25841      -3.18366       3.18366       1699.05       1702.24    
  12  0.901656     -0.103523     -0.261901      0.261901       1698.73       1698.99    
  13  0.650355     -0.430237      -1.08846       1.08846       1703.48       1704.56    
  14  0.247865E-01  -3.69745      -9.35417       9.35417       1703.73       1713.08    
  15  0.830009     -0.186319     -0.471368      0.471368       1706.12       1706.59    
  16  0.997155     -0.284877E-02 -0.720708E-02  0.720708E-02   1712.12       1712.13    
  17  0.377729     -0.973578      -2.46305       2.46305       1714.43       1716.89    
  18  0.767426     -0.264713     -0.669696      0.669696       1715.93       1716.60    
  19  0.472642     -0.749418      -1.89595       1.89595       1715.15       1717.05    
  20  0.984438     -0.156839E-01 -0.396787E-01  0.396787E-01   1710.77       1710.81    
  21  0.785656     -0.241236     -0.610301      0.610301       1712.74       1713.35    
  22  0.886488     -0.120488     -0.304822      0.304822       1715.65       1715.95    
  23  0.514796     -0.663984      -1.67981       1.67981       1716.43       1718.11    
  24  0.414154     -0.881517      -2.23015       2.23015       1717.59       1719.82    
  25  0.335573      -1.09192      -2.76243       2.76243       1719.50       1722.26    
  26  0.479386     -0.735249      -1.86010       1.86010       1718.88       1720.74    
  27  0.422990     -0.860406      -2.17674       2.17674       1718.00       1720.18    
  28  0.300375      -1.20272      -3.04276       3.04276       1725.18       1728.23    
  29  0.485328     -0.722931      -1.82894       1.82894       1723.95       1725.78    
  30  0.430750     -0.842227      -2.13075       2.13075       1726.28       1728.41    
  31  0.798866     -0.224562     -0.568120      0.568120       1726.24       1726.81    
  32  0.775112     -0.254747     -0.644484      0.644484       1723.86       1724.50    
  33  0.356073      -1.03262      -2.61242       2.61242       1727.18       1729.79    
  34  0.129729      -2.04230      -5.16682       5.16682       1729.68       1734.84    
  35  0.910417     -0.938521E-01 -0.237436      0.237436       1729.80       1730.04    
  36  0.563102     -0.574294      -1.45290       1.45290       1731.74       1733.19    
  37  0.210518      -1.55819      -3.94205       3.94205       1726.01       1729.95    
  38  0.284252      -1.25789      -3.18234       3.18234       1730.45       1733.63    
  39  0.472723     -0.749246      -1.89551       1.89551       1733.46       1735.36    
  40  0.499442     -0.694264      -1.75642       1.75642       1730.87       1732.62    
  41  0.324329      -1.12600      -2.84865       2.84865       1733.65       1736.50    
  42  0.470185     -0.754630      -1.90913       1.90913       1733.15       1735.05    
  43  0.957455     -0.434769E-01 -0.109992      0.109992       1737.68       1737.79    
  44  0.452290     -0.793433      -2.00730       2.00730       1738.60       1740.60    
  45  0.941069     -0.607383E-01 -0.153662      0.153662       1737.48       1737.64    
  46  0.566208     -0.568794      -1.43899       1.43899       1737.19       1738.63    
  47  0.537483E-01  -2.92344      -7.39601       7.39601       1742.13       1749.53    
  48  0.105024E-01  -4.55615      -11.5266       11.5266       1740.94       1752.46    
  49  0.963769     -0.369035E-01 -0.933621E-01  0.933621E-01   1741.70       1741.80    
  50  0.537803     -0.620264      -1.56920       1.56920       1742.90       1744.47    
  51  0.613670E-01  -2.79088      -7.06064       7.06064       1743.77       1750.83    
  52  0.150908      -1.89109      -4.78425       4.78425       1746.48       1751.26    
  53  0.737833     -0.304037     -0.769182      0.769182       1745.08       1745.85    
  54  0.739752     -0.301440     -0.762611      0.762611       1745.80       1746.56    
  55  0.500563     -0.692021      -1.75074       1.75074       1748.75       1750.50    
  56  0.508897     -0.675510      -1.70897       1.70897       1749.99       1751.70    
  57  0.270287      -1.30827      -3.30979       3.30979       1748.94       1752.25    
  58  0.382623     -0.960705      -2.43048       2.43048       1748.15       1750.58    
loop,thermsimp(1:2)       25   5.92999      0.365607    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    521       1725.57         68.46          1.23         39.39          0.13          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  520    1725.6        3.141     -3.081      3.303     -102.6     0.8435E-02
                      0.2803      1.292     -99.70      4.520     0.2760    

                       3.565     -3.126      1.540      6642.      7000.    

                      -2.011      0.000      0.000      0.000     -1.221    



                      -2.095      0.000      0.000      7000.      692.8    

                      -1.500     -4.139     -6.888     -8.383      7.156    

                      -13.34     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.4420E-01 0.9475E-01 0.8827E-01 0.1087    

                     -0.2486     0.1341     0.8896E-01 0.8487E-01 0.2805E-02



                     -0.8900    -0.6762      0.000    -0.4858E-01 0.2074    

                      0.1327     0.2158    -0.7116     0.1164     0.2259    

                      0.1265     0.3662    -0.3979     -1.631      7000.    



                      -1.239     -1.225     -2.142     -1.982    -0.3807    

                     -0.3252      9.258      8.452    -0.1710E+05 -5.561    

                     -0.3338     -2.326      8.706      9.137    -0.1969E+05



                      -6.000     0.4920     0.9067E-01  8.883      9.053    

                     -0.1944E+05 -6.000     0.5287E-02-0.2867      9.760    

                       8.910    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1725.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       25
neval is:      520
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       26
neval is:      520


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      520     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.554230     -0.590175      -1.49308       1.49308       1636.21       1637.71    
   2  0.579741     -0.545174      -1.37923       1.37923       1648.93       1650.31    
   3  0.824455E-01  -2.49562      -6.31365       6.31365       1676.55       1682.87    
   4  0.315100      -1.15486      -2.92169       2.92169       1683.59       1686.52    
   5  0.275555      -1.28897      -3.26095       3.26095       1685.12       1688.38    
   6  0.634682     -0.454632      -1.15017       1.15017       1686.22       1687.38    
   7  0.671828E-01  -2.70034      -6.83157       6.83157       1689.48       1696.31    
   8  0.843963     -0.169647     -0.429188      0.429188       1693.72       1694.15    
   9  0.801288     -0.221535     -0.560459      0.560459       1692.45       1693.01    
  10  0.386583     -0.950409      -2.40444       2.40444       1694.87       1697.27    
  11  0.436986     -0.827854      -2.09438       2.09438       1698.73       1700.82    
  12  0.469599     -0.755876      -1.91229       1.91229       1699.05       1700.96    
  13  0.104412E-02  -6.86458      -17.3667       17.3667       1703.48       1720.84    
  14  0.615471     -0.485368      -1.22793       1.22793       1706.12       1707.34    
  15  0.819025     -0.199640     -0.505069      0.505069       1710.77       1711.27    
  16  0.448367     -0.802144      -2.02934       2.02934       1712.12       1714.15    
  17  0.810334E-01  -2.51289      -6.35736       6.35736       1703.73       1710.09    
  18  0.589831     -0.527920      -1.33558       1.33558       1712.74       1714.08    
  19  0.772888E-01  -2.56021      -6.47705       6.47705       1715.65       1722.13    
  20  0.929898E-01  -2.37527      -6.00917       6.00917       1715.93       1721.94    
  21  0.772792     -0.257745     -0.652069      0.652069       1714.43       1715.08    
  22  0.471913     -0.750961      -1.89985       1.89985       1715.15       1717.05    
  23  0.797459     -0.226325     -0.572579      0.572579       1716.43       1717.01    
  24  0.457939     -0.781019      -1.97590       1.97590       1717.59       1719.56    
  25  0.578405     -0.547481      -1.38507       1.38507       1718.00       1719.38    
  26  0.359256      -1.02372      -2.58991       2.58991       1718.88       1721.47    
  27  0.125054      -2.07901      -5.25968       5.25968       1719.50       1724.76    
  28  0.348647      -1.05370      -2.66574       2.66574       1723.86       1726.52    
  29  0.103177      -2.27131      -5.74617       5.74617       1723.95       1729.70    
  30  0.429994     -0.843983      -2.13519       2.13519       1726.24       1728.38    
  31  0.872975     -0.135849     -0.343683      0.343683       1725.18       1725.53    
  32  0.968061     -0.324600E-01 -0.821204E-01  0.821204E-01   1726.28       1726.36    
  33  0.876099     -0.132276     -0.334645      0.334645       1727.18       1727.52    
  34  0.935178     -0.670183E-01 -0.169549      0.169549       1726.01       1726.18    
  35  0.111536      -2.19340      -5.54908       5.54908       1729.80       1735.35    
  36  0.119639      -2.12328      -5.37167       5.37167       1730.87       1736.24    
  37  0.598442     -0.513426      -1.29892       1.29892       1731.74       1733.04    
  38  0.711442     -0.340462     -0.861332      0.861332       1730.45       1731.31    
  39  0.747494     -0.291029     -0.736274      0.736274       1729.68       1730.41    
  40  0.262451      -1.33769      -3.38422       3.38422       1733.15       1736.53    
  41  0.845864     -0.167397     -0.423497      0.423497       1733.46       1733.88    
  42  0.544636     -0.607637      -1.53726       1.53726       1733.65       1735.19    
  43  0.538840     -0.618336      -1.56433       1.56433       1737.48       1739.05    
  44  0.408773     -0.894595      -2.26323       2.26323       1737.68       1739.95    
  45  0.251694      -1.37954      -3.49010       3.49010       1737.19       1740.68    
  46  0.157458      -1.84860      -4.67676       4.67676       1738.60       1743.27    
  47  0.342548      -1.07134      -2.71039       2.71039       1741.70       1744.41    
  48  0.869179     -0.140207     -0.354708      0.354708       1742.90       1743.25    
  49  0.922210     -0.809826E-01 -0.204877      0.204877       1745.08       1745.29    
  50  0.302494      -1.19569      -3.02498       3.02498       1745.80       1748.82    
  51  0.819127     -0.199516     -0.504754      0.504754       1742.13       1742.64    
  52  0.116539      -2.14953      -5.43809       5.43809       1748.75       1754.19    
  53  0.174517      -1.74574      -4.41653       4.41653       1748.15       1752.57    
  54  0.654478     -0.423917      -1.07247       1.07247       1743.77       1744.84    
  55  0.766932     -0.265357     -0.671325      0.671325       1746.48       1747.15    
  56  0.450925     -0.796455      -2.01495       2.01495       1749.99       1752.00    
  57  0.305246      -1.18664      -3.00207       3.00207       1748.94       1751.95    
  58  0.557991     -0.583413      -1.47597       1.47597       1725.57       1727.04    
loop,thermsimp(1:2)       26   1.49308       1.37923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    522       1667.64         68.43          1.21         39.45          0.19          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1667.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       26
neval is:      521
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       27
neval is:      521


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      521     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813982     -0.205818     -0.520697      0.520697       1636.21       1636.74    
   2  0.422453     -0.861677      -2.17995       2.17995       1648.93       1651.11    
   3  0.267874      -1.31724      -3.33247       3.33247       1676.55       1679.89    
   4  0.997565     -0.243750E-02 -0.616662E-02  0.616662E-02   1683.59       1683.60    
   5  0.514426     -0.664704      -1.68163       1.68163       1686.22       1687.91    
   6  0.171371      -1.76393      -4.46255       4.46255       1685.12       1689.58    
   7  0.704975     -0.349593     -0.884434      0.884434       1692.45       1693.34    
   8  0.499351     -0.694446      -1.75688       1.75688       1693.72       1695.47    
   9  0.736092     -0.306400     -0.775159      0.775159       1689.48       1690.26    
  10  0.696210     -0.362104     -0.916085      0.916085       1694.87       1695.79    
  11  0.273943      -1.29484      -3.27580       3.27580       1698.73       1702.01    
  12  0.656583     -0.420706      -1.06434       1.06434       1699.05       1700.12    
  13  0.817424     -0.201597     -0.510020      0.510020       1706.12       1706.63    
  14  0.504203     -0.684776      -1.73241       1.73241       1703.73       1705.46    
  15  0.342344E-02  -5.67711      -14.3625       14.3625       1710.77       1725.13    
  16  0.471380     -0.752090      -1.90271       1.90271       1712.74       1714.64    
  17  0.232484      -1.45893      -3.69095       3.69095       1712.12       1715.81    
  18  0.529795     -0.635264      -1.60715       1.60715       1714.43       1716.04    
  19  0.548384E-01  -2.90336      -7.34521       7.34521       1716.43       1723.78    
  20  0.759160     -0.275543     -0.697096      0.697096       1715.15       1715.85    
  21  0.658961     -0.417090      -1.05519       1.05519       1718.00       1719.05    
  22  0.955072E-01  -2.34855      -5.94160       5.94160       1717.59       1723.53    
  23  0.762274     -0.271449     -0.686738      0.686738       1703.48       1704.16    
  24  0.595126     -0.518983      -1.31297       1.31297       1718.88       1720.19    
  25  0.994859     -0.515414E-02 -0.130394E-01  0.130394E-01   1715.93       1715.95    
  26  0.547413     -0.602551      -1.52439       1.52439       1715.65       1717.17    
  27  0.206450      -1.57770      -3.99141       3.99141       1719.50       1723.49    
  28  0.889164     -0.117473     -0.297195      0.297195       1725.18       1725.48    
  29  0.882620     -0.124861     -0.315885      0.315885       1726.01       1726.32    
  30  0.273437      -1.29668      -3.28047       3.28047       1726.28       1729.56    
  31  0.239281      -1.43012      -3.61805       3.61805       1723.86       1727.48    
  32  0.465716     -0.764179      -1.93329       1.93329       1725.57       1727.50    
  33  0.624834     -0.470270      -1.18973       1.18973       1727.18       1728.37    
  34  0.124872      -2.08047      -5.26337       5.26337       1726.24       1731.51    
  35  0.583860E-01  -2.84068      -7.18662       7.18662       1723.95       1731.14    
  36  0.605356     -0.501938      -1.26985       1.26985       1729.68       1730.95    
  37  0.842898     -0.170909     -0.432382      0.432382       1730.45       1730.88    
  38  0.170482      -1.76913      -4.47570       4.47570       1731.74       1736.21    
  39  0.631284     -0.460000      -1.16375       1.16375       1733.46       1734.62    
  40  0.914443     -0.894405E-01 -0.226275      0.226275       1733.65       1733.88    
  41  0.237545      -1.43740      -3.63647       3.63647       1729.80       1733.43    
  42  0.128470      -2.05206      -5.19150       5.19150       1730.87       1736.06    
  43  0.672502E-01  -2.69933      -6.82903       6.82903       1733.15       1739.97    
  44  0.625851     -0.468643      -1.18562       1.18562       1737.48       1738.67    
  45  0.289455      -1.23976      -3.13645       3.13645       1737.68       1740.82    
  46  0.426490     -0.852166      -2.15589       2.15589       1737.19       1739.35    
  47  0.639309     -0.447367      -1.13179       1.13179       1742.13       1743.26    
  48  0.930228     -0.723259E-01 -0.182977      0.182977       1742.90       1743.08    
  49  0.487433     -0.718603      -1.81799       1.81799       1738.60       1740.41    
  50  0.197582E-01  -3.92419      -9.92778       9.92778       1741.70       1751.63    
  51  0.391784     -0.937045      -2.37063       2.37063       1743.77       1746.14    
  52  0.408977E-01  -3.19668      -8.08727       8.08727       1745.08       1753.17    
  53  0.954108     -0.469781E-01 -0.118850      0.118850       1746.48       1746.59    
  54  0.422567     -0.861406      -2.17927       2.17927       1745.80       1747.98    
  55  0.114072      -2.17092      -5.49221       5.49221       1748.94       1754.44    
  56  0.656945     -0.420155      -1.06295       1.06295       1749.99       1751.05    
  57  0.181296      -1.70763      -4.32011       4.32011       1748.15       1752.47    
  58  0.358624      -1.02548      -2.59436       2.59436       1667.64       1670.23    
loop,thermsimp(1:2)       27  0.520697       2.17995    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    523       1687.22         68.43          1.12         39.09          0.56          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1687.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       27
neval is:      522
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       28
neval is:      522


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      522     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852012     -0.160155     -0.405175      0.405175       1636.21       1636.62    
   2  0.209759      -1.56179      -3.95118       3.95118       1648.93       1652.88    
   3  0.231672      -1.46243      -3.69980       3.69980       1667.64       1671.34    
   4  0.552784     -0.592788      -1.49969       1.49969       1676.55       1678.05    
   5  0.298066      -1.21044      -3.06229       3.06229       1683.59       1686.66    
   6  0.982229E-01  -2.32052      -5.87066       5.87066       1686.22       1692.10    
   7  0.513244     -0.667004      -1.68745       1.68745       1685.12       1686.81    
   8  0.506896     -0.679450      -1.71894       1.71894       1689.48       1691.20    
   9  0.253686      -1.37166      -3.47015       3.47015       1692.45       1695.92    
  10  0.464337     -0.767145      -1.94080       1.94080       1693.72       1695.66    
  11  0.620988     -0.476443      -1.20535       1.20535       1694.87       1696.08    
  12  0.833370     -0.182278     -0.461144      0.461144       1699.05       1699.51    
  13  0.536169     -0.623305      -1.57690       1.57690       1698.73       1700.31    
  14  0.686501E-01  -2.67873      -6.77691       6.77691       1703.48       1710.25    
  15  0.623564     -0.472305      -1.19488       1.19488       1703.73       1704.92    
  16  0.329641      -1.10975      -2.80756       2.80756       1706.12       1708.92    
  17  0.779151     -0.249551     -0.631338      0.631338       1712.74       1713.37    
  18  0.104603      -2.25758      -5.71144       5.71144       1712.12       1717.83    
  19  0.483984     -0.725704      -1.83595       1.83595       1715.15       1716.99    
  20  0.466377E-02  -5.36793      -13.5803       13.5803       1715.93       1729.51    
  21  0.172152      -1.75938      -4.45104       4.45104       1714.43       1718.88    
  22  0.178201      -1.72484      -4.36367       4.36367       1715.65       1720.01    
  23  0.151142      -1.88954      -4.78034       4.78034       1718.00       1722.78    
  24  0.784508     -0.242699     -0.614003      0.614003       1718.88       1719.49    
  25  0.821620E-01  -2.49906      -6.32237       6.32237       1719.50       1725.82    
  26  0.647136     -0.435199      -1.10101       1.10101       1717.59       1718.69    
  27  0.971377     -0.290411E-01 -0.734710E-01  0.734710E-01   1716.43       1716.51    
  28  0.461755     -0.772720      -1.95490       1.95490       1710.77       1712.72    
  29  0.485420     -0.722742      -1.82846       1.82846       1725.18       1727.01    
  30  0.674473     -0.393823     -0.996331      0.996331       1726.01       1727.00    
  31  0.166592      -1.79221      -4.53410       4.53410       1723.86       1728.39    
  32  0.829538     -0.186886     -0.472803      0.472803       1725.57       1726.04    
  33  0.489716     -0.713930      -1.80617       1.80617       1727.18       1728.99    
  34  0.604698     -0.503025      -1.27260       1.27260       1726.28       1727.55    
  35  0.113505      -2.17591      -5.50482       5.50482       1730.45       1735.95    
  36  0.148871      -1.90468      -4.81864       4.81864       1729.68       1734.50    
  37  0.882645     -0.124832     -0.315812      0.315812       1723.95       1724.27    
  38  0.987071     -0.130131E-01 -0.329218E-01  0.329218E-01   1726.24       1726.28    
  39  0.170536      -1.76881      -4.47491       4.47491       1729.80       1734.27    
  40  0.390345     -0.940725      -2.37994       2.37994       1733.65       1736.03    
  41  0.386025     -0.951852      -2.40809       2.40809       1733.46       1735.87    
  42  0.727498     -0.318144     -0.804871      0.804871       1730.87       1731.67    
  43  0.953502     -0.476138E-01 -0.120458      0.120458       1731.74       1731.86    
  44  0.586364     -0.533814      -1.35049       1.35049       1737.48       1738.84    
  45  0.127618      -2.05871      -5.20833       5.20833       1737.19       1742.40    
  46  0.949787     -0.515174E-01 -0.130334      0.130334       1733.15       1733.28    
  47  0.565431E-01  -2.87275      -7.26776       7.26776       1738.60       1745.86    
  48  0.163563      -1.81056      -4.58052       4.58052       1737.68       1742.26    
  49  0.698306     -0.359097     -0.908479      0.908479       1742.90       1743.81    
  50  0.347632      -1.05661      -2.67311       2.67311       1742.13       1744.80    
  51  0.674462     -0.393840     -0.996374      0.996374       1743.77       1744.76    
  52  0.207751      -1.57142      -3.97552       3.97552       1746.48       1750.45    
  53  0.155363      -1.86199      -4.71064       4.71064       1745.80       1750.51    
  54  0.919929     -0.834587E-01 -0.211142      0.211142       1749.99       1750.20    
  55  0.138094      -1.97982      -5.00875       5.00875       1741.70       1746.71    
  56  0.384974     -0.954579      -2.41498       2.41498       1748.15       1750.56    
  57  0.493523     -0.706185      -1.78657       1.78657       1745.08       1746.87    
  58  0.528360     -0.637976      -1.61401       1.61401       1687.22       1688.83    
loop,thermsimp(1:2)       28  0.405175       3.95118    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    524       1747.41         68.45          1.13         39.09          0.69          0.05        109.41
Just calling func    0   0        109.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1747.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       28
neval is:      523
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       29
neval is:      523


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      523     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.135635      -1.99779      -5.05419       5.05419       1636.21       1641.27    
   2  0.466467     -0.762568      -1.92922       1.92922       1648.93       1650.86    
   3  0.996991     -0.301356E-02 -0.762400E-02  0.762400E-02   1667.64       1667.64    
   4  0.987682     -0.123943E-01 -0.313563E-01  0.313563E-01   1676.55       1676.59    
   5  0.890927     -0.115493     -0.292184      0.292184       1683.59       1683.89    
   6  0.103802      -2.26527      -5.73090       5.73090       1685.12       1690.85    
   7  0.139960      -1.96640      -4.97478       4.97478       1687.22       1692.19    
   8  0.695795     -0.362701     -0.917595      0.917595       1689.48       1690.40    
   9  0.916952     -0.867001E-01 -0.219342      0.219342       1686.22       1686.44    
  10  0.581368     -0.542371      -1.37214       1.37214       1693.72       1695.09    
  11  0.187466      -1.67416      -4.23545       4.23545       1692.45       1696.69    
  12  0.623424E-01  -2.77511      -7.02075       7.02075       1694.87       1701.89    
  13  0.493048     -0.707150      -1.78901       1.78901       1699.05       1700.84    
  14  0.713995     -0.336879     -0.852269      0.852269       1698.73       1699.58    
  15  0.891065     -0.115338     -0.291793      0.291793       1703.73       1704.02    
  16  0.993625     -0.639581E-02 -0.161807E-01  0.161807E-01   1706.12       1706.13    
  17  0.783715     -0.243710     -0.616560      0.616560       1703.48       1704.09    
  18  0.419875     -0.867798      -2.19544       2.19544       1710.77       1712.96    
  19  0.551915E-01  -2.89695      -7.32897       7.32897       1712.74       1720.07    
  20  0.119723E-01  -4.42516      -11.1952       11.1952       1716.43       1727.63    
  21  0.814729E-01  -2.50749      -6.34368       6.34368       1715.15       1721.50    
  22  0.493283E-01  -3.00926      -7.61311       7.61311       1712.12       1719.73    
  23  0.292111      -1.23062      -3.11335       3.11335       1717.59       1720.70    
  24  0.274028      -1.29452      -3.27501       3.27501       1714.43       1717.71    
  25  0.890535     -0.115933     -0.293298      0.293298       1718.88       1719.17    
  26  0.533395     -0.628494      -1.59002       1.59002       1715.65       1717.24    
  27  0.584910     -0.536297      -1.35678       1.35678       1718.00       1719.36    
  28  0.120755      -2.11400      -5.34819       5.34819       1723.95       1729.30    
  29  0.129784      -2.04188      -5.16575       5.16575       1719.50       1724.66    
  30  0.847769     -0.165147     -0.417804      0.417804       1725.57       1725.98    
  31  0.507636E-02  -5.28316      -13.3658       13.3658       1726.24       1739.61    
  32  0.616094     -0.484356      -1.22537       1.22537       1726.01       1727.23    
  33  0.845796     -0.167477     -0.423700      0.423700       1725.18       1725.61    
  34  0.597816     -0.514471      -1.30156       1.30156       1726.28       1727.58    
  35  0.857431     -0.153814     -0.389133      0.389133       1723.86       1724.25    
  36  0.236721      -1.44087      -3.64526       3.64526       1727.18       1730.83    
  37  0.136539      -1.99114      -5.03738       5.03738       1715.93       1720.97    
  38  0.221208      -1.50865      -3.81673       3.81673       1730.87       1734.68    
  39  0.886558     -0.120409     -0.304622      0.304622       1731.74       1732.04    
  40  0.751951     -0.285084     -0.721232      0.721232       1733.15       1733.87    
  41  0.753705     -0.282754     -0.715337      0.715337       1729.80       1730.51    
  42  0.164791      -1.80308      -4.56160       4.56160       1729.68       1734.24    
  43  0.953278     -0.478482E-01 -0.121051      0.121051       1733.46       1733.58    
  44  0.331556E-01  -3.40654      -8.61820       8.61820       1730.45       1739.07    
  45  0.255217      -1.36564      -3.45493       3.45493       1733.65       1737.10    
  46  0.526999     -0.640556      -1.62054       1.62054       1737.48       1739.11    
  47  0.395268     -0.928192      -2.34823       2.34823       1737.68       1740.03    
  48  0.962043     -0.386965E-01 -0.978981E-01  0.978981E-01   1737.19       1737.29    
  49  0.679414     -0.386524     -0.977866      0.977866       1742.90       1743.87    
  50  0.170337      -1.76998      -4.47786       4.47786       1743.77       1748.24    
  51  0.261051      -1.34304      -3.39775       3.39775       1742.13       1745.53    
  52  0.959147     -0.417113E-01 -0.105525      0.105525       1738.60       1738.70    
  53  0.811956     -0.208309     -0.526999      0.526999       1741.70       1742.23    
  54  0.751361     -0.285869     -0.723219      0.723219       1745.08       1745.80    
  55  0.365259      -1.00715      -2.54798       2.54798       1749.99       1752.54    
  56  0.828616     -0.187998     -0.475616      0.475616       1746.48       1746.95    
  57  0.301965      -1.19744      -3.02941       3.02941       1745.80       1748.83    
  58  0.800135     -0.222974     -0.564102      0.564102       1747.41       1747.97    
loop,thermsimp(1:2)       29   5.05419       1.92922    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    525       1736.59         68.23          1.17         39.35          0.38          0.05        109.19
Just calling func    0   0        109.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1736.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       29
neval is:      524
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       30
neval is:      524


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      524     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.893826     -0.112244     -0.283966      0.283966       1636.21       1636.50    
   2  0.789139     -0.236813     -0.599112      0.599112       1648.93       1649.53    
   3  0.113205      -2.17856      -5.51152       5.51152       1667.64       1673.15    
   4  0.932851     -0.695093E-01 -0.175851      0.175851       1676.55       1676.73    
   5  0.580843     -0.543275      -1.37443       1.37443       1683.59       1684.97    
   6  0.477157     -0.739910      -1.87189       1.87189       1686.22       1688.10    
   7  0.813629     -0.206251     -0.521793      0.521793       1689.48       1690.00    
   8  0.727881     -0.317617     -0.803538      0.803538       1685.12       1685.92    
   9  0.169642      -1.77406      -4.48820       4.48820       1687.22       1691.70    
  10  0.563630     -0.573357      -1.45053       1.45053       1693.72       1695.17    
  11  0.317079      -1.14861      -2.90585       2.90585       1692.45       1695.36    
  12  0.902994E-01  -2.40462      -6.08345       6.08345       1698.73       1704.81    
  13  0.611698     -0.491517      -1.24349       1.24349       1699.05       1700.30    
  14  0.131317E-01  -4.33273      -10.9614       10.9614       1694.87       1705.83    
  15  0.626257     -0.467994      -1.18398       1.18398       1703.73       1704.91    
  16  0.158325      -1.84311      -4.66287       4.66287       1703.48       1708.14    
  17  0.138715E-01  -4.27792      -10.8227       10.8227       1706.12       1716.94    
  18  0.294347      -1.22299      -3.09405       3.09405       1710.77       1713.86    
  19  0.419766E-02  -5.47323      -13.8467       13.8467       1715.65       1729.50    
  20  0.674961     -0.393101     -0.994504      0.994504       1714.43       1715.43    
  21  0.440021     -0.820933      -2.07687       2.07687       1718.88       1720.96    
  22  0.224595      -1.49346      -3.77829       3.77829       1718.00       1721.78    
  23  0.406007     -0.901384      -2.28041       2.28041       1712.12       1714.40    
  24  0.839997     -0.174357     -0.441104      0.441104       1712.74       1713.18    
  25  0.633085     -0.457151      -1.15654       1.15654       1717.59       1718.74    
  26  0.931306     -0.711679E-01 -0.180047      0.180047       1715.93       1716.11    
  27  0.844161E-01  -2.47200      -6.25389       6.25389       1715.15       1721.41    
  28  0.206778      -1.57611      -3.98739       3.98739       1723.86       1727.85    
  29  0.883296     -0.124095     -0.313947      0.313947       1719.50       1719.81    
  30  0.365391      -1.00679      -2.54707       2.54707       1725.18       1727.73    
  31  0.708566     -0.344513     -0.871581      0.871581       1725.57       1726.44    
  32  0.955974     -0.450251E-01 -0.113909      0.113909       1726.01       1726.12    
  33  0.726164     -0.319980     -0.809515      0.809515       1726.28       1727.09    
  34  0.318762      -1.14331      -2.89245       2.89245       1716.43       1719.33    
  35  0.622782     -0.473559      -1.19805       1.19805       1723.95       1725.15    
  36  0.869570E-01  -2.44234      -6.17887       6.17887       1729.80       1735.98    
  37  0.281748E-01  -3.56933      -9.03003       9.03003       1727.18       1736.21    
  38  0.238758      -1.43231      -3.62359       3.62359       1731.74       1735.36    
  39  0.655045     -0.423052      -1.07028       1.07028       1733.46       1734.53    
  40  0.337836      -1.08519      -2.74543       2.74543       1733.15       1735.89    
  41  0.625010     -0.469988      -1.18902       1.18902       1729.68       1730.87    
  42  0.346197E-01  -3.36333      -8.50888       8.50888       1730.87       1739.38    
  43  0.378697     -0.971019      -2.45658       2.45658       1733.65       1736.11    
  44  0.714474     -0.336208     -0.850572      0.850572       1737.19       1738.04    
  45  0.729924     -0.314815     -0.796450      0.796450       1738.60       1739.39    
  46  0.184188      -1.69180      -4.28008       4.28008       1730.45       1734.73    
  47  0.909154     -0.952407E-01 -0.240949      0.240949       1737.48       1737.73    
  48  0.270892E-01  -3.60862      -9.12944       9.12944       1726.24       1735.37    
  49  0.746152     -0.292826     -0.740819      0.740819       1737.68       1738.42    
  50  0.495962     -0.701256      -1.77410       1.77410       1741.70       1743.48    
  51  0.308769      -1.17516      -2.97303       2.97303       1742.90       1745.87    
  52  0.684500     -0.379067     -0.959000      0.959000       1742.13       1743.09    
  53  0.695013     -0.363825     -0.920438      0.920438       1745.08       1746.00    
  54  0.443613     -0.812804      -2.05631       2.05631       1746.48       1748.53    
  55  0.930167     -0.723907E-01 -0.183141      0.183141       1747.41       1747.59    
  56  0.688367     -0.373433     -0.944746      0.944746       1743.77       1744.71    
  57  0.328237      -1.11402      -2.81835       2.81835       1745.80       1748.62    
  58  0.665088E-01  -2.71042      -6.85708       6.85708       1736.59       1743.45    
loop,thermsimp(1:2)       30  0.283966      0.599112    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    526       1709.56         68.19          1.15         39.59          0.36          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1709.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       30
neval is:      525
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       31
neval is:      525


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      525     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.456164E-01  -3.08749      -7.81102       7.81102       1636.21       1644.03    
   2  0.550510     -0.596911      -1.51012       1.51012       1648.93       1650.44    
   3  0.599183     -0.512188      -1.29578       1.29578       1667.64       1668.93    
   4  0.463354     -0.769263      -1.94616       1.94616       1676.55       1678.50    
   5  0.455992     -0.785279      -1.98667       1.98667       1683.59       1685.58    
   6  0.198149      -1.61873      -4.09523       4.09523       1685.12       1689.21    
   7  0.955046     -0.459959E-01 -0.116365      0.116365       1686.22       1686.34    
   8  0.743730     -0.296077     -0.749044      0.749044       1689.48       1690.23    
   9  0.633042     -0.457219      -1.15672       1.15672       1687.22       1688.37    
  10  0.870677     -0.138485     -0.350351      0.350351       1693.72       1694.07    
  11  0.546582     -0.604070      -1.52823       1.52823       1692.45       1693.98    
  12  0.292723      -1.22853      -3.10805       3.10805       1699.05       1702.16    
  13  0.805221E-01  -2.51922      -6.37337       6.37337       1698.73       1705.10    
  14  0.658185     -0.418269      -1.05818       1.05818       1703.73       1704.79    
  15  0.974478     -0.258538E-01 -0.654073E-01  0.654073E-01   1694.87       1694.94    
  16  0.268855      -1.31358      -3.32323       3.32323       1703.48       1706.80    
  17  0.494484     -0.704241      -1.78166       1.78166       1712.74       1714.52    
  18  0.982953     -0.171941E-01 -0.434994E-01  0.434994E-01   1710.77       1710.81    
  19  0.703308     -0.351960     -0.890422      0.890422       1712.12       1713.01    
  20  0.671580     -0.398123      -1.00721       1.00721       1714.43       1715.44    
  21  0.210384      -1.55882      -3.94366       3.94366       1715.93       1719.88    
  22  0.837290     -0.177585     -0.449271      0.449271       1706.12       1706.57    
  23  0.180021      -1.71468      -4.33797       4.33797       1717.59       1721.93    
  24  0.617844     -0.481519      -1.21819       1.21819       1716.43       1717.65    
  25  0.524065     -0.646139      -1.63466       1.63466       1719.50       1721.13    
  26  0.854055     -0.157759     -0.399115      0.399115       1718.88       1719.28    
  27  0.411337     -0.888343      -2.24742       2.24742       1715.15       1717.40    
  28  0.981489     -0.186841E-01 -0.472689E-01  0.472689E-01   1718.00       1718.05    
  29  0.646949     -0.435488      -1.10174       1.10174       1723.95       1725.06    
  30  0.350244      -1.04912      -2.65418       2.65418       1726.01       1728.66    
  31  0.655455     -0.422425      -1.06869       1.06869       1725.57       1726.64    
  32  0.577459     -0.549117      -1.38921       1.38921       1726.28       1727.67    
  33  0.790874     -0.234617     -0.593556      0.593556       1725.18       1725.78    
  34  0.654199     -0.424344      -1.07355       1.07355       1723.86       1724.93    
  35  0.571446     -0.559585      -1.41569       1.41569       1715.65       1717.07    
  36  0.324671      -1.12494      -2.84599       2.84599       1729.68       1732.52    
  37  0.310261E-01  -3.47293      -8.78614       8.78614       1733.46       1742.25    
  38  0.113505      -2.17591      -5.50483       5.50483       1730.45       1735.95    
  39  0.690688     -0.370066     -0.936229      0.936229       1731.74       1732.67    
  40  0.336841      -1.08814      -2.75289       2.75289       1726.24       1729.00    
  41  0.157762E-01  -4.14925      -10.4972       10.4972       1733.15       1743.64    
  42  0.692953     -0.366793     -0.927948      0.927948       1729.80       1730.73    
  43  0.917810     -0.857647E-01 -0.216976      0.216976       1733.65       1733.87    
  44  0.930239     -0.723139E-01 -0.182947      0.182947       1727.18       1727.36    
  45  0.213939      -1.54206      -3.90126       3.90126       1737.48       1741.39    
  46  0.191222      -1.65432      -4.18526       4.18526       1737.19       1741.38    
  47  0.509241     -0.674835      -1.70726       1.70726       1737.68       1739.39    
  48  0.482746     -0.728264      -1.84243       1.84243       1730.87       1732.71    
  49  0.558324E-01  -2.88540      -7.29976       7.29976       1738.60       1745.90    
  50  0.805385     -0.216435     -0.547557      0.547557       1742.13       1742.68    
  51  0.427474E-01  -3.15245      -7.97536       7.97536       1736.59       1744.57    
  52  0.202566      -1.59669      -4.03946       4.03946       1741.70       1745.74    
  53  0.426255     -0.852718      -2.15729       2.15729       1743.77       1745.92    
  54  0.838523     -0.176113     -0.445547      0.445547       1742.90       1743.34    
  55  0.758218     -0.276785     -0.700236      0.700236       1745.08       1745.78    
  56  0.667220     -0.404635      -1.02368       1.02368       1747.41       1748.43    
  57  0.232530      -1.45874      -3.69045       3.69045       1746.48       1750.17    
  58  0.878357     -0.129702     -0.328134      0.328134       1709.56       1709.89    
loop,thermsimp(1:2)       31   7.81102       1.51012    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    527       1675.31         68.46          1.23         39.29          0.29          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1675.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       31
neval is:      526
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       32
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      526     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195290      -1.63327      -4.13200       4.13200       1636.21       1640.35    
   2  0.163951      -1.80819      -4.57452       4.57452       1648.93       1653.50    
   3  0.419868     -0.867814      -2.19548       2.19548       1667.64       1669.83    
   4  0.734040     -0.309192     -0.782223      0.782223       1676.55       1677.34    
   5  0.606079     -0.500745      -1.26683       1.26683       1683.59       1684.86    
   6  0.535424     -0.624696      -1.58041       1.58041       1686.22       1687.81    
   7  0.280299      -1.27190      -3.21777       3.21777       1687.22       1690.43    
   8  0.113078      -2.17968      -5.51435       5.51435       1685.12       1690.63    
   9  0.793508     -0.231291     -0.585142      0.585142       1689.48       1690.07    
  10  0.310674      -1.16901      -2.95747       2.95747       1692.45       1695.41    
  11  0.727780     -0.317757     -0.803892      0.803892       1693.72       1694.52    
  12  0.785018     -0.242049     -0.612358      0.612358       1694.87       1695.48    
  13  0.544769     -0.607394      -1.53664       1.53664       1699.05       1700.59    
  14  0.956533     -0.444404E-01 -0.112429      0.112429       1703.73       1703.84    
  15  0.429201E-01  -3.14842      -7.96516       7.96516       1698.73       1706.69    
  16  0.521359     -0.651317      -1.64776       1.64776       1706.12       1707.76    
  17  0.721055     -0.327040     -0.827376      0.827376       1703.48       1704.30    
  18  0.211580E-01  -3.85574      -9.75462       9.75462       1709.56       1719.31    
  19  0.481395     -0.731068      -1.84952       1.84952       1710.77       1712.62    
  20  0.570335     -0.561531      -1.42061       1.42061       1712.12       1713.54    
  21  0.870915     -0.138211     -0.349659      0.349659       1712.74       1713.09    
  22  0.233853      -1.45306      -3.67610       3.67610       1714.43       1718.11    
  23  0.307270      -1.18003      -2.98535       2.98535       1715.65       1718.63    
  24  0.394628     -0.929811      -2.35232       2.35232       1715.15       1717.50    
  25  0.104262      -2.26085      -5.71971       5.71971       1716.43       1722.15    
  26  0.473629     -0.747330      -1.89067       1.89067       1718.00       1719.89    
  27  0.376754     -0.976162      -2.46959       2.46959       1718.88       1721.35    
  28  0.940665     -0.611679E-01 -0.154748      0.154748       1715.93       1716.09    
  29  0.541404     -0.613589      -1.55232       1.55232       1719.50       1721.05    
  30  0.294748      -1.22163      -3.09060       3.09060       1717.59       1720.68    
  31  0.910904     -0.933181E-01 -0.236085      0.236085       1723.86       1724.09    
  32  0.498988     -0.695173      -1.75872       1.75872       1723.95       1725.71    
  33  0.791968     -0.233234     -0.590059      0.590059       1725.18       1725.77    
  34  0.699447     -0.357465     -0.904349      0.904349       1725.57       1726.47    
  35  0.755221E-01  -2.58333      -6.53555       6.53555       1727.18       1733.72    
  36  0.855130E-01  -2.45909      -6.22123       6.22123       1726.28       1732.50    
  37  0.657852     -0.418775      -1.05946       1.05946       1726.01       1727.07    
  38  0.967250     -0.332985E-01 -0.842418E-01  0.842418E-01   1726.24       1726.33    
  39  0.628707     -0.464089      -1.17410       1.17410       1729.80       1730.97    
  40  0.646567E-01  -2.73866      -6.92853       6.92853       1729.68       1736.61    
  41  0.607154     -0.498973      -1.26235       1.26235       1731.74       1733.00    
  42  0.666321     -0.405983      -1.02710       1.02710       1730.87       1731.90    
  43  0.749880     -0.287841     -0.728209      0.728209       1733.65       1734.38    
  44  0.683383     -0.380700     -0.963130      0.963130       1730.45       1731.41    
  45  0.658232     -0.418198      -1.05800       1.05800       1737.68       1738.74    
  46  0.345395      -1.06307      -2.68945       2.68945       1737.19       1739.88    
  47  0.220689      -1.51100      -3.82268       3.82268       1737.48       1741.31    
  48  0.428774     -0.846826      -2.14238       2.14238       1733.46       1735.60    
  49  0.660075     -0.415402      -1.05092       1.05092       1742.13       1743.18    
  50  0.795680E-01  -2.53114      -6.40353       6.40353       1742.90       1749.30    
  51  0.589123     -0.529120      -1.33862       1.33862       1733.15       1734.48    
  52  0.721133     -0.326932     -0.827104      0.827104       1736.59       1737.42    
  53  0.818337     -0.200482     -0.507197      0.507197       1741.70       1742.21    
  54  0.825511     -0.191753     -0.485115      0.485115       1745.08       1745.57    
  55  0.828614     -0.188001     -0.475623      0.475623       1738.60       1739.07    
  56  0.214019      -1.54169      -3.90032       3.90032       1743.77       1747.67    
  57  0.303444      -1.19256      -3.01705       3.01705       1747.41       1750.42    
  58  0.635557     -0.453254      -1.14668       1.14668       1675.31       1676.45    
loop,thermsimp(1:2)       32   4.13200       4.57452    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528       1752.73         68.40          1.18         39.23          0.46          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    529       1702.05         68.38          1.20         39.42          0.25          0.05        109.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1702.05
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       32
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       33
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      528     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.819000E-01  -2.50226      -6.33045       6.33045       1636.21       1642.55    
   2  0.451517     -0.795142      -2.01163       2.01163       1648.93       1650.94    
   3  0.994192E-01  -2.30841      -5.84004       5.84004       1667.64       1673.48    
   4  0.746841     -0.291903     -0.738484      0.738484       1675.31       1676.04    
   5  0.611746     -0.491439      -1.24329       1.24329       1676.55       1677.80    
   6  0.270477      -1.30757      -3.30801       3.30801       1683.59       1686.90    
   7  0.910534     -0.937242E-01 -0.237112      0.237112       1686.22       1686.46    
   8  0.942878     -0.588187E-01 -0.148805      0.148805       1689.48       1689.63    
   9  0.485061     -0.723481      -1.83033       1.83033       1687.22       1689.05    
  10  0.680127     -0.385476     -0.975213      0.975213       1685.12       1686.09    
  11  0.568210     -0.565264      -1.43006       1.43006       1693.72       1695.15    
  12  0.290478      -1.23623      -3.12753       3.12753       1692.45       1695.58    
  13  0.759168E-01  -2.57812      -6.52237       6.52237       1694.87       1701.39    
  14  0.724808     -0.321849     -0.814244      0.814244       1699.05       1699.87    
  15  0.896740     -0.108989     -0.275732      0.275732       1703.73       1704.01    
  16  0.484129     -0.725403      -1.83519       1.83519       1703.48       1705.31    
  17  0.841169     -0.172963     -0.437578      0.437578       1698.73       1699.17    
  18  0.124231      -2.08561      -5.27638       5.27638       1706.12       1711.39    
  19  0.512837     -0.667798      -1.68946       1.68946       1710.77       1712.46    
  20  0.659640     -0.416061      -1.05259       1.05259       1712.74       1713.79    
  21  0.775478     -0.254276     -0.643291      0.643291       1712.12       1712.76    
  22  0.514721     -0.664130      -1.68018       1.68018       1715.93       1717.61    
  23  0.642501     -0.442387      -1.11919       1.11919       1715.15       1716.27    
  24  0.372010     -0.988836      -2.50165       2.50165       1714.43       1716.93    
  25  0.630365     -0.461456      -1.16744       1.16744       1715.65       1716.82    
  26  0.697349     -0.360469     -0.911948      0.911948       1709.56       1710.47    
  27  0.702368     -0.353297     -0.893805      0.893805       1718.00       1718.89    
  28  0.904702     -0.100150     -0.253368      0.253368       1717.59       1717.84    
  29  0.613508     -0.488561      -1.23601       1.23601       1719.50       1720.73    
  30  0.399820     -0.916740      -2.31926       2.31926       1718.88       1721.20    
  31  0.450706     -0.796939      -2.01617       2.01617       1716.43       1718.45    
  32  0.491730     -0.709826      -1.79579       1.79579       1723.86       1725.65    
  33  0.859232     -0.151717     -0.383827      0.383827       1723.95       1724.34    
  34  0.500784     -0.691581      -1.74963       1.74963       1725.18       1726.93    
  35  0.423737     -0.858643      -2.17228       2.17228       1726.24       1728.41    
  36  0.120442      -2.11658      -5.35474       5.35474       1725.57       1730.92    
  37  0.954439     -0.466313E-01 -0.117972      0.117972       1726.01       1726.12    
  38  0.798812     -0.224629     -0.568288      0.568288       1729.80       1730.37    
  39  0.430786     -0.842144      -2.13053       2.13053       1730.45       1732.58    
  40  0.414903     -0.879710      -2.22557       2.22557       1730.87       1733.09    
  41  0.508906     -0.675492      -1.70892       1.70892       1726.28       1727.99    
  42  0.201745      -1.60075      -4.04974       4.04974       1731.74       1735.79    
  43  0.789439E-01  -2.53902      -6.42345       6.42345       1727.18       1733.60    
  44  0.300237      -1.20318      -3.04392       3.04392       1733.65       1736.69    
  45  0.325303      -1.12300      -2.84107       2.84107       1733.15       1735.99    
  46  0.237964      -1.43564      -3.63201       3.63201       1733.46       1737.09    
  47  0.453987     -0.789687      -1.99782       1.99782       1729.68       1731.68    
  48  0.984013E-01  -2.31870      -5.86607       5.86607       1736.59       1742.46    
  49  0.477956     -0.738237      -1.86766       1.86766       1737.68       1739.55    
  50  0.604552     -0.503268      -1.27322       1.27322       1738.60       1739.87    
  51  0.660239     -0.415153      -1.05029       1.05029       1737.19       1738.24    
  52  0.549986     -0.597862      -1.51253       1.51253       1737.48       1739.00    
  53  0.243566      -1.41237      -3.57314       3.57314       1741.70       1745.28    
  54  0.336725      -1.08849      -2.75376       2.75376       1742.13       1744.88    
  55  0.897543     -0.108094     -0.273466      0.273466       1745.08       1745.35    
  56  0.922315     -0.808690E-01 -0.204590      0.204590       1743.77       1743.97    
  57  0.155313      -1.86231      -4.71146       4.71146       1742.90       1747.61    
  58  0.722353     -0.325241     -0.822826      0.822826       1702.05       1702.87    
loop,thermsimp(1:2)       33   6.33045       2.01163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530       1678.17         68.31          1.20         39.42          0.40          0.05        109.38
Just calling func    0   0        109.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1678.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       33
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       34
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      529     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.981444     -0.187299E-01 -0.473847E-01  0.473847E-01   1636.21       1636.26    
   2  0.357031      -1.02993      -2.60562       2.60562       1648.93       1651.53    
   3  0.350447      -1.04855      -2.65271       2.65271       1667.64       1670.29    
   4  0.189989      -1.66079      -4.20162       4.20162       1675.31       1679.51    
   5  0.587578     -0.531746      -1.34526       1.34526       1676.55       1677.90    
   6  0.114991      -2.16291      -5.47193       5.47193       1685.12       1690.59    
   7  0.657381     -0.419492      -1.06127       1.06127       1686.22       1687.29    
   8  0.641189E-02  -5.04960      -12.7750       12.7750       1683.59       1696.37    
   9  0.968794     -0.317033E-01 -0.802059E-01  0.802059E-01   1687.22       1687.30    
  10  0.503328E-02  -5.29168      -13.3874       13.3874       1689.48       1702.87    
  11  0.829431     -0.187016     -0.473131      0.473131       1693.72       1694.19    
  12  0.191311      -1.65386      -4.18408       4.18408       1692.45       1696.64    
  13  0.196005      -1.62961      -4.12275       4.12275       1698.73       1702.85    
  14  0.336490      -1.08919      -2.75553       2.75553       1699.05       1701.81    
  15  0.149023E-01  -4.20624      -10.6413       10.6413       1694.87       1705.51    
  16  0.125271E-01  -4.37986      -11.0806       11.0806       1702.05       1713.13    
  17  0.414930     -0.879646      -2.22541       2.22541       1703.73       1705.95    
  18  0.262487      -1.33755      -3.38387       3.38387       1703.48       1706.86    
  19  0.195281      -1.63332      -4.13212       4.13212       1709.56       1713.69    
  20  0.143722      -1.93988      -4.90768       4.90768       1706.12       1711.02    
  21  0.438997     -0.823262      -2.08277       2.08277       1710.77       1712.85    
  22  0.824417     -0.193079     -0.488469      0.488469       1712.12       1712.61    
  23  0.549781     -0.598236      -1.51347       1.51347       1712.74       1714.25    
  24  0.551873E-01  -2.89702      -7.32916       7.32916       1715.15       1722.48    
  25  0.934834     -0.673864E-01 -0.170481      0.170481       1715.65       1715.82    
  26  0.928568     -0.741115E-01 -0.187494      0.187494       1714.43       1714.62    
  27  0.941294     -0.604999E-01 -0.153058      0.153058       1715.93       1716.09    
  28  0.322815      -1.13067      -2.86049       2.86049       1717.59       1720.45    
  29  0.298431      -1.20922      -3.05919       3.05919       1716.43       1719.49    
  30  0.977329     -0.229318E-01 -0.580151E-01  0.580151E-01   1718.00       1718.06    
  31  0.513921     -0.665686      -1.68412       1.68412       1719.50       1721.18    
  32  0.235108      -1.44771      -3.66255       3.66255       1718.88       1722.54    
  33  0.779842     -0.248665     -0.629095      0.629095       1723.95       1724.58    
  34  0.297000E-01  -3.51661      -8.89665       8.89665       1723.86       1732.76    
  35  0.779190E-02  -4.85467      -12.2818       12.2818       1726.01       1738.29    
  36  0.559158     -0.581323      -1.47069       1.47069       1725.18       1726.65    
  37  0.125647      -2.07428      -5.24771       5.24771       1726.28       1731.53    
  38  0.142977      -1.94507      -4.92082       4.92082       1726.24       1731.16    
  39  0.923378E-01  -2.38230      -6.02698       6.02698       1729.80       1735.82    
  40  0.813591     -0.206297     -0.521911      0.521911       1725.57       1726.09    
  41  0.206767      -1.57616      -3.98752       3.98752       1729.68       1733.67    
  42  0.955262     -0.457693E-01 -0.115792      0.115792       1730.45       1730.56    
  43  0.178167      -1.72503      -4.36415       4.36415       1730.87       1735.23    
  44  0.246986      -1.39843      -3.53787       3.53787       1727.18       1730.72    
  45  0.568163     -0.565348      -1.43027       1.43027       1731.74       1733.17    
  46  0.742294     -0.298010     -0.753933      0.753933       1733.15       1733.90    
  47  0.888804E-01  -2.42046      -6.12352       6.12352       1733.65       1739.77    
  48  0.276498      -1.28555      -3.25231       3.25231       1733.46       1736.71    
  49  0.284239      -1.25794      -3.18246       3.18246       1737.19       1740.38    
  50  0.585524E-01  -2.83783      -7.17942       7.17942       1737.48       1744.66    
  51  0.223819      -1.49692      -3.78704       3.78704       1737.68       1741.47    
  52  0.910722     -0.935177E-01 -0.236590      0.236590       1738.60       1738.83    
  53  0.930723     -0.717934E-01 -0.181630      0.181630       1736.59       1736.77    
  54  0.605897E-01  -2.80363      -7.09289       7.09289       1743.77       1750.86    
  55  0.537138     -0.621501      -1.57233       1.57233       1742.13       1743.70    
  56  0.731457     -0.312717     -0.791142      0.791142       1741.70       1742.49    
  57  0.333283      -1.09876      -2.77976       2.77976       1745.08       1747.86    
  58  0.943934     -0.576988E-01 -0.145972      0.145972       1678.17       1678.32    
loop,thermsimp(1:2)       34  0.473847E-01   2.60562    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531       1693.70         68.78          1.27         38.93          0.25          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1693.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       34
neval is:      530
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       35
neval is:      530


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      530     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946856E-01  -2.35719      -5.96345       5.96345       1636.21       1642.18    
   2  0.756296E-01  -2.58191      -6.53196       6.53196       1648.93       1655.46    
   3  0.561067     -0.577915      -1.46207       1.46207       1667.64       1669.10    
   4  0.216838      -1.52860      -3.86721       3.86721       1676.55       1680.42    
   5  0.314923      -1.15543      -2.92311       2.92311       1678.17       1681.09    
   6  0.142515      -1.94831      -4.92902       4.92902       1675.31       1680.23    
   7  0.847169E-01  -2.46844      -6.24489       6.24489       1686.22       1692.47    
   8  0.526542     -0.641424      -1.62274       1.62274       1687.22       1688.84    
   9  0.732157     -0.311761     -0.788723      0.788723       1685.12       1685.91    
  10  0.916925     -0.867295E-01 -0.219417      0.219417       1693.72       1693.94    
  11  0.212460      -1.54900      -3.91882       3.91882       1683.59       1687.51    
  12  0.536257     -0.623142      -1.57648       1.57648       1692.45       1694.03    
  13  0.366591      -1.00351      -2.53877       2.53877       1699.05       1701.59    
  14  0.880705     -0.127033     -0.321380      0.321380       1698.73       1699.05    
  15  0.217460      -1.52574      -3.85997       3.85997       1689.48       1693.34    
  16  0.382542     -0.960916      -2.43102       2.43102       1694.87       1697.30    
  17  0.322523      -1.13158      -2.86278       2.86278       1703.73       1706.59    
  18  0.621048     -0.476347      -1.20511       1.20511       1703.48       1704.68    
  19  0.968083     -0.324370E-01 -0.820622E-01  0.820622E-01   1706.12       1706.20    
  20  0.834423     -0.181015     -0.457949      0.457949       1712.12       1712.58    
  21  0.822993     -0.194808     -0.492844      0.492844       1710.77       1711.26    
  22  0.269825      -1.30998      -3.31411       3.31411       1702.05       1705.36    
  23  0.752085     -0.284906     -0.720782      0.720782       1709.56       1710.28    
  24  0.562833     -0.574772      -1.45411       1.45411       1712.74       1714.19    
  25  0.816806     -0.202354     -0.511933      0.511933       1714.43       1714.94    
  26  0.912682     -0.913679E-01 -0.231151      0.231151       1715.65       1715.88    
  27  0.318966      -1.14267      -2.89084       2.89084       1715.93       1718.82    
  28  0.974130E-01  -2.32880      -5.89161       5.89161       1718.00       1723.89    
  29  0.989500     -0.105555E-01 -0.267043E-01  0.267043E-01   1716.43       1716.46    
  30  0.632994     -0.457295      -1.15691       1.15691       1717.59       1718.74    
  31  0.490860     -0.711597      -1.80027       1.80027       1719.50       1721.30    
  32  0.855011     -0.156641     -0.396284      0.396284       1715.15       1715.55    
  33  0.208926E-01  -3.86836      -9.78655       9.78655       1718.88       1728.66    
  34  0.629123     -0.463428      -1.17242       1.17242       1723.95       1725.13    
  35  0.520337     -0.653278      -1.65272       1.65272       1725.57       1727.22    
  36  0.860508     -0.150232     -0.380071      0.380071       1725.18       1725.56    
  37  0.703334     -0.351923     -0.890329      0.890329       1730.45       1731.34    
  38  0.982718     -0.174329E-01 -0.441034E-01  0.441034E-01   1727.18       1727.23    
  39  0.170183      -1.77088      -4.48014       4.48014       1726.24       1730.72    
  40  0.687538     -0.374638     -0.947794      0.947794       1726.28       1727.23    
  41  0.469943E-01  -3.05773      -7.73573       7.73573       1723.86       1731.59    
  42  0.436271     -0.829491      -2.09852       2.09852       1731.74       1733.84    
  43  0.739146     -0.302260     -0.764687      0.764687       1729.68       1730.44    
  44  0.986288     -0.138071E-01 -0.349305E-01  0.349305E-01   1733.15       1733.18    
  45  0.670480     -0.399761      -1.01135       1.01135       1730.87       1731.88    
  46  0.280759      -1.27026      -3.21362       3.21362       1729.80       1733.01    
  47  0.680423     -0.385041     -0.974113      0.974113       1733.46       1734.43    
  48  0.424121     -0.857736      -2.16998       2.16998       1736.59       1738.76    
  49  0.640263     -0.445876      -1.12802       1.12802       1726.01       1727.13    
  50  0.399483     -0.917585      -2.32139       2.32139       1738.60       1740.92    
  51  0.645429E-01  -2.74043      -6.93299       6.93299       1733.65       1740.58    
  52  0.337576      -1.08597      -2.74738       2.74738       1737.19       1739.94    
  53  0.197916      -1.61991      -4.09821       4.09821       1737.68       1741.78    
  54  0.270509      -1.30745      -3.30771       3.30771       1741.70       1745.01    
  55  0.825088     -0.192265     -0.486410      0.486410       1742.13       1742.62    
  56  0.514320     -0.664909      -1.68215       1.68215       1737.48       1739.17    
  57  0.505882     -0.681452      -1.72400       1.72400       1745.08       1746.81    
  58  0.461952     -0.772293      -1.95382       1.95382       1693.70       1695.65    
loop,thermsimp(1:2)       35   5.96345       6.53196    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    532       1693.80         68.54          1.24         39.26          0.17          0.05        109.27
Just calling func    0   0        109.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1693.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       35
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       36
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      531     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102610      -2.27682      -5.76013       5.76013       1636.21       1641.97    
   2  0.682356     -0.382203     -0.966934      0.966934       1648.93       1649.89    
   3  0.177286      -1.72999      -4.37669       4.37669       1667.64       1672.01    
   4  0.705484     -0.348871     -0.882606      0.882606       1675.31       1676.19    
   5  0.700105     -0.356525     -0.901970      0.901970       1676.55       1677.46    
   6  0.502373E-01  -2.99100      -7.56691       7.56691       1678.17       1685.74    
   7  0.513397     -0.666706      -1.68670       1.68670       1685.12       1686.81    
   8  0.803947     -0.218222     -0.552078      0.552078       1683.59       1684.15    
   9  0.433536     -0.835780      -2.11444       2.11444       1687.22       1689.33    
  10  0.469536     -0.756009      -1.91262       1.91262       1686.22       1688.14    
  11  0.312394      -1.16349      -2.94351       2.94351       1689.48       1692.43    
  12  0.971867     -0.285367E-01 -0.721947E-01  0.721947E-01   1693.72       1693.79    
  13  0.869634     -0.139683     -0.353383      0.353383       1692.45       1692.80    
  14  0.415775     -0.877610      -2.22026       2.22026       1693.70       1695.92    
  15  0.657149     -0.419844      -1.06216       1.06216       1694.87       1695.93    
  16  0.517026     -0.659662      -1.66888       1.66888       1698.73       1700.40    
  17  0.845021     -0.168394     -0.426018      0.426018       1699.05       1699.48    
  18  0.646794E-01  -2.73831      -6.92765       6.92765       1703.48       1710.40    
  19  0.490710     -0.711902      -1.80104       1.80104       1702.05       1703.85    
  20  0.935557     -0.666133E-01 -0.168525      0.168525       1706.12       1706.28    
  21  0.155562      -1.86071      -4.70741       4.70741       1703.73       1708.44    
  22  0.739793     -0.301384     -0.762471      0.762471       1709.56       1710.32    
  23  0.195416      -1.63263      -4.13037       4.13037       1710.77       1714.90    
  24  0.679649E-01  -2.68876      -6.80229       6.80229       1712.12       1718.92    
  25  0.252534      -1.37621      -3.48167       3.48167       1712.74       1716.22    
  26  0.504672     -0.683847      -1.73006       1.73006       1714.43       1716.16    
  27  0.711577     -0.340272     -0.860853      0.860853       1715.15       1716.01    
  28  0.281313      -1.26829      -3.20863       3.20863       1715.65       1718.86    
  29  0.177966      -1.72616      -4.36702       4.36702       1716.43       1720.80    
  30  0.281850      -1.26638      -3.20381       3.20381       1717.59       1720.79    
  31  0.689216E-01  -2.67479      -6.76693       6.76693       1715.93       1722.70    
  32  0.845597     -0.167712     -0.424295      0.424295       1719.50       1719.92    
  33  0.790470     -0.235127     -0.594847      0.594847       1718.00       1718.59    
  34  0.306736      -1.18177      -2.98974       2.98974       1723.95       1726.94    
  35  0.637662     -0.449947      -1.13832       1.13832       1725.18       1726.32    
  36  0.668809E-01  -2.70484      -6.84297       6.84297       1726.01       1732.85    
  37  0.689320E-02  -4.97722      -12.5918       12.5918       1725.57       1738.16    
  38  0.102899      -2.27401      -5.75300       5.75300       1727.18       1732.93    
  39  0.487302     -0.718871      -1.81867       1.81867       1726.28       1728.10    
  40  0.912503     -0.915638E-01 -0.231647      0.231647       1718.88       1719.11    
  41  0.502050     -0.689055      -1.74324       1.74324       1729.68       1731.42    
  42  0.925412     -0.775163E-01 -0.196108      0.196108       1726.24       1726.44    
  43  0.921811     -0.814150E-01 -0.205972      0.205972       1730.45       1730.65    
  44  0.870535     -0.138648     -0.350764      0.350764       1723.86       1724.21    
  45  0.557947     -0.583490      -1.47617       1.47617       1730.87       1732.34    
  46  0.653329E-02  -5.03084      -12.7275       12.7275       1729.80       1742.53    
  47  0.173764      -1.75006      -4.42746       4.42746       1733.15       1737.57    
  48  0.318212      -1.14504      -2.89682       2.89682       1731.74       1734.63    
  49  0.423539     -0.859110      -2.17346       2.17346       1733.46       1735.63    
  50  0.686736     -0.375806     -0.950749      0.950749       1736.59       1737.54    
  51  0.990308     -0.973904E-02 -0.246387E-01  0.246387E-01   1737.48       1737.51    
  52  0.150330      -1.89492      -4.79395       4.79395       1737.19       1741.99    
  53  0.697676     -0.360000     -0.910763      0.910763       1733.65       1734.56    
  54  0.901523     -0.103670     -0.262275      0.262275       1738.60       1738.86    
  55  0.101249      -2.29017      -5.79389       5.79389       1737.68       1743.48    
  56  0.568624E-01  -2.86712      -7.25352       7.25352       1742.13       1749.38    
  57  0.119244      -2.12658      -5.38004       5.38004       1741.70       1747.08    
  58  0.329906      -1.10895      -2.80552       2.80552       1693.80       1696.61    
loop,thermsimp(1:2)       36   5.76013      0.966934    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533       1676.35         68.44          1.20         39.82          0.13          0.05        109.64
Just calling func    0   0        109.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1676.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       36
neval is:      532
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       37
neval is:      532


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      532     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.189501      -1.66336      -4.20813       4.20813       1636.21       1640.42    
   2  0.365380E-02  -5.61199      -14.1977       14.1977       1648.93       1663.13    
   3  0.830232     -0.186050     -0.470688      0.470688       1667.64       1668.11    
   4  0.641913     -0.443302      -1.12151       1.12151       1675.31       1676.43    
   5  0.977753     -0.224987E-01 -0.569194E-01  0.569194E-01   1676.55       1676.61    
   6  0.941040     -0.607695E-01 -0.153740      0.153740       1683.59       1683.75    
   7  0.674724E-01  -2.69604      -6.82069       6.82069       1678.17       1684.99    
   8  0.243526      -1.41253      -3.57356       3.57356       1685.12       1688.69    
   9  0.916671     -0.870070E-01 -0.220119      0.220119       1686.22       1686.44    
  10  0.557286     -0.584677      -1.47917       1.47917       1687.22       1688.69    
  11  0.992934     -0.709123E-02 -0.179401E-01  0.179401E-01   1689.48       1689.50    
  12  0.575424     -0.552647      -1.39814       1.39814       1692.45       1693.85    
  13  0.128032      -2.05548      -5.20015       5.20015       1693.72       1698.92    
  14  0.473218E-01  -3.05078      -7.71816       7.71816       1693.70       1701.41    
  15  0.342686      -1.07094      -2.70937       2.70937       1694.87       1697.58    
  16  0.588634     -0.529951      -1.34072       1.34072       1693.80       1695.14    
  17  0.785774     -0.241086     -0.609923      0.609923       1699.05       1699.66    
  18  0.180861E-01  -4.01261      -10.1515       10.1515       1698.73       1708.88    
  19  0.814771     -0.204848     -0.518244      0.518244       1702.05       1702.56    
  20  0.241579      -1.42056      -3.59386       3.59386       1706.12       1709.71    
  21  0.547139     -0.603053      -1.52566       1.52566       1703.73       1705.26    
  22  0.762461     -0.271204     -0.686119      0.686119       1709.56       1710.25    
  23  0.388112     -0.946461      -2.39445       2.39445       1703.48       1705.87    
  24  0.787095     -0.239406     -0.605672      0.605672       1710.77       1711.37    
  25  0.509851     -0.673637      -1.70423       1.70423       1715.15       1716.86    
  26  0.106857      -2.23627      -5.65752       5.65752       1714.43       1720.09    
  27  0.494106     -0.705005      -1.78359       1.78359       1712.74       1714.52    
  28  0.504670     -0.683850      -1.73007       1.73007       1718.00       1719.73    
  29  0.575895     -0.551830      -1.39607       1.39607       1715.65       1717.05    
  30  0.482961     -0.727820      -1.84131       1.84131       1712.12       1713.96    
  31  0.530700     -0.633559      -1.60284       1.60284       1718.88       1720.48    
  32  0.667588     -0.404084      -1.02229       1.02229       1719.50       1720.52    
  33  0.602101     -0.507331      -1.28349       1.28349       1717.59       1718.87    
  34  0.658488     -0.417809      -1.05701       1.05701       1716.43       1717.49    
  35  0.393981     -0.931452      -2.35648       2.35648       1715.93       1718.29    
  36  0.639259     -0.447446      -1.13199       1.13199       1723.86       1724.99    
  37  0.936740E-01  -2.36793      -5.99063       5.99063       1725.18       1731.17    
  38  0.342820      -1.07055      -2.70838       2.70838       1726.24       1728.95    
  39  0.557341     -0.584578      -1.47892       1.47892       1723.95       1725.43    
  40  0.743227     -0.296754     -0.750757      0.750757       1726.28       1727.03    
  41  0.852843     -0.159180     -0.402709      0.402709       1730.45       1730.85    
  42  0.346148      -1.06089      -2.68394       2.68394       1729.68       1732.36    
  43  0.913769     -0.901773E-01 -0.228139      0.228139       1730.87       1731.10    
  44  0.816355     -0.202906     -0.513332      0.513332       1726.01       1726.52    
  45  0.132158      -2.02375      -5.11989       5.11989       1727.18       1732.30    
  46  0.337498      -1.08619      -2.74796       2.74796       1733.65       1736.40    
  47  0.707154     -0.346507     -0.876627      0.876627       1731.74       1732.61    
  48  0.742004     -0.298400     -0.754921      0.754921       1733.46       1734.22    
  49  0.804507     -0.217525     -0.550316      0.550316       1737.48       1738.04    
  50  0.385864     -0.952271      -2.40915       2.40915       1736.59       1739.00    
  51  0.928439     -0.742509E-01 -0.187847      0.187847       1733.15       1733.33    
  52  0.859816     -0.151036     -0.382106      0.382106       1725.57       1725.95    
  53  0.663579     -0.410107      -1.03753       1.03753       1738.60       1739.63    
  54  0.312768      -1.16229      -2.94048       2.94048       1737.19       1740.13    
  55  0.842943     -0.170856     -0.432248      0.432248       1729.80       1730.23    
  56  0.417818     -0.872710      -2.20787       2.20787       1737.68       1739.89    
  57  0.803409     -0.218891     -0.553772      0.553772       1741.70       1742.26    
  58  0.410473     -0.890444      -2.25273       2.25273       1676.35       1678.60    
loop,thermsimp(1:2)       37   4.20813       14.1977    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    534       1680.85         68.16          1.09         39.52          0.60          0.05        109.42
Just calling func    0   0        109.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1680.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       37
neval is:      533
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       38
neval is:      533


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      533     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995416E-01  -2.30718      -5.83692       5.83692       1636.21       1642.05    
   2  0.503957     -0.685264      -1.73365       1.73365       1648.93       1650.66    
   3  0.622493     -0.474022      -1.19923       1.19923       1667.64       1668.84    
   4  0.935651     -0.665132E-01 -0.168271      0.168271       1675.31       1675.47    
   5  0.199187      -1.61351      -4.08201       4.08201       1676.55       1680.64    
   6  0.758609E-01  -2.57885      -6.52423       6.52423       1676.35       1682.87    
   7  0.984530E-01  -2.31818      -5.86474       5.86474       1683.59       1689.46    
   8  0.239970      -1.42724      -3.61077       3.61077       1678.17       1681.78    
   9  0.913380     -0.906037E-01 -0.229218      0.229218       1686.22       1686.45    
  10  0.189159E-02  -6.27034      -15.8633       15.8633       1685.12       1700.98    
  11  0.993010     -0.701452E-02 -0.177460E-01  0.177460E-01   1687.22       1687.23    
  12  0.723758     -0.323298     -0.817910      0.817910       1689.48       1690.30    
  13  0.793363     -0.231475     -0.585607      0.585607       1692.45       1693.04    
  14  0.600371     -0.510207      -1.29077       1.29077       1693.80       1695.09    
  15  0.362871      -1.01371      -2.56457       2.56457       1694.87       1697.43    
  16  0.619786     -0.478381      -1.21025       1.21025       1693.72       1694.93    
  17  0.866004     -0.143866     -0.363965      0.363965       1699.05       1699.42    
  18  0.671513     -0.398222      -1.00746       1.00746       1693.70       1694.70    
  19  0.719189     -0.329632     -0.833933      0.833933       1702.05       1702.88    
  20  0.710276     -0.342101     -0.865481      0.865481       1703.73       1704.59    
  21  0.615619E-01  -2.78771      -7.05262       7.05262       1703.48       1710.53    
  22  0.188098      -1.67079      -4.22692       4.22692       1698.73       1702.96    
  23  0.508944     -0.675418      -1.70874       1.70874       1706.12       1707.82    
  24  0.981871     -0.182954E-01 -0.462853E-01  0.462853E-01   1709.56       1709.61    
  25  0.225810      -1.48806      -3.76464       3.76464       1710.77       1714.53    
  26  0.989298     -0.107600E-01 -0.272217E-01  0.272217E-01   1712.12       1712.15    
  27  0.869151     -0.140239     -0.354789      0.354789       1712.74       1713.09    
  28  0.661576     -0.413130      -1.04517       1.04517       1715.15       1716.20    
  29  0.192048      -1.65001      -4.17435       4.17435       1715.65       1719.82    
  30  0.980212     -0.199861E-01 -0.505628E-01  0.505628E-01   1716.43       1716.49    
  31  0.160674      -1.82838      -4.62561       4.62561       1715.93       1720.56    
  32  0.123536E-01  -4.39381      -11.1159       11.1159       1717.59       1728.70    
  33  0.297350      -1.21285      -3.06837       3.06837       1718.00       1721.07    
  34  0.394659     -0.929732      -2.35213       2.35213       1714.43       1716.78    
  35  0.423082     -0.860189      -2.17619       2.17619       1718.88       1721.05    
  36  0.523558     -0.647108      -1.63712       1.63712       1719.50       1721.13    
  37  0.916842     -0.868204E-01 -0.219647      0.219647       1723.86       1724.08    
  38  0.150067      -1.89667      -4.79838       4.79838       1723.95       1728.75    
  39  0.561535     -0.577081      -1.45996       1.45996       1725.57       1727.03    
  40  0.926691     -0.761353E-01 -0.192614      0.192614       1726.01       1726.20    
  41  0.479570E-01  -3.03745      -7.68443       7.68443       1726.28       1733.96    
  42  0.494420     -0.704370      -1.78198       1.78198       1726.24       1728.02    
  43  0.722160E-01  -2.62809      -6.64880       6.64880       1729.80       1736.45    
  44  0.851764     -0.160446     -0.405911      0.405911       1730.45       1730.85    
  45  0.140206      -1.96465      -4.97035       4.97035       1730.87       1735.84    
  46  0.706931     -0.346822     -0.877423      0.877423       1725.18       1726.06    
  47  0.675871     -0.391754     -0.991096      0.991096       1727.18       1728.17    
  48  0.979967E-01  -2.32282      -5.87649       5.87649       1729.68       1735.55    
  49  0.337023      -1.08761      -2.75153       2.75153       1731.74       1734.49    
  50  0.270551      -1.30729      -3.30732       3.30732       1733.15       1736.45    
  51  0.165493      -1.79883      -4.55085       4.55085       1733.46       1738.01    
  52  0.325756      -1.12161      -2.83755       2.83755       1733.65       1736.49    
  53  0.307603      -1.17895      -2.98261       2.98261       1737.48       1740.47    
  54  0.790198     -0.235472     -0.595720      0.595720       1736.59       1737.19    
  55  0.495665     -0.701856      -1.77562       1.77562       1738.60       1740.37    
  56  0.596886     -0.516030      -1.30550       1.30550       1737.68       1738.99    
  57  0.467598     -0.760145      -1.92309       1.92309       1737.19       1739.12    
  58  0.438727     -0.823879      -2.08433       2.08433       1680.85       1682.94    
loop,thermsimp(1:2)       38   5.83692       1.73365    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    535       1699.59         68.18          1.12         39.85          0.37          0.05        109.58
Just calling func    0   0        109.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1699.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       38
neval is:      534
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       39
neval is:      534


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      534     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609718     -0.494759      -1.25169       1.25169       1636.21       1637.47    
   2  0.415874     -0.877372      -2.21966       2.21966       1648.93       1651.15    
   3  0.961318     -0.394498E-01 -0.998038E-01  0.998038E-01   1667.64       1667.74    
   4  0.965952     -0.346407E-01 -0.876374E-01  0.876374E-01   1675.31       1675.39    
   5  0.154943      -1.86470      -4.71750       4.71750       1676.55       1681.27    
   6  0.371326     -0.990674      -2.50630       2.50630       1678.17       1680.68    
   7  0.313239      -1.16079      -2.93667       2.93667       1676.35       1679.29    
   8  0.886978     -0.119935     -0.303422      0.303422       1680.85       1681.16    
   9  0.749723     -0.288051     -0.728739      0.728739       1686.22       1686.95    
  10  0.552279     -0.593702      -1.50200       1.50200       1687.22       1688.72    
  11  0.551516     -0.595084      -1.50550       1.50550       1683.59       1685.10    
  12  0.339175      -1.08124      -2.73542       2.73542       1689.48       1692.22    
  13  0.124635      -2.08237      -5.26817       5.26817       1692.45       1697.72    
  14  0.937098     -0.649678E-01 -0.164362      0.164362       1693.70       1693.86    
  15  0.639721E-01  -2.74931      -6.95546       6.95546       1693.72       1700.67    
  16  0.258753      -1.35188      -3.42012       3.42012       1693.80       1697.22    
  17  0.116140      -2.15296      -5.44677       5.44677       1694.87       1700.32    
  18  0.182528      -1.70085      -4.30297       4.30297       1699.05       1703.36    
  19  0.323703      -1.12793      -2.85354       2.85354       1685.12       1687.97    
  20  0.624238     -0.471224      -1.19215       1.19215       1702.05       1703.24    
  21  0.250110      -1.38585      -3.50606       3.50606       1698.73       1702.24    
  22  0.785262     -0.241738     -0.611571      0.611571       1703.73       1704.34    
  23  0.272793      -1.29904      -3.28644       3.28644       1706.12       1709.40    
  24  0.552827     -0.592710      -1.49949       1.49949       1709.56       1711.06    
  25  0.581634     -0.541915      -1.37099       1.37099       1703.48       1704.85    
  26  0.294889      -1.22116      -3.08940       3.08940       1712.12       1715.21    
  27  0.955830     -0.451753E-01 -0.114289      0.114289       1712.74       1712.85    
  28  0.691604     -0.368741     -0.932877      0.932877       1710.77       1711.70    
  29  0.975202     -0.251108E-01 -0.635278E-01  0.635278E-01   1715.15       1715.22    
  30  0.577048     -0.549830      -1.39101       1.39101       1716.43       1717.83    
  31  0.265577      -1.32585      -3.35426       3.35426       1714.43       1717.78    
  32  0.657063     -0.419975      -1.06249       1.06249       1715.65       1716.71    
  33  0.936668     -0.654263E-01 -0.165522      0.165522       1715.93       1716.10    
  34  0.333233      -1.09891      -2.78013       2.78013       1718.88       1721.66    
  35  0.796486     -0.227546     -0.575668      0.575668       1718.00       1718.57    
  36  0.968162     -0.323562E-01 -0.818577E-01  0.818577E-01   1719.50       1719.58    
  37  0.519518     -0.654855      -1.65671       1.65671       1723.86       1725.52    
  38  0.470578     -0.753793      -1.90702       1.90702       1725.18       1727.09    
  39  0.226350      -1.48567      -3.75859       3.75859       1726.01       1729.76    
  40  0.714391     -0.336325     -0.850868      0.850868       1725.57       1726.42    
  41  0.402411     -0.910282      -2.30292       2.30292       1726.24       1728.55    
  42  0.968828     -0.316682E-01 -0.801171E-01  0.801171E-01   1727.18       1727.26    
  43  0.595040     -0.519126      -1.31333       1.31333       1717.59       1718.90    
  44  0.370415     -0.993131      -2.51252       2.51252       1723.95       1726.47    
  45  0.321530      -1.13466      -2.87058       2.87058       1730.45       1733.32    
  46  0.733343     -0.310141     -0.784624      0.784624       1726.28       1727.06    
  47  0.753884     -0.282517     -0.714737      0.714737       1731.74       1732.45    
  48  0.750367     -0.287193     -0.726567      0.726567       1729.68       1730.40    
  49  0.101816      -2.28459      -5.77976       5.77976       1730.87       1736.65    
  50  0.413255     -0.883690      -2.23564       2.23564       1729.80       1732.03    
  51  0.819580     -0.198964     -0.503357      0.503357       1733.15       1733.65    
  52  0.173725      -1.75028      -4.42803       4.42803       1733.65       1738.08    
  53  0.950835     -0.504148E-01 -0.127544      0.127544       1736.59       1736.72    
  54  0.402344     -0.910449      -2.30334       2.30334       1733.46       1735.76    
  55  0.631798     -0.459185      -1.16169       1.16169       1737.68       1738.84    
  56  0.753033     -0.283646     -0.717596      0.717596       1737.19       1737.91    
  57  0.893578     -0.112522     -0.284668      0.284668       1738.60       1738.88    
  58  0.723940     -0.323047     -0.817275      0.817275       1699.59       1700.40    
loop,thermsimp(1:2)       39   1.25169       2.21966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    536       1734.70         68.26          1.18         39.58          0.25          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1734.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       39
neval is:      535
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       40
neval is:      535


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      535     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903890     -0.101048     -0.255640      0.255640       1636.21       1636.47    
   2  0.575116     -0.553184      -1.39950       1.39950       1648.93       1650.33    
   3  0.234605      -1.44985      -3.66797       3.66797       1667.64       1671.30    
   4  0.122801      -2.09719      -5.30568       5.30568       1675.31       1680.61    
   5  0.141985E-01  -4.25462      -10.7637       10.7637       1676.35       1687.11    
   6  0.756588     -0.278937     -0.705681      0.705681       1678.17       1678.88    
   7  0.646676     -0.435910      -1.10281       1.10281       1680.85       1681.96    
   8  0.898014E-01  -2.41016      -6.09744       6.09744       1676.55       1682.65    
   9  0.163265      -1.81238      -4.58514       4.58514       1683.59       1688.18    
  10  0.358760      -1.02510      -2.59340       2.59340       1686.22       1688.82    
  11  0.309585      -1.17252      -2.96636       2.96636       1685.12       1688.09    
  12  0.926638     -0.761923E-01 -0.192759      0.192759       1687.22       1687.41    
  13  0.283309E-01  -3.56380      -9.01604       9.01604       1689.48       1698.50    
  14  0.544265     -0.608319      -1.53898       1.53898       1693.70       1695.23    
  15  0.125708E-01  -4.37638      -11.0718       11.0718       1693.80       1704.87    
  16  0.402687E-01  -3.21218      -8.12648       8.12648       1692.45       1700.58    
  17  0.832731     -0.183044     -0.463083      0.463083       1694.87       1695.33    
  18  0.953573     -0.475391E-01 -0.120269      0.120269       1699.59       1699.71    
  19  0.967735E-01  -2.33538      -5.90827       5.90827       1693.72       1699.63    
  20  0.309578E-01  -3.47513      -8.79172       8.79172       1698.73       1707.52    
  21  0.197205      -1.62351      -4.10731       4.10731       1702.05       1706.15    
  22  0.232676      -1.45811      -3.68886       3.68886       1699.05       1702.74    
  23  0.573480     -0.556032      -1.40670       1.40670       1703.73       1705.14    
  24  0.944617     -0.569761E-01 -0.144144      0.144144       1703.48       1703.62    
  25  0.809219     -0.211686     -0.535543      0.535543       1706.12       1706.65    
  26  0.207880      -1.57080      -3.97395       3.97395       1709.56       1713.53    
  27  0.325884      -1.12121      -2.83656       2.83656       1710.77       1713.60    
  28  0.887246     -0.119633     -0.302658      0.302658       1712.74       1713.04    
  29  0.535078     -0.625343      -1.58205       1.58205       1712.12       1713.70    
  30  0.874713     -0.133859     -0.338650      0.338650       1715.15       1715.49    
  31  0.273380      -1.29689      -3.28100       3.28100       1715.93       1719.21    
  32  0.785279     -0.241717     -0.611518      0.611518       1715.65       1716.26    
  33  0.822807E-01  -2.49762      -6.31871       6.31871       1714.43       1720.75    
  34  0.267430E-01  -3.62148      -9.16197       9.16197       1716.43       1725.60    
  35  0.930838     -0.716701E-01 -0.181318      0.181318       1718.00       1718.18    
  36  0.676222     -0.391233     -0.989779      0.989779       1717.59       1718.58    
  37  0.645353     -0.437958      -1.10799       1.10799       1719.50       1720.60    
  38  0.453782     -0.790138      -1.99897       1.99897       1718.88       1720.88    
  39  0.271751      -1.30287      -3.29612       3.29612       1723.86       1727.15    
  40  0.521656     -0.650746      -1.64632       1.64632       1725.57       1727.21    
  41  0.305810      -1.18479      -2.99740       2.99740       1723.95       1726.95    
  42  0.484713E-01  -3.02678      -7.65744       7.65744       1726.28       1733.94    
  43  0.806308     -0.215289     -0.544660      0.544660       1725.18       1725.73    
  44  0.314175      -1.15781      -2.92913       2.92913       1727.18       1730.11    
  45  0.214468E-01  -3.84218      -9.72031       9.72031       1726.24       1735.96    
  46  0.813020     -0.207000     -0.523687      0.523687       1726.01       1726.53    
  47  0.540435     -0.615382      -1.55685       1.55685       1729.68       1731.23    
  48  0.971427E-01  -2.33157      -5.89864       5.89864       1729.80       1735.70    
  49  0.594395     -0.520211      -1.31608       1.31608       1731.74       1733.05    
  50  0.886621     -0.120338     -0.304442      0.304442       1730.45       1730.75    
  51  0.591229     -0.525552      -1.32959       1.32959       1733.15       1734.47    
  52  0.935909     -0.662368E-01 -0.167572      0.167572       1733.46       1733.63    
  53  0.696233     -0.362071     -0.916001      0.916001       1730.87       1731.78    
  54  0.187251      -1.67530      -4.23834       4.23834       1736.59       1740.83    
  55  0.435631     -0.830959      -2.10224       2.10224       1737.19       1739.29    
  56  0.143851      -1.93898      -4.90541       4.90541       1733.65       1738.55    
  57  0.297505      -1.21232      -3.06705       3.06705       1737.68       1740.75    
  58  0.277669      -1.28133      -3.24162       3.24162       1734.70       1737.94    
loop,thermsimp(1:2)       40  0.255640       1.39950    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    537       1734.33         68.46          1.19         39.34          0.28          0.05        109.31
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1734.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       40
neval is:      536
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       41
neval is:      536


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      536     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674423     -0.393898     -0.996521      0.996521       1636.21       1637.21    
   2  0.479548     -0.734911      -1.85925       1.85925       1648.93       1650.79    
   3  0.577498     -0.549050      -1.38904       1.38904       1667.64       1669.03    
   4  0.652957     -0.426245      -1.07835       1.07835       1678.17       1679.25    
   5  0.649111     -0.432152      -1.09330       1.09330       1675.31       1676.40    
   6  0.689953     -0.371132     -0.938926      0.938926       1680.85       1681.79    
   7  0.884625     -0.122591     -0.310144      0.310144       1676.55       1676.86    
   8  0.655607     -0.422194      -1.06811       1.06811       1676.35       1677.42    
   9  0.954363     -0.467110E-01 -0.118174      0.118174       1687.22       1687.33    
  10  0.601698     -0.507999      -1.28519       1.28519       1685.12       1686.40    
  11  0.640071     -0.446176      -1.12878       1.12878       1683.59       1684.72    
  12  0.925620     -0.772915E-01 -0.195539      0.195539       1686.22       1686.42    
  13  0.760294     -0.274051     -0.693319      0.693319       1693.70       1694.39    
  14  0.292719      -1.22854      -3.10808       3.10808       1694.87       1697.98    
  15  0.910533     -0.937251E-01 -0.237115      0.237115       1689.48       1689.72    
  16  0.650466     -0.430066      -1.08802       1.08802       1693.72       1694.80    
  17  0.351310      -1.04609      -2.64649       2.64649       1699.59       1702.23    
  18  0.997229     -0.277449E-02 -0.701917E-02  0.701917E-02   1692.45       1692.46    
  19  0.808601E-01  -2.51503      -6.36277       6.36277       1699.05       1705.42    
  20  0.420537     -0.866224      -2.19145       2.19145       1703.48       1705.67    
  21  0.122547      -2.09926      -5.31091       5.31091       1693.80       1699.11    
  22  0.943531     -0.581261E-01 -0.147053      0.147053       1703.73       1703.88    
  23  0.738977     -0.302488     -0.765263      0.765263       1702.05       1702.81    
  24  0.152624E-01  -4.18236      -10.5809       10.5809       1706.12       1716.70    
  25  0.495842     -0.701498      -1.77472       1.77472       1698.73       1700.50    
  26  0.737954     -0.303874     -0.768771      0.768771       1712.74       1713.51    
  27  0.859054     -0.151924     -0.384351      0.384351       1709.56       1709.94    
  28  0.892829     -0.113360     -0.286789      0.286789       1710.77       1711.05    
  29  0.492035E-01  -3.01179      -7.61951       7.61951       1712.12       1719.74    
  30  0.493120E-01  -3.00959      -7.61394       7.61394       1715.15       1722.77    
  31  0.366039      -1.00501      -2.54258       2.54258       1715.65       1718.19    
  32  0.658741     -0.417425      -1.05604       1.05604       1718.00       1719.05    
  33  0.453109     -0.791623      -2.00272       2.00272       1717.59       1719.59    
  34  0.370957     -0.991668      -2.50882       2.50882       1715.93       1718.44    
  35  0.758039     -0.277020     -0.700832      0.700832       1719.50       1720.20    
  36  0.799628     -0.223608     -0.565706      0.565706       1714.43       1715.00    
  37  0.934112     -0.681593E-01 -0.172436      0.172436       1718.88       1719.05    
  38  0.934175     -0.680913E-01 -0.172264      0.172264       1716.43       1716.61    
  39  0.126850      -2.06475      -5.22359       5.22359       1725.18       1730.41    
  40  0.359146      -1.02403      -2.59068       2.59068       1726.01       1728.60    
  41  0.550575E-01  -2.89938      -7.33512       7.33512       1723.95       1731.29    
  42  0.220619      -1.51132      -3.82348       3.82348       1723.86       1727.68    
  43  0.414861     -0.879812      -2.22583       2.22583       1725.57       1727.79    
  44  0.132097      -2.02422      -5.12105       5.12105       1727.18       1732.30    
  45  0.305184      -1.18684      -3.00258       3.00258       1730.45       1733.45    
  46  0.157149E-01  -4.15315      -10.5070       10.5070       1729.68       1740.18    
  47  0.286781      -1.24904      -3.15993       3.15993       1730.87       1734.03    
  48  0.637394     -0.450367      -1.13938       1.13938       1731.74       1732.88    
  49  0.663335     -0.410476      -1.03846       1.03846       1733.46       1734.50    
  50  0.242167      -1.41813      -3.58772       3.58772       1726.28       1729.87    
  51  0.479709     -0.734576      -1.85840       1.85840       1733.15       1735.00    
  52  0.709138E-01  -2.64629      -6.69484       6.69484       1729.80       1736.49    
  53  0.439412     -0.822318      -2.08038       2.08038       1726.24       1728.32    
  54  0.208330      -1.56863      -3.96848       3.96848       1734.70       1738.66    
  55  0.145758      -1.92581      -4.87209       4.87209       1733.65       1738.52    
  56  0.716956     -0.332741     -0.841800      0.841800       1737.19       1738.03    
  57  0.135014      -2.00237      -5.06579       5.06579       1737.68       1742.75    
  58  0.676740     -0.390469     -0.987845      0.987845       1734.33       1735.31    
loop,thermsimp(1:2)       41  0.996521       1.85925    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    538       1747.37         68.27          1.13         39.67          0.37          0.05        109.48
Just calling func    0   0        109.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    539       1692.56         68.16          1.13         39.36          0.56          0.05        109.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1692.56
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       41
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       42
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      538     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.723413     -0.323775     -0.819116      0.819116       1636.21       1637.03    
   2  0.185655      -1.68386      -4.26000       4.26000       1648.93       1653.19    
   3  0.957457     -0.434742E-01 -0.109985      0.109985       1667.64       1667.75    
   4  0.621017     -0.476397      -1.20523       1.20523       1675.31       1676.51    
   5  0.104462      -2.25893      -5.71487       5.71487       1676.55       1682.27    
   6  0.452993     -0.791880      -2.00337       2.00337       1676.35       1678.35    
   7  0.667800     -0.403766      -1.02149       1.02149       1678.17       1679.19    
   8  0.972732     -0.276462E-01 -0.699420E-01  0.699420E-01   1680.85       1680.92    
   9  0.260321      -1.34584      -3.40483       3.40483       1683.59       1687.00    
  10  0.763010     -0.270484     -0.684296      0.684296       1685.12       1685.80    
  11  0.641341     -0.444194      -1.12376       1.12376       1686.22       1687.35    
  12  0.878196     -0.129885     -0.328595      0.328595       1687.22       1687.54    
  13  0.854835     -0.156847     -0.396807      0.396807       1689.48       1689.88    
  14  0.714312     -0.336436     -0.851147      0.851147       1692.45       1693.30    
  15  0.701707     -0.354239     -0.896187      0.896187       1693.70       1694.59    
  16  0.889117     -0.117526     -0.297329      0.297329       1693.72       1694.01    
  17  0.141522      -1.95530      -4.94670       4.94670       1694.87       1699.82    
  18  0.189178      -1.66507      -4.21245       4.21245       1693.80       1698.01    
  19  0.622140     -0.474590      -1.20066       1.20066       1698.73       1699.93    
  20  0.130042      -2.03989      -5.16072       5.16072       1699.59       1704.75    
  21  0.577696     -0.548708      -1.38817       1.38817       1702.05       1703.43    
  22  0.682588     -0.381863     -0.966074      0.966074       1703.73       1704.70    
  23  0.835439     -0.179798     -0.454870      0.454870       1699.05       1699.51    
  24  0.540525     -0.615214      -1.55643       1.55643       1703.48       1705.03    
  25  0.782443     -0.245334     -0.620669      0.620669       1709.56       1710.18    
  26  0.905287     -0.995035E-01 -0.251733      0.251733       1710.77       1711.02    
  27  0.695897     -0.362554     -0.917224      0.917224       1712.74       1713.66    
  28  0.382345     -0.961432      -2.43232       2.43232       1714.43       1716.86    
  29  0.125280      -2.07720      -5.25511       5.25511       1716.43       1721.69    
  30  0.699640     -0.357189     -0.903652      0.903652       1706.12       1707.02    
  31  0.349624      -1.05090      -2.65866       2.65866       1715.65       1718.31    
  32  0.909174     -0.952190E-01 -0.240894      0.240894       1715.93       1716.17    
  33  0.801113     -0.221753     -0.561013      0.561013       1718.88       1719.44    
  34  0.284676      -1.25640      -3.17857       3.17857       1718.00       1721.18    
  35  0.971815     -0.285896E-01 -0.723287E-01  0.723287E-01   1717.59       1717.66    
  36  0.667566     -0.404116      -1.02237       1.02237       1712.12       1713.14    
  37  0.113695E-02  -6.77940      -17.1512       17.1512       1719.50       1736.65    
  38  0.408299     -0.895755      -2.26617       2.26617       1715.15       1717.42    
  39  0.625257E-01  -2.77218      -7.01332       7.01332       1723.86       1730.87    
  40  0.515937     -0.661771      -1.67421       1.67421       1725.57       1727.24    
  41  0.876322E-01  -2.43461      -6.15930       6.15930       1726.24       1732.40    
  42  0.995779     -0.423030E-02 -0.107022E-01  0.107022E-01   1726.01       1726.02    
  43  0.423428     -0.859371      -2.17412       2.17412       1726.28       1728.45    
  44  0.895974     -0.109844     -0.277894      0.277894       1725.18       1725.46    
  45  0.467456E-01  -3.06304      -7.74916       7.74916       1723.95       1731.70    
  46  0.331488      -1.10416      -2.79342       2.79342       1727.18       1729.97    
  47  0.422083     -0.862553      -2.18217       2.18217       1731.74       1733.92    
  48  0.630981     -0.460480      -1.16497       1.16497       1730.45       1731.61    
  49  0.953132     -0.480016E-01 -0.121439      0.121439       1730.87       1730.99    
  50  0.991799E-01  -2.31082      -5.84613       5.84613       1733.46       1739.31    
  51  0.441663     -0.817207      -2.06745       2.06745       1733.15       1735.21    
  52  0.684271     -0.379401     -0.959844      0.959844       1734.33       1735.29    
  53  0.520656     -0.652665      -1.65117       1.65117       1729.80       1731.45    
  54  0.480321     -0.733300      -1.85517       1.85517       1737.19       1739.05    
  55  0.655865     -0.421801      -1.06711       1.06711       1733.65       1734.72    
  56  0.719668     -0.328965     -0.832248      0.832248       1734.70       1735.53    
  57  0.738936     -0.302544     -0.765406      0.765406       1729.68       1730.44    
  58  0.353545      -1.03975      -2.63045       2.63045       1692.56       1695.19    
loop,thermsimp(1:2)       42  0.819116       4.26000    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540       1692.30         68.17          1.14         39.42          0.50          0.05        109.28
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1692.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       42
neval is:      539
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       43
neval is:      539


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      539     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.475948     -0.742447      -1.87831       1.87831       1636.21       1638.09    
   2  0.602827     -0.506126      -1.28044       1.28044       1648.93       1650.21    
   3  0.165820E-01  -4.09943      -10.3711       10.3711       1667.64       1678.01    
   4  0.438093     -0.825323      -2.08798       2.08798       1675.31       1677.39    
   5  0.431975     -0.839387      -2.12356       2.12356       1676.35       1678.47    
   6  0.619769E-01  -2.78099      -7.03562       7.03562       1678.17       1685.21    
   7  0.950555     -0.507092E-01 -0.128289      0.128289       1680.85       1680.98    
   8  0.467256     -0.760877      -1.92494       1.92494       1676.55       1678.48    
   9  0.759251     -0.275423     -0.696791      0.696791       1685.12       1685.82    
  10  0.606403     -0.500211      -1.26548       1.26548       1683.59       1684.86    
  11  0.472546     -0.749621      -1.89646       1.89646       1686.22       1688.12    
  12  0.340147      -1.07838      -2.72818       2.72818       1687.22       1689.94    
  13  0.625998E-01  -2.77099      -7.01032       7.01032       1689.48       1696.49    
  14  0.949579     -0.517367E-01 -0.130888      0.130888       1692.45       1692.58    
  15  0.684964     -0.378389     -0.957285      0.957285       1693.72       1694.67    
  16  0.194402      -1.63783      -4.14354       4.14354       1693.70       1697.84    
  17  0.885462     -0.121646     -0.307752      0.307752       1692.56       1692.86    
  18  0.115564      -2.15793      -5.45934       5.45934       1693.80       1699.26    
  19  0.924911     -0.780574E-01 -0.197477      0.197477       1699.05       1699.25    
  20  0.201643E-02  -6.20643      -15.7016       15.7016       1694.87       1710.57    
  21  0.264504      -1.32990      -3.36451       3.36451       1698.73       1702.09    
  22  0.241350      -1.42151      -3.59626       3.59626       1702.05       1705.64    
  23  0.195111      -1.63418      -4.13432       4.13432       1703.73       1707.86    
  24  0.991465     -0.857191E-02 -0.216860E-01  0.216860E-01   1699.59       1699.61    
  25  0.605579     -0.501570      -1.26892       1.26892       1703.48       1704.74    
  26  0.417123     -0.874375      -2.21208       2.21208       1706.12       1708.33    
  27  0.321829      -1.13373      -2.86823       2.86823       1709.56       1712.43    
  28  0.510817     -0.671745      -1.69944       1.69944       1710.77       1712.47    
  29  0.776438     -0.253038     -0.640160      0.640160       1712.12       1712.76    
  30  0.522679     -0.648787      -1.64136       1.64136       1712.74       1714.38    
  31  0.754225     -0.282065     -0.713594      0.713594       1715.93       1716.65    
  32  0.384540     -0.955707      -2.41784       2.41784       1714.43       1716.85    
  33  0.618720     -0.480103      -1.21461       1.21461       1715.15       1716.37    
  34  0.288710      -1.24233      -3.14297       3.14297       1717.59       1720.73    
  35  0.645703     -0.437415      -1.10661       1.10661       1715.65       1716.76    
  36  0.639113     -0.447673      -1.13257       1.13257       1718.88       1720.01    
  37  0.394197     -0.930906      -2.35509       2.35509       1718.00       1720.35    
  38  0.300083      -1.20370      -3.04523       3.04523       1716.43       1719.48    
  39  0.481786     -0.730255      -1.84747       1.84747       1725.18       1727.03    
  40  0.745437     -0.293784     -0.743243      0.743243       1726.01       1726.75    
  41  0.735307     -0.307467     -0.777858      0.777858       1725.57       1726.35    
  42  0.516048     -0.661555      -1.67366       1.67366       1726.28       1727.95    
  43  0.810479     -0.210130     -0.531607      0.531607       1727.18       1727.71    
  44  0.535152E-01  -2.92779      -7.40700       7.40700       1729.68       1737.08    
  45  0.828890E-01  -2.49025      -6.30008       6.30008       1723.86       1730.16    
  46  0.976655     -0.236220E-01 -0.597611E-01  0.597611E-01   1730.87       1730.93    
  47  0.528807E-01  -2.93972      -7.43718       7.43718       1729.80       1737.23    
  48  0.124161      -2.08618      -5.27781       5.27781       1730.45       1735.72    
  49  0.690691     -0.370063     -0.936222      0.936222       1723.95       1724.89    
  50  0.145451      -1.92791      -4.87742       4.87742       1726.24       1731.12    
  51  0.821159     -0.197039     -0.498487      0.498487       1731.74       1732.24    
  52  0.795471     -0.228821     -0.578894      0.578894       1733.65       1734.23    
  53  0.897922     -0.107672     -0.272399      0.272399       1733.15       1733.42    
  54  0.942954     -0.587380E-01 -0.148601      0.148601       1734.33       1734.48    
  55  0.634449     -0.454998      -1.15110       1.15110       1734.70       1735.85    
  56  0.602211     -0.507148      -1.28303       1.28303       1719.50       1720.78    
  57  0.775016     -0.254872     -0.644799      0.644799       1737.19       1737.84    
  58  0.474621     -0.745238      -1.88538       1.88538       1692.30       1694.18    
loop,thermsimp(1:2)       43   1.87831       1.28044    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    541       1668.78         68.46          1.21         39.39          0.21          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    1668.8        2.940     -3.166      3.313     -102.6     0.1251E-01
                     -0.3029E-01  1.089     -99.70      4.446     0.2131    

                       5.962     -3.195      1.540      6825.      7000.    

                      -2.014      0.000      0.000      0.000     -1.221    



                      -2.076      0.000      0.000      7000.      735.3    

                      -1.474     -3.661     -6.056     -8.381      7.378    

                      -12.71     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.5911E-01 0.7658E-01 0.6599E-01 0.1096    

                     -0.2486     0.1136     0.7745E-01 0.7040E-01-0.2382E-01



                     -0.9278    -0.6975      0.000    -0.4424E-01 0.2483    

                      0.1091     0.2194    -0.7116     0.1225     0.2136    

                      0.1363     0.9134E-01-0.4301     -1.569      7000.    



                      -1.239     -1.227     -2.142     -1.982    -0.3807    

                     -0.3252      9.266      8.488    -0.1720E+05 -5.491    

                     -0.4232     -2.277      8.707      9.226    -0.1969E+05



                      -6.000     0.4614     0.1739      8.910      9.092    

                     -0.1944E+05 -6.000     0.1099    -0.2297      9.770    

                       8.894    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1668.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       43
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       44
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      540     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.952211     -0.489682E-01 -0.123884      0.123884       1636.21       1636.34    
   2  0.866029     -0.143836     -0.363891      0.363891       1648.93       1649.29    
   3  0.411761     -0.887312      -2.24481       2.24481       1675.31       1677.55    
   4  0.699906     -0.356809     -0.902690      0.902690       1667.64       1668.54    
   5  0.499470     -0.694207      -1.75627       1.75627       1676.35       1678.10    
   6  0.565983     -0.569191      -1.43999       1.43999       1676.55       1677.99    
   7  0.493159     -0.706923      -1.78844       1.78844       1680.85       1682.64    
   8  0.569007     -0.563863      -1.42651       1.42651       1683.59       1685.02    
   9  0.650217     -0.430449      -1.08899       1.08899       1678.17       1679.26    
  10  0.961034E-01  -2.34233      -5.92585       5.92585       1685.12       1691.04    
  11  0.689147     -0.372300     -0.941881      0.941881       1686.22       1687.17    
  12  0.607344     -0.498660      -1.26156       1.26156       1687.22       1688.48    
  13  0.192849E-01  -3.94843      -9.98912       9.98912       1692.45       1702.44    
  14  0.731745     -0.312323     -0.790145      0.790145       1692.56       1693.35    
  15  0.863954     -0.146236     -0.369963      0.369963       1692.30       1692.67    
  16  0.499353     -0.694441      -1.75686       1.75686       1693.72       1695.47    
  17  0.835822     -0.179340     -0.453710      0.453710       1689.48       1689.94    
  18  0.515243     -0.663117      -1.67762       1.67762       1693.70       1695.37    
  19  0.284294      -1.25775      -3.18196       3.18196       1699.05       1702.23    
  20  0.699552     -0.357315     -0.903969      0.903969       1693.80       1694.71    
  21  0.306316      -1.18314      -2.99322       2.99322       1699.59       1702.58    
  22  0.917869     -0.857004E-01 -0.216813      0.216813       1698.73       1698.95    
  23  0.328908      -1.11198      -2.81319       2.81319       1703.48       1706.29    
  24  0.850593     -0.161822     -0.409393      0.409393       1702.05       1702.46    
  25  0.620502E-01  -2.77981      -7.03263       7.03263       1703.73       1710.76    
  26  0.583163     -0.539288      -1.36434       1.36434       1706.12       1707.48    
  27  0.394975     -0.928934      -2.35011       2.35011       1694.87       1697.22    
  28  0.601832     -0.507776      -1.28462       1.28462       1709.56       1710.84    
  29  0.955083E-01  -2.34854      -5.94157       5.94157       1710.77       1716.71    
  30  0.380058     -0.967430      -2.44750       2.44750       1712.12       1714.57    
  31  0.785111     -0.241930     -0.612058      0.612058       1712.74       1713.35    
  32  0.290774      -1.23521      -3.12495       3.12495       1715.15       1718.28    
  33  0.104031E-01  -4.56565      -11.5506       11.5506       1715.93       1727.48    
  34  0.323461      -1.12868      -2.85543       2.85543       1715.65       1718.50    
  35  0.893855     -0.112211     -0.283883      0.283883       1714.43       1714.71    
  36  0.826277     -0.190825     -0.482767      0.482767       1716.43       1716.92    
  37  0.808540     -0.212526     -0.537668      0.537668       1718.88       1719.42    
  38  0.597949     -0.514250      -1.30100       1.30100       1718.00       1719.30    
  39  0.510806     -0.671765      -1.69950       1.69950       1717.59       1719.29    
  40  0.346778      -1.05907      -2.67934       2.67934       1719.50       1722.18    
  41  0.835924     -0.179217     -0.453401      0.453401       1723.95       1724.41    
  42  0.449041     -0.800642      -2.02554       2.02554       1725.57       1727.59    
  43  0.951740     -0.494638E-01 -0.125138      0.125138       1726.01       1726.13    
  44  0.788207     -0.237994     -0.602101      0.602101       1725.18       1725.79    
  45  0.899830     -0.105549     -0.267028      0.267028       1727.18       1727.45    
  46  0.326955      -1.11793      -2.82825       2.82825       1726.28       1729.11    
  47  0.882768     -0.124693     -0.315460      0.315460       1723.86       1724.17    
  48  0.285151      -1.25474      -3.17436       3.17436       1730.87       1734.04    
  49  0.465811     -0.763976      -1.93278       1.93278       1726.24       1728.18    
  50  0.528398     -0.637906      -1.61384       1.61384       1731.74       1733.35    
  51  0.402439     -0.910212      -2.30274       2.30274       1733.15       1735.45    
  52  0.516797     -0.660106      -1.67000       1.67000       1733.65       1735.32    
  53  0.291612      -1.23233      -3.11767       3.11767       1734.33       1737.44    
  54  0.710526E-01  -2.64433      -6.68989       6.68989       1730.45       1737.14    
  55  0.586566     -0.533470      -1.34962       1.34962       1734.70       1736.05    
  56  0.208726      -1.56673      -3.96368       3.96368       1729.68       1733.64    
  57  0.105633      -2.24778      -5.68665       5.68665       1729.80       1735.48    
  58  0.487086     -0.719315      -1.81979       1.81979       1668.78       1670.60    
loop,thermsimp(1:2)       44  0.123884      0.363891    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542       1736.31         68.16          1.12         39.32          0.62          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1736.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       44
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       45
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      541     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.376954     -0.975632      -2.46825       2.46825       1636.21       1638.68    
   2  0.970379     -0.300689E-01 -0.760712E-01  0.760712E-01   1648.93       1649.00    
   3  0.739910     -0.301226     -0.762071      0.762071       1667.64       1668.40    
   4  0.489862     -0.713632      -1.80541       1.80541       1668.78       1670.59    
   5  0.379134     -0.969864      -2.45366       2.45366       1675.31       1677.76    
   6  0.798443     -0.225092     -0.569459      0.569459       1676.55       1677.12    
   7  0.183696      -1.69447      -4.28684       4.28684       1676.35       1680.64    
   8  0.860311E-01  -2.45305      -6.20595       6.20595       1678.17       1684.38    
   9  0.604626     -0.503146      -1.27291       1.27291       1680.85       1682.13    
  10  0.812784     -0.207290     -0.524422      0.524422       1683.59       1684.12    
  11  0.364990      -1.00789      -2.54985       2.54985       1686.22       1688.77    
  12  0.262253      -1.33845      -3.38613       3.38613       1687.22       1690.60    
  13  0.135773      -1.99677      -5.05161       5.05161       1689.48       1694.53    
  14  0.700444     -0.356041     -0.900747      0.900747       1685.12       1686.02    
  15  0.638152     -0.449179      -1.13638       1.13638       1692.30       1693.43    
  16  0.209521      -1.56293      -3.95405       3.95405       1692.56       1696.51    
  17  0.512323     -0.668800      -1.69199       1.69199       1693.80       1695.49    
  18  0.695748E-01  -2.66535      -6.74306       6.74306       1693.70       1700.44    
  19  0.903499     -0.101480     -0.256735      0.256735       1693.72       1693.97    
  20  0.374772     -0.981437      -2.48293       2.48293       1694.87       1697.35    
  21  0.505287     -0.682628      -1.72698       1.72698       1698.73       1700.46    
  22  0.738930     -0.302553     -0.765426      0.765426       1699.05       1699.82    
  23  0.210129      -1.56004      -3.94673       3.94673       1692.45       1696.40    
  24  0.438378     -0.824674      -2.08634       2.08634       1702.05       1704.13    
  25  0.180862      -1.71002      -4.32617       4.32617       1699.59       1703.91    
  26  0.784296E-01  -2.54555      -6.43998       6.43998       1703.48       1709.92    
  27  0.164311      -1.80600      -4.56898       4.56898       1706.12       1710.68    
  28  0.481806     -0.730213      -1.84736       1.84736       1703.73       1705.58    
  29  0.278624      -1.27789      -3.23293       3.23293       1709.56       1712.79    
  30  0.206818      -1.57592      -3.98690       3.98690       1712.74       1716.73    
  31  0.359834      -1.02211      -2.58584       2.58584       1712.12       1714.71    
  32  0.304083      -1.19045      -3.01173       3.01173       1714.43       1717.44    
  33  0.592687E-01  -2.82567      -7.14866       7.14866       1710.77       1717.91    
  34  0.422819     -0.860810      -2.17776       2.17776       1716.43       1718.61    
  35  0.575712     -0.552148      -1.39688       1.39688       1715.15       1716.55    
  36  0.713361     -0.337767     -0.854515      0.854515       1715.65       1716.50    
  37  0.414737     -0.880111      -2.22659       2.22659       1717.59       1719.81    
  38  0.595127     -0.518981      -1.31297       1.31297       1718.00       1719.31    
  39  0.528961     -0.636840      -1.61114       1.61114       1718.88       1720.49    
  40  0.330842E-01  -3.40870      -8.62365       8.62365       1719.50       1728.12    
  41  0.196030      -1.62949      -4.12243       4.12243       1723.86       1727.98    
  42  0.599669     -0.511377      -1.29373       1.29373       1723.95       1725.25    
  43  0.204430      -1.58753      -4.01629       4.01629       1725.18       1729.20    
  44  0.567184E-01  -2.86966      -7.25993       7.25993       1726.01       1733.27    
  45  0.965619     -0.349858E-01 -0.885103E-01  0.885103E-01   1727.18       1727.27    
  46  0.679347E-01  -2.68921      -6.80341       6.80341       1715.93       1722.74    
  47  0.539047     -0.617952      -1.56336       1.56336       1725.57       1727.13    
  48  0.898468     -0.107064     -0.270861      0.270861       1726.24       1726.51    
  49  0.212143      -1.55049      -3.92258       3.92258       1726.28       1730.20    
  50  0.161339      -1.82425      -4.61515       4.61515       1731.74       1736.35    
  51  0.663350     -0.410453      -1.03840       1.03840       1729.68       1730.72    
  52  0.426901     -0.851203      -2.15345       2.15345       1730.87       1733.02    
  53  0.812732     -0.207354     -0.524583      0.524583       1733.65       1734.17    
  54  0.735441     -0.307285     -0.777398      0.777398       1733.15       1733.92    
  55  0.442393     -0.815556      -2.06327       2.06327       1729.80       1731.86    
  56  0.181350      -1.70733      -4.31936       4.31936       1734.70       1739.02    
  57  0.735591     -0.307081     -0.776882      0.776882       1730.45       1731.22    
  58  0.452666     -0.792601      -2.00520       2.00520       1736.31       1738.31    
loop,thermsimp(1:2)       45   2.46825      0.760712E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543       1736.68         68.15          1.11         39.42          0.59          0.05        109.33
Just calling func    0   0        109.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1736.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       45
neval is:      542
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       46
neval is:      542


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      542     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411150     -0.888798      -2.24857       2.24857       1636.21       1638.46    
   2  0.587516     -0.531852      -1.34553       1.34553       1648.93       1650.27    
   3  0.244478      -1.40863      -3.56369       3.56369       1667.64       1671.20    
   4  0.668247     -0.403097      -1.01979       1.01979       1668.78       1669.80    
   5  0.364677      -1.00874      -2.55202       2.55202       1676.55       1679.11    
   6  0.953446     -0.476724E-01 -0.120606      0.120606       1675.31       1675.43    
   7  0.416430E-01  -3.17862      -8.04158       8.04158       1676.35       1684.39    
   8  0.899897     -0.105475     -0.266841      0.266841       1680.85       1681.12    
   9  0.553517     -0.591462      -1.49634       1.49634       1683.59       1685.09    
  10  0.465198     -0.765293      -1.93611       1.93611       1678.17       1680.11    
  11  0.109571      -2.21119      -5.59407       5.59407       1685.12       1690.71    
  12  0.905990     -0.987273E-01 -0.249770      0.249770       1686.22       1686.47    
  13  0.734904     -0.308015     -0.779246      0.779246       1687.22       1687.99    
  14  0.761233     -0.272816     -0.690196      0.690196       1692.30       1692.99    
  15  0.530098     -0.634694      -1.60571       1.60571       1693.72       1695.32    
  16  0.120202      -2.11858      -5.35978       5.35978       1689.48       1694.84    
  17  0.923613     -0.794620E-01 -0.201031      0.201031       1693.80       1694.00    
  18  0.527375     -0.639843      -1.61874       1.61874       1692.45       1694.07    
  19  0.301711E-01  -3.50087      -8.85683       8.85683       1692.56       1701.41    
  20  0.943751     -0.578930E-01 -0.146463      0.146463       1694.87       1695.02    
  21  0.852516     -0.159564     -0.403680      0.403680       1699.05       1699.46    
  22  0.689783     -0.371378     -0.939547      0.939547       1693.70       1694.64    
  23  0.679926     -0.385771     -0.975961      0.975961       1698.73       1699.71    
  24  0.492544     -0.708171      -1.79160       1.79160       1699.59       1701.38    
  25  0.677731     -0.389005     -0.984142      0.984142       1702.05       1703.03    
  26  0.945293     -0.562607E-01 -0.142334      0.142334       1703.73       1703.87    
  27  0.926517     -0.763224E-01 -0.193088      0.193088       1703.48       1703.67    
  28  0.188178      -1.67037      -4.22585       4.22585       1706.12       1710.34    
  29  0.714898     -0.335615     -0.849072      0.849072       1709.56       1710.41    
  30  0.533411     -0.628463      -1.58994       1.58994       1712.12       1713.71    
  31  0.957718     -0.432023E-01 -0.109297      0.109297       1715.65       1715.76    
  32  0.385252     -0.953858      -2.41316       2.41316       1715.15       1717.57    
  33  0.950314     -0.509632E-01 -0.128932      0.128932       1712.74       1712.87    
  34  0.342902      -1.07031      -2.70778       2.70778       1714.43       1717.14    
  35  0.591435     -0.525204      -1.32871       1.32871       1710.77       1712.09    
  36  0.303703      -1.19170      -3.01489       3.01489       1716.43       1719.45    
  37  0.588332     -0.530464      -1.34202       1.34202       1718.00       1719.34    
  38  0.358881      -1.02477      -2.59255       2.59255       1717.59       1720.18    
  39  0.394022     -0.931349      -2.35622       2.35622       1718.88       1721.23    
  40  0.250643      -1.38373      -3.50068       3.50068       1715.93       1719.43    
  41  0.513924     -0.665680      -1.68410       1.68410       1723.95       1725.64    
  42  0.585127     -0.535927      -1.35584       1.35584       1726.24       1727.60    
  43  0.857115     -0.154183     -0.390066      0.390066       1725.57       1725.96    
  44  0.112453      -2.18522      -5.52837       5.52837       1727.18       1732.71    
  45  0.371545     -0.990085      -2.50481       2.50481       1723.86       1726.36    
  46  0.687662     -0.374457     -0.947338      0.947338       1719.50       1720.44    
  47  0.668495     -0.402726      -1.01885       1.01885       1725.18       1726.20    
  48  0.826390     -0.190688     -0.482421      0.482421       1726.28       1726.76    
  49  0.966739     -0.338270E-01 -0.855788E-01  0.855788E-01   1729.68       1729.76    
  50  0.398653     -0.919664      -2.32665       2.32665       1730.45       1732.77    
  51  0.452270E-01  -3.09606      -7.83271       7.83271       1729.80       1737.63    
  52  0.663631     -0.410029      -1.03733       1.03733       1730.87       1731.91    
  53  0.634192     -0.455403      -1.15212       1.15212       1726.01       1727.16    
  54  0.506407     -0.680414      -1.72138       1.72138       1733.15       1734.87    
  55  0.797944     -0.225717     -0.571040      0.571040       1733.65       1734.22    
  56  0.738742     -0.302806     -0.766068      0.766068       1731.74       1732.50    
  57  0.485498     -0.722580      -1.82805       1.82805       1736.31       1738.14    
  58  0.862862     -0.147501     -0.373161      0.373161       1736.68       1737.05    
loop,thermsimp(1:2)       46   2.24857       1.34553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    544       1731.62         68.22          1.12         39.43          0.60          0.05        109.42
Just calling func    0   0        109.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1731.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       46
neval is:      543
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       47
neval is:      543


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      543     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.150109      -1.89639      -4.79767       4.79767       1636.21       1641.01    
   2  0.239258      -1.43021      -3.61829       3.61829       1648.93       1652.55    
   3  0.668620     -0.402540      -1.01838       1.01838       1668.78       1669.80    
   4  0.966081     -0.345073E-01 -0.872999E-01  0.872999E-01   1667.64       1667.72    
   5  0.923150     -0.799638E-01 -0.202300      0.202300       1675.31       1675.51    
   6  0.341268      -1.07509      -2.71986       2.71986       1676.55       1679.27    
   7  0.810762     -0.209780     -0.530723      0.530723       1678.17       1678.70    
   8  0.936610     -0.654881E-01 -0.165678      0.165678       1680.85       1681.02    
   9  0.841905     -0.172088     -0.435366      0.435366       1676.35       1676.78    
  10  0.289300      -1.24029      -3.13781       3.13781       1683.59       1686.73    
  11  0.384787E-01  -3.25765      -8.24151       8.24151       1686.22       1694.47    
  12  0.633639E-01  -2.75886      -6.97963       6.97963       1687.22       1694.20    
  13  0.574893     -0.553572      -1.40048       1.40048       1685.12       1686.52    
  14  0.983093E-01  -2.31964      -5.86844       5.86844       1692.30       1698.17    
  15  0.224987      -1.49171      -3.77388       3.77388       1693.80       1697.58    
  16  0.805566     -0.216210     -0.546989      0.546989       1692.45       1693.00    
  17  0.431600     -0.840255      -2.12576       2.12576       1693.70       1695.82    
  18  0.495594     -0.701997      -1.77598       1.77598       1689.48       1691.26    
  19  0.127775      -2.05749      -5.20523       5.20523       1694.87       1700.08    
  20  0.146938      -1.91775      -4.85170       4.85170       1693.72       1698.57    
  21  0.538937     -0.618156      -1.56387       1.56387       1699.05       1700.62    
  22  0.811785     -0.208520     -0.527534      0.527534       1698.73       1699.26    
  23  0.224452      -1.49409      -3.77990       3.77990       1699.59       1703.37    
  24  0.739023     -0.302426     -0.765106      0.765106       1692.56       1693.32    
  25  0.608338     -0.497025      -1.25742       1.25742       1702.05       1703.30    
  26  0.818725     -0.200007     -0.505998      0.505998       1703.48       1703.98    
  27  0.434351     -0.833902      -2.10968       2.10968       1703.73       1705.84    
  28  0.874879     -0.133669     -0.338170      0.338170       1706.12       1706.45    
  29  0.478311     -0.737495      -1.86579       1.86579       1709.56       1711.43    
  30  0.420407     -0.866533      -2.19224       2.19224       1710.77       1712.96    
  31  0.803536     -0.218734     -0.553373      0.553373       1712.74       1713.29    
  32  0.375583E-01  -3.28186      -8.30276       8.30276       1712.12       1720.42    
  33  0.520223     -0.653499      -1.65328       1.65328       1715.65       1717.30    
  34  0.902726     -0.102336     -0.258899      0.258899       1714.43       1714.69    
  35  0.510519     -0.672327      -1.70092       1.70092       1715.15       1716.85    
  36  0.896421     -0.109346     -0.276633      0.276633       1718.00       1718.27    
  37  0.478401     -0.737305      -1.86530       1.86530       1715.93       1717.80    
  38  0.440189     -0.820550      -2.07591       2.07591       1716.43       1718.51    
  39  0.187305      -1.67502      -4.23761       4.23761       1717.59       1721.83    
  40  0.997827     -0.217544E-02 -0.550364E-02  0.550364E-02   1719.50       1719.50    
  41  0.453294     -0.791215      -2.00169       2.00169       1718.88       1720.88    
  42  0.143844E-01  -4.24161      -10.7308       10.7308       1723.95       1734.69    
  43  0.735772     -0.306835     -0.776260      0.776260       1725.57       1726.34    
  44  0.184631E-01  -3.99198      -10.0993       10.0993       1725.18       1735.28    
  45  0.217662      -1.52481      -3.85761       3.85761       1723.86       1727.72    
  46  0.461473     -0.773332      -1.95645       1.95645       1726.28       1728.24    
  47  0.669168     -0.401720      -1.01631       1.01631       1726.01       1727.02    
  48  0.436785     -0.828315      -2.09555       2.09555       1726.24       1728.34    
  49  0.518540     -0.656738      -1.66148       1.66148       1729.68       1731.34    
  50  0.780680     -0.247590     -0.626376      0.626376       1730.87       1731.49    
  51  0.568391E-01  -2.86753      -7.25455       7.25455       1731.74       1738.99    
  52  0.794275     -0.230325     -0.582699      0.582699       1727.18       1727.76    
  53  0.724306     -0.322542     -0.815997      0.815997       1730.45       1731.26    
  54  0.935171     -0.670255E-01 -0.169568      0.169568       1733.65       1733.82    
  55  0.451996     -0.794081      -2.00894       2.00894       1733.15       1735.15    
  56  0.297965      -1.21078      -3.06314       3.06314       1736.68       1739.74    
  57  0.974843     -0.254791E-01 -0.644596E-01  0.644596E-01   1729.80       1729.86    
  58  0.199050      -1.61420      -4.08375       4.08375       1731.62       1735.70    
loop,thermsimp(1:2)       47   4.79767       3.61829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    545       1733.21         68.15          1.11         39.57          0.38          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1733.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       47
neval is:      544
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       48
neval is:      544


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      544     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.428946     -0.846425      -2.14137       2.14137       1636.21       1638.36    
   2  0.178225      -1.72471      -4.36333       4.36333       1648.93       1653.29    
   3  0.309460      -1.17293      -2.96738       2.96738       1667.64       1670.60    
   4  0.769202     -0.262402     -0.663850      0.663850       1668.78       1669.45    
   5  0.867155     -0.142538     -0.360606      0.360606       1675.31       1675.67    
   6  0.842618     -0.171242     -0.433224      0.433224       1676.35       1676.78    
   7  0.887101     -0.119796     -0.303073      0.303073       1678.17       1678.47    
   8  0.293963E-01  -3.52689      -8.92266       8.92266       1676.55       1685.48    
   9  0.388864     -0.944525      -2.38955       2.38955       1680.85       1683.24    
  10  0.841345E-01  -2.47534      -6.26235       6.26235       1685.12       1691.38    
  11  0.764016     -0.269167     -0.680964      0.680964       1683.59       1684.28    
  12  0.104062      -2.26277      -5.72457       5.72457       1689.48       1695.21    
  13  0.454454     -0.788658      -1.99522       1.99522       1692.45       1694.45    
  14  0.655983     -0.421620      -1.06665       1.06665       1692.56       1693.62    
  15  0.899303     -0.106136     -0.268512      0.268512       1687.22       1687.48    
  16  0.566529     -0.568226      -1.43755       1.43755       1686.22       1687.66    
  17  0.391578     -0.937570      -2.37196       2.37196       1693.70       1696.07    
  18  0.743184     -0.296811     -0.750902      0.750902       1693.80       1694.55    
  19  0.811693     -0.208633     -0.527820      0.527820       1692.30       1692.83    
  20  0.608274     -0.497129      -1.25768       1.25768       1693.72       1694.97    
  21  0.786531     -0.240123     -0.607487      0.607487       1698.73       1699.34    
  22  0.257200      -1.35790      -3.43535       3.43535       1694.87       1698.31    
  23  0.369774     -0.994862      -2.51690       2.51690       1699.05       1701.57    
  24  0.955329     -0.456994E-01 -0.115615      0.115615       1702.05       1702.16    
  25  0.428185     -0.848200      -2.14586       2.14586       1699.59       1701.73    
  26  0.969522     -0.309523E-01 -0.783060E-01  0.783060E-01   1703.48       1703.55    
  27  0.457112E-01  -3.08541      -7.80577       7.80577       1703.73       1711.54    
  28  0.126346      -2.06873      -5.23367       5.23367       1706.12       1711.35    
  29  0.979821     -0.203853E-01 -0.515727E-01  0.515727E-01   1709.56       1709.61    
  30  0.249987      -1.38635      -3.50731       3.50731       1710.77       1714.27    
  31  0.100726      -2.29535      -5.80700       5.80700       1712.74       1718.55    
  32  0.563310     -0.573925      -1.45197       1.45197       1714.43       1715.88    
  33  0.601320     -0.508628      -1.28677       1.28677       1715.15       1716.44    
  34  0.850177E-01  -2.46490      -6.23593       6.23593       1715.65       1721.89    
  35  0.176521      -1.73432      -4.38764       4.38764       1715.93       1720.32    
  36  0.254061      -1.37018      -3.46642       3.46642       1718.00       1721.46    
  37  0.540097     -0.616006      -1.55843       1.55843       1716.43       1717.99    
  38  0.983165E-01  -2.31956      -5.86825       5.86825       1719.50       1725.37    
  39  0.729520     -0.315369     -0.797851      0.797851       1712.12       1712.92    
  40  0.847608E-01  -2.46792      -6.24359       6.24359       1718.88       1725.12    
  41  0.791981     -0.233218     -0.590017      0.590017       1717.59       1718.18    
  42  0.117343E-01  -4.44524      -11.2460       11.2460       1725.57       1736.81    
  43  0.469135     -0.756864      -1.91479       1.91479       1726.01       1727.92    
  44  0.221703E-01  -3.80900      -9.63637       9.63637       1723.86       1733.49    
  45  0.234879      -1.44868      -3.66502       3.66502       1727.18       1730.85    
  46  0.854627     -0.157091     -0.397423      0.397423       1726.28       1726.68    
  47  0.664467E-01  -2.71135      -6.85944       6.85944       1726.24       1733.10    
  48  0.209505      -1.56301      -3.95424       3.95424       1729.80       1733.75    
  49  0.507833     -0.677603      -1.71426       1.71426       1730.45       1732.16    
  50  0.987418     -0.126621E-01 -0.320337E-01  0.320337E-01   1729.68       1729.71    
  51  0.818705E-01  -2.50262      -6.33136       6.33136       1730.87       1737.20    
  52  0.112517      -2.18465      -5.52694       5.52694       1733.65       1739.18    
  53  0.475812E-01  -3.04532      -7.70433       7.70433       1723.95       1731.66    
  54  0.538665     -0.618662      -1.56515       1.56515       1733.15       1734.71    
  55  0.236754      -1.44073      -3.64490       3.64490       1725.18       1728.83    
  56  0.723834     -0.323194     -0.817646      0.817646       1731.62       1732.44    
  57  0.903389E-01  -2.40419      -6.08234       6.08234       1731.74       1737.82    
  58  0.469316     -0.756479      -1.91381       1.91381       1733.21       1735.13    
loop,thermsimp(1:2)       48   2.14137       4.36333    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    546       1715.79         68.18          1.10         39.48          0.58          0.05        109.39
Just calling func    0   0        109.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1715.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       48
neval is:      545
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       49
neval is:      545


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      545     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822318     -0.195628     -0.494919      0.494919       1636.21       1636.71    
   2  0.715748     -0.334427     -0.846066      0.846066       1648.93       1649.77    
   3  0.155171      -1.86323      -4.71377       4.71377       1668.78       1673.50    
   4  0.248285      -1.39318      -3.52459       3.52459       1667.64       1671.16    
   5  0.893479E-01  -2.41522      -6.11025       6.11025       1675.31       1681.42    
   6  0.807784     -0.213461     -0.540034      0.540034       1676.35       1676.89    
   7  0.765394     -0.267364     -0.676404      0.676404       1678.17       1678.85    
   8  0.465295     -0.765084      -1.93558       1.93558       1680.85       1682.79    
   9  0.310822      -1.16853      -2.95627       2.95627       1683.59       1686.55    
  10  0.405006     -0.903853      -2.28665       2.28665       1676.55       1678.84    
  11  0.230891      -1.46581      -3.70835       3.70835       1687.22       1690.92    
  12  0.952479     -0.486868E-01 -0.123172      0.123172       1686.22       1686.35    
  13  0.608237     -0.497191      -1.25784       1.25784       1685.12       1686.38    
  14  0.870899     -0.138230     -0.349707      0.349707       1692.30       1692.65    
  15  0.175493      -1.74016      -4.40242       4.40242       1692.56       1696.96    
  16  0.529821     -0.635216      -1.60703       1.60703       1692.45       1694.06    
  17  0.596933     -0.515951      -1.30530       1.30530       1693.80       1695.11    
  18  0.380761     -0.965584      -2.44283       2.44283       1693.72       1696.16    
  19  0.572545     -0.557664      -1.41083       1.41083       1689.48       1690.89    
  20  0.503826     -0.685525      -1.73431       1.73431       1693.70       1695.43    
  21  0.712520     -0.338948     -0.857503      0.857503       1694.87       1695.73    
  22  0.455917     -0.785445      -1.98709       1.98709       1698.73       1700.72    
  23  0.546601     -0.604037      -1.52815       1.52815       1699.05       1700.58    
  24  0.780368     -0.247990     -0.627388      0.627388       1699.59       1700.21    
  25  0.360382      -1.02059      -2.58199       2.58199       1702.05       1704.63    
  26  0.365688      -1.00598      -2.54501       2.54501       1703.48       1706.02    
  27  0.471917     -0.750951      -1.89983       1.89983       1709.56       1711.46    
  28  0.774681     -0.255304     -0.645893      0.645893       1706.12       1706.76    
  29  0.514822     -0.663934      -1.67968       1.67968       1703.73       1705.41    
  30  0.936706     -0.653859E-01 -0.165420      0.165420       1712.12       1712.29    
  31  0.611289     -0.492185      -1.24518       1.24518       1710.77       1712.01    
  32  0.138276      -1.97851      -5.00541       5.00541       1714.43       1719.44    
  33  0.547999E-01  -2.90407      -7.34698       7.34698       1715.15       1722.50    
  34  0.739054E-01  -2.60497      -6.59030       6.59030       1716.43       1723.02    
  35  0.230637E-01  -3.76949      -9.53643       9.53643       1717.59       1727.12    
  36  0.294564E-01  -3.52484      -8.91749       8.91749       1712.74       1721.66    
  37  0.331008      -1.10561      -2.79709       2.79709       1715.93       1718.73    
  38  0.656803     -0.420372      -1.06350       1.06350       1718.00       1719.06    
  39  0.869431     -0.139917     -0.353975      0.353975       1715.65       1716.00    
  40  0.783501     -0.243983     -0.617250      0.617250       1718.88       1719.50    
  41  0.737192     -0.304907     -0.771383      0.771383       1719.50       1720.27    
  42  0.326415      -1.11959      -2.83244       2.83244       1726.28       1729.11    
  43  0.430213     -0.843476      -2.13391       2.13391       1726.01       1728.14    
  44  0.396582     -0.924872      -2.33983       2.33983       1725.18       1727.52    
  45  0.368807     -0.997482      -2.52352       2.52352       1729.68       1732.20    
  46  0.922518     -0.806483E-01 -0.204032      0.204032       1727.18       1727.39    
  47  0.106607      -2.23861      -5.66345       5.66345       1723.95       1729.62    
  48  0.389788     -0.942153      -2.38355       2.38355       1730.45       1732.83    
  49  0.521480     -0.651085      -1.64718       1.64718       1731.62       1733.27    
  50  0.275785      -1.28813      -3.25884       3.25884       1726.24       1729.50    
  51  0.973600     -0.267545E-01 -0.676861E-01  0.676861E-01   1723.86       1723.93    
  52  0.270717      -1.30668      -3.30576       3.30576       1729.80       1733.10    
  53  0.271460      -1.30394      -3.29883       3.29883       1733.15       1736.44    
  54  0.740973     -0.299791     -0.758439      0.758439       1733.21       1733.97    
  55  0.567806     -0.565975      -1.43186       1.43186       1725.57       1727.00    
  56  0.959778     -0.410536E-01 -0.103861      0.103861       1730.87       1730.97    
  57  0.186384      -1.67994      -4.25008       4.25008       1731.74       1735.99    
  58  0.618696     -0.480141      -1.21471       1.21471       1715.79       1717.01    
loop,thermsimp(1:2)       49  0.494919      0.846066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    547       1688.12         68.18          1.10         39.29          0.75          0.05        109.37
Just calling func    0   0        109.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1688.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       49
neval is:      546
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       50
neval is:      546


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      546     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255294      -1.36534      -3.45416       3.45416       1636.21       1639.67    
   2  0.413516     -0.883059      -2.23405       2.23405       1648.93       1651.16    
   3  0.223595      -1.49792      -3.78958       3.78958       1667.64       1671.43    
   4  0.714947     -0.335546     -0.848897      0.848897       1668.78       1669.63    
   5  0.331136      -1.10523      -2.79611       2.79611       1676.35       1679.14    
   6  0.910877     -0.933475E-01 -0.236159      0.236159       1676.55       1676.79    
   7  0.576816E-01  -2.85282      -7.21733       7.21733       1678.17       1685.39    
   8  0.130224      -2.03850      -5.15718       5.15718       1675.31       1680.46    
   9  0.739903     -0.301236     -0.762097      0.762097       1680.85       1681.62    
  10  0.930449     -0.720877E-01 -0.182374      0.182374       1686.22       1686.41    
  11  0.471320     -0.752217      -1.90303       1.90303       1685.12       1687.02    
  12  0.427577     -0.849620      -2.14945       2.14945       1683.59       1685.74    
  13  0.519295     -0.655284      -1.65780       1.65780       1689.48       1691.14    
  14  0.157743      -1.84679      -4.67217       4.67217       1687.22       1691.89    
  15  0.408052     -0.896360      -2.26770       2.26770       1692.30       1694.57    
  16  0.784179     -0.243118     -0.615063      0.615063       1692.45       1693.07    
  17  0.932934     -0.694213E-01 -0.175629      0.175629       1693.80       1693.98    
  18  0.602319     -0.506968      -1.28258       1.28258       1693.70       1694.98    
  19  0.792109     -0.233056     -0.589608      0.589608       1694.87       1695.46    
  20  0.916935     -0.867189E-01 -0.219390      0.219390       1693.72       1693.94    
  21  0.245817      -1.40317      -3.54987       3.54987       1692.56       1696.11    
  22  0.722474     -0.325074     -0.822403      0.822403       1699.59       1700.41    
  23  0.448797     -0.801185      -2.02691       2.02691       1699.05       1701.08    
  24  0.147822      -1.91175      -4.83652       4.83652       1698.73       1703.57    
  25  0.826441     -0.190627     -0.482267      0.482267       1702.05       1702.53    
  26  0.136181      -1.99377      -5.04403       5.04403       1703.73       1708.77    
  27  0.555081     -0.588641      -1.48920       1.48920       1703.48       1704.96    
  28  0.421604     -0.863690      -2.18504       2.18504       1706.12       1708.30    
  29  0.934992     -0.672172E-01 -0.170053      0.170053       1709.56       1709.73    
  30  0.917081     -0.865597E-01 -0.218987      0.218987       1710.77       1710.99    
  31  0.211295      -1.55450      -3.93272       3.93272       1712.12       1716.05    
  32  0.336858      -1.08809      -2.75276       2.75276       1715.65       1718.40    
  33  0.210286      -1.55929      -3.94483       3.94483       1715.79       1719.74    
  34  0.575355     -0.552768      -1.39844       1.39844       1715.93       1717.33    
  35  0.822963     -0.194844     -0.492934      0.492934       1718.00       1718.49    
  36  0.510226E-01  -2.97549      -7.52767       7.52767       1714.43       1721.96    
  37  0.829304     -0.187169     -0.473518      0.473518       1718.88       1719.35    
  38  0.297206      -1.21333      -3.06960       3.06960       1719.50       1722.57    
  39  0.733070     -0.310514     -0.785568      0.785568       1712.74       1713.53    
  40  0.545801     -0.605502      -1.53186       1.53186       1715.15       1716.68    
  41  0.990988     -0.905277E-02 -0.229026E-01  0.229026E-01   1716.43       1716.46    
  42  0.671953     -0.397567      -1.00580       1.00580       1723.86       1724.86    
  43  0.594649     -0.519784      -1.31500       1.31500       1725.57       1726.88    
  44  0.698796     -0.358397     -0.906706      0.906706       1717.59       1718.49    
  45  0.703020     -0.352370     -0.891459      0.891459       1727.18       1728.07    
  46  0.634434     -0.455022      -1.15116       1.15116       1725.18       1726.34    
  47  0.691237     -0.369272     -0.934219      0.934219       1726.01       1726.94    
  48  0.902402     -0.102696     -0.259809      0.259809       1726.28       1726.54    
  49  0.433997     -0.834717      -2.11175       2.11175       1726.24       1728.35    
  50  0.593137     -0.522330      -1.32144       1.32144       1723.95       1725.28    
  51  0.744110     -0.295567     -0.747753      0.747753       1730.87       1731.62    
  52  0.804978     -0.216940     -0.548836      0.548836       1729.68       1730.23    
  53  0.228161      -1.47770      -3.73843       3.73843       1730.45       1734.19    
  54  0.906275     -0.984127E-01 -0.248974      0.248974       1729.80       1730.05    
  55  0.420606     -0.866058      -2.19104       2.19104       1731.62       1733.81    
  56  0.609275E-01  -2.79807      -7.07883       7.07883       1733.21       1740.29    
  57  0.958138     -0.427632E-01 -0.108187      0.108187       1731.74       1731.85    
  58  0.529622     -0.635592      -1.60798       1.60798       1688.12       1689.73    
loop,thermsimp(1:2)       50   3.45416       2.23405    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    548       1733.18         68.76          1.28         39.06          0.20          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1733.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       50
neval is:      547
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       51
neval is:      547


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      547     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642127     -0.442969      -1.12066       1.12066       1636.21       1637.34    
   2  0.831300     -0.184764     -0.467434      0.467434       1648.93       1649.39    
   3  0.900454     -0.104857     -0.265276      0.265276       1668.78       1669.05    
   4  0.961218     -0.395545E-01 -0.100069      0.100069       1667.64       1667.74    
   5  0.684359     -0.379272     -0.959519      0.959519       1676.55       1677.51    
   6  0.717130     -0.332498     -0.841186      0.841186       1676.35       1677.19    
   7  0.332568      -1.10091      -2.78519       2.78519       1675.31       1678.09    
   8  0.733704     -0.309649     -0.783380      0.783380       1680.85       1681.64    
   9  0.774601E-01  -2.55799      -6.47145       6.47145       1678.17       1684.64    
  10  0.487558E-02  -5.32352      -13.4679       13.4679       1683.59       1697.06    
  11  0.239977      -1.42721      -3.61069       3.61069       1686.22       1689.84    
  12  0.890111     -0.116409     -0.294502      0.294502       1685.12       1685.41    
  13  0.429630     -0.844832      -2.13734       2.13734       1688.12       1690.26    
  14  0.759060     -0.275674     -0.697427      0.697427       1689.48       1690.18    
  15  0.173246      -1.75304      -4.43501       4.43501       1687.22       1691.65    
  16  0.416318     -0.876305      -2.21696       2.21696       1692.45       1694.67    
  17  0.109242      -2.21419      -5.60167       5.60167       1693.72       1699.32    
  18  0.746798     -0.291960     -0.738629      0.738629       1693.80       1694.54    
  19  0.276729      -1.28472      -3.25020       3.25020       1692.30       1695.55    
  20  0.709859     -0.342689     -0.866968      0.866968       1693.70       1694.56    
  21  0.924199     -0.788273E-01 -0.199425      0.199425       1694.87       1695.07    
  22  0.831505     -0.184517     -0.466810      0.466810       1692.56       1693.02    
  23  0.685310     -0.377884     -0.956008      0.956008       1699.59       1700.54    
  24  0.828829     -0.187742     -0.474967      0.474967       1699.05       1699.53    
  25  0.169988      -1.77203      -4.48304       4.48304       1702.05       1706.53    
  26  0.416558E-01  -3.17831      -8.04080       8.04080       1698.73       1706.77    
  27  0.248983      -1.39037      -3.51749       3.51749       1703.48       1706.99    
  28  0.982288     -0.178711E-01 -0.452120E-01  0.452120E-01   1706.12       1706.16    
  29  0.915863     -0.878881E-01 -0.222348      0.222348       1703.73       1703.95    
  30  0.325548      -1.12224      -2.83916       2.83916       1709.56       1712.40    
  31  0.598603     -0.513157      -1.29823       1.29823       1710.77       1712.06    
  32  0.509959     -0.673425      -1.70369       1.70369       1712.74       1714.44    
  33  0.580600     -0.543692      -1.37548       1.37548       1712.12       1713.50    
  34  0.917272     -0.863513E-01 -0.218460      0.218460       1716.43       1716.65    
  35  0.927434E-01  -2.37792      -6.01589       6.01589       1715.15       1721.17    
  36  0.176201      -1.73613      -4.39223       4.39223       1715.93       1720.33    
  37  0.479433     -0.735152      -1.85986       1.85986       1715.65       1717.51    
  38  0.258569      -1.35259      -3.42192       3.42192       1718.00       1721.42    
  39  0.479143     -0.735756      -1.86138       1.86138       1717.59       1719.45    
  40  0.167507      -1.78673      -4.52023       4.52023       1718.88       1723.40    
  41  0.862868     -0.147493     -0.373142      0.373142       1715.79       1716.17    
  42  0.492972     -0.707304      -1.78940       1.78940       1714.43       1716.22    
  43  0.801329     -0.221484     -0.560330      0.560330       1719.50       1720.06    
  44  0.246801      -1.39917      -3.53976       3.53976       1723.86       1727.40    
  45  0.701552     -0.354461     -0.896749      0.896749       1723.95       1724.85    
  46  0.814555     -0.205114     -0.518917      0.518917       1725.18       1725.70    
  47  0.379473     -0.968973      -2.45140       2.45140       1726.28       1728.73    
  48  0.428824     -0.846709      -2.14209       2.14209       1725.57       1727.71    
  49  0.957757     -0.431612E-01 -0.109193      0.109193       1726.01       1726.11    
  50  0.572954     -0.556949      -1.40902       1.40902       1727.18       1728.59    
  51  0.195151      -1.63398      -4.13380       4.13380       1726.24       1730.38    
  52  0.989770     -0.102824E-01 -0.260133E-01  0.260133E-01   1729.80       1729.82    
  53  0.390377     -0.940642      -2.37973       2.37973       1729.68       1732.06    
  54  0.474948     -0.744550      -1.88363       1.88363       1730.87       1732.75    
  55  0.371289     -0.990774      -2.50655       2.50655       1731.74       1734.24    
  56  0.932419     -0.699726E-01 -0.177023      0.177023       1731.62       1731.80    
  57  0.820649     -0.197660     -0.500060      0.500060       1730.45       1730.95    
  58  0.818465     -0.200325     -0.506801      0.506801       1733.18       1733.69    
loop,thermsimp(1:2)       51   1.12066      0.467434    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    549       1657.49         68.49          1.19         39.64          0.06          0.05        109.43
Just calling func    0   0        109.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1657.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       51
neval is:      548
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       52
neval is:      548


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      548     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896160     -0.109636     -0.277369      0.277369       1636.21       1636.49    
   2  0.835424     -0.179816     -0.454916      0.454916       1648.93       1649.38    
   3  0.417746     -0.872882      -2.20830       2.20830       1667.64       1669.84    
   4  0.818506     -0.200274     -0.506672      0.506672       1668.78       1669.29    
   5  0.183909      -1.69331      -4.28390       4.28390       1676.35       1680.63    
   6  0.591356     -0.525336      -1.32905       1.32905       1676.55       1677.88    
   7  0.620368     -0.477443      -1.20788       1.20788       1675.31       1676.51    
   8  0.154560      -1.86718      -4.72376       4.72376       1680.85       1685.58    
   9  0.999372     -0.627923E-03 -0.158858E-02  0.158858E-02   1678.17       1678.17    
  10  0.862454     -0.147973     -0.374357      0.374357       1685.12       1685.49    
  11  0.801162     -0.221692     -0.560856      0.560856       1686.22       1686.79    
  12  0.148229      -1.90900      -4.82956       4.82956       1689.48       1694.31    
  13  0.598458     -0.513400      -1.29885       1.29885       1688.12       1689.42    
  14  0.417671     -0.873062      -2.20875       2.20875       1687.22       1689.42    
  15  0.132181      -2.02358      -5.11945       5.11945       1692.56       1697.67    
  16  0.633182     -0.456997      -1.15615       1.15615       1693.80       1694.96    
  17  0.900020     -0.105338     -0.266495      0.266495       1693.70       1693.96    
  18  0.714050     -0.336802     -0.852074      0.852074       1692.45       1693.30    
  19  0.523793     -0.646659      -1.63598       1.63598       1694.87       1696.51    
  20  0.240153E-01  -3.72906      -9.43414       9.43414       1692.30       1701.73    
  21  0.608931     -0.496050      -1.25495       1.25495       1683.59       1684.85    
  22  0.948101     -0.532939E-01 -0.134828      0.134828       1693.72       1693.85    
  23  0.266229      -1.32340      -3.34806       3.34806       1699.05       1702.40    
  24  0.573219     -0.556488      -1.40786       1.40786       1699.59       1701.00    
  25  0.349325      -1.05175      -2.66082       2.66082       1703.73       1706.39    
  26  0.323907      -1.12730      -2.85195       2.85195       1706.12       1708.97    
  27  0.795225E-01  -2.53172      -6.40498       6.40498       1702.05       1708.45    
  28  0.825606     -0.191637     -0.484822      0.484822       1698.73       1699.21    
  29  0.396524     -0.925018      -2.34020       2.34020       1703.48       1705.82    
  30  0.401444     -0.912687      -2.30900       2.30900       1710.77       1713.08    
  31  0.688595     -0.373102     -0.943908      0.943908       1709.56       1710.50    
  32  0.773187     -0.257234     -0.650775      0.650775       1712.12       1712.77    
  33  0.852559     -0.159512     -0.403549      0.403549       1712.74       1713.14    
  34  0.985405     -0.147025E-01 -0.371959E-01  0.371959E-01   1715.79       1715.83    
  35  0.556199     -0.586629      -1.48411       1.48411       1714.43       1715.91    
  36  0.913827     -0.901138E-01 -0.227978      0.227978       1716.43       1716.66    
  37  0.858782     -0.152240     -0.385152      0.385152       1715.65       1716.03    
  38  0.477249     -0.739717      -1.87141       1.87141       1717.59       1719.46    
  39  0.728564     -0.316680     -0.801166      0.801166       1719.50       1720.30    
  40  0.338280      -1.08388      -2.74211       2.74211       1715.93       1718.68    
  41  0.718699     -0.330313     -0.835656      0.835656       1715.15       1715.99    
  42  0.746009     -0.293017     -0.741303      0.741303       1718.00       1718.74    
  43  0.658362     -0.418001      -1.05750       1.05750       1718.88       1719.94    
  44  0.997855     -0.214685E-02 -0.543132E-02  0.543132E-02   1723.95       1723.96    
  45  0.506528     -0.680175      -1.72077       1.72077       1725.18       1726.90    
  46  0.808231E-01  -2.51549      -6.36393       6.36393       1726.01       1732.37    
  47  0.148828      -1.90497      -4.81936       4.81936       1723.86       1728.68    
  48  0.824318     -0.193199     -0.488773      0.488773       1725.57       1726.06    
  49  0.875043     -0.133482     -0.337696      0.337696       1727.18       1727.52    
  50  0.470042     -0.754934      -1.90990       1.90990       1726.28       1728.19    
  51  0.292819      -1.22820      -3.10722       3.10722       1729.80       1732.90    
  52  0.811396     -0.208999     -0.528745      0.528745       1726.24       1726.77    
  53  0.755021     -0.281010     -0.710926      0.710926       1730.45       1731.16    
  54  0.556253     -0.586533      -1.48387       1.48387       1731.62       1733.10    
  55  0.978213     -0.220282E-01 -0.557292E-01  0.557292E-01   1729.68       1729.73    
  56  0.636096     -0.452406      -1.14454       1.14454       1730.87       1732.01    
  57  0.404576     -0.904915      -2.28934       2.28934       1733.18       1735.47    
  58  0.300789      -1.20135      -3.03928       3.03928       1657.49       1660.53    
loop,thermsimp(1:2)       52  0.277369      0.454916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    550       1736.66         68.48          1.18         39.21          0.37          0.05        109.27
Just calling func    0   0        109.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1736.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       52
neval is:      549
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       53
neval is:      549


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      549     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.258600      -1.35247      -3.42162       3.42162       1636.21       1639.64    
   2  0.335714      -1.09150      -2.76137       2.76137       1648.93       1651.69    
   3  0.106818E-01  -4.53921      -11.4837       11.4837       1657.49       1668.97    
   4  0.435887     -0.830373      -2.10076       2.10076       1668.78       1670.88    
   5  0.776831     -0.252532     -0.638881      0.638881       1667.64       1668.28    
   6  0.729448     -0.315467     -0.798099      0.798099       1675.31       1676.10    
   7  0.616540     -0.483631      -1.22354       1.22354       1676.55       1677.78    
   8  0.832841     -0.182913     -0.462750      0.462750       1678.17       1678.63    
   9  0.673790     -0.394837     -0.998896      0.998896       1676.35       1677.35    
  10  0.535507     -0.624541      -1.58002       1.58002       1683.59       1685.17    
  11  0.396426     -0.925265      -2.34082       2.34082       1685.12       1687.46    
  12  0.333676      -1.09759      -2.77678       2.77678       1680.85       1683.63    
  13  0.562408     -0.575527      -1.45602       1.45602       1686.22       1687.68    
  14  0.988355     -0.117133E-01 -0.296333E-01  0.296333E-01   1688.12       1688.15    
  15  0.674910     -0.393176     -0.994693      0.994693       1687.22       1688.21    
  16  0.645375     -0.437924      -1.10790       1.10790       1692.45       1693.56    
  17  0.400913     -0.914011      -2.31235       2.31235       1693.72       1696.03    
  18  0.228290      -1.47714      -3.73701       3.73701       1693.70       1697.43    
  19  0.882505     -0.124991     -0.316214      0.316214       1689.48       1689.80    
  20  0.932806     -0.695579E-01 -0.175974      0.175974       1693.80       1693.98    
  21  0.664774     -0.408308      -1.03298       1.03298       1694.87       1695.90    
  22  0.559236     -0.581184      -1.47033       1.47033       1692.56       1694.03    
  23  0.961133     -0.396421E-01 -0.100290      0.100290       1698.73       1698.83    
  24  0.767901     -0.264095     -0.668132      0.668132       1699.59       1700.26    
  25  0.782742     -0.244952     -0.619703      0.619703       1692.30       1692.92    
  26  0.477575E-01  -3.04162      -7.69498       7.69498       1699.05       1706.75    
  27  0.760322     -0.274013     -0.693225      0.693225       1703.48       1704.17    
  28  0.498382     -0.696388      -1.76179       1.76179       1703.73       1705.49    
  29  0.131457      -2.02908      -5.13335       5.13335       1702.05       1707.18    
  30  0.689616     -0.371621     -0.940162      0.940162       1706.12       1707.06    
  31  0.178892E-01  -4.02356      -10.1792       10.1792       1709.56       1719.74    
  32  0.243405      -1.41303      -3.57482       3.57482       1712.12       1715.70    
  33  0.282687      -1.26341      -3.19631       3.19631       1710.77       1713.96    
  34  0.828546     -0.188083     -0.475831      0.475831       1712.74       1713.22    
  35  0.667217     -0.404640      -1.02370       1.02370       1715.79       1716.82    
  36  0.813372     -0.206566     -0.522591      0.522591       1714.43       1714.95    
  37  0.853524     -0.158382     -0.400689      0.400689       1715.15       1715.55    
  38  0.832184     -0.183702     -0.464747      0.464747       1715.65       1716.11    
  39  0.911849     -0.922808E-01 -0.233461      0.233461       1716.43       1716.67    
  40  0.258232      -1.35390      -3.42522       3.42522       1715.93       1719.36    
  41  0.742217     -0.298113     -0.754195      0.754195       1718.00       1718.75    
  42  0.854288     -0.157487     -0.398426      0.398426       1717.59       1717.99    
  43  0.966448     -0.341280E-01 -0.863403E-01  0.863403E-01   1718.88       1718.96    
  44  0.474756     -0.744954      -1.88466       1.88466       1719.50       1721.38    
  45  0.332138      -1.10221      -2.78846       2.78846       1723.95       1726.74    
  46  0.591089     -0.525788      -1.33019       1.33019       1725.57       1726.90    
  47  0.644797     -0.438820      -1.11017       1.11017       1726.24       1727.35    
  48  0.729783     -0.315009     -0.796939      0.796939       1725.18       1725.98    
  49  0.306227      -1.18343      -2.99395       2.99395       1727.18       1730.18    
  50  0.684977     -0.378370     -0.957236      0.957236       1726.28       1727.24    
  51  0.750542     -0.286959     -0.725976      0.725976       1723.86       1724.58    
  52  0.180972      -1.70941      -4.32463       4.32463       1729.68       1734.00    
  53  0.313831      -1.15890      -2.93189       2.93189       1730.45       1733.38    
  54  0.707162     -0.346495     -0.876596      0.876596       1730.87       1731.74    
  55  0.873653E-02  -4.74024      -11.9923       11.9923       1726.01       1738.00    
  56  0.194915      -1.63519      -4.13687       4.13687       1729.80       1733.93    
  57  0.866673     -0.143093     -0.362011      0.362011       1731.62       1731.98    
  58  0.264698      -1.32916      -3.36265       3.36265       1736.66       1740.02    
loop,thermsimp(1:2)       53   3.42162       2.76137    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    551       1733.18         68.53          1.25         39.29          0.30          0.05        109.42
Just calling func    0   0        109.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1733.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       53
neval is:      550
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       54
neval is:      550


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      550     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.162942      -1.81436      -4.59014       4.59014       1636.21       1640.80    
   2  0.240839      -1.42363      -3.60163       3.60163       1648.93       1652.53    
   3  0.676863     -0.390287     -0.987385      0.987385       1667.64       1668.62    
   4  0.298793      -1.20800      -3.05612       3.05612       1657.49       1660.55    
   5  0.463460E-01  -3.07162      -7.77088       7.77088       1668.78       1676.55    
   6  0.424832E-01  -3.15865      -7.99105       7.99105       1675.31       1683.30    
   7  0.551542     -0.595037      -1.50538       1.50538       1676.35       1677.85    
   8  0.198453      -1.61721      -4.09136       4.09136       1676.55       1680.65    
   9  0.408741E-01  -3.19726      -8.08873       8.08873       1678.17       1686.26    
  10  0.926138     -0.767317E-01 -0.194123      0.194123       1680.85       1681.05    
  11  0.998189     -0.181307E-02 -0.458688E-02  0.458688E-02   1683.59       1683.60    
  12  0.221790      -1.50602      -3.81008       3.81008       1685.12       1688.93    
  13  0.512477     -0.668500      -1.69124       1.69124       1686.22       1687.92    
  14  0.716428     -0.333477     -0.843662      0.843662       1688.12       1688.96    
  15  0.542239     -0.612048      -1.54842       1.54842       1687.22       1688.76    
  16  0.237089      -1.43932      -3.64133       3.64133       1689.48       1693.12    
  17  0.520333     -0.653285      -1.65274       1.65274       1692.30       1693.95    
  18  0.516420     -0.660835      -1.67184       1.67184       1692.45       1694.12    
  19  0.927350     -0.754245E-01 -0.190816      0.190816       1693.80       1693.99    
  20  0.495169     -0.702857      -1.77815       1.77815       1692.56       1694.33    
  21  0.756269     -0.279358     -0.706747      0.706747       1694.87       1695.58    
  22  0.697909     -0.359666     -0.909918      0.909918       1693.72       1694.63    
  23  0.911964     -0.921545E-01 -0.233141      0.233141       1693.70       1693.93    
  24  0.278968      -1.27666      -3.22981       3.22981       1698.73       1701.96    
  25  0.103449E-02  -6.87384      -17.3901       17.3901       1699.59       1716.98    
  26  0.771333     -0.259634     -0.656848      0.656848       1703.48       1704.13    
  27  0.716983     -0.332703     -0.841703      0.841703       1703.73       1704.57    
  28  0.811579     -0.208773     -0.528174      0.528174       1699.05       1699.58    
  29  0.224231      -1.49508      -3.78239       3.78239       1706.12       1709.90    
  30  0.660210E-01  -2.71778      -6.87570       6.87570       1702.05       1708.92    
  31  0.524436     -0.645431      -1.63287       1.63287       1712.74       1714.37    
  32  0.289628      -1.23916      -3.13494       3.13494       1710.77       1713.90    
  33  0.578267     -0.547720      -1.38568       1.38568       1714.43       1715.82    
  34  0.377293     -0.974732      -2.46597       2.46597       1715.15       1717.62    
  35  0.709164     -0.343668     -0.869444      0.869444       1712.12       1712.99    
  36  0.524809     -0.644721      -1.63108       1.63108       1715.65       1717.28    
  37  0.223509      -1.49830      -3.79055       3.79055       1716.43       1720.23    
  38  0.934100     -0.681715E-01 -0.172467      0.172467       1715.79       1715.96    
  39  0.973288     -0.270756E-01 -0.684984E-01  0.684984E-01   1717.59       1717.66    
  40  0.876726     -0.131561     -0.332836      0.332836       1718.00       1718.33    
  41  0.284953      -1.25543      -3.17611       3.17611       1718.88       1722.05    
  42  0.803469     -0.218817     -0.553584      0.553584       1715.93       1716.49    
  43  0.394988     -0.928900      -2.35002       2.35002       1709.56       1711.91    
  44  0.554814     -0.589122      -1.49042       1.49042       1719.50       1720.99    
  45  0.973148     -0.272194E-01 -0.688622E-01  0.688622E-01   1723.86       1723.93    
  46  0.569309     -0.563333      -1.42517       1.42517       1725.18       1726.61    
  47  0.967634     -0.329011E-01 -0.832363E-01  0.832363E-01   1723.95       1724.04    
  48  0.427466     -0.849882      -2.15011       2.15011       1725.57       1727.72    
  49  0.552310     -0.593645      -1.50186       1.50186       1726.28       1727.78    
  50  0.228673      -1.47546      -3.73277       3.73277       1726.24       1729.98    
  51  0.538893     -0.618238      -1.56408       1.56408       1727.18       1728.75    
  52  0.910290     -0.939924E-01 -0.237791      0.237791       1730.87       1731.11    
  53  0.802319E-01  -2.52283      -6.38251       6.38251       1731.62       1738.00    
  54  0.589762     -0.528036      -1.33588       1.33588       1730.45       1731.78    
  55  0.823158     -0.194608     -0.492337      0.492337       1729.80       1730.29    
  56  0.349357      -1.05166      -2.66059       2.66059       1729.68       1732.34    
  57  0.530543     -0.633855      -1.60359       1.60359       1726.01       1727.61    
  58  0.756819     -0.278631     -0.704908      0.704908       1733.18       1733.89    
loop,thermsimp(1:2)       54   4.59014       3.60163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    552       1727.93         68.33          1.20         39.48          0.20          0.05        109.26
Just calling func    0   0        109.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1727.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       54
neval is:      551
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       55
neval is:      551


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      551     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.509602     -0.674124      -1.70546       1.70546       1636.21       1637.92    
   2  0.495514     -0.702160      -1.77639       1.77639       1648.93       1650.70    
   3  0.837782     -0.176998     -0.447785      0.447785       1657.49       1657.94    
   4  0.535509     -0.624537      -1.58001       1.58001       1667.64       1669.22    
   5  0.341674      -1.07390      -2.71685       2.71685       1668.78       1671.50    
   6  0.843270     -0.170469     -0.431268      0.431268       1676.35       1676.78    
   7  0.847493     -0.165473     -0.418629      0.418629       1676.55       1676.97    
   8  0.967616     -0.329200E-01 -0.832842E-01  0.832842E-01   1680.85       1680.94    
   9  0.837601     -0.177213     -0.448331      0.448331       1675.31       1675.75    
  10  0.796927E-01  -2.52958      -6.39956       6.39956       1683.59       1689.99    
  11  0.291170E-01  -3.53643      -8.94681       8.94681       1678.17       1687.12    
  12  0.128543      -2.05149      -5.19005       5.19005       1686.22       1691.41    
  13  0.195374      -1.63284      -4.13092       4.13092       1687.22       1691.35    
  14  0.711258     -0.340719     -0.861984      0.861984       1685.12       1685.98    
  15  0.738303     -0.303400     -0.767571      0.767571       1688.12       1688.89    
  16  0.513942     -0.665644      -1.68401       1.68401       1689.48       1691.17    
  17  0.717790     -0.331579     -0.838860      0.838860       1693.70       1694.53    
  18  0.709757     -0.342833     -0.867332      0.867332       1692.30       1693.17    
  19  0.836075     -0.179037     -0.452944      0.452944       1693.80       1694.25    
  20  0.885785     -0.121280     -0.306827      0.306827       1692.45       1692.76    
  21  0.374692     -0.981651      -2.48347       2.48347       1692.56       1695.04    
  22  0.233066      -1.45643      -3.68462       3.68462       1693.72       1697.40    
  23  0.475141     -0.744144      -1.88261       1.88261       1694.87       1696.75    
  24  0.567952     -0.565719      -1.43121       1.43121       1699.05       1700.48    
  25  0.928125     -0.745889E-01 -0.188702      0.188702       1698.73       1698.92    
  26  0.744574     -0.294943     -0.746174      0.746174       1703.48       1704.22    
  27  0.630340     -0.461496      -1.16754       1.16754       1703.73       1704.90    
  28  0.174068      -1.74831      -4.42304       4.42304       1702.05       1706.47    
  29  0.793145     -0.231750     -0.586302      0.586302       1706.12       1706.70    
  30  0.901240     -0.103984     -0.263068      0.263068       1709.56       1709.82    
  31  0.293792      -1.22488      -3.09883       3.09883       1712.12       1715.22    
  32  0.837829     -0.176941     -0.447643      0.447643       1710.77       1711.21    
  33  0.453305     -0.791191      -2.00163       2.00163       1712.74       1714.74    
  34  0.231101      -1.46490      -3.70604       3.70604       1714.43       1718.14    
  35  0.906016     -0.986982E-01 -0.249696      0.249696       1715.79       1716.04    
  36  0.251205      -1.38148      -3.49501       3.49501       1715.93       1719.43    
  37  0.518565     -0.656689      -1.66136       1.66136       1699.59       1701.25    
  38  0.737118     -0.305007     -0.771637      0.771637       1715.65       1716.42    
  39  0.229948      -1.46990      -3.71869       3.71869       1715.15       1718.87    
  40  0.221845      -1.50578      -3.80946       3.80946       1717.59       1721.40    
  41  0.511130     -0.671131      -1.69789       1.69789       1718.00       1719.70    
  42  0.137034      -1.98753      -5.02823       5.02823       1716.43       1721.46    
  43  0.870855     -0.138280     -0.349833      0.349833       1719.50       1719.85    
  44  0.528174     -0.638329      -1.61491       1.61491       1718.88       1720.49    
  45  0.152525      -1.88043      -4.75728       4.75728       1723.86       1728.62    
  46  0.339795E-01  -3.38200      -8.55610       8.55610       1723.95       1732.51    
  47  0.989348     -0.107091E-01 -0.270929E-01  0.270929E-01   1725.18       1725.21    
  48  0.951612     -0.495981E-01 -0.125478      0.125478       1726.01       1726.13    
  49  0.819787     -0.198711     -0.502717      0.502717       1725.57       1726.07    
  50  0.353143E-01  -3.34347      -8.45862       8.45862       1726.28       1734.74    
  51  0.353588      -1.03962      -2.63014       2.63014       1727.18       1729.81    
  52  0.546289     -0.604606      -1.52959       1.52959       1726.24       1727.77    
  53  0.463744     -0.768422      -1.94403       1.94403       1729.80       1731.74    
  54  0.227476      -1.48071      -3.74604       3.74604       1730.87       1734.61    
  55  0.448540     -0.801757      -2.02836       2.02836       1730.45       1732.48    
  56  0.305048      -1.18729      -3.00371       3.00371       1729.68       1732.68    
  57  0.190121      -1.66009      -4.19986       4.19986       1733.18       1737.38    
  58  0.202433      -1.59735      -4.04112       4.04112       1727.93       1731.97    
loop,thermsimp(1:2)       55   1.70546       1.77639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    553       1741.78         68.46          1.20         39.38          0.24          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    554       1691.28         68.39          1.21         39.23          0.39          0.05        109.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1691.28
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       55
neval is:      553
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       56
neval is:      553


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      553     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810055     -0.210654     -0.532932      0.532932       1636.21       1636.75    
   2  0.944369     -0.572379E-01 -0.144806      0.144806       1648.93       1649.07    
   3  0.256748      -1.35966      -3.43980       3.43980       1657.49       1660.93    
   4  0.857555     -0.153670     -0.388769      0.388769       1667.64       1668.03    
   5  0.301135      -1.20020      -3.03637       3.03637       1668.78       1671.82    
   6  0.765466     -0.267271     -0.676167      0.676167       1675.31       1675.98    
   7  0.595420     -0.518488      -1.31172       1.31172       1676.35       1677.66    
   8  0.184967      -1.68758      -4.26939       4.26939       1676.55       1680.82    
   9  0.451762     -0.794599      -2.01025       2.01025       1680.85       1682.86    
  10  0.214230E-01  -3.84329      -9.72312       9.72312       1685.12       1694.84    
  11  0.133176      -2.01609      -5.10049       5.10049       1678.17       1683.27    
  12  0.167638      -1.78595      -4.51826       4.51826       1688.12       1692.64    
  13  0.900249     -0.105084     -0.265851      0.265851       1683.59       1683.86    
  14  0.542907     -0.610818      -1.54531       1.54531       1689.48       1691.03    
  15  0.911342E-01  -2.39542      -6.06017       6.06017       1687.22       1693.28    
  16  0.664024     -0.409437      -1.03583       1.03583       1686.22       1687.26    
  17  0.976823     -0.234502E-01 -0.593265E-01  0.593265E-01   1692.45       1692.51    
  18  0.293738      -1.22507      -3.09929       3.09929       1692.30       1695.40    
  19  0.938951     -0.629922E-01 -0.159364      0.159364       1693.80       1693.96    
  20  0.393580     -0.932470      -2.35905       2.35905       1693.70       1696.05    
  21  0.303574      -1.19213      -3.01597       3.01597       1692.56       1695.57    
  22  0.346544      -1.05975      -2.68104       2.68104       1694.87       1697.55    
  23  0.118838      -2.13000      -5.38867       5.38867       1693.72       1699.11    
  24  0.384663E-01  -3.25797      -8.24233       8.24233       1698.73       1706.97    
  25  0.624565     -0.470700      -1.19082       1.19082       1699.05       1700.24    
  26  0.225711      -1.48850      -3.76575       3.76575       1699.59       1703.35    
  27  0.269639      -1.31067      -3.31586       3.31586       1703.48       1706.79    
  28  0.886893     -0.120031     -0.303667      0.303667       1703.73       1704.03    
  29  0.184969      -1.68757      -4.26937       4.26937       1702.05       1706.32    
  30  0.302378E-01  -3.49866      -8.85125       8.85125       1706.12       1714.97    
  31  0.233638      -1.45398      -3.67842       3.67842       1709.56       1713.24    
  32  0.494824     -0.703553      -1.77991       1.77991       1710.77       1712.55    
  33  0.833664     -0.181924     -0.460249      0.460249       1712.74       1713.20    
  34  0.659846     -0.415748      -1.05180       1.05180       1712.12       1713.17    
  35  0.761908     -0.271930     -0.687954      0.687954       1715.79       1716.48    
  36  0.691542E-01  -2.67142      -6.75840       6.75840       1715.65       1722.41    
  37  0.756803     -0.278653     -0.704962      0.704962       1714.43       1715.14    
  38  0.915830     -0.879244E-01 -0.222440      0.222440       1715.15       1715.37    
  39  0.358938      -1.02461      -2.59215       2.59215       1715.93       1718.53    
  40  0.712535     -0.338927     -0.857450      0.857450       1718.00       1718.86    
  41  0.756738     -0.278739     -0.705180      0.705180       1719.50       1720.20    
  42  0.295390E-02  -5.82463      -14.7357       14.7357       1718.88       1733.61    
  43  0.908633     -0.958136E-01 -0.242398      0.242398       1717.59       1717.83    
  44  0.979116     -0.211054E-01 -0.533946E-01  0.533946E-01   1716.43       1716.49    
  45  0.420519     -0.866265      -2.19156       2.19156       1725.18       1727.38    
  46  0.982205     -0.179549E-01 -0.454239E-01  0.454239E-01   1725.57       1725.61    
  47  0.851251     -0.161049     -0.407436      0.407436       1726.01       1726.41    
  48  0.594735     -0.519639      -1.31463       1.31463       1726.24       1727.56    
  49  0.957893     -0.430197E-01 -0.108835      0.108835       1723.86       1723.97    
  50  0.139820      -1.96740      -4.97732       4.97732       1727.18       1732.16    
  51  0.937433     -0.646098E-01 -0.163456      0.163456       1729.80       1729.96    
  52  0.530418     -0.634090      -1.60418       1.60418       1727.93       1729.54    
  53  0.202220      -1.59840      -4.04378       4.04378       1730.45       1734.49    
  54  0.442737     -0.814779      -2.06131       2.06131       1723.95       1726.02    
  55  0.547124     -0.603081      -1.52573       1.52573       1729.68       1731.20    
  56  0.881924     -0.125649     -0.317879      0.317879       1730.87       1731.19    
  57  0.392839     -0.934356      -2.36382       2.36382       1726.28       1728.64    
  58  0.931504     -0.709546E-01 -0.179508      0.179508       1691.28       1691.46    
loop,thermsimp(1:2)       56  0.532932      0.144806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    555       1669.22         68.45          1.19         39.15          0.47          0.05        109.31
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1669.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       56
neval is:      554
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       57
neval is:      554


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      554     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357102      -1.02973      -2.60512       2.60512       1636.21       1638.82    
   2  0.625087     -0.469865      -1.18871       1.18871       1648.93       1650.12    
   3  0.526320E-01  -2.94443      -7.44910       7.44910       1657.49       1664.94    
   4  0.385670     -0.952774      -2.41042       2.41042       1667.64       1670.05    
   5  0.532637     -0.629916      -1.59362       1.59362       1668.78       1670.38    
   6  0.804876E-01  -2.51965      -6.37446       6.37446       1675.31       1681.68    
   7  0.622772     -0.473574      -1.19809       1.19809       1676.35       1677.55    
   8  0.102026      -2.28252      -5.77455       5.77455       1676.55       1682.33    
   9  0.418336     -0.871471      -2.20473       2.20473       1680.85       1683.06    
  10  0.578766     -0.546857      -1.38349       1.38349       1678.17       1679.55    
  11  0.465316     -0.765038      -1.93547       1.93547       1683.59       1685.53    
  12  0.166433      -1.79317      -4.53652       4.53652       1686.22       1690.76    
  13  0.290530      -1.23605      -3.12707       3.12707       1689.48       1692.61    
  14  0.991156     -0.888373E-02 -0.224749E-01  0.224749E-01   1691.28       1691.30    
  15  0.747098     -0.291559     -0.737613      0.737613       1692.45       1693.19    
  16  0.117051      -2.14514      -5.42699       5.42699       1688.12       1693.55    
  17  0.281481      -1.26769      -3.20712       3.20712       1687.22       1690.42    
  18  0.694526     -0.364526     -0.922213      0.922213       1693.80       1694.72    
  19  0.397704     -0.922047      -2.33268       2.33268       1685.12       1687.45    
  20  0.604235     -0.503792      -1.27454       1.27454       1692.30       1693.57    
  21  0.910420     -0.938492E-01 -0.237429      0.237429       1692.56       1692.79    
  22  0.496596     -0.699978      -1.77087       1.77087       1693.70       1695.47    
  23  0.605982     -0.500905      -1.26724       1.26724       1694.87       1696.14    
  24  0.372826     -0.986642      -2.49610       2.49610       1693.72       1696.21    
  25  0.839451     -0.175007     -0.442749      0.442749       1699.05       1699.49    
  26  0.523045E-01  -2.95067      -7.46489       7.46489       1699.59       1707.05    
  27  0.792630     -0.232398     -0.587944      0.587944       1703.73       1704.32    
  28  0.726993     -0.318838     -0.806626      0.806626       1702.05       1702.85    
  29  0.254118      -1.36996      -3.46584       3.46584       1703.48       1706.94    
  30  0.175759      -1.73864      -4.39858       4.39858       1698.73       1703.13    
  31  0.228322      -1.47700      -3.73666       3.73666       1710.77       1714.50    
  32  0.360945      -1.01903      -2.57804       2.57804       1712.12       1714.70    
  33  0.445035     -0.809602      -2.04821       2.04821       1712.74       1714.79    
  34  0.347058      -1.05826      -2.67729       2.67729       1709.56       1712.24    
  35  0.659666     -0.416022      -1.05249       1.05249       1706.12       1707.17    
  36  0.838841     -0.175734     -0.444588      0.444588       1714.43       1714.88    
  37  0.618959     -0.479716      -1.21363       1.21363       1715.15       1716.37    
  38  0.156886      -1.85224      -4.68597       4.68597       1715.79       1720.48    
  39  0.594357     -0.520275      -1.31624       1.31624       1716.43       1717.75    
  40  0.747079     -0.291585     -0.737680      0.737680       1717.59       1718.33    
  41  0.650924     -0.429362      -1.08624       1.08624       1715.93       1717.02    
  42  0.154177      -1.86965      -4.73003       4.73003       1718.00       1722.73    
  43  0.304320      -1.18968      -3.00975       3.00975       1719.50       1722.51    
  44  0.653765     -0.425007      -1.07522       1.07522       1715.65       1716.72    
  45  0.497625     -0.697908      -1.76563       1.76563       1723.86       1725.62    
  46  0.298681E-01  -3.51097      -8.88237       8.88237       1725.57       1734.45    
  47  0.430468     -0.842882      -2.13240       2.13240       1723.95       1726.09    
  48  0.380011     -0.967555      -2.44781       2.44781       1726.01       1728.45    
  49  0.716593     -0.333247     -0.843079      0.843079       1725.18       1726.03    
  50  0.100235      -2.30024      -5.81936       5.81936       1726.24       1732.06    
  51  0.133481      -2.01379      -5.09469       5.09469       1726.28       1731.38    
  52  0.485254     -0.723082      -1.82932       1.82932       1727.93       1729.76    
  53  0.978603     -0.216294E-01 -0.547202E-01  0.547202E-01   1729.80       1729.85    
  54  0.973934     -0.264113E-01 -0.668178E-01  0.668178E-01   1730.87       1730.94    
  55  0.744363     -0.295226     -0.746891      0.746891       1729.68       1730.42    
  56  0.201176      -1.60358      -4.05688       4.05688       1727.18       1731.24    
  57  0.260889      -1.34366      -3.39932       3.39932       1718.88       1722.28    
  58  0.948796     -0.525620E-01 -0.132976      0.132976       1669.22       1669.35    
loop,thermsimp(1:2)       57   2.60512       1.18871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    556       1710.80         68.23          1.13         39.33          0.58          0.05        109.32
Just calling func    0   0        109.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1710.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       57
neval is:      555
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       58
neval is:      555


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      555     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303389      -1.19274      -3.01750       3.01750       1636.21       1639.23    
   2  0.644709     -0.438956      -1.11051       1.11051       1648.93       1650.04    
   3  0.490084     -0.713178      -1.80427       1.80427       1657.49       1659.29    
   4  0.579401     -0.545760      -1.38072       1.38072       1669.22       1670.60    
   5  0.217372      -1.52614      -3.86098       3.86098       1667.64       1671.50    
   6  0.670771     -0.399327      -1.01026       1.01026       1668.78       1669.79    
   7  0.794394     -0.230176     -0.582322      0.582322       1676.35       1676.93    
   8  0.700220     -0.356360     -0.901555      0.901555       1678.17       1679.07    
   9  0.151193      -1.88920      -4.77948       4.77948       1675.31       1680.09    
  10  0.423588     -0.858994      -2.17317       2.17317       1676.55       1678.73    
  11  0.358369      -1.02619      -2.59616       2.59616       1680.85       1683.45    
  12  0.949750     -0.515563E-01 -0.130432      0.130432       1683.59       1683.73    
  13  0.245844      -1.40306      -3.54959       3.54959       1685.12       1688.67    
  14  0.775721     -0.253963     -0.642499      0.642499       1687.22       1687.86    
  15  0.103980      -2.26356      -5.72657       5.72657       1686.22       1691.95    
  16  0.282805E-01  -3.56558      -9.02055       9.02055       1691.28       1700.30    
  17  0.737879     -0.303975     -0.769025      0.769025       1689.48       1690.25    
  18  0.125115E-01  -4.38111      -11.0838       11.0838       1692.56       1703.64    
  19  0.788906     -0.237108     -0.599858      0.599858       1692.45       1693.05    
  20  0.941148     -0.606551E-01 -0.153451      0.153451       1688.12       1688.27    
  21  0.243470E-01  -3.71535      -9.39944       9.39944       1692.30       1701.70    
  22  0.350536      -1.04829      -2.65207       2.65207       1693.80       1696.45    
  23  0.178398      -1.72374      -4.36088       4.36088       1693.70       1698.06    
  24  0.600163     -0.510554      -1.29165       1.29165       1694.87       1696.16    
  25  0.835028     -0.180290     -0.456116      0.456116       1693.72       1694.17    
  26  0.344087      -1.06686      -2.69904       2.69904       1699.05       1701.75    
  27  0.754072     -0.282268     -0.714108      0.714108       1702.05       1702.76    
  28  0.138425      -1.97742      -5.00268       5.00268       1698.73       1703.73    
  29  0.759097     -0.275625     -0.697304      0.697304       1703.73       1704.43    
  30  0.967383     -0.331612E-01 -0.838944E-01  0.838944E-01   1703.48       1703.56    
  31  0.746015     -0.293010     -0.741285      0.741285       1699.59       1700.33    
  32  0.461640     -0.772969      -1.95553       1.95553       1706.12       1708.07    
  33  0.727095     -0.318698     -0.806272      0.806272       1709.56       1710.37    
  34  0.875405     -0.133069     -0.336650      0.336650       1710.77       1711.10    
  35  0.915573E-01  -2.39079      -6.04845       6.04845       1712.12       1718.17    
  36  0.471693     -0.751427      -1.90103       1.90103       1712.74       1714.64    
  37  0.142837      -1.94605      -4.92330       4.92330       1714.43       1719.35    
  38  0.882395     -0.125116     -0.316530      0.316530       1715.15       1715.47    
  39  0.299360      -1.20611      -3.05133       3.05133       1715.65       1718.70    
  40  0.846797     -0.166294     -0.420706      0.420706       1715.93       1716.35    
  41  0.619412     -0.478984      -1.21178       1.21178       1716.43       1717.65    
  42  0.862563     -0.147847     -0.374037      0.374037       1717.59       1717.96    
  43  0.507188     -0.678874      -1.71748       1.71748       1715.79       1717.51    
  44  0.309829      -1.17174      -2.96437       2.96437       1718.88       1721.84    
  45  0.531290     -0.632447      -1.60002       1.60002       1719.50       1721.10    
  46  0.460187E-01  -3.07871      -7.78881       7.78881       1718.00       1725.79    
  47  0.435359     -0.831585      -2.10382       2.10382       1723.86       1725.96    
  48  0.903617     -0.101349     -0.256404      0.256404       1725.18       1725.44    
  49  0.737071E-01  -2.60766      -6.59710       6.59710       1723.95       1730.55    
  50  0.130117      -2.03932      -5.15927       5.15927       1726.01       1731.16    
  51  0.963506     -0.371761E-01 -0.940515E-01  0.940515E-01   1727.93       1728.03    
  52  0.446669E-01  -3.10852      -7.86423       7.86423       1729.80       1737.66    
  53  0.200331      -1.60779      -4.06753       4.06753       1729.68       1733.75    
  54  0.252222      -1.37744      -3.48479       3.48479       1730.87       1734.35    
  55  0.693294     -0.366301     -0.926704      0.926704       1727.18       1728.11    
  56  0.839546     -0.174894     -0.442464      0.442464       1726.28       1726.72    
  57  0.225760E-01  -3.79087      -9.59050       9.59050       1726.24       1735.83    
  58  0.122689      -2.09810      -5.30798       5.30798       1710.80       1716.10    
loop,thermsimp(1:2)       58   3.01750       1.11051    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    557       1681.98         68.21          1.14         39.74          0.26          0.05        109.40
Just calling func    0   0        109.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1681.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       58
neval is:      556
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       59
neval is:      556


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      556     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.773269     -0.257128     -0.650507      0.650507       1636.21       1636.87    
   2  0.583921     -0.537989      -1.36106       1.36106       1648.93       1650.29    
   3  0.656701E-01  -2.72311      -6.88919       6.88919       1657.49       1664.38    
   4  0.894191E-01  -2.41442      -6.10823       6.10823       1668.78       1674.89    
   5  0.354705      -1.03647      -2.62216       2.62216       1669.22       1671.84    
   6  0.526699     -0.641127      -1.62198       1.62198       1667.64       1669.26    
   7  0.769224     -0.262373     -0.663775      0.663775       1676.35       1677.01    
   8  0.729715     -0.315102     -0.797174      0.797174       1676.55       1677.35    
   9  0.978924E-01  -2.32389      -5.87919       5.87919       1678.17       1684.05    
  10  0.338047      -1.08457      -2.74385       2.74385       1675.31       1678.05    
  11  0.328790      -1.11233      -2.81409       2.81409       1680.85       1683.67    
  12  0.902094     -0.103037     -0.260672      0.260672       1683.59       1683.86    
  13  0.528650     -0.637429      -1.61263       1.61263       1687.22       1688.83    
  14  0.706617     -0.347267     -0.878549      0.878549       1688.12       1689.00    
  15  0.999709     -0.291154E-03 -0.736589E-03  0.736589E-03   1685.12       1685.12    
  16  0.547958     -0.601557      -1.52188       1.52188       1689.48       1691.00    
  17  0.561992     -0.576268      -1.45790       1.45790       1686.22       1687.68    
  18  0.978975     -0.212488E-01 -0.537572E-01  0.537572E-01   1692.45       1692.51    
  19  0.497838     -0.697481      -1.76455       1.76455       1693.72       1695.48    
  20  0.899264     -0.106179     -0.268621      0.268621       1694.87       1695.14    
  21  0.279408      -1.27508      -3.22583       3.22583       1693.80       1697.03    
  22  0.632548     -0.458000      -1.15869       1.15869       1693.70       1694.85    
  23  0.282789      -1.26305      -3.19540       3.19540       1691.28       1694.47    
  24  0.518456     -0.656900      -1.66189       1.66189       1699.59       1701.25    
  25  0.130585      -2.03573      -5.15020       5.15020       1692.30       1697.45    
  26  0.767980E-01  -2.56658      -6.49317       6.49317       1699.05       1705.55    
  27  0.814279     -0.205452     -0.519773      0.519773       1702.05       1702.57    
  28  0.889639E-01  -2.41952      -6.12114       6.12114       1703.48       1709.60    
  29  0.470746     -0.753437      -1.90612       1.90612       1692.56       1694.46    
  30  0.604709     -0.503008      -1.27256       1.27256       1698.73       1700.00    
  31  0.960406     -0.403992E-01 -0.102206      0.102206       1703.73       1703.83    
  32  0.225544      -1.48924      -3.76762       3.76762       1706.12       1709.88    
  33  0.662278     -0.412070      -1.04249       1.04249       1709.56       1710.60    
  34  0.826290     -0.190809     -0.482728      0.482728       1710.77       1711.25    
  35  0.556070     -0.586861      -1.48470       1.48470       1712.74       1714.22    
  36  0.284946      -1.25545      -3.17617       3.17617       1715.15       1718.33    
  37  0.606321     -0.500346      -1.26582       1.26582       1710.80       1712.06    
  38  0.672946     -0.396090      -1.00207       1.00207       1715.93       1716.94    
  39  0.310037      -1.17106      -2.96267       2.96267       1715.79       1718.75    
  40  0.422732     -0.861016      -2.17828       2.17828       1716.43       1718.61    
  41  0.251543      -1.38014      -3.49162       3.49162       1717.59       1721.08    
  42  0.925797     -0.771000E-01 -0.195055      0.195055       1712.12       1712.32    
  43  0.156113      -1.85718      -4.69847       4.69847       1715.65       1720.35    
  44  0.457425     -0.782143      -1.97874       1.97874       1714.43       1716.41    
  45  0.921892     -0.813271E-01 -0.205749      0.205749       1719.50       1719.70    
  46  0.993514     -0.650683E-02 -0.164616E-01  0.164616E-01   1718.88       1718.89    
  47  0.856821     -0.154526     -0.390935      0.390935       1725.18       1725.58    
  48  0.232993E-01  -3.75933      -9.51072       9.51072       1718.00       1727.51    
  49  0.871002     -0.138111     -0.349405      0.349405       1723.86       1724.21    
  50  0.556798     -0.585552      -1.48139       1.48139       1726.28       1727.76    
  51  0.743323     -0.296625     -0.750430      0.750430       1727.93       1728.68    
  52  0.491734E-01  -3.01240      -7.62106       7.62106       1727.18       1734.80    
  53  0.938254     -0.637342E-01 -0.161241      0.161241       1723.95       1724.12    
  54  0.997749     -0.225330E-02 -0.570062E-02  0.570062E-02   1726.01       1726.01    
  55  0.335619      -1.09178      -2.76208       2.76208       1729.68       1732.44    
  56  0.891450     -0.114905     -0.290699      0.290699       1730.87       1731.16    
  57  0.736527E-01  -2.60839      -6.59896       6.59896       1726.24       1732.84    
  58  0.400157E-01  -3.21848      -8.14243       8.14243       1681.98       1690.12    
loop,thermsimp(1:2)       59  0.650507       1.36106    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    558       1742.56         68.27          1.13         39.23          0.67          0.05        109.35
Just calling func    0   0        109.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    559       1706.35         68.18          1.09         39.32          0.69          0.05        109.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1706.35
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       59
neval is:      558
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       60
neval is:      558


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      558     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.730807E-01  -2.61619      -6.61869       6.61869       1636.21       1642.83    
   2  0.219182      -1.51785      -3.84000       3.84000       1648.93       1652.77    
   3  0.209155E-01  -3.86726      -9.78377       9.78377       1657.49       1667.27    
   4  0.323746      -1.12780      -2.85321       2.85321       1667.64       1670.49    
   5  0.994656     -0.535866E-02 -0.135568E-01  0.135568E-01   1669.22       1669.23    
   6  0.508924E-01  -2.97804      -7.53413       7.53413       1668.78       1676.32    
   7  0.713947     -0.336946     -0.852439      0.852439       1676.35       1677.20    
   8  0.622965     -0.473265      -1.19731       1.19731       1676.55       1677.75    
   9  0.788250E-01  -2.54053      -6.42726       6.42726       1675.31       1681.73    
  10  0.207195      -1.57410      -3.98230       3.98230       1680.85       1684.84    
  11  0.865974     -0.143900     -0.364053      0.364053       1683.59       1683.96    
  12  0.228122      -1.47788      -3.73887       3.73887       1678.17       1681.91    
  13  0.120045E-01  -4.42248      -11.1884       11.1884       1685.12       1696.31    
  14  0.592208     -0.523897      -1.32541       1.32541       1686.22       1687.55    
  15  0.265409      -1.32648      -3.35587       3.35587       1687.22       1690.57    
  16  0.306881      -1.18130      -2.98855       2.98855       1688.12       1691.11    
  17  0.462477     -0.771159      -1.95095       1.95095       1681.98       1683.93    
  18  0.265825      -1.32492      -3.35190       3.35190       1689.48       1692.83    
  19  0.307042      -1.18077      -2.98722       2.98722       1692.45       1695.44    
  20  0.867187     -0.142500     -0.360511      0.360511       1692.56       1692.92    
  21  0.465988     -0.763595      -1.93181       1.93181       1691.28       1693.21    
  22  0.262575      -1.33722      -3.38302       3.38302       1693.70       1697.08    
  23  0.589218E-01  -2.83154      -7.16351       7.16351       1694.87       1702.03    
  24  0.483442     -0.726824      -1.83879       1.83879       1693.72       1695.56    
  25  0.777544     -0.251616     -0.636561      0.636561       1693.80       1694.44    
  26  0.329140      -1.11127      -2.81141       2.81141       1692.30       1695.11    
  27  0.640347     -0.445745      -1.12769       1.12769       1698.73       1699.86    
  28  0.790527E-01  -2.53764      -6.41996       6.41996       1699.59       1706.01    
  29  0.725884     -0.320364     -0.810489      0.810489       1702.05       1702.86    
  30  0.531752E-02  -5.23675      -13.2484       13.2484       1703.73       1716.98    
  31  0.185759      -1.68331      -4.25859       4.25859       1699.05       1703.31    
  32  0.812644     -0.207462     -0.524857      0.524857       1703.48       1704.00    
  33  0.548277E-01  -2.90356      -7.34570       7.34570       1706.12       1713.46    
  34  0.149717      -1.89901      -4.80429       4.80429       1709.56       1714.36    
  35  0.433157     -0.836655      -2.11665       2.11665       1710.77       1712.88    
  36  0.663287     -0.410547      -1.03864       1.03864       1710.80       1711.83    
  37  0.934606     -0.676305E-01 -0.171098      0.171098       1712.12       1712.29    
  38  0.671729     -0.397900      -1.00665       1.00665       1712.74       1713.75    
  39  0.940476     -0.613688E-01 -0.155257      0.155257       1714.43       1714.59    
  40  0.934041     -0.682349E-01 -0.172627      0.172627       1715.93       1716.11    
  41  0.334529E-01  -3.39762      -8.59562       8.59562       1715.15       1723.75    
  42  0.161087      -1.82581      -4.61911       4.61911       1716.43       1721.05    
  43  0.994006     -0.601223E-02 -0.152103E-01  0.152103E-01   1715.79       1715.81    
  44  0.105992      -2.24439      -5.67808       5.67808       1718.88       1724.56    
  45  0.597688     -0.514686      -1.30210       1.30210       1719.50       1720.80    
  46  0.804207     -0.217899     -0.551261      0.551261       1715.65       1716.20    
  47  0.767793     -0.264235     -0.668486      0.668486       1717.59       1718.26    
  48  0.727706     -0.317859     -0.804149      0.804149       1723.95       1724.76    
  49  0.228570      -1.47591      -3.73390       3.73390       1723.86       1727.59    
  50  0.548304     -0.600925      -1.52028       1.52028       1725.18       1726.70    
  51  0.567310     -0.566849      -1.43407       1.43407       1726.01       1727.44    
  52  0.351283      -1.04616      -2.64668       2.64668       1718.00       1720.64    
  53  0.454533     -0.788484      -1.99478       1.99478       1726.28       1728.28    
  54  0.542875     -0.610877      -1.54545       1.54545       1727.93       1729.48    
  55  0.899745     -0.105644     -0.267269      0.267269       1730.87       1731.14    
  56  0.463455     -0.769045      -1.94560       1.94560       1729.68       1731.62    
  57  0.493927     -0.705369      -1.78451       1.78451       1726.24       1728.03    
  58  0.364039      -1.01049      -2.55645       2.55645       1706.35       1708.91    
loop,thermsimp(1:2)       60   6.61869       3.84000    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    560       1741.04         68.22          1.12         39.37          0.67          0.05        109.43
Just calling func    0   0        109.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    561       1708.33         68.24          1.13         39.53          0.33          0.05        109.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  560    1708.3        2.836     -3.156      3.287     -102.6    -0.8111E-01
                     -0.9325E-01  1.244     -99.70      4.343     0.9714E-01

                       3.468     -3.291      1.540      6438.      7000.    

                      -2.073      0.000      0.000      0.000     -1.221    



                      -2.050      0.000      0.000      7000.      813.0    

                      -1.481     -3.405     -6.586     -8.453      7.272    

                      -13.55     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.    -0.3709E-01 0.7688E-01 0.7007E-01 0.1016    

                     -0.2486     0.1086     0.5607E-01 0.6735E-01-0.1962E-01



                     -0.8852    -0.7087      0.000    -0.7839E-01 0.2421    

                      0.1054     0.2056    -0.7116     0.9677E-01 0.1910    

                      0.1286     0.1338    -0.3808     -1.607      7000.    



                      -1.239     -1.237     -2.142     -1.982    -0.3807    

                     -0.3252      9.230      8.459    -0.1532E+05 -5.460    

                     -0.4199     -2.284      8.696      9.180    -0.1969E+05



                      -6.000     0.4878     0.1475      8.879      9.075    

                     -0.1944E+05 -6.000     0.1302    -0.2358      9.766    

                       8.880    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1708.33
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       60
neval is:      560
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    647.653      0.500000    
T0,tstep,tfreq (these do not change):             57
current SAtemp,tstepnext are:    2.52990               571
loop is:       61
neval is:      560


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      571
neval,tstepnext:      560     571

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.503884     -0.685409      -1.73401       1.73401       1636.21       1637.95    
   2  0.474612     -0.745258      -1.88542       1.88542       1648.93       1650.81    
   3  0.414821     -0.879908      -2.22607       2.22607       1657.49       1659.72    
   4  0.982760     -0.173898E-01 -0.439945E-01  0.439945E-01   1669.22       1669.26    
   5  0.874713     -0.133859     -0.338649      0.338649       1667.64       1667.98    
   6  0.322023      -1.13313      -2.86671       2.86671       1668.78       1671.65    
   7  0.906223     -0.984698E-01 -0.249118      0.249118       1676.35       1676.60    
   8  0.964294E-01  -2.33894      -5.91728       5.91728       1676.55       1682.47    
   9  0.219924      -1.51447      -3.83145       3.83145       1675.31       1679.14    
  10  0.689937     -0.371154     -0.938982      0.938982       1678.17       1679.11    
  11  0.377351     -0.974580      -2.46559       2.46559       1681.98       1684.44    
  12  0.143361      -1.94239      -4.91403       4.91403       1683.59       1688.51    
  13  0.351457      -1.04567      -2.64543       2.64543       1680.85       1683.50    
  14  0.578548     -0.547234      -1.38445       1.38445       1686.22       1687.61    
  15  0.738307     -0.303396     -0.767559      0.767559       1687.22       1687.98    
  16  0.840053     -0.174290     -0.440936      0.440936       1688.12       1688.56    
  17  0.808638     -0.212404     -0.537360      0.537360       1689.48       1690.02    
  18  0.432153     -0.838975      -2.12252       2.12252       1692.56       1694.68    
  19  0.436699     -0.828511      -2.09605       2.09605       1691.28       1693.37    
  20  0.537601     -0.620638      -1.57015       1.57015       1693.80       1695.37    
  21  0.422421     -0.861753      -2.18014       2.18014       1692.30       1694.48    
  22  0.508276     -0.676731      -1.71206       1.71206       1692.45       1694.16    
  23  0.991946E-01  -2.31067      -5.84576       5.84576       1693.72       1699.56    
  24  0.980348     -0.198479E-01 -0.502132E-01  0.502132E-01   1685.12       1685.17    
  25  0.365342      -1.00692      -2.54740       2.54740       1693.70       1696.24    
  26  0.847362     -0.165627     -0.419019      0.419019       1698.73       1699.15    
  27  0.399616     -0.917252      -2.32055       2.32055       1694.87       1697.19    
  28  0.301169      -1.20008      -3.03608       3.03608       1702.05       1705.08    
  29  0.578136E-01  -2.85053      -7.21155       7.21155       1699.05       1706.26    
  30  0.698848     -0.358321     -0.906516      0.906516       1703.48       1704.38    
  31  0.140298      -1.96399      -4.96869       4.96869       1699.59       1704.56    
  32  0.459777     -0.777014      -1.96576       1.96576       1706.35       1708.32    
  33  0.320027      -1.13935      -2.88244       2.88244       1710.80       1713.68    
  34  0.926096     -0.767769E-01 -0.194237      0.194237       1712.12       1712.32    
  35  0.867604     -0.142020     -0.359296      0.359296       1710.77       1711.13    
  36  0.415103     -0.879228      -2.22436       2.22436       1706.12       1708.34    
  37  0.723575     -0.323550     -0.818549      0.818549       1712.74       1713.56    
  38  0.211927      -1.55151      -3.92517       3.92517       1709.56       1713.49    
  39  0.517051     -0.659615      -1.66876       1.66876       1714.43       1716.10    
  40  0.561737     -0.576722      -1.45905       1.45905       1715.79       1717.25    
  41  0.395502     -0.927600      -2.34673       2.34673       1715.93       1718.28    
  42  0.707371     -0.346200     -0.875850      0.875850       1715.65       1716.53    
  43  0.820713     -0.197581     -0.499860      0.499860       1703.73       1704.23    
  44  0.344210      -1.06650      -2.69814       2.69814       1717.59       1720.29    
  45  0.201407      -1.60243      -4.05397       4.05397       1718.00       1722.05    
  46  0.647374     -0.434831      -1.10008       1.10008       1719.50       1720.60    
  47  0.814997     -0.204571     -0.517544      0.517544       1716.43       1716.95    
  48  0.865122     -0.144885     -0.366543      0.366543       1715.15       1715.52    
  49  0.200168      -1.60860      -4.06959       4.06959       1718.88       1722.95    
  50  0.248117E-01  -3.69644      -9.35161       9.35161       1723.95       1733.31    
  51  0.895609     -0.110252     -0.278925      0.278925       1725.18       1725.46    
  52  0.350059      -1.04965      -2.65551       2.65551       1726.01       1728.66    
  53  0.348554      -1.05396      -2.66641       2.66641       1723.86       1726.52    
  54  0.267823      -1.31743      -3.33295       3.33295       1726.24       1729.58    
  55  0.657095     -0.419926      -1.06237       1.06237       1726.28       1727.34    
  56  0.653957     -0.424714      -1.07448       1.07448       1727.93       1729.01    
  57  0.434834     -0.832791      -2.10687       2.10687       1730.87       1732.98    
  58  0.838014     -0.176721     -0.447085      0.447085       1708.33       1708.78    
loop,thermsimp(1:2)       61   1.73401       1.88542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    562       1854.62         68.18          1.09         39.32          0.61          0.05        109.25
Just calling func    0   0        109.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    563       1744.94         68.16          1.09         39.28          0.64          0.05        109.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4   1723.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.52990               571
loop is:       61
neval is:      562
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     564       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    564       1665.81         68.38          1.14         39.56          0.09          0.05        109.23
iter,obj,time:    565       1666.52         68.42          1.15         39.39          0.28          0.05        109.29
iter,obj,time:    566       1659.13         68.15          1.12         39.21          0.83          0.05        109.35
iter,obj,time:    567       1675.47         68.20          1.13         39.21          0.82          0.05        109.40
iter,obj,time:    568       1658.79         68.20          1.12         39.25          0.67          0.05        109.28
iter,obj,time:    569       1685.80         68.18          1.12         39.57          0.40          0.05        109.32
iter,obj,time:    570       1679.43         68.14          1.12         39.35          0.62          0.05        109.28
iter,obj,time:    571       1681.13         68.19          1.13         39.52          0.32          0.05        109.21
iter,obj,time:    572       1673.90         68.10          1.10         39.45          0.55          0.05        109.25
iter,obj,time:    573       1674.86         68.22          1.14         39.43          0.43          0.05        109.27
iter,obj,time:    574       1684.35         68.41          1.19         39.38          0.30          0.05        109.33
iter,obj,time:    575       1674.26         68.30          1.07         39.24          0.64          0.05        109.30
iter,obj,time:    576       1666.46         68.15          1.11         39.37          0.59          0.05        109.27
