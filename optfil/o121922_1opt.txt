nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    656.689      0.500000    
Tfreq:   48
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    656.689      0.500000    
Tfreq:   48
 Estimating   48 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2       2188.96         72.77          1.16         39.63          1.32          0.05        114.93
iter,obj,time:      3       2246.97         68.15          1.20         39.42          2.18          0.05        110.99
iter,obj,time:      4       2185.36         68.04          1.19         39.50          1.86          0.05        110.63
iter,obj,time:      5       2087.35         68.05          1.18         39.52          1.82          0.05        110.61
iter,obj,time:      6       2390.48         67.92          1.16         39.66          2.06          0.05        110.85
iter,obj,time:      7       1953.34         67.91          1.17         39.44          1.80          0.05        110.37
iter,obj,time:      8       2330.37         68.09          1.16         39.48          1.88          0.05        110.66
iter,obj,time:      9       2213.55         68.06          1.19         39.52          1.70          0.05        110.52
iter,obj,time:     10       2324.69         68.00          1.20         39.45          1.91          0.05        110.61
iter,obj,time:     11       2207.09         67.88          1.17         39.59          1.95          0.05        110.63
iter,obj,time:     12       2058.28         67.92          1.15         40.12          1.34          0.05        110.59
iter,obj,time:     13       1187.73         68.06          1.16         39.64          1.88          0.05        110.79
iter,obj,time:     14       1284.82         67.84          1.16         39.52          1.98          0.04        110.55
iter,obj,time:     15       2243.31         68.11          1.21         39.54          1.96          0.05        110.87
iter,obj,time:     16       2335.74         68.06          1.18         39.45          1.90          0.05        110.63
iter,obj,time:     17       2197.16         68.14          1.18         39.56          1.80          0.05        110.73
iter,obj,time:     18       2197.23         68.09          1.20         39.83          1.66          0.05        110.82
iter,obj,time:     19       2190.01         68.05          1.18         39.49          2.03          0.05        110.80
iter,obj,time:     20       2188.00         67.88          1.16         39.64          2.01          0.05        110.74
iter,obj,time:     21       2188.28         67.92          1.17         39.49          2.02          0.05        110.65
iter,obj,time:     22       2184.79         68.14          1.20         39.49          2.14          0.05        111.02
iter,obj,time:     23       2258.16         68.09          1.17         39.52          1.67          0.05        110.49
iter,obj,time:     24       1956.20         68.09          1.18         39.92          1.48          0.05        110.72
iter,obj,time:     25       2245.10         68.12          1.19         39.46          1.92          0.05        110.74
iter,obj,time:     26       1987.00         68.15          1.18         39.52          2.10          0.05        110.99
iter,obj,time:     27       1869.96         68.09          1.20         39.38          1.92          0.05        110.63
iter,obj,time:     28       2186.56         68.00          1.19         39.50          2.18          0.05        110.91
iter,obj,time:     29       2142.49         68.09          1.18         39.48          1.84          0.05        110.63
iter,obj,time:     30       2010.43         68.20          1.20         39.45          1.87          0.04        110.75
iter,obj,time:     31       2085.96         68.04          1.19         39.55          1.67          0.05        110.49
iter,obj,time:     32       2161.98         67.95          1.19         39.38          2.05          0.05        110.61
iter,obj,time:     33       3198.36         68.09          1.19         39.70          1.61          0.05        110.63
iter,obj,time:     34       2892.97         68.05          1.19         39.39          1.89          0.05        110.57
iter,obj,time:     35       2480.55         68.02          1.16         39.50          1.89          0.05        110.62
iter,obj,time:     36       2504.33         67.60          1.09         39.20          3.05          0.05        110.99
iter,obj,time:     37       1817.15         68.09          1.19         39.53          1.85          0.05        110.70
iter,obj,time:     38       2261.16         68.52          1.23         39.28          2.01          0.05        111.09
iter,obj,time:     39       2329.41         67.84          1.15         39.49          2.21          0.05        110.73
iter,obj,time:     40       2185.83         67.91          1.16         39.63          1.80          0.05        110.56
iter,obj,time:     41       2329.11         67.93          1.16         39.34          2.34          0.05        110.82
iter,obj,time:     42       2448.82         68.07          1.22         39.45          1.91          0.05        110.70
iter,obj,time:     43       2292.06         68.14          1.15         39.52          1.87          0.05        110.72
iter,obj,time:     44       2182.48         68.12          1.16         39.38          2.13          0.05        110.84
iter,obj,time:     45       2590.46         68.05          1.18         39.91          1.36          0.05        110.56
iter,obj,time:     46       2742.56         68.07          1.17         39.49          1.75          0.05        110.53
iter,obj,time:     47       2341.90         67.88          1.17         39.59          2.07          0.05        110.75
iter,obj,time:     48       2209.31         67.89          1.15         39.55          1.98          0.04        110.61
iter,obj,time:     49       2252.14         68.05          1.18         39.78          1.59          0.05        110.65
iter,obj,time:     50       2328.46         68.09          1.20         39.06          1.77          0.05        110.16

    1    2189.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    2    2247.0        1.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    3    2185.4        3.423     -4.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    4    2087.3        3.423     -2.996      2.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    5    2390.5        3.423     -2.996      4.428     -102.6     -1.668    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    6    1953.3        3.423     -2.996      4.428     -102.6     0.3318    
                      -1.926     0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    7    2330.4        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 -1.085     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    8    2213.6        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      2.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

    9    2324.7        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     -1.135    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   10    2207.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       1.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   11    2058.3        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487     -2.742      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   12    1187.7        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      2.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   13    1284.8        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      8509.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   14    2243.3        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -1.675      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   15    2335.7        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      1511.    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   16    2197.2        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                     -0.8834     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   17    2197.2        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383    -0.1897     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   18    2190.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -2.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   19    2188.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -2.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   20    2188.3        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      13.67    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   21    2184.8        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                     -0.3108     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   22    2258.2        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949     0.1072E+05  0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   23    1956.2        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000     0.1279E+05



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   24    2245.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       4252.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   25    1987.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.     0.1290E+05  6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   26    1870.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.     0.1227E+05  2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   27    2186.6        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      5856.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   28    2142.5        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      8214.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   29    2010.4        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       7512.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   30    2086.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.340     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   31    2162.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.090     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   32    3198.4        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -1.642     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   33    2893.0        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.482    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   34    2480.6        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      10.12      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   35    2504.3        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      9.018    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   36    1817.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1731E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   37    2261.2        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -4.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   38    2329.4        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                       1.080     -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   39    2185.8        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -1.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   40    2329.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      9.425      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   41    2448.8        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.582    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   42    2292.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000      1.491     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   43    2182.5        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908      1.087      9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   44    2590.5        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.523      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   45    2742.6        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      9.482    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   46    2341.9        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000    -0.6525E-01-0.7683      9.774    

                       9.417    -0.1891E+05 -6.000    

   47    2209.3        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065     0.2317      9.774    

                       9.417    -0.1891E+05 -6.000    

   48    2252.1        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      10.27    

                       9.417    -0.1891E+05 -6.000    

   49    2328.5        3.423     -2.996      4.428     -102.6     0.3318    
                      0.7391E-01 0.9154     -99.70      4.985     0.8652    

                       3.487    -0.7422      1.540      5672.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.175      0.000      0.000      7000.      511.4    

                      -1.383     -5.190     -7.780     -7.933      8.672    

                      -5.311     -3.949      5362.      0.000      6393.    



                       2126.      6450.      6136.      2928.      4107.    

                       3756.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.840     -1.590     -2.142     -1.982    -0.3807    

                     -0.3252      9.623      8.518    -0.1481E+05 -5.355    

                      0.8000E-01 -2.493      8.925      9.082    -0.1969E+05



                      -6.000     0.4908     0.8735E-01  9.023      8.982    

                     -0.1944E+05 -6.000     -1.065    -0.7683      9.774    

                       9.917    -0.1891E+05 -6.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          49          49

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        1
neval is:       49


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       49      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -969.218       969.218       2188.96       3158.18    
   2  0.709707     -0.342904      -225.181       225.181       2246.97       2472.15    
   3  0.151889      -1.88460      -1237.60       1237.60       2185.36       3422.96    
   4  0.456170E-01  -3.08747      -2027.51       2027.51       2087.35       4114.86    
   5  0.882557     -0.124932      -82.0413       82.0413       2390.48       2472.52    
   6  0.711292     -0.340672      -223.716       223.716       1953.34       2177.06    
   7  0.241669      -1.42019      -932.622       932.622       2330.37       3263.00    
   8  0.682871     -0.381450      -250.494       250.494       2213.55       2464.05    
   9  0.500657     -0.691834      -454.320       454.320       2324.69       2779.01    
  10  0.494633     -0.703939      -462.269       462.269       2207.09       2669.36    
  11  0.437126     -0.827535      -543.433       543.433       2058.28       2601.72    
  12  0.462981     -0.770069      -505.696       505.696       1187.73       1693.42    
  13  0.988878     -0.111840E-01  -7.34441       7.34441       1284.82       1292.16    
  14  0.878158     -0.129929      -85.3230       85.3230       2243.31       2328.64    
  15  0.825605     -0.191638      -125.847       125.847       2335.74       2461.59    
  16  0.966665     -0.339033E-01  -22.2640       22.2640       2197.16       2219.42    
  17  0.340930      -1.07608      -706.648       706.648       2197.23       2903.88    
  18  0.288920      -1.24161      -815.350       815.350       2190.01       3005.36    
  19  0.442843     -0.814539      -534.899       534.899       2188.00       2722.90    
  20  0.878635     -0.129386      -84.9662       84.9662       2188.28       2273.25    
  21  0.198777E-01  -3.91816      -2573.01       2573.01       2184.79       4757.80    
  22  0.315829      -1.15255      -756.869       756.869       2258.16       3015.03    
  23  0.208690      -1.56690      -1028.97       1028.97       1956.20       2985.17    
  24  0.849393     -0.163234      -107.194       107.194       2245.10       2352.29    
  25  0.945818     -0.557056E-01  -36.5813       36.5813       1987.00       2023.58    
  26  0.567839     -0.565917      -371.632       371.632       1869.96       2241.59    
  27  0.718388     -0.330745      -217.197       217.197       2186.56       2403.75    
  28  0.115406      -2.15930      -1417.99       1417.99       2142.49       3560.47    
  29  0.659869E-01  -2.71830      -1785.08       1785.08       2010.43       3795.51    
  30  0.171393      -1.76380      -1158.27       1158.27       2085.96       3244.23    
  31  0.161953      -1.82045      -1195.47       1195.47       2161.98       3357.45    
  32  0.455406     -0.786566      -516.529       516.529       3198.36       3714.89    
  33  0.788693     -0.237378      -155.883       155.883       2892.97       3048.85    
  34  0.157754      -1.84672      -1212.72       1212.72       2480.55       3693.28    
  35  0.126279      -2.06926      -1358.86       1358.86       2504.33       3863.19    
  36  0.646962     -0.435467      -285.967       285.967       1817.15       2103.11    
  37  0.730769     -0.313658      -205.976       205.976       2261.16       2467.14    
  38  0.443446E-01  -3.11577      -2046.09       2046.09       2329.41       4375.50    
  39  0.219048      -1.51847      -997.160       997.160       2185.83       3182.99    
  40  0.311223E-01  -3.46983      -2278.60       2278.60       2329.11       4607.72    
  41  0.864417     -0.145700      -95.6798       95.6798       2448.82       2544.50    
  42  0.372606     -0.987233      -648.305       648.305       2292.06       2940.37    
  43  0.599250E-01  -2.81466      -1848.36       1848.36       2182.48       4030.84    
  44  0.250528      -1.38418      -908.978       908.978       2590.46       3499.44    
  45  0.404968E-01  -3.20653      -2105.70       2105.70       2742.56       4848.26    
  46  0.792822     -0.232156      -152.454       152.454       2341.90       2494.36    
  47  0.826691     -0.190324      -124.984       124.984       2209.31       2334.30    
  48  0.258424      -1.35316      -888.603       888.603       2252.14       3140.74    
  49  0.713620     -0.337405      -221.570       221.570       2328.46       2550.03    
loop,thermsimp(1:2)        1   969.218       225.181    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     51       2668.10         68.02          1.13         39.47          2.20          0.05        110.88
Just calling func    0   0        110.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2668.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        1
neval is:       50
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        2
neval is:       50


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       50      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -684.299       684.299       1284.82       1969.11    
   2  0.440787     -0.819193      -537.956       537.956       1187.73       1725.68    
   3  0.685789     -0.377185      -247.694       247.694       1987.00       2234.69    
   4  0.673104     -0.395856      -259.954       259.954       1817.15       2077.10    
   5  0.655536     -0.422301      -277.321       277.321       1953.34       2230.66    
   6  0.422838     -0.860766      -565.256       565.256       2197.16       2762.42    
   7  0.300870      -1.20108      -788.735       788.735       1869.96       2658.69    
   8  0.776987     -0.252331      -165.703       165.703       2188.28       2353.99    
   9  0.170551      -1.76872      -1161.50       1161.50       2243.31       3404.81    
  10  0.587497     -0.531884      -349.283       349.283       2209.31       2558.60    
  11  0.250425      -1.38459      -909.248       909.248       2245.10       3154.34    
  12  0.776362E-01  -2.55572      -1678.32       1678.32       2186.56       3864.87    
  13  0.766647     -0.265729      -174.501       174.501       2335.74       2510.24    
  14  0.480193     -0.733568      -481.726       481.726       2213.55       2695.28    
  15  0.434643     -0.833231      -547.174       547.174       2261.16       2808.34    
  16  0.815924E-01  -2.50602      -1645.68       1645.68       2246.97       3892.65    
  17  0.724257E-01  -2.62519      -1723.94       1723.94       2390.48       4114.42    
  18  0.573795     -0.555483      -364.780       364.780       2341.90       2706.68    
  19  0.196096      -1.62915      -1069.85       1069.85       2448.82       3518.67    
  20  0.240673      -1.42432      -935.333       935.333       2328.46       3263.80    
  21  0.194228      -1.63872      -1076.13       1076.13       2058.28       3134.42    
  22  0.236387      -1.44229      -947.134       947.134       2207.09       3154.23    
  23  0.261662      -1.34070      -880.424       880.424       2188.00       3068.43    
  24  0.146321      -1.92195      -1262.13       1262.13       2324.69       3586.82    
  25  0.169637      -1.77410      -1165.03       1165.03       2197.23       3362.26    
  26  0.886717     -0.120229      -78.9532       78.9532       2292.06       2371.01    
  27  0.253412      -1.37274      -901.464       901.464       1956.20       2857.67    
  28  0.470820     -0.753279      -494.670       494.670       2190.01       2684.68    
  29  0.329871      -1.10905      -728.304       728.304       2258.16       2986.47    
  30  0.726784     -0.319126      -209.566       209.566       2892.97       3102.54    
  31  0.612351     -0.490450      -322.074       322.074       2252.14       2574.21    
  32  0.146573      -1.92023      -1261.00       1261.00       2188.96       3449.96    
  33  0.812633     -0.207476      -136.247       136.247       2185.83       2322.08    
  34  0.486789     -0.719925      -472.767       472.767       2085.96       2558.73    
  35  0.653508     -0.425400      -279.356       279.356       2330.37       2609.73    
  36  0.180127      -1.71409      -1125.63       1125.63       2161.98       3287.61    
  37  0.155218      -1.86292      -1223.36       1223.36       2185.36       3408.72    
  38  0.830615     -0.185589      -121.874       121.874       2590.46       2712.33    
  39  0.728345     -0.316980      -208.157       208.157       2142.49       2350.64    
  40  0.262318      -1.33820      -878.781       878.781       2480.55       3359.34    
  41  0.234222      -1.45148      -953.174       953.174       3198.36       4151.53    
  42  0.250201      -1.38549      -909.838       909.838       2010.43       2920.27    
  43  0.898433     -0.107103      -70.3337       70.3337       2504.33       2574.67    
  44  0.580277     -0.544250      -357.403       357.403       2182.48       2539.88    
  45  0.823617     -0.194050      -127.430       127.430       2087.35       2214.78    
  46  0.820676     -0.197627      -129.780       129.780       2329.41       2459.19    
  47  0.502494     -0.688171      -451.914       451.914       2329.11       2781.03    
  48  0.751016     -0.286329      -188.029       188.029       2184.79       2372.82    
  49  0.360461      -1.02037      -670.067       670.067       2668.10       3338.16    
loop,thermsimp(1:2)        2   684.299       537.956    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     52       1968.99         68.26          1.22         39.23          1.59          0.05        110.35
Just calling func    0   0        110.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     53       3379.47         67.46          1.12         39.27          2.34          0.04        110.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1968.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        2
neval is:       52
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        3
neval is:       52


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       52      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -1171.80       1171.80       1187.73       2359.52    
   2  0.274399      -1.29317      -849.212       849.212       1284.82       2134.03    
   3  0.597410E-01  -2.81774      -1850.38       1850.38       1817.15       3667.53    
   4  0.283115E-01  -3.56449      -2340.76       2340.76       2087.35       4428.11    
   5  0.901069     -0.104174      -68.4099       68.4099       1953.34       2021.75    
   6  0.717939     -0.331371      -217.608       217.608       1987.00       2204.61    
   7  0.294866      -1.22123      -801.971       801.971       2185.83       2987.80    
   8  0.935651     -0.665127E-01  -43.6782       43.6782       2142.49       2186.17    
   9  0.314362      -1.15721      -759.928       759.928       2188.28       2948.21    
  10  0.807729     -0.213529      -140.222       140.222       2292.06       2432.28    
  11  0.757191     -0.278140      -182.651       182.651       2184.79       2367.44    
  12  0.508654     -0.675987      -443.913       443.913       2329.41       2773.32    
  13  0.722060     -0.325647      -213.849       213.849       2335.74       2549.59    
  14  0.424032     -0.857947      -563.405       563.405       2182.48       2745.88    
  15  0.786154     -0.240602      -158.001       158.001       2209.31       2367.32    
  16  0.399894     -0.916557      -601.893       601.893       2085.96       2687.86    
  17  0.757416     -0.277843      -182.457       182.457       2252.14       2434.59    
  18  0.637270     -0.450563      -295.880       295.880       2504.33       2800.21    
  19  0.586055     -0.534342      -350.897       350.897       2330.37       2681.27    
  20  0.821724     -0.196351      -128.942       128.942       1869.96       1998.90    
  21  0.921558     -0.816897E-01  -53.6448       53.6448       2190.01       2243.65    
  22  0.985596     -0.145083E-01  -9.52747       9.52747       2213.55       2223.08    
  23  0.257194      -1.35793      -891.735       891.735       2341.90       3233.64    
  24  0.921438E-01  -2.38440      -1565.81       1565.81       2590.46       4156.27    
  25  0.114653      -2.16584      -1422.29       1422.29       2197.16       3619.45    
  26  0.379827     -0.968040      -635.702       635.702       2329.11       2964.82    
  27  0.541451     -0.613503      -402.881       402.881       2261.16       2664.04    
  28  0.544274     -0.608302      -399.466       399.466       1956.20       2355.67    
  29  0.934365     -0.678883E-01  -44.5816       44.5816       2010.43       2055.01    
  30  0.266419E-01  -3.62527      -2380.68       2380.68       2258.16       4638.84    
  31  0.919572     -0.838466E-01  -55.0612       55.0612       2188.00       2243.06    
  32  0.864639     -0.145444      -95.5113       95.5113       2892.97       2988.48    
  33  0.341156      -1.07542      -706.215       706.215       2058.28       2764.50    
  34  0.803175     -0.219182      -143.935       143.935       2207.09       2351.03    
  35  0.699424     -0.357498      -234.765       234.765       2245.10       2479.86    
  36  0.223868E-01  -3.79928      -2494.95       2494.95       2328.46       4823.41    
  37  0.605689     -0.501389      -329.257       329.257       2161.98       2491.24    
  38  0.312349      -1.16363      -764.146       764.146       2668.10       3432.24    
  39  0.437501     -0.826675      -542.869       542.869       2480.55       3023.42    
  40  0.303330      -1.19293      -783.387       783.387       2197.23       2980.62    
  41  0.129735      -2.04226      -1341.13       1341.13       2243.31       3584.44    
  42  0.954352     -0.467224E-01  -30.6821       30.6821       2185.36       2216.04    
  43  0.519807     -0.654297      -429.670       429.670       2188.96       2618.63    
  44  0.950560     -0.507036E-01  -33.2965       33.2965       2448.82       2482.12    
  45  0.443941     -0.812064      -533.274       533.274       2324.69       2857.96    
  46  0.911446     -0.927229E-01  -60.8902       60.8902       2186.56       2247.45    
  47  0.782475     -0.245293      -161.081       161.081       2246.97       2408.05    
  48  0.412534     -0.885438      -581.458       581.458       2390.48       2971.94    
  49  0.843850     -0.169780      -111.493       111.493       1968.99       2080.48    
loop,thermsimp(1:2)        3   1171.80       849.212    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     54       2064.30         68.04          1.16         39.44          2.32          0.05        111.00
Just calling func    0   0        111.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     55       2082.60         68.08          1.12         39.79          1.79          0.05        110.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2064.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        3
neval is:       54
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        4
neval is:       54


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       54      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -81.5358       81.5358       1869.96       1951.49    
   2  0.114178      -2.16999      -1425.01       1425.01       1953.34       3378.35    
   3  0.217017      -1.52778      -1003.28       1003.28       2010.43       3013.70    
   4  0.138317      -1.97821      -1299.07       1299.07       1968.99       3268.06    
   5  0.832728     -0.183048      -120.206       120.206       1284.82       1405.02    
   6  0.390825     -0.939496      -616.957       616.957       2142.49       2759.44    
   7  0.283633      -1.26007      -827.478       827.478       1987.00       2814.48    
   8  0.725809     -0.320468      -210.448       210.448       2185.36       2395.81    
   9  0.506121     -0.680979      -447.192       447.192       2213.55       2660.75    
  10  0.216234      -1.53139      -1005.65       1005.65       2188.00       3193.65    
  11  0.637942     -0.449509      -295.188       295.188       2190.01       2485.20    
  12  0.536707     -0.622302      -408.659       408.659       2186.56       2595.22    
  13  0.231844      -1.46169      -959.878       959.878       2207.09       3166.97    
  14  0.491379     -0.710540      -466.604       466.604       1956.20       2422.81    
  15  0.825774     -0.191434      -125.713       125.713       1187.73       1313.44    
  16  0.671593     -0.398102      -261.430       261.430       2209.31       2470.74    
  17  0.549103     -0.599470      -393.665       393.665       2184.79       2578.45    
  18  0.659287     -0.416597      -273.575       273.575       2246.97       2520.54    
  19  0.205012      -1.58469      -1040.65       1040.65       2292.06       3332.71    
  20  0.400541E-02  -5.52011      -3625.00       3625.00       2252.14       5877.13    
  21  0.750831     -0.286575      -188.191       188.191       2245.10       2433.29    
  22  0.619921     -0.478162      -314.004       314.004       2448.82       2762.83    
  23  0.435226     -0.831889      -546.293       546.293       2161.98       2708.27    
  24  0.460974     -0.774414      -508.550       508.550       2335.74       2844.29    
  25  0.891582E-01  -2.41734      -1587.44       1587.44       2188.96       3776.41    
  26  0.589618E-01  -2.83087      -1859.00       1859.00       2261.16       4120.16    
  27  0.541391     -0.613613      -402.953       402.953       2330.37       2733.33    
  28  0.545108E-01  -2.90936      -1910.54       1910.54       2085.96       3996.51    
  29  0.744722     -0.294744      -193.555       193.555       2182.48       2376.03    
  30  0.712477     -0.339008      -222.623       222.623       2058.28       2280.91    
  31  0.563836     -0.572992      -376.277       376.277       2329.41       2705.69    
  32  0.161455      -1.82353      -1197.49       1197.49       2504.33       3701.82    
  33  0.640738     -0.445135      -292.316       292.316       2324.69       2617.00    
  34  0.157494      -1.84837      -1213.80       1213.80       2188.28       3402.09    
  35  0.695323     -0.363378      -238.627       238.627       2329.11       2567.74    
  36  0.792798     -0.232186      -152.474       152.474       2390.48       2542.96    
  37  0.940634     -0.612017E-01  -40.1905       40.1905       2197.23       2237.42    
  38  0.750008     -0.287672      -188.911       188.911       2185.83       2374.74    
  39  0.298939E-01  -3.51010      -2305.05       2305.05       2892.97       5198.02    
  40  0.633510     -0.456480      -299.765       299.765       2480.55       2780.32    
  41  0.465723     -0.764164      -501.819       501.819       2341.90       2843.72    
  42  0.916259     -0.874560E-01  -57.4314       57.4314       2668.10       2725.53    
  43  0.451376     -0.795456      -522.367       522.367       2243.31       2765.68    
  44  0.414090     -0.881672      -578.985       578.985       2197.16       2776.14    
  45  0.273092      -1.29795      -852.348       852.348       1817.15       2669.50    
  46  0.361379      -1.01783      -668.396       668.396       2590.46       3258.86    
  47  0.548848     -0.599934      -393.970       393.970       2087.35       2481.32    
  48  0.832309     -0.183552      -120.537       120.537       2258.16       2378.70    
  49  0.673017     -0.395985      -260.039       260.039       2064.30       2324.34    
loop,thermsimp(1:2)        4   81.5358       1425.01    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     56       2034.09         68.41          1.21         39.43          1.73          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2034.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        4
neval is:       55
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        5
neval is:       55


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       55      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -21.2293       21.2293       1187.73       1208.96    
   2  0.384676     -0.955353      -627.370       627.370       1284.82       1912.19    
   3  0.472770     -0.749146      -491.957       491.957       1869.96       2361.91    
   4  0.131186      -2.03114      -1333.83       1333.83       2197.23       3531.06    
   5  0.387497     -0.948046      -622.572       622.572       2058.28       2680.85    
   6  0.474858     -0.744739      -489.062       489.062       2064.30       2553.37    
   7  0.654056     -0.424563      -278.806       278.806       2185.83       2464.64    
   8  0.375266     -0.980119      -643.634       643.634       2182.48       2826.11    
   9  0.605577     -0.501574      -329.378       329.378       2258.16       2587.54    
  10  0.485605     -0.722360      -474.366       474.366       2185.36       2659.73    
  11  0.503843     -0.685490      -450.154       450.154       1956.20       2406.36    
  12  0.374521     -0.982108      -644.940       644.940       2245.10       2890.04    
  13  0.955542E-01  -2.34806      -1541.95       1541.95       2209.31       3751.26    
  14  0.902567     -0.102512      -67.3186       67.3186       2087.35       2154.67    
  15  0.347215      -1.05781      -694.653       694.653       2190.01       2884.66    
  16  0.893138     -0.113014      -74.2152       74.2152       2246.97       2321.18    
  17  0.561145     -0.577776      -379.419       379.419       2390.48       2769.90    
  18  0.667287     -0.404536      -265.654       265.654       2329.11       2594.77    
  19  0.601102     -0.508991      -334.249       334.249       2184.79       2519.04    
  20  0.569928     -0.562245      -369.220       369.220       2186.56       2555.78    
  21  0.655926     -0.421708      -276.931       276.931       2324.69       2601.62    
  22  0.355892      -1.03313      -678.444       678.444       2213.55       2892.00    
  23  0.208013      -1.57015      -1031.10       1031.10       1817.15       2848.25    
  24  0.879772     -0.128093      -84.1172       84.1172       2329.41       2413.53    
  25  0.114206E-01  -4.47233      -2936.93       2936.93       2161.98       5098.92    
  26  0.950245     -0.510357E-01  -33.5146       33.5146       2668.10       2701.61    
  27  0.321268      -1.13548      -745.658       745.658       2330.37       3076.03    
  28  0.379005     -0.970207      -637.125       637.125       2142.49       2779.61    
  29  0.117960      -2.13741      -1403.62       1403.62       2448.82       3852.44    
  30  0.822558     -0.195337      -128.276       128.276       2243.31       2371.59    
  31  0.671085     -0.398860      -261.927       261.927       2197.16       2459.09    
  32  0.220279      -1.51286      -993.479       993.479       2480.55       3474.03    
  33  0.836335     -0.178727      -117.368       117.368       1987.00       2104.37    
  34  0.982442E-01  -2.32030      -1523.72       1523.72       2341.90       3865.62    
  35  0.912526     -0.915389E-01  -60.1126       60.1126       2335.74       2395.86    
  36  0.758802     -0.276015      -181.256       181.256       2010.43       2191.68    
  37  0.562651     -0.575096      -377.659       377.659       2207.09       2584.75    
  38  0.248142      -1.39375      -915.264       915.264       2188.00       3103.27    
  39  0.864881     -0.145163      -95.3271       95.3271       2590.46       2685.79    
  40  0.495151     -0.702893      -461.582       461.582       1968.99       2430.57    
  41  0.112352E-01  -4.48870      -2947.68       2947.68       2292.06       5239.74    
  42  0.745500     -0.293700      -192.869       192.869       1953.34       2146.21    
  43  0.405071     -0.903693      -593.446       593.446       2188.28       2781.73    
  44  0.617259     -0.482466      -316.831       316.831       2504.33       2821.16    
  45  0.992755     -0.727089E-02  -4.77472       4.77472       2188.96       2193.74    
  46  0.888739     -0.117952      -77.4579       77.4579       2085.96       2163.42    
  47  0.976701     -0.235748E-01  -15.4813       15.4813       2261.16       2276.64    
  48  0.461976     -0.772242      -507.123       507.123       2892.97       3400.09    
  49  0.150581      -1.89325      -1243.28       1243.28       2034.09       3277.37    
loop,thermsimp(1:2)        5   21.2293       627.370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     57       2082.57         67.88          1.15         39.75          1.80          0.05        110.63
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2082.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        5
neval is:       56
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        6
neval is:       56


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       56      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -141.439       141.439       1187.73       1329.17    
   2  0.337878      -1.08507      -712.555       712.555       1284.82       1997.37    
   3  0.930612     -0.719127E-01  -47.2243       47.2243       1987.00       2034.22    
   4  0.843645     -0.170024      -111.653       111.653       1953.34       2064.99    
   5  0.757799     -0.277337      -182.124       182.124       2087.35       2269.47    
   6  0.627925     -0.465335      -305.581       305.581       2085.96       2391.54    
   7  0.412314     -0.885971      -581.808       581.808       2010.43       2592.24    
   8  0.282274      -1.26488      -830.631       830.631       2188.96       3019.60    
   9  0.426609E-01  -3.15447      -2071.51       2071.51       2261.16       4332.67    
  10  0.484876     -0.723862      -475.352       475.352       2246.97       2722.32    
  11  0.372210     -0.988296      -649.004       649.004       1869.96       2518.96    
  12  0.740507     -0.300421      -197.283       197.283       2243.31       2440.60    
  13  0.361519      -1.01744      -668.143       668.143       2335.74       3003.89    
  14  0.421034     -0.865042      -568.064       568.064       1956.20       2524.27    
  15  0.780595     -0.247699      -162.662       162.662       2329.41       2492.07    
  16  0.758410     -0.276531      -181.595       181.595       1968.99       2150.58    
  17  0.522921E-01  -2.95091      -1937.83       1937.83       2197.16       4134.99    
  18  0.609673     -0.494833      -324.952       324.952       2185.83       2510.78    
  19  0.204029      -1.58949      -1043.80       1043.80       2184.79       3228.59    
  20  0.516385     -0.660902      -434.007       434.007       2064.30       2498.31    
  21  0.323918      -1.12726      -740.262       740.262       2186.56       2926.82    
  22  0.671820     -0.397765      -261.208       261.208       2207.09       2468.30    
  23  0.850344     -0.162114      -106.458       106.458       2258.16       2364.62    
  24  0.515631     -0.662364      -434.967       434.967       2329.11       2764.08    
  25  0.919408     -0.840249E-01  -55.1783       55.1783       2324.69       2379.87    
  26  0.516519     -0.660643      -433.837       433.837       2185.36       2619.20    
  27  0.986900     -0.131869E-01  -8.65968       8.65968       2058.28       2066.94    
  28  0.127351      -2.06081      -1353.31       1353.31       2590.46       3943.77    
  29  0.775028E-01  -2.55744      -1679.44       1679.44       2668.10       4347.54    
  30  0.778307     -0.250634      -164.589       164.589       2390.48       2555.07    
  31  0.548570     -0.600441      -394.303       394.303       2142.49       2536.79    
  32  0.191672      -1.65197      -1084.83       1084.83       2188.28       3273.11    
  33  0.593733     -0.521326      -342.349       342.349       2504.33       2846.68    
  34  0.612853     -0.489631      -321.535       321.535       2182.48       2504.01    
  35  0.872749     -0.136107      -89.3799       89.3799       1817.15       1906.53    
  36  0.291105E-01  -3.53666      -2322.49       2322.49       2190.01       4512.49    
  37  0.310804      -1.16859      -767.402       767.402       2245.10       3012.50    
  38  0.238051      -1.43527      -942.527       942.527       2213.55       3156.08    
  39  0.600295     -0.510334      -335.131       335.131       2330.37       2665.50    
  40  0.856575     -0.154813      -101.664       101.664       2188.00       2289.67    
  41  0.127990      -2.05580      -1350.03       1350.03       2034.09       3384.11    
  42  0.390396E-01  -3.24318      -2129.76       2129.76       2892.97       5022.73    
  43  0.469298E-01  -3.05910      -2008.88       2008.88       2480.55       4489.44    
  44  0.170208      -1.77073      -1162.82       1162.82       2197.23       3360.05    
  45  0.457801     -0.781320      -513.084       513.084       2209.31       2722.40    
  46  0.451589     -0.794982      -522.056       522.056       2448.82       2970.88    
  47  0.601844     -0.507757      -333.439       333.439       2341.90       2675.34    
  48  0.923684     -0.793857E-01  -52.1318       52.1318       2161.98       2214.11    
  49  0.113154      -2.17901      -1430.93       1430.93       2082.57       3513.50    
loop,thermsimp(1:2)        6   141.439       712.555    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     58       1184.14         68.22          1.20         39.37          1.81          0.05        110.66
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     59       1641.42         68.01          1.20         39.35          1.74          0.05        110.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1184.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        6
neval is:       58
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        7
neval is:       58


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       58      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -1404.98       1404.98       1187.73       2592.71    
   2  0.421875     -0.863045      -566.753       566.753       1817.15       2383.90    
   3  0.700103     -0.356528      -234.128       234.128       1284.82       1518.94    
   4  0.209367      -1.56367      -1026.84       1026.84       1987.00       3013.84    
   5  0.117251      -2.14344      -1407.57       1407.57       1953.34       3360.91    
   6  0.898330     -0.107218      -70.4087       70.4087       2058.28       2128.69    
   7  0.209806      -1.56157      -1025.47       1025.47       1968.99       2994.46    
   8  0.917155     -0.864790E-01  -56.7898       56.7898       2161.98       2218.77    
   9  0.120514E-01  -4.41857      -2901.63       2901.63       2087.35       4988.98    
  10  0.189983      -1.66082      -1090.65       1090.65       2188.00       3278.65    
  11  0.257131      -1.35817      -891.895       891.895       2258.16       3150.06    
  12  0.913158E-01  -2.39343      -1571.74       1571.74       2324.69       3896.43    
  13  0.336531      -1.08906      -715.177       715.177       2085.96       2801.14    
  14  0.318351      -1.14460      -751.647       751.647       2243.31       2994.96    
  15  0.919606     -0.838101E-01  -55.0372       55.0372       2207.09       2262.13    
  16  0.719771E-01  -2.63141      -1728.02       1728.02       2329.41       4057.43    
  17  0.788730E-01  -2.53992      -1667.94       1667.94       2064.30       3732.24    
  18  0.905929     -0.987941E-01  -64.8770       64.8770       2182.48       2247.35    
  19  0.665501     -0.407215      -267.414       267.414       2185.83       2453.25    
  20  0.812159     -0.208059      -136.630       136.630       1869.96       2006.59    
  21  0.412726E-01  -3.18756      -2093.24       2093.24       1956.20       4049.44    
  22  0.256064      -1.36233      -894.626       894.626       2142.49       3037.11    
  23  0.277519      -1.28187      -841.788       841.788       2390.48       3232.27    
  24  0.279550      -1.27457      -836.999       836.999       2010.43       2847.43    
  25  0.857884     -0.153286      -100.661       100.661       2185.36       2286.02    
  26  0.205158      -1.58398      -1040.18       1040.18       2330.37       3370.55    
  27  0.482085     -0.729635      -479.144       479.144       2341.90       2821.05    
  28  0.494966E-01  -3.00585      -1973.91       1973.91       2246.97       4220.88    
  29  0.338791      -1.08237      -710.783       710.783       2209.31       2920.10    
  30  0.249491E-01  -3.69092      -2423.79       2423.79       2329.11       4752.90    
  31  0.480710     -0.732491      -481.019       481.019       2504.33       2985.35    
  32  0.908951E-01  -2.39805      -1574.77       1574.77       2186.56       3761.33    
  33  0.283223      -1.26152      -828.428       828.428       2448.82       3277.25    
  34  0.277734      -1.28109      -841.279       841.279       2335.74       3177.02    
  35  0.504407     -0.684372      -449.420       449.420       2245.10       2694.52    
  36  0.251881      -1.37880      -905.442       905.442       2188.96       3094.41    
  37  0.568193     -0.565294      -371.222       371.222       2213.55       2584.78    
  38  0.186135      -1.68128      -1104.08       1104.08       2184.79       3288.87    
  39  0.964582     -0.360604E-01  -23.6805       23.6805       2188.28       2211.96    
  40  0.493045     -0.707155      -464.381       464.381       2197.23       2661.61    
  41  0.477950     -0.738248      -484.800       484.800       2034.09       2518.89    
  42  0.114879      -2.16388      -1420.99       1420.99       2082.57       3503.56    
  43  0.324003      -1.12700      -740.090       740.090       2590.46       3330.55    
  44  0.720573     -0.327708      -215.203       215.203       2197.16       2412.36    
  45  0.934913     -0.673019E-01  -44.1965       44.1965       2261.16       2305.36    
  46  0.516467     -0.660745      -433.904       433.904       2668.10       3102.00    
  47  0.351513      -1.04551      -686.574       686.574       2480.55       3167.13    
  48  0.310221      -1.17047      -768.636       768.636       2190.01       2958.65    
  49  0.467571     -0.760204      -499.218       499.218       1184.14       1683.36    
loop,thermsimp(1:2)        7   1404.98       566.753    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     60       1916.51         68.02          1.17         39.39          2.05          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1916.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        7
neval is:       59
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        8
neval is:       59


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       59      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -471.942       471.942       1284.82       1756.76    
   2  0.568497     -0.564760      -370.872       370.872       1184.14       1555.01    
   3  0.632037E-01  -2.76139      -1813.38       1813.38       1869.96       3683.33    
   4  0.184325      -1.69105      -1110.50       1110.50       2058.28       3168.78    
   5  0.949772     -0.515332E-01  -33.8413       33.8413       2188.28       2222.12    
   6  0.512179     -0.669081      -439.378       439.378       2161.98       2601.36    
   7  0.573767     -0.555532      -364.812       364.812       2182.48       2547.29    
   8  0.590189     -0.527312      -346.280       346.280       2207.09       2553.37    
   9  0.323917      -1.12727      -740.265       740.265       2185.36       2925.62    
  10  0.246420E-01  -3.70330      -2431.92       2431.92       2261.16       4693.08    
  11  0.923153E-01  -2.38255      -1564.59       1564.59       1817.15       3381.74    
  12  0.236043      -1.44374      -948.090       948.090       2197.16       3145.25    
  13  0.885388     -0.121730      -79.9385       79.9385       2185.83       2265.77    
  14  0.617726     -0.481710      -316.334       316.334       2034.09       2350.42    
  15  0.349992      -1.04985      -689.423       689.423       2213.55       2902.98    
  16  0.892028     -0.114257      -75.0316       75.0316       1187.73       1262.76    
  17  0.382423     -0.961227      -631.228       631.228       2197.23       2828.46    
  18  0.850527     -0.161899      -106.318       106.318       2245.10       2351.41    
  19  0.653461     -0.425472      -279.403       279.403       2085.96       2365.37    
  20  0.413959     -0.881988      -579.192       579.192       2341.90       2921.10    
  21  0.807813     -0.213424      -140.154       140.154       2010.43       2150.58    
  22  0.348045      -1.05542      -693.086       693.086       2209.31       2902.40    
  23  0.435267     -0.831795      -546.231       546.231       2190.01       2736.24    
  24  0.434284     -0.834056      -547.716       547.716       2504.33       3052.05    
  25  0.983564     -0.165728E-01  -10.8832       10.8832       1968.99       1979.87    
  26  0.545923     -0.605277      -397.479       397.479       2243.31       2640.79    
  27  0.227140      -1.48219      -973.337       973.337       1987.00       2960.34    
  28  0.965085     -0.355395E-01  -23.3384       23.3384       2142.49       2165.83    
  29  0.183882      -1.69346      -1112.08       1112.08       2188.96       3301.04    
  30  0.187300E-02  -6.28022      -4124.15       4124.15       2668.10       6792.25    
  31  0.428736     -0.846914      -556.159       556.159       2258.16       2814.32    
  32  0.459764     -0.777041      -510.275       510.275       2480.55       2990.83    
  33  0.914786     -0.890649E-01  -58.4880       58.4880       2335.74       2394.23    
  34  0.872236     -0.136696      -89.7665       89.7665       2390.48       2480.25    
  35  0.789367     -0.236524      -155.323       155.323       2448.82       2604.15    
  36  0.619233E-01  -2.78186      -1826.82       1826.82       2188.00       4014.82    
  37  0.138004E-01  -4.28306      -2812.64       2812.64       2184.79       4997.43    
  38  0.287035      -1.24815      -819.647       819.647       2590.46       3410.11    
  39  0.138758E-01  -4.27761      -2809.06       2809.06       1953.34       4762.40    
  40  0.593330     -0.522005      -342.795       342.795       2330.37       2673.17    
  41  0.399445     -0.917679      -602.630       602.630       2082.57       2685.20    
  42  0.982947     -0.172001E-01  -11.2952       11.2952       2064.30       2075.60    
  43  0.259534      -1.34887      -885.786       885.786       2186.56       3072.34    
  44  0.816592E-01  -2.50520      -1645.14       1645.14       2324.69       3969.83    
  45  0.166083      -1.79527      -1178.93       1178.93       1956.20       3135.14    
  46  0.967370     -0.331741E-01  -21.7851       21.7851       2329.41       2351.19    
  47  0.371024     -0.991488      -651.100       651.100       2246.97       2898.07    
  48  0.941964     -0.597885E-01  -39.2625       39.2625       2329.11       2368.38    
  49  0.130219      -2.03854      -1338.68       1338.68       1916.51       3255.19    
loop,thermsimp(1:2)        8   471.942       370.872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     61       2439.74         67.89          1.16         40.17          1.33          0.05        110.60
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   60    2439.7        3.399     -3.020      4.574     -102.6     0.3077    
                      0.4982E-01 0.8913     -99.70      4.961     0.8411    

                       3.463    -0.7663      1.552      5706.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.169      0.000      0.000      7000.      523.5    

                      -1.377     -5.129     -7.720     -7.873      8.732    

                      -5.251     -3.949      5427.      0.000      6470.    



                       2152.      6528.      6210.      2963.      4156.    

                       3801.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.834     -1.584     -2.188     -2.020    -0.3807    

                     -0.3252      9.629      8.524    -0.1484E+05 -5.343    

                      0.9205E-01 -2.481      8.931      9.088    -0.1969E+05



                      -6.000     0.4106     0.9940E-01  9.029      9.476    

                     -0.1944E+05 -6.000     -1.053    -0.7562      9.732    

                       9.372    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2439.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        8
neval is:       60
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:        9
neval is:       60


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       60      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -1597.31       1597.31       1187.73       2785.04    
   2  0.192227      -1.64908      -1082.93       1082.93       1184.14       2267.07    
   3  0.872733     -0.136126      -89.3926       89.3926       1284.82       1374.21    
   4  0.444113     -0.811675      -533.019       533.019       1968.99       2502.01    
   5  0.194382      -1.63793      -1075.61       1075.61       2064.30       3139.92    
   6  0.358074      -1.02702      -674.431       674.431       2010.43       2684.86    
   7  0.461693     -0.772855      -507.526       507.526       2142.49       2650.01    
   8  0.180202      -1.71368      -1125.35       1125.35       2188.28       3313.64    
   9  0.944954     -0.566187E-01  -37.1809       37.1809       2185.83       2223.01    
  10  0.738770     -0.302769      -198.825       198.825       2034.09       2232.91    
  11  0.822491E-01  -2.49800      -1640.41       1640.41       2329.41       3969.82    
  12  0.313602      -1.15963      -761.517       761.517       2245.10       3006.61    
  13  0.978185     -0.220567E-01  -14.4844       14.4844       2085.96       2100.45    
  14  0.540591E-01  -2.91768      -1916.01       1916.01       2329.11       4245.12    
  15  0.872885     -0.135951      -89.2776       89.2776       2335.74       2425.02    
  16  0.209079      -1.56504      -1027.75       1027.75       2390.48       3418.23    
  17  0.789205E-01  -2.53931      -1667.54       1667.54       2182.48       3850.02    
  18  0.746404     -0.292489      -192.074       192.074       2207.09       2399.17    
  19  0.110219      -2.20529      -1448.19       1448.19       2161.98       3610.17    
  20  0.656016     -0.421570      -276.840       276.840       2448.82       2725.66    
  21  0.665675     -0.406953      -267.242       267.242       2243.31       2510.55    
  22  0.563292     -0.573957      -376.911       376.911       2330.37       2707.28    
  23  0.615044     -0.486062      -319.192       319.192       2082.57       2401.76    
  24  0.128081      -2.05509      -1349.56       1349.56       2190.01       3539.56    
  25  0.459916     -0.776711      -510.058       510.058       2258.16       2768.22    
  26  0.433297     -0.836332      -549.211       549.211       2197.23       2746.44    
  27  0.225675      -1.48866      -977.587       977.587       2246.97       3224.56    
  28  0.808805     -0.212197      -139.348       139.348       2209.31       2348.66    
  29  0.578238     -0.547770      -359.714       359.714       2213.55       2573.27    
  30  0.569572     -0.562871      -369.631       369.631       2341.90       2711.54    
  31  0.291272      -1.23350      -810.024       810.024       2185.36       2995.38    
  32  0.144426      -1.93499      -1270.68       1270.68       1987.00       3257.69    
  33  0.908321     -0.961572E-01  -63.1454       63.1454       2480.55       2543.70    
  34  0.593166     -0.522281      -342.977       342.977       2504.33       2847.31    
  35  0.327630      -1.11587      -732.781       732.781       2186.56       2919.34    
  36  0.823214E-01  -2.49712      -1639.84       1639.84       1956.20       3596.04    
  37  0.742531     -0.297691      -195.491       195.491       2197.16       2392.65    
  38  0.476201E-01  -3.04450      -1999.29       1999.29       2058.28       4057.57    
  39  0.183829      -1.69375      -1112.27       1112.27       1916.51       3028.78    
  40  0.417257     -0.874053      -573.981       573.981       2188.96       2762.95    
  41  0.647723E-01  -2.73688      -1797.28       1797.28       1817.15       3614.43    
  42  0.123950E-01  -4.39046      -2883.17       2883.17       2590.46       5473.63    
  43  0.281372E-01  -3.57066      -2344.82       2344.82       1869.96       4214.77    
  44  0.883044     -0.124380      -81.6790       81.6790       2324.69       2406.37    
  45  0.445413     -0.808754      -531.100       531.100       2188.00       2719.10    
  46  0.418101     -0.872031      -572.654       572.654       2261.16       2833.82    
  47  0.301534      -1.19887      -787.287       787.287       1953.34       2740.63    
  48  0.674500     -0.393783      -258.593       258.593       2184.79       2443.38    
  49  0.732783     -0.310905      -204.168       204.168       2439.74       2643.91    
loop,thermsimp(1:2)        9   1597.31       1082.93    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     62       2259.48         68.05          1.16         39.36          2.08          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2259.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:        9
neval is:       61
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       10
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       61      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -322.657       322.657       1284.82       1607.47    
   2  0.877337     -0.130865      -85.9374       85.9374       2085.96       2171.90    
   3  0.821280     -0.196891      -129.297       129.297       2185.83       2315.13    
   4  0.989636     -0.104181E-01  -6.84146       6.84146       2034.09       2040.93    
   5  0.492813     -0.707625      -464.690       464.690       1184.14       1648.83    
   6  0.904083     -0.100835      -66.2170       66.2170       2209.31       2275.53    
   7  0.490620     -0.712086      -467.619       467.619       2197.16       2664.78    
   8  0.572439     -0.557850      -366.334       366.334       2207.09       2573.43    
   9  0.588753     -0.529749      -347.881       347.881       2082.57       2430.45    
  10  0.341799      -1.07353      -704.977       704.977       2324.69       3029.66    
  11  0.449605     -0.799385      -524.948       524.948       2335.74       2860.69    
  12  0.740720     -0.300132      -197.094       197.094       2184.79       2381.88    
  13  0.173164E-01  -4.05610      -2663.60       2663.60       1968.99       4632.59    
  14  0.828389     -0.188272      -123.636       123.636       2243.31       2366.95    
  15  0.110451      -2.20318      -1446.81       1446.81       2480.55       3927.36    
  16  0.646816     -0.435693      -286.115       286.115       2213.55       2499.67    
  17  0.857676     -0.153529      -100.821       100.821       2439.74       2540.56    
  18  0.691202E-02  -4.97449      -3266.70       3266.70       2142.49       5409.18    
  19  0.530885     -0.633210      -415.822       415.822       2010.43       2426.25    
  20  0.742957     -0.297117      -195.114       195.114       2330.37       2525.49    
  21  0.883526E-01  -2.42642      -1593.40       1593.40       2341.90       3935.31    
  22  0.599138     -0.512263      -336.398       336.398       2188.00       2524.40    
  23  0.476407     -0.741482      -486.923       486.923       2448.82       2935.75    
  24  0.509994E-01  -2.97594      -1954.27       1954.27       1953.34       3907.61    
  25  0.669768     -0.400824      -263.217       263.217       2197.23       2460.45    
  26  0.874430     -0.134183      -88.1164       88.1164       2188.96       2277.08    
  27  0.830739     -0.185440      -121.776       121.776       2258.16       2379.94    
  28  0.166673      -1.79172      -1176.61       1176.61       1187.73       2364.33    
  29  0.578742     -0.546898      -359.142       359.142       2261.16       2620.30    
  30  0.433531     -0.835791      -548.855       548.855       2504.33       3053.19    
  31  0.979127     -0.210935E-01  -13.8519       13.8519       2186.56       2200.41    
  32  0.310252      -1.17037      -768.570       768.570       2185.36       2953.93    
  33  0.686879     -0.375597      -246.651       246.651       2245.10       2491.75    
  34  0.243104      -1.41427      -928.734       928.734       1916.51       2845.24    
  35  0.459407     -0.777818      -510.785       510.785       2064.30       2575.09    
  36  0.332163      -1.10213      -723.757       723.757       2246.97       2970.73    
  37  0.512243     -0.668956      -439.296       439.296       1987.00       2426.30    
  38  0.323240      -1.12936      -741.639       741.639       2188.28       2929.92    
  39  0.667455     -0.404284      -265.489       265.489       2390.48       2655.97    
  40  0.460037     -0.776449      -509.886       509.886       2190.01       2699.89    
  41  0.227415      -1.48098      -972.542       972.542       1956.20       2928.75    
  42  0.636494     -0.451780      -296.679       296.679       2161.98       2458.66    
  43  0.432078     -0.839149      -551.060       551.060       1817.15       2368.21    
  44  0.609015     -0.495913      -325.661       325.661       2182.48       2508.14    
  45  0.427755     -0.849205      -557.664       557.664       2329.41       2887.07    
  46  0.496712     -0.699745      -459.515       459.515       2058.28       2517.80    
  47  0.295308      -1.21974      -800.988       800.988       1869.96       2670.95    
  48  0.928979     -0.736692E-01  -48.3778       48.3778       2329.11       2377.49    
  49  0.245696E-01  -3.70625      -2433.85       2433.85       2259.48       4693.33    
loop,thermsimp(1:2)       10   322.657       85.9374    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     63       1899.82         68.11          1.18         39.47          1.79          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     64       1645.25         68.47          1.23         39.33          1.82          0.05        110.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1645.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       10
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       11
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       63      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -676.808       676.808       1284.82       1961.62    
   2  0.318207      -1.14505      -751.945       751.945       1184.14       1936.09    
   3  0.410972E-01  -3.19181      -2096.03       2096.03       2034.09       4130.12    
   4  0.217948      -1.52350      -1000.46       1000.46       2085.96       3086.43    
   5  0.460755     -0.774888      -508.861       508.861       2186.56       2695.42    
   6  0.694214     -0.364975      -239.675       239.675       2209.31       2448.99    
   7  0.237764      -1.43648      -943.318       943.318       2188.96       3132.28    
   8  0.635477     -0.453379      -297.729       297.729       2185.83       2483.56    
   9  0.882831E-01  -2.42721      -1593.92       1593.92       1187.73       2781.65    
  10  0.889613     -0.116969      -76.8122       76.8122       2243.31       2320.12    
  11  0.236395      -1.44225      -947.111       947.111       1817.15       2764.26    
  12  0.785560     -0.241359      -158.498       158.498       2329.11       2487.61    
  13  0.253594      -1.37202      -900.992       900.992       2258.16       3159.15    
  14  0.767743     -0.264300      -173.563       173.563       2184.79       2358.35    
  15  0.425111     -0.855405      -561.736       561.736       2010.43       2572.16    
  16  0.334680E-01  -3.39717      -2230.88       2230.88       1987.00       4217.88    
  17  0.737903     -0.303943      -199.596       199.596       2082.57       2282.16    
  18  0.530906     -0.633170      -415.796       415.796       2161.98       2577.78    
  19  0.811772     -0.208536      -136.944       136.944       2197.23       2334.18    
  20  0.781494     -0.246548      -161.906       161.906       2245.10       2407.00    
  21  0.668871     -0.402164      -264.097       264.097       2213.55       2477.65    
  22  0.609633     -0.494898      -324.994       324.994       2182.48       2507.47    
  23  0.732795E-01  -2.61347      -1716.24       1716.24       2058.28       3774.52    
  24  0.999755     -0.244962E-03 -0.160864      0.160864       2188.00       2188.16    
  25  0.556911     -0.585350      -384.393       384.393       2330.37       2714.77    
  26  0.381942     -0.962485      -632.054       632.054       2439.74       3071.79    
  27  0.230973      -1.46546      -962.349       962.349       2207.09       3169.44    
  28  0.791084     -0.234351      -153.896       153.896       2064.30       2218.20    
  29  0.122039      -2.10341      -1381.29       1381.29       2261.16       3642.45    
  30  0.411383     -0.888231      -583.292       583.292       2390.48       2973.77    
  31  0.753656     -0.282819      -185.724       185.724       2197.16       2382.88    
  32  0.846821     -0.166266      -109.185       109.185       1869.96       1979.14    
  33  0.577745     -0.548622      -360.275       360.275       2190.01       2550.28    
  34  0.859903     -0.150936      -99.1180       99.1180       1916.51       2015.63    
  35  0.915816     -0.879395E-01  -57.7490       57.7490       2335.74       2393.49    
  36  0.220499      -1.51186      -992.823       992.823       2329.41       3322.23    
  37  0.539962     -0.616256      -404.689       404.689       1956.20       2360.89    
  38  0.810725     -0.209827      -137.791       137.791       2188.28       2326.07    
  39  0.901567     -0.103621      -68.0466       68.0466       2448.82       2516.87    
  40  0.196148      -1.62888      -1069.67       1069.67       2185.36       3255.03    
  41  0.413437     -0.883250      -580.021       580.021       2246.97       2826.99    
  42  0.192892      -1.64562      -1080.66       1080.66       2324.69       3405.35    
  43  0.194290      -1.63840      -1075.92       1075.92       2504.33       3580.25    
  44  0.988313     -0.117563E-01  -7.72024       7.72024       1953.34       1961.06    
  45  0.917980     -0.855792E-01  -56.1989       56.1989       2480.55       2536.75    
  46  0.136083      -1.99449      -1309.76       1309.76       2341.90       3651.66    
  47  0.847126     -0.165905      -108.948       108.948       1968.99       2077.94    
  48  0.513003     -0.667474      -438.323       438.323       2259.48       2697.80    
  49  0.562161     -0.575967      -378.231       378.231       1645.25       2023.49    
loop,thermsimp(1:2)       11   676.808       751.945    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     65       1969.79         67.77          1.15         39.36          2.29          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1969.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       11
neval is:       64
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       12
neval is:       64


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       64      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -1692.48       1692.48       1184.14       2876.62    
   2  0.804470     -0.217571      -142.877       142.877       1953.34       2096.22    
   3  0.984017     -0.161120E-01  -10.5806       10.5806       1284.82       1295.40    
   4  0.587639     -0.531643      -349.124       349.124       1869.96       2219.08    
   5  0.523810     -0.646626      -424.632       424.632       1916.51       2341.14    
   6  0.930607     -0.719181E-01  -47.2278       47.2278       1645.25       1692.48    
   7  0.360114E-01  -3.32392      -2182.78       2182.78       1968.99       4151.77    
   8  0.963815     -0.368556E-01  -24.2027       24.2027       2188.00       2212.20    
   9  0.201264E-01  -3.90572      -2564.85       2564.85       2064.30       4629.15    
  10  0.954897     -0.461522E-01  -30.3077       30.3077       2082.57       2112.88    
  11  0.374160     -0.983071      -645.573       645.573       2243.31       2888.89    
  12  0.174967      -1.74316      -1144.71       1144.71       2188.28       3333.00    
  13  0.381618     -0.963335      -632.612       632.612       2197.23       2829.84    
  14  0.191097      -1.65498      -1086.81       1086.81       2184.79       3271.59    
  15  0.425287     -0.854991      -561.464       561.464       1956.20       2517.67    
  16  0.426180     -0.852893      -560.086       560.086       2197.16       2757.25    
  17  0.615671     -0.485042      -318.522       318.522       2335.74       2654.27    
  18  0.787264     -0.239192      -157.075       157.075       2245.10       2402.17    
  19  0.812636     -0.207472      -136.245       136.245       2209.31       2345.56    
  20  0.917241E-01  -2.38897      -1568.81       1568.81       2213.55       3782.37    
  21  0.671310     -0.398525      -261.707       261.707       2185.83       2447.54    
  22  0.548174     -0.601162      -394.777       394.777       2329.11       2723.89    
  23  0.134851      -2.00359      -1315.73       1315.73       2182.48       3498.21    
  24  0.373236     -0.985545      -647.197       647.197       2448.82       3096.02    
  25  0.578774     -0.546843      -359.106       359.106       2480.55       2839.66    
  26  0.910021     -0.942872E-01  -61.9174       61.9174       2190.01       2251.93    
  27  0.192323      -1.64858      -1082.60       1082.60       2010.43       3093.03    
  28  0.366342      -1.00419      -659.440       659.440       2161.98       2821.42    
  29  0.686994     -0.375430      -246.541       246.541       2186.56       2433.10    
  30  0.486551     -0.720414      -473.089       473.089       2259.48       2732.57    
  31  0.256801      -1.35945      -892.739       892.739       2330.37       3223.11    
  32  0.284977      -1.25535      -824.373       824.373       1817.15       2641.52    
  33  0.903072     -0.101953      -66.9512       66.9512       1187.73       1254.68    
  34  0.226450      -1.48523      -975.335       975.335       2246.97       3222.30    
  35  0.446078     -0.807261      -530.120       530.120       2390.48       2920.60    
  36  0.152634      -1.87971      -1234.39       1234.39       2439.74       3674.12    
  37  0.511955     -0.669518      -439.666       439.666       2085.96       2525.63    
  38  0.513138     -0.667210      -438.150       438.150       2188.96       2627.11    
  39  0.637309     -0.450501      -295.839       295.839       2258.16       2554.00    
  40  0.861477     -0.149107      -97.9170       97.9170       2207.09       2305.01    
  41  0.817364     -0.201671      -132.435       132.435       2185.36       2317.79    
  42  0.793820     -0.230898      -151.628       151.628       2329.41       2481.04    
  43  0.253309      -1.37315      -901.730       901.730       2324.69       3226.42    
  44  0.702532     -0.353065      -231.854       231.854       2504.33       2736.19    
  45  0.822324     -0.195620      -128.462       128.462       2261.16       2389.62    
  46  0.720485     -0.327831      -215.283       215.283       2341.90       2557.19    
  47  0.881589     -0.126029      -82.7622       82.7622       2058.28       2141.05    
  48  0.584479     -0.537035      -352.665       352.665       2034.09       2386.75    
  49  0.697197     -0.360688      -236.860       236.860       1969.79       2206.65    
loop,thermsimp(1:2)       12   1692.48       142.877    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     66       2195.78         68.12          1.23         38.96          1.95          0.05        110.30
Just calling func    0   0        110.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2195.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       12
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       13
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       65      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -89.6162       89.6162       1187.73       1277.34    
   2  0.311340      -1.16687      -766.271       766.271       1284.82       2051.09    
   3  0.293828      -1.22476      -804.287       804.287       1645.25       2449.54    
   4  0.586668     -0.533296      -350.210       350.210       1953.34       2303.55    
   5  0.360311      -1.02079      -670.341       670.341       2082.57       2752.91    
   6  0.315643      -1.15314      -757.256       757.256       2058.28       2815.54    
   7  0.481464     -0.730923      -479.990       479.990       1969.79       2449.78    
   8  0.720279     -0.328116      -215.471       215.471       2188.00       2403.47    
   9  0.551471     -0.595166      -390.839       390.839       1869.96       2260.80    
  10  0.524434     -0.645435      -423.851       423.851       2190.01       2613.86    
  11  0.781600     -0.246412      -161.816       161.816       2207.09       2368.91    
  12  0.353648      -1.03945      -682.598       682.598       2185.36       2867.96    
  13  0.451044     -0.796190      -522.850       522.850       1916.51       2439.36    
  14  0.325353      -1.12284      -737.360       737.360       2209.31       2946.67    
  15  0.312157      -1.16425      -764.549       764.549       2034.09       2798.64    
  16  0.432418     -0.838362      -550.544       550.544       2261.16       2811.71    
  17  0.296543      -1.21556      -798.247       798.247       2245.10       3043.34    
  18  0.705416     -0.348967      -229.163       229.163       2186.56       2415.72    
  19  0.146505      -1.92069      -1261.30       1261.30       2185.83       3447.13    
  20  0.471608     -0.751607      -493.572       493.572       2329.41       2822.98    
  21  0.633095     -0.457134      -300.195       300.195       1956.20       2256.40    
  22  0.754855     -0.281230      -184.681       184.681       2085.96       2270.64    
  23  0.444501E-01  -3.11339      -2044.53       2044.53       2258.16       4302.69    
  24  0.160973      -1.82652      -1199.45       1199.45       2341.90       3541.36    
  25  0.943694     -0.579536E-01  -38.0575       38.0575       2188.96       2227.02    
  26  0.187304      -1.67502      -1099.97       1099.97       1817.15       2917.12    
  27  0.840922     -0.173257      -113.776       113.776       2335.74       2449.52    
  28  0.888648     -0.118054      -77.5247       77.5247       2329.11       2406.64    
  29  0.920614E-01  -2.38530      -1566.40       1566.40       2259.48       3825.88    
  30  0.906493     -0.981722E-01  -64.4687       64.4687       2504.33       2568.80    
  31  0.221761      -1.50616      -989.077       989.077       2197.16       3186.24    
  32  0.248725      -1.39141      -913.723       913.723       2161.98       3075.70    
  33  0.315928      -1.15224      -756.665       756.665       2197.23       2953.90    
  34  0.949967     -0.513283E-01  -33.7068       33.7068       2480.55       2514.26    
  35  0.802748     -0.219715      -144.284       144.284       1184.14       1328.42    
  36  0.558987     -0.581628      -381.949       381.949       2243.31       2625.26    
  37  0.638133     -0.449209      -294.991       294.991       2390.48       2685.47    
  38  0.637852     -0.449648      -295.279       295.279       2010.43       2305.71    
  39  0.382908     -0.959961      -630.396       630.396       2448.82       3079.22    
  40  0.982834     -0.173149E-01  -11.3705       11.3705       2246.97       2258.34    
  41  0.497022     -0.699120      -459.105       459.105       2330.37       2789.48    
  42  0.263620      -1.33325      -875.529       875.529       2324.69       3200.22    
  43  0.296939      -1.21423      -797.372       797.372       2184.79       2982.16    
  44  0.784161     -0.243141      -159.668       159.668       2188.28       2347.95    
  45  0.545321     -0.606380      -398.203       398.203       2182.48       2580.68    
  46  0.770080     -0.261260      -171.567       171.567       2439.74       2611.30    
  47  0.358755      -1.02511      -673.182       673.182       2213.55       2886.74    
  48  0.325126      -1.12354      -737.819       737.819       1968.99       2706.81    
  49  0.599396     -0.511832      -336.115       336.115       2195.78       2531.89    
loop,thermsimp(1:2)       13   89.6162       766.271    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     67       1859.89         68.34          1.22         39.48          1.87          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1859.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       13
neval is:       66
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       14
neval is:       66


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       66      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -699.624       699.624       1187.73       1887.35    
   2  0.267720      -1.31781      -865.395       865.395       1184.14       2049.53    
   3  0.279825      -1.27359      -836.354       836.354       1284.82       2121.17    
   4  0.281095      -1.26906      -833.381       833.381       2188.96       3022.35    
   5  0.245867      -1.40297      -921.313       921.313       1956.20       2877.52    
   6  0.914239     -0.896636E-01  -58.8811       58.8811       2246.97       2305.85    
   7  0.180116      -1.71415      -1125.67       1125.67       1869.96       2995.62    
   8  0.567917     -0.565780      -371.542       371.542       2085.96       2457.51    
   9  0.431941     -0.839465      -551.268       551.268       1953.34       2504.61    
  10  0.877920     -0.130199      -85.5006       85.5006       2010.43       2095.93    
  11  0.280355      -1.27170      -835.110       835.110       2188.28       3023.39    
  12  0.486947     -0.719601      -472.554       472.554       2207.09       2679.65    
  13  0.216546      -1.52995      -1004.70       1004.70       2188.00       3192.70    
  14  0.483718E-02  -5.33142      -3501.09       3501.09       2329.11       5830.20    
  15  0.785152E-03  -7.14963      -4695.09       4695.09       2186.56       6881.65    
  16  0.300781      -1.20137      -788.928       788.928       1916.51       2705.44    
  17  0.869691     -0.139618      -91.6855       91.6855       2335.74       2427.43    
  18  0.694261E-01  -2.66749      -1751.71       1751.71       1645.25       3396.97    
  19  0.635475     -0.453382      -297.731       297.731       1969.79       2267.52    
  20  0.894977     -0.110958      -72.8646       72.8646       2480.55       2553.42    
  21  0.442267     -0.815841      -535.754       535.754       2195.78       2731.53    
  22  0.283362      -1.26103      -828.104       828.104       2504.33       3332.44    
  23  0.518611     -0.656601      -431.183       431.183       2182.48       2613.66    
  24  0.858122E-01  -2.45559      -1612.56       1612.56       2439.74       4052.30    
  25  0.461153     -0.774026      -508.295       508.295       2190.01       2698.30    
  26  0.180026      -1.71465      -1126.00       1126.00       2243.31       3369.31    
  27  0.446938E-01  -3.10792      -2040.94       2040.94       2390.48       4431.42    
  28  0.152352      -1.88156      -1235.60       1235.60       1968.99       3204.59    
  29  0.163937E-01  -4.11086      -2699.56       2699.56       2082.57       4782.13    
  30  0.721347     -0.326635      -214.498       214.498       2330.37       2544.87    
  31  0.813323     -0.206626      -135.689       135.689       2034.09       2169.78    
  32  0.569343     -0.563273      -369.895       369.895       2261.16       2631.06    
  33  0.275899      -1.28772      -845.632       845.632       2058.28       2903.91    
  34  0.933187     -0.691492E-01  -45.4096       45.4096       2329.41       2374.82    
  35  0.716570     -0.333279      -218.861       218.861       2185.36       2404.22    
  36  0.405413     -0.902848      -592.891       592.891       2213.55       2806.45    
  37  0.907528     -0.970314E-01  -63.7195       63.7195       1817.15       1880.87    
  38  0.554651     -0.589416      -387.063       387.063       2209.31       2596.38    
  39  0.419962     -0.867592      -569.738       569.738       2197.23       2766.97    
  40  0.824173     -0.193375      -126.987       126.987       2184.79       2311.78    
  41  0.865647     -0.144278      -94.7461       94.7461       2245.10       2339.84    
  42  0.300944      -1.20083      -788.574       788.574       2161.98       2950.56    
  43  0.339688      -1.07973      -709.046       709.046       2448.82       3157.87    
  44  0.217032      -1.52771      -1003.23       1003.23       2197.16       3200.39    
  45  0.792618E-01  -2.53500      -1664.71       1664.71       2324.69       3989.40    
  46  0.997677     -0.232582E-02  -1.52734       1.52734       2185.83       2187.36    
  47  0.174239      -1.74733      -1147.45       1147.45       2341.90       3489.36    
  48  0.834084     -0.181422      -119.138       119.138       2259.48       2378.62    
  49  0.324404      -1.12577      -739.279       739.279       1859.89       2599.17    
loop,thermsimp(1:2)       14   699.624       865.395    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     68       1865.31         68.40          1.22         39.60          1.39          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     69       1601.24         68.11          1.17         39.44          1.87          0.05        110.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1601.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       14
neval is:       68
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       15
neval is:       68


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       68      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -965.267       965.267       1817.15       2782.41    
   2  0.322822      -1.13066      -742.490       742.490       1187.73       1930.22    
   3  0.327586      -1.11601      -732.869       732.869       1184.14       1917.01    
   4  0.799078     -0.224296      -147.293       147.293       2010.43       2157.72    
   5  0.698072     -0.359433      -236.036       236.036       1284.82       1520.85    
   6  0.733871     -0.309421      -203.194       203.194       2034.09       2237.28    
   7  0.823872     -0.193740      -127.227       127.227       2185.83       2313.06    
   8  0.800045     -0.223087      -146.499       146.499       1969.79       2116.29    
   9  0.162010      -1.82010      -1195.24       1195.24       2246.97       3442.21    
  10  0.113138      -2.17915      -1431.02       1431.02       2184.79       3615.81    
  11  0.973966     -0.263784E-01  -17.3224       17.3224       2245.10       2262.42    
  12  0.998107     -0.189521E-02  -1.24456       1.24456       2329.41       2330.65    
  13  0.631351     -0.459893      -302.007       302.007       2259.48       2561.48    
  14  0.698229     -0.359208      -235.888       235.888       2185.36       2421.25    
  15  0.359252      -1.02373      -672.273       672.273       2335.74       3008.02    
  16  0.936266     -0.658562E-01  -43.2470       43.2470       2085.96       2129.21    
  17  0.843107     -0.170662      -112.072       112.072       1953.34       2065.41    
  18  0.181284      -1.70769      -1121.42       1121.42       2330.37       3451.80    
  19  0.354246      -1.03777      -681.489       681.489       2480.55       3162.04    
  20  0.981540     -0.186324E-01  -12.2357       12.2357       2209.31       2221.55    
  21  0.582284E-01  -2.84338      -1867.22       1867.22       1859.89       3727.11    
  22  0.935088     -0.671143E-01  -44.0733       44.0733       2182.48       2226.55    
  23  0.682144     -0.382515      -251.193       251.193       2261.16       2512.36    
  24  0.441439     -0.817715      -536.985       536.985       2207.09       2744.08    
  25  0.325829      -1.12138      -736.400       736.400       2190.01       2926.41    
  26  0.956968E-01  -2.34657      -1540.97       1540.97       1916.51       3457.48    
  27  0.465124E-01  -3.06804      -2014.75       2014.75       2195.78       4210.52    
  28  0.645503     -0.437726      -287.450       287.450       2197.23       2484.68    
  29  0.184751      -1.68875      -1108.98       1108.98       2213.55       3322.54    
  30  0.676303     -0.391115      -256.841       256.841       1956.20       2213.05    
  31  0.408248     -0.895880      -588.315       588.315       2058.28       2646.60    
  32  0.215511      -1.53474      -1007.85       1007.85       2161.98       3169.83    
  33  0.762109     -0.271666      -178.400       178.400       1869.96       2048.36    
  34  0.445022     -0.809632      -531.677       531.677       2188.96       2720.64    
  35  0.667113     -0.404797      -265.826       265.826       2188.28       2454.11    
  36  0.995785     -0.422376E-02  -2.77370       2.77370       2448.82       2451.60    
  37  0.278840      -1.27712      -838.670       838.670       2188.00       3026.67    
  38  0.624255     -0.471196      -309.429       309.429       2197.16       2506.59    
  39  0.368212     -0.999097      -656.097       656.097       1968.99       2625.08    
  40  0.330266      -1.10786      -727.519       727.519       2504.33       3231.85    
  41  0.969155     -0.313304E-01  -20.5744       20.5744       2243.31       2263.89    
  42  0.686816     -0.375688      -246.710       246.710       1645.25       1891.96    
  43  0.201053      -1.60419      -1053.45       1053.45       2341.90       3395.36    
  44  0.481166     -0.731544      -480.397       480.397       2324.69       2805.09    
  45  0.992829     -0.719725E-02  -4.72636       4.72636       2439.74       2444.46    
  46  0.665697     -0.406921      -267.221       267.221       2390.48       2657.70    
  47  0.991934E-02  -4.61327      -3029.48       3029.48       2082.57       5112.05    
  48  0.211644      -1.55285      -1019.74       1019.74       2329.11       3348.85    
  49  0.908243E-01  -2.39883      -1575.29       1575.29       1601.24       3176.53    
loop,thermsimp(1:2)       15   965.267       742.490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     70       2195.97         68.06          1.15         39.35          2.19          0.05        110.80
Just calling func    0   0        110.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2195.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       15
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       16
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       69      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -383.340       383.340       1284.82       1668.16    
   2  0.850944     -0.161409      -105.996       105.996       1645.25       1751.25    
   3  0.343999      -1.06712      -700.764       700.764       1184.14       1884.90    
   4  0.481777E-02  -5.33544      -3503.73       3503.73       1187.73       4691.46    
   5  0.146991      -1.91738      -1259.12       1259.12       1869.96       3129.08    
   6  0.545677     -0.605728      -397.775       397.775       1953.34       2351.12    
   7  0.761940     -0.271888      -178.546       178.546       1969.79       2148.33    
   8  0.944477     -0.571238E-01  -37.5126       37.5126       2085.96       2123.48    
   9  0.965249     -0.353688E-01  -23.2263       23.2263       2010.43       2033.65    
  10  0.634176     -0.455429      -299.076       299.076       1956.20       2255.28    
  11  0.793205     -0.231673      -152.137       152.137       2209.31       2361.45    
  12  0.743605     -0.296246      -194.541       194.541       2182.48       2377.02    
  13  0.983069E-01  -2.31966      -1523.30       1523.30       2034.09       3557.39    
  14  0.618437     -0.480560      -315.578       315.578       2245.10       2560.67    
  15  0.429182     -0.845875      -555.477       555.477       2243.31       2798.79    
  16  0.771528     -0.259382      -170.333       170.333       2185.83       2356.16    
  17  0.218286      -1.52195      -999.447       999.447       2329.41       3328.85    
  18  0.556408     -0.586254      -384.987       384.987       2185.36       2570.35    
  19  0.526292     -0.641899      -421.529       421.529       2439.74       2861.27    
  20  0.665532     -0.407169      -267.384       267.384       2448.82       2716.21    
  21  0.261756      -1.34034      -880.190       880.190       2188.28       3068.47    
  22  0.975508     -0.247971E-01  -16.2840       16.2840       2197.23       2213.52    
  23  0.257613      -1.35630      -890.665       890.665       2197.16       3087.83    
  24  0.981555E-01  -2.32120      -1524.31       1524.31       2261.16       3785.47    
  25  0.955054     -0.459870E-01  -30.1992       30.1992       2259.48       2289.68    
  26  0.887906     -0.118890      -78.0737       78.0737       1968.99       2047.06    
  27  0.407043     -0.898837      -590.257       590.257       2058.28       2648.54    
  28  0.876870     -0.131396      -86.2865       86.2865       2390.48       2476.77    
  29  0.957152     -0.437935E-01  -28.7588       28.7588       2188.96       2217.72    
  30  0.827730     -0.189068      -124.159       124.159       2207.09       2331.25    
  31  0.289027      -1.24124      -815.107       815.107       1817.15       2632.25    
  32  0.125230      -2.07760      -1364.34       1364.34       2324.69       3689.03    
  33  0.242443      -1.41699      -930.521       930.521       2190.01       3120.53    
  34  0.654103     -0.424490      -278.758       278.758       2335.74       2614.50    
  35  0.811871     -0.208414      -136.863       136.863       2188.00       2324.87    
  36  0.145201E-01  -4.23222      -2779.25       2779.25       2480.55       5259.81    
  37  0.344449      -1.06581      -699.905       699.905       2161.98       2861.89    
  38  0.265532      -1.32602      -870.783       870.783       1601.24       2472.03    
  39  0.811851     -0.208438      -136.879       136.879       2504.33       2641.21    
  40  0.983290E-01  -2.31944      -1523.15       1523.15       2213.55       3736.70    
  41  0.347314      -1.05753      -694.467       694.467       2329.11       3023.58    
  42  0.923773     -0.792888E-01  -52.0681       52.0681       2341.90       2393.97    
  43  0.690375     -0.370520      -243.317       243.317       2246.97       2490.29    
  44  0.227523      -1.48051      -972.232       972.232       2330.37       3302.61    
  45  0.652275     -0.427289      -280.596       280.596       1916.51       2197.11    
  46  0.669640     -0.401014      -263.342       263.342       2184.79       2448.13    
  47  0.288804      -1.24201      -815.613       815.613       1859.89       2675.51    
  48  0.404648     -0.904738      -594.132       594.132       2195.78       2789.91    
  49  0.371042     -0.991440      -651.068       651.068       2195.97       2847.04    
loop,thermsimp(1:2)       16   383.340       105.996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71       2088.82         68.37          1.22         39.20          1.76          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2088.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       16
neval is:       70
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       17
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       70      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -197.917       197.917       1284.82       1482.73    
   2  0.527958     -0.638738      -419.453       419.453       1645.25       2064.71    
   3  0.326119      -1.12049      -735.815       735.815       1184.14       1919.96    
   4  0.647061     -0.435314      -285.866       285.866       2010.43       2296.29    
   5  0.419805     -0.867966      -569.984       569.984       1968.99       2538.97    
   6  0.218417      -1.52135      -999.053       999.053       2085.96       3085.02    
   7  0.168864      -1.77866      -1168.03       1168.03       1969.79       3137.82    
   8  0.761417     -0.272575      -178.997       178.997       1916.51       2095.51    
   9  0.383989     -0.957143      -628.545       628.545       2197.23       2825.78    
  10  0.104774      -2.25595      -1481.46       1481.46       2188.96       3670.42    
  11  0.167912      -1.78432      -1171.74       1171.74       1956.20       3127.95    
  12  0.997930     -0.207190E-02  -1.36059       1.36059       2259.48       2260.84    
  13  0.493294     -0.706650      -464.050       464.050       2188.00       2652.05    
  14  0.483048     -0.727639      -477.833       477.833       2207.09       2684.93    
  15  0.715967     -0.334121      -219.414       219.414       1953.34       2172.76    
  16  0.595423E-01  -2.82107      -1852.57       1852.57       2185.83       4038.40    
  17  0.636569     -0.451662      -296.602       296.602       2209.31       2505.92    
  18  0.482980     -0.727779      -477.925       477.925       2182.48       2660.40    
  19  0.500121     -0.692905      -455.024       455.024       2341.90       2796.93    
  20  0.426980     -0.851018      -558.854       558.854       2184.79       2743.64    
  21  0.546576     -0.604082      -396.694       396.694       1601.24       1997.94    
  22  0.142720      -1.94687      -1278.49       1278.49       2390.48       3668.97    
  23  0.473622     -0.747346      -490.774       490.774       2246.97       2737.74    
  24  0.892718E-01  -2.41607      -1586.61       1586.61       2245.10       3831.70    
  25  0.660659     -0.414518      -272.209       272.209       2185.36       2457.57    
  26  0.328755      -1.11244      -730.530       730.530       2335.74       3066.27    
  27  0.544150     -0.608530      -399.615       399.615       1817.15       2216.76    
  28  0.199068      -1.61411      -1059.97       1059.97       2504.33       3564.30    
  29  0.685070     -0.378234      -248.382       248.382       2058.28       2306.67    
  30  0.500258     -0.692632      -454.844       454.844       1859.89       2314.74    
  31  0.130607      -2.03556      -1336.73       1336.73       2448.82       3785.56    
  32  0.982013E-01  -2.32074      -1524.00       1524.00       2195.78       3719.78    
  33  0.581494E-01  -2.84474      -1868.11       1868.11       2243.31       4111.42    
  34  0.841391     -0.172699      -113.410       113.410       2195.97       2309.38    
  35  0.838937E-01  -2.47820      -1627.41       1627.41       2439.74       4067.15    
  36  0.729848     -0.314919      -206.804       206.804       2161.98       2368.79    
  37  0.748292     -0.289962      -190.415       190.415       2329.11       2519.53    
  38  0.229216      -1.47309      -967.363       967.363       2188.28       3155.65    
  39  0.710713     -0.341487      -224.251       224.251       2197.16       2421.41    
  40  0.511506     -0.670395      -440.242       440.242       2190.01       2630.25    
  41  0.106756      -2.23721      -1469.15       1469.15       1869.96       3339.11    
  42  0.583466     -0.538770      -353.804       353.804       2330.37       2684.18    
  43  0.993140E-01  -2.30947      -1516.60       1516.60       2329.41       3846.01    
  44  0.461224     -0.773871      -508.193       508.193       2034.09       2542.28    
  45  0.574465     -0.554316      -364.013       364.013       2324.69       2688.70    
  46  0.715977     -0.334107      -219.405       219.405       2213.55       2432.96    
  47  0.877584     -0.130583      -85.7524       85.7524       2261.16       2346.91    
  48  0.492354     -0.708558      -465.302       465.302       1187.73       1653.03    
  49  0.874926     -0.133616      -87.7445       87.7445       2088.82       2176.56    
loop,thermsimp(1:2)       17   197.917       419.453    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72       1776.91         68.23          1.18         39.41          1.92          0.05        110.80
Just calling func    0   0        110.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     73       1458.41         68.01          1.12         39.43          1.93          0.04        110.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1458.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       17
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       18
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       72      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -630.478       630.478       1284.82       1915.29    
   2  0.293468      -1.22599      -805.094       805.094       1187.73       1992.82    
   3  0.954036     -0.470539E-01  -30.8998       30.8998       1184.14       1215.04    
   4  0.452934     -0.792010      -520.105       520.105       1601.24       2121.35    
   5  0.251692      -1.37955      -905.935       905.935       1645.25       2551.19    
   6  0.881081     -0.126605      -83.1405       83.1405       1916.51       1999.65    
   7  0.855311     -0.156290      -102.634       102.634       1953.34       2055.98    
   8  0.576474     -0.550824      -361.720       361.720       2088.82       2450.54    
   9  0.433835     -0.835090      -548.395       548.395       1817.15       2365.54    
  10  0.298626      -1.20856      -793.652       793.652       2259.48       3053.13    
  11  0.269991      -1.30937      -859.847       859.847       2010.43       2870.28    
  12  0.884826     -0.122364      -80.3552       80.3552       2058.28       2138.64    
  13  0.664124     -0.409287      -268.774       268.774       2195.97       2464.75    
  14  0.580836     -0.543287      -356.771       356.771       1859.89       2216.66    
  15  0.285501      -1.25351      -823.166       823.166       2261.16       3084.33    
  16  0.690757     -0.369967      -242.954       242.954       2161.98       2404.94    
  17  0.578320     -0.547628      -359.622       359.622       2197.16       2556.78    
  18  0.563230     -0.574067      -376.984       376.984       2213.55       2590.54    
  19  0.681565     -0.383363      -251.751       251.751       2185.36       2437.11    
  20  0.453362     -0.791065      -519.484       519.484       2209.31       2728.80    
  21  0.645457     -0.437797      -287.497       287.497       2329.11       2616.61    
  22  0.982222E-01  -2.32052      -1523.86       1523.86       1968.99       3492.85    
  23  0.843064     -0.170712      -112.105       112.105       2034.09       2146.19    
  24  0.505683     -0.681845      -447.761       447.761       2190.01       2637.77    
  25  0.350376      -1.04875      -688.703       688.703       2188.00       2876.70    
  26  0.367167      -1.00194      -657.963       657.963       2182.48       2840.44    
  27  0.268175      -1.31611      -864.278       864.278       2330.37       3194.65    
  28  0.989085E-01  -2.31356      -1519.29       1519.29       2207.09       3726.38    
  29  0.349392      -1.05156      -690.550       690.550       2324.69       3015.24    
  30  0.945468     -0.560755E-01  -36.8242       36.8242       2246.97       2283.79    
  31  0.305400      -1.18613      -778.920       778.920       2184.79       2963.71    
  32  0.942706     -0.590006E-01  -38.7451       38.7451       2341.90       2380.65    
  33  0.778346     -0.250584      -164.556       164.556       2197.23       2361.79    
  34  0.256449      -1.36083      -893.640       893.640       2335.74       3229.38    
  35  0.338120      -1.08436      -712.085       712.085       2085.96       2798.05    
  36  0.644609     -0.439112      -288.360       288.360       1956.20       2244.56    
  37  0.420837     -0.865509      -568.370       568.370       1969.79       2538.16    
  38  0.793406     -0.231421      -151.971       151.971       2188.28       2340.25    
  39  0.685561     -0.377517      -247.912       247.912       1869.96       2117.87    
  40  0.278740      -1.27748      -838.906       838.906       2504.33       3343.24    
  41  0.414078     -0.881700      -579.003       579.003       2390.48       2969.49    
  42  0.999720     -0.280334E-03 -0.184092      0.184092       2188.96       2189.15    
  43  0.714259     -0.336509      -220.982       220.982       2195.78       2416.76    
  44  0.713371     -0.337753      -221.799       221.799       2448.82       2670.62    
  45  0.451360     -0.795490      -522.390       522.390       2245.10       2767.49    
  46  0.887280     -0.119595      -78.5368       78.5368       2329.41       2407.94    
  47  0.234319      -1.45107      -952.904       952.904       2185.83       3138.73    
  48  0.277567E-01  -3.58428      -2353.76       2353.76       2439.74       4793.49    
  49  0.582411     -0.540579      -354.992       354.992       1458.41       1813.40    
loop,thermsimp(1:2)       18   630.478       805.094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74       2532.77         67.84          1.11         39.28          2.37          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75       6200.96         67.79          1.09         39.29          2.39          0.05        110.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2532.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       18
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       19
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       74      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -683.817       683.817       1184.14       1867.96    
   2  0.270835E-01  -3.60883      -2369.88       2369.88       1458.41       3828.29    
   3  0.923755     -0.793087E-01  -52.0812       52.0812       1284.82       1336.90    
   4  0.535520     -0.624517      -410.114       410.114       1187.73       1597.84    
   5  0.629344     -0.463078      -304.098       304.098       1916.51       2220.61    
   6  0.572648E-01  -2.86007      -1878.18       1878.18       1953.34       3831.52    
   7  0.353113E-01  -3.34355      -2195.68       2195.68       1869.96       4065.63    
   8  0.580838     -0.543283      -356.768       356.768       1601.24       1958.01    
   9  0.370403     -0.993164      -652.200       652.200       2058.28       2710.48    
  10  0.443010     -0.814162      -534.651       534.651       2034.09       2568.74    
  11  0.188704      -1.66757      -1095.08       1095.08       2188.96       3284.04    
  12  0.177608      -1.72818      -1134.88       1134.88       1859.89       2994.77    
  13  0.694998     -0.363847      -238.934       238.934       1956.20       2195.14    
  14  0.160742      -1.82796      -1200.40       1200.40       2246.97       3447.37    
  15  0.290050      -1.23770      -812.786       812.786       2188.28       3001.07    
  16  0.441138E-01  -3.12098      -2049.52       2049.52       2197.23       4246.75    
  17  0.372461     -0.987622      -648.561       648.561       1817.15       2465.71    
  18  0.652779     -0.426517      -280.089       280.089       2341.90       2621.99    
  19  0.998108     -0.189387E-02  -1.24369       1.24369       2161.98       2163.23    
  20  0.741140     -0.299566      -196.722       196.722       2329.41       2526.13    
  21  0.623042     -0.473141      -310.707       310.707       2195.78       2506.48    
  22  0.504617     -0.683955      -449.146       449.146       2185.36       2634.50    
  23  0.872499     -0.136394      -89.5686       89.5686       2088.82       2178.39    
  24  0.142620      -1.94757      -1278.95       1278.95       2195.97       3474.92    
  25  0.580285     -0.544236      -357.394       357.394       1969.79       2327.18    
  26  0.860063E-01  -2.45334      -1611.08       1611.08       1645.25       3256.33    
  27  0.401846     -0.911687      -598.695       598.695       2197.16       2795.85    
  28  0.161242      -1.82485      -1198.36       1198.36       2213.55       3411.92    
  29  0.550753     -0.596469      -391.695       391.695       2329.11       2720.81    
  30  0.815012     -0.204553      -134.327       134.327       2190.01       2324.34    
  31  0.438663     -0.824024      -541.128       541.128       2448.82       2989.95    
  32  0.542283     -0.611968      -401.873       401.873       2209.31       2611.19    
  33  0.943132E-01  -2.36113      -1550.53       1550.53       2245.10       3795.63    
  34  0.236587      -1.44144      -946.578       946.578       2085.96       3032.54    
  35  0.283068      -1.26207      -828.786       828.786       2182.48       3011.26    
  36  0.973178     -0.271886E-01  -17.8545       17.8545       2010.43       2028.28    
  37  0.596723     -0.516302      -339.050       339.050       2188.00       2527.05    
  38  0.595114     -0.519003      -340.824       340.824       2184.79       2525.61    
  39  0.948736     -0.526250E-01  -34.5583       34.5583       2390.48       2425.04    
  40  0.216072E-01  -3.83473      -2518.23       2518.23       2324.69       4842.91    
  41  0.440213     -0.820496      -538.811       538.811       2259.48       2798.29    
  42  0.905197     -0.996023E-01  -65.4078       65.4078       2261.16       2326.57    
  43  0.158396      -1.84266      -1210.06       1210.06       2185.83       3395.89    
  44  0.287789      -1.24553      -817.924       817.924       2330.37       3148.30    
  45  0.238244      -1.43446      -941.996       941.996       2335.74       3277.74    
  46  0.363881      -1.01093      -663.865       663.865       2504.33       3168.20    
  47  0.828805     -0.187771      -123.307       123.307       1968.99       2092.30    
  48  0.587140     -0.532492      -349.682       349.682       2207.09       2556.78    
  49  0.141687      -1.95414      -1283.26       1283.26       2532.77       3816.04    
loop,thermsimp(1:2)       19   683.817       2369.88    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76       1855.21         68.49          1.23         39.23          1.67          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77       1601.65         67.89          1.13         39.20          2.55          0.05        110.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1601.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       19
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       20
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       76      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -411.063       411.063       1284.82       1695.88    
   2  0.288348      -1.24359      -816.652       816.652       1187.73       2004.38    
   3  0.910112E-01  -2.39677      -1573.94       1573.94       1184.14       2758.08    
   4  0.213812      -1.54266      -1013.05       1013.05       1601.24       2614.29    
   5  0.575222     -0.552999      -363.148       363.148       2010.43       2373.58    
   6  0.855707     -0.155827      -102.330       102.330       1968.99       2071.32    
   7  0.818692     -0.200047      -131.369       131.369       2161.98       2293.35    
   8  0.309911      -1.17147      -769.293       769.293       2088.82       2858.11    
   9  0.773438     -0.256910      -168.710       168.710       1956.20       2124.91    
  10  0.440502E-01  -3.12243      -2050.46       2050.46       1916.51       3966.97    
  11  0.211655      -1.55280      -1019.71       1019.71       2190.01       3209.71    
  12  0.713577     -0.337465      -221.610       221.610       2261.16       2482.77    
  13  0.927405     -0.753650E-01  -49.4914       49.4914       1969.79       2019.28    
  14  0.360229      -1.02101      -670.489       670.489       2390.48       3060.97    
  15  0.911872     -0.922553E-01  -60.5831       60.5831       1817.15       1877.73    
  16  0.800691     -0.222280      -145.969       145.969       2195.78       2341.75    
  17  0.169830      -1.77296      -1164.28       1164.28       2184.79       3349.07    
  18  0.581014     -0.542980      -356.570       356.570       2329.41       2685.98    
  19  0.869395     -0.139958      -91.9087       91.9087       2188.00       2279.91    
  20  0.773880     -0.256338      -168.335       168.335       2207.09       2375.43    
  21  0.496085     -0.701008      -460.345       460.345       2034.09       2494.43    
  22  0.530037     -0.634809      -416.872       416.872       2209.31       2626.19    
  23  0.239414      -1.42956      -938.779       938.779       2341.90       3280.68    
  24  0.595728     -0.517972      -340.147       340.147       2185.36       2525.51    
  25  0.170793      -1.76730      -1160.57       1160.57       2058.28       3218.85    
  26  0.983027     -0.171183E-01  -11.2414       11.2414       2329.11       2340.36    
  27  0.608714     -0.496407      -325.985       325.985       2197.16       2523.14    
  28  0.518727     -0.656378      -431.037       431.037       2259.48       2690.51    
  29  0.887918     -0.118876      -78.0645       78.0645       2448.82       2526.89    
  30  0.140498      -1.96256      -1288.79       1288.79       1859.89       3148.69    
  31  0.256308      -1.36138      -894.001       894.001       2188.28       3082.28    
  32  0.887238     -0.119642      -78.5674       78.5674       2182.48       2261.04    
  33  0.306042      -1.18403      -777.542       777.542       2085.96       2863.51    
  34  0.993873     -0.614632E-02  -4.03622       4.03622       2330.37       2334.41    
  35  0.275412E-01  -3.59207      -2358.88       2358.88       2504.33       4863.21    
  36  0.698960     -0.358161      -235.201       235.201       1645.25       1880.46    
  37  0.268424      -1.31519      -863.669       863.669       2335.74       3199.41    
  38  0.580935E-01  -2.84570      -1868.74       1868.74       2188.96       4057.71    
  39  0.242705      -1.41591      -929.812       929.812       2185.83       3115.64    
  40  0.443517     -0.813019      -533.901       533.901       2213.55       2747.46    
  41  0.904179     -0.100728      -66.1469       66.1469       2246.97       2313.12    
  42  0.454025     -0.789603      -518.524       518.524       2195.97       2714.50    
  43  0.592994     -0.522572      -343.167       343.167       2245.10       2588.26    
  44  0.401796     -0.911812      -598.777       598.777       2532.77       3131.55    
  45  0.130776      -2.03427      -1335.88       1335.88       1458.41       2794.29    
  46  0.709753     -0.342839      -225.139       225.139       1953.34       2178.48    
  47  0.388071     -0.946568      -621.601       621.601       1869.96       2491.56    
  48  0.362521      -1.01467      -666.324       666.324       2197.23       2863.56    
  49  0.285379      -1.25394      -823.447       823.447       1601.65       2425.10    
loop,thermsimp(1:2)       20   411.063       816.652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78       1897.86         68.03          1.17         39.40          1.98          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79       2452.12         68.09          1.16         39.37          2.13          0.05        110.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1897.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       20
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       21
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       78      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -796.304       796.304       1284.82       2081.12    
   2  0.663536     -0.410173      -269.356       269.356       1817.15       2086.50    
   3  0.263982      -1.33188      -874.629       874.629       1645.25       2519.88    
   4  0.792402     -0.232686      -152.803       152.803       1187.73       1340.53    
   5  0.624731     -0.470434      -308.929       308.929       1969.79       2278.72    
   6  0.170977      -1.76622      -1159.86       1159.86       1968.99       3128.85    
   7  0.362487      -1.01477      -666.387       666.387       1956.20       2622.59    
   8  0.659245     -0.416659      -273.616       273.616       1953.34       2226.96    
   9  0.746481E-03  -7.20014      -4728.26       4728.26       2182.48       6910.73    
  10  0.690046     -0.370998      -243.630       243.630       2188.00       2431.63    
  11  0.905636     -0.991173E-01  -65.0893       65.0893       2161.98       2227.07    
  12  0.317643      -1.14683      -753.110       753.110       2246.97       3000.08    
  13  0.321948      -1.13336      -744.269       744.269       2330.37       3074.64    
  14  0.293974      -1.22426      -803.962       803.962       2329.11       3133.08    
  15  0.679275     -0.386729      -253.961       253.961       2195.78       2449.74    
  16  0.180340      -1.71291      -1124.85       1124.85       2010.43       3135.28    
  17  0.539600     -0.616927      -405.130       405.130       2207.09       2612.22    
  18  0.260315      -1.34586      -883.813       883.813       1601.65       2485.46    
  19  0.256777      -1.35955      -892.800       892.800       2261.16       3153.96    
  20  0.518851     -0.656138      -430.879       430.879       1869.96       2300.84    
  21  0.485887     -0.721780      -473.985       473.985       2034.09       2508.07    
  22  0.562814     -0.574805      -377.469       377.469       2197.16       2574.63    
  23  0.906369     -0.983082E-01  -64.5580       64.5580       2185.36       2249.92    
  24  0.332143      -1.10219      -723.796       723.796       2448.82       3172.62    
  25  0.912001E-01  -2.39470      -1572.57       1572.57       2245.10       3817.67    
  26  0.302569      -1.19545      -785.036       785.036       1601.24       2386.28    
  27  0.362040      -1.01600      -667.197       667.197       2209.31       2876.51    
  28  0.630870     -0.460656      -302.508       302.508       2329.41       2631.92    
  29  0.685312     -0.377881      -248.150       248.150       2259.48       2507.63    
  30  0.329910      -1.10894      -728.227       728.227       2195.97       2924.20    
  31  0.906630E-01  -2.40061      -1576.45       1576.45       2213.55       3790.01    
  32  0.339749      -1.07955      -708.929       708.929       1184.14       1893.07    
  33  0.783039     -0.244573      -160.608       160.608       1458.41       1619.02    
  34  0.322673      -1.13112      -742.793       742.793       2088.82       2831.61    
  35  0.255311      -1.36527      -896.559       896.559       2085.96       2982.52    
  36  0.645921     -0.437078      -287.024       287.024       2197.23       2484.26    
  37  0.240122      -1.42661      -936.838       936.838       2390.48       3327.32    
  38  0.224638      -1.49326      -980.611       980.611       2188.28       3168.89    
  39  0.682659     -0.381760      -250.698       250.698       2185.83       2436.53    
  40  0.533856     -0.627629      -412.157       412.157       2532.77       2944.93    
  41  0.439620E-02  -5.42701      -3563.86       3563.86       1859.89       5423.76    
  42  0.409891     -0.891863      -585.677       585.677       2335.74       2921.42    
  43  0.379406     -0.969149      -636.430       636.430       2190.01       2826.44    
  44  0.982111     -0.180514E-01  -11.8542       11.8542       2058.28       2070.14    
  45  0.243530      -1.41251      -927.583       927.583       2341.90       3269.49    
  46  0.709323     -0.343445      -225.536       225.536       2184.79       2410.32    
  47  0.212014      -1.55110      -1018.59       1018.59       1916.51       2935.10    
  48  0.530919     -0.633146      -415.780       415.780       2188.96       2604.75    
  49  0.439600     -0.821890      -539.727       539.727       1897.86       2437.59    
loop,thermsimp(1:2)       21   796.304       269.356    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80       1800.44         68.48          1.26         39.30          1.41          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1800.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       21
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       22
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       79      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -629.088       629.088       1187.73       1816.81    
   2  0.741480     -0.299107      -196.420       196.420       1458.41       1654.83    
   3  0.138898      -1.97401      -1296.31       1296.31       1184.14       2480.45    
   4  0.751974E-01  -2.58764      -1699.28       1699.28       2058.28       3757.56    
   5  0.824485     -0.192996      -126.738       126.738       1284.82       1411.55    
   6  0.982900     -0.172482E-01  -11.3267       11.3267       1817.15       1828.47    
   7  0.693409     -0.366136      -240.438       240.438       1953.34       2193.78    
   8  0.941572     -0.602045E-01  -39.5356       39.5356       2161.98       2201.52    
   9  0.812713     -0.207378      -136.183       136.183       2185.36       2321.54    
  10  0.879507     -0.128393      -84.3145       84.3145       1969.79       2054.10    
  11  0.418958     -0.869984      -571.309       571.309       1869.96       2441.27    
  12  0.314952      -1.15533      -758.695       758.695       1601.24       2359.94    
  13  0.812426     -0.207731      -136.415       136.415       2184.79       2321.20    
  14  0.213788      -1.54277      -1013.12       1013.12       2188.00       3201.12    
  15  0.521629     -0.650798      -427.372       427.372       2185.83       2613.20    
  16  0.287143      -1.24777      -819.401       819.401       1897.86       2717.26    
  17  0.518340     -0.657125      -431.527       431.527       2195.78       2627.30    
  18  0.712802E-02  -4.94372      -3246.49       3246.49       2197.23       5443.72    
  19  0.579935     -0.544838      -357.790       357.790       1601.65       1959.44    
  20  0.508101E-02  -5.28224      -3468.79       3468.79       2259.48       5728.27    
  21  0.984466     -0.156557E-01  -10.2810       10.2810       2034.09       2044.37    
  22  0.394325     -0.930579      -611.101       611.101       1645.25       2256.36    
  23  0.837309     -0.177562      -116.603       116.603       2197.16       2313.76    
  24  0.683519     -0.380501      -249.871       249.871       2188.96       2438.84    
  25  0.892337     -0.113912      -74.8047       74.8047       2207.09       2281.90    
  26  0.297675      -1.21175      -795.746       795.746       1956.20       2751.95    
  27  0.566054     -0.569065      -373.699       373.699       2329.41       2703.11    
  28  0.325499E-01  -3.42498      -2249.15       2249.15       2190.01       4439.16    
  29  0.721169     -0.326882      -214.660       214.660       2088.82       2303.48    
  30  0.370449     -0.993040      -652.119       652.119       2209.31       2861.43    
  31  0.398952     -0.918913      -603.441       603.441       2335.74       2939.18    
  32  0.942469     -0.592518E-01  -38.9100       38.9100       2195.97       2234.88    
  33  0.379045     -0.970101      -637.055       637.055       1916.51       2553.57    
  34  0.218373      -1.52155      -999.186       999.186       2532.77       3531.96    
  35  0.413944     -0.882024      -579.216       579.216       2085.96       2665.18    
  36  0.452532     -0.792896      -520.687       520.687       2246.97       2767.66    
  37  0.938896     -0.630505E-01  -41.4046       41.4046       2330.37       2371.78    
  38  0.389299     -0.943409      -619.526       619.526       1968.99       2588.51    
  39  0.943794     -0.578471E-01  -37.9876       37.9876       2329.11       2367.10    
  40  0.706887     -0.346884      -227.795       227.795       2010.43       2238.22    
  41  0.274873      -1.29145      -848.079       848.079       2261.16       3109.24    
  42  0.343864      -1.06751      -701.022       701.022       2188.28       2889.30    
  43  0.869527E-01  -2.44239      -1603.89       1603.89       2448.82       4052.72    
  44  0.859615     -0.151271      -99.3378       99.3378       2341.90       2441.24    
  45  0.264079      -1.33151      -874.386       874.386       2390.48       3264.87    
  46  0.494871     -0.703457      -461.953       461.953       2213.55       2675.51    
  47  0.112943      -2.18087      -1432.16       1432.16       2245.10       3677.25    
  48  0.358273      -1.02646      -674.066       674.066       1859.89       2533.96    
  49  0.215257      -1.53592      -1008.62       1008.62       1800.44       2809.06    
loop,thermsimp(1:2)       22   629.088       196.420    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81       2398.23         68.35          1.23         39.23          1.70          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    2398.2        3.347     -3.073      4.502     -102.6     0.2555    
                     -0.2358E-02 0.8391     -99.70      4.909      1.158    

                       3.411    -0.8185      1.578      5780.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.261      0.000      0.000      7000.      549.6    

                      -1.364     -4.999     -7.589     -7.742      8.862    

                      -5.120     -3.949      4855.      0.000      6637.    



                       2207.      5768.      6370.      2323.      3032.    

                       3899.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.821     -1.571     -2.158     -2.002    -0.3807    

                     -0.3252      9.586      8.493    -0.1491E+05 -5.317    

                      0.1181     -2.455      8.944      9.101    -0.1969E+05



                      -6.000     0.5695     0.4042E-01  9.503      8.952    

                     -0.1944E+05 -6.000     -1.027    -0.7301      9.756    

                       9.468    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2398.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       22
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       23
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       80      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -732.729       732.729       1284.82       2017.54    
   2  0.736029     -0.306486      -201.266       201.266       1458.41       1659.67    
   3  0.608436     -0.496864      -326.285       326.285       1187.73       1514.01    
   4  0.584882     -0.536346      -352.213       352.213       1817.15       2169.36    
   5  0.617514     -0.482053      -316.559       316.559       1601.65       1918.21    
   6  0.376473     -0.976909      -641.526       641.526       2034.09       2675.61    
   7  0.535145     -0.625218      -410.574       410.574       1969.79       2380.36    
   8  0.341783      -1.07358      -705.008       705.008       1953.34       2658.35    
   9  0.804208E-01  -2.52048      -1655.17       1655.17       2161.98       3817.16    
  10  0.660499     -0.414760      -272.369       272.369       2195.97       2468.34    
  11  0.739860E-01  -2.60388      -1709.94       1709.94       2010.43       3720.37    
  12  0.203251      -1.59331      -1046.31       1046.31       1645.25       2691.57    
  13  0.637025     -0.450946      -296.131       296.131       2207.09       2503.23    
  14  0.687460     -0.374752      -246.095       246.095       2088.82       2334.92    
  15  0.663581     -0.410105      -269.312       269.312       2197.16       2466.47    
  16  0.579690     -0.545263      -358.068       358.068       2184.79       2542.86    
  17  0.775653     -0.254050      -166.832       166.832       2185.36       2352.19    
  18  0.284124      -1.25834      -826.341       826.341       1601.24       2427.58    
  19  0.317710      -1.14662      -752.970       752.970       2329.11       3082.08    
  20  0.958871     -0.419990E-01  -27.5803       27.5803       2330.37       2357.95    
  21  0.582932     -0.539685      -354.406       354.406       2188.96       2543.37    
  22  0.905476     -0.992942E-01  -65.2055       65.2055       2341.90       2407.11    
  23  0.225214      -1.49070      -978.929       978.929       1869.96       2848.89    
  24  0.618260     -0.480846      -315.766       315.766       1184.14       1499.91    
  25  0.608706     -0.496420      -325.994       325.994       1859.89       2185.89    
  26  0.651052     -0.429165      -281.828       281.828       1916.51       2198.34    
  27  0.138439E-02  -6.58249      -4322.65       4322.65       1968.99       6291.64    
  28  0.157375      -1.84913      -1214.30       1214.30       2185.83       3400.13    
  29  0.168063      -1.78342      -1171.15       1171.15       2195.78       3366.93    
  30  0.924354     -0.786598E-01  -51.6551       51.6551       2085.96       2137.62    
  31  0.985585     -0.145204E-01  -9.53540       9.53540       2213.55       2223.09    
  32  0.540844E-01  -2.91721      -1915.70       1915.70       2329.41       4245.11    
  33  0.535345     -0.624843      -410.328       410.328       1897.86       2308.19    
  34  0.736351     -0.306048      -200.979       200.979       1956.20       2157.18    
  35  0.283062E-01  -3.56467      -2340.88       2340.88       2246.97       4587.85    
  36  0.690743     -0.369987      -242.966       242.966       1800.44       2043.41    
  37  0.260994      -1.34326      -882.102       882.102       2209.31       3091.42    
  38  0.243637      -1.41208      -927.297       927.297       2188.28       3115.58    
  39  0.850226     -0.162253      -106.550       106.550       2335.74       2442.29    
  40  0.589307     -0.528809      -347.263       347.263       2261.16       2608.43    
  41  0.515087     -0.663420      -435.661       435.661       2188.00       2623.66    
  42  0.348855      -1.05310      -691.560       691.560       2390.48       3082.04    
  43  0.791407     -0.233943      -153.628       153.628       2532.77       2686.40    
  44  0.370775     -0.992160      -651.541       651.541       2245.10       2896.64    
  45  0.676021     -0.391531      -257.115       257.115       2058.28       2315.40    
  46  0.125601      -2.07465      -1362.40       1362.40       2448.82       3811.22    
  47  0.582904     -0.539733      -354.437       354.437       2190.01       2544.45    
  48  0.818994     -0.199679      -131.127       131.127       2197.23       2328.36    
  49  0.291406      -1.23304      -809.723       809.723       2398.23       3207.95    
loop,thermsimp(1:2)       23   732.729       201.266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82       2838.69         68.14          1.20         39.43          1.86          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2838.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       23
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       24
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       81      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -809.506       809.506       1184.14       1993.65    
   2  0.991852     -0.818183E-02  -5.37292       5.37292       1187.73       1193.10    
   3  0.317368      -1.14769      -753.679       753.679       1458.41       2212.09    
   4  0.737330     -0.304720      -200.106       200.106       1601.65       1801.76    
   5  0.834641     -0.180753      -118.699       118.699       1284.82       1403.51    
   6  0.464401     -0.767007      -503.686       503.686       1800.44       2304.12    
   7  0.592116     -0.524053      -344.140       344.140       2085.96       2430.10    
   8  0.464372     -0.767069      -503.726       503.726       1956.20       2459.93    
   9  0.636055E-01  -2.75505      -1809.22       1809.22       1817.15       3626.36    
  10  0.712927     -0.338376      -222.208       222.208       1859.89       2082.10    
  11  0.265597      -1.32578      -870.623       870.623       1916.51       2787.13    
  12  0.152318      -1.88178      -1235.75       1235.75       2213.55       3449.30    
  13  0.629580     -0.462703      -303.852       303.852       1897.86       2201.71    
  14  0.849464     -0.163150      -107.139       107.139       2058.28       2165.42    
  15  0.487816     -0.717817      -471.383       471.383       2197.23       2668.61    
  16  0.374667     -0.981718      -644.684       644.684       2088.82       2733.50    
  17  0.657383     -0.419488      -275.473       275.473       2185.36       2460.83    
  18  0.846901     -0.166172      -109.123       109.123       2330.37       2439.50    
  19  0.201185      -1.60353      -1053.02       1053.02       1969.79       3022.81    
  20  0.771980     -0.258797      -169.949       169.949       2341.90       2511.85    
  21  0.507739     -0.677788      -445.096       445.096       1601.24       2046.34    
  22  0.280262      -1.27203      -835.330       835.330       2335.74       3171.07    
  23  0.285359      -1.25401      -823.494       823.494       2197.16       3020.65    
  24  0.246191      -1.40165      -920.446       920.446       2195.97       3116.42    
  25  0.559989E-01  -2.88242      -1892.86       1892.86       2207.09       4099.95    
  26  0.330462      -1.10726      -727.128       727.128       2184.79       2911.92    
  27  0.899405     -0.106022      -69.6237       69.6237       2188.96       2258.59    
  28  0.637003     -0.450981      -296.154       296.154       2190.01       2486.16    
  29  0.699726E-01  -2.65965      -1746.57       1746.57       2261.16       4007.73    
  30  0.677191     -0.389802      -255.979       255.979       2188.00       2443.98    
  31  0.649507     -0.431542      -283.389       283.389       1953.34       2236.73    
  32  0.527986     -0.638685      -419.418       419.418       2034.09       2453.51    
  33  0.374870E-01  -3.28376      -2156.41       2156.41       2532.77       4689.19    
  34  0.448697     -0.801407      -526.276       526.276       1645.25       2171.53    
  35  0.809612     -0.211200      -138.693       138.693       1869.96       2008.65    
  36  0.836235     -0.178846      -117.446       117.446       2245.10       2362.54    
  37  0.198161      -1.61867      -1062.97       1062.97       2390.48       3453.45    
  38  0.222702      -1.50192      -986.295       986.295       2329.11       3315.41    
  39  0.888863     -0.117812      -77.3658       77.3658       2209.31       2286.68    
  40  0.868267     -0.141256      -92.7612       92.7612       2188.28       2281.04    
  41  0.164066      -1.80749      -1186.96       1186.96       2398.23       3585.19    
  42  0.163797      -1.80912      -1188.03       1188.03       2195.78       3383.81    
  43  0.883498     -0.123867      -81.3419       81.3419       2185.83       2267.17    
  44  0.749983     -0.287705      -188.933       188.933       2010.43       2199.36    
  45  0.666691     -0.405428      -266.240       266.240       2448.82       2715.06    
  46  0.978530     -0.217038E-01  -14.2526       14.2526       2161.98       2176.23    
  47  0.442024     -0.816391      -536.116       536.116       2329.41       2865.52    
  48  0.228080      -1.47806      -970.626       970.626       2246.97       3217.60    
  49  0.226174      -1.48645      -976.135       976.135       2838.69       3814.82    
loop,thermsimp(1:2)       24   809.506       5.37292    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83       2430.36         67.91          1.15         39.73          2.04          0.05        110.88
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2430.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       24
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       25
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       82      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -1264.01       1264.01       1187.73       2451.74    
   2  0.438196     -0.825090      -541.828       541.828       1284.82       1826.64    
   3  0.637359     -0.450422      -295.788       295.788       1601.65       1897.44    
   4  0.122813      -2.09709      -1377.14       1377.14       1184.14       2561.28    
   5  0.926899     -0.759107E-01  -49.8497       49.8497       1869.96       1919.81    
   6  0.456580     -0.783992      -514.840       514.840       1601.24       2116.08    
   7  0.988763     -0.113008E-01  -7.42115       7.42115       1859.89       1867.31    
   8  0.499609     -0.693930      -455.696       455.696       2058.28       2513.98    
   9  0.432617     -0.837902      -550.241       550.241       1645.25       2195.50    
  10  0.403570     -0.907406      -595.884       595.884       2161.98       2757.87    
  11  0.435824     -0.830517      -545.392       545.392       2010.43       2555.82    
  12  0.504807     -0.683579      -448.899       448.899       1897.86       2346.76    
  13  0.778763     -0.250048      -164.204       164.204       1458.41       1622.61    
  14  0.429140     -0.845972      -555.541       555.541       1953.34       2508.88    
  15  0.597763     -0.514562      -337.907       337.907       2188.96       2526.87    
  16  0.425932     -0.853476      -560.468       560.468       2185.83       2746.30    
  17  0.825778     -0.191430      -125.710       125.710       2188.28       2313.99    
  18  0.448772     -0.801241      -526.166       526.166       2209.31       2735.48    
  19  0.701335     -0.354770      -232.973       232.973       1800.44       2033.41    
  20  0.425857     -0.853651      -560.584       560.584       2245.10       2805.68    
  21  0.800815     -0.222126      -145.868       145.868       2085.96       2231.83    
  22  0.724239     -0.322634      -211.870       211.870       2330.37       2542.24    
  23  0.312194      -1.16413      -764.472       764.472       2188.00       2952.47    
  24  0.796592     -0.227412      -149.339       149.339       2034.09       2183.43    
  25  0.164146      -1.80700      -1186.64       1186.64       1956.20       3142.84    
  26  0.503041     -0.687083      -451.200       451.200       2185.36       2636.56    
  27  0.640838     -0.444978      -292.213       292.213       2190.01       2482.22    
  28  0.327752      -1.11550      -732.536       732.536       2341.90       3074.44    
  29  0.720325     -0.328053      -215.429       215.429       2197.23       2412.66    
  30  0.447570     -0.803922      -527.927       527.927       2448.82       2976.75    
  31  0.377461     -0.974289      -639.805       639.805       2088.82       2728.63    
  32  0.951264     -0.499633E-01  -32.8104       32.8104       1916.51       1949.32    
  33  0.610405     -0.493632      -324.163       324.163       2329.41       2653.57    
  34  0.564697     -0.571466      -375.276       375.276       2184.79       2560.06    
  35  0.993998     -0.601974E-02  -3.95310       3.95310       2197.16       2201.11    
  36  0.908032     -0.964757E-01  -63.3546       63.3546       1969.79       2033.14    
  37  0.731210     -0.313055      -205.580       205.580       2195.97       2401.55    
  38  0.818812     -0.199901      -131.273       131.273       2335.74       2467.02    
  39  0.423172     -0.859976      -564.737       564.737       2246.97       2811.71    
  40  0.554414     -0.589843      -387.344       387.344       2329.11       2716.46    
  41  0.244903E-01  -3.70948      -2435.97       2435.97       2195.78       4631.75    
  42  0.337898      -1.08501      -712.515       712.515       2213.55       2926.07    
  43  0.634521E-01  -2.75747      -1810.80       1810.80       2390.48       4201.28    
  44  0.824978     -0.192398      -126.346       126.346       2398.23       2524.58    
  45  0.954123     -0.469622E-01  -30.8396       30.8396       1817.15       1847.99    
  46  0.807852     -0.213376      -140.122       140.122       2838.69       2978.81    
  47  0.335430      -1.09234      -717.329       717.329       2261.16       2978.49    
  48  0.266194      -1.32353      -869.149       869.149       2207.09       3076.24    
  49  0.797818     -0.225874      -148.329       148.329       2430.36       2578.69    
loop,thermsimp(1:2)       25   1264.01       541.828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84       1977.97         68.37          1.18         39.66          1.59          0.05        110.85
Just calling func    0   0        110.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85       2094.15         68.40          1.17         39.71          1.70          0.05        111.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1977.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       25
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       26
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       84      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -162.285       162.285       1458.41       1620.69    
   2  0.928800     -0.738619E-01  -48.5044       48.5044       1284.82       1333.32    
   3  0.727994     -0.317462      -208.474       208.474       1817.15       2025.62    
   4  0.109723E-01  -4.51238      -2963.23       2963.23       1859.89       4823.13    
   5  0.160096      -1.83198      -1203.04       1203.04       1601.65       2804.69    
   6  0.497079     -0.699006      -459.030       459.030       1869.96       2328.99    
   7  0.789473     -0.236389      -155.234       155.234       1916.51       2071.74    
   8  0.763780     -0.269476      -176.962       176.962       1969.79       2146.75    
   9  0.217288      -1.52653      -1002.46       1002.46       1800.44       2802.90    
  10  0.867642     -0.141976      -93.2345       93.2345       1601.24       1694.48    
  11  0.740966     -0.299800      -196.876       196.876       2034.09       2230.96    
  12  0.999757     -0.242662E-03 -0.159354      0.159354       1645.25       1645.41    
  13  0.587476     -0.531920      -349.306       349.306       2197.16       2546.47    
  14  0.703619     -0.351518      -230.838       230.838       2085.96       2316.80    
  15  0.740946     -0.299828      -196.894       196.894       2188.28       2385.18    
  16  0.335927      -1.09086      -716.356       716.356       1897.86       2614.22    
  17  0.736553     -0.305774      -200.798       200.798       2195.97       2396.77    
  18  0.597397     -0.515174      -338.309       338.309       2197.23       2535.54    
  19  0.126601      -2.06672      -1357.19       1357.19       1187.73       2544.92    
  20  0.990194     -0.985477E-02  -6.47152       6.47152       2335.74       2342.21    
  21  0.716453     -0.333443      -218.969       218.969       2190.01       2408.98    
  22  0.279233E-01  -3.57829      -2349.83       2349.83       1953.34       4303.17    
  23  0.413932     -0.882054      -579.236       579.236       2058.28       2637.52    
  24  0.109516      -2.21168      -1452.39       1452.39       2398.23       3850.62    
  25  0.440749     -0.819279      -538.012       538.012       2188.96       2726.98    
  26  0.412115     -0.886453      -582.124       582.124       2330.37       2912.50    
  27  0.146963      -1.91758      -1259.25       1259.25       2010.43       3269.68    
  28  0.345919      -1.06155      -697.108       697.108       2184.79       2881.90    
  29  0.343614      -1.06824      -701.499       701.499       1184.14       1885.64    
  30  0.600334E-01  -2.81285      -1847.17       1847.17       2430.36       4277.53    
  31  0.751538     -0.285634      -187.573       187.573       2185.36       2372.93    
  32  0.878119     -0.129973      -85.3521       85.3521       2329.41       2414.76    
  33  0.544046     -0.608721      -399.741       399.741       2329.11       2728.85    
  34  0.931023     -0.714714E-01  -46.9345       46.9345       2088.82       2135.75    
  35  0.131968      -2.02520      -1329.93       1329.93       2209.31       3539.24    
  36  0.826694E-01  -2.49291      -1637.06       1637.06       2185.83       3822.90    
  37  0.174702E-02  -6.34984      -4169.88       4169.88       2161.98       6331.86    
  38  0.233470      -1.45470      -955.289       955.289       2245.10       3200.38    
  39  0.232927      -1.45703      -956.815       956.815       2246.97       3203.78    
  40  0.958279     -0.426163E-01  -27.9857       27.9857       2213.55       2241.54    
  41  0.820100     -0.198330      -130.241       130.241       2188.00       2318.24    
  42  0.305797      -1.18483      -778.069       778.069       2448.82       3226.89    
  43  0.260853      -1.34380      -882.459       882.459       2261.16       3143.62    
  44  0.960408     -0.403967E-01  -26.5281       26.5281       2838.69       2865.22    
  45  0.318957      -1.14270      -750.398       750.398       2341.90       3092.30    
  46  0.146887      -1.91809      -1259.59       1259.59       2207.09       3466.69    
  47  0.787623     -0.238735      -156.775       156.775       1956.20       2112.98    
  48  0.452412     -0.793163      -520.861       520.861       2390.48       2911.34    
  49  0.218339      -1.52170      -999.287       999.287       1977.97       2977.26    
loop,thermsimp(1:2)       26   162.285       48.5044    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86       1837.29         68.20          1.19         39.68          2.18          0.05        111.30
Just calling func    0   0        111.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1837.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       26
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       27
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       85      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -131.516       131.516       1284.82       1416.33    
   2  0.309452      -1.17295      -770.266       770.266       1458.41       2228.67    
   3  0.303638      -1.19192      -782.721       782.721       1645.25       2427.98    
   4  0.754457     -0.281757      -185.027       185.027       1601.24       1786.27    
   5  0.623133     -0.472996      -310.611       310.611       1184.14       1494.75    
   6  0.989422E-01  -2.31322      -1519.07       1519.07       1817.15       3336.21    
   7  0.695126     -0.363662      -238.813       238.813       1916.51       2155.32    
   8  0.832210E-01  -2.48626      -1632.70       1632.70       1956.20       3588.90    
   9  0.869521     -0.139813      -91.8139       91.8139       2088.82       2180.63    
  10  0.488136     -0.717160      -470.952       470.952       1969.79       2440.74    
  11  0.579877     -0.544940      -357.856       357.856       2034.09       2391.95    
  12  0.480435     -0.733064      -481.395       481.395       2213.55       2694.95    
  13  0.792626     -0.232404      -152.617       152.617       2085.96       2238.58    
  14  0.870230     -0.138998      -91.2783       91.2783       2188.00       2279.28    
  15  0.886361     -0.120631      -79.2169       79.2169       1869.96       1949.17    
  16  0.358181      -1.02672      -674.235       674.235       2335.74       3009.98    
  17  0.560125     -0.579594      -380.614       380.614       2185.36       2565.97    
  18  0.546151     -0.604859      -397.204       397.204       2188.28       2585.49    
  19  0.732086     -0.311858      -204.794       204.794       2195.97       2400.77    
  20  0.590102     -0.527460      -346.377       346.377       2190.01       2536.39    
  21  0.867355     -0.142307      -93.4518       93.4518       2329.41       2422.86    
  22  0.749758     -0.288005      -189.130       189.130       2197.23       2386.36    
  23  0.721970     -0.325772      -213.931       213.931       1187.73       1401.66    
  24  0.596865     -0.516065      -338.894       338.894       2197.16       2536.05    
  25  0.878161     -0.129925      -85.3203       85.3203       1897.86       1983.18    
  26  0.558752E-01  -2.88463      -1894.31       1894.31       2058.28       3952.59    
  27  0.555543     -0.587810      -386.009       386.009       2188.96       2574.97    
  28  0.597562     -0.514897      -338.127       338.127       2329.11       2667.24    
  29  0.995329     -0.468202E-02  -3.07463       3.07463       1800.44       1803.51    
  30  0.206787      -1.57606      -1034.99       1034.99       1601.65       2636.63    
  31  0.645457     -0.437797      -287.497       287.497       2838.69       3126.18    
  32  0.871352     -0.137710      -90.4324       90.4324       2184.79       2275.22    
  33  0.701360     -0.354733      -232.950       232.950       2390.48       2623.43    
  34  0.936151     -0.659784E-01  -43.3273       43.3273       2330.37       2373.70    
  35  0.590091     -0.527478      -346.389       346.389       1977.97       2324.36    
  36  0.750433     -0.287105      -188.539       188.539       2341.90       2530.44    
  37  0.326255      -1.12007      -735.541       735.541       2261.16       2996.70    
  38  0.873133     -0.135668      -89.0917       89.0917       2245.10       2334.19    
  39  0.621627     -0.475415      -312.200       312.200       2246.97       2559.17    
  40  0.153041      -1.87705      -1232.64       1232.64       2448.82       3681.46    
  41  0.196696      -1.62610      -1067.84       1067.84       2010.43       3078.27    
  42  0.365028      -1.00778      -661.799       661.799       2207.09       2868.89    
  43  0.398429     -0.920226      -604.303       604.303       2209.31       2813.62    
  44  0.549691     -0.598399      -392.963       392.963       2185.83       2578.79    
  45  0.994179     -0.583795E-02  -3.83372       3.83372       2398.23       2402.07    
  46  0.147335E-01  -4.21763      -2769.67       2769.67       2430.36       5200.03    
  47  0.224737      -1.49282      -980.321       980.321       1953.34       2933.66    
  48  0.182172      -1.70281      -1118.21       1118.21       1859.89       2978.11    
  49  0.230919      -1.46569      -962.503       962.503       1837.29       2799.79    
loop,thermsimp(1:2)       27   131.516       770.266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87       2539.01         67.86          1.10         39.19          2.66          0.05        110.87
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2539.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       27
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       28
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       86      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -139.468       139.468       1187.73       1327.19    
   2  0.162004E-01  -4.12272      -2707.35       2707.35       1284.82       3992.16    
   3  0.446841E-01  -3.10814      -2041.08       2041.08       1184.14       3225.22    
   4  0.757954     -0.277132      -181.990       181.990       1601.24       1783.23    
   5  0.525315     -0.643757      -422.749       422.749       1800.44       2223.19    
   6  0.229940      -1.46994      -965.293       965.293       1869.96       2835.25    
   7  0.273310E-01  -3.59973      -2363.91       2363.91       1897.86       4261.77    
   8  0.228047      -1.47820      -970.720       970.720       1916.51       2887.23    
   9  0.963384E-01  -2.33989      -1536.58       1536.58       2088.82       3625.40    
  10  0.495504     -0.702179      -461.114       461.114       1458.41       1919.52    
  11  0.930436     -0.721018E-01  -47.3485       47.3485       2085.96       2133.31    
  12  0.138744      -1.97513      -1297.05       1297.05       2184.79       3481.83    
  13  0.676381     -0.390999      -256.765       256.765       2188.00       2444.77    
  14  0.763696     -0.269586      -177.034       177.034       1977.97       2155.01    
  15  0.282468      -1.26419      -830.181       830.181       2245.10       3075.28    
  16  0.359172      -1.02395      -672.419       672.419       2330.37       3002.79    
  17  0.392258     -0.935834      -614.553       614.553       2197.23       2811.78    
  18  0.524686     -0.644955      -423.535       423.535       2034.09       2457.62    
  19  0.850465     -0.161972      -106.365       106.365       2195.97       2302.34    
  20  0.227056      -1.48256      -973.579       973.579       2398.23       3371.81    
  21  0.942039     -0.597082E-01  -39.2097       39.2097       2329.41       2368.62    
  22  0.807336     -0.214016      -140.542       140.542       1645.25       1785.80    
  23  0.345853      -1.06174      -697.235       697.235       1969.79       2667.02    
  24  0.762940     -0.270575      -177.684       177.684       2341.90       2519.59    
  25  0.589959     -0.527702      -346.536       346.536       2197.16       2543.70    
  26  0.563539     -0.573518      -376.623       376.623       2190.01       2566.63    
  27  0.812044     -0.208201      -136.724       136.724       2246.97       2383.69    
  28  0.735850     -0.306729      -201.426       201.426       2185.36       2386.78    
  29  0.396292     -0.925605      -607.835       607.835       2188.96       2796.80    
  30  0.623568     -0.472298      -310.153       310.153       2185.83       2495.98    
  31  0.925937     -0.769486E-01  -50.5313       50.5313       2188.28       2238.81    
  32  0.880074     -0.127749      -83.8917       83.8917       2390.48       2474.37    
  33  0.379958     -0.967693      -635.474       635.474       1601.65       2237.12    
  34  0.842940E-01  -2.47344      -1624.28       1624.28       2329.11       3953.40    
  35  0.199092      -1.61399      -1059.89       1059.89       2213.55       3273.44    
  36  0.625899     -0.468566      -307.702       307.702       1837.29       2144.99    
  37  0.888337     -0.118405      -77.7550       77.7550       2209.31       2287.07    
  38  0.959633     -0.412048E-01  -27.0588       27.0588       2207.09       2234.15    
  39  0.289813      -1.23852      -813.322       813.322       1953.34       2766.66    
  40  0.889440     -0.117163      -76.9399       76.9399       1859.89       1936.83    
  41  0.797260     -0.226575      -148.789       148.789       2261.16       2409.95    
  42  0.451097     -0.796073      -522.773       522.773       2335.74       2858.52    
  43  0.609578     -0.494989      -325.054       325.054       2010.43       2335.48    
  44  0.910850     -0.933770E-01  -61.3197       61.3197       2838.69       2900.01    
  45  0.448191     -0.802536      -527.017       527.017       1817.15       2344.16    
  46  0.831229     -0.184850      -121.389       121.389       1956.20       2077.59    
  47  0.246260      -1.40137      -920.264       920.264       2448.82       3369.09    
  48  0.280480      -1.27125      -834.818       834.818       2058.28       2893.10    
  49  0.161513      -1.82317      -1197.26       1197.26       2539.01       3736.27    
loop,thermsimp(1:2)       28   139.468       2707.35    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88       2499.64         67.59          1.07         38.59          3.27          0.05        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2499.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       28
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       29
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       87      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -1415.27       1415.27       1187.73       2602.99    
   2  0.685048     -0.378267      -248.404       248.404       1601.24       1849.65    
   3  0.739526     -0.301746      -198.153       198.153       1645.25       1843.41    
   4  0.161448      -1.82357      -1197.52       1197.52       1458.41       2655.93    
   5  0.819608     -0.198929      -130.635       130.635       1859.89       1990.53    
   6  0.750679     -0.286777      -188.323       188.323       1956.20       2144.53    
   7  0.797409     -0.226388      -148.666       148.666       2085.96       2234.63    
   8  0.193123      -1.64443      -1079.88       1079.88       1837.29       2917.17    
   9  0.189346E-01  -3.96676      -2604.93       2604.93       1977.97       4582.90    
  10  0.715264     -0.335103      -220.059       220.059       1800.44       2020.50    
  11  0.384856     -0.954886      -627.064       627.064       2207.09       2834.16    
  12  0.268023      -1.31668      -864.652       864.652       1601.65       2466.30    
  13  0.777164     -0.252104      -165.554       165.554       2188.28       2353.84    
  14  0.707495E-01  -2.64861      -1739.31       1739.31       2209.31       3948.63    
  15  0.233610      -1.45410      -954.894       954.894       2195.97       3150.87    
  16  0.193057      -1.64477      -1080.10       1080.10       2010.43       3090.53    
  17  0.486879     -0.719739      -472.645       472.645       1817.15       2289.79    
  18  0.735370     -0.307381      -201.854       201.854       2329.41       2531.26    
  19  0.147509      -1.91387      -1256.82       1256.82       2246.97       3503.79    
  20  0.739111     -0.302308      -198.522       198.522       2185.36       2383.88    
  21  0.886241     -0.120766      -79.3057       79.3057       2261.16       2340.47    
  22  0.158672      -1.84092      -1208.91       1208.91       2188.00       3396.91    
  23  0.143658      -1.94032      -1274.19       1274.19       2034.09       3308.28    
  24  0.637431E-02  -5.05548      -3319.88       3319.88       2390.48       5710.36    
  25  0.753372     -0.283196      -185.972       185.972       2185.83       2371.80    
  26  0.555831     -0.587292      -385.668       385.668       2341.90       2727.57    
  27  0.280013      -1.27292      -835.912       835.912       2197.16       3033.07    
  28  0.811304     -0.209112      -137.322       137.322       2190.01       2327.33    
  29  0.972296E-02  -4.63327      -3042.62       3042.62       1969.79       5012.40    
  30  0.713459     -0.337631      -221.719       221.719       1953.34       2175.06    
  31  0.194621      -1.63670      -1074.80       1074.80       2188.96       3263.77    
  32  0.492587     -0.708083      -464.991       464.991       2197.23       2662.22    
  33  0.759094E-01  -2.57821      -1693.09       1693.09       1869.96       3563.04    
  34  0.494544     -0.704119      -462.388       462.388       2335.74       2798.13    
  35  0.297023      -1.21395      -797.186       797.186       1916.51       2713.70    
  36  0.429878E-01  -3.14684      -2066.50       2066.50       2058.28       4124.78    
  37  0.490931     -0.711452      -467.203       467.203       2838.69       3305.89    
  38  0.534417     -0.626578      -411.467       411.467       2330.37       2741.84    
  39  0.254967      -1.36662      -897.445       897.445       2245.10       3142.54    
  40  0.995945     -0.406335E-02  -2.66836       2.66836       1184.14       1186.81    
  41  0.428814E-01  -3.14932      -2068.12       2068.12       2213.55       4281.68    
  42  0.332915      -1.09987      -722.272       722.272       2448.82       3171.10    
  43  0.657266     -0.419666      -275.590       275.590       2398.23       2673.82    
  44  0.301071      -1.20041      -788.295       788.295       2184.79       2973.08    
  45  0.998178     -0.182349E-02  -1.19747       1.19747       2088.82       2090.02    
  46  0.533372     -0.628536      -412.753       412.753       2539.01       2951.77    
  47  0.244746      -1.40753      -924.313       924.313       2329.11       3253.43    
  48  0.345321      -1.06328      -698.246       698.246       1284.82       1983.06    
  49  0.339541      -1.08016      -709.331       709.331       2499.64       3208.97    
loop,thermsimp(1:2)       29   1415.27       248.404    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89       1619.43         68.30          1.22         39.34          1.44          0.05        110.35
Just calling func    0   0        110.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1619.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       29
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       30
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       88      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -2119.76       2119.76       1184.14       3303.90    
   2  0.712690     -0.338709      -222.427       222.427       1645.25       1867.68    
   3  0.284498      -1.25703      -825.478       825.478       1601.24       2426.72    
   4  0.132414      -2.02182      -1327.71       1327.71       1284.82       2612.52    
   5  0.868558     -0.140920      -92.5409       92.5409       1859.89       1952.43    
   6  0.695240     -0.363498      -238.705       238.705       1800.44       2039.14    
   7  0.777362     -0.251849      -165.387       165.387       2088.82       2254.21    
   8  0.302494      -1.19569      -785.199       785.199       1956.20       2741.40    
   9  0.710188     -0.342225      -224.736       224.736       1953.34       2178.08    
  10  0.884530     -0.122698      -80.5747       80.5747       2085.96       2166.54    
  11  0.146421E-01  -4.22386      -2773.76       2773.76       1817.15       4590.91    
  12  0.834801     -0.180562      -118.573       118.573       2190.01       2308.58    
  13  0.414011     -0.881863      -579.110       579.110       2261.16       2840.27    
  14  0.655777     -0.421935      -277.080       277.080       2188.28       2465.36    
  15  0.530106     -0.634679      -416.787       416.787       2185.83       2602.62    
  16  0.325231      -1.12322      -737.607       737.607       2185.36       2922.97    
  17  0.293550      -1.22571      -804.910       804.910       1601.65       2406.56    
  18  0.194161      -1.63907      -1076.36       1076.36       2329.41       3405.77    
  19  0.589029E-01  -2.83186      -1859.66       1859.66       1187.73       3047.38    
  20  0.385142     -0.954143      -626.576       626.576       1458.41       2084.98    
  21  0.287461      -1.24667      -818.674       818.674       2197.23       3015.91    
  22  0.528518     -0.637678      -418.756       418.756       2398.23       2816.99    
  23  0.517042     -0.659630      -433.172       433.172       1916.51       2349.68    
  24  0.453375     -0.791035      -519.464       519.464       2341.90       2861.37    
  25  0.695596     -0.362986      -238.369       238.369       2330.37       2568.74    
  26  0.645178     -0.438228      -287.780       287.780       2335.74       2623.52    
  27  0.696076     -0.362297      -237.917       237.917       2207.09       2445.01    
  28  0.483522     -0.726659      -477.189       477.189       1837.29       2314.48    
  29  0.155396E-01  -4.16436      -2734.69       2734.69       2539.01       5273.71    
  30  0.883154     -0.124256      -81.5976       81.5976       2184.79       2266.39    
  31  0.525944     -0.642561      -421.963       421.963       2197.16       2619.12    
  32  0.746799     -0.291959      -191.726       191.726       2010.43       2202.15    
  33  0.458658     -0.779449      -511.856       511.856       2245.10       2756.95    
  34  0.614284     -0.487298      -320.004       320.004       2195.97       2515.98    
  35  0.581412     -0.542295      -356.120       356.120       2448.82       2804.94    
  36  0.820935     -0.197312      -129.573       129.573       2499.64       2629.21    
  37  0.852366     -0.159739      -104.899       104.899       2329.11       2434.01    
  38  0.527059     -0.640443      -420.572       420.572       2188.96       2609.54    
  39  0.376404     -0.977092      -641.646       641.646       2838.69       3480.33    
  40  0.729525E-01  -2.61795      -1719.18       1719.18       2034.09       3753.27    
  41  0.342258      -1.07219      -704.096       704.096       2188.00       2892.10    
  42  0.955065     -0.459761E-01  -30.1920       30.1920       2246.97       2277.16    
  43  0.508654E-01  -2.97857      -1956.00       1956.00       1869.96       3825.95    
  44  0.471716     -0.751379      -493.422       493.422       2209.31       2702.74    
  45  0.137118      -1.98691      -1304.79       1304.79       2058.28       3363.07    
  46  0.844826     -0.168625      -110.734       110.734       2213.55       2324.29    
  47  0.841708     -0.172322      -113.162       113.162       1977.97       2091.13    
  48  0.360396E-01  -3.32314      -2182.27       2182.27       1969.79       4152.06    
  49  0.953282     -0.478444E-01  -31.4189       31.4189       1619.43       1650.85    
loop,thermsimp(1:2)       30   2119.76       222.427    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90       2438.28         68.02          1.16         39.68          1.88          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2438.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       30
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       31
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       89      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -914.104       914.104       1619.43       2533.53    
   2  0.247647      -1.39575      -916.575       916.575       1645.25       2561.83    
   3  0.396263     -0.925678      -607.883       607.883       1859.89       2467.78    
   4  0.386461     -0.950723      -624.330       624.330       1800.44       2424.77    
   5  0.729285     -0.315691      -207.311       207.311       1458.41       1665.72    
   6  0.665866     -0.406667      -267.054       267.054       1977.97       2245.03    
   7  0.385122     -0.954194      -626.609       626.609       2085.96       2712.57    
   8  0.625701     -0.468883      -307.910       307.910       1953.34       2261.25    
   9  0.392668     -0.934792      -613.868       613.868       2010.43       2624.30    
  10  0.698356     -0.359026      -235.769       235.769       2088.82       2324.59    
  11  0.537534E-01  -2.92335      -1919.73       1919.73       2184.79       4104.52    
  12  0.289307      -1.24027      -814.471       814.471       2246.97       3061.44    
  13  0.138460E-01  -4.27976      -2810.47       2810.47       2190.01       5000.48    
  14  0.824110     -0.193451      -127.037       127.037       1837.29       1964.33    
  15  0.560983     -0.578065      -379.609       379.609       2213.55       2593.16    
  16  0.116087E-01  -4.45600      -2926.21       2926.21       1916.51       4842.72    
  17  0.218033      -1.52311      -1000.21       1000.21       1601.65       2601.86    
  18  0.893705E-01  -2.41497      -1585.88       1585.88       1601.24       3187.13    
  19  0.304886      -1.18782      -780.026       780.026       2329.11       3109.14    
  20  0.179833      -1.71573      -1126.70       1126.70       2207.09       3333.80    
  21  0.867378     -0.142281      -93.4342       93.4342       2188.28       2281.72    
  22  0.243287      -1.41351      -928.239       928.239       2195.97       3124.21    
  23  0.772489     -0.258138      -169.516       169.516       2330.37       2499.89    
  24  0.321011      -1.13628      -746.184       746.184       2185.83       2932.01    
  25  0.499417     -0.694314      -455.949       455.949       2188.96       2644.91    
  26  0.396806     -0.924307      -606.983       606.983       1284.82       1891.80    
  27  0.580203E-01  -2.84696      -1869.57       1869.57       2197.16       4066.73    
  28  0.854206     -0.157583      -103.483       103.483       2335.74       2439.23    
  29  0.914649     -0.892145E-01  -58.5862       58.5862       2499.64       2558.22    
  30  0.167601      -1.78617      -1172.96       1172.96       2209.31       3382.27    
  31  0.350137      -1.04943      -689.150       689.150       1956.20       2645.35    
  32  0.522932     -0.648304      -425.734       425.734       2245.10       2670.83    
  33  0.538779     -0.618450      -406.130       406.130       2448.82       2854.95    
  34  0.693066     -0.366629      -240.762       240.762       2398.23       2638.99    
  35  0.361961      -1.01622      -667.340       667.340       2261.16       2928.50    
  36  0.310665      -1.16904      -767.696       767.696       2341.90       3109.60    
  37  0.818669     -0.200076      -131.388       131.388       2188.00       2319.39    
  38  0.582861     -0.539807      -354.485       354.485       2185.36       2539.84    
  39  0.401728     -0.911979      -598.887       598.887       2197.23       2796.12    
  40  0.171089      -1.76557      -1159.43       1159.43       1187.73       2347.16    
  41  0.980174     -0.200248E-01  -13.1501       13.1501       1184.14       1197.29    
  42  0.495496     -0.702196      -461.125       461.125       2058.28       2519.41    
  43  0.436683     -0.828549      -544.099       544.099       2329.41       2873.51    
  44  0.910411     -0.938588E-01  -61.6361       61.6361       2838.69       2900.32    
  45  0.649932     -0.430887      -282.959       282.959       2034.09       2317.05    
  46  0.755226     -0.280738      -184.358       184.358       1869.96       2054.31    
  47  0.927352     -0.754221E-01  -49.5289       49.5289       1969.79       2019.32    
  48  0.848028     -0.164842      -108.250       108.250       1817.15       1925.40    
  49  0.146193      -1.92283      -1262.70       1262.70       2438.28       3700.98    
loop,thermsimp(1:2)       31   914.104       916.575    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91       1785.78         68.44          1.23         39.48          1.48          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1785.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       31
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       32
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       90      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02  -2.58578       2.58578       1184.14       1186.73    
   2  0.758684E-02  -4.88134      -3205.52       3205.52       1458.41       4663.93    
   3  0.404439     -0.905254      -594.471       594.471       1284.82       1879.29    
   4  0.947917E-01  -2.35607      -1547.21       1547.21       1817.15       3364.36    
   5  0.834417     -0.181022      -118.875       118.875       1837.29       1956.16    
   6  0.891274     -0.115104      -75.5874       75.5874       1969.79       2045.37    
   7  0.744451     -0.295108      -193.794       193.794       1869.96       2063.75    
   8  0.559638     -0.580466      -381.186       381.186       1977.97       2359.16    
   9  0.821724     -0.196351      -128.941       128.941       1953.34       2082.28    
  10  0.847292     -0.165710      -108.820       108.820       2188.28       2297.10    
  11  0.661676     -0.412979      -271.199       271.199       2034.09       2305.29    
  12  0.993427     -0.659478E-02  -4.33072       4.33072       2188.00       2192.33    
  13  0.425996     -0.853326      -560.370       560.370       2088.82       2649.19    
  14  0.673132     -0.395813      -259.926       259.926       1187.73       1447.65    
  15  0.234810      -1.44898      -951.529       951.529       1800.44       2751.97    
  16  0.122926      -2.09617      -1376.53       1376.53       2335.74       3712.28    
  17  0.523553     -0.647118      -424.955       424.955       1859.89       2284.85    
  18  0.959317     -0.415333E-01  -27.2745       27.2745       2330.37       2357.65    
  19  0.321726      -1.13406      -744.722       744.722       2058.28       2803.01    
  20  0.493112     -0.707018      -464.291       464.291       1619.43       2083.72    
  21  0.416134     -0.876748      -575.751       575.751       2185.36       2761.11    
  22  0.409432     -0.892985      -586.414       586.414       2499.64       3086.05    
  23  0.657956     -0.418617      -274.901       274.901       1645.25       1920.16    
  24  0.904324     -0.100567      -66.0416       66.0416       2213.55       2279.60    
  25  0.714426     -0.336276      -220.829       220.829       1601.65       1822.48    
  26  0.150521      -1.89365      -1243.54       1243.54       2010.43       3253.97    
  27  0.758740     -0.276096      -181.309       181.309       2398.23       2579.54    
  28  0.359105      -1.02414      -672.542       672.542       2188.96       2861.51    
  29  0.666937     -0.405060      -265.998       265.998       1956.20       2222.20    
  30  0.343213      -1.06940      -702.266       702.266       2245.10       2947.36    
  31  0.484849     -0.723918      -475.389       475.389       2085.96       2561.35    
  32  0.874661     -0.133919      -87.9431       87.9431       2197.23       2285.17    
  33  0.994710     -0.530415E-02  -3.48318       3.48318       2448.82       2452.31    
  34  0.821923     -0.196109      -128.783       128.783       2329.41       2458.19    
  35  0.954096E-02  -4.65216      -3055.02       3055.02       2838.69       5893.71    
  36  0.240030      -1.42699      -937.089       937.089       2261.16       3198.25    
  37  0.279003      -1.27653      -838.285       838.285       2185.83       3024.12    
  38  0.553830     -0.590898      -388.037       388.037       2246.97       2635.01    
  39  0.400809     -0.914271      -600.392       600.392       2329.11       2929.51    
  40  0.146125      -1.92330      -1263.01       1263.01       2341.90       3604.91    
  41  0.811879     -0.208403      -136.856       136.856       2195.97       2332.83    
  42  0.349149      -1.05226      -691.006       691.006       1601.24       2292.25    
  43  0.897422     -0.108229      -71.0727       71.0727       2207.09       2278.17    
  44  0.114492      -2.16725      -1423.21       1423.21       2209.31       3632.53    
  45  0.831901E-01  -2.48663      -1632.94       1632.94       2438.28       4071.22    
  46  0.721169     -0.326882      -214.660       214.660       2197.16       2411.82    
  47  0.801724     -0.220991      -145.123       145.123       2184.79       2329.91    
  48  0.466569     -0.762349      -500.627       500.627       1916.51       2417.14    
  49  0.103404      -2.26911      -1490.10       1490.10       1785.78       3275.88    
loop,thermsimp(1:2)       32   2.58578       3205.52    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92       1925.26         67.70          1.12         39.53          2.04          0.05        110.44
Just calling func    0   0        110.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1925.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       32
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       33
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       91      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -516.263       516.263       1184.14       1700.40    
   2  0.588265E-01  -2.83316      -1860.51       1860.51       1187.73       3048.23    
   3  0.787103E-01  -2.54198      -1669.29       1669.29       1601.65       3270.94    
   4  0.597713     -0.514644      -337.961       337.961       1284.82       1622.78    
   5  0.110741      -2.20056      -1445.09       1445.09       1645.25       3090.34    
   6  0.677861     -0.388813      -255.329       255.329       1837.29       2092.62    
   7  0.307724      -1.17855      -773.942       773.942       1969.79       2743.73    
   8  0.550587     -0.596770      -391.893       391.893       1869.96       2261.85    
   9  0.601295     -0.508669      -334.038       334.038       1953.34       2287.38    
  10  0.487121     -0.719243      -472.319       472.319       1619.43       2091.75    
  11  0.146295      -1.92213      -1262.24       1262.24       2188.00       3450.24    
  12  0.714050     -0.336802      -221.174       221.174       1956.20       2177.38    
  13  0.723089     -0.324223      -212.914       212.914       2207.09       2420.01    
  14  0.805432     -0.216376      -142.092       142.092       2213.55       2355.65    
  15  0.123280      -2.09329      -1374.64       1374.64       1859.89       3234.54    
  16  0.853039     -0.158950      -104.381       104.381       2197.23       2301.61    
  17  0.288289      -1.24379      -816.784       816.784       1601.24       2418.03    
  18  0.705126     -0.349379      -229.434       229.434       2188.28       2417.72    
  19  0.772420     -0.258227      -169.575       169.575       2034.09       2203.66    
  20  0.962845     -0.378631E-01  -24.8643       24.8643       2184.79       2209.65    
  21  0.245802      -1.40323      -921.485       921.485       2195.97       3117.46    
  22  0.752702     -0.284087      -186.557       186.557       2330.37       2516.93    
  23  0.729896     -0.314853      -206.760       206.760       1977.97       2184.73    
  24  0.869278     -0.140092      -91.9972       91.9972       2197.16       2289.16    
  25  0.597817E-01  -2.81706      -1849.93       1849.93       1916.51       3766.44    
  26  0.984108     -0.160195E-01  -10.5198       10.5198       2448.82       2459.34    
  27  0.278288      -1.27910      -839.970       839.970       2329.41       3169.38    
  28  0.588278     -0.530555      -348.410       348.410       2085.96       2434.37    
  29  0.807614     -0.213671      -140.316       140.316       2398.23       2538.55    
  30  0.428679     -0.847047      -556.247       556.247       2246.97       2803.22    
  31  0.452991     -0.791883      -520.021       520.021       2088.82       2608.84    
  32  0.678742     -0.387514      -254.477       254.477       1800.44       2054.92    
  33  0.504500     -0.684188      -449.299       449.299       2185.36       2634.66    
  34  0.894800     -0.111155      -72.9943       72.9943       2058.28       2131.28    
  35  0.854311     -0.157461      -103.403       103.403       2188.96       2292.37    
  36  0.756230     -0.279410      -183.485       183.485       2329.11       2512.60    
  37  0.744369     -0.295219      -193.867       193.867       2245.10       2438.96    
  38  0.435758     -0.830668      -545.491       545.491       2185.83       2731.32    
  39  0.677387     -0.389513      -255.789       255.789       2499.64       2755.42    
  40  0.504989     -0.683219      -448.663       448.663       2261.16       2709.82    
  41  0.325676      -1.12185      -736.708       736.708       2010.43       2747.14    
  42  0.147207      -1.91591      -1258.16       1258.16       1785.78       3043.94    
  43  0.432041     -0.839234      -551.116       551.116       1817.15       2368.26    
  44  0.615972     -0.484555      -318.202       318.202       2341.90       2660.11    
  45  0.150867      -1.89136      -1242.03       1242.03       2209.31       3451.35    
  46  0.464307     -0.767210      -503.819       503.819       2335.74       2839.56    
  47  0.379753     -0.968234      -635.829       635.829       2438.28       3074.11    
  48  0.886192     -0.120822      -79.3424       79.3424       1458.41       1537.75    
  49  0.231751E-01  -3.76468      -2472.22       2472.22       1925.26       4397.48    
loop,thermsimp(1:2)       33   516.263       1860.51    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93       2838.69         67.99          1.18         39.51          1.95          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2838.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       33
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       34
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       92      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -1537.80       1537.80       1458.41       2996.21    
   2  0.298819      -1.20792      -793.227       793.227       1284.82       2078.04    
   3  0.706385     -0.347595      -228.262       228.262       1184.14       1412.40    
   4  0.958764     -0.421100E-01  -27.6532       27.6532       1800.44       1828.09    
   5  0.306496      -1.18255      -776.569       776.569       1619.43       2395.99    
   6  0.905447     -0.993270E-01  -65.2270       65.2270       1837.29       1902.52    
   7  0.234113      -1.45195      -953.480       953.480       2058.28       3011.76    
   8  0.704141     -0.350777      -230.351       230.351       1956.20       2186.56    
   9  0.908200     -0.962902E-01  -63.2327       63.2327       1977.97       2041.21    
  10  0.656383     -0.421011      -276.474       276.474       2034.09       2310.56    
  11  0.967894     -0.326327E-01  -21.4296       21.4296       2184.79       2206.22    
  12  0.754670     -0.281475      -184.842       184.842       1869.96       2054.80    
  13  0.488960     -0.715475      -469.845       469.845       1953.34       2423.19    
  14  0.451577     -0.795009      -522.074       522.074       2197.16       2719.23    
  15  0.387599E-01  -3.25037      -2134.48       2134.48       2188.96       4323.45    
  16  0.210942E-02  -6.16134      -4046.09       4046.09       2197.23       6243.32    
  17  0.656530     -0.420787      -276.326       276.326       2213.55       2489.88    
  18  0.181246      -1.70790      -1121.56       1121.56       1817.15       2938.71    
  19  0.758879     -0.275913      -181.189       181.189       2188.28       2369.47    
  20  0.392052     -0.936362      -614.899       614.899       1601.24       2216.14    
  21  0.406710     -0.899654      -590.793       590.793       2207.09       2797.89    
  22  0.830107     -0.186201      -122.276       122.276       2085.96       2208.24    
  23  0.311833      -1.16529      -765.233       765.233       2245.10       3010.33    
  24  0.945407     -0.561396E-01  -36.8663       36.8663       2448.82       2485.69    
  25  0.303319      -1.19297      -783.411       783.411       2329.11       3112.52    
  26  0.284230      -1.25797      -826.096       826.096       2330.37       3156.47    
  27  0.292492      -1.22932      -807.279       807.279       2398.23       3205.51    
  28  0.401496     -0.912557      -599.267       599.267       2088.82       2688.09    
  29  0.379648     -0.968510      -636.010       636.010       2185.36       2821.37    
  30  0.723496E-01  -2.62625      -1724.63       1724.63       2341.90       4066.53    
  31  0.940338     -0.615157E-01  -40.3967       40.3967       2261.16       2301.56    
  32  0.766237     -0.266264      -174.852       174.852       2185.83       2360.68    
  33  0.984920     -0.151946E-01  -9.97813       9.97813       1969.79       1979.76    
  34  0.552546     -0.593218      -389.560       389.560       2010.43       2399.99    
  35  0.735557     -0.307128      -201.688       201.688       2499.64       2701.32    
  36  0.142195      -1.95056      -1280.91       1280.91       2246.97       3527.88    
  37  0.304783      -1.18816      -780.249       780.249       2335.74       3115.99    
  38  0.868582     -0.140894      -92.5235       92.5235       1785.78       1878.30    
  39  0.382741     -0.960397      -630.683       630.683       1187.73       1818.41    
  40  0.273812      -1.29531      -850.619       850.619       2438.28       3288.90    
  41  0.601920     -0.507631      -333.356       333.356       1645.25       1978.61    
  42  0.827744     -0.189051      -124.148       124.148       2195.97       2320.12    
  43  0.881186E-01  -2.42907      -1595.15       1595.15       2329.41       3924.55    
  44  0.386744     -0.949994      -623.851       623.851       1859.89       2483.74    
  45  0.852312     -0.159803      -104.941       104.941       1601.65       1706.59    
  46  0.830189     -0.186102      -122.212       122.212       2188.00       2310.21    
  47  0.216531      -1.53002      -1004.75       1004.75       2209.31       3214.06    
  48  0.835540     -0.179677      -117.992       117.992       1916.51       2034.50    
  49  0.962152     -0.385824E-01  -25.3367       25.3367       2838.69       2864.02    
loop,thermsimp(1:2)       34   1537.80       793.227    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94       1771.73         67.99          1.16         39.70          1.73          0.05        110.63
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95       1509.02         68.12          1.16         39.48          1.90          0.05        110.70
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1509.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       34
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       35
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       94      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -692.989       692.989       1184.14       1877.13    
   2  0.175000      -1.74297      -1144.59       1144.59       1601.65       2746.24    
   3  0.131587      -2.02809      -1331.83       1331.83       1187.73       2519.55    
   4  0.301717      -1.19826      -786.887       786.887       1800.44       2587.33    
   5  0.166877      -1.79050      -1175.80       1175.80       1785.78       2961.58    
   6  0.481073     -0.731736      -480.523       480.523       1837.29       2317.81    
   7  0.706381     -0.347600      -228.266       228.266       1645.25       1873.52    
   8  0.702617     -0.352943      -231.774       231.774       1969.79       2201.56    
   9  0.552795     -0.592767      -389.264       389.264       1916.51       2305.77    
  10  0.495420     -0.702349      -461.225       461.225       1977.97       2439.20    
  11  0.479343     -0.735339      -482.889       482.889       1869.96       2352.85    
  12  0.462659     -0.770765      -506.153       506.153       1284.82       1790.97    
  13  0.631315E-01  -2.76253      -1814.13       1814.13       1956.20       3770.33    
  14  0.785681     -0.241205      -158.397       158.397       2184.79       2343.19    
  15  0.767932     -0.264055      -173.402       173.402       2085.96       2259.37    
  16  0.262689E-01  -3.63937      -2389.94       2389.94       1601.24       3991.18    
  17  0.871353     -0.137708      -90.4314       90.4314       2261.16       2351.59    
  18  0.618350     -0.480701      -315.671       315.671       2188.00       2503.67    
  19  0.196090      -1.62918      -1069.87       1069.87       2034.09       3103.96    
  20  0.925050     -0.779078E-01  -51.1613       51.1613       2195.97       2247.13    
  21  0.903269     -0.101735      -66.8084       66.8084       2185.83       2252.64    
  22  0.958828     -0.420436E-01  -27.6096       27.6096       2188.28       2215.89    
  23  0.969274     -0.312081E-01  -20.4940       20.4940       1619.43       1639.92    
  24  0.313932      -1.15858      -760.826       760.826       2010.43       2771.25    
  25  0.106324      -2.24126      -1471.81       1471.81       1953.34       3425.16    
  26  0.718705     -0.330304      -216.907       216.907       1859.89       2076.80    
  27  0.751116     -0.286195      -187.941       187.941       2448.82       2636.77    
  28  0.996391     -0.361592E-02  -2.37454       2.37454       2213.55       2215.93    
  29  0.313387      -1.16032      -761.969       761.969       2088.82       2850.79    
  30  0.305057      -1.18726      -779.659       779.659       2499.64       3279.29    
  31  0.408833     -0.894447      -587.374       587.374       2197.16       2784.53    
  32  0.589856     -0.527877      -346.651       346.651       2207.09       2553.75    
  33  0.808683     -0.212349      -139.447       139.447       2185.36       2324.81    
  34  0.481635     -0.730569      -479.757       479.757       2838.69       3318.44    
  35  0.677481     -0.389374      -255.698       255.698       1817.15       2072.85    
  36  0.673605     -0.395111      -259.465       259.465       1458.41       1717.87    
  37  0.409374E-01  -3.19571      -2098.59       2098.59       2245.10       4343.68    
  38  0.362144      -1.01571      -667.009       667.009       2058.28       2725.29    
  39  0.364718E-01  -3.31122      -2174.44       2174.44       2329.11       4503.55    
  40  0.280272      -1.27199      -835.305       835.305       2335.74       3171.05    
  41  0.532528     -0.630120      -413.793       413.793       2330.37       2744.17    
  42  0.901591     -0.103595      -68.0295       68.0295       2398.23       2466.26    
  43  0.262858      -1.33614      -877.429       877.429       2209.31       3086.74    
  44  0.168755      -1.77931      -1168.45       1168.45       2438.28       3606.73    
  45  0.504619     -0.683952      -449.144       449.144       2246.97       2696.11    
  46  0.900650     -0.104639      -68.7151       68.7151       2329.41       2398.12    
  47  0.438495     -0.824406      -541.379       541.379       2341.90       2883.28    
  48  0.984597     -0.155233E-01  -10.1940       10.1940       2188.96       2199.16    
  49  0.469739     -0.755579      -496.181       496.181       1509.02       2005.20    
loop,thermsimp(1:2)       35   692.989       1144.59    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96       1934.10         68.26          1.19         39.45          1.65          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1934.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       35
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       36
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       95      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -1694.12       1694.12       1619.43       3313.54    
   2  0.962370     -0.383559E-01  -25.1879       25.1879       1458.41       1483.60    
   3  0.356737      -1.03076      -676.886       676.886       1284.82       1961.70    
   4  0.884319     -0.122937      -80.7315       80.7315       1645.25       1725.99    
   5  0.919725E-01  -2.38627      -1567.04       1567.04       1184.14       2751.18    
   6  0.900184     -0.105156      -69.0548       69.0548       1509.02       1578.07    
   7  0.390055     -0.941468      -618.252       618.252       1817.15       2435.40    
   8  0.263976      -1.33190      -874.643       874.643       1859.89       2734.54    
   9  0.898455     -0.107078      -70.3172       70.3172       2188.96       2259.28    
  10  0.697674E-01  -2.66259      -1748.49       1748.49       1969.79       3718.28    
  11  0.888938     -0.117727      -77.3102       77.3102       2188.28       2265.59    
  12  0.824147     -0.193406      -127.008       127.008       2213.55       2340.56    
  13  0.941109     -0.606968E-01  -39.8590       39.8590       2195.97       2235.83    
  14  0.885654     -0.121429      -79.7410       79.7410       2185.83       2265.57    
  15  0.798208     -0.225386      -148.008       148.008       2085.96       2233.97    
  16  0.365331      -1.00695      -661.255       661.255       1916.51       2577.77    
  17  0.519490     -0.654907      -430.070       430.070       1837.29       2267.36    
  18  0.922741     -0.804065E-01  -52.8021       52.8021       2185.36       2238.16    
  19  0.877443     -0.130744      -85.8580       85.8580       2184.79       2270.65    
  20  0.584844     -0.536410      -352.255       352.255       2261.16       2613.42    
  21  0.671390     -0.398406      -261.629       261.629       1869.96       2131.59    
  22  0.203335      -1.59290      -1046.04       1046.04       2329.41       3375.45    
  23  0.330236E-01  -3.41053      -2239.66       2239.66       1977.97       4217.63    
  24  0.879725     -0.128146      -84.1524       84.1524       2398.23       2482.38    
  25  0.833976     -0.181550      -119.222       119.222       2188.00       2307.22    
  26  0.901698     -0.103475      -67.9511       67.9511       1187.73       1255.68    
  27  0.692847     -0.366946      -240.970       240.970       2207.09       2448.06    
  28  0.550572     -0.596797      -391.910       391.910       1800.44       2192.35    
  29  0.158383E-01  -4.14532      -2722.19       2722.19       2448.82       5171.01    
  30  0.503246     -0.686677      -450.933       450.933       2246.97       2697.90    
  31  0.648812     -0.432612      -284.092       284.092       2058.28       2342.37    
  32  0.306980      -1.18097      -775.533       775.533       2330.37       3105.91    
  33  0.205188      -1.58383      -1040.08       1040.08       1601.65       2641.73    
  34  0.265146      -1.32748      -871.739       871.739       2010.43       2882.17    
  35  0.272730E-01  -3.60186      -2365.30       2365.30       2197.16       4562.46    
  36  0.262990E-01  -3.63823      -2389.18       2389.18       2088.82       4478.00    
  37  0.492753     -0.707748      -464.771       464.771       2341.90       2806.68    
  38  0.255065      -1.36624      -897.192       897.192       1785.78       2682.97    
  39  0.623259     -0.472794      -310.479       310.479       2209.31       2519.79    
  40  0.949296     -0.520343E-01  -34.1704       34.1704       2034.09       2068.26    
  41  0.982394     -0.177630E-01  -11.6648       11.6648       2335.74       2347.41    
  42  0.566450     -0.568366      -373.240       373.240       2499.64       2872.87    
  43  0.557613     -0.584090      -383.566       383.566       2838.69       3222.25    
  44  0.900731     -0.104549      -68.6561       68.6561       1953.34       2022.00    
  45  0.671339     -0.398481      -261.678       261.678       2438.28       2699.96    
  46  0.650454     -0.430084      -282.432       282.432       1956.20       2238.64    
  47  0.749315     -0.288595      -189.518       189.518       1601.24       1790.76    
  48  0.667497     -0.404220      -265.447       265.447       2245.10       2510.54    
  49  0.132870      -2.01838      -1325.45       1325.45       1934.10       3259.55    
loop,thermsimp(1:2)       36   1694.12       25.1879    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97       1822.31         68.32          1.20         39.12          2.10          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98       2582.51         67.98          1.15         39.33          2.16          0.05        110.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1822.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       36
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       37
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       97
neval,tstepnext:       97      97

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -41.2168       41.2168       1187.73       1228.94    
   2  0.112532E-01  -4.48710      -2946.63       2946.63       1458.41       4405.04    
   3  0.907929     -0.965891E-01  -63.4290       63.4290       1509.02       1572.45    
   4  0.478640     -0.736807      -483.853       483.853       1645.25       2129.11    
   5  0.737686     -0.304237      -199.789       199.789       1601.24       1801.03    
   6  0.114880      -2.16387      -1420.99       1420.99       1284.82       2705.80    
   7  0.309837      -1.17171      -769.449       769.449       1953.34       2722.79    
   8  0.469091     -0.756958      -497.086       497.086       2034.09       2531.18    
   9  0.721151     -0.326907      -214.676       214.676       1869.96       2084.63    
  10  0.557251     -0.584740      -383.993       383.993       1800.44       2184.43    
  11  0.581534     -0.542085      -355.982       355.982       2085.96       2441.95    
  12  0.501412     -0.690326      -453.330       453.330       2195.97       2649.30    
  13  0.783062     -0.244543      -160.589       160.589       2185.36       2345.95    
  14  0.571322     -0.559803      -367.616       367.616       1956.20       2323.82    
  15  0.902729E-01  -2.40492      -1579.28       1579.28       2188.96       3768.25    
  16  0.695403E-01  -2.66585      -1750.64       1750.64       2185.83       3936.47    
  17  0.128872      -2.04894      -1345.52       1345.52       2188.28       3533.80    
  18  0.940828E-01  -2.36358      -1552.14       1552.14       1837.29       3389.43    
  19  0.326350      -1.11979      -735.351       735.351       2184.79       2920.14    
  20  0.102915      -2.27385      -1493.22       1493.22       2188.00       3681.22    
  21  0.324524      -1.12540      -739.035       739.035       2213.55       2952.59    
  22  0.259454      -1.34918      -885.990       885.990       2058.28       2944.27    
  23  0.782812     -0.244863      -160.799       160.799       2335.74       2496.54    
  24  0.383591     -0.958178      -629.226       629.226       1817.15       2446.37    
  25  0.626880     -0.466999      -306.674       306.674       2207.09       2513.77    
  26  0.292269      -1.23008      -807.780       807.780       2398.23       3206.01    
  27  0.448852     -0.801062      -526.049       526.049       2245.10       2771.14    
  28  0.685432     -0.377706      -248.036       248.036       2209.31       2457.35    
  29  0.995399     -0.461118E-02  -3.02811       3.02811       1916.51       1919.54    
  30  0.163323      -1.81203      -1189.94       1189.94       2261.16       3451.10    
  31  0.952940     -0.482038E-01  -31.6549       31.6549       1601.65       1633.30    
  32  0.861306     -0.149306      -98.0475       98.0475       1785.78       1883.83    
  33  0.587276     -0.532261      -349.530       349.530       2246.97       2596.50    
  34  0.908704     -0.957357E-01  -62.8686       62.8686       2438.28       2501.15    
  35  0.585935     -0.534546      -351.031       351.031       1859.89       2210.92    
  36  0.429836     -0.844352      -554.477       554.477       1184.14       1738.62    
  37  0.726203     -0.319926      -210.092       210.092       2341.90       2552.00    
  38  0.151145E-01  -4.19210      -2752.91       2752.91       2499.64       5252.54    
  39  0.927869     -0.748646E-01  -49.1628       49.1628       2010.43       2059.59    
  40  0.961645     -0.391099E-01  -25.6831       25.6831       2330.37       2356.06    
  41  0.253977      -1.37051      -899.999       899.999       2838.69       3738.69    
  42  0.768038     -0.263917      -173.311       173.311       1934.10       2107.41    
  43  0.569441E-01  -2.86569      -1881.87       1881.87       1619.43       3501.29    
  44  0.103919      -2.26415      -1486.84       1486.84       2329.41       3816.25    
  45  0.312226      -1.16403      -764.405       764.405       1969.79       2734.19    
  46  0.473636E-02  -5.35249      -3514.92       3514.92       1977.97       5492.89    
  47  0.192099      -1.64975      -1083.37       1083.37       2088.82       3172.19    
  48  0.799429     -0.223858      -147.005       147.005       2197.16       2344.16    
  49  0.164379      -1.80558      -1185.71       1185.71       1822.31       3008.02    
loop,thermsimp(1:2)       37   41.2168       2946.63    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99       2065.12         68.12          1.20         38.95          2.02          0.05        110.34
Just calling func    0   0        110.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2065.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    656.689                97
loop is:       37
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    656.689                97
loop is:       38
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    328.345               145

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       98     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -324.905       324.905       1187.73       1512.63    
   2  0.687927     -0.374072      -122.825       122.825       1509.02       1631.84    
   3  0.288957      -1.24148      -407.632       407.632       1601.65       2009.28    
   4  0.192838      -1.64590      -540.423       540.423       1184.14       1724.56    
   5  0.369869     -0.994607      -326.574       326.574       1601.24       1927.82    
   6  0.735973     -0.306562      -100.658       100.658       1785.78       1886.44    
   7  0.637144     -0.450760      -148.005       148.005       1916.51       2064.51    
   8  0.703934     -0.351071      -115.272       115.272       2010.43       2125.70    
   9  0.864279     -0.145859      -47.8921       47.8921       1869.96       1917.85    
  10  0.473452     -0.747705      -245.505       245.505       1934.10       2179.61    
  11  0.242010      -1.41877      -465.847       465.847       1645.25       2111.10    
  12  0.510769     -0.671838      -220.594       220.594       1800.44       2021.03    
  13  0.829624     -0.186782      -61.3290       61.3290       1859.89       1921.22    
  14  0.228911      -1.47442      -484.119       484.119       1956.20       2440.32    
  15  0.310006      -1.17116      -384.546       384.546       2197.16       2581.71    
  16  0.248341      -1.39295      -457.369       457.369       2185.36       2642.73    
  17  0.723214     -0.324050      -106.400       106.400       2330.37       2436.77    
  18  0.420900     -0.865360      -284.137       284.137       2085.96       2370.10    
  19  0.133903      -2.01064      -660.182       660.182       1817.15       2477.33    
  20  0.571916     -0.558763      -183.467       183.467       2209.31       2392.78    
  21  0.609104     -0.495766      -162.782       162.782       2335.74       2498.53    
  22  0.582057     -0.541186      -177.696       177.696       2438.28       2615.97    
  23  0.440731     -0.819321      -269.020       269.020       2207.09       2476.11    
  24  0.211006      -1.55587      -510.862       510.862       2034.09       2544.95    
  25  0.665769     -0.406813      -133.575       133.575       2341.90       2475.48    
  26  0.766062     -0.266493      -87.5014       87.5014       2246.97       2334.47    
  27  0.321416E-01  -3.43760      -1128.72       1128.72       2195.97       3324.69    
  28  0.165897E-01  -4.09897      -1345.88       1345.88       1284.82       2630.69    
  29  0.634553     -0.454835      -149.343       149.343       1953.34       2102.68    
  30  0.981834     -0.183335E-01  -6.01971       6.01971       1969.79       1975.81    
  31  0.511720     -0.669978      -219.984       219.984       2245.10       2465.08    
  32  0.426358     -0.852477      -279.906       279.906       2184.79       2464.69    
  33  0.500527     -0.692094      -227.245       227.245       2058.28       2285.53    
  34  0.100483      -2.29777      -754.461       754.461       2213.55       2968.02    
  35  0.837324     -0.177545      -58.2959       58.2959       1822.31       1880.61    
  36  0.257741      -1.35580      -445.170       445.170       2088.82       2533.99    
  37  0.437184     -0.827401      -271.673       271.673       2398.23       2669.90    
  38  0.707529     -0.345976      -113.600       113.600       1837.29       1950.89    
  39  0.538379     -0.619193      -203.309       203.309       2261.16       2464.47    
  40  0.611820     -0.491317      -161.321       161.321       1619.43       1780.75    
  41  0.404533     -0.905022      -297.159       297.159       2188.28       2485.44    
  42  0.902499     -0.102588      -33.6843       33.6843       2188.00       2221.69    
  43  0.704299     -0.350552      -115.102       115.102       2838.69       2953.79    
  44  0.511818     -0.669786      -219.921       219.921       2188.96       2408.89    
  45  0.748131     -0.290178      -95.2784       95.2784       2329.41       2424.69    
  46  0.296598      -1.21538      -399.063       399.063       2185.83       2584.89    
  47  0.805122     -0.216762      -71.1726       71.1726       1458.41       1529.58    
  48  0.525063     -0.644236      -211.532       211.532       2499.64       2711.17    
  49  0.192567      -1.64731      -540.886       540.886       2065.12       2606.01    
loop,thermsimp(1:2)       38   324.905       122.825    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       1853.06         67.88          1.17         39.82          1.76          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1853.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       38
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       39
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:       99     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -105.924       105.924       1187.73       1293.65    
   2  0.309663      -1.17227      -384.909       384.909       1458.41       1843.32    
   3  0.688114     -0.373801      -122.735       122.735       1509.02       1631.75    
   4  0.677876     -0.388791      -127.657       127.657       1184.14       1311.80    
   5  0.283701      -1.25984      -413.660       413.660       1619.43       2033.09    
   6  0.183733      -1.69427      -556.304       556.304       1822.31       2378.61    
   7  0.243414      -1.41299      -463.949       463.949       1785.78       2249.73    
   8  0.785389     -0.241576      -79.3201       79.3201       1869.96       1949.28    
   9  0.258033      -1.35467      -444.798       444.798       1859.89       2304.69    
  10  0.137887      -1.98132      -650.557       650.557       1601.24       2251.80    
  11  0.386520     -0.950573      -312.115       312.115       1837.29       2149.40    
  12  0.882934     -0.124505      -40.8807       40.8807       1969.79       2010.67    
  13  0.395106     -0.928602      -304.901       304.901       1601.65       1906.55    
  14  0.107633      -2.22903      -731.891       731.891       1800.44       2532.33    
  15  0.434094     -0.834495      -274.002       274.002       1916.51       2190.51    
  16  0.558484     -0.582529      -191.270       191.270       1953.34       2144.61    
  17  0.102706      -2.27589      -747.275       747.275       1645.25       2392.53    
  18  0.325804      -1.12146      -368.225       368.225       2010.43       2378.65    
  19  0.693871     -0.365469      -120.000       120.000       1934.10       2054.10    
  20  0.832622     -0.183176      -60.1448       60.1448       2188.00       2248.15    
  21  0.691207     -0.369316      -121.263       121.263       2058.28       2179.55    
  22  0.903946     -0.100985      -33.1580       33.1580       2246.97       2280.13    
  23  0.258785E-01  -3.65434      -1199.88       1199.88       2085.96       3285.85    
  24  0.247338      -1.39700      -458.697       458.697       2209.31       2668.01    
  25  0.861464     -0.149122      -48.9635       48.9635       2188.96       2237.93    
  26  0.954919     -0.461290E-01  -15.1462       15.1462       2329.41       2344.55    
  27  0.579638     -0.545352      -179.063       179.063       2330.37       2509.44    
  28  0.537182     -0.621418      -204.039       204.039       1956.20       2160.24    
  29  0.407710     -0.897199      -294.591       294.591       2261.16       2555.75    
  30  0.958466     -0.424211E-01  -13.9287       13.9287       2184.79       2198.72    
  31  0.884674     -0.122536      -40.2341       40.2341       2245.10       2285.33    
  32  0.395055     -0.928731      -304.944       304.944       2341.90       2646.85    
  33  0.325425      -1.12262      -368.607       368.607       2207.09       2575.70    
  34  0.679842     -0.385895      -126.707       126.707       1817.15       1943.85    
  35  0.765292     -0.267498      -87.8315       87.8315       2188.28       2276.11    
  36  0.217460      -1.52574      -500.969       500.969       2335.74       2836.71    
  37  0.181189      -1.70822      -560.883       560.883       2088.82       2649.70    
  38  0.518456     -0.656899      -215.689       215.689       2034.09       2249.78    
  39  0.249864E-01  -3.68942      -1211.40       1211.40       2197.16       3408.56    
  40  0.336654      -1.08870      -357.469       357.469       2185.83       2543.30    
  41  0.873801     -0.134903      -44.2946       44.2946       2065.12       2109.42    
  42  0.478904     -0.736255      -241.745       241.745       2438.28       2680.02    
  43  0.819950     -0.198512      -65.1804       65.1804       1284.82       1350.00    
  44  0.966813     -0.337500E-01  -11.0816       11.0816       2185.36       2196.44    
  45  0.514109     -0.665319      -218.454       218.454       2398.23       2616.69    
  46  0.483734     -0.726221      -238.451       238.451       2499.64       2738.09    
  47  0.227743E-01  -3.78212      -1241.84       1241.84       2838.69       4080.53    
  48  0.409495     -0.892830      -293.156       293.156       2213.55       2506.71    
  49  0.198361      -1.61767      -531.153       531.153       1853.06       2384.21    
loop,thermsimp(1:2)       39   105.924       384.909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101       1852.33         68.23          1.23         39.32          1.52          0.05        110.35
Just calling func    0   0        110.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102       3511.99         67.41          1.12         39.78          1.72          0.05        110.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    1852.3        3.276     -3.143      4.389     -102.6     0.4202    
                     -0.7307E-01 0.7684     -99.70      4.838     0.8920    

                       3.340    -0.8892      1.613      5881.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.178      0.000      0.000      7000.      584.9    

                      -1.347     -5.824     -7.955     -7.565      9.039    

                      -4.943     -3.949      5531.      0.000      6863.    



                       2282.      6650.      6587.      2916.      4045.    

                       4032.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.803     -1.615     -2.637     -1.973    -0.3807    

                     -0.3252      9.639      8.593    -0.1499E+05 -5.282    

                      0.1535     -2.420      8.914      9.073    -0.1969E+05



                      -6.000     0.4593     0.1112      9.061      9.006    

                     -0.1944E+05 -6.000    -0.9918    -0.6948      9.779    

                       9.423    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1852.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       39
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       40
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      101     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -15.2449       15.2449       1187.73       1202.97    
   2  0.450411     -0.797594      -261.886       261.886       1184.14       1446.03    
   3  0.691912E-01  -2.67088      -876.970       876.970       1284.82       2161.79    
   4  0.740935     -0.299842      -98.4515       98.4515       1509.02       1607.47    
   5  0.452531     -0.792898      -260.344       260.344       1458.41       1718.75    
   6  0.461330     -0.773642      -254.021       254.021       1601.65       1855.67    
   7  0.102999      -2.27303      -746.339       746.339       1817.15       2563.49    
   8  0.475106     -0.744217      -244.360       244.360       1869.96       2114.32    
   9  0.240275      -1.42597      -468.210       468.210       1969.79       2438.00    
  10  0.276707E-01  -3.58738      -1177.90       1177.90       1619.43       2797.32    
  11  0.132701E-01  -4.32224      -1419.18       1419.18       1934.10       3353.29    
  12  0.997219     -0.278509E-02 -0.914468      0.914468       2065.12       2066.04    
  13  0.563305     -0.573934      -188.448       188.448       1953.34       2141.79    
  14  0.347949      -1.05570      -346.634       346.634       1837.29       2183.92    
  15  0.546018     -0.605103      -198.682       198.682       1956.20       2154.89    
  16  0.343968      -1.06721      -350.412       350.412       2058.28       2408.69    
  17  0.945234     -0.563230E-01  -18.4933       18.4933       1916.51       1935.00    
  18  0.346208      -1.06072      -348.280       348.280       2185.36       2533.64    
  19  0.406433     -0.900337      -295.621       295.621       2184.79       2480.41    
  20  0.632259     -0.458455      -150.531       150.531       2188.96       2339.50    
  21  0.983930     -0.162002E-01  -5.31925       5.31925       2188.00       2193.32    
  22  0.200798      -1.60546      -527.143       527.143       1785.78       2312.92    
  23  0.223962      -1.49628      -491.295       491.295       2034.09       2525.38    
  24  0.594322     -0.520335      -170.849       170.849       1601.24       1772.09    
  25  0.875298     -0.133191      -43.7325       43.7325       2188.28       2232.02    
  26  0.327822      -1.11529      -366.198       366.198       2246.97       2613.17    
  27  0.215105      -1.53663      -504.544       504.544       2245.10       2749.64    
  28  0.905181     -0.996198E-01  -32.7096       32.7096       1859.89       1892.60    
  29  0.699086     -0.357981      -117.541       117.541       2329.41       2446.95    
  30  0.747401     -0.291154      -95.5989       95.5989       1822.31       1917.91    
  31  0.699189     -0.357834      -117.493       117.493       2010.43       2127.92    
  32  0.563488     -0.573610      -188.342       188.342       1853.06       2041.40    
  33  0.155576      -1.86062      -610.926       610.926       1645.25       2256.18    
  34  0.380593     -0.966025      -317.189       317.189       2213.55       2530.74    
  35  0.626112     -0.468226      -153.739       153.739       2330.37       2484.11    
  36  0.372369     -0.987870      -324.362       324.362       1800.44       2124.80    
  37  0.517531     -0.658686      -216.276       216.276       2185.83       2402.11    
  38  0.673247     -0.395643      -129.907       129.907       2261.16       2391.07    
  39  0.741527     -0.299044      -98.1895       98.1895       2207.09       2305.28    
  40  0.280982      -1.26947      -416.822       416.822       2398.23       2815.05    
  41  0.331745      -1.10339      -362.292       362.292       2341.90       2704.20    
  42  0.712030     -0.339635      -111.517       111.517       2088.82       2200.34    
  43  0.200581      -1.60654      -527.498       527.498       2209.31       2736.81    
  44  0.989915     -0.101357E-01  -3.32801       3.32801       2438.28       2441.61    
  45  0.808031     -0.213155      -69.9884       69.9884       2499.64       2569.62    
  46  0.893446     -0.112670      -36.9946       36.9946       2335.74       2372.74    
  47  0.364885      -1.00817      -331.028       331.028       2085.96       2416.99    
  48  0.923731     -0.793347E-01  -26.0491       26.0491       2197.16       2223.21    
  49  0.504880     -0.683434      -224.402       224.402       1852.33       2076.73    
loop,thermsimp(1:2)       40   15.2449       261.886    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103       2262.25         68.19          1.23         39.54          1.55          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2262.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       40
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       41
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      102     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -337.315       337.315       1187.73       1525.04    
   2  0.414955     -0.879585      -288.807       288.807       1184.14       1472.95    
   3  0.407443     -0.897854      -294.805       294.805       1509.02       1803.82    
   4  0.883897     -0.123414      -40.5225       40.5225       1458.41       1498.93    
   5  0.520045     -0.653840      -214.685       214.685       1601.24       1815.93    
   6  0.634521     -0.454885      -149.359       149.359       1601.65       1751.01    
   7  0.344406      -1.06594      -349.994       349.994       1859.89       2209.89    
   8  0.545595     -0.605879      -198.937       198.937       1822.31       2021.25    
   9  0.766876     -0.265430      -87.1524       87.1524       1916.51       2003.66    
  10  0.639043     -0.447783      -147.027       147.027       1853.06       2000.08    
  11  0.850701     -0.161694      -53.0915       53.0915       2065.12       2118.21    
  12  0.832060     -0.183851      -60.3665       60.3665       1852.33       1912.69    
  13  0.728209     -0.317167      -104.140       104.140       1869.96       1974.10    
  14  0.531327     -0.632378      -207.638       207.638       1800.44       2008.08    
  15  0.188974E-01  -3.96873      -1303.11       1303.11       2010.43       3313.54    
  16  0.246817      -1.39911      -459.389       459.389       1953.34       2412.73    
  17  0.935336     -0.668496E-01  -21.9497       21.9497       1956.20       1978.15    
  18  0.730823     -0.313585      -102.964       102.964       1284.82       1387.78    
  19  0.482288     -0.729213      -239.433       239.433       1837.29       2076.72    
  20  0.782974E-04  -9.45500      -3104.50       3104.50       2188.00       5292.50    
  21  0.258744      -1.35192      -443.895       443.895       2088.82       2532.72    
  22  0.389044     -0.944063      -309.978       309.978       2197.16       2507.14    
  23  0.611459E-01  -2.79449      -917.557       917.557       2188.28       3105.84    
  24  0.124922      -2.08006      -682.978       682.978       1645.25       2328.23    
  25  0.253683      -1.37167      -450.381       450.381       2207.09       2657.47    
  26  0.781437     -0.246621      -80.9766       80.9766       1785.78       1866.75    
  27  0.835634     -0.179565      -58.9592       58.9592       2188.96       2247.92    
  28  0.542030     -0.612434      -201.089       201.089       2335.74       2536.83    
  29  0.463443     -0.769071      -252.520       252.520       2261.16       2513.68    
  30  0.120587      -2.11538      -694.575       694.575       2185.83       2880.41    
  31  0.733316     -0.310178      -101.845       101.845       2058.28       2160.13    
  32  0.955530     -0.454889E-01  -14.9360       14.9360       2085.96       2100.90    
  33  0.419735     -0.868132      -285.047       285.047       1969.79       2254.83    
  34  0.284829      -1.25587      -412.357       412.357       2438.28       2850.64    
  35  0.924079     -0.789582E-01  -25.9255       25.9255       2329.41       2355.33    
  36  0.432674     -0.837770      -275.077       275.077       2184.79       2459.87    
  37  0.155293      -1.86244      -611.522       611.522       2330.37       2941.89    
  38  0.634342     -0.455168      -149.452       149.452       2034.09       2183.54    
  39  0.935635     -0.665293E-01  -21.8446       21.8446       2213.55       2235.40    
  40  0.931832     -0.706024E-01  -23.1819       23.1819       2185.36       2208.54    
  41  0.875970     -0.132424      -43.4807       43.4807       1817.15       1860.63    
  42  0.273544      -1.29629      -425.631       425.631       2499.64       2925.27    
  43  0.799596     -0.223649      -73.4340       73.4340       2246.97       2320.40    
  44  0.772883     -0.257628      -84.5907       84.5907       2341.90       2426.50    
  45  0.274276      -1.29362      -424.754       424.754       2209.31       2634.07    
  46  0.116034      -2.15387      -707.213       707.213       2245.10       2952.31    
  47  0.700214     -0.356369      -117.012       117.012       1619.43       1736.44    
  48  0.704184E-01  -2.65330      -871.197       871.197       2398.23       3269.43    
  49  0.699980E-01  -2.65929      -873.164       873.164       2262.25       3135.42    
loop,thermsimp(1:2)       41   337.315       288.807    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104       1679.68         68.31          1.23         39.31          1.77          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1679.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       41
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       42
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      103     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -946.766       946.766       1284.82       2231.58    
   2  0.688513     -0.373221      -122.545       122.545       1184.14       1306.69    
   3  0.530653     -0.633647      -208.055       208.055       1458.41       1666.46    
   4  0.542886     -0.610856      -200.571       200.571       1187.73       1388.30    
   5  0.603382     -0.505205      -165.881       165.881       1619.43       1785.31    
   6  0.478412     -0.737283      -242.083       242.083       1601.65       1843.73    
   7  0.809657     -0.211144      -69.3281       69.3281       1509.02       1578.35    
   8  0.764585     -0.268422      -88.1349       88.1349       1601.24       1689.38    
   9  0.228600      -1.47578      -484.565       484.565       1817.15       2301.71    
  10  0.495526     -0.702136      -230.543       230.543       1785.78       2016.32    
  11  0.368264     -0.998954      -328.001       328.001       1852.33       2180.33    
  12  0.407647     -0.897355      -294.642       294.642       1869.96       2164.60    
  13  0.316165      -1.15149      -378.086       378.086       1956.20       2334.29    
  14  0.458518     -0.779756      -256.029       256.029       1853.06       2109.09    
  15  0.643610     -0.440663      -144.689       144.689       1916.51       2061.20    
  16  0.316553E-01  -3.45285      -1133.72       1133.72       1800.44       2934.16    
  17  0.570171     -0.561819      -184.470       184.470       1822.31       2006.78    
  18  0.448642E-01  -3.10412      -1019.22       1019.22       1837.29       2856.51    
  19  0.128957      -2.04828      -672.541       672.541       2085.96       2758.51    
  20  0.159422      -1.83620      -602.907       602.907       2065.12       2668.03    
  21  0.154083      -1.87026      -614.090       614.090       2058.28       2672.37    
  22  0.696997     -0.360974      -118.524       118.524       2034.09       2152.61    
  23  0.579421     -0.545727      -179.187       179.187       2185.36       2364.55    
  24  0.528206     -0.638269      -209.572       209.572       1859.89       2069.47    
  25  0.322914      -1.13037      -371.150       371.150       2213.55       2584.71    
  26  0.369562     -0.995437      -326.846       326.846       2188.96       2515.81    
  27  0.134248      -2.00806      -659.337       659.337       1969.79       2629.12    
  28  0.950150     -0.511358E-01  -16.7902       16.7902       2246.97       2263.76    
  29  0.138040      -1.98021      -650.192       650.192       1645.25       2295.45    
  30  0.316838      -1.14936      -377.388       377.388       2329.41       2706.80    
  31  0.151783      -1.88530      -619.030       619.030       1953.34       2572.37    
  32  0.338674      -1.08272      -355.505       355.505       2341.90       2697.41    
  33  0.814165     -0.205592      -67.5052       67.5052       2184.79       2252.29    
  34  0.578183     -0.547865      -179.888       179.888       2197.16       2377.05    
  35  0.208707      -1.56682      -514.458       514.458       2261.16       2775.62    
  36  0.540561     -0.615147      -201.980       201.980       2088.82       2290.80    
  37  0.910129     -0.941686E-01  -30.9198       30.9198       2335.74       2366.66    
  38  0.907740     -0.967972E-01  -31.7828       31.7828       2209.31       2241.10    
  39  0.549661     -0.598453      -196.499       196.499       2207.09       2403.59    
  40  0.193889      -1.64047      -538.640       538.640       2438.28       2976.92    
  41  0.807651     -0.213625      -70.1427       70.1427       2185.83       2255.97    
  42  0.613777     -0.488124      -160.273       160.273       2499.64       2659.91    
  43  0.664452     -0.408793      -134.225       134.225       2330.37       2464.60    
  44  0.584630     -0.536776      -176.247       176.247       2245.10       2421.34    
  45  0.618915     -0.479787      -157.536       157.536       2188.28       2345.82    
  46  0.542097     -0.612311      -201.049       201.049       2262.25       2463.30    
  47  0.133641      -2.01260      -660.827       660.827       2398.23       3059.06    
  48  0.479627     -0.734747      -241.250       241.250       2010.43       2251.68    
  49  0.225939      -1.48749      -488.410       488.410       1679.68       2168.09    
loop,thermsimp(1:2)       42   946.766       122.545    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105       2063.42         67.91          1.14         39.46          2.09          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106       3052.96         67.79          1.09         39.23          2.67          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   2063.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       42
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       43
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      105     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -77.9801       77.9801       1184.14       1262.12    
   2  0.796559     -0.227454      -74.6833       74.6833       1187.73       1262.41    
   3  0.784232     -0.243051      -79.8044       79.8044       1509.02       1588.82    
   4  0.503549     -0.686074      -225.269       225.269       1458.41       1683.68    
   5  0.468337     -0.758566      -249.071       249.071       1601.24       1850.31    
   6  0.198518      -1.61688      -530.893       530.893       1619.43       2150.32    
   7  0.857529     -0.153700      -50.4666       50.4666       1601.65       1652.12    
   8  0.845427     -0.167913      -55.1333       55.1333       1822.31       1877.44    
   9  0.710919     -0.341197      -112.030       112.030       1785.78       1897.81    
  10  0.934107     -0.681640E-01  -22.3813       22.3813       1916.51       1938.89    
  11  0.565087     -0.570775      -187.411       187.411       1859.89       2047.30    
  12  0.147377      -1.91476      -628.702       628.702       1853.06       2481.76    
  13  0.471965     -0.750851      -246.538       246.538       2034.09       2280.63    
  14  0.287319      -1.24716      -409.499       409.499       1869.96       2279.46    
  15  0.526906     -0.640733      -210.381       210.381       1679.68       1890.06    
  16  0.176999      -1.73161      -568.566       568.566       1852.33       2420.89    
  17  0.868579     -0.140897      -46.2626       46.2626       1284.82       1331.08    
  18  0.621282     -0.475971      -156.282       156.282       2209.31       2365.60    
  19  0.181881      -1.70440      -559.632       559.632       2010.43       2570.06    
  20  0.565209     -0.570560      -187.340       187.340       2184.79       2372.13    
  21  0.927617     -0.751364E-01  -24.6706       24.6706       2185.83       2210.50    
  22  0.296120      -1.21699      -399.592       399.592       2246.97       2646.56    
  23  0.152389      -1.88132      -617.721       617.721       2088.82       2706.54    
  24  0.508731     -0.675835      -221.907       221.907       1645.25       1867.16    
  25  0.389654     -0.942496      -309.464       309.464       1817.15       2126.61    
  26  0.770754     -0.260386      -85.4964       85.4964       1956.20       2041.70    
  27  0.144347      -1.93554      -635.523       635.523       2188.28       2823.81    
  28  0.690124     -0.370884      -121.778       121.778       2185.36       2307.14    
  29  0.882429     -0.125077      -41.0684       41.0684       2335.74       2376.81    
  30  0.781105     -0.247045      -81.1161       81.1161       2197.16       2278.28    
  31  0.331946      -1.10278      -362.093       362.093       2207.09       2569.19    
  32  0.157011      -1.85144      -607.909       607.909       2245.10       2853.00    
  33  0.734200     -0.308973      -101.450       101.450       2262.25       2363.70    
  34  0.563390     -0.573784      -188.399       188.399       2330.37       2518.77    
  35  0.349498      -1.05126      -345.175       345.175       2188.96       2534.14    
  36  0.256822      -1.35937      -446.342       446.342       1953.34       2399.68    
  37  0.563556     -0.573488      -188.302       188.302       2213.55       2401.86    
  38  0.945419E-01  -2.35871      -774.471       774.471       1969.79       2744.26    
  39  0.571450     -0.559577      -183.734       183.734       2499.64       2683.37    
  40  0.583029E-01  -2.84210      -933.190       933.190       2065.12       2998.31    
  41  0.428808     -0.846746      -278.025       278.025       2058.28       2336.31    
  42  0.628450     -0.464499      -152.516       152.516       2341.90       2494.42    
  43  0.152789      -1.87869      -616.860       616.860       2329.41       2946.27    
  44  0.787004E-01  -2.54211      -834.687       834.687       2085.96       2920.65    
  45  0.170927E-01  -4.06911      -1336.07       1336.07       2261.16       3597.23    
  46  0.531078     -0.632847      -207.792       207.792       1837.29       2045.08    
  47  0.206082E-01  -3.88206      -1274.66       1274.66       1800.44       3075.09    
  48  0.909565     -0.947891E-01  -31.1235       31.1235       2438.28       2469.40    
  49  0.456291     -0.784625      -257.627       257.627       2063.42       2321.05    
loop,thermsimp(1:2)       43   77.9801       74.6833    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       2536.59         68.09          1.20         39.50          1.42          0.05        110.26
Just calling func    0   0        110.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2536.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       43
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       44
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      106     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -740.063       740.063       1184.14       1924.20    
   2  0.780131E-01  -2.55088      -837.568       837.568       1187.73       2025.29    
   3  0.723689     -0.323394      -106.185       106.185       1284.82       1391.00    
   4  0.439896     -0.821218      -269.643       269.643       1509.02       1778.66    
   5  0.967364     -0.331803E-01  -10.8946       10.8946       1601.65       1612.54    
   6  0.235884      -1.44441      -474.266       474.266       1458.41       1932.67    
   7  0.311956      -1.16489      -382.487       382.487       1601.24       1983.73    
   8  0.600573     -0.509870      -167.413       167.413       1645.25       1812.67    
   9  0.781739     -0.246234      -80.8497       80.8497       1822.31       1903.16    
  10  0.505036     -0.683126      -224.301       224.301       1679.68       1903.98    
  11  0.896130     -0.109670      -36.0096       36.0096       1785.78       1821.79    
  12  0.545040     -0.606897      -199.271       199.271       1916.51       2115.78    
  13  0.338019      -1.08465      -356.141       356.141       1956.20       2312.34    
  14  0.200467      -1.60711      -527.685       527.685       1837.29       2364.97    
  15  0.548763     -0.600089      -197.036       197.036       1859.89       2056.93    
  16  0.897241     -0.108431      -35.6027       35.6027       1817.15       1852.75    
  17  0.229905      -1.47009      -482.696       482.696       1619.43       2102.12    
  18  0.387828     -0.947193      -311.006       311.006       2185.83       2496.84    
  19  0.789400     -0.236482      -77.6477       77.6477       2197.16       2274.81    
  20  0.495667     -0.701851      -230.449       230.449       1869.96       2100.41    
  21  0.818926     -0.199761      -65.5906       65.5906       2034.09       2099.68    
  22  0.181319      -1.70750      -560.648       560.648       2185.36       2746.01    
  23  0.901986     -0.103156      -33.8709       33.8709       2063.42       2097.29    
  24  0.933790E-01  -2.37109      -778.534       778.534       2058.28       2836.82    
  25  0.171523      -1.76304      -578.884       578.884       2262.25       2841.14    
  26  0.648450     -0.433170      -142.229       142.229       2209.31       2351.54    
  27  0.777448     -0.251739      -82.6571       82.6571       2184.79       2267.45    
  28  0.777670     -0.251453      -82.5632       82.5632       2335.74       2418.31    
  29  0.972420     -0.279672E-01  -9.18289       9.18289       1953.34       1962.52    
  30  0.825305     -0.192002      -63.0427       63.0427       2213.55       2276.60    
  31  0.470649     -0.753642      -247.454       247.454       1852.33       2099.78    
  32  0.263953      -1.33198      -437.349       437.349       2438.28       2875.63    
  33  0.857551     -0.153675      -50.4584       50.4584       1853.06       1903.52    
  34  0.950157     -0.511279E-01  -16.7876       16.7876       2341.90       2358.69    
  35  0.866482     -0.143314      -47.0563       47.0563       2330.37       2377.43    
  36  0.904889     -0.999433E-01  -32.8159       32.8159       2188.96       2221.78    
  37  0.297565      -1.21212      -397.994       397.994       2207.09       2605.09    
  38  0.902696     -0.102369      -33.6124       33.6124       2010.43       2044.04    
  39  0.800054     -0.223076      -73.2459       73.2459       2246.97       2320.22    
  40  0.534162     -0.627057      -205.891       205.891       2499.64       2705.53    
  41  0.593018     -0.522530      -171.570       171.570       2088.82       2260.39    
  42  0.682417E-01  -2.68470      -881.507       881.507       1969.79       2851.29    
  43  0.336048      -1.09050      -358.060       358.060       2188.28       2546.34    
  44  0.576540     -0.550710      -180.823       180.823       2245.10       2425.92    
  45  0.217955      -1.52347      -500.222       500.222       2085.96       2586.19    
  46  0.281607      -1.26724      -416.092       416.092       2329.41       2745.50    
  47  0.306631      -1.18211      -388.139       388.139       2065.12       2453.26    
  48  0.676335E-01  -2.69365      -884.447       884.447       1800.44       2684.89    
  49  0.145631      -1.92668      -632.615       632.615       2536.59       3169.20    
loop,thermsimp(1:2)       44   740.063       837.568    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108       2261.16         68.48          1.23         39.32          1.84          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2261.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       44
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       45
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      107     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -44.7407       44.7407       1284.82       1329.56    
   2  0.990306     -0.974175E-02  -3.19865       3.19865       1601.65       1604.85    
   3  0.488656     -0.716096      -235.126       235.126       1509.02       1744.14    
   4  0.865115E-01  -2.44748      -803.617       803.617       1645.25       2448.87    
   5  0.234262      -1.45132      -476.532       476.532       1785.78       2262.31    
   6  0.906541     -0.981186E-01  -32.2167       32.2167       1817.15       1849.36    
   7  0.680454     -0.384995      -126.411       126.411       1822.31       1948.72    
   8  0.575574     -0.552388      -181.374       181.374       1853.06       2034.43    
   9  0.537443E-02  -5.22610      -1715.96       1715.96       1679.68       3395.64    
  10  0.421676     -0.863518      -283.532       283.532       1184.14       1467.67    
  11  0.297588      -1.21204      -397.968       397.968       1458.41       1856.38    
  12  0.119337      -2.12581      -697.997       697.997       1953.34       2651.34    
  13  0.958276     -0.426192E-01  -13.9938       13.9938       1601.24       1615.24    
  14  0.115549      -2.15806      -708.587       708.587       1187.73       1896.31    
  15  0.104220      -2.26125      -742.471       742.471       2010.43       2752.90    
  16  0.719503     -0.329194      -108.089       108.089       1859.89       1967.98    
  17  0.875656     -0.132782      -43.5982       43.5982       2063.42       2107.02    
  18  0.578760     -0.546868      -179.561       179.561       2034.09       2213.65    
  19  0.923704     -0.793639E-01  -26.0587       26.0587       1852.33       1878.38    
  20  0.457980     -0.780930      -256.414       256.414       1869.96       2126.37    
  21  0.783173     -0.244401      -80.2479       80.2479       1619.43       1699.67    
  22  0.764479     -0.268561      -88.1805       88.1805       1916.51       2004.69    
  23  0.496891     -0.699384      -229.639       229.639       2188.96       2418.60    
  24  0.554859     -0.589041      -193.409       193.409       2088.82       2282.23    
  25  0.734503E-02  -4.91373      -1613.40       1613.40       2184.79       3798.19    
  26  0.117643      -2.14010      -702.692       702.692       2197.16       2899.85    
  27  0.145440      -1.92799      -633.046       633.046       2213.55       2846.60    
  28  0.375449     -0.979633      -321.657       321.657       1956.20       2277.86    
  29  0.954324E-01  -2.34934      -771.392       771.392       2246.97       3018.36    
  30  0.449085     -0.800543      -262.854       262.854       2209.31       2472.17    
  31  0.354483      -1.03709      -340.524       340.524       2341.90       2682.43    
  32  0.153971      -1.87099      -614.330       614.330       1837.29       2451.62    
  33  0.871598     -0.137427      -45.1233       45.1233       2330.37       2375.50    
  34  0.633061     -0.457188      -150.115       150.115       2335.74       2485.86    
  35  0.947022E-01  -2.35702      -773.914       773.914       2245.10       3019.01    
  36  0.793812     -0.230909      -75.8178       75.8178       2065.12       2140.94    
  37  0.760585     -0.273667      -89.8571       89.8571       2185.83       2275.69    
  38  0.124312      -2.08496      -684.587       684.587       2188.28       2872.87    
  39  0.961605E-03  -6.94691      -2280.98       2280.98       2085.96       4366.94    
  40  0.672529     -0.396710      -130.258       130.258       2207.09       2337.35    
  41  0.749847E-01  -2.59047      -850.567       850.567       1800.44       2651.01    
  42  0.982441     -0.177147E-01  -5.81653       5.81653       2499.64       2505.45    
  43  0.340727      -1.07667      -353.520       353.520       2329.41       2682.93    
  44  0.915043     -0.887846E-01  -29.1520       29.1520       2185.36       2214.51    
  45  0.150614      -1.89303      -621.568       621.568       2058.28       2679.85    
  46  0.892785     -0.113409      -37.2373       37.2373       2262.25       2299.49    
  47  0.844073     -0.169516      -55.6596       55.6596       1969.79       2025.45    
  48  0.469949     -0.755131      -247.943       247.943       2438.28       2686.22    
  49  0.389072     -0.943991      -309.955       309.955       2261.16       2571.12    
loop,thermsimp(1:2)       45   44.7407       3.19865    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109       1761.50         68.47          1.26         39.42          1.50          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110       1671.58         68.52          1.24         39.38          1.66          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1671.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       45
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       46
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      109     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -797.806       797.806       1284.82       2082.62    
   2  0.312747      -1.16236      -381.655       381.655       1184.14       1565.80    
   3  0.317683      -1.14670      -376.513       376.513       1601.65       1978.16    
   4  0.693053     -0.366649      -120.387       120.387       1601.24       1721.63    
   5  0.361881      -1.01644      -333.742       333.742       1619.43       1953.17    
   6  0.127478      -2.05981      -676.328       676.328       1509.02       2185.34    
   7  0.718706     -0.330302      -108.453       108.453       1817.15       1925.60    
   8  0.609419E-01  -2.79783      -918.654       918.654       1458.41       2377.06    
   9  0.320798      -1.13695      -373.310       373.310       1852.33       2225.64    
  10  0.343503      -1.06856      -350.856       350.856       1187.73       1538.58    
  11  0.671828     -0.397753      -130.600       130.600       1822.31       1952.91    
  12  0.616702     -0.483369      -158.712       158.712       1859.89       2018.60    
  13  0.806358E-01  -2.51781      -826.710       826.710       1916.51       2743.22    
  14  0.997284     -0.271972E-02 -0.893007      0.893007       1969.79       1970.68    
  15  0.554344     -0.589969      -193.713       193.713       1853.06       2046.77    
  16  0.411057     -0.889023      -291.906       291.906       2063.42       2355.32    
  17  0.846258E-01  -2.46952      -810.853       810.853       1869.96       2680.81    
  18  0.737439     -0.304571      -100.004       100.004       2065.12       2165.13    
  19  0.393790     -0.931939      -305.997       305.997       2034.09       2340.09    
  20  0.965947     -0.346467E-01  -11.3761       11.3761       2185.36       2196.73    
  21  0.150166      -1.89601      -622.546       622.546       1785.78       2408.32    
  22  0.212005      -1.55114      -509.310       509.310       2185.83       2695.14    
  23  0.615060     -0.486036      -159.587       159.587       1956.20       2115.79    
  24  0.382142     -0.961962      -315.855       315.855       2088.82       2404.68    
  25  0.249044      -1.39013      -456.441       456.441       2262.25       2718.69    
  26  0.245943      -1.40266      -460.555       460.555       2207.09       2667.65    
  27  0.108882      -2.21749      -728.103       728.103       2330.37       3058.48    
  28  0.199835      -1.61026      -528.722       528.722       2188.96       2717.69    
  29  0.863954     -0.146235      -48.0157       48.0157       1645.25       1693.27    
  30  0.392842     -0.934347      -306.788       306.788       1837.29       2144.08    
  31  0.770596     -0.260592      -85.5639       85.5639       2209.31       2294.88    
  32  0.149868      -1.89800      -623.199       623.199       2335.74       2958.94    
  33  0.234154      -1.45178      -476.683       476.683       2499.64       2976.32    
  34  0.611512     -0.491821      -161.487       161.487       2261.16       2422.65    
  35  0.518093E-01  -2.96019      -971.961       971.961       1800.44       2772.40    
  36  0.567953     -0.565716      -185.750       185.750       1953.34       2139.09    
  37  0.190847      -1.65628      -543.832       543.832       2058.28       2602.12    
  38  0.104561      -2.25798      -741.396       741.396       2341.90       3083.30    
  39  0.135276      -2.00044      -656.833       656.833       2329.41       2986.24    
  40  0.262364      -1.33802      -439.333       439.333       2438.28       2877.61    
  41  0.463951     -0.767976      -252.161       252.161       2010.43       2262.59    
  42  0.419672     -0.868282      -285.096       285.096       2213.55       2498.65    
  43  0.897011     -0.108687      -35.6867       35.6867       2188.28       2223.97    
  44  0.818933     -0.199754      -65.5880       65.5880       2197.16       2262.75    
  45  0.136906      -1.98846      -652.902       652.902       2246.97       2899.87    
  46  0.561722     -0.576748      -189.372       189.372       2245.10       2434.47    
  47  0.991681     -0.835368E-02  -2.74289       2.74289       1679.68       1682.42    
  48  0.653388     -0.425585      -139.739       139.739       2184.79       2324.53    
  49  0.578557     -0.547219      -179.676       179.676       1671.58       1851.26    
loop,thermsimp(1:2)       46   797.806       381.655    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111       1620.95         68.45          1.25         39.34          1.52          0.05        110.60
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112       1345.29         68.36          1.22         39.48          1.47          0.04        110.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1345.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       46
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       47
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      111     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -1041.60       1041.60       1187.73       2229.32    
   2  0.581082     -0.542864      -178.246       178.246       1184.14       1362.39    
   3  0.690143     -0.370857      -121.769       121.769       1679.68       1801.45    
   4  0.958690     -0.421877E-01  -13.8521       13.8521       1645.25       1659.11    
   5  0.947492     -0.539367E-01  -17.7098       17.7098       1601.24       1618.95    
   6  0.253816E-01  -3.67373      -1206.25       1206.25       1671.58       2877.83    
   7  0.811950     -0.208316      -68.3994       68.3994       1817.15       1885.55    
   8  0.448512     -0.801821      -263.274       263.274       1822.31       2085.58    
   9  0.625244     -0.469613      -154.195       154.195       1619.43       1773.62    
  10  0.557627     -0.584065      -191.775       191.775       1969.79       2161.56    
  11  0.762657     -0.270947      -88.9641       88.9641       1601.65       1690.61    
  12  0.579328     -0.545887      -179.239       179.239       1859.89       2039.13    
  13  0.168395      -1.78144      -584.928       584.928       1853.06       2437.99    
  14  0.993282     -0.674111E-02  -2.21341       2.21341       1284.82       1287.03    
  15  0.573458     -0.556070      -182.583       182.583       1956.20       2138.79    
  16  0.900456     -0.104854      -34.4281       34.4281       1953.34       1987.77    
  17  0.961937     -0.388068E-01  -12.7420       12.7420       1837.29       1850.03    
  18  0.685702     -0.377312      -123.889       123.889       2065.12       2189.01    
  19  0.335644      -1.09171      -358.456       358.456       1509.02       1867.47    
  20  0.726392     -0.319666      -104.961       104.961       2185.36       2290.32    
  21  0.523515     -0.647189      -212.501       212.501       2188.28       2400.78    
  22  0.877914     -0.130206      -42.7526       42.7526       1852.33       1895.08    
  23  0.893563     -0.112539      -36.9516       36.9516       2010.43       2047.38    
  24  0.829449     -0.186994      -61.3986       61.3986       2197.16       2258.56    
  25  0.454457     -0.788653      -258.950       258.950       2209.31       2468.26    
  26  0.261407      -1.34168      -440.532       440.532       2184.79       2625.32    
  27  0.144225      -1.93638      -635.801       635.801       2034.09       2669.89    
  28  0.963744     -0.369299E-01  -12.1257       12.1257       2063.42       2075.54    
  29  0.267843      -1.31735      -432.547       432.547       1458.41       1890.95    
  30  0.251943E-01  -3.68114      -1208.68       1208.68       2088.82       3297.50    
  31  0.321532      -1.13466      -372.559       372.559       1785.78       2158.34    
  32  0.440903     -0.818930      -268.891       268.891       2261.16       2530.05    
  33  0.214416      -1.53984      -505.598       505.598       2245.10       2750.69    
  34  0.212185      -1.55030      -509.033       509.033       2213.55       2722.59    
  35  0.948253E-01  -2.35572      -773.488       773.488       2058.28       2831.77    
  36  0.507627     -0.678008      -222.620       222.620       2207.09       2429.71    
  37  0.415074     -0.879299      -288.713       288.713       1869.96       2158.67    
  38  0.768069     -0.263876      -86.6423       86.6423       2185.83       2272.47    
  39  0.462999E-01  -3.07261      -1008.88       1008.88       2188.96       3197.84    
  40  0.835390     -0.179856      -59.0549       59.0549       2262.25       2321.31    
  41  0.678734     -0.387526      -127.242       127.242       1916.51       2043.75    
  42  0.363569      -1.01179      -332.214       332.214       1800.44       2132.65    
  43  0.677161     -0.389846      -128.004       128.004       2438.28       2566.28    
  44  0.506668     -0.679899      -223.241       223.241       2246.97       2470.21    
  45  0.875658     -0.132779      -43.5973       43.5973       2335.74       2379.34    
  46  0.924863     -0.781102E-01  -25.6471       25.6471       2499.64       2525.28    
  47  0.794570E-01  -2.53254      -831.546       831.546       2329.41       3160.95    
  48  0.449212     -0.800261      -262.761       262.761       2330.37       2593.13    
  49  0.658987     -0.417051      -136.937       136.937       1345.29       1482.22    
loop,thermsimp(1:2)       47   1041.60       178.246    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113       2122.63         68.12          1.20         39.65          1.78          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2122.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       47
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       48
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      112     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -186.408       186.408       1284.82       1471.22    
   2  0.216137      -1.53184      -502.972       502.972       1184.14       1687.11    
   3  0.476425     -0.741444      -243.449       243.449       1345.29       1588.74    
   4  0.184047      -1.69256      -555.745       555.745       1601.24       2156.99    
   5  0.722630     -0.324858      -106.666       106.666       1645.25       1751.92    
   6  0.887750     -0.119065      -39.0943       39.0943       1601.65       1640.74    
   7  0.236344      -1.44247      -473.627       473.627       1619.43       2093.05    
   8  0.798055     -0.225578      -74.0672       74.0672       1679.68       1753.75    
   9  0.425454     -0.854597      -280.603       280.603       1837.29       2117.89    
  10  0.605701     -0.501368      -164.622       164.622       1509.02       1673.64    
  11  0.742456     -0.297792      -97.7785       97.7785       1817.15       1914.93    
  12  0.378462E-01  -3.27423      -1075.07       1075.07       1458.41       2533.48    
  13  0.341910      -1.07321      -352.382       352.382       1852.33       2204.71    
  14  0.794971E-01  -2.53203      -831.380       831.380       1953.34       2784.72    
  15  0.586423     -0.533715      -175.242       175.242       1859.89       2035.14    
  16  0.990523     -0.952170E-02  -3.12640       3.12640       1916.51       1919.64    
  17  0.348475      -1.05419      -346.137       346.137       2010.43       2356.56    
  18  0.998034     -0.196755E-02 -0.646034      0.646034       2063.42       2064.06    
  19  0.616072     -0.484391      -159.047       159.047       1822.31       1981.36    
  20  0.427239     -0.850411      -279.228       279.228       1800.44       2079.67    
  21  0.598160     -0.513898      -168.736       168.736       1956.20       2124.94    
  22  0.642831     -0.441873      -145.087       145.087       1785.78       1930.86    
  23  0.392766     -0.934541      -306.851       306.851       1869.96       2176.81    
  24  0.738407     -0.303260      -99.5739       99.5739       1969.79       2069.36    
  25  0.334341      -1.09559      -359.732       359.732       2065.12       2424.85    
  26  0.997912     -0.208996E-02 -0.686226      0.686226       1187.73       1188.41    
  27  0.492305E-01  -3.01124      -988.726       988.726       2197.16       3185.89    
  28  0.304734      -1.18832      -390.177       390.177       2185.83       2576.01    
  29  0.159886      -1.83330      -601.953       601.953       2185.36       2787.31    
  30  0.991331     -0.870666E-02  -2.85878       2.85878       2262.25       2265.11    
  31  0.735164     -0.307662      -101.019       101.019       2335.74       2436.76    
  32  0.279948      -1.27315      -418.032       418.032       2188.28       2606.32    
  33  0.457260     -0.782502      -256.930       256.930       2207.09       2464.02    
  34  0.678170     -0.388358      -127.515       127.515       1853.06       1980.57    
  35  0.689603     -0.371639      -122.026       122.026       2209.31       2331.34    
  36  0.468470     -0.758283      -248.978       248.978       2246.97       2495.95    
  37  0.937429     -0.646141E-01  -21.2157       21.2157       2499.64       2520.85    
  38  0.115915      -2.15490      -707.550       707.550       2261.16       2968.71    
  39  0.125789      -2.07315      -680.707       680.707       2438.28       3118.99    
  40  0.137562      -1.98368      -651.332       651.332       2330.37       2981.70    
  41  0.273901      -1.29499      -425.202       425.202       2184.79       2609.99    
  42  0.934963     -0.672484E-01  -22.0807       22.0807       2034.09       2056.17    
  43  0.450296     -0.797850      -261.970       261.970       2213.55       2475.52    
  44  0.681645     -0.383246      -125.837       125.837       2245.10       2370.93    
  45  0.282914E-01  -3.56520      -1170.61       1170.61       2058.28       3228.90    
  46  0.962226     -0.385062E-01  -12.6433       12.6433       1671.58       1684.22    
  47  0.771412     -0.259533      -85.2162       85.2162       2329.41       2414.62    
  48  0.778208     -0.250761      -82.3362       82.3362       2188.96       2271.30    
  49  0.945686     -0.558450E-01  -18.3364       18.3364       2122.63       2140.97    
loop,thermsimp(1:2)       48   186.408       502.972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114       1814.84         68.05          1.17         39.62          1.80          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1814.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       48
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       49
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      113     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -561.280       561.280       1187.73       1749.01    
   2  0.335083      -1.09338      -359.005       359.005       1284.82       1643.82    
   3  0.585160     -0.535871      -175.950       175.950       1345.29       1521.24    
   4  0.445729     -0.808044      -265.317       265.317       1601.65       1866.97    
   5  0.963605     -0.370741E-01  -12.1731       12.1731       1509.02       1521.19    
   6  0.538074     -0.619758      -203.494       203.494       1671.58       1875.07    
   7  0.971443     -0.289729E-01  -9.51311       9.51311       1184.14       1193.65    
   8  0.817136     -0.201950      -66.3092       66.3092       1645.25       1711.56    
   9  0.216943      -1.52812      -501.751       501.751       1679.68       2181.43    
  10  0.572311     -0.558074      -183.241       183.241       1817.15       2000.39    
  11  0.511761     -0.669897      -219.957       219.957       1916.51       2136.47    
  12  0.331920E-01  -3.40545      -1118.16       1118.16       1785.78       2903.94    
  13  0.662680     -0.411462      -135.101       135.101       1853.06       1988.16    
  14  0.578679     -0.547007      -179.607       179.607       1822.31       2001.92    
  15  0.473979     -0.746592      -245.140       245.140       1859.89       2105.03    
  16  0.243750      -1.41161      -463.496       463.496       2034.09       2497.58    
  17  0.784227     -0.243057      -79.8066       79.8066       2063.42       2143.23    
  18  0.215065      -1.53682      -504.605       504.605       1969.79       2474.39    
  19  0.813272     -0.206689      -67.8654       67.8654       1800.44       1868.30    
  20  0.877336     -0.130865      -42.9689       42.9689       1619.43       1662.40    
  21  0.911070     -0.931357E-01  -30.5806       30.5806       1837.29       1867.87    
  22  0.424500     -0.856844      -281.340       281.340       1956.20       2237.54    
  23  0.122508      -2.09958      -689.386       689.386       2122.63       2812.02    
  24  0.173199      -1.75331      -575.691       575.691       1601.24       2176.93    
  25  0.243010      -1.41465      -464.494       464.494       1869.96       2334.45    
  26  0.618804     -0.479966      -157.594       157.594       1852.33       2009.92    
  27  0.365303      -1.00703      -330.652       330.652       2262.25       2592.90    
  28  0.178054      -1.72567      -566.614       566.614       2188.96       2755.58    
  29  0.416122     -0.876776      -287.885       287.885       2209.31       2497.20    
  30  0.789287     -0.236625      -77.6947       77.6947       2010.43       2088.12    
  31  0.786736     -0.239863      -78.7578       78.7578       2245.10       2323.85    
  32  0.295880      -1.21780      -399.858       399.858       2329.41       2729.27    
  33  0.418649     -0.870722      -285.897       285.897       2065.12       2351.02    
  34  0.706992     -0.346736      -113.849       113.849       2335.74       2449.59    
  35  0.281863      -1.26633      -415.794       415.794       2207.09       2622.89    
  36  0.357290      -1.02921      -337.935       337.935       2213.55       2551.49    
  37  0.174180      -1.74767      -573.837       573.837       2246.97       2820.81    
  38  0.190924      -1.65588      -543.700       543.700       2499.64       3043.33    
  39  0.630369     -0.461449      -151.514       151.514       1458.41       1609.92    
  40  0.252261      -1.37729      -452.226       452.226       2185.83       2638.06    
  41  0.359213      -1.02384      -336.173       336.173       2188.28       2524.46    
  42  0.740344     -0.300640      -98.7137       98.7137       2184.79       2283.50    
  43  0.283211      -1.26156      -414.228       414.228       1953.34       2367.57    
  44  0.965119     -0.355039E-01  -11.6575       11.6575       2185.36       2197.02    
  45  0.389600     -0.942634      -309.509       309.509       2261.16       2570.67    
  46  0.598383     -0.513525      -168.613       168.613       2330.37       2498.99    
  47  0.631795     -0.459190      -150.773       150.773       2438.28       2589.05    
  48  0.997460     -0.254363E-02 -0.835188      0.835188       2197.16       2197.99    
  49  0.192532      -1.64749      -540.946       540.946       1814.84       2355.78    
loop,thermsimp(1:2)       49   561.280       359.005    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115       1598.76         68.09          1.20         39.59          1.89          0.05        110.80
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1598.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       49
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       50
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      114     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -1133.03       1133.03       1184.14       2317.17    
   2  0.601445     -0.508421      -166.937       166.937       1509.02       1675.95    
   3  0.651191     -0.428952      -140.844       140.844       1345.29       1486.13    
   4  0.187303      -1.67503      -549.986       549.986       1458.41       2008.39    
   5  0.664603     -0.408566      -134.150       134.150       1284.82       1418.97    
   6  0.945236     -0.563208E-01  -18.4926       18.4926       1619.43       1637.92    
   7  0.865870     -0.144020      -47.2882       47.2882       1645.25       1692.54    
   8  0.674117     -0.394351      -129.483       129.483       1187.73       1317.21    
   9  0.959689E-01  -2.34373      -769.552       769.552       1601.65       2371.20    
  10  0.663337     -0.410472      -134.776       134.776       1837.29       1972.07    
  11  0.384854     -0.954891      -313.533       313.533       1800.44       2113.97    
  12  0.892338     -0.113910      -37.4019       37.4019       1671.58       1708.98    
  13  0.470837     -0.753243      -247.323       247.323       1853.06       2100.38    
  14  0.262618      -1.33706      -439.015       439.015       1817.15       2256.16    
  15  0.877143     -0.131085      -43.0410       43.0410       1822.31       1865.35    
  16  0.262102      -1.33902      -439.661       439.661       1852.33       2291.99    
  17  0.306130      -1.18375      -388.677       388.677       2010.43       2399.10    
  18  0.251844      -1.37895      -452.770       452.770       1859.89       2312.66    
  19  0.371147     -0.991157      -325.441       325.441       1916.51       2241.95    
  20  0.244393E-01  -3.71156      -1218.67       1218.67       2063.42       3282.09    
  21  0.550903     -0.596197      -195.758       195.758       1601.24       1797.00    
  22  0.509078     -0.675154      -221.683       221.683       1679.68       1901.36    
  23  0.741178     -0.299515      -98.3442       98.3442       2185.36       2283.70    
  24  0.585965     -0.534496      -175.499       175.499       2197.16       2372.66    
  25  0.602491     -0.506683      -166.367       166.367       1956.20       2122.57    
  26  0.532366     -0.630423      -206.996       206.996       2184.79       2391.78    
  27  0.264247      -1.33087      -436.984       436.984       2245.10       2682.08    
  28  0.468512     -0.758194      -248.949       248.949       1869.96       2118.91    
  29  0.338122      -1.08435      -356.040       356.040       2065.12       2421.16    
  30  0.815455     -0.204008      -66.9851       66.9851       1814.84       1881.82    
  31  0.126007      -2.07142      -680.140       680.140       1953.34       2633.48    
  32  0.391435     -0.937937      -307.967       307.967       2335.74       2643.71    
  33  0.477179     -0.739864      -242.931       242.931       1969.79       2212.72    
  34  0.926058     -0.768180E-01  -25.2228       25.2228       2209.31       2234.54    
  35  0.305992E-01  -3.48678      -1144.87       1144.87       2034.09       3178.96    
  36  0.142122      -1.95107      -640.624       640.624       2330.37       2971.00    
  37  0.934627E-01  -2.37019      -778.240       778.240       2188.28       2966.52    
  38  0.933240     -0.690924E-01  -22.6861       22.6861       2213.55       2236.24    
  39  0.551354     -0.595378      -195.489       195.489       2261.16       2456.65    
  40  0.167646      -1.78590      -586.391       586.391       2438.28       3024.67    
  41  0.657770     -0.418900      -137.544       137.544       2262.25       2399.80    
  42  0.937012     -0.650587E-01  -21.3617       21.3617       2207.09       2228.46    
  43  0.435130     -0.832109      -273.219       273.219       2185.83       2459.05    
  44  0.346278E-01  -3.36310      -1104.26       1104.26       2329.41       3433.66    
  45  0.529273     -0.636251      -208.910       208.910       2188.96       2397.87    
  46  0.543808     -0.609159      -200.014       200.014       2122.63       2322.65    
  47  0.476993     -0.740254      -243.059       243.059       2246.97       2490.03    
  48  0.602365     -0.506891      -166.435       166.435       1785.78       1952.21    
  49  0.429141     -0.845970      -277.770       277.770       1598.76       1876.53    
loop,thermsimp(1:2)       50   1133.03       166.937    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116       1546.94         68.34          1.24         39.34          1.86          0.05        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117       1322.33         68.14          1.23         39.52          1.61          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1322.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       50
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       51
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      116     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -24.0771       24.0771       1187.73       1211.80    
   2  0.669511     -0.401208      -131.735       131.735       1284.82       1416.55    
   3  0.863337E-01  -2.44954      -804.292       804.292       1345.29       2149.58    
   4  0.279945      -1.27316      -418.036       418.036       1619.43       2037.46    
   5  0.832640     -0.183154      -60.1377       60.1377       1509.02       1569.15    
   6  0.848933     -0.163775      -53.7748       53.7748       1645.25       1699.03    
   7  0.141794      -1.95338      -641.383       641.383       1671.58       2312.96    
   8  0.208764      -1.56655      -514.369       514.369       1601.24       2115.61    
   9  0.755787     -0.279996      -91.9352       91.9352       1822.31       1914.24    
  10  0.177416      -1.72926      -567.793       567.793       1598.76       2166.55    
  11  0.405148     -0.903503      -296.660       296.660       1814.84       2111.50    
  12  0.640380     -0.445693      -146.341       146.341       1679.68       1826.02    
  13  0.548060     -0.601370      -197.457       197.457       1785.78       1983.23    
  14  0.773287     -0.257105      -84.4190       84.4190       1837.29       1921.71    
  15  0.180768      -1.71054      -561.647       561.647       1458.41       2020.05    
  16  0.135846      -1.99624      -655.453       655.453       1853.06       2508.51    
  17  0.601016     -0.509133      -167.171       167.171       1800.44       1967.61    
  18  0.302263      -1.19646      -392.851       392.851       1869.96       2262.81    
  19  0.189428      -1.66374      -546.282       546.282       1956.20       2502.49    
  20  0.737158     -0.304953      -100.130       100.130       1969.79       2069.92    
  21  0.790680     -0.234862      -77.1157       77.1157       2207.09       2284.21    
  22  0.177192E-01  -4.03310      -1324.25       1324.25       2209.31       3533.56    
  23  0.236042      -1.44375      -474.046       474.046       2213.55       2687.60    
  24  0.459229     -0.778206      -255.520       255.520       1916.51       2172.03    
  25  0.586479E-01  -2.83620      -931.252       931.252       1817.15       2748.40    
  26  0.263766      -1.33269      -437.582       437.582       2185.36       2622.94    
  27  0.942550     -0.591663E-01  -19.4269       19.4269       1852.33       1871.75    
  28  0.106855      -2.23628      -734.270       734.270       1859.89       2594.16    
  29  0.710700     -0.341505      -112.131       112.131       1184.14       1296.27    
  30  0.207109E-01  -3.87709      -1273.02       1273.02       2122.63       3395.66    
  31  0.901203     -0.104025      -34.1561       34.1561       1601.65       1635.81    
  32  0.949751     -0.515555E-01  -16.9280       16.9280       2197.16       2214.09    
  33  0.343487      -1.06861      -350.872       350.872       2184.79       2535.66    
  34  0.875043     -0.133483      -43.8283       43.8283       2188.96       2232.79    
  35  0.122447E-01  -4.40266      -1445.59       1445.59       2010.43       3456.02    
  36  0.820650     -0.197659      -64.9002       64.9002       2262.25       2327.15    
  37  0.748866     -0.289195      -94.9557       94.9557       2065.12       2160.08    
  38  0.594525     -0.519992      -170.737       170.737       2261.16       2431.90    
  39  0.927863E-01  -2.37746      -780.625       780.625       2185.83       2966.46    
  40  0.631335     -0.459918      -151.012       151.012       2246.97       2397.98    
  41  0.282620      -1.26365      -414.914       414.914       1953.34       2368.26    
  42  0.707811     -0.345578      -113.469       113.469       2335.74       2449.21    
  43  0.930463     -0.720730E-01  -23.6648       23.6648       2245.10       2268.76    
  44  0.988563     -0.115032E-01  -3.77703       3.77703       2188.28       2192.06    
  45  0.869439     -0.139907      -45.9378       45.9378       2330.37       2376.31    
  46  0.693921     -0.365397      -119.976       119.976       2438.28       2558.26    
  47  0.731753     -0.312312      -102.546       102.546       2034.09       2136.64    
  48  0.848712     -0.164035      -53.8601       53.8601       2063.42       2117.28    
  49  0.174447      -1.74613      -573.334       573.334       1322.33       1895.67    
loop,thermsimp(1:2)       51   24.0771       131.735    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118       1494.30         68.16          1.20         39.62          1.77          0.04        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1494.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       51
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       52
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      117     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -137.413       137.413       1187.73       1325.14    
   2  0.385391     -0.953496      -313.075       313.075       1184.14       1497.22    
   3  0.323679      -1.12800      -370.373       370.373       1284.82       1655.19    
   4  0.402516E-01  -3.21260      -1054.84       1054.84       1509.02       2563.86    
   5  0.866022     -0.143846      -47.2309       47.2309       1601.65       1648.88    
   6  0.560147     -0.579555      -190.294       190.294       1645.25       1835.55    
   7  0.389098     -0.943925      -309.933       309.933       1679.68       1989.61    
   8  0.470755     -0.753417      -247.380       247.380       1852.33       2099.71    
   9  0.794299     -0.230295      -75.6162       75.6162       1322.33       1397.95    
  10  0.897132     -0.108553      -35.6427       35.6427       1822.31       1857.95    
  11  0.359474      -1.02311      -335.934       335.934       1837.29       2173.22    
  12  0.604694     -0.503032      -165.168       165.168       1800.44       1965.61    
  13  0.101554      -2.28717      -750.979       750.979       1785.78       2536.76    
  14  0.274480      -1.29288      -424.509       424.509       1458.41       1882.92    
  15  0.916086     -0.876445E-01  -28.7776       28.7776       1619.43       1648.20    
  16  0.820070E-01  -2.50095      -821.174       821.174       1969.79       2790.96    
  17  0.975902     -0.243929E-01  -8.00929       8.00929       1814.84       1822.85    
  18  0.131665      -2.02750      -665.718       665.718       1601.24       2266.96    
  19  0.751313     -0.285933      -93.8847       93.8847       2063.42       2157.30    
  20  0.775324     -0.254475      -83.5554       83.5554       2034.09       2117.64    
  21  0.237000      -1.43969      -472.716       472.716       1345.29       1818.00    
  22  0.113641      -2.17471      -714.054       714.054       2065.12       2779.18    
  23  0.762281     -0.271440      -89.1258       89.1258       1598.76       1687.88    
  24  0.783730     -0.243690      -80.0144       80.0144       1916.51       1996.52    
  25  0.492891     -0.707468      -232.293       232.293       2188.28       2420.58    
  26  0.471904     -0.750980      -246.580       246.580       2197.16       2443.74    
  27  0.855781     -0.155740      -51.1365       51.1365       2188.96       2240.10    
  28  0.636473     -0.451814      -148.351       148.351       1869.96       2018.31    
  29  0.433340     -0.836232      -274.572       274.572       2245.10       2519.67    
  30  0.482236     -0.729321      -239.469       239.469       2207.09       2446.56    
  31  0.855143E-01  -2.45907      -807.423       807.423       1671.58       2479.00    
  32  0.916579     -0.871071E-01  -28.6011       28.6011       2262.25       2290.85    
  33  0.232519      -1.45878      -478.984       478.984       1953.34       2432.33    
  34  0.283977      -1.25886      -413.341       413.341       2330.37       2743.71    
  35  0.401228E-01  -3.21581      -1055.89       1055.89       2246.97       3302.86    
  36  0.235231      -1.44719      -475.177       475.177       2261.16       2736.34    
  37  0.233426      -1.45489      -477.705       477.705       2335.74       2813.45    
  38  0.903594     -0.101376      -33.2862       33.2862       1956.20       1989.49    
  39  0.857571     -0.153651      -50.4504       50.4504       1853.06       1903.51    
  40  0.444085     -0.811739      -266.530       266.530       2184.79       2451.32    
  41  0.151055      -1.89011      -620.609       620.609       2438.28       3058.89    
  42  0.745694     -0.293440      -96.3494       96.3494       1859.89       1956.24    
  43  0.470647E-01  -3.05623      -1003.50       1003.50       2185.36       3188.86    
  44  0.344459      -1.06578      -349.944       349.944       2213.55       2563.50    
  45  0.592738     -0.523004      -171.725       171.725       1817.15       1988.87    
  46  0.754292     -0.281975      -92.5851       92.5851       2185.83       2278.42    
  47  0.162950      -1.81431      -595.720       595.720       2122.63       2718.35    
  48  0.939100     -0.628333E-01  -20.6310       20.6310       2010.43       2031.06    
  49  0.966845     -0.337175E-01  -11.0710       11.0710       1494.30       1505.37    
loop,thermsimp(1:2)       52   137.413       313.075    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119       1461.21         68.16          1.21         39.55          1.54          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1461.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       52
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       53
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      118     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -177.870       177.870       1187.73       1365.60    
   2  0.307993      -1.17768      -386.684       386.684       1322.33       1709.02    
   3  0.551684     -0.594779      -195.293       195.293       1184.14       1379.43    
   4  0.969976     -0.304835E-01  -10.0091       10.0091       1494.30       1504.31    
   5  0.401714     -0.912015      -299.455       299.455       1619.43       1918.88    
   6  0.336211      -1.09002      -357.901       357.901       1601.65       1959.55    
   7  0.649191     -0.432028      -141.854       141.854       1284.82       1426.67    
   8  0.426986     -0.851005      -279.423       279.423       1598.76       1878.18    
   9  0.479997     -0.733976      -240.997       240.997       1345.29       1586.28    
  10  0.441527     -0.817516      -268.427       268.427       1814.84       2083.27    
  11  0.218988      -1.51874      -498.670       498.670       1645.25       2143.92    
  12  0.935549     -0.666221E-01  -21.8750       21.8750       1822.31       1844.18    
  13  0.159996      -1.83261      -601.727       601.727       1458.41       2060.13    
  14  0.486870     -0.719759      -236.329       236.329       1853.06       2089.39    
  15  0.835520     -0.179701      -59.0037       59.0037       1859.89       1918.90    
  16  0.643759     -0.440431      -144.613       144.613       1800.44       1945.05    
  17  0.177188      -1.73054      -568.215       568.215       1817.15       2385.36    
  18  0.408356     -0.895617      -294.071       294.071       1956.20       2250.28    
  19  0.463768     -0.768371      -252.291       252.291       1679.68       1931.97    
  20  0.616820     -0.483178      -158.649       158.649       1916.51       2075.16    
  21  0.377083     -0.975289      -320.231       320.231       1869.96       2190.19    
  22  0.278016      -1.28008      -420.306       420.306       2010.43       2430.73    
  23  0.746435     -0.292446      -96.0231       96.0231       1852.33       1948.35    
  24  0.872234     -0.136697      -44.8838       44.8838       2034.09       2078.97    
  25  0.887073E-01  -2.42241      -795.386       795.386       2063.42       2858.80    
  26  0.124913      -2.08014      -683.002       683.002       1837.29       2520.29    
  27  0.918160     -0.853835E-01  -28.0352       28.0352       2188.96       2217.00    
  28  0.924603     -0.783912E-01  -25.7394       25.7394       1601.24       1626.98    
  29  0.863214     -0.147092      -48.2970       48.2970       2185.83       2234.13    
  30  0.823499E-02  -4.79936      -1575.85       1575.85       2262.25       3838.10    
  31  0.548113     -0.601275      -197.425       197.425       2188.28       2385.71    
  32  0.800553     -0.222452      -73.0409       73.0409       1953.34       2026.38    
  33  0.180829      -1.71020      -561.536       561.536       2197.16       2758.70    
  34  0.968975E-01  -2.33410      -766.390       766.390       2207.09       2973.48    
  35  0.749847     -0.287886      -94.5260       94.5260       2184.79       2279.31    
  36  0.902028     -0.103110      -33.8556       33.8556       1671.58       1705.44    
  37  0.312083      -1.16449      -382.353       382.353       2245.10       2627.45    
  38  0.472691     -0.749313      -246.033       246.033       1785.78       2031.81    
  39  0.970346     -0.301026E-01  -9.88402       9.88402       2213.55       2223.44    
  40  0.485853     -0.721850      -237.016       237.016       1509.02       1746.03    
  41  0.604658     -0.503092      -165.188       165.188       2122.63       2287.82    
  42  0.172238      -1.75888      -577.519       577.519       2261.16       2838.68    
  43  0.359079E-01  -3.32680      -1092.34       1092.34       2330.37       3422.71    
  44  0.464923     -0.765884      -251.474       251.474       2065.12       2316.60    
  45  0.293512      -1.22584      -402.497       402.497       1969.79       2372.28    
  46  0.572788     -0.557239      -182.967       182.967       2335.74       2518.71    
  47  0.931713     -0.707300E-01  -23.2238       23.2238       2438.28       2461.50    
  48  0.983012     -0.171340E-01  -5.62587       5.62587       2185.36       2190.98    
  49  0.572194     -0.558278      -183.307       183.307       1461.21       1644.51    
loop,thermsimp(1:2)       53   177.870       386.684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120       1678.04         67.91          1.18         39.72          1.70          0.05        110.56
Just calling func    0   0        110.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1678.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       53
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       54
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      119     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -186.900       186.900       1187.73       1374.63    
   2  0.698829     -0.358349      -117.662       117.662       1184.14       1301.80    
   3  0.550231     -0.597418      -196.159       196.159       1284.82       1480.97    
   4  0.844966     -0.168459      -55.3125       55.3125       1494.30       1549.61    
   5  0.139804      -1.96751      -646.022       646.022       1345.29       1991.31    
   6  0.119451      -2.12485      -697.683       697.683       1601.24       2298.93    
   7  0.474112     -0.746312      -245.048       245.048       1461.21       1706.25    
   8  0.293024      -1.22750      -403.043       403.043       1671.58       2074.62    
   9  0.760137     -0.274256      -90.0505       90.0505       1322.33       1412.38    
  10  0.216376      -1.53074      -502.610       502.610       1509.02       2011.63    
  11  0.837069     -0.177849      -58.3957       58.3957       1822.31       1880.71    
  12  0.969258     -0.312245E-01  -10.2524       10.2524       1598.76       1609.01    
  13  0.335918      -1.09089      -358.188       358.188       1619.43       1977.61    
  14  0.966643     -0.339265E-01  -11.1396       11.1396       1859.89       1871.03    
  15  0.723887     -0.323119      -106.095       106.095       1679.68       1785.78    
  16  0.459929E-01  -3.07927      -1011.06       1011.06       1800.44       2811.50    
  17  0.536724     -0.622271      -204.320       204.320       1852.33       2056.64    
  18  0.432574     -0.838001      -275.153       275.153       1601.65       1876.80    
  19  0.160308      -1.83066      -601.087       601.087       1953.34       2554.43    
  20  0.885158     -0.121989      -40.0544       40.0544       1785.78       1825.83    
  21  0.753783     -0.282650      -92.8068       92.8068       1458.41       1551.21    
  22  0.135562      -1.99832      -656.139       656.139       1916.51       2572.65    
  23  0.817964     -0.200937      -65.9765       65.9765       2034.09       2100.07    
  24  0.286617      -1.24961      -410.303       410.303       1814.84       2225.14    
  25  0.319126      -1.14217      -375.026       375.026       1853.06       2228.08    
  26  0.104479E-01  -4.56135      -1497.70       1497.70       1645.25       3142.95    
  27  0.671407     -0.398379      -130.806       130.806       1869.96       2000.76    
  28  0.782955     -0.244680      -80.3395       80.3395       2185.36       2265.70    
  29  0.186689      -1.67831      -551.065       551.065       2188.96       2740.03    
  30  0.462519     -0.771067      -253.176       253.176       2213.55       2466.73    
  31  0.203171      -1.59371      -523.285       523.285       2185.83       2709.12    
  32  0.851762E-01  -2.46303      -808.724       808.724       1956.20       2764.93    
  33  0.702824     -0.352649      -115.790       115.790       2184.79       2300.58    
  34  0.747923     -0.290456      -95.3696       95.3696       2122.63       2218.00    
  35  0.224450      -1.49410      -490.581       490.581       2065.12       2555.70    
  36  0.243563E-02  -6.01755      -1975.83       1975.83       1969.79       3945.62    
  37  0.160790      -1.82766      -600.102       600.102       1817.15       2417.25    
  38  0.880431     -0.127343      -41.8125       41.8125       2188.28       2230.10    
  39  0.507306     -0.678640      -222.828       222.828       2010.43       2233.26    
  40  0.266019      -1.32419      -434.790       434.790       2438.28       2873.07    
  41  0.310751      -1.16876      -383.757       383.757       2335.74       2719.50    
  42  0.945006     -0.565640E-01  -18.5725       18.5725       1837.29       1855.86    
  43  0.265699E-01  -3.62797      -1191.23       1191.23       2245.10       3436.32    
  44  0.652842     -0.426420      -140.013       140.013       2197.16       2337.17    
  45  0.799409     -0.223882      -73.5106       73.5106       2261.16       2334.67    
  46  0.543529     -0.609672      -200.183       200.183       2063.42       2263.60    
  47  0.361947      -1.01626      -333.683       333.683       2207.09       2540.78    
  48  0.398721     -0.919492      -301.910       301.910       2330.37       2632.28    
  49  0.349489      -1.05128      -345.183       345.183       1678.04       2023.22    
loop,thermsimp(1:2)       54   186.900       117.662    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121       1512.53         68.22          1.21         39.55          1.57          0.05        110.59
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    1512.5        3.331     -3.265      4.654     -102.6     0.4798    
                     -0.1952     0.6462     -99.70      4.716      1.495    

                       3.218    -0.7944      1.675      6054.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.344      0.000      0.000      7000.      646.0    

                      -1.316     -6.291     -8.068     -7.980      9.344    

                      -4.638     -3.949      4605.      0.000      7253.    



                       2412.     0.1241E+05  6962.      1832.      2865.    

                       4261.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.900     -1.628     -2.178     -2.044    -0.3807    

                     -0.3252      9.622      8.530    -0.1515E+05 -5.221    

                      0.2226E-01 -2.359      8.936      9.065    -0.1969E+05



                      -6.000     0.4559     0.6283E-02  9.011      9.017    

                     -0.1944E+05 -6.000     -1.166    -0.7260      9.706    

                       9.465    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1512.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       54
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       55
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      120     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -537.844       537.844       1184.14       1721.98    
   2  0.875287     -0.133204      -43.7367       43.7367       1187.73       1231.46    
   3  0.103612      -2.26710      -744.390       744.390       1322.33       2066.72    
   4  0.159072      -1.83840      -603.629       603.629       1284.82       1888.44    
   5  0.118738      -2.13084      -699.649       699.649       1494.30       2193.95    
   6  0.294105      -1.22382      -401.834       401.834       1458.41       1860.24    
   7  0.967643     -0.328919E-01  -10.7999       10.7999       1598.76       1609.56    
   8  0.675183     -0.392772      -128.965       128.965       1461.21       1590.17    
   9  0.170112      -1.77130      -581.596       581.596       1679.68       2261.28    
  10  0.990992     -0.904902E-02  -2.97120       2.97120       1785.78       1788.75    
  11  0.198513      -1.61690      -530.902       530.902       1837.29       2368.19    
  12  0.404817E-01  -3.20690      -1052.97       1052.97       1859.89       2912.86    
  13  0.834933E-01  -2.48299      -815.276       815.276       1601.65       2416.93    
  14  0.458935     -0.778848      -255.730       255.730       1822.31       2078.04    
  15  0.929311     -0.733118E-01  -24.0716       24.0716       1619.43       1643.50    
  16  0.593071     -0.522440      -171.541       171.541       1345.29       1516.83    
  17  0.963359E-01  -2.33991      -768.299       768.299       1869.96       2638.26    
  18  0.383119E-01  -3.26200      -1071.06       1071.06       1509.02       2580.08    
  19  0.841843     -0.172161      -56.5283       56.5283       1678.04       1734.56    
  20  0.874261     -0.134376      -44.1218       44.1218       1852.33       1896.45    
  21  0.706443     -0.347513      -114.104       114.104       1671.58       1785.68    
  22  0.423649E-01  -3.16143      -1038.04       1038.04       2034.09       3072.13    
  23  0.904835     -0.100003      -32.8354       32.8354       2122.63       2155.47    
  24  0.728800     -0.316356      -103.874       103.874       1814.84       1918.71    
  25  0.764304     -0.268790      -88.2558       88.2558       1853.06       1941.31    
  26  0.578519     -0.547284      -179.698       179.698       2188.28       2367.98    
  27  0.321737      -1.13402      -372.350       372.350       2010.43       2382.78    
  28  0.592944     -0.522656      -171.611       171.611       2063.42       2235.03    
  29  0.159596      -1.83511      -602.549       602.549       2185.36       2787.91    
  30  0.797332     -0.226484      -74.3648       74.3648       1601.24       1675.61    
  31  0.263979      -1.33189      -437.318       437.318       2184.79       2622.11    
  32  0.449355     -0.799942      -262.657       262.657       2261.16       2523.82    
  33  0.859901     -0.150938      -49.5596       49.5596       2197.16       2246.72    
  34  0.730093     -0.314584      -103.292       103.292       1817.15       1920.44    
  35  0.484666     -0.724295      -237.818       237.818       2213.55       2451.37    
  36  0.180217      -1.71359      -562.649       562.649       2207.09       2769.74    
  37  0.857397     -0.153854      -50.5172       50.5172       1953.34       2003.86    
  38  0.502370     -0.688418      -226.039       226.039       2065.12       2291.16    
  39  0.245408      -1.40484      -461.270       461.270       1916.51       2377.78    
  40  0.134540      -2.00590      -658.625       658.625       2330.37       2989.00    
  41  0.468137     -0.758995      -249.212       249.212       2185.83       2435.04    
  42  0.864548E-01  -2.44813      -803.832       803.832       2335.74       3139.57    
  43  0.178791      -1.72154      -565.258       565.258       2188.96       2754.22    
  44  0.690351     -0.370555      -121.670       121.670       1956.20       2077.87    
  45  0.731648     -0.312455      -102.593       102.593       1800.44       1903.03    
  46  0.857623     -0.153591      -50.4307       50.4307       2438.28       2488.71    
  47  0.754956     -0.281095      -92.2962       92.2962       1645.25       1737.55    
  48  0.355557      -1.03407      -339.532       339.532       2245.10       2584.63    
  49  0.200964      -1.60463      -526.872       526.872       1512.53       2039.40    
loop,thermsimp(1:2)       55   537.844       43.7367    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122       1334.69         68.23          1.22         39.69          1.40          0.05        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123       1249.11         68.09          1.20         39.61          1.59          0.05        110.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1249.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       55
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       56
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      122     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -642.531       642.531       1187.73       1830.26    
   2  0.197548      -1.62177      -532.501       532.501       1345.29       1877.79    
   3  0.774000     -0.256183      -84.1163       84.1163       1461.21       1545.32    
   4  0.170284      -1.77029      -581.265       581.265       1598.76       2180.02    
   5  0.250636      -1.38376      -454.349       454.349       1619.43       2073.78    
   6  0.907951     -0.965652E-01  -31.7067       31.7067       1601.24       1632.95    
   7  0.611678     -0.491549      -161.398       161.398       1184.14       1345.54    
   8  0.735945E-02  -4.91177      -1612.75       1612.75       1678.04       3290.79    
   9  0.309131      -1.17399      -385.473       385.473       1645.25       2030.73    
  10  0.577854     -0.548434      -180.075       180.075       1671.58       1851.65    
  11  0.931529     -0.709274E-01  -23.2886       23.2886       1785.78       1809.07    
  12  0.665703     -0.406912      -133.607       133.607       1458.41       1592.01    
  13  0.585695     -0.534955      -175.650       175.650       1284.82       1460.46    
  14  0.295001      -1.22078      -400.835       400.835       1852.33       2253.16    
  15  0.317712E-01  -3.44920      -1132.53       1132.53       1800.44       2932.96    
  16  0.222963      -1.50075      -492.763       492.763       1814.84       2307.60    
  17  0.325931      -1.12107      -368.098       368.098       1817.15       2185.25    
  18  0.785098     -0.241947      -79.4419       79.4419       1853.06       1932.50    
  19  0.550467     -0.596988      -196.018       196.018       1953.34       2149.36    
  20  0.780222     -0.248176      -81.4874       81.4874       1512.53       1594.02    
  21  0.130712      -2.03476      -668.102       668.102       1322.33       1990.43    
  22  0.873397     -0.135365      -44.4463       44.4463       1956.20       2000.65    
  23  0.366975      -1.00246      -329.153       329.153       1822.31       2151.46    
  24  0.813244     -0.206724      -67.8767       67.8767       2122.63       2190.51    
  25  0.782660E-01  -2.54764      -836.505       836.505       1494.30       2330.80    
  26  0.700327     -0.356208      -116.959       116.959       2063.42       2180.38    
  27  0.437766     -0.826071      -271.236       271.236       2197.16       2468.40    
  28  0.508966E-01  -2.97796      -977.797       977.797       1679.68       2657.48    
  29  0.276850      -1.28428      -421.686       421.686       2065.12       2486.81    
  30  0.792031     -0.233154      -76.5550       76.5550       2188.28       2264.84    
  31  0.174747      -1.74441      -572.769       572.769       1837.29       2410.06    
  32  0.469718     -0.755623      -248.105       248.105       1916.51       2164.61    
  33  0.252316      -1.37707      -452.154       452.154       2010.43       2462.58    
  34  0.980061     -0.201409E-01  -6.61314       6.61314       1601.65       1608.26    
  35  0.838300     -0.176379      -57.9133       57.9133       2185.83       2243.74    
  36  0.369385     -0.995915      -327.003       327.003       2213.55       2540.56    
  37  0.923139     -0.799751E-01  -26.2594       26.2594       2438.28       2464.54    
  38  0.592446     -0.523496      -171.887       171.887       2261.16       2433.05    
  39  0.348787      -1.05329      -345.843       345.843       1509.02       1854.86    
  40  0.569584     -0.562850      -184.809       184.809       2245.10       2429.90    
  41  0.543034E-01  -2.91317      -956.523       956.523       2184.79       3141.31    
  42  0.582662     -0.540148      -177.355       177.355       1869.96       2047.31    
  43  0.702825     -0.352648      -115.790       115.790       2188.96       2304.75    
  44  0.941375     -0.604140E-01  -19.8366       19.8366       2207.09       2226.93    
  45  0.258857      -1.35148      -443.751       443.751       2185.36       2629.11    
  46  0.116535      -2.14956      -705.798       705.798       1859.89       2565.69    
  47  0.102671      -2.27622      -747.386       747.386       2330.37       3077.76    
  48  0.172023      -1.76013      -577.928       577.928       2034.09       2612.02    
  49  0.434982E-01  -3.13504      -1029.37       1029.37       1249.11       2278.48    
loop,thermsimp(1:2)       56   642.531       532.501    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124       2109.99         67.84          1.17         39.90          1.64          0.05        110.59
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2109.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       56
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       57
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      123     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -135.305       135.305       1184.14       1319.45    
   2  0.724212     -0.322671      -105.947       105.947       1284.82       1390.76    
   3  0.633711     -0.456163      -149.779       149.779       1461.21       1610.99    
   4  0.448566     -0.801700      -263.234       263.234       1458.41       1721.64    
   5  0.964228     -0.364273E-01  -11.9607       11.9607       1512.53       1524.49    
   6  0.714306     -0.336444      -110.470       110.470       1601.65       1712.12    
   7  0.528330     -0.638035      -209.495       209.495       1601.24       1810.74    
   8  0.654127     -0.424453      -139.367       139.367       1785.78       1925.15    
   9  0.368899     -0.997232      -327.436       327.436       1187.73       1515.16    
  10  0.227697      -1.47974      -485.865       485.865       1671.58       2157.44    
  11  0.612266     -0.490588      -161.082       161.082       1509.02       1670.10    
  12  0.313777      -1.15907      -380.576       380.576       1345.29       1725.86    
  13  0.258526      -1.35276      -444.172       444.172       1853.06       2297.23    
  14  0.119298      -2.12613      -698.105       698.105       1322.33       2020.44    
  15  0.213331      -1.54491      -507.262       507.262       1956.20       2463.47    
  16  0.294218      -1.22343      -401.708       401.708       1645.25       2046.96    
  17  0.352988      -1.04132      -341.912       341.912       1869.96       2211.87    
  18  0.348706      -1.05353      -345.920       345.920       1619.43       1965.35    
  19  0.449249     -0.800179      -262.734       262.734       1953.34       2216.08    
  20  0.879121     -0.128833      -42.3016       42.3016       1822.31       1864.61    
  21  0.464081     -0.767695      -252.069       252.069       1916.51       2168.58    
  22  0.497582     -0.697995      -229.183       229.183       1598.76       1827.94    
  23  0.920207     -0.831566E-01  -27.3040       27.3040       2063.42       2090.72    
  24  0.811773     -0.208535      -68.4714       68.4714       1817.15       1885.62    
  25  0.190651      -1.65731      -544.169       544.169       2122.63       2666.80    
  26  0.645174     -0.438235      -143.892       143.892       2207.09       2350.99    
  27  0.668343     -0.402954      -132.308       132.308       2185.83       2318.14    
  28  0.765111     -0.267735      -87.9093       87.9093       1852.33       1940.23    
  29  0.991779     -0.825499E-02  -2.71048       2.71048       2188.28       2190.99    
  30  0.136888      -1.98859      -652.944       652.944       1249.11       1902.06    
  31  0.645145E-01  -2.74086      -899.948       899.948       2188.96       3088.91    
  32  0.408515E-01  -3.19781      -1049.98       1049.98       1814.84       2864.82    
  33  0.264109      -1.33140      -437.157       437.157       1494.30       1931.46    
  34  0.382737     -0.960407      -315.344       315.344       1837.29       2152.63    
  35  0.402738E-02  -5.51464      -1810.70       1810.70       2245.10       4055.80    
  36  0.318074      -1.14547      -376.109       376.109       2261.16       2637.27    
  37  0.245237      -1.40553      -461.499       461.499       2010.43       2471.93    
  38  0.519766     -0.654377      -214.861       214.861       2438.28       2653.14    
  39  0.255147      -1.36592      -448.492       448.492       2197.16       2645.65    
  40  0.833841     -0.181712      -59.6642       59.6642       2065.12       2124.79    
  41  0.696242E-01  -2.66464      -874.922       874.922       2213.55       3088.48    
  42  0.487295     -0.718886      -236.043       236.043       1859.89       2095.94    
  43  0.276229E-01  -3.58911      -1178.47       1178.47       2034.09       3212.56    
  44  0.638327     -0.448905      -147.396       147.396       2185.36       2332.75    
  45  0.206684      -1.57657      -517.657       517.657       1679.68       2197.34    
  46  0.736003     -0.306521      -100.645       100.645       1800.44       1901.08    
  47  0.217444E-01  -3.82840      -1257.03       1257.03       2330.37       3587.41    
  48  0.956929     -0.440260E-01  -14.4557       14.4557       2184.79       2199.24    
  49  0.883561     -0.123795      -40.6473       40.6473       2109.99       2150.64    
loop,thermsimp(1:2)       57   135.305       105.947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125       1350.59         68.11          1.20         39.77          1.42          0.04        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126       1263.56         68.09          1.18         39.60          1.70          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1263.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       57
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       58
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      125     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -932.157       932.157       1184.14       2116.30    
   2  0.104884      -2.25490      -740.386       740.386       1284.82       2025.20    
   3  0.784254     -0.243023      -79.7952       79.7952       1187.73       1267.52    
   4  0.813133     -0.206861      -67.9217       67.9217       1512.53       1580.45    
   5  0.490778     -0.711764      -233.704       233.704       1461.21       1694.91    
   6  0.168573      -1.78039      -584.580       584.580       1509.02       2093.60    
   7  0.450161     -0.798149      -262.068       262.068       1601.65       1863.72    
   8  0.828233     -0.188461      -61.8801       61.8801       1458.41       1520.29    
   9  0.994731     -0.528342E-02  -1.73478       1.73478       1345.29       1347.02    
  10  0.813340     -0.206606      -67.8380       67.8380       1601.24       1669.08    
  11  0.776133     -0.253432      -83.2130       83.2130       1598.76       1681.97    
  12  0.729556     -0.315319      -103.533       103.533       1822.31       1925.84    
  13  0.530451     -0.634028      -208.180       208.180       1817.15       2025.33    
  14  0.752564E-01  -2.58685      -849.380       849.380       1800.44       2649.82    
  15  0.918457     -0.850597E-01  -27.9289       27.9289       1249.11       1277.04    
  16  0.162642      -1.81621      -596.342       596.342       1785.78       2382.12    
  17  0.725851     -0.320411      -105.205       105.205       1494.30       1599.50    
  18  0.322292      -1.13230      -371.784       371.784       1852.33       2224.11    
  19  0.838064     -0.176661      -58.0057       58.0057       1619.43       1677.43    
  20  0.346062E-01  -3.36372      -1104.46       1104.46       1322.33       2426.79    
  21  0.442915     -0.814377      -267.396       267.396       1645.25       1912.65    
  22  0.143708      -1.93997      -636.980       636.980       2063.42       2700.40    
  23  0.940845     -0.609769E-01  -20.0215       20.0215       1859.89       1879.91    
  24  0.972503     -0.278816E-01  -9.15479       9.15479       2065.12       2074.28    
  25  0.291831      -1.23158      -404.383       404.383       2109.99       2514.37    
  26  0.211976      -1.55128      -509.356       509.356       1837.29       2346.64    
  27  0.695427     -0.363229      -119.264       119.264       1671.58       1790.84    
  28  0.982540E-01  -2.32020      -761.825       761.825       1916.51       2678.33    
  29  0.730742     -0.313695      -103.000       103.000       2188.28       2291.28    
  30  0.417794     -0.872766      -286.568       286.568       1679.68       1966.25    
  31  0.868385     -0.141121      -46.3362       46.3362       2184.79       2231.12    
  32  0.300897      -1.20099      -394.337       394.337       1869.96       2264.29    
  33  0.917219     -0.864093E-01  -28.3720       28.3720       1953.34       1981.71    
  34  0.304394      -1.18943      -390.544       390.544       1853.06       2243.60    
  35  0.856500     -0.154901      -50.8611       50.8611       2185.83       2236.69    
  36  0.310652      -1.16908      -383.862       383.862       2185.36       2569.22    
  37  0.846275     -0.166911      -54.8044       54.8044       2207.09       2261.90    
  38  0.206825      -1.57588      -517.433       517.433       1956.20       2473.64    
  39  0.606376     -0.500256      -164.256       164.256       2010.43       2174.68    
  40  0.840015     -0.174336      -57.2422       57.2422       2261.16       2318.40    
  41  0.348835      -1.05315      -345.798       345.798       2197.16       2542.96    
  42  0.857325     -0.153939      -50.5450       50.5450       2438.28       2488.82    
  43  0.308035E-01  -3.48013      -1142.68       1142.68       2122.63       3265.31    
  44  0.400632     -0.914711      -300.341       300.341       1814.84       2115.18    
  45  0.242237      -1.41784      -465.539       465.539       2213.55       2679.09    
  46  0.407771     -0.897050      -294.542       294.542       2188.96       2483.51    
  47  0.430691     -0.842364      -276.586       276.586       2034.09       2310.67    
  48  0.415503     -0.878266      -288.374       288.374       2330.37       2618.75    
  49  0.593575     -0.521591      -171.262       171.262       1263.56       1434.82    
loop,thermsimp(1:2)       58   932.157       740.386    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       1742.63         68.06          1.19         39.70          1.81          0.05        110.81
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1742.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       58
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       59
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      126     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -363.992       363.992       1187.73       1551.72    
   2  0.939148     -0.627826E-01  -20.6143       20.6143       1249.11       1269.73    
   3  0.130906      -2.03328      -667.616       667.616       1345.29       2012.90    
   4  0.664370     -0.408916      -134.265       134.265       1263.56       1397.83    
   5  0.490908     -0.711498      -233.617       233.617       1458.41       1692.02    
   6  0.711731     -0.340055      -111.655       111.655       1512.53       1624.18    
   7  0.676080     -0.391444      -128.529       128.529       1494.30       1622.83    
   8  0.611139     -0.492432      -161.687       161.687       1601.24       1762.93    
   9  0.614246     -0.487359      -160.022       160.022       1619.43       1779.45    
  10  0.988045     -0.120275E-01  -3.94918       3.94918       1598.76       1602.71    
  11  0.232883      -1.45722      -478.470       478.470       1461.21       1939.68    
  12  0.450825     -0.796675      -261.584       261.584       1671.58       1933.16    
  13  0.493319     -0.706599      -232.008       232.008       1601.65       1833.66    
  14  0.191184      -1.65452      -543.253       543.253       1859.89       2403.15    
  15  0.894136     -0.111897      -36.7409       36.7409       1645.25       1682.00    
  16  0.391751     -0.937128      -307.701       307.701       1822.31       2130.01    
  17  0.236278      -1.44275      -473.719       473.719       1679.68       2153.40    
  18  0.496874E-01  -3.00200      -985.692       985.692       1953.34       2939.03    
  19  0.784524     -0.242678      -79.6822       79.6822       1284.82       1364.50    
  20  0.292328      -1.22988      -403.825       403.825       1817.15       2220.97    
  21  0.832247E-01  -2.48621      -816.334       816.334       2065.12       2881.46    
  22  0.423133     -0.860069      -282.399       282.399       1509.02       1791.42    
  23  0.234472      -1.45042      -476.237       476.237       1814.84       2291.08    
  24  0.868463     -0.141031      -46.3066       46.3066       1184.14       1230.45    
  25  0.122969      -2.09582      -688.152       688.152       2010.43       2698.58    
  26  0.811771     -0.208537      -68.4720       68.4720       1852.33       1920.80    
  27  0.786834     -0.239738      -78.7168       78.7168       2184.79       2263.51    
  28  0.163144      -1.81312      -595.328       595.328       2185.83       2781.16    
  29  0.571103     -0.560186      -183.934       183.934       1853.06       2036.99    
  30  0.769982     -0.261388      -85.8252       85.8252       2207.09       2292.92    
  31  0.471769     -0.751265      -246.674       246.674       1869.96       2116.63    
  32  0.584935     -0.536254      -176.076       176.076       2188.28       2364.36    
  33  0.416140     -0.876734      -287.871       287.871       2034.09       2321.96    
  34  0.106525E-01  -4.54196      -1491.33       1491.33       2261.16       3752.49    
  35  0.595424     -0.518482      -170.241       170.241       1837.29       2007.53    
  36  0.302400      -1.19600      -392.702       392.702       1785.78       2178.48    
  37  0.629701     -0.462510      -151.863       151.863       1322.33       1474.19    
  38  0.939026E-01  -2.36550      -776.699       776.699       1956.20       2732.90    
  39  0.911727     -0.924151E-01  -30.3440       30.3440       2188.96       2219.31    
  40  0.289502      -1.23959      -407.014       407.014       2438.28       2845.29    
  41  0.326571      -1.11911      -367.453       367.453       2109.99       2477.44    
  42  0.972366     -0.280231E-01  -9.20122       9.20122       2197.16       2206.36    
  43  0.823413     -0.194297      -63.7964       63.7964       2185.36       2249.15    
  44  0.790717     -0.234815      -77.1002       77.1002       2330.37       2407.47    
  45  0.167922      -1.78426      -585.851       585.851       1800.44       2386.29    
  46  0.804665     -0.217329      -71.3589       71.3589       1916.51       1987.87    
  47  0.154714      -1.86617      -612.749       612.749       2213.55       2826.30    
  48  0.240456      -1.42522      -467.963       467.963       2063.42       2531.38    
  49  0.351787      -1.04473      -343.032       343.032       1742.63       2085.66    
loop,thermsimp(1:2)       59   363.992       20.6143    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128       2311.21         67.98          1.18         39.62          1.53          0.05        110.37
Just calling func    0   0        110.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2311.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       59
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       60
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      127     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -390.822       390.822       1184.14       1574.96    
   2  0.843344     -0.170380      -55.9433       55.9433       1249.11       1305.05    
   3  0.457815     -0.781289      -256.532       256.532       1284.82       1541.35    
   4  0.933709     -0.685899E-01  -22.5211       22.5211       1263.56       1286.08    
   5  0.887159     -0.119731      -39.3129       39.3129       1322.33       1361.64    
   6  0.786211     -0.240530      -78.9768       78.9768       1187.73       1266.70    
   7  0.794803     -0.229661      -75.4080       75.4080       1598.76       1674.17    
   8  0.573435E-01  -2.85870      -938.638       938.638       1494.30       2432.94    
   9  0.647106     -0.435245      -142.910       142.910       1512.53       1655.44    
  10  0.110118      -2.20620      -724.396       724.396       1645.25       2369.65    
  11  0.339548      -1.08014      -354.658       354.658       1458.41       1813.07    
  12  0.635246     -0.453742      -148.984       148.984       1601.24       1750.23    
  13  0.488392     -0.716638      -235.304       235.304       1619.43       1854.73    
  14  0.602571     -0.506549      -166.323       166.323       1509.02       1675.34    
  15  0.710041     -0.342433      -112.436       112.436       1601.65       1714.09    
  16  0.585763     -0.534840      -175.612       175.612       1852.33       2027.94    
  17  0.288010      -1.24476      -408.710       408.710       1671.58       2080.29    
  18  0.455238     -0.786934      -258.386       258.386       1461.21       1719.59    
  19  0.723984     -0.322986      -106.051       106.051       1916.51       2022.56    
  20  0.554067     -0.590470      -193.878       193.878       1837.29       2031.17    
  21  0.646516     -0.436157      -143.210       143.210       1345.29       1488.50    
  22  0.271985      -1.30201      -427.507       427.507       1853.06       2280.56    
  23  0.901636E-02  -4.70871      -1546.08       1546.08       1742.63       3288.71    
  24  0.383616     -0.958114      -314.592       314.592       1869.96       2184.55    
  25  0.443516     -0.813022      -266.952       266.952       1822.31       2089.26    
  26  0.223023      -1.50048      -492.675       492.675       1679.68       2172.36    
  27  0.123255      -2.09350      -687.389       687.389       1785.78       2473.17    
  28  0.817485     -0.201523      -66.1690       66.1690       2197.16       2263.33    
  29  0.333893      -1.09693      -360.172       360.172       2188.96       2549.14    
  30  0.867877     -0.141706      -46.5283       46.5283       1817.15       1863.68    
  31  0.365747      -1.00581      -330.254       330.254       2185.36       2515.61    
  32  0.429445     -0.845262      -277.537       277.537       2184.79       2462.33    
  33  0.856620     -0.154761      -50.8150       50.8150       1814.84       1865.65    
  34  0.729532     -0.315352      -103.544       103.544       2207.09       2310.64    
  35  0.315845      -1.15251      -378.419       378.419       2034.09       2412.51    
  36  0.547596     -0.602217      -197.735       197.735       2188.28       2386.02    
  37  0.752130     -0.284846      -93.5278       93.5278       1800.44       1893.97    
  38  0.806451     -0.215112      -70.6309       70.6309       1859.89       1930.52    
  39  0.618613     -0.480275      -157.696       157.696       2330.37       2488.07    
  40  0.630350     -0.461480      -151.524       151.524       2109.99       2261.51    
  41  0.251741      -1.37935      -452.904       452.904       2063.42       2516.32    
  42  0.846504     -0.166640      -54.7153       54.7153       2010.43       2065.14    
  43  0.830791     -0.185377      -60.8674       60.8674       1956.20       2017.07    
  44  0.566838     -0.567681      -186.395       186.395       2185.83       2372.23    
  45  0.499450E-01  -2.99683      -983.995       983.995       2213.55       3197.55    
  46  0.976301     -0.239838E-01  -7.87497       7.87497       2438.28       2446.15    
  47  0.401049     -0.913672      -299.999       299.999       2065.12       2365.12    
  48  0.709931E-01  -2.64517      -868.528       868.528       1953.34       2821.87    
  49  0.920370E-02  -4.68815      -1539.33       1539.33       2311.21       3850.54    
loop,thermsimp(1:2)       60   390.822       55.9433    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       2261.16         68.25          1.21         39.66          1.77          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2261.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       60
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       61
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      128     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -61.3062       61.3062       1187.73       1249.03    
   2  0.735850     -0.306729      -100.713       100.713       1263.56       1364.27    
   3  0.828786     -0.187793      -61.6609       61.6609       1249.11       1310.77    
   4  0.592078     -0.524118      -172.091       172.091       1322.33       1494.42    
   5  0.691797E-01  -2.67105      -877.025       877.025       1345.29       2222.31    
   6  0.772335     -0.258337      -84.8236       84.8236       1284.82       1369.64    
   7  0.504563     -0.684063      -224.609       224.609       1184.14       1408.75    
   8  0.700615     -0.355797      -116.824       116.824       1512.53       1629.35    
   9  0.764596     -0.268408      -88.1303       88.1303       1598.76       1686.89    
  10  0.459614     -0.777368      -255.245       255.245       1509.02       1764.26    
  11  0.931193     -0.712882E-01  -23.4071       23.4071       1601.65       1625.06    
  12  0.502482E-01  -2.99078      -982.007       982.007       1461.21       2443.21    
  13  0.498197     -0.696760      -228.777       228.777       1601.24       1830.02    
  14  0.551534E-01  -2.89764      -951.424       951.424       1458.41       2409.83    
  15  0.172209      -1.75905      -577.574       577.574       1619.43       2197.00    
  16  0.238868E-01  -3.73443      -1226.18       1226.18       1817.15       3043.33    
  17  0.699366     -0.357581      -117.410       117.410       1814.84       1932.25    
  18  0.764093     -0.269066      -88.3465       88.3465       1800.44       1888.79    
  19  0.465633     -0.764357      -250.973       250.973       1859.89       2110.87    
  20  0.209906      -1.56110      -512.578       512.578       1956.20       2468.78    
  21  0.216891      -1.52836      -501.829       501.829       1916.51       2418.34    
  22  0.795854E-01  -2.53092      -831.016       831.016       1852.33       2683.34    
  23  0.701683     -0.354273      -116.324       116.324       1837.29       1953.61    
  24  0.574425     -0.554385      -182.029       182.029       2010.43       2192.46    
  25  0.674968     -0.393090      -129.069       129.069       1671.58       1800.65    
  26  0.684189     -0.379521      -124.614       124.614       1822.31       1946.92    
  27  0.541862     -0.612745      -201.191       201.191       1679.68       1880.87    
  28  0.668027     -0.403426      -132.463       132.463       1869.96       2002.42    
  29  0.353251      -1.04058      -341.668       341.668       2109.99       2451.66    
  30  0.778708     -0.250119      -82.1254       82.1254       2197.16       2279.29    
  31  0.829283     -0.187194      -61.4642       61.4642       1853.06       1914.52    
  32  0.679297     -0.386697      -126.970       126.970       2207.09       2334.06    
  33  0.536301     -0.623060      -204.578       204.578       2065.12       2269.70    
  34  0.247738      -1.39538      -458.166       458.166       1645.25       2103.42    
  35  0.271399      -1.30416      -428.215       428.215       2185.83       2614.05    
  36  0.284124      -1.25835      -413.171       413.171       2188.28       2601.45    
  37  0.664442     -0.408808      -134.230       134.230       2034.09       2168.32    
  38  0.874508     -0.134094      -44.0289       44.0289       1494.30       1538.33    
  39  0.916444     -0.872538E-01  -28.6493       28.6493       2438.28       2466.93    
  40  0.295165      -1.22022      -400.653       400.653       2184.79       2585.44    
  41  0.242592      -1.41637      -465.059       465.059       1785.78       2250.84    
  42  0.396124     -0.926028      -304.057       304.057       2330.37       2634.43    
  43  0.509193E-01  -2.97751      -977.651       977.651       2185.36       3163.01    
  44  0.778911     -0.249858      -82.0396       82.0396       2063.42       2145.46    
  45  0.351009      -1.04694      -343.758       343.758       2188.96       2532.72    
  46  0.480934     -0.732025      -240.357       240.357       1953.34       2193.70    
  47  0.908579     -0.958731E-01  -31.4794       31.4794       2213.55       2245.03    
  48  0.898885     -0.106600      -35.0015       35.0015       1742.63       1777.63    
  49  0.561121     -0.577819      -189.724       189.724       2261.16       2450.89    
loop,thermsimp(1:2)       61   61.3062       100.713    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130       1345.10         68.20          1.23         39.70          1.64          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131       2473.01         68.05          1.16         40.26          1.37          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1345.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       61
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       62
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      130     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -28.3088       28.3088       1187.73       1216.03    
   2  0.899579E-01  -2.40841      -790.790       790.790       1249.11       2039.90    
   3  0.997625     -0.237830E-02 -0.780903      0.780903       1263.56       1264.34    
   4  0.224083      -1.49574      -491.118       491.118       1284.82       1775.93    
   5  0.120769      -2.11388      -694.081       694.081       1184.14       1878.22    
   6  0.302676E-01  -3.49768      -1148.44       1148.44       1322.33       2470.77    
   7  0.315161      -1.15467      -379.130       379.130       1494.30       1873.43    
   8  0.155895      -1.85857      -610.253       610.253       1601.65       2211.90    
   9  0.467639     -0.760060      -249.562       249.562       1512.53       1762.09    
  10  0.277823      -1.28077      -420.534       420.534       1598.76       2019.29    
  11  0.712282     -0.339281      -111.401       111.401       1509.02       1620.42    
  12  0.929560     -0.730437E-01  -23.9835       23.9835       1742.63       1766.61    
  13  0.499024     -0.695101      -228.233       228.233       1671.58       1899.81    
  14  0.940347     -0.615066E-01  -20.1954       20.1954       1601.24       1621.44    
  15  0.714006     -0.336864      -110.607       110.607       1679.68       1790.29    
  16  0.162603      -1.81644      -596.420       596.420       1800.44       2396.86    
  17  0.663729     -0.409881      -134.582       134.582       1853.06       1987.64    
  18  0.314148      -1.15789      -380.188       380.188       1814.84       2195.03    
  19  0.497386     -0.698388      -229.312       229.312       1822.31       2051.62    
  20  0.368387     -0.998622      -327.892       327.892       1837.29       2165.18    
  21  0.326342      -1.11981      -367.683       367.683       1869.96       2237.64    
  22  0.442952     -0.814294      -267.369       267.369       1645.25       1912.62    
  23  0.929694     -0.729000E-01  -23.9363       23.9363       1859.89       1883.83    
  24  0.945450E-01  -2.35868      -774.460       774.460       2063.42       2837.88    
  25  0.407158     -0.898555      -295.036       295.036       2034.09       2329.12    
  26  0.706679     -0.347179      -113.994       113.994       2010.43       2124.42    
  27  0.657848     -0.418781      -137.505       137.505       1953.34       2090.85    
  28  0.968040     -0.324817E-01  -10.6652       10.6652       1619.43       1630.09    
  29  0.330387      -1.10749      -363.638       363.638       1345.29       1708.92    
  30  0.756161     -0.279501      -91.7727       91.7727       2213.55       2305.33    
  31  0.307772      -1.17840      -386.920       386.920       1785.78       2172.70    
  32  0.759008E-01  -2.57833      -846.580       846.580       2065.12       2911.70    
  33  0.615618E-01  -2.78771      -915.331       915.331       2197.16       3112.49    
  34  0.545984     -0.605166      -198.703       198.703       2207.09       2405.80    
  35  0.339865      -1.07921      -354.352       354.352       1458.41       1812.76    
  36  0.816477     -0.202757      -66.5742       66.5742       1916.51       1983.08    
  37  0.932889     -0.694691E-01  -22.8098       22.8098       1461.21       1484.02    
  38  0.667042     -0.404902      -132.947       132.947       2261.16       2394.11    
  39  0.583049     -0.539484      -177.137       177.137       2109.99       2287.13    
  40  0.210192      -1.55973      -512.131       512.131       2438.28       2950.41    
  41  0.158846      -1.83982      -604.096       604.096       1956.20       2560.30    
  42  0.360401      -1.02054      -335.088       335.088       2188.96       2524.05    
  43  0.508154     -0.676971      -222.280       222.280       2184.79       2407.07    
  44  0.873303     -0.135473      -44.4818       44.4818       2188.28       2232.76    
  45  0.650524     -0.429977      -141.181       141.181       2185.83       2327.01    
  46  0.805601     -0.216166      -70.9770       70.9770       2330.37       2401.35    
  47  0.312590E-03  -8.07062      -2649.95       2649.95       1852.33       4502.27    
  48  0.892261     -0.113997      -37.4302       37.4302       1817.15       1854.58    
  49  0.504672     -0.683846      -224.537       224.537       1345.10       1569.64    
loop,thermsimp(1:2)       62   28.3088       790.790    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       2222.71         68.02          1.19         39.88          1.65          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2222.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       62
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       63
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      131     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -158.449       158.449       1187.73       1346.18    
   2  0.828850     -0.187716      -61.6354       61.6354       1263.56       1325.20    
   3  0.138898      -1.97402      -648.158       648.158       1461.21       2109.37    
   4  0.174947      -1.74327      -572.395       572.395       1345.10       1917.50    
   5  0.452367E-01  -3.09585      -1016.51       1016.51       1509.02       2525.52    
   6  0.982229     -0.179305E-01  -5.88737       5.88737       1601.24       1607.13    
   7  0.855728     -0.155803      -51.1571       51.1571       1619.43       1670.58    
   8  0.350750      -1.04768      -344.001       344.001       1345.29       1689.29    
   9  0.880054     -0.127772      -41.9533       41.9533       1512.53       1554.48    
  10  0.106511      -2.23950      -735.330       735.330       1742.63       2477.96    
  11  0.336060      -1.09047      -358.049       358.049       1284.82       1642.86    
  12  0.904819     -0.100020      -32.8411       32.8411       1679.68       1712.52    
  13  0.765597     -0.267099      -87.7005       87.7005       1458.41       1546.11    
  14  0.551789     -0.594589      -195.230       195.230       1817.15       2012.38    
  15  0.832435     -0.183400      -60.2183       60.2183       1494.30       1554.52    
  16  0.353494      -1.03989      -341.442       341.442       1184.14       1525.58    
  17  0.510104     -0.673140      -221.022       221.022       1859.89       2080.91    
  18  0.523162     -0.647863      -212.723       212.723       1671.58       1884.30    
  19  0.953043     -0.480957E-01  -15.7920       15.7920       1645.25       1661.05    
  20  0.267001E-01  -3.62309      -1189.62       1189.62       1916.51       3106.13    
  21  0.280924      -1.26967      -416.890       416.890       1853.06       2269.95    
  22  0.956868     -0.440901E-01  -14.4768       14.4768       1598.76       1613.23    
  23  0.779725     -0.248814      -81.6967       81.6967       1249.11       1330.81    
  24  0.901061     -0.104183      -34.2079       34.2079       1822.31       1856.52    
  25  0.533391     -0.628501      -206.365       206.365       1953.34       2159.71    
  26  0.642536     -0.442333      -145.238       145.238       2010.43       2155.67    
  27  0.520565E-01  -2.95543      -970.398       970.398       1837.29       2807.69    
  28  0.330080      -1.10842      -363.944       363.944       1785.78       2149.72    
  29  0.280801      -1.27011      -417.034       417.034       1814.84       2231.87    
  30  0.144013      -1.93785      -636.283       636.283       1601.65       2237.93    
  31  0.201537      -1.60178      -525.936       525.936       2188.28       2714.22    
  32  0.920188     -0.831777E-01  -27.3110       27.3110       1869.96       1897.27    
  33  0.747222     -0.291393      -95.6773       95.6773       2109.99       2205.67    
  34  0.697959     -0.359595      -118.071       118.071       2213.55       2331.63    
  35  0.492949     -0.707349      -232.254       232.254       2185.83       2418.09    
  36  0.378001     -0.972857      -319.433       319.433       2034.09       2353.52    
  37  0.936484     -0.656225E-01  -21.5468       21.5468       2261.16       2282.71    
  38  0.458232     -0.780381      -256.234       256.234       1800.44       2056.67    
  39  0.286796      -1.24898      -410.098       410.098       2330.37       2740.47    
  40  0.524458     -0.645389      -211.910       211.910       2207.09       2419.00    
  41  0.126679      -2.06610      -678.393       678.393       2184.79       2863.18    
  42  0.645270     -0.438086      -143.843       143.843       1322.33       1466.17    
  43  0.996049     -0.395919E-02  -1.29998       1.29998       2188.96       2190.26    
  44  0.470695     -0.753545      -247.422       247.422       1956.20       2203.63    
  45  0.783048     -0.244561      -80.3003       80.3003       2063.42       2143.72    
  46  0.682425     -0.382103      -125.461       125.461       2065.12       2190.58    
  47  0.623779     -0.471960      -154.965       154.965       2438.28       2593.24    
  48  0.138146      -1.97945      -649.941       649.941       2197.16       2847.10    
  49  0.317697      -1.14666      -376.498       376.498       2222.71       2599.20    
loop,thermsimp(1:2)       63   158.449       61.6354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133       1428.51         67.95          1.18         39.63          1.97          0.04        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1428.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       63
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       64
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      132     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -66.5455       66.5455       1263.56       1330.11    
   2  0.209930      -1.56098      -512.540       512.540       1249.11       1761.65    
   3  0.710991     -0.341096      -111.997       111.997       1187.73       1299.72    
   4  0.967365     -0.331789E-01  -10.8941       10.8941       1322.33       1333.23    
   5  0.650635E-01  -2.73239      -897.167       897.167       1184.14       2081.31    
   6  0.578340     -0.547593      -179.799       179.799       1458.41       1638.21    
   7  0.928890E-01  -2.37635      -780.262       780.262       1512.53       2292.79    
   8  0.486974     -0.719546      -236.259       236.259       1494.30       1730.56    
   9  0.560625     -0.578703      -190.014       190.014       1601.24       1791.26    
  10  0.552834     -0.592698      -194.609       194.609       1598.76       1793.37    
  11  0.744529E-01  -2.59759      -852.904       852.904       1284.82       2137.72    
  12  0.937600     -0.644318E-01  -21.1559       21.1559       1645.25       1666.41    
  13  0.154459      -1.86783      -613.291       613.291       1619.43       2232.72    
  14  0.186893E-02  -6.28239      -2062.79       2062.79       1345.29       3408.07    
  15  0.250797      -1.38311      -454.137       454.137       1679.68       2133.82    
  16  0.924847E-01  -2.38071      -781.694       781.694       1822.31       2604.00    
  17  0.476680     -0.740911      -243.274       243.274       1671.58       1914.85    
  18  0.266527      -1.32228      -434.163       434.163       1869.96       2304.12    
  19  0.369755     -0.994916      -326.675       326.675       1345.10       1671.78    
  20  0.595561     -0.518252      -170.165       170.165       1817.15       1987.31    
  21  0.636070     -0.452447      -148.559       148.559       1800.44       1949.00    
  22  0.447294     -0.804540      -264.167       264.167       1859.89       2124.06    
  23  0.964945     -0.356839E-01  -11.7166       11.7166       1461.21       1472.92    
  24  0.752421     -0.284460      -93.4008       93.4008       2063.42       2156.82    
  25  0.705556     -0.348769      -114.516       114.516       1785.78       1900.29    
  26  0.943467     -0.581939E-01  -19.1077       19.1077       2010.43       2029.54    
  27  0.272564      -1.29988      -426.809       426.809       1953.34       2380.15    
  28  0.215815      -1.53333      -503.462       503.462       2188.96       2692.43    
  29  0.756955     -0.278452      -91.4282       91.4282       2065.12       2156.55    
  30  0.538381     -0.619189      -203.307       203.307       1956.20       2159.51    
  31  0.182967      -1.69845      -557.677       557.677       2109.99       2667.67    
  32  0.644758     -0.438881      -144.104       144.104       1814.84       1958.94    
  33  0.939477     -0.624320E-01  -20.4992       20.4992       1601.65       1622.15    
  34  0.663186     -0.410699      -134.851       134.851       1853.06       1987.91    
  35  0.795014     -0.229396      -75.3210       75.3210       2261.16       2336.48    
  36  0.630792     -0.460779      -151.294       151.294       2213.55       2364.85    
  37  0.151039      -1.89022      -620.643       620.643       2034.09       2654.73    
  38  0.668306     -0.403009      -132.326       132.326       2185.83       2318.16    
  39  0.683820     -0.380061      -124.791       124.791       2207.09       2331.89    
  40  0.122229      -2.10186      -690.134       690.134       1742.63       2432.76    
  41  0.664453     -0.408791      -134.224       134.224       1509.02       1643.24    
  42  0.548687     -0.600228      -197.082       197.082       2438.28       2635.36    
  43  0.931535     -0.709210E-01  -23.2865       23.2865       2222.71       2245.99    
  44  0.139742      -1.96796      -646.169       646.169       2188.28       2834.45    
  45  0.429142     -0.845967      -277.769       277.769       2330.37       2608.14    
  46  0.531147     -0.632717      -207.749       207.749       1837.29       2045.04    
  47  0.575558     -0.552416      -181.383       181.383       2197.16       2378.54    
  48  0.336537      -1.08905      -357.583       357.583       2184.79       2542.37    
  49  0.324486      -1.12551      -369.556       369.556       1428.51       1798.07    
loop,thermsimp(1:2)       64   66.5455       512.540    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134       4220.13         67.88          1.14         39.84          1.73          0.05        110.63
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135       2347.60         68.06          1.18         39.56          1.83          0.05        110.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   2347.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       64
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       65
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      134     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -328.664       328.664       1187.73       1516.39    
   2  0.298218      -1.20993      -397.274       397.274       1263.56       1660.83    
   3  0.374092     -0.983254      -322.846       322.846       1322.33       1645.18    
   4  0.417366     -0.873791      -286.905       286.905       1461.21       1748.11    
   5  0.299382      -1.20604      -395.996       395.996       1601.65       1997.64    
   6  0.373029     -0.986099      -323.780       323.780       1458.41       1782.19    
   7  0.628224     -0.464858      -152.634       152.634       1509.02       1661.65    
   8  0.111397      -2.19465      -720.603       720.603       1645.25       2365.86    
   9  0.983555     -0.165818E-01  -5.44454       5.44454       1345.10       1350.55    
  10  0.394578     -0.929938      -305.340       305.340       1494.30       1799.64    
  11  0.410639     -0.890042      -292.241       292.241       1249.11       1541.35    
  12  0.700680     -0.355705      -116.794       116.794       1601.24       1718.04    
  13  0.223946      -1.49635      -491.319       491.319       1598.76       2090.08    
  14  0.651113E-01  -2.73166      -896.925       896.925       1428.51       2325.44    
  15  0.704010     -0.350963      -115.237       115.237       1785.78       1901.02    
  16  0.172411      -1.75787      -577.188       577.188       1671.58       2248.77    
  17  0.567412     -0.566670      -186.063       186.063       1800.44       1986.50    
  18  0.186334      -1.68021      -551.689       551.689       1814.84       2366.53    
  19  0.677524     -0.389310      -127.828       127.828       1817.15       1944.98    
  20  0.362270      -1.01537      -333.390       333.390       1853.06       2186.45    
  21  0.603880     -0.504381      -165.611       165.611       2010.43       2176.04    
  22  0.782208     -0.245635      -80.6529       80.6529       1837.29       1917.94    
  23  0.129808      -2.04170      -670.382       670.382       1184.14       1854.52    
  24  0.284816      -1.25591      -412.372       412.372       1859.89       2272.27    
  25  0.246930      -1.39865      -459.240       459.240       1679.68       2138.92    
  26  0.256917      -1.35900      -446.221       446.221       1284.82       1731.04    
  27  0.240545      -1.42485      -467.842       467.842       2065.12       2532.96    
  28  0.218018      -1.52318      -500.128       500.128       2063.42       2563.55    
  29  0.235583E-01  -3.74828      -1230.73       1230.73       1956.20       3186.93    
  30  0.114660      -2.16578      -711.123       711.123       1619.43       2330.55    
  31  0.119129      -2.12755      -698.570       698.570       2222.71       2921.28    
  32  0.471707     -0.751398      -246.717       246.717       1512.53       1759.25    
  33  0.607413     -0.498546      -163.695       163.695       1869.96       2033.65    
  34  0.568731     -0.564347      -185.300       185.300       2185.83       2371.13    
  35  0.587492     -0.531893      -174.644       174.644       2207.09       2381.74    
  36  0.411259     -0.888533      -291.745       291.745       2261.16       2552.91    
  37  0.836192     -0.178897      -58.7397       58.7397       2213.55       2272.29    
  38  0.152977      -1.87747      -616.456       616.456       2197.16       2813.62    
  39  0.941831     -0.599291E-01  -19.6774       19.6774       1953.34       1973.02    
  40  0.936595     -0.655045E-01  -21.5081       21.5081       1742.63       1764.14    
  41  0.856621     -0.154759      -50.8144       50.8144       2184.79       2235.60    
  42  0.484786     -0.724047      -237.737       237.737       1822.31       2060.05    
  43  0.188261      -1.66993      -548.311       548.311       2330.37       2878.68    
  44  0.957606     -0.433189E-01  -14.2235       14.2235       2438.28       2452.50    
  45  0.234891      -1.44863      -475.651       475.651       2034.09       2509.74    
  46  0.758920     -0.275858      -90.5766       90.5766       2109.99       2200.57    
  47  0.135340      -1.99997      -656.679       656.679       2188.96       2845.64    
  48  0.779121E-01  -2.55217      -837.993       837.993       2188.28       3026.28    
  49  0.573767     -0.555531      -182.406       182.406       2347.60       2530.01    
loop,thermsimp(1:2)       65   328.664       397.274    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136       1320.29         68.12          1.21         39.57          1.88          0.05        110.84
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137       1432.76         68.09          1.19         39.66          1.78          0.05        110.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1320.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       65
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       66
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      136     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -448.086       448.086       1345.10       1793.19    
   2  0.513427E-01  -2.96923      -974.932       974.932       1187.73       2162.66    
   3  0.288453      -1.24322      -408.206       408.206       1249.11       1657.32    
   4  0.107044      -2.23452      -733.691       733.691       1322.33       2056.02    
   5  0.756779     -0.278684      -91.5043       91.5043       1263.56       1355.06    
   6  0.333762      -1.09733      -360.302       360.302       1509.02       1869.32    
   7  0.270335      -1.30809      -429.506       429.506       1601.24       2030.75    
   8  0.666278E-01  -2.70863      -889.365       889.365       1284.82       2174.18    
   9  0.517510     -0.658727      -216.289       216.289       1461.21       1677.50    
  10  0.719680     -0.328949      -108.009       108.009       1512.53       1620.54    
  11  0.401542     -0.912442      -299.596       299.596       1742.63       2042.23    
  12  0.408125     -0.896181      -294.256       294.256       1458.41       1752.66    
  13  0.481086     -0.731710      -240.253       240.253       1494.30       1734.55    
  14  0.166952E-01  -4.09263      -1343.79       1343.79       1184.14       2527.93    
  15  0.913266     -0.907286E-01  -29.7903       29.7903       1785.78       1815.57    
  16  0.972084     -0.283134E-01  -9.29656       9.29656       1837.29       1846.59    
  17  0.889421     -0.117184      -38.4769       38.4769       1817.15       1855.62    
  18  0.171754      -1.76169      -578.443       578.443       1953.34       2531.78    
  19  0.925876     -0.770155E-01  -25.2876       25.2876       1800.44       1825.73    
  20  0.992897     -0.712866E-02  -2.34066       2.34066       1601.65       1603.99    
  21  0.118575E-01  -4.43479      -1456.14       1456.14       1869.96       3326.10    
  22  0.492413     -0.708438      -232.612       232.612       1822.31       2054.92    
  23  0.952433     -0.487360E-01  -16.0022       16.0022       1598.76       1614.76    
  24  0.591826     -0.524543      -172.231       172.231       1679.68       1851.91    
  25  0.762199     -0.271548      -89.1612       89.1612       2010.43       2099.59    
  26  0.613492     -0.488588      -160.425       160.425       1853.06       2013.48    
  27  0.134863      -2.00350      -657.838       657.838       2109.99       2767.83    
  28  0.633670     -0.456227      -149.800       149.800       2184.79       2334.59    
  29  0.829625     -0.186782      -61.3288       61.3288       1671.58       1732.91    
  30  0.148219      -1.90906      -626.831       626.831       1859.89       2486.72    
  31  0.198093      -1.61902      -531.596       531.596       2213.55       2745.15    
  32  0.321318      -1.13532      -372.777       372.777       1428.51       1801.29    
  33  0.475408     -0.743582      -244.151       244.151       1619.43       1863.58    
  34  0.196520      -1.62699      -534.214       534.214       1645.25       2179.47    
  35  0.637413     -0.450337      -147.866       147.866       1814.84       1962.70    
  36  0.596751     -0.516255      -169.510       169.510       2185.83       2355.34    
  37  0.351361      -1.04594      -343.430       343.430       2207.09       2550.52    
  38  0.111764      -2.19136      -719.522       719.522       2438.28       3157.80    
  39  0.213579      -1.54375      -506.882       506.882       2034.09       2540.97    
  40  0.799647     -0.223585      -73.4131       73.4131       2347.60       2421.01    
  41  0.670682     -0.399460      -131.161       131.161       2065.12       2196.28    
  42  0.104235      -2.26111      -742.423       742.423       2261.16       3003.59    
  43  0.607160E-01  -2.80155      -919.874       919.874       2063.42       2983.29    
  44  0.462312     -0.771516      -253.323       253.323       2197.16       2450.48    
  45  0.269658      -1.31060      -430.328       430.328       2188.96       2619.29    
  46  0.678606     -0.387714      -127.304       127.304       2330.37       2457.68    
  47  0.669051     -0.401895      -131.960       131.960       2222.71       2354.67    
  48  0.551912     -0.594367      -195.157       195.157       2188.28       2383.44    
  49  0.116070E-01  -4.45614      -1463.15       1463.15       1320.29       2783.44    
loop,thermsimp(1:2)       66   448.086       974.932    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138       1246.59         68.23          1.21         39.52          1.81          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139       1422.41         67.94          1.17         39.84          1.67          0.05        110.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1246.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       66
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       67
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      138     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -397.610       397.610       1263.56       1661.17    
   2  0.840396     -0.173882      -57.0931       57.0931       1601.65       1658.74    
   3  0.165782      -1.79708      -590.062       590.062       1598.76       2188.82    
   4  0.516202E-01  -2.96384      -973.162       973.162       1512.53       2485.69    
   5  0.163201      -1.81278      -595.215       595.215       1249.11       1844.33    
   6  0.201529      -1.60182      -525.949       525.949       1461.21       1987.16    
   7  0.791805     -0.233441      -76.6490       76.6490       1671.58       1748.23    
   8  0.306466      -1.18265      -388.316       388.316       1494.30       1882.62    
   9  0.625963     -0.468465      -153.818       153.818       1458.41       1612.23    
  10  0.255827      -1.36325      -447.618       447.618       1345.10       1792.72    
  11  0.275269      -1.29001      -423.567       423.567       1428.51       1852.08    
  12  0.546374     -0.604451      -198.468       198.468       1785.78       1984.25    
  13  0.738275E-01  -2.60602      -855.674       855.674       1800.44       2656.11    
  14  0.459460     -0.777704      -255.355       255.355       1837.29       2092.64    
  15  0.245891      -1.40287      -460.624       460.624       1679.68       2140.30    
  16  0.818144E-01  -2.50330      -821.946       821.946       1817.15       2639.09    
  17  0.791963     -0.233241      -76.5835       76.5835       1619.43       1696.01    
  18  0.652560     -0.426852      -140.155       140.155       1509.02       1649.17    
  19  0.743237     -0.296740      -97.4329       97.4329       1814.84       1912.27    
  20  0.146095      -1.92350      -631.571       631.571       1853.06       2484.63    
  21  0.747148     -0.291492      -95.7099       95.7099       1601.24       1696.95    
  22  0.935024E-01  -2.36977      -778.101       778.101       1742.63       2520.73    
  23  0.924202     -0.788243E-01  -25.8816       25.8816       1822.31       1848.19    
  24  0.193934      -1.64024      -538.563       538.563       1322.33       1860.89    
  25  0.112499      -2.18481      -717.370       717.370       2010.43       2727.80    
  26  0.609079     -0.495807      -162.796       162.796       1187.73       1350.52    
  27  0.387822     -0.947210      -311.011       311.011       1284.82       1595.83    
  28  0.151976      -1.88403      -618.613       618.613       1645.25       2263.87    
  29  0.820125     -0.198299      -65.1103       65.1103       2065.12       2130.23    
  30  0.100865      -2.29397      -753.213       753.213       2184.79       2938.00    
  31  0.246930      -1.39865      -459.240       459.240       2222.71       2681.95    
  32  0.101973      -2.28305      -749.626       749.626       2185.83       2935.46    
  33  0.389401     -0.943145      -309.677       309.677       2188.28       2497.96    
  34  0.573635     -0.555762      -182.481       182.481       2347.60       2530.08    
  35  0.730896E-01  -2.61607      -858.973       858.973       2197.16       3056.13    
  36  0.260104      -1.34667      -442.173       442.173       2330.37       2772.55    
  37  0.562102     -0.576073      -189.150       189.150       1859.89       2049.04    
  38  0.159056      -1.83850      -603.662       603.662       1184.14       1787.80    
  39  0.779134E-02  -4.85474      -1594.03       1594.03       1953.34       3547.37    
  40  0.693208     -0.366425      -120.314       120.314       2034.09       2154.40    
  41  0.600279     -0.510361      -167.574       167.574       2207.09       2374.67    
  42  0.419387     -0.868962      -285.319       285.319       2188.96       2474.28    
  43  0.952036     -0.491524E-01  -16.1389       16.1389       2213.55       2229.69    
  44  0.613955     -0.487834      -160.178       160.178       2109.99       2270.17    
  45  0.842752     -0.171082      -56.1740       56.1740       1320.29       1376.47    
  46  0.733219     -0.310311      -101.889       101.889       2063.42       2165.31    
  47  0.776088     -0.253489      -83.2319       83.2319       2261.16       2344.39    
  48  0.965215     -0.354047E-01  -11.6249       11.6249       2438.28       2449.90    
  49  0.487812     -0.717826      -235.694       235.694       1246.59       1482.28    
loop,thermsimp(1:2)       67   397.610       57.0931    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       1585.46         68.23          1.19         39.89          1.41          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141       1897.63         68.21          1.13         39.86          1.59          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    1897.6        2.928     -3.632      4.913     -102.6     0.4046    
                       5.192    -0.1333     -99.70      3.936      2.285    

                       2.438     -1.113      2.064      7159.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.563      0.000      0.000      7000.      529.9    

                      -1.121     -7.338     -7.742     -7.313      11.29    

                      -2.689     -3.949      4017.      0.000      8612.    



                       2288.      6309.      8309.      272.7     -663.3    

                       5725.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.933     -1.608     -2.235     -2.214    -0.3807    

                     -0.3252      9.601      8.602    -0.1612E+05 -4.831    

                      0.3907E-02 -1.969      9.142      9.110    -0.1969E+05



                      -6.000     0.2675     0.2374E-01  8.930      9.130    

                     -0.1944E+05 -6.000    -0.8126    -0.5321      9.511    

                       9.491    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1585.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       67
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       68
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      140     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -1530.90       1530.90       1187.73       2718.63    
   2  0.714357     -0.336373      -110.446       110.446       1320.29       1430.74    
   3  0.997096     -0.290808E-02 -0.954854      0.954854       1246.59       1247.54    
   4  0.905437     -0.993373E-01  -32.6169       32.6169       1284.82       1317.43    
   5  0.307060      -1.18071      -387.681       387.681       1458.41       1846.09    
   6  0.179061      -1.72003      -564.762       564.762       1509.02       2073.78    
   7  0.384312     -0.956301      -313.996       313.996       1601.65       1915.65    
   8  0.901101     -0.104138      -34.1933       34.1933       1263.56       1297.75    
   9  0.606170     -0.500594      -164.367       164.367       1619.43       1783.79    
  10  0.515234     -0.663133      -217.736       217.736       1601.24       1818.98    
  11  0.639447     -0.447152      -146.820       146.820       1671.58       1818.40    
  12  0.820429     -0.197928      -64.9885       64.9885       1184.14       1249.13    
  13  0.521739     -0.650587      -213.617       213.617       1345.10       1558.72    
  14  0.767979     -0.263993      -86.6807       86.6807       1249.11       1335.79    
  15  0.530366     -0.634187      -208.232       208.232       1822.31       2030.54    
  16  0.732471     -0.311332      -102.224       102.224       1428.51       1530.74    
  17  0.440461     -0.819933      -269.221       269.221       1322.33       1591.55    
  18  0.595715     -0.517993      -170.080       170.080       1494.30       1664.38    
  19  0.407958     -0.896592      -294.391       294.391       1814.84       2109.23    
  20  0.544683     -0.607550      -199.486       199.486       1785.78       1985.26    
  21  0.611386E-01  -2.79461      -917.596       917.596       1461.21       2378.80    
  22  0.135041      -2.00218      -657.404       657.404       1859.89       2517.30    
  23  0.547242     -0.602864      -197.947       197.947       1837.29       2035.24    
  24  0.214436      -1.53975      -505.568       505.568       2065.12       2570.69    
  25  0.340220      -1.07816      -354.009       354.009       1679.68       2033.69    
  26  0.270394      -1.30787      -429.433       429.433       2034.09       2463.52    
  27  0.605229     -0.502149      -164.878       164.878       2063.42       2228.30    
  28  0.630206     -0.461709      -151.600       151.600       1598.76       1750.36    
  29  0.942476     -0.592449E-01  -19.4527       19.4527       2213.55       2233.01    
  30  0.293125      -1.22716      -402.931       402.931       1645.25       2048.19    
  31  0.526210     -0.642056      -210.816       210.816       2109.99       2320.80    
  32  0.972201     -0.281927E-01  -9.25691       9.25691       2261.16       2270.42    
  33  0.570000     -0.562119      -184.569       184.569       2207.09       2391.66    
  34  0.752945     -0.283763      -93.1722       93.1722       2438.28       2531.45    
  35  0.333005      -1.09960      -361.047       361.047       2188.96       2550.01    
  36  0.430444     -0.842939      -276.774       276.774       1853.06       2129.83    
  37  0.106505      -2.23957      -735.350       735.350       1512.53       2247.88    
  38  0.327953      -1.11488      -366.066       366.066       2188.28       2554.35    
  39  0.586631     -0.533359      -175.126       175.126       1742.63       1917.76    
  40  0.563274     -0.573989      -188.466       188.466       2347.60       2536.07    
  41  0.802100     -0.220522      -72.4071       72.4071       1817.15       1889.55    
  42  0.594871     -0.519411      -170.546       170.546       1800.44       1970.98    
  43  0.816066     -0.203261      -66.7395       66.7395       2222.71       2289.45    
  44  0.170795E-01  -4.06987      -1336.32       1336.32       2010.43       3346.75    
  45  0.554958     -0.588864      -193.350       193.350       2330.37       2523.72    
  46  0.674023     -0.394492      -129.529       129.529       2185.83       2315.36    
  47  0.371758     -0.989512      -324.901       324.901       2184.79       2509.69    
  48  0.309440      -1.17299      -385.145       385.145       2197.16       2582.30    
  49  0.182337      -1.70190      -558.809       558.809       1585.46       2144.27    
loop,thermsimp(1:2)       68   1530.90       110.446    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142       1398.81         67.88          1.16         39.61          2.04          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    143       1403.69         68.49          1.25         39.84          1.23          0.05        110.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1398.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       68
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       69
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      142     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -214.052       214.052       1246.59       1460.64    
   2  0.554375     -0.589913      -193.695       193.695       1184.14       1377.84    
   3  0.404373     -0.905418      -297.289       297.289       1263.56       1560.85    
   4  0.632877     -0.457478      -150.211       150.211       1284.82       1435.03    
   5  0.395261     -0.928209      -304.773       304.773       1249.11       1553.88    
   6  0.715068     -0.335378      -110.120       110.120       1320.29       1430.41    
   7  0.918313     -0.852174E-01  -27.9807       27.9807       1428.51       1456.50    
   8  0.529514E-01  -2.93838      -964.802       964.802       1345.10       2309.91    
   9  0.284219      -1.25801      -413.061       413.061       1322.33       1735.39    
  10  0.809402     -0.211460      -69.4318       69.4318       1494.30       1563.73    
  11  0.604758     -0.502928      -165.134       165.134       1598.76       1763.89    
  12  0.624772     -0.470369      -154.443       154.443       1619.43       1773.87    
  13  0.622683     -0.473718      -155.543       155.543       1671.58       1827.12    
  14  0.491656     -0.709976      -233.117       233.117       1601.24       1834.36    
  15  0.823484     -0.194211      -63.7681       63.7681       1458.41       1522.18    
  16  0.185629E-01  -3.98659      -1308.98       1308.98       1817.15       3126.12    
  17  0.911253     -0.929346E-01  -30.5146       30.5146       1601.65       1632.16    
  18  0.825116     -0.192231      -63.1181       63.1181       1742.63       1805.75    
  19  0.902913     -0.102129      -33.5337       33.5337       1800.44       1833.97    
  20  0.869925     -0.139348      -45.7543       45.7543       1785.78       1831.53    
  21  0.135445      -1.99919      -656.423       656.423       1822.31       2478.73    
  22  0.516840     -0.660022      -216.715       216.715       1679.68       1896.40    
  23  0.127583      -2.05899      -676.059       676.059       1837.29       2513.35    
  24  0.237062E-01  -3.74202      -1228.67       1228.67       1645.25       2873.93    
  25  0.456233     -0.784753      -257.669       257.669       1509.02       1766.69    
  26  0.547397     -0.602581      -197.854       197.854       1814.84       2012.69    
  27  0.231746E-02  -6.06728      -1992.16       1992.16       1853.06       3845.22    
  28  0.467213     -0.760969      -249.860       249.860       1585.46       1835.32    
  29  0.397333     -0.922981      -303.056       303.056       2063.42       2366.47    
  30  0.291343      -1.23325      -404.932       404.932       2213.55       2618.49    
  31  0.964262     -0.363922E-01  -11.9492       11.9492       1512.53       1524.48    
  32  0.260485      -1.34521      -441.692       441.692       2261.16       2702.85    
  33  0.868574     -0.140902      -46.2646       46.2646       2222.71       2268.97    
  34  0.832573     -0.183235      -60.1642       60.1642       2185.83       2246.00    
  35  0.240383      -1.42552      -468.063       468.063       2109.99       2578.05    
  36  0.878342     -0.129719      -42.5925       42.5925       1461.21       1503.80    
  37  0.168707      -1.77959      -584.320       584.320       2207.09       2791.41    
  38  0.348015      -1.05551      -346.571       346.571       2034.09       2380.66    
  39  0.846224     -0.166971      -54.8242       54.8242       2184.79       2239.61    
  40  0.842580     -0.171286      -56.2409       56.2409       1859.89       1916.13    
  41  0.230401      -1.46794      -481.989       481.989       2330.37       2812.36    
  42  0.441962     -0.816531      -268.104       268.104       2438.28       2706.38    
  43  0.772036     -0.258724      -84.9507       84.9507       2347.60       2432.55    
  44  0.970063     -0.303946E-01  -9.97990       9.97990       2188.96       2198.94    
  45  0.610535     -0.493419      -162.012       162.012       2188.28       2350.29    
  46  0.548201     -0.601114      -197.373       197.373       2065.12       2262.49    
  47  0.322533      -1.13155      -371.538       371.538       2197.16       2568.70    
  48  0.194318E-01  -3.94084      -1293.95       1293.95       1187.73       2481.68    
  49  0.219930      -1.51445      -497.260       497.260       1398.81       1896.07    
loop,thermsimp(1:2)       69   214.052       193.695    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144       1700.82         68.10          1.18         39.48          2.08          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    145       4106.37         68.02          1.12         39.46          2.32          0.05        110.98
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1700.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       69
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       70
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      145
neval,tstepnext:      144     145

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -465.621       465.621       1184.14       1649.76    
   2  0.384023     -0.957054      -314.244       314.244       1320.29       1634.54    
   3  0.672379     -0.396933      -130.331       130.331       1284.82       1415.15    
   4  0.204591      -1.58674      -520.998       520.998       1428.51       1949.51    
   5  0.145151      -1.92998      -633.698       633.698       1246.59       1880.28    
   6  0.235757      -1.44495      -474.443       474.443       1461.21       1935.65    
   7  0.882595     -0.124889      -41.0067       41.0067       1458.41       1499.41    
   8  0.215562      -1.53451      -503.847       503.847       1512.53       2016.38    
   9  0.248905      -1.39068      -456.623       456.623       1249.11       1705.73    
  10  0.695481     -0.363152      -119.239       119.239       1263.56       1382.80    
  11  0.515786     -0.662063      -217.385       217.385       1494.30       1711.68    
  12  0.956817     -0.441428E-01  -14.4941       14.4941       1601.65       1616.14    
  13  0.256477      -1.36072      -446.784       446.784       1322.33       1769.11    
  14  0.870409     -0.138792      -45.5716       45.5716       1598.76       1644.33    
  15  0.296335      -1.21627      -399.354       399.354       1509.02       1908.37    
  16  0.563087     -0.574322      -188.576       188.576       1619.43       1808.00    
  17  0.860973     -0.149692      -49.1505       49.1505       1742.63       1791.78    
  18  0.336353      -1.08959      -357.762       357.762       1671.58       2029.34    
  19  0.432238     -0.838780      -275.409       275.409       1785.78       2061.19    
  20  0.411587     -0.887734      -291.483       291.483       1800.44       2091.92    
  21  0.685679     -0.377346      -123.899       123.899       1601.24       1725.14    
  22  0.178038E-01  -4.02835      -1322.69       1322.69       1585.46       2908.14    
  23  0.330516      -1.10710      -363.511       363.511       1398.81       1762.32    
  24  0.987115     -0.129685E-01  -4.25813       4.25813       1679.68       1683.94    
  25  0.702947     -0.352474      -115.733       115.733       1859.89       1975.63    
  26  0.159040      -1.83860      -603.694       603.694       1814.84       2418.53    
  27  0.329714      -1.10953      -364.309       364.309       2188.96       2553.27    
  28  0.542452     -0.611656      -200.834       200.834       2184.79       2385.62    
  29  0.484074     -0.725518      -238.220       238.220       2185.83       2424.05    
  30  0.574330     -0.554551      -182.084       182.084       2065.12       2247.21    
  31  0.987944     -0.121288E-01  -3.98244       3.98244       2222.71       2226.69    
  32  0.565195E-01  -2.87317      -943.390       943.390       1345.10       2288.49    
  33  0.662626     -0.411545      -135.129       135.129       2188.28       2323.41    
  34  0.462195     -0.771769      -253.406       253.406       2063.42       2316.82    
  35  0.413957     -0.881994      -289.598       289.598       2034.09       2323.69    
  36  0.627825     -0.465493      -152.842       152.842       2347.60       2500.44    
  37  0.373783E-01  -3.28667      -1079.16       1079.16       1822.31       2901.47    
  38  0.318481      -1.14419      -375.690       375.690       1187.73       1563.42    
  39  0.193037      -1.64487      -540.086       540.086       1837.29       2377.38    
  40  0.246573      -1.40010      -459.715       459.715       2197.16       2656.87    
  41  0.913643     -0.903152E-01  -29.6545       29.6545       2109.99       2139.64    
  42  0.593287     -0.522077      -171.421       171.421       2213.55       2384.98    
  43  0.323913      -1.12728      -370.136       370.136       2261.16       2631.30    
  44  0.270579E-01  -3.60978      -1185.25       1185.25       2438.28       3623.53    
  45  0.684823     -0.378595      -124.310       124.310       2207.09       2331.40    
  46  0.279340      -1.27532      -418.746       418.746       2330.37       2749.12    
  47  0.285511      -1.25348      -411.572       411.572       1645.25       2056.83    
  48  0.361874      -1.01646      -333.749       333.749       1817.15       2150.90    
  49  0.779291     -0.249370      -81.8795       81.8795       1700.82       1782.70    
loop,thermsimp(1:2)       70   465.621       314.244    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146       1682.39         67.98          1.13         39.49          2.13          0.05        110.79
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147       4489.31         67.91          1.11         39.27          2.42          0.05        110.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1682.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    328.345               145
loop is:       70
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    328.345               145
loop is:       71
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    164.172               193

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      146     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -34.5327       34.5327       1263.56       1298.09    
   2  0.601567     -0.508218      -83.4353       83.4353       1284.82       1368.25    
   3  0.190401      -1.65862      -272.300       272.300       1458.41       1730.71    
   4  0.827263     -0.189632      -31.1324       31.1324       1187.73       1218.86    
   5  0.581677     -0.541840      -88.9552       88.9552       1601.65       1690.60    
   6  0.680336     -0.385169      -63.2341       63.2341       1320.29       1383.53    
   7  0.641383     -0.444128      -72.9136       72.9136       1598.76       1671.67    
   8  0.593931     -0.520992      -85.5325       85.5325       1184.14       1269.67    
   9  0.326400      -1.11963      -183.813       183.813       1679.68       1863.49    
  10  0.964323     -0.363286E-01  -5.96415       5.96415       1249.11       1255.08    
  11  0.481751     -0.730328      -119.900       119.900       1494.30       1614.20    
  12  0.230624E-01  -3.76955      -618.856       618.856       1601.24       2220.10    
  13  0.214859      -1.53777      -252.460       252.460       1398.81       1651.27    
  14  0.325804      -1.12146      -184.112       184.112       1322.33       1506.44    
  15  0.668745     -0.402353      -66.0552       66.0552       1700.82       1766.88    
  16  0.803263     -0.219073      -35.9657       35.9657       1742.63       1778.60    
  17  0.465531     -0.764577      -125.522       125.522       1619.43       1744.95    
  18  0.589796     -0.527978      -86.6795       86.6795       1246.59       1333.26    
  19  0.783335     -0.244195      -40.0901       40.0901       1509.02       1549.11    
  20  0.937099     -0.649659E-01  -10.6656       10.6656       1461.21       1471.87    
  21  0.504081     -0.685019      -112.461       112.461       1428.51       1540.98    
  22  0.368431E-01  -3.30109      -541.947       541.947       1859.89       2401.84    
  23  0.462712     -0.770651      -126.520       126.520       1512.53       1639.05    
  24  0.172447      -1.75767      -288.560       288.560       1671.58       1960.14    
  25  0.361979      -1.01617      -166.827       166.827       1645.25       1812.08    
  26  0.616189     -0.484202      -79.4926       79.4926       1785.78       1865.27    
  27  0.495582     -0.702023      -115.253       115.253       1800.44       1915.69    
  28  0.492859     -0.707532      -116.157       116.157       2109.99       2226.15    
  29  0.189027      -1.66586      -273.489       273.489       1817.15       2090.64    
  30  0.336237      -1.08994      -178.938       178.938       2222.71       2401.64    
  31  0.997382     -0.262184E-02 -0.430433      0.430433       2065.12       2065.55    
  32  0.629287     -0.463168      -76.0393       76.0393       1345.10       1421.14    
  33  0.226178      -1.48644      -244.032       244.032       2063.42       2307.45    
  34  0.522315     -0.649483      -106.627       106.627       2188.28       2294.91    
  35  0.238835E-02  -6.03715      -991.134       991.134       2034.09       3025.22    
  36  0.123092E-01  -4.39741      -721.933       721.933       2207.09       2929.03    
  37  0.488141     -0.717152      -117.736       117.736       1837.29       1955.03    
  38  0.925188     -0.777584E-01  -12.7658       12.7658       2213.55       2226.32    
  39  0.676413     -0.390952      -64.1835       64.1835       2184.79       2248.97    
  40  0.638827     -0.448121      -73.5692       73.5692       1814.84       1888.41    
  41  0.789998     -0.235725      -38.6995       38.6995       2185.83       2224.53    
  42  0.453703E-01  -3.09290      -507.768       507.768       2347.60       2855.37    
  43  0.866893     -0.142840      -23.4504       23.4504       2188.96       2212.42    
  44  0.122493E-01  -4.40228      -722.733       722.733       2261.16       2983.90    
  45  0.172311      -1.75846      -288.690       288.690       2197.16       2485.85    
  46  0.899580     -0.105827      -17.3738       17.3738       2330.37       2347.75    
  47  0.857845     -0.153332      -25.1729       25.1729       1822.31       1847.48    
  48  0.176813      -1.73266      -284.455       284.455       1585.46       1869.91    
  49  0.795271E-01  -2.53166      -415.628       415.628       1682.39       2098.02    
loop,thermsimp(1:2)       71   34.5327       83.4353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148       1371.15         67.95          1.19         39.56          2.17          0.05        110.92
Just calling func    0   0        110.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149       1613.77         68.16          1.20         39.40          1.75          0.04        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1371.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       71
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       72
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      148     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -22.8007       22.8007       1187.73       1210.53    
   2  0.470451     -0.754063      -123.796       123.796       1249.11       1372.91    
   3  0.615627     -0.485114      -79.6424       79.6424       1184.14       1263.78    
   4  0.291899      -1.23135      -202.153       202.153       1263.56       1465.71    
   5  0.584822     -0.536448      -88.0700       88.0700       1246.59       1334.66    
   6  0.681731     -0.383120      -62.8978       62.8978       1284.82       1347.71    
   7  0.680149     -0.385444      -63.2792       63.2792       1320.29       1383.57    
   8  0.560478     -0.578966      -95.0502       95.0502       1345.10       1440.15    
   9  0.392299     -0.935730      -153.621       153.621       1461.21       1614.83    
  10  0.586793     -0.533083      -87.5175       87.5175       1322.33       1409.85    
  11  0.461418     -0.773452      -126.979       126.979       1428.51       1555.49    
  12  0.142886      -1.94571      -319.432       319.432       1509.02       1828.45    
  13  0.960325     -0.404831E-01  -6.64621       6.64621       1494.30       1500.95    
  14  0.547176     -0.602984      -98.9933       98.9933       1512.53       1611.52    
  15  0.817596     -0.201386      -33.0621       33.0621       1398.81       1431.87    
  16  0.184065      -1.69247      -277.856       277.856       1598.76       1876.61    
  17  0.763954     -0.269247      -44.2030       44.2030       1601.65       1645.85    
  18  0.740640     -0.300240      -49.2911       49.2911       1458.41       1507.70    
  19  0.257299      -1.35751      -222.866       222.866       1619.43       1842.29    
  20  0.274950      -1.29117      -211.974       211.974       1700.82       1912.80    
  21  0.850599     -0.161814      -26.5654       26.5654       1742.63       1769.20    
  22  0.265651      -1.32557      -217.622       217.622       1645.25       1862.88    
  23  0.388810     -0.944665      -155.088       155.088       1822.31       1977.40    
  24  0.921262     -0.820106E-01  -13.4639       13.4639       1679.68       1693.14    
  25  0.622168     -0.474545      -77.9072       77.9072       1785.78       1863.69    
  26  0.831499     -0.184526      -30.2940       30.2940       1585.46       1615.75    
  27  0.777776     -0.251317      -41.2593       41.2593       1814.84       1856.10    
  28  0.519638     -0.654624      -107.471       107.471       1800.44       1907.91    
  29  0.343480      -1.06863      -175.439       175.439       1837.29       2012.73    
  30  0.379182     -0.969738      -159.204       159.204       1671.58       1830.78    
  31  0.509964     -0.673415      -110.556       110.556       2065.12       2175.68    
  32  0.457294E-01  -3.08501      -506.474       506.474       1817.15       2323.62    
  33  0.952238     -0.489400E-01  -8.03460       8.03460       1682.39       1690.43    
  34  0.198116      -1.61890      -265.779       265.779       2188.96       2454.74    
  35  0.863922     -0.146273      -24.0140       24.0140       1601.24       1625.26    
  36  0.765944     -0.266646      -43.7759       43.7759       2185.83       2229.61    
  37  0.849389     -0.163238      -26.7992       26.7992       2109.99       2136.79    
  38  0.488339     -0.716745      -117.670       117.670       2213.55       2331.22    
  39  0.969632     -0.308388E-01  -5.06288       5.06288       2184.79       2189.85    
  40  0.971690     -0.287184E-01  -4.71476       4.71476       2188.28       2193.00    
  41  0.690522     -0.370307      -60.7942       60.7942       2063.42       2124.21    
  42  0.266028      -1.32415      -217.390       217.390       2330.37       2547.76    
  43  0.581296     -0.542495      -89.0627       89.0627       2222.71       2311.77    
  44  0.636654     -0.451529      -74.1286       74.1286       1859.89       1934.02    
  45  0.947680     -0.537383E-01  -8.82235       8.82235       2197.16       2205.98    
  46  0.792806     -0.232176      -38.1169       38.1169       2347.60       2385.72    
  47  0.420588     -0.866101      -142.190       142.190       2207.09       2349.28    
  48  0.780043     -0.248407      -40.7815       40.7815       2261.16       2301.94    
  49  0.834700E-01  -2.48327      -407.684       407.684       1371.15       1778.83    
loop,thermsimp(1:2)       72   22.8007       123.796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150       1386.94         68.41          1.22         39.48          1.69          0.05        110.85
Just calling func    0   0        110.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1386.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       72
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       73
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      149     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -49.0101       49.0101       1187.73       1236.74    
   2  0.823468     -0.194230      -31.8872       31.8872       1184.14       1216.03    
   3  0.352913      -1.04153      -170.991       170.991       1246.59       1417.58    
   4  0.268511      -1.31486      -215.864       215.864       1284.82       1500.68    
   5  0.137541      -1.98383      -325.691       325.691       1249.11       1574.80    
   6  0.953738     -0.473661E-01  -7.77621       7.77621       1320.29       1328.07    
   7  0.366602      -1.00348      -164.743       164.743       1322.33       1487.07    
   8  0.861530     -0.149046      -24.4692       24.4692       1398.81       1423.28    
   9  0.190086      -1.66028      -272.572       272.572       1345.10       1617.67    
  10  0.931621     -0.708293E-01  -11.6282       11.6282       1263.56       1275.19    
  11  0.135562      -1.99833      -328.070       328.070       1494.30       1822.37    
  12  0.577052     -0.549824      -90.2659       90.2659       1458.41       1548.67    
  13  0.937511     -0.645266E-01  -10.5935       10.5935       1428.51       1439.11    
  14  0.836727     -0.178258      -29.2650       29.2650       1512.53       1541.79    
  15  0.124731      -2.08159      -341.740       341.740       1461.21       1802.95    
  16  0.830758     -0.185417      -30.4404       30.4404       1585.46       1615.90    
  17  0.925849     -0.770442E-01  -12.6485       12.6485       1601.24       1613.89    
  18  0.945668     -0.558633E-01  -9.17122       9.17122       1601.65       1610.82    
  19  0.700762     -0.355587      -58.3775       58.3775       1682.39       1740.77    
  20  0.585168E-01  -2.83844      -465.994       465.994       1679.68       2145.67    
  21  0.241985      -1.41888      -232.941       232.941       1742.63       1975.57    
  22  0.426115     -0.853047      -140.047       140.047       1371.15       1511.19    
  23  0.730656     -0.313813      -51.5194       51.5194       1509.02       1560.54    
  24  0.227460      -1.48078      -243.103       243.103       1671.58       1914.68    
  25  0.824070     -0.193500      -31.7673       31.7673       1619.43       1651.19    
  26  0.912829     -0.912064E-01  -14.9736       14.9736       1814.84       1829.81    
  27  0.130860      -2.03363      -333.865       333.865       1645.25       1979.12    
  28  0.126999      -2.06358      -338.782       338.782       1785.78       2124.56    
  29  0.394828E-01  -3.23189      -530.587       530.587       1598.76       2129.34    
  30  0.927793     -0.749466E-01  -12.3042       12.3042       1800.44       1812.74    
  31  0.161762      -1.82163      -299.061       299.061       1700.82       1999.88    
  32  0.510374     -0.672611      -110.424       110.424       1859.89       1970.32    
  33  0.930607     -0.719186E-01  -11.8070       11.8070       1822.31       1834.12    
  34  0.825283E-01  -2.49461      -409.547       409.547       1837.29       2246.84    
  35  0.569143     -0.563624      -92.5315       92.5315       2063.42       2155.95    
  36  0.732951     -0.310676      -51.0045       51.0045       2109.99       2160.99    
  37  0.554950     -0.588877      -96.6774       96.6774       2065.12       2161.80    
  38  0.614368     -0.487160      -79.9783       79.9783       2184.79       2264.77    
  39  0.127889      -2.05659      -337.636       337.636       2188.28       2525.92    
  40  0.510007     -0.673330      -110.542       110.542       2197.16       2307.70    
  41  0.206107      -1.57936      -259.287       259.287       2185.83       2445.12    
  42  0.812962E-01  -2.50966      -412.016       412.016       2261.16       2673.18    
  43  0.711913     -0.339799      -55.7857       55.7857       2222.71       2278.49    
  44  0.649899     -0.430939      -70.7483       70.7483       1817.15       1887.90    
  45  0.102708      -2.27587      -373.635       373.635       2213.55       2587.19    
  46  0.152702      -1.87927      -308.524       308.524       2207.09       2515.62    
  47  0.827734     -0.189064      -31.0391       31.0391       2347.60       2378.64    
  48  0.558329     -0.582808      -95.6809       95.6809       2188.96       2284.65    
  49  0.174746      -1.74442      -286.386       286.386       1386.94       1673.32    
loop,thermsimp(1:2)       73   49.0101       31.8872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151       2046.93         68.20          1.23         39.53          1.55          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2046.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       73
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       74
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      150     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -29.4156       29.4156       1184.14       1213.56    
   2  0.439366     -0.822423      -135.019       135.019       1187.73       1322.75    
   3  0.603094     -0.505682      -83.0190       83.0190       1263.56       1346.58    
   4  0.695854E-01  -2.66520      -437.552       437.552       1320.29       1757.85    
   5  0.273021      -1.29821      -213.130       213.130       1246.59       1459.72    
   6  0.418319     -0.871511      -143.078       143.078       1398.81       1541.89    
   7  0.688437     -0.373331      -61.2907       61.2907       1428.51       1489.81    
   8  0.400930     -0.913969      -150.048       150.048       1322.33       1472.38    
   9  0.569492     -0.563010      -92.4307       92.4307       1284.82       1377.25    
  10  0.812441     -0.207712      -34.1006       34.1006       1371.15       1405.25    
  11  0.222094      -1.50465      -247.023       247.023       1512.53       1759.55    
  12  0.695761     -0.362749      -59.5534       59.5534       1458.41       1517.96    
  13  0.909536E-01  -2.39741      -393.588       393.588       1509.02       1902.60    
  14  0.297191      -1.21338      -199.203       199.203       1249.11       1448.31    
  15  0.806729     -0.214767      -35.2588       35.2588       1601.65       1636.91    
  16  0.407021     -0.898891      -147.573       147.573       1601.24       1748.82    
  17  0.520426     -0.653107      -107.222       107.222       1585.46       1692.68    
  18  0.826852     -0.190129      -31.2140       31.2140       1345.10       1376.32    
  19  0.729268     -0.315714      -51.8315       51.8315       1619.43       1671.26    
  20  0.344086      -1.06687      -175.150       175.150       1386.94       1562.09    
  21  0.280849      -1.26994      -208.489       208.489       1682.39       1890.88    
  22  0.301244E-01  -3.50242      -575.001       575.001       1461.21       2036.21    
  23  0.503253     -0.686663      -112.731       112.731       1800.44       1913.17    
  24  0.549007     -0.599644      -98.4449       98.4449       1494.30       1592.74    
  25  0.814230     -0.205513      -33.7395       33.7395       1814.84       1848.58    
  26  0.641489     -0.443963      -72.8865       72.8865       1822.31       1895.20    
  27  0.248696      -1.39152      -228.450       228.450       1817.15       2045.60    
  28  0.684472     -0.379107      -62.2389       62.2389       1671.58       1733.82    
  29  0.815126     -0.204413      -33.5589       33.5589       1859.89       1893.45    
  30  0.388210     -0.946208      -155.341       155.341       1742.63       1897.97    
  31  0.670538     -0.399675      -65.6156       65.6156       1645.25       1710.87    
  32  0.851104     -0.161221      -26.4680       26.4680       1700.82       1727.29    
  33  0.381078     -0.964752      -158.386       158.386       1785.78       1944.16    
  34  0.776256     -0.253273      -41.5804       41.5804       1598.76       1640.34    
  35  0.168040      -1.78355      -292.810       292.810       1679.68       1972.49    
  36  0.229069      -1.47373      -241.946       241.946       2063.42       2305.36    
  37  0.917563     -0.860337E-01  -14.1244       14.1244       2109.99       2124.11    
  38  0.161815      -1.82130      -299.008       299.008       2065.12       2364.13    
  39  0.355170      -1.03516      -169.944       169.944       1837.29       2007.23    
  40  0.221709      -1.50639      -247.307       247.307       2184.79       2432.10    
  41  0.424436     -0.856993      -140.695       140.695       2222.71       2363.40    
  42  0.337698      -1.08560      -178.226       178.226       2188.96       2367.19    
  43  0.574481     -0.554289      -90.9990       90.9990       2197.16       2288.16    
  44  0.614536     -0.486888      -79.9335       79.9335       2347.60       2427.53    
  45  0.345602      -1.06247      -174.428       174.428       2185.83       2360.26    
  46  0.330006      -1.10864      -182.009       182.009       2207.09       2389.10    
  47  0.934389     -0.678626E-01  -11.1412       11.1412       2188.28       2199.42    
  48  0.884466     -0.122771      -20.1556       20.1556       2213.55       2233.71    
  49  0.928979     -0.736686E-01  -12.0944       12.0944       2046.93       2059.02    
loop,thermsimp(1:2)       74   29.4156       135.019    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152       1236.30         68.12          1.20         39.60          1.68          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153       1385.48         68.26          1.16         39.60          1.77          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1236.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       74
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       75
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      152     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -161.123       161.123       1184.14       1345.26    
   2  0.269095      -1.31269      -215.507       215.507       1187.73       1403.23    
   3  0.301960      -1.19746      -196.590       196.590       1263.56       1460.15    
   4  0.927593     -0.751619E-01  -12.3395       12.3395       1345.10       1357.44    
   5  0.783450     -0.244048      -40.0659       40.0659       1284.82       1324.88    
   6  0.716705     -0.333091      -54.6844       54.6844       1371.15       1425.83    
   7  0.728578     -0.316661      -51.9870       51.9870       1249.11       1301.10    
   8  0.752541     -0.284300      -46.6741       46.6741       1246.59       1293.26    
   9  0.111710      -2.19185      -359.841       359.841       1322.33       1682.17    
  10  0.202752E-01  -3.89836      -640.003       640.003       1428.51       2068.52    
  11  0.967738     -0.327937E-01  -5.38382       5.38382       1458.41       1463.79    
  12  0.530869     -0.633240      -103.961       103.961       1398.81       1502.77    
  13  0.752699E-01  -2.58668      -424.661       424.661       1386.94       1811.60    
  14  0.658334     -0.418043      -68.6311       68.6311       1494.30       1562.93    
  15  0.383542     -0.958305      -157.327       157.327       1601.65       1758.98    
  16  0.280803      -1.27010      -208.516       208.516       1598.76       1807.27    
  17  0.976909     -0.233616E-01  -3.83532       3.83532       1619.43       1623.26    
  18  0.611898     -0.491189      -80.6397       80.6397       1585.46       1666.10    
  19  0.860469     -0.150278      -24.6715       24.6715       1645.25       1669.93    
  20  0.375446     -0.979641      -160.830       160.830       1700.82       1861.65    
  21  0.964573     -0.360702E-01  -5.92173       5.92173       1671.58       1677.50    
  22  0.865663     -0.144259      -23.6834       23.6834       1601.24       1624.93    
  23  0.498009     -0.697137      -114.451       114.451       1320.29       1434.74    
  24  0.732547     -0.311228      -51.0950       51.0950       1512.53       1563.62    
  25  0.293766      -1.22497      -201.106       201.106       1814.84       2015.94    
  26  0.805097     -0.216793      -35.5914       35.5914       1682.39       1717.98    
  27  0.236791      -1.44058      -236.503       236.503       1859.89       2096.40    
  28  0.759809     -0.274688      -45.0962       45.0962       1822.31       1867.41    
  29  0.279804      -1.27367      -209.101       209.101       1742.63       1951.73    
  30  0.862550     -0.147862      -24.2749       24.2749       1509.02       1533.29    
  31  0.784800     -0.242327      -39.7833       39.7833       1800.44       1840.22    
  32  0.231425      -1.46350      -240.266       240.266       1785.78       2026.04    
  33  0.839725     -0.174681      -28.6778       28.6778       1679.68       1708.36    
  34  0.204862      -1.58542      -260.282       260.282       1837.29       2097.57    
  35  0.741170     -0.299525      -49.1738       49.1738       1461.21       1510.38    
  36  0.838703     -0.175898      -28.8776       28.8776       1817.15       1846.03    
  37  0.287711      -1.24580      -204.525       204.525       2046.93       2251.46    
  38  0.937479     -0.645611E-01  -10.5992       10.5992       2109.99       2120.59    
  39  0.188655      -1.66783      -273.812       273.812       2188.28       2462.10    
  40  0.818317     -0.200505      -32.9174       32.9174       2213.55       2246.47    
  41  0.903487     -0.101493      -16.6624       16.6624       2197.16       2213.82    
  42  0.148828      -1.90496      -312.743       312.743       2063.42       2376.16    
  43  0.573616E-01  -2.85838      -469.267       469.267       2185.83       2655.10    
  44  0.792726E-01  -2.53486      -416.154       416.154       2222.71       2638.86    
  45  0.150401      -1.89445      -311.017       311.017       2065.12       2376.14    
  46  0.511444     -0.670518      -110.080       110.080       2188.96       2299.05    
  47  0.179810      -1.71585      -281.696       281.696       2207.09       2488.79    
  48  0.167282      -1.78808      -293.553       293.553       2347.60       2641.15    
  49  0.589016     -0.529302      -86.8967       86.8967       1236.30       1323.19    
loop,thermsimp(1:2)       75   161.123       215.507    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154       1220.84         68.10          1.19         39.81          1.56          0.05        110.71
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155       1402.38         68.30          1.17         39.44          1.70          0.05        110.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1220.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       75
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       76
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      154     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -492.710       492.710       1246.59       1739.29    
   2  0.604222     -0.503814      -82.7123       82.7123       1249.11       1331.82    
   3  0.106168      -2.24273      -368.194       368.194       1236.30       1604.49    
   4  0.342113      -1.07261      -176.093       176.093       1284.82       1460.91    
   5  0.473442     -0.747725      -122.756       122.756       1184.14       1306.90    
   6  0.100866E-01  -4.59655      -754.626       754.626       1345.10       2099.73    
   7  0.911848     -0.922817E-01  -15.1501       15.1501       1187.73       1202.88    
   8  0.633547     -0.456421      -74.9317       74.9317       1371.15       1446.08    
   9  0.729024     -0.316048      -51.8864       51.8864       1320.29       1372.18    
  10  0.620163     -0.477772      -78.4370       78.4370       1263.56       1342.00    
  11  0.867018     -0.142695      -23.4266       23.4266       1458.41       1481.83    
  12  0.969344E-01  -2.33372      -383.132       383.132       1398.81       1781.94    
  13  0.358466      -1.02592      -168.428       168.428       1461.21       1629.63    
  14  0.953168     -0.479638E-01  -7.87432       7.87432       1509.02       1516.89    
  15  0.684510     -0.379052      -62.2298       62.2298       1494.30       1556.53    
  16  0.482047     -0.729713      -119.799       119.799       1512.53       1632.33    
  17  0.974791     -0.255318E-01  -4.19162       4.19162       1619.43       1623.62    
  18  0.978669     -0.215619E-01  -3.53987       3.53987       1601.24       1604.78    
  19  0.929785     -0.728022E-01  -11.9521       11.9521       1585.46       1597.41    
  20  0.715020     -0.335444      -55.0707       55.0707       1645.25       1700.33    
  21  0.598247     -0.513752      -84.3439       84.3439       1671.58       1755.92    
  22  0.107080      -2.23418      -366.791       366.791       1322.33       1689.12    
  23  0.559093     -0.581439      -95.4562       95.4562       1679.68       1775.14    
  24  0.933094     -0.692491E-01  -11.3688       11.3688       1682.39       1693.76    
  25  0.470169E-01  -3.05725      -501.916       501.916       1601.65       2103.56    
  26  0.166768      -1.79115      -294.058       294.058       1598.76       1892.81    
  27  0.331277      -1.10480      -181.378       181.378       1386.94       1568.31    
  28  0.961755     -0.389952E-01  -6.40194       6.40194       1800.44       1806.84    
  29  0.464366E-01  -3.06967      -503.955       503.955       1817.15       2321.10    
  30  0.966136E-03  -6.94221      -1139.72       1139.72       1700.82       2840.54    
  31  0.941012     -0.607999E-01  -9.98166       9.98166       1822.31       1832.29    
  32  0.201947E-01  -3.90233      -640.655       640.655       1742.63       2383.29    
  33  0.679249     -0.386768      -63.4966       63.4966       1814.84       1878.34    
  34  0.318772      -1.14328      -187.695       187.695       1785.78       1973.47    
  35  0.388100     -0.946493      -155.388       155.388       1428.51       1583.90    
  36  0.658606     -0.417629      -68.5632       68.5632       1859.89       1928.46    
  37  0.774362     -0.255715      -41.9814       41.9814       1837.29       1879.27    
  38  0.704871     -0.349740      -57.4176       57.4176       2109.99       2167.41    
  39  0.274189      -1.29394      -212.429       212.429       2197.16       2409.59    
  40  0.881806     -0.125783      -20.6501       20.6501       2213.55       2234.21    
  41  0.198448      -1.61723      -265.504       265.504       2046.93       2312.43    
  42  0.342590      -1.07122      -175.865       175.865       2188.96       2364.83    
  43  0.603787     -0.504534      -82.8306       82.8306       2065.12       2147.95    
  44  0.667409     -0.404353      -66.3836       66.3836       2063.42       2129.80    
  45  0.317014      -1.14881      -188.603       188.603       2188.28       2376.89    
  46  0.368458     -0.998429      -163.914       163.914       2207.09       2371.01    
  47  0.139912      -1.96674      -322.885       322.885       2222.71       2545.59    
  48  0.537645     -0.620557      -101.878       101.878       2347.60       2449.48    
  49  0.159021      -1.83872      -301.867       301.867       1220.84       1522.70    
loop,thermsimp(1:2)       76   492.710       82.7123    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       1613.40         68.43          1.27         39.35          1.57          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1613.40
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       76
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       77
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      155     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -84.7520       84.7520       1187.73       1272.48    
   2  0.476930     -0.740385      -121.551       121.551       1184.14       1305.69    
   3  0.845382     -0.167966      -27.5754       27.5754       1249.11       1276.69    
   4  0.397814     -0.921770      -151.329       151.329       1263.56       1414.89    
   5  0.249923      -1.38660      -227.642       227.642       1320.29       1547.94    
   6  0.591552     -0.525005      -86.1914       86.1914       1371.15       1457.34    
   7  0.143111      -1.94414      -319.174       319.174       1284.82       1603.99    
   8  0.306099      -1.18385      -194.355       194.355       1458.41       1652.76    
   9  0.441827     -0.816836      -134.102       134.102       1509.02       1643.12    
  10  0.504521     -0.684146      -112.318       112.318       1220.84       1333.16    
  11  0.127660      -2.05839      -337.930       337.930       1494.30       1832.23    
  12  0.333524      -1.09804      -180.268       180.268       1386.94       1567.21    
  13  0.130890      -2.03340      -333.827       333.827       1428.51       1762.34    
  14  0.307732      -1.17853      -193.481       193.481       1585.46       1778.94    
  15  0.154434E-01  -4.17057      -684.693       684.693       1236.30       1920.99    
  16  0.357863      -1.02761      -168.704       168.704       1601.24       1769.95    
  17  0.271898      -1.30233      -213.806       213.806       1619.43       1833.23    
  18  0.906228E-01  -2.40105      -394.186       394.186       1461.21       1855.39    
  19  0.344142      -1.06670      -175.123       175.123       1512.53       1687.65    
  20  0.392886     -0.934237      -153.376       153.376       1322.33       1475.71    
  21  0.454318     -0.788958      -129.525       129.525       1682.39       1811.92    
  22  0.384129     -0.956778      -157.076       157.076       1645.25       1802.33    
  23  0.354037      -1.03835      -170.469       170.469       1246.59       1417.05    
  24  0.154212      -1.86943      -306.909       306.909       1671.58       1978.49    
  25  0.816320     -0.202949      -33.3187       33.3187       1679.68       1713.00    
  26  0.994970     -0.504291E-02 -0.827906      0.827906       1398.81       1399.64    
  27  0.374719E-01  -3.28416      -539.169       539.169       1800.44       2339.61    
  28  0.227113      -1.48231      -243.354       243.354       1822.31       2065.66    
  29  0.410587     -0.890167      -146.141       146.141       1814.84       1960.98    
  30  0.104540E-01  -4.56077      -748.753       748.753       1837.29       2586.04    
  31  0.994826     -0.518730E-02 -0.851610      0.851610       1598.76       1599.61    
  32  0.738930     -0.302553      -49.6708       49.6708       1859.89       1909.56    
  33  0.715904     -0.334209      -54.8679       54.8679       1785.78       1840.65    
  34  0.128324      -2.05320      -337.078       337.078       1345.10       1682.18    
  35  0.856095     -0.155374      -25.5080       25.5080       1601.65       1627.16    
  36  0.423967     -0.858099      -140.876       140.876       2063.42       2204.29    
  37  0.504650     -0.683890      -112.276       112.276       2065.12       2177.40    
  38  0.347036      -1.05833      -173.748       173.748       2109.99       2283.74    
  39  0.906779     -0.978566E-01  -16.0653       16.0653       2213.55       2229.62    
  40  0.616911     -0.483030      -79.3002       79.3002       2046.93       2126.23    
  41  0.540209     -0.615800      -101.097       101.097       1817.15       1918.25    
  42  0.772932     -0.257564      -42.2849       42.2849       2188.96       2231.25    
  43  0.544989     -0.606989      -99.6509       99.6509       2207.09       2306.75    
  44  0.951523     -0.496917E-01  -8.15801       8.15801       2188.28       2196.44    
  45  0.172505      -1.75733      -288.505       288.505       1742.63       2031.14    
  46  0.871391     -0.137665      -22.6007       22.6007       2197.16       2219.76    
  47  0.127604      -2.05882      -338.001       338.001       2347.60       2685.60    
  48  0.785934     -0.240882      -39.5462       39.5462       2222.71       2262.25    
  49  0.815977     -0.203369      -33.3876       33.3876       1613.40       1646.79    
loop,thermsimp(1:2)       77   84.7520       121.551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157       1217.29         68.29          1.23         39.54          1.55          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158       1288.83         67.96          1.14         39.88          1.71          0.05        110.74
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1217.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       77
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       78
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      157     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -9.82960       9.82960       1187.73       1197.56    
   2  0.368209     -0.999105      -164.025       164.025       1249.11       1413.14    
   3  0.508630     -0.676034      -110.986       110.986       1184.14       1295.13    
   4  0.744324     -0.295279      -48.4767       48.4767       1220.84       1269.31    
   5  0.401586     -0.912333      -149.780       149.780       1398.81       1548.59    
   6  0.712794     -0.338563      -55.5827       55.5827       1263.56       1319.14    
   7  0.186976      -1.67678      -275.280       275.280       1246.59       1521.87    
   8  0.688451     -0.373311      -61.2874       61.2874       1371.15       1432.43    
   9  0.668652     -0.402492      -66.0780       66.0780       1322.33       1388.41    
  10  0.656767     -0.420426      -69.0224       69.0224       1320.29       1389.32    
  11  0.853336     -0.158602      -26.0381       26.0381       1386.94       1412.98    
  12  0.556440     -0.586195      -96.2371       96.2371       1598.76       1694.99    
  13  0.258558E-01  -3.65522      -600.086       600.086       1284.82       1884.90    
  14  0.121003E-01  -4.41452      -724.742       724.742       1601.65       2326.39    
  15  0.150890      -1.89120      -310.483       310.483       1509.02       1819.50    
  16  0.820074     -0.198360      -32.5653       32.5653       1613.40       1645.97    
  17  0.151452      -1.88748      -309.873       309.873       1458.41       1768.28    
  18  0.305465      -1.18592      -194.696       194.696       1345.10       1539.80    
  19  0.533202     -0.628854      -103.240       103.240       1512.53       1615.77    
  20  0.143416      -1.94201      -318.824       318.824       1679.68       1998.50    
  21  0.687081     -0.375303      -61.6143       61.6143       1428.51       1490.13    
  22  0.546247     -0.604685      -99.2725       99.2725       1601.24       1700.52    
  23  0.356987      -1.03006      -169.107       169.107       1585.46       1754.56    
  24  0.545718     -0.605653      -99.4315       99.4315       1645.25       1744.69    
  25  0.789688     -0.236117      -38.7639       38.7639       1682.39       1721.16    
  26  0.752086     -0.284904      -46.7734       46.7734       1494.30       1541.07    
  27  0.388816     -0.944650      -155.085       155.085       1619.43       1774.51    
  28  0.988428     -0.116395E-01  -1.91089       1.91089       1785.78       1787.69    
  29  0.124991      -2.07952      -341.399       341.399       1461.21       1802.61    
  30  0.568214     -0.565257      -92.7996       92.7996       1859.89       1952.69    
  31  0.551032     -0.595962      -97.8405       97.8405       1817.15       1914.99    
  32  0.423622     -0.858913      -141.010       141.010       1236.30       1377.31    
  33  0.647554     -0.434553      -71.3416       71.3416       1814.84       1886.18    
  34  0.686255     -0.376506      -61.8119       61.8119       1671.58       1733.39    
  35  0.548072     -0.601349      -98.7249       98.7249       1742.63       1841.36    
  36  0.880777     -0.126951      -20.8419       20.8419       1822.31       1843.15    
  37  0.894918     -0.111023      -18.2269       18.2269       2046.93       2065.16    
  38  0.241077      -1.42264      -233.558       233.558       2065.12       2298.68    
  39  0.546141     -0.604877      -99.3041       99.3041       2188.28       2287.59    
  40  0.266590      -1.32204      -217.043       217.043       2063.42       2280.46    
  41  0.575085     -0.553238      -90.8264       90.8264       2197.16       2287.99    
  42  0.907139     -0.974596E-01  -16.0002       16.0002       2213.55       2229.56    
  43  0.469109     -0.756920      -124.265       124.265       2188.96       2313.23    
  44  0.738008     -0.303801      -49.8757       49.8757       2222.71       2272.58    
  45  0.557598     -0.584116      -95.8958       95.8958       2109.99       2205.88    
  46  0.305677      -1.18523      -194.581       194.581       2207.09       2401.68    
  47  0.392927     -0.934131      -153.358       153.358       1800.44       1953.80    
  48  0.121997      -2.10376      -345.379       345.379       1837.29       2182.67    
  49  0.712082     -0.339563      -55.7468       55.7468       1217.29       1273.03    
loop,thermsimp(1:2)       78   9.82960       164.025    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159       1200.47         68.45          1.23         39.38          1.54          0.05        110.65
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160       1538.14         68.09          1.14         39.59          1.95          0.05        110.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1200.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       78
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       79
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      159     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -434.520       434.520       1187.73       1622.25    
   2  0.952063     -0.491245E-01  -8.06488       8.06488       1220.84       1228.90    
   3  0.207928      -1.57057      -257.843       257.843       1217.29       1475.13    
   4  0.564009     -0.572686      -94.0191       94.0191       1184.14       1278.16    
   5  0.461636     -0.772979      -126.902       126.902       1263.56       1390.46    
   6  0.683812     -0.380072      -62.3972       62.3972       1236.30       1298.69    
   7  0.153569      -1.87360      -307.594       307.594       1322.33       1629.92    
   8  0.605650     -0.501453      -82.3248       82.3248       1320.29       1402.62    
   9  0.257296      -1.35753      -222.869       222.869       1386.94       1609.81    
  10  0.517987     -0.657805      -107.993       107.993       1249.11       1357.10    
  11  0.571129     -0.560140      -91.9596       91.9596       1371.15       1463.11    
  12  0.735134     -0.307703      -50.5163       50.5163       1428.51       1479.03    
  13  0.766340E-02  -4.87130      -799.733       799.733       1246.59       2046.32    
  14  0.435932     -0.830269      -136.307       136.307       1345.10       1481.41    
  15  0.513945     -0.665639      -109.280       109.280       1494.30       1603.58    
  16  0.447046     -0.805095      -132.174       132.174       1398.81       1530.99    
  17  0.244813      -1.40726      -231.033       231.033       1512.53       1743.56    
  18  0.183933      -1.69318      -277.974       277.974       1613.40       1891.38    
  19  0.413164     -0.883910      -145.114       145.114       1598.76       1743.87    
  20  0.869613     -0.139707      -22.9361       22.9361       1601.24       1624.18    
  21  0.853260     -0.158691      -26.0526       26.0526       1682.39       1708.45    
  22  0.138067      -1.98001      -325.063       325.063       1671.58       1996.64    
  23  0.940528     -0.613134E-01  -10.0660       10.0660       1645.25       1655.32    
  24  0.694939     -0.363931      -59.7474       59.7474       1585.46       1645.21    
  25  0.962776     -0.379346E-01  -6.22782       6.22782       1458.41       1464.64    
  26  0.378266     -0.972158      -159.602       159.602       1619.43       1779.03    
  27  0.855922     -0.155576      -25.5413       25.5413       1785.78       1811.32    
  28  0.393452     -0.932797      -153.139       153.139       1461.21       1614.35    
  29  0.253590      -1.37204      -225.251       225.251       1509.02       1734.27    
  30  0.777948     -0.251096      -41.2230       41.2230       1742.63       1783.85    
  31  0.654890     -0.423288      -69.4923       69.4923       1822.31       1891.80    
  32  0.690016E-01  -2.67363      -438.935       438.935       1284.82       1723.75    
  33  0.101034      -2.29229      -376.331       376.331       1814.84       2191.17    
  34  0.684533     -0.379019      -62.2244       62.2244       1817.15       1879.37    
  35  0.592603     -0.523230      -85.8999       85.8999       1859.89       1945.79    
  36  0.904830     -0.100009      -16.4186       16.4186       1800.44       1816.86    
  37  0.400244     -0.915681      -150.329       150.329       1679.68       1830.01    
  38  0.698191     -0.359263      -58.9811       58.9811       2046.93       2105.91    
  39  0.551449E-01  -2.89779      -475.737       475.737       1837.29       2313.03    
  40  0.500493     -0.692161      -113.634       113.634       2109.99       2223.62    
  41  0.289592      -1.23928      -203.456       203.456       2213.55       2417.01    
  42  0.447163     -0.804833      -132.131       132.131       2222.71       2354.84    
  43  0.690940     -0.369702      -60.6948       60.6948       2063.42       2124.11    
  44  0.631068     -0.460341      -75.5753       75.5753       2188.28       2263.86    
  45  0.926041     -0.768363E-01  -12.6144       12.6144       2197.16       2209.77    
  46  0.436187     -0.829684      -136.211       136.211       2065.12       2201.33    
  47  0.314139      -1.15792      -190.098       190.098       2188.96       2379.06    
  48  0.363110      -1.01305      -166.315       166.315       1601.65       1767.96    
  49  0.446982     -0.805238      -132.198       132.198       1200.47       1332.67    
loop,thermsimp(1:2)       79   434.520       8.06488    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161       1182.60         68.34          1.22         39.60          1.60          0.05        110.80
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162       1525.36         68.18          1.16         39.56          1.73          0.05        110.70
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    1182.6        3.057     -3.466      4.792     -102.6     0.3818    
                     -0.4495     0.3591     -99.70      6.295      1.898    

                       2.883     -1.017      1.927      6769.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.467      0.000      0.000      7000.      525.8    

                      -1.190     -6.845     -7.790     -7.514      10.61    

                      -3.877     -3.949      4321.      0.000      7998.    



                       2247.      6280.      7710.      919.9      503.8    

                       4758.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.915     -1.607     -2.212     -2.155    -0.3807    

                     -0.3252      9.603      8.581    -0.1578E+05 -5.073    

                      0.2474E-01 -2.202      9.086      9.099    -0.1969E+05



                      -6.000     0.3502     0.4382E-01  8.944      9.039    

                     -0.1944E+05 -6.000     -1.011    -0.5937      9.639    

                       9.480    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1182.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       79
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       80
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      161     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -66.1338       66.1338       1220.84       1286.97    
   2  0.238500      -1.43339      -235.322       235.322       1184.14       1419.46    
   3  0.689211     -0.372208      -61.1063       61.1063       1236.30       1297.40    
   4  0.540774     -0.614753      -100.925       100.925       1200.47       1301.40    
   5  0.178857      -1.72117      -282.569       282.569       1249.11       1531.68    
   6  0.884253     -0.123012      -20.1952       20.1952       1263.56       1283.76    
   7  0.755546     -0.280314      -46.0199       46.0199       1320.29       1366.31    
   8  0.654086E-01  -2.72710      -447.715       447.715       1371.15       1818.86    
   9  0.802958     -0.219452      -36.0280       36.0280       1458.41       1494.44    
  10  0.840665     -0.173562      -28.4940       28.4940       1217.29       1245.78    
  11  0.864930     -0.145107      -23.8225       23.8225       1428.51       1452.34    
  12  0.728243     -0.317120      -52.0624       52.0624       1345.10       1397.17    
  13  0.453086     -0.791672      -129.971       129.971       1398.81       1528.78    
  14  0.702549E-01  -2.65563      -435.980       435.980       1494.30       1930.28    
  15  0.610595     -0.493321      -80.9897       80.9897       1386.94       1467.93    
  16  0.728410E-02  -4.92206      -808.066       808.066       1461.21       2269.27    
  17  0.913763     -0.901841E-01  -14.8057       14.8057       1187.73       1202.53    
  18  0.165001      -1.80180      -295.806       295.806       1601.24       1897.05    
  19  0.917747E-01  -2.38842      -392.112       392.112       1322.33       1714.44    
  20  0.338507      -1.08321      -177.833       177.833       1585.46       1763.29    
  21  0.357666      -1.02815      -168.795       168.795       1645.25       1814.05    
  22  0.389441     -0.943044      -154.822       154.822       1682.39       1837.21    
  23  0.879897     -0.127950      -21.0059       21.0059       1284.82       1305.82    
  24  0.418897     -0.870129      -142.851       142.851       1509.02       1651.87    
  25  0.838426     -0.176230      -28.9320       28.9320       1512.53       1541.46    
  26  0.185169      -1.68649      -276.874       276.874       1598.76       1875.63    
  27  0.200952      -1.60469      -263.445       263.445       1601.65       1865.09    
  28  0.877256     -0.130957      -21.4995       21.4995       1619.43       1640.93    
  29  0.386592     -0.950385      -156.027       156.027       1742.63       1898.66    
  30  0.888706     -0.117988      -19.3704       19.3704       1785.78       1805.15    
  31  0.105408      -2.24991      -369.374       369.374       1800.44       2169.81    
  32  0.994268     -0.574873E-02 -0.943783      0.943783       1679.68       1680.62    
  33  0.764077     -0.269087      -44.1766       44.1766       1817.15       1861.32    
  34  0.812108     -0.208121      -34.1678       34.1678       1613.40       1647.57    
  35  0.121669      -2.10645      -345.821       345.821       1822.31       2168.13    
  36  0.637909     -0.449559      -73.8052       73.8052       1859.89       1933.70    
  37  0.316007E-02  -5.75716      -945.167       945.167       1671.58       2616.75    
  38  0.229677      -1.47108      -241.511       241.511       1246.59       1488.10    
  39  0.521374     -0.651288      -106.923       106.923       2046.93       2153.85    
  40  0.391402     -0.938019      -153.997       153.997       2063.42       2217.42    
  41  0.327357      -1.11670      -183.332       183.332       1814.84       1998.17    
  42  0.963139     -0.375576E-01  -6.16593       6.16593       2065.12       2071.29    
  43  0.174261      -1.74720      -286.842       286.842       2197.16       2484.00    
  44  0.331602      -1.10382      -181.217       181.217       2109.99       2291.21    
  45  0.526338     -0.641812      -105.368       105.368       2188.28       2293.65    
  46  0.413265     -0.883667      -145.074       145.074       1837.29       1982.36    
  47  0.541510E-02  -5.21856      -856.744       856.744       2222.71       3079.45    
  48  0.781613     -0.246396      -40.4513       40.4513       2188.96       2229.42    
  49  0.656825     -0.420337      -69.0078       69.0078       1182.60       1251.61    
loop,thermsimp(1:2)       80   66.1338       235.322    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163       1539.99         68.30          1.22         39.48          1.47          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164       3018.11         67.45          1.12         39.37          2.16          0.04        110.13
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1539.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       80
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       81
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      163     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -214.942       214.942       1187.73       1402.67    
   2  0.879265     -0.128669      -21.1238       21.1238       1217.29       1238.41    
   3  0.684902     -0.378479      -62.1358       62.1358       1182.60       1244.73    
   4  0.893896     -0.112166      -18.4145       18.4145       1263.56       1281.97    
   5  0.476761     -0.740739      -121.609       121.609       1220.84       1342.45    
   6  0.755167     -0.280817      -46.1023       46.1023       1236.30       1282.40    
   7  0.452407     -0.793173      -130.217       130.217       1200.47       1330.69    
   8  0.723906     -0.323093      -53.0430       53.0430       1284.82       1337.86    
   9  0.451260     -0.795711      -130.634       130.634       1320.29       1450.93    
  10  0.668265     -0.403071      -66.1731       66.1731       1345.10       1411.28    
  11  0.777249     -0.251995      -41.3706       41.3706       1184.14       1225.51    
  12  0.342240      -1.07224      -176.033       176.033       1428.51       1604.55    
  13  0.639156     -0.447606      -73.4846       73.4846       1386.94       1460.42    
  14  0.166924      -1.79022      -293.904       293.904       1246.59       1540.49    
  15  0.375260     -0.980137      -160.911       160.911       1458.41       1619.32    
  16  0.299730      -1.20487      -197.807       197.807       1398.81       1596.62    
  17  0.407119     -0.898650      -147.534       147.534       1249.11       1396.64    
  18  0.762992E-01  -2.57309      -422.431       422.431       1512.53       1934.96    
  19  0.281066      -1.26917      -208.362       208.362       1619.43       1827.79    
  20  0.220512      -1.51180      -248.196       248.196       1613.40       1861.60    
  21  0.389846     -0.942004      -154.651       154.651       1509.02       1663.67    
  22  0.660048     -0.415443      -68.2043       68.2043       1679.68       1747.88    
  23  0.150026      -1.89695      -311.427       311.427       1322.33       1633.76    
  24  0.113767      -2.17360      -356.845       356.845       1585.46       1942.30    
  25  0.810589     -0.209994      -34.4752       34.4752       1785.78       1820.25    
  26  0.247911      -1.39468      -228.969       228.969       1645.25       1874.22    
  27  0.408875     -0.894345      -146.827       146.827       1371.15       1517.97    
  28  0.310528      -1.16948      -191.997       191.997       1682.39       1874.39    
  29  0.663027     -0.410939      -67.4649       67.4649       1817.15       1884.61    
  30  0.798362     -0.225193      -36.9704       36.9704       1601.65       1638.62    
  31  0.564885     -0.571133      -93.7643       93.7643       1598.76       1692.52    
  32  0.473510E-02  -5.35275      -878.774       878.774       1601.24       2480.02    
  33  0.933475E-01  -2.37143      -389.323       389.323       1742.63       2131.95    
  34  0.931702     -0.707423E-01  -11.6139       11.6139       1494.30       1505.91    
  35  0.341741      -1.07370      -176.272       176.272       1859.89       2036.17    
  36  0.171330      -1.76417      -289.627       289.627       1837.29       2126.92    
  37  0.355860      -1.03322      -169.626       169.626       1814.84       1984.46    
  38  0.469639     -0.755790      -124.080       124.080       2065.12       2189.20    
  39  0.805376     -0.216446      -35.5344       35.5344       2046.93       2082.46    
  40  0.651615     -0.428301      -70.3153       70.3153       1822.31       1892.62    
  41  0.126831      -2.06490      -338.999       338.999       1800.44       2139.44    
  42  0.715737     -0.334442      -54.9062       54.9062       2063.42       2118.32    
  43  0.444007     -0.811915      -133.294       133.294       2188.96       2322.26    
  44  0.887105     -0.119791      -19.6664       19.6664       1461.21       1480.87    
  45  0.492139     -0.708993      -116.397       116.397       2109.99       2226.39    
  46  0.590315     -0.527098      -86.5349       86.5349       2188.28       2274.82    
  47  0.313130      -1.16114      -190.626       190.626       2197.16       2387.79    
  48  0.824070     -0.193500      -31.7674       31.7674       1671.58       1703.35    
  49  0.785026     -0.242039      -39.7361       39.7361       1539.99       1579.73    
loop,thermsimp(1:2)       81   214.942       21.1238    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165       1264.10         68.11          1.21         39.98          1.54          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    166       1369.22         68.12          1.20         39.59          1.70          0.05        110.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1264.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       81
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       82
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      165     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -712.951       712.951       1184.14       1897.09    
   2  0.906957E-01  -2.40025      -394.054       394.054       1217.29       1611.34    
   3  0.973677     -0.266758E-01  -4.37944       4.37944       1182.60       1186.98    
   4  0.764409     -0.268653      -44.1053       44.1053       1263.56       1307.67    
   5  0.647718     -0.434300      -71.3001       71.3001       1236.30       1307.60    
   6  0.450945     -0.796410      -130.748       130.748       1200.47       1331.22    
   7  0.342138      -1.07254      -176.082       176.082       1284.82       1460.90    
   8  0.491560     -0.710170      -116.590       116.590       1220.84       1337.43    
   9  0.728901     -0.316218      -51.9142       51.9142       1249.11       1301.03    
  10  0.361124      -1.01853      -167.215       167.215       1187.73       1354.94    
  11  0.187026      -1.67651      -275.236       275.236       1345.10       1620.34    
  12  0.560514     -0.578901      -95.0396       95.0396       1320.29       1415.33    
  13  0.218776      -1.51971      -249.494       249.494       1386.94       1636.43    
  14  0.109271      -2.21392      -363.465       363.465       1461.21       1824.67    
  15  0.263420E-01  -3.63659      -597.028       597.028       1494.30       2091.33    
  16  0.654642     -0.423667      -69.5544       69.5544       1371.15       1440.70    
  17  0.975959     -0.243343E-01  -3.99501       3.99501       1246.59       1250.58    
  18  0.107212      -2.23295      -366.588       366.588       1539.99       1906.58    
  19  0.972340     -0.280494E-01  -4.60494       4.60494       1398.81       1403.42    
  20  0.259158      -1.35032      -221.685       221.685       1428.51       1650.20    
  21  0.889970     -0.116568      -19.1372       19.1372       1458.41       1477.54    
  22  0.956672     -0.442943E-01  -7.27190       7.27190       1322.33       1329.60    
  23  0.299261      -1.20644      -198.064       198.064       1601.65       1799.71    
  24  0.114836      -2.16425      -355.310       355.310       1509.02       1864.33    
  25  0.728848     -0.316291      -51.9262       51.9262       1598.76       1650.68    
  26  0.650336     -0.430267      -70.6379       70.6379       1671.58       1742.22    
  27  0.816983     -0.202137      -33.1854       33.1854       1679.68       1712.87    
  28  0.507860     -0.677550      -111.235       111.235       1785.78       1897.01    
  29  0.920661     -0.826634E-01  -13.5710       13.5710       1619.43       1633.00    
  30  0.253772      -1.37132      -225.133       225.133       1613.40       1838.53    
  31  0.667512     -0.404198      -66.3581       66.3581       1645.25       1711.61    
  32  0.772715     -0.257844      -42.3309       42.3309       1682.39       1724.72    
  33  0.757620     -0.277573      -45.5698       45.5698       1817.15       1862.72    
  34  0.776421     -0.253060      -41.5455       41.5455       1822.31       1863.86    
  35  0.886642     -0.120314      -19.7523       19.7523       1512.53       1532.28    
  36  0.238693E-01  -3.73516      -613.210       613.210       1585.46       2198.67    
  37  0.303957      -1.19087      -195.508       195.508       1814.84       2010.35    
  38  0.875267     -0.133226      -21.8721       21.8721       1859.89       1881.76    
  39  0.144246      -1.93624      -317.877       317.877       2046.93       2364.81    
  40  0.993963     -0.605564E-02 -0.994169      0.994169       2063.42       2064.41    
  41  0.172168      -1.75928      -288.826       288.826       1837.29       2126.12    
  42  0.979713     -0.204952E-01  -3.36475       3.36475       1742.63       1746.00    
  43  0.938694     -0.632658E-01  -10.3865       10.3865       1800.44       1810.83    
  44  0.716061     -0.333990      -54.8320       54.8320       2065.12       2119.95    
  45  0.764601     -0.268402      -44.0642       44.0642       2109.99       2154.05    
  46  0.546951     -0.603396      -99.0610       99.0610       2188.28       2287.34    
  47  0.104442      -2.25912      -370.885       370.885       2188.96       2559.85    
  48  0.669980     -0.400508      -65.7523       65.7523       2197.16       2262.91    
  49  0.255048      -1.36630      -224.309       224.309       1264.10       1488.41    
loop,thermsimp(1:2)       82   712.951       394.054    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167       1183.34         68.20          1.22         40.02          1.27          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    168       1598.73         67.97          1.12         39.52          1.89          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1183.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       82
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       83
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      167     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -81.3830       81.3830       1182.60       1263.98    
   2  0.266275      -1.32323      -217.237       217.237       1246.59       1463.82    
   3  0.545538     -0.605984      -99.4858       99.4858       1249.11       1348.60    
   4  0.196234      -1.62845      -267.346       267.346       1236.30       1503.64    
   5  0.786411     -0.240275      -39.4466       39.4466       1263.56       1303.01    
   6  0.453912     -0.789853      -129.672       129.672       1322.33       1452.00    
   7  0.900549     -0.104751      -17.1972       17.1972       1200.47       1217.67    
   8  0.339919      -1.07905      -177.150       177.150       1220.84       1397.99    
   9  0.511643     -0.670128      -110.016       110.016       1187.73       1297.74    
  10  0.628202     -0.464894      -76.3227       76.3227       1398.81       1475.13    
  11  0.672886E-01  -2.69876      -443.063       443.063       1320.29       1763.36    
  12  0.518493     -0.656829      -107.833       107.833       1371.15       1478.98    
  13  0.994926     -0.508642E-02 -0.835049      0.835049       1284.82       1285.65    
  14  0.733191     -0.310349      -50.9507       50.9507       1458.41       1509.36    
  15  0.952818     -0.483318E-01  -7.93475       7.93475       1264.10       1272.03    
  16  0.735955     -0.306586      -50.3330       50.3330       1512.53       1562.86    
  17  0.743149     -0.296859      -48.7360       48.7360       1217.29       1266.02    
  18  0.549375     -0.598975      -98.3351       98.3351       1345.10       1443.44    
  19  0.355140      -1.03524      -169.958       169.958       1619.43       1789.38    
  20  0.482165     -0.729469      -119.759       119.759       1386.94       1506.70    
  21  0.577197     -0.549571      -90.2244       90.2244       1428.51       1518.74    
  22  0.107316E-01  -4.53456      -744.450       744.450       1598.76       2343.21    
  23  0.923969     -0.790764E-01  -12.9822       12.9822       1645.25       1658.24    
  24  0.810451     -0.210164      -34.5031       34.5031       1679.68       1714.18    
  25  0.143346      -1.94249      -318.903       318.903       1682.39       2001.30    
  26  0.994184     -0.583318E-02 -0.957648      0.957648       1671.58       1672.54    
  27  0.870737     -0.138415      -22.7239       22.7239       1742.63       1765.35    
  28  0.970691     -0.297469E-01  -4.88362       4.88362       1601.65       1606.53    
  29  0.351269      -1.04620      -171.758       171.758       1800.44       1972.20    
  30  0.464982     -0.765756      -125.716       125.716       1461.21       1586.92    
  31  0.921785     -0.814432E-01  -13.3707       13.3707       1613.40       1626.77    
  32  0.110512      -2.20263      -361.611       361.611       1817.15       2178.76    
  33  0.261408      -1.34167      -220.265       220.265       1822.31       2042.58    
  34  0.908908     -0.955118E-01  -15.6804       15.6804       1509.02       1524.70    
  35  0.819412     -0.199168      -32.6979       32.6979       1859.89       1892.59    
  36  0.466482     -0.762536      -125.187       125.187       1785.78       1910.97    
  37  0.717237     -0.332349      -54.5625       54.5625       1184.14       1238.70    
  38  0.802331     -0.220234      -36.1563       36.1563       1539.99       1576.15    
  39  0.949390     -0.519355E-01  -8.52637       8.52637       1814.84       1823.36    
  40  0.258511      -1.35282      -222.095       222.095       2063.42       2285.51    
  41  0.270423      -1.30777      -214.699       214.699       1494.30       1709.00    
  42  0.366439      -1.00392      -164.817       164.817       2065.12       2229.94    
  43  0.934403     -0.678476E-01  -11.1387       11.1387       1837.29       1848.43    
  44  0.956654     -0.443133E-01  -7.27502       7.27502       2109.99       2117.26    
  45  0.377790     -0.973417      -159.808       159.808       1585.46       1745.27    
  46  0.203667      -1.59127      -261.243       261.243       2197.16       2458.40    
  47  0.673892     -0.394685      -64.7963       64.7963       2188.28       2253.08    
  48  0.347380      -1.05734      -173.585       173.585       2046.93       2220.52    
  49  0.144339      -1.93559      -317.771       317.771       1183.34       1501.11    
loop,thermsimp(1:2)       83   81.3830       217.237    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169       1197.08         68.14          1.20         39.55          1.55          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    170       1685.65         68.05          1.16         39.61          1.72          0.05        110.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1197.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       83
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       84
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      169     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -91.5295       91.5295       1200.47       1292.00    
   2  0.468879     -0.757411      -124.346       124.346       1184.14       1308.49    
   3  0.886741E-01  -2.42279      -397.755       397.755       1182.60       1580.35    
   4  0.211783      -1.55219      -254.827       254.827       1217.29       1472.11    
   5  0.573306     -0.556336      -91.3349       91.3349       1264.10       1355.43    
   6  0.401711     -0.912021      -149.729       149.729       1284.82       1434.54    
   7  0.505706     -0.681800      -111.933       111.933       1187.73       1299.66    
   8  0.603045     -0.505763      -83.0324       83.0324       1263.56       1346.59    
   9  0.696575     -0.361580      -59.3615       59.3615       1249.11       1308.47    
  10  0.294614      -1.22209      -200.633       200.633       1220.84       1421.47    
  11  0.527550     -0.639511      -104.990       104.990       1345.10       1450.09    
  12  0.657157     -0.419832      -68.9248       68.9248       1322.33       1391.26    
  13  0.627866     -0.465428      -76.4104       76.4104       1246.59       1323.00    
  14  0.993353E-02  -4.61184      -757.136       757.136       1398.81       2155.95    
  15  0.885166E-01  -2.42456      -398.047       398.047       1371.15       1769.19    
  16  0.265764      -1.32515      -217.553       217.553       1183.34       1400.89    
  17  0.446403     -0.806534      -132.411       132.411       1236.30       1368.71    
  18  0.287864      -1.24527      -204.439       204.439       1386.94       1591.38    
  19  0.926928E-01  -2.37846      -390.478       390.478       1458.41       1848.89    
  20  0.394849     -0.929252      -152.558       152.558       1428.51       1581.07    
  21  0.540746     -0.614805      -100.934       100.934       1509.02       1609.95    
  22  0.846435     -0.166721      -27.3711       27.3711       1512.53       1539.90    
  23  0.417037     -0.874580      -143.582       143.582       1539.99       1683.57    
  24  0.210713      -1.55726      -255.659       255.659       1461.21       1716.87    
  25  0.764669     -0.268312      -44.0494       44.0494       1601.65       1645.70    
  26  0.219471E-01  -3.81912      -626.994       626.994       1613.40       2240.40    
  27  0.200728      -1.60581      -263.629       263.629       1645.25       1908.88    
  28  0.572660     -0.557463      -91.5201       91.5201       1671.58       1763.10    
  29  0.599083E-01  -2.81494      -462.135       462.135       1494.30       1956.43    
  30  0.214614      -1.53891      -252.647       252.647       1679.68       1932.33    
  31  0.489389     -0.714598      -117.317       117.317       1585.46       1702.78    
  32  0.162616      -1.81636      -298.197       298.197       1320.29       1618.49    
  33  0.710022     -0.342459      -56.2223       56.2223       1742.63       1798.85    
  34  0.753583     -0.282916      -46.4470       46.4470       1619.43       1665.87    
  35  0.743317     -0.296633      -48.6989       48.6989       1814.84       1863.54    
  36  0.155416      -1.86165      -305.631       305.631       1837.29       2142.92    
  37  0.643355     -0.441059      -72.4097       72.4097       1859.89       1932.30    
  38  0.656098     -0.421444      -69.1895       69.1895       1785.78       1854.97    
  39  0.327550      -1.11611      -183.235       183.235       1800.44       1983.67    
  40  0.192244      -1.64899      -270.719       270.719       1682.39       1953.11    
  41  0.433590     -0.835657      -137.192       137.192       1822.31       1959.50    
  42  0.788561     -0.237545      -38.9984       38.9984       2109.99       2148.99    
  43  0.978028     -0.222173E-01  -3.64747       3.64747       1817.15       1820.80    
  44  0.110322      -2.20435      -361.894       361.894       2046.93       2408.82    
  45  0.795332     -0.228995      -37.5947       37.5947       2065.12       2102.72    
  46  0.497518E-01  -3.00071      -492.634       492.634       2188.28       2680.92    
  47  0.852459     -0.159631      -26.2069       26.2069       2063.42       2089.63    
  48  0.133240      -2.01560      -330.906       330.906       1598.76       1929.66    
  49  0.671163     -0.398743      -65.4626       65.4626       1197.08       1262.54    
loop,thermsimp(1:2)       84   91.5295       124.346    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171       1199.51         68.11          1.18         39.62          1.80          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172       1976.45         67.87          1.11         39.62          2.00          0.05        110.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1199.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       84
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       85
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      171     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -266.291       266.291       1197.08       1463.37    
   2  0.793097     -0.231809      -38.0567       38.0567       1200.47       1238.53    
   3  0.261081      -1.34293      -220.471       220.471       1187.73       1408.20    
   4  0.912198     -0.918984E-01  -15.0872       15.0872       1249.11       1264.20    
   5  0.493539     -0.706153      -115.931       115.931       1184.14       1300.07    
   6  0.721001     -0.327115      -53.7032       53.7032       1246.59       1300.29    
   7  0.578790     -0.546816      -89.7721       89.7721       1263.56       1353.33    
   8  0.684127     -0.379612      -62.3218       62.3218       1264.10       1326.42    
   9  0.627712     -0.465674      -76.4508       76.4508       1236.30       1312.75    
  10  0.858540     -0.152522      -25.0399       25.0399       1322.33       1347.37    
  11  0.712254E-01  -2.64191      -433.728       433.728       1183.34       1617.06    
  12  0.927250     -0.755316E-01  -12.4002       12.4002       1220.84       1233.24    
  13  0.458073     -0.780727      -128.174       128.174       1284.82       1412.99    
  14  0.940004     -0.618714E-01  -10.1576       10.1576       1345.10       1355.26    
  15  0.322549      -1.13150      -185.761       185.761       1217.29       1403.05    
  16  0.939473     -0.624358E-01  -10.2502       10.2502       1512.53       1522.78    
  17  0.726080     -0.320095      -52.5508       52.5508       1182.60       1235.15    
  18  0.602088E-02  -5.11252      -839.335       839.335       1428.51       2267.85    
  19  0.735289     -0.307492      -50.4817       50.4817       1386.94       1437.42    
  20  0.847617     -0.165326      -27.1420       27.1420       1509.02       1536.16    
  21  0.747190E-01  -2.59402      -425.866       425.866       1320.29       1746.16    
  22  0.248374      -1.39282      -228.662       228.662       1601.65       1830.31    
  23  0.350184      -1.04930      -172.265       172.265       1619.43       1791.69    
  24  0.327739E-03  -8.02329      -1317.20       1317.20       1539.99       2857.19    
  25  0.130012      -2.04013      -334.933       334.933       1585.46       1920.39    
  26  0.609791     -0.494639      -81.2061       81.2061       1461.21       1542.41    
  27  0.793414     -0.231410      -37.9912       37.9912       1671.58       1709.57    
  28  0.962567     -0.381519E-01  -6.26349       6.26349       1371.15       1377.41    
  29  0.499469     -0.694211      -113.970       113.970       1742.63       1856.60    
  30  0.887491     -0.119357      -19.5952       19.5952       1817.15       1836.74    
  31  0.136374      -1.99236      -327.090       327.090       1458.41       1785.50    
  32  0.292356      -1.22978      -201.896       201.896       1785.78       1987.67    
  33  0.301564      -1.19877      -196.806       196.806       1814.84       2011.64    
  34  0.352543      -1.04258      -171.163       171.163       1645.25       1816.42    
  35  0.483726     -0.726236      -119.228       119.228       1598.76       1717.99    
  36  0.410499     -0.890381      -146.176       146.176       1859.89       2006.07    
  37  0.458111     -0.780644      -128.160       128.160       1679.68       1807.84    
  38  0.670071     -0.400372      -65.7301       65.7301       1682.39       1748.12    
  39  0.175486      -1.74020      -285.692       285.692       1494.30       1779.99    
  40  0.798907     -0.224511      -36.8585       36.8585       1822.31       1859.17    
  41  0.270487      -1.30753      -214.661       214.661       1800.44       2015.10    
  42  0.480368     -0.733202      -120.371       120.371       2063.42       2183.79    
  43  0.658406     -0.417933      -68.6131       68.6131       2065.12       2133.74    
  44  0.937976     -0.640304E-01  -10.5120       10.5120       1837.29       1847.80    
  45  0.710083     -0.342373      -56.2082       56.2082       2109.99       2166.20    
  46  0.567340     -0.566797      -93.0524       93.0524       1398.81       1491.86    
  47  0.201426      -1.60233      -263.059       263.059       1613.40       1876.46    
  48  0.660313     -0.415042      -68.1384       68.1384       2046.93       2115.07    
  49  0.524008     -0.646249      -106.096       106.096       1199.51       1305.61    
loop,thermsimp(1:2)       85   266.291       38.0567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173       1971.27         67.88          1.18         39.87          1.72          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1971.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       85
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       86
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      172     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -125.752       125.752       1220.84       1346.59    
   2  0.948887     -0.524654E-01  -8.61337       8.61337       1182.60       1191.21    
   3  0.532332     -0.630488      -103.509       103.509       1200.47       1303.98    
   4  0.374267     -0.982785      -161.346       161.346       1249.11       1410.46    
   5  0.694531     -0.364519      -59.8439       59.8439       1184.14       1243.98    
   6  0.414371     -0.880994      -144.635       144.635       1246.59       1391.22    
   7  0.208827E-01  -3.86883      -635.155       635.155       1199.51       1834.66    
   8  0.627187     -0.466511      -76.5881       76.5881       1236.30       1312.88    
   9  0.148799E-01  -4.20774      -690.795       690.795       1264.10       1954.89    
  10  0.809008     -0.211946      -34.7957       34.7957       1322.33       1357.13    
  11  0.647680     -0.434359      -71.3098       71.3098       1263.56       1334.87    
  12  0.289351      -1.24012      -203.593       203.593       1345.10       1548.70    
  13  0.222457      -1.50302      -246.755       246.755       1371.15       1617.90    
  14  0.374268     -0.982782      -161.346       161.346       1217.29       1378.63    
  15  0.785765     -0.241097      -39.5815       39.5815       1187.73       1227.31    
  16  0.298051      -1.21049      -198.729       198.729       1284.82       1483.54    
  17  0.725075     -0.321480      -52.7782       52.7782       1386.94       1439.72    
  18  0.386364     -0.950976      -156.124       156.124       1197.08       1353.20    
  19  0.631686     -0.459363      -75.4146       75.4146       1398.81       1474.23    
  20  0.688282     -0.373557      -61.3278       61.3278       1512.53       1573.86    
  21  0.373817     -0.983990      -161.544       161.544       1509.02       1670.56    
  22  0.219845      -1.51483      -248.694       248.694       1461.21       1709.90    
  23  0.926271     -0.765889E-01  -12.5738       12.5738       1183.34       1195.91    
  24  0.618127     -0.481061      -78.9770       78.9770       1671.58       1750.56    
  25  0.176216      -1.73604      -285.010       285.010       1598.76       1883.77    
  26  0.742943     -0.297136      -48.7815       48.7815       1320.29       1369.07    
  27  0.357690      -1.02809      -168.784       168.784       1682.39       1851.18    
  28  0.478359     -0.737394      -121.060       121.060       1494.30       1615.36    
  29  0.395976     -0.926401      -152.089       152.089       1458.41       1610.50    
  30  0.803186     -0.219169      -35.9815       35.9815       1619.43       1655.41    
  31  0.231845      -1.46168      -239.968       239.968       1679.68       1919.65    
  32  0.808968     -0.211996      -34.8039       34.8039       1645.25       1680.06    
  33  0.579217     -0.546078      -89.6509       89.6509       1601.65       1691.30    
  34  0.384357     -0.956183      -156.979       156.979       1817.15       1974.13    
  35  0.856367     -0.155057      -25.4560       25.4560       1837.29       1862.75    
  36  0.265661      -1.32553      -217.616       217.616       1742.63       1960.25    
  37  0.288915      -1.24162      -203.840       203.840       1822.31       2026.15    
  38  0.224915      -1.49203      -244.951       244.951       1613.40       1858.35    
  39  0.685944     -0.376959      -61.8863       61.8863       1585.46       1647.34    
  40  0.265936      -1.32450      -217.446       217.446       1785.78       2003.22    
  41  0.412966     -0.884389      -145.192       145.192       1859.89       2005.08    
  42  0.440796     -0.819173      -134.486       134.486       1814.84       1949.32    
  43  0.572522     -0.557705      -91.5597       91.5597       1800.44       1892.00    
  44  0.798412     -0.225131      -36.9603       36.9603       2046.93       2083.89    
  45  0.127097      -2.06281      -338.656       338.656       2065.12       2403.78    
  46  0.243397      -1.41306      -231.986       231.986       2109.99       2341.97    
  47  0.322195      -1.13260      -185.941       185.941       2063.42       2249.36    
  48  0.512728     -0.668011      -109.669       109.669       1428.51       1538.18    
  49  0.786191     -0.240556      -39.4926       39.4926       1971.27       2010.76    
loop,thermsimp(1:2)       86   125.752       8.61337    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174       1165.80         68.02          1.15         39.88          1.94          0.05        111.04
Just calling func    0   0        111.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175       1366.89         68.22          1.12         40.29          1.15          0.05        110.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1165.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       86
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       87
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      174     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -278.836       278.836       1182.60       1461.43    
   2  0.721345     -0.326637      -53.6248       53.6248       1183.34       1236.96    
   3  0.842493     -0.171390      -28.1374       28.1374       1187.73       1215.86    
   4  0.260540      -1.34500      -220.811       220.811       1184.14       1404.95    
   5  0.782605     -0.245127      -40.2431       40.2431       1200.47       1240.71    
   6  0.208492      -1.56785      -257.398       257.398       1236.30       1493.69    
   7  0.290568E-01  -3.53850      -580.924       580.924       1263.56       1844.48    
   8  0.673682     -0.394997      -64.8475       64.8475       1220.84       1285.69    
   9  0.399393     -0.917808      -150.679       150.679       1197.08       1347.76    
  10  0.966971     -0.335863E-01  -5.51395       5.51395       1322.33       1327.85    
  11  0.390645     -0.939956      -154.315       154.315       1320.29       1474.61    
  12  0.259548      -1.34881      -221.438       221.438       1217.29       1438.72    
  13  0.260765      -1.34413      -220.670       220.670       1246.59       1467.25    
  14  0.110601E-01  -4.50441      -739.500       739.500       1249.11       1988.61    
  15  0.727710     -0.317852      -52.1825       52.1825       1386.94       1439.12    
  16  0.717076     -0.332574      -54.5995       54.5995       1398.81       1453.41    
  17  0.612129     -0.490811      -80.5777       80.5777       1284.82       1365.39    
  18  0.589376     -0.528691      -86.7964       86.7964       1428.51       1515.31    
  19  0.541615     -0.613199      -100.670       100.670       1345.10       1445.77    
  20  0.330403      -1.10744      -181.811       181.811       1512.53       1694.34    
  21  0.229530      -1.47172      -241.616       241.616       1458.41       1700.02    
  22  0.564010     -0.572684      -94.0189       94.0189       1494.30       1588.32    
  23  0.454226     -0.789161      -129.558       129.558       1371.15       1500.71    
  24  0.579528     -0.545541      -89.5628       89.5628       1585.46       1675.02    
  25  0.245500      -1.40446      -230.573       230.573       1619.43       1850.00    
  26  0.708019     -0.345284      -56.6860       56.6860       1509.02       1565.70    
  27  0.300215      -1.20326      -197.542       197.542       1645.25       1842.80    
  28  0.721461     -0.326478      -53.5986       53.5986       1601.65       1655.25    
  29  0.326772      -1.11849      -183.626       183.626       1461.21       1644.83    
  30  0.580879     -0.543212      -89.1805       89.1805       1671.58       1760.76    
  31  0.963075     -0.376241E-01  -6.17684       6.17684       1199.51       1205.69    
  32  0.656935     -0.420170      -68.9802       68.9802       1682.39       1751.37    
  33  0.908335     -0.961416E-01  -15.7838       15.7838       1613.40       1629.19    
  34  0.765938     -0.266654      -43.7773       43.7773       1837.29       1881.07    
  35  0.497301     -0.698561      -114.684       114.684       1598.76       1713.44    
  36  0.833603     -0.181997      -29.8789       29.8789       1800.44       1830.32    
  37  0.433057     -0.836886      -137.393       137.393       1679.68       1817.07    
  38  0.349547      -1.05112      -172.564       172.564       1814.84       1987.40    
  39  0.142838      -1.94604      -319.487       319.487       1264.10       1583.59    
  40  0.326780      -1.11847      -183.622       183.622       1742.63       1926.25    
  41  0.707709     -0.345723      -56.7582       56.7582       1817.15       1873.91    
  42  0.914339     -0.895538E-01  -14.7023       14.7023       1785.78       1800.48    
  43  0.392800     -0.934454      -153.411       153.411       1859.89       2013.30    
  44  0.434772     -0.832933      -136.745       136.745       1971.27       2108.01    
  45  0.229545      -1.47165      -241.605       241.605       1822.31       2063.91    
  46  0.661281     -0.413577      -67.8979       67.8979       2046.93       2114.83    
  47  0.459966     -0.776602      -127.497       127.497       2063.42       2190.92    
  48  0.352439      -1.04288      -171.212       171.212       2109.99       2281.20    
  49  0.490345     -0.712647      -116.997       116.997       1165.80       1282.80    
loop,thermsimp(1:2)       87   278.836       53.6248    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176       1339.91         68.17          1.19         39.54          1.78          0.05        110.74
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177       2807.81         68.09          1.12         39.65          1.98          0.05        110.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1339.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       87
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       88
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      176     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -248.444       248.444       1199.51       1447.95    
   2  0.246752E-01  -3.70196      -607.759       607.759       1187.73       1795.49    
   3  0.679039     -0.387076      -63.5472       63.5472       1183.34       1246.88    
   4  0.709027     -0.343862      -56.4526       56.4526       1200.47       1256.92    
   5  0.577754     -0.548608      -90.0663       90.0663       1165.80       1255.87    
   6  0.738694     -0.302871      -49.7231       49.7231       1220.84       1270.56    
   7  0.181723      -1.70527      -279.959       279.959       1322.33       1602.29    
   8  0.103748      -2.26579      -371.980       371.980       1197.08       1569.06    
   9  0.456811E-02  -5.38866      -884.668       884.668       1284.82       2169.48    
  10  0.303247      -1.19321      -195.892       195.892       1184.14       1380.03    
  11  0.284736      -1.25619      -206.232       206.232       1217.29       1423.52    
  12  0.900494     -0.104812      -17.2072       17.2072       1386.94       1404.14    
  13  0.691792     -0.368470      -60.4925       60.4925       1345.10       1405.60    
  14  0.502714     -0.687735      -112.907       112.907       1398.81       1511.72    
  15  0.305219      -1.18673      -194.828       194.828       1182.60       1377.43    
  16  0.412005     -0.886720      -145.575       145.575       1246.59       1392.16    
  17  0.412225     -0.886186      -145.487       145.487       1320.29       1465.78    
  18  0.121697      -2.10622      -345.784       345.784       1236.30       1582.08    
  19  0.465374     -0.764915      -125.578       125.578       1371.15       1496.72    
  20  0.273016      -1.29823      -213.133       213.133       1428.51       1641.65    
  21  0.502763     -0.687636      -112.891       112.891       1509.02       1621.91    
  22  0.516442     -0.660793      -108.484       108.484       1264.10       1372.58    
  23  0.554333     -0.589990      -96.8601       96.8601       1494.30       1591.16    
  24  0.192397E-01  -3.95078      -648.609       648.609       1613.40       2262.01    
  25  0.451279E-01  -3.09825      -508.648       508.648       1461.21       1969.85    
  26  0.457340     -0.782327      -128.437       128.437       1601.65       1730.09    
  27  0.325184      -1.12336      -184.425       184.425       1585.46       1769.88    
  28  0.700952     -0.355315      -58.3329       58.3329       1512.53       1570.86    
  29  0.961087     -0.396906E-01  -6.51610       6.51610       1458.41       1464.92    
  30  0.195966E-02  -6.23498      -1023.61       1023.61       1598.76       2622.37    
  31  0.766376     -0.266082      -43.6834       43.6834       1682.39       1726.08    
  32  0.398846     -0.919180      -150.904       150.904       1671.58       1822.48    
  33  0.675249     -0.392674      -64.4662       64.4662       1785.78       1850.24    
  34  0.189468      -1.66354      -273.107       273.107       1679.68       1952.79    
  35  0.444608     -0.810562      -133.072       133.072       1800.44       1933.51    
  36  0.514006     -0.665520      -109.260       109.260       1645.25       1754.51    
  37  0.575199     -0.553039      -90.7937       90.7937       1263.56       1354.35    
  38  0.121449      -2.10826      -346.119       346.119       1619.43       1965.55    
  39  0.209130      -1.56480      -256.897       256.897       1817.15       2074.04    
  40  0.466284E-01  -3.06555      -503.278       503.278       1837.29       2340.57    
  41  0.386630E-01  -3.25287      -534.032       534.032       1742.63       2276.66    
  42  0.335751E-01  -3.39397      -557.196       557.196       1814.84       2372.03    
  43  0.878126     -0.129965      -21.3367       21.3367       1249.11       1270.45    
  44  0.652938     -0.426273      -69.9822       69.9822       1859.89       1929.87    
  45  0.932456E-01  -2.37252      -389.502       389.502       1822.31       2211.81    
  46  0.662683     -0.411458      -67.5501       67.5501       1971.27       2038.82    
  47  0.204704      -1.58619      -260.409       260.409       2046.93       2307.34    
  48  0.985446     -0.146609E-01  -2.40692       2.40692       2063.42       2065.83    
  49  0.105847      -2.24576      -368.692       368.692       1339.91       1708.61    
loop,thermsimp(1:2)       88   248.444       607.759    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178       1609.02         67.60          1.08         38.53          3.52          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1609.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       88
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       89
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      177     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -21.5922       21.5922       1183.34       1204.93    
   2  0.765270     -0.267527      -43.9205       43.9205       1165.80       1209.72    
   3  0.215687      -1.53393      -251.829       251.829       1200.47       1452.30    
   4  0.999601E-01  -2.30298      -378.086       378.086       1249.11       1627.20    
   5  0.706519     -0.347405      -57.0343       57.0343       1220.84       1277.87    
   6  0.201358      -1.60267      -263.114       263.114       1263.56       1526.67    
   7  0.450677     -0.797005      -130.846       130.846       1264.10       1394.94    
   8  0.897557     -0.108078      -17.7435       17.7435       1182.60       1200.34    
   9  0.161166      -1.82532      -299.667       299.667       1184.14       1483.81    
  10  0.972556E-01  -2.33041      -382.589       382.589       1246.59       1629.17    
  11  0.742112     -0.298255      -48.9652       48.9652       1386.94       1435.90    
  12  0.172377      -1.75807      -288.626       288.626       1345.10       1633.73    
  13  0.658751     -0.417410      -68.5271       68.5271       1217.29       1285.81    
  14  0.725340     -0.321114      -52.7181       52.7181       1199.51       1252.23    
  15  0.501488     -0.690175      -113.308       113.308       1458.41       1571.72    
  16  0.845372     -0.167978      -27.5774       27.5774       1320.29       1347.87    
  17  0.132369      -2.02216      -331.983       331.983       1371.15       1703.13    
  18  0.734515E-01  -2.61113      -428.675       428.675       1398.81       1827.49    
  19  0.391205     -0.938523      -154.080       154.080       1197.08       1351.16    
  20  0.376983     -0.975555      -160.159       160.159       1512.53       1672.69    
  21  0.315463      -1.15371      -189.408       189.408       1236.30       1425.70    
  22  0.267113      -1.32008      -216.721       216.721       1494.30       1711.02    
  23  0.965292     -0.353243E-01  -5.79928       5.79928       1322.33       1328.13    
  24  0.954592     -0.464714E-01  -7.62933       7.62933       1509.02       1516.65    
  25  0.992414     -0.761515E-02  -1.25020       1.25020       1428.51       1429.76    
  26  0.867953E-02  -4.74679      -779.291       779.291       1339.91       2119.21    
  27  0.829585     -0.186829      -30.6722       30.6722       1682.39       1713.06    
  28  0.349695      -1.05069      -172.495       172.495       1601.65       1774.14    
  29  0.673511     -0.395251      -64.8893       64.8893       1645.25       1710.14    
  30  0.340696      -1.07676      -176.775       176.775       1585.46       1762.23    
  31  0.558731     -0.582087      -95.5625       95.5625       1187.73       1283.29    
  32  0.747295     -0.291295      -47.8225       47.8225       1671.58       1719.40    
  33  0.123287      -2.09324      -343.653       343.653       1785.78       2129.43    
  34  0.355051      -1.03549      -169.999       169.999       1859.89       2029.89    
  35  0.511895     -0.669636      -109.936       109.936       1800.44       1910.37    
  36  0.571856E-01  -2.86145      -469.771       469.771       1679.68       2149.45    
  37  0.507517     -0.678226      -111.346       111.346       1619.43       1730.77    
  38  0.326770      -1.11850      -183.626       183.626       1461.21       1644.83    
  39  0.736001     -0.306523      -50.3226       50.3226       1971.27       2021.59    
  40  0.970046     -0.304120E-01  -4.99281       4.99281       2063.42       2068.41    
  41  0.673510     -0.395253      -64.8895       64.8895       1817.15       1882.04    
  42  0.335032      -1.09353      -179.527       179.527       1284.82       1464.34    
  43  0.872321E-01  -2.43918      -400.446       400.446       1822.31       2222.76    
  44  0.749956     -0.287741      -47.2391       47.2391       1613.40       1660.64    
  45  0.159001      -1.83884      -301.887       301.887       1742.63       2044.52    
  46  0.529687     -0.635468      -104.326       104.326       2046.93       2151.26    
  47  0.142415      -1.94901      -319.973       319.973       1837.29       2157.26    
  48  0.803387     -0.218919      -35.9404       35.9404       1814.84       1850.78    
  49  0.709133     -0.343713      -56.4281       56.4281       1609.02       1665.45    
loop,thermsimp(1:2)       89   21.5922       43.9205    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179       1487.59         68.35          1.25         39.40          1.69          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1487.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       89
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       90
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      178     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -303.579       303.579       1182.60       1486.18    
   2  0.894146     -0.111886      -18.3685       18.3685       1183.34       1201.71    
   3  0.721270     -0.326741      -53.6419       53.6419       1165.80       1219.44    
   4  0.536866     -0.622006      -102.116       102.116       1199.51       1301.63    
   5  0.418107     -0.872017      -143.161       143.161       1220.84       1364.00    
   6  0.391189     -0.938564      -154.086       154.086       1187.73       1341.81    
   7  0.799669     -0.223558      -36.7020       36.7020       1217.29       1253.99    
   8  0.595070     -0.519076      -85.2180       85.2180       1322.33       1407.55    
   9  0.384356E-03  -7.86394      -1291.04       1291.04       1320.29       2611.34    
  10  0.654302     -0.424187      -69.6398       69.6398       1197.08       1266.72    
  11  0.873355     -0.135413      -22.2311       22.2311       1264.10       1286.33    
  12  0.303212      -1.19332      -195.910       195.910       1236.30       1432.21    
  13  0.434159     -0.834344      -136.976       136.976       1428.51       1565.49    
  14  0.970825     -0.296089E-01  -4.86097       4.86097       1386.94       1391.80    
  15  0.405896     -0.901659      -148.027       148.027       1200.47       1348.50    
  16  0.250423      -1.38461      -227.314       227.314       1284.82       1512.13    
  17  0.517030     -0.659654      -108.297       108.297       1184.14       1292.44    
  18  0.165468      -1.79897      -295.342       295.342       1509.02       1804.36    
  19  0.679403     -0.386541      -63.4593       63.4593       1263.56       1327.02    
  20  0.554013     -0.590567      -96.9548       96.9548       1458.41       1555.36    
  21  0.211764E-01  -3.85487      -632.863       632.863       1249.11       1881.97    
  22  0.453828     -0.790038      -129.702       129.702       1246.59       1376.29    
  23  0.377409     -0.974426      -159.974       159.974       1345.10       1505.08    
  24  0.496879     -0.699408      -114.823       114.823       1461.21       1576.03    
  25  0.214619      -1.53889      -252.643       252.643       1613.40       1866.04    
  26  0.724154     -0.322751      -52.9868       52.9868       1609.02       1662.01    
  27  0.385609     -0.952932      -156.445       156.445       1512.53       1668.97    
  28  0.777864     -0.251204      -41.2407       41.2407       1371.15       1412.39    
  29  0.709283     -0.343500      -56.3932       56.3932       1645.25       1701.65    
  30  0.191760      -1.65151      -271.132       271.132       1494.30       1765.43    
  31  0.347616      -1.05666      -173.474       173.474       1682.39       1855.87    
  32  0.191581      -1.65244      -271.286       271.286       1671.58       1942.87    
  33  0.770989     -0.260081      -42.6982       42.6982       1619.43       1662.12    
  34  0.788566E-01  -2.54012      -417.018       417.018       1585.46       2002.48    
  35  0.229474      -1.47197      -241.656       241.656       1601.65       1843.31    
  36  0.339326      -1.08079      -177.436       177.436       1398.81       1576.25    
  37  0.220886      -1.51011      -247.918       247.918       1814.84       2062.76    
  38  0.223644      -1.49770      -245.881       245.881       1817.15       2063.03    
  39  0.138287      -1.97842      -324.802       324.802       1800.44       2125.24    
  40  0.796402     -0.227651      -37.3740       37.3740       1971.27       2008.64    
  41  0.104384      -2.25968      -370.977       370.977       1859.89       2230.87    
  42  0.919642     -0.837713E-01  -13.7529       13.7529       1742.63       1756.38    
  43  0.360767      -1.01952      -167.378       167.378       2063.42       2230.80    
  44  0.924300     -0.787181E-01  -12.9233       12.9233       1339.91       1352.84    
  45  0.561139     -0.577786      -94.8565       94.8565       1785.78       1880.63    
  46  0.509073E-01  -2.97775      -488.864       488.864       1679.68       2168.54    
  47  0.715469     -0.334817      -54.9678       54.9678       2046.93       2101.90    
  48  0.294040E-01  -3.52662      -578.974       578.974       1837.29       2416.26    
  49  0.264026E-02  -5.93688      -974.671       974.671       1487.59       2462.26    
loop,thermsimp(1:2)       90   303.579       18.3685    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180       1213.11         68.08          1.18         39.67          1.88          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181       1284.61         68.40          1.22         39.46          1.90          0.05        111.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    1284.6        3.236     -3.280      4.623     -102.6     0.4052    
                      0.2255     0.9709     -99.70      4.882      1.775    

                       3.404    -0.8716      1.830      6495.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.450      0.000      0.000      7000.      470.0    

                      -1.347     -6.769     -7.971     -7.920      9.079    

                      -5.325     -3.949      4411.      0.000     0.2624E+05



                       2059.      6407.      5577.      3163.      1284.    

                       3526.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.950     -1.629     -2.187     -2.109    -0.3807    

                     -0.3252      9.580      8.625    -0.1554E+05 -5.370    

                     -0.5614E-01 -2.484      8.965      9.166    -0.1969E+05



                      -6.000     0.4670     0.1131E-01  8.948      8.905    

                     -0.1944E+05 -6.000     -1.313    -0.6828      9.807    

                       9.384    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1213.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       90
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       91
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      180     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -373.352       373.352       1183.34       1556.69    
   2  0.846291     -0.166892      -27.3990       27.3990       1165.80       1193.20    
   3  0.167054      -1.78944      -293.776       293.776       1217.29       1511.06    
   4  0.786038     -0.240750      -39.5245       39.5245       1197.08       1236.60    
   5  0.680218     -0.385341      -63.2624       63.2624       1264.10       1327.36    
   6  0.843894     -0.169729      -27.8648       27.8648       1184.14       1212.00    
   7  0.295559      -1.21889      -200.108       200.108       1199.51       1399.62    
   8  0.383493     -0.958433      -157.348       157.348       1263.56       1420.91    
   9  0.867247     -0.142431      -23.3832       23.3832       1187.73       1211.11    
  10  0.241960      -1.41898      -232.958       232.958       1200.47       1433.43    
  11  0.486925     -0.719645      -118.146       118.146       1339.91       1458.06    
  12  0.750166     -0.287460      -47.1931       47.1931       1220.84       1268.03    
  13  0.507045     -0.679156      -111.499       111.499       1246.59       1358.08    
  14  0.237743      -1.43656      -235.844       235.844       1386.94       1622.78    
  15  0.256837E-01  -3.66190      -601.182       601.182       1322.33       1923.51    
  16  0.776460     -0.253010      -41.5372       41.5372       1371.15       1412.68    
  17  0.316300      -1.15106      -188.973       188.973       1236.30       1425.27    
  18  0.493161     -0.706919      -116.057       116.057       1182.60       1298.65    
  19  0.807271     -0.214096      -35.1487       35.1487       1345.10       1380.25    
  20  0.338915      -1.08201      -177.635       177.635       1284.82       1462.45    
  21  0.132986      -2.01751      -331.219       331.219       1458.41       1789.63    
  22  0.409975     -0.891659      -146.386       146.386       1428.51       1574.90    
  23  0.525021     -0.644317      -105.779       105.779       1461.21       1566.99    
  24  0.393064     -0.933783      -153.301       153.301       1398.81       1552.11    
  25  0.176068      -1.73689      -285.149       285.149       1609.02       1894.17    
  26  0.965490     -0.351191E-01  -5.76559       5.76559       1619.43       1625.19    
  27  0.387767     -0.947350      -155.529       155.529       1512.53       1668.06    
  28  0.936248     -0.658753E-01  -10.8149       10.8149       1645.25       1656.07    
  29  0.914720     -0.891370E-01  -14.6338       14.6338       1742.63       1757.26    
  30  0.332171      -1.10211      -180.935       180.935       1494.30       1675.23    
  31  0.845314E-01  -2.47063      -405.609       405.609       1509.02       1914.63    
  32  0.687741     -0.374343      -61.4568       61.4568       1601.65       1663.11    
  33  0.899776     -0.105610      -17.3382       17.3382       1682.39       1699.73    
  34  0.558791     -0.581980      -95.5450       95.5450       1613.40       1708.95    
  35  0.882799     -0.124658      -20.4654       20.4654       1785.78       1806.24    
  36  0.235569      -1.44575      -237.352       237.352       1249.11       1486.46    
  37  0.533400     -0.628484      -103.180       103.180       1671.58       1774.76    
  38  0.147169      -1.91617      -314.582       314.582       1585.46       1900.04    
  39  0.966208E-01  -2.33696      -383.664       383.664       1971.27       2354.93    
  40  0.952887     -0.482588E-01  -7.92276       7.92276       1814.84       1822.76    
  41  0.155551      -1.86078      -305.488       305.488       1817.15       2122.64    
  42  0.645067     -0.438401      -71.9734       71.9734       2046.93       2118.90    
  43  0.394254     -0.930759      -152.805       152.805       1800.44       1953.24    
  44  0.546893     -0.603501      -99.0783       99.0783       1679.68       1778.76    
  45  0.390314     -0.940803      -154.454       154.454       2063.42       2217.87    
  46  0.311561      -1.16616      -191.451       191.451       1859.89       2051.34    
  47  0.752427E-01  -2.58704      -424.720       424.720       1837.29       2262.01    
  48  0.144673      -1.93328      -317.392       317.392       1487.59       1804.98    
  49  0.297567      -1.21212      -198.996       198.996       1213.11       1412.10    
loop,thermsimp(1:2)       91   373.352       27.3990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182       1522.04         67.82          1.16         39.74          1.75          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1522.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       91
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       92
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      181     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -249.608       249.608       1165.80       1415.41    
   2  0.389473     -0.942961      -154.808       154.808       1187.73       1342.53    
   3  0.919121     -0.843378E-01  -13.8459       13.8459       1184.14       1197.99    
   4  0.970518     -0.299250E-01  -4.91286       4.91286       1197.08       1201.99    
   5  0.713317     -0.337830      -55.4623       55.4623       1220.84       1276.30    
   6  0.639607     -0.446902      -73.3690       73.3690       1182.60       1255.97    
   7  0.712661     -0.338749      -55.6132       55.6132       1264.10       1319.71    
   8  0.212311      -1.54970      -254.419       254.419       1246.59       1501.00    
   9  0.831769     -0.184200      -30.2406       30.2406       1345.10       1375.34    
  10  0.794875     -0.229571      -37.6891       37.6891       1199.51       1237.20    
  11  0.909815     -0.945137E-01  -15.5165       15.5165       1213.11       1228.62    
  12  0.753651E-01  -2.58541      -424.453       424.453       1371.15       1795.60    
  13  0.676081     -0.391442      -64.2640       64.2640       1263.56       1327.82    
  14  0.597437     -0.515107      -84.5663       84.5663       1236.30       1320.86    
  15  0.146947      -1.91768      -314.830       314.830       1200.47       1515.30    
  16  0.854910     -0.156760      -25.7356       25.7356       1339.91       1365.65    
  17  0.984999     -0.151146E-01  -2.48139       2.48139       1284.82       1287.30    
  18  0.533419     -0.628448      -103.174       103.174       1249.11       1352.28    
  19  0.383774     -0.957703      -157.228       157.228       1217.29       1374.51    
  20  0.691729     -0.368561      -60.5076       60.5076       1398.81       1459.32    
  21  0.313732E-01  -3.46180      -568.332       568.332       1183.34       1751.67    
  22  0.415635     -0.877947      -144.135       144.135       1461.21       1605.34    
  23  0.288746      -1.24221      -203.936       203.936       1428.51       1632.45    
  24  0.176464      -1.73464      -284.779       284.779       1386.94       1671.72    
  25  0.881312     -0.126344      -20.7422       20.7422       1619.43       1640.17    
  26  0.962783     -0.379267E-01  -6.22652       6.22652       1645.25       1651.48    
  27  0.415450     -0.878393      -144.208       144.208       1601.65       1745.86    
  28  0.271836      -1.30256      -213.844       213.844       1512.53       1726.37    
  29  0.926655     -0.761736E-01  -12.5056       12.5056       1494.30       1506.81    
  30  0.277790      -1.28089      -210.287       210.287       1682.39       1892.68    
  31  0.189974      -1.66087      -272.669       272.669       1613.40       1886.07    
  32  0.410540     -0.890281      -146.160       146.160       1742.63       1888.79    
  33  0.952387     -0.487839E-01  -8.00897       8.00897       1671.58       1679.59    
  34  0.896015     -0.109798      -18.0258       18.0258       1679.68       1697.71    
  35  0.121549E-01  -4.41002      -724.004       724.004       1458.41       2182.41    
  36  0.723911     -0.323087      -53.0420       53.0420       1487.59       1540.63    
  37  0.759053     -0.275683      -45.2596       45.2596       1785.78       1831.04    
  38  0.969929     -0.305320E-01  -5.01251       5.01251       1814.84       1819.85    
  39  0.852636     -0.159422      -26.1727       26.1727       1609.02       1635.19    
  40  0.730471     -0.314065      -51.5609       51.5609       1585.46       1637.02    
  41  0.528358     -0.637981      -104.739       104.739       1509.02       1613.76    
  42  0.404403     -0.905344      -148.632       148.632       1322.33       1470.96    
  43  0.232822      -1.45748      -239.278       239.278       1800.44       2039.72    
  44  0.847643     -0.165296      -27.1370       27.1370       1859.89       1887.03    
  45  0.429393E-01  -3.14797      -516.809       516.809       2046.93       2563.74    
  46  0.673157     -0.395777      -64.9757       64.9757       1817.15       1882.12    
  47  0.806068E-01  -2.51817      -413.414       413.414       2063.42       2476.83    
  48  0.926018     -0.768619E-01  -12.6186       12.6186       1837.29       1849.91    
  49  0.167973      -1.78395      -292.876       292.876       1522.04       1814.92    
loop,thermsimp(1:2)       92   249.608       154.808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183       1496.32         68.08          1.16         39.84          1.73          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184       1974.00         68.12          1.11         39.28          2.69          0.05        111.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1496.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       92
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       93
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      183     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -313.000       313.000       1184.14       1497.14    
   2  0.695074     -0.363738      -59.7157       59.7157       1197.08       1256.79    
   3  0.541180     -0.614003      -100.802       100.802       1213.11       1313.91    
   4  0.189791      -1.66183      -272.827       272.827       1199.51       1472.34    
   5  0.245553      -1.40424      -230.538       230.538       1182.60       1413.14    
   6  0.641474     -0.443986      -72.8903       72.8903       1220.84       1293.73    
   7  0.308462      -1.17616      -193.092       193.092       1284.82       1477.91    
   8  0.478005     -0.738133      -121.181       121.181       1264.10       1385.28    
   9  0.395759     -0.926951      -152.180       152.180       1236.30       1388.48    
  10  0.438776E-01  -3.12635      -513.260       513.260       1263.56       1776.82    
  11  0.294628E-01  -3.52463      -578.646       578.646       1187.73       1766.37    
  12  0.331052E-01  -3.40806      -559.510       559.510       1249.11       1808.62    
  13  0.916325E-01  -2.38997      -392.367       392.367       1339.91       1732.28    
  14  0.985908     -0.141919E-01  -2.32991       2.32991       1217.29       1219.62    
  15  0.511724     -0.669970      -109.990       109.990       1345.10       1455.09    
  16  0.185695      -1.68365      -276.409       276.409       1165.80       1442.21    
  17  0.830711     -0.185474      -30.4496       30.4496       1398.81       1429.26    
  18  0.765179E-04  -9.47799      -1556.02       1556.02       1322.33       2878.35    
  19  0.129365      -2.04512      -335.752       335.752       1246.59       1582.34    
  20  0.796363     -0.227700      -37.3820       37.3820       1494.30       1531.68    
  21  0.589256     -0.528895      -86.8300       86.8300       1200.47       1287.30    
  22  0.770995     -0.260073      -42.6968       42.6968       1487.59       1530.29    
  23  0.685430     -0.377709      -62.0094       62.0094       1461.21       1523.22    
  24  0.487688     -0.718080      -117.889       117.889       1509.02       1626.91    
  25  0.114898      -2.16371      -355.222       355.222       1428.51       1783.74    
  26  0.165093      -1.80124      -295.714       295.714       1609.02       1904.74    
  27  0.302275      -1.19642      -196.419       196.419       1585.46       1781.88    
  28  0.123669      -2.09014      -343.144       343.144       1619.43       1962.57    
  29  0.960526     -0.402739E-01  -6.61185       6.61185       1645.25       1651.87    
  30  0.744557     -0.294966      -48.4252       48.4252       1386.94       1435.36    
  31  0.418436     -0.871232      -143.032       143.032       1671.58       1814.61    
  32  0.624411     -0.470947      -77.3165       77.3165       1679.68       1757.00    
  33  0.920055     -0.833222E-01  -13.6792       13.6792       1512.53       1526.21    
  34  0.330507      -1.10713      -181.760       181.760       1601.65       1783.41    
  35  0.889566     -0.117022      -19.2117       19.2117       1183.34       1202.55    
  36  0.269410      -1.31152      -215.315       215.315       1371.15       1586.46    
  37  0.458780     -0.779184      -127.920       127.920       1522.04       1649.96    
  38  0.952588     -0.485730E-01  -7.97434       7.97434       1814.84       1822.81    
  39  0.213836      -1.54254      -253.243       253.243       1785.78       2039.02    
  40  0.460697     -0.775015      -127.236       127.236       1837.29       1964.53    
  41  0.571693     -0.559153      -91.7975       91.7975       1817.15       1908.95    
  42  0.201363      -1.60265      -263.110       263.110       1613.40       1876.51    
  43  0.707817     -0.345570      -56.7331       56.7331       1859.89       1916.63    
  44  0.927118     -0.756745E-01  -12.4237       12.4237       1742.63       1755.05    
  45  0.288916      -1.24162      -203.840       203.840       1682.39       1886.23    
  46  0.702737     -0.352773      -57.9155       57.9155       1800.44       1858.35    
  47  0.253190      -1.37362      -225.510       225.510       1458.41       1683.92    
  48  0.709086     -0.343779      -56.4390       56.4390       2063.42       2119.86    
  49  0.399421     -0.917738      -150.667       150.667       1496.32       1646.99    
loop,thermsimp(1:2)       93   313.000       59.7157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185       2359.56         68.38          1.16         39.39          1.98          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   2359.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       93
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       94
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      184     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -28.1782       28.1782       1183.34       1211.51    
   2  0.478368     -0.737375      -121.057       121.057       1217.29       1338.34    
   3  0.283498      -1.26055      -206.948       206.948       1197.08       1404.02    
   4  0.520516     -0.652935      -107.194       107.194       1200.47       1307.66    
   5  0.703282E-01  -2.65458      -435.809       435.809       1220.84       1656.65    
   6  0.914137     -0.897748E-01  -14.7385       14.7385       1213.11       1227.85    
   7  0.479535     -0.734938      -120.657       120.657       1264.10       1384.76    
   8  0.921875     -0.813456E-01  -13.3547       13.3547       1236.30       1249.65    
   9  0.739547     -0.301718      -49.5337       49.5337       1182.60       1232.13    
  10  0.790753     -0.234770      -38.5428       38.5428       1398.81       1437.35    
  11  0.212247E-01  -3.85259      -632.488       632.488       1386.94       2019.43    
  12  0.286971      -1.24837      -204.949       204.949       1165.80       1370.75    
  13  0.695666     -0.362886      -59.5758       59.5758       1345.10       1404.68    
  14  0.534590     -0.626255      -102.814       102.814       1199.51       1302.32    
  15  0.945577     -0.559603E-01  -9.18714       9.18714       1284.82       1294.00    
  16  0.619446     -0.478930      -78.6271       78.6271       1184.14       1262.77    
  17  0.291083E-01  -3.53673      -580.633       580.633       1461.21       2041.84    
  18  0.372584E-01  -3.28988      -540.107       540.107       1512.53       2052.64    
  19  0.713241     -0.337936      -55.4797       55.4797       1487.59       1543.07    
  20  0.280281      -1.27196      -208.821       208.821       1494.30       1703.12    
  21  0.254796      -1.36729      -224.471       224.471       1246.59       1471.06    
  22  0.498598     -0.695955      -114.257       114.257       1371.15       1485.40    
  23  0.515261E-01  -2.96567      -486.880       486.880       1509.02       1995.90    
  24  0.347627      -1.05662      -173.468       173.468       1496.32       1669.79    
  25  0.696212     -0.362102      -59.4471       59.4471       1522.04       1581.49    
  26  0.707749E-01  -2.64825      -434.769       434.769       1645.25       2080.02    
  27  0.364523E-01  -3.31175      -543.698       543.698       1458.41       2002.11    
  28  0.895087E-02  -4.71600      -774.238       774.238       1339.91       2114.15    
  29  0.333194      -1.09903      -180.431       180.431       1742.63       1923.06    
  30  0.451375     -0.795457      -130.592       130.592       1679.68       1810.27    
  31  0.849961E-01  -2.46515      -404.710       404.710       1187.73       1592.44    
  32  0.524791     -0.644756      -105.851       105.851       1263.56       1369.41    
  33  0.641068     -0.444619      -72.9942       72.9942       1585.46       1658.45    
  34  0.757376     -0.277895      -45.6227       45.6227       1601.65       1647.27    
  35  0.760597     -0.273651      -44.9260       44.9260       1428.51       1473.44    
  36  0.709070     -0.343801      -56.4426       56.4426       1249.11       1305.55    
  37  0.794718     -0.229768      -37.7215       37.7215       1671.58       1709.30    
  38  0.869679     -0.139632      -22.9236       22.9236       1814.84       1837.76    
  39  0.229100E-01  -3.77618      -619.945       619.945       1800.44       2420.38    
  40  0.935590     -0.665776E-01  -10.9302       10.9302       1613.40       1624.33    
  41  0.889453     -0.117149      -19.2326       19.2326       1682.39       1701.63    
  42  0.529054     -0.636665      -104.523       104.523       1609.02       1713.54    
  43  0.907902     -0.966186E-01  -15.8621       15.8621       1817.15       1833.01    
  44  0.693802     -0.365568      -60.0162       60.0162       1859.89       1919.91    
  45  0.883803     -0.123521      -20.2788       20.2788       1619.43       1639.71    
  46  0.275134E-01  -3.59308      -589.885       589.885       1837.29       2427.17    
  47  0.324767      -1.12465      -184.636       184.636       1785.78       1970.41    
  48  0.853326     -0.158614      -26.0400       26.0400       2063.42       2089.46    
  49  0.325639      -1.12197      -184.196       184.196       2359.56       2543.75    
loop,thermsimp(1:2)       94   28.1782       121.057    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186       1322.33         68.10          1.22         39.65          1.71          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1322.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       94
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:       95
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      185     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -48.4047       48.4047       1183.34       1231.74    
   2  0.739179     -0.302215      -49.6154       49.6154       1213.11       1262.72    
   3  0.131167      -2.03128      -333.480       333.480       1182.60       1516.08    
   4  0.523356     -0.647493      -106.301       106.301       1236.30       1342.60    
   5  0.660412     -0.414891      -68.1137       68.1137       1184.14       1252.25    
   6  0.433074E-01  -3.13943      -515.408       515.408       1284.82       1800.22    
   7  0.480352     -0.733236      -120.377       120.377       1199.51       1319.89    
   8  0.808114     -0.213053      -34.9774       34.9774       1249.11       1284.09    
   9  0.723804     -0.323235      -53.0662       53.0662       1200.47       1253.54    
  10  0.322682      -1.13109      -185.693       185.693       1217.29       1402.98    
  11  0.898907     -0.106576      -17.4969       17.4969       1263.56       1281.06    
  12  0.359972      -1.02173      -167.740       167.740       1165.80       1333.54    
  13  0.879118     -0.128836      -21.1513       21.1513       1264.10       1285.25    
  14  0.963559     -0.371220E-01  -6.09440       6.09440       1197.08       1203.17    
  15  0.662848     -0.411210      -67.5093       67.5093       1345.10       1412.61    
  16  0.648402     -0.433244      -71.1267       71.1267       1398.81       1469.94    
  17  0.375343     -0.979916      -160.875       160.875       1246.59       1407.46    
  18  0.812441     -0.207712      -34.1006       34.1006       1428.51       1462.62    
  19  0.248177E-01  -3.69620      -606.813       606.813       1371.15       1977.96    
  20  0.653530     -0.425366      -69.8334       69.8334       1487.59       1557.42    
  21  0.712244     -0.339334      -55.7093       55.7093       1522.04       1577.75    
  22  0.358229      -1.02658      -168.536       168.536       1187.73       1356.26    
  23  0.325518      -1.12234      -184.257       184.257       1613.40       1797.66    
  24  0.770349     -0.260912      -42.8345       42.8345       1619.43       1662.26    
  25  0.633518E-01  -2.75905      -452.960       452.960       1601.65       2054.61    
  26  0.168796      -1.77907      -292.073       292.073       1220.84       1512.91    
  27  0.562007     -0.576241      -94.6028       94.6028       1585.46       1680.06    
  28  0.156316      -1.85588      -304.684       304.684       1496.32       1801.01    
  29  0.967732     -0.328002E-01  -5.38489       5.38489       1682.39       1687.78    
  30  0.538071     -0.619766      -101.748       101.748       1494.30       1596.05    
  31  0.967495     -0.330453E-01  -5.42513       5.42513       1671.58       1677.00    
  32  0.771619     -0.259265      -42.5641       42.5641       1609.02       1651.58    
  33  0.246044      -1.40225      -230.210       230.210       1679.68       1909.89    
  34  0.700731     -0.355631      -58.3848       58.3848       1817.15       1875.53    
  35  0.382714     -0.960468      -157.682       157.682       1814.84       1972.52    
  36  0.580395     -0.544047      -89.3175       89.3175       1859.89       1949.21    
  37  0.305131      -1.18701      -194.875       194.875       1742.63       1937.51    
  38  0.624250     -0.471204      -77.3587       77.3587       1785.78       1863.14    
  39  0.575432     -0.552634      -90.7272       90.7272       1509.02       1599.74    
  40  0.701335     -0.354770      -58.2434       58.2434       1458.41       1516.65    
  41  0.290211      -1.23715      -203.105       203.105       1386.94       1590.04    
  42  0.140976      -1.95916      -321.640       321.640       1461.21       1782.85    
  43  0.275714      -1.28839      -211.518       211.518       1512.53       1724.05    
  44  0.856479     -0.154925      -25.4345       25.4345       1645.25       1670.69    
  45  0.994286     -0.573084E-02 -0.940845      0.940845       2063.42       2064.36    
  46  0.913008     -0.910102E-01  -14.9414       14.9414       1339.91       1354.86    
  47  0.204063      -1.58933      -260.924       260.924       1800.44       2061.36    
  48  0.388833     -0.944605      -155.078       155.078       1837.29       1992.37    
  49  0.781619     -0.246387      -40.4500       40.4500       1322.33       1362.78    
loop,thermsimp(1:2)       95   48.4047       49.6154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187       1492.43         67.92          1.18         39.66          1.77          0.05        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1492.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:       95
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   213.547    

hmean,hstd :    1450.79       213.547    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1450.79       213.547    
h(1),h(best1),h(np1) :    1197.08       1165.80       1492.43    
htherm(1),htherm(best1),htherm(np1) :    1203.17       1333.54       2064.36    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        1
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      186     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -638.571       638.571       1197.08       1835.65    
   2  0.977100     -0.231667E-01  -3.80332       3.80332       1183.34       1187.14    
   3  0.491467     -0.710361      -116.622       116.622       1184.14       1300.76    
   4  0.802113E-01  -2.52309      -414.222       414.222       1200.47       1614.69    
   5  0.891044     -0.115361      -18.9391       18.9391       1213.11       1232.05    
   6  0.397551     -0.922433      -151.438       151.438       1263.56       1415.00    
   7  0.121203      -2.11029      -346.451       346.451       1249.11       1595.56    
   8  0.789985E-01  -2.53833      -416.723       416.723       1264.10       1680.82    
   9  0.921855     -0.813679E-01  -13.3584       13.3584       1199.51       1212.87    
  10  0.252671      -1.37567      -225.846       225.846       1165.80       1391.65    
  11  0.787271     -0.239182      -39.2671       39.2671       1236.30       1275.56    
  12  0.634653     -0.454676      -74.6453       74.6453       1339.91       1414.56    
  13  0.706648     -0.347222      -57.0043       57.0043       1187.73       1244.73    
  14  0.349740E-01  -3.35315      -550.495       550.495       1322.33       1872.83    
  15  0.686787     -0.375731      -61.6846       61.6846       1217.29       1278.97    
  16  0.309348      -1.17329      -192.621       192.621       1246.59       1439.21    
  17  0.703748     -0.351336      -57.6796       57.6796       1345.10       1402.78    
  18  0.985092     -0.150207E-01  -2.46599       2.46599       1428.51       1430.98    
  19  0.440741     -0.819298      -134.506       134.506       1398.81       1533.32    
  20  0.796112     -0.228015      -37.4338       37.4338       1220.84       1258.27    
  21  0.451938     -0.794210      -130.387       130.387       1182.60       1312.99    
  22  0.230902      -1.46576      -240.638       240.638       1458.41       1699.04    
  23  0.760212     -0.274159      -45.0093       45.0093       1487.59       1532.60    
  24  0.250434E-02  -5.98973      -983.348       983.348       1522.04       2505.39    
  25  0.627913E-01  -2.76794      -454.419       454.419       1386.94       1841.36    
  26  0.263128      -1.33511      -219.189       219.189       1494.30       1713.49    
  27  0.177986      -1.72605      -283.370       283.370       1509.02       1792.39    
  28  0.919776     -0.836247E-01  -13.7289       13.7289       1609.02       1622.75    
  29  0.854272     -0.157506      -25.8581       25.8581       1619.43       1645.28    
  30  0.648187     -0.433576      -71.1811       71.1811       1645.25       1716.44    
  31  0.853797     -0.158061      -25.9493       25.9493       1671.58       1697.53    
  32  0.484551     -0.724533      -118.948       118.948       1585.46       1704.41    
  33  0.423817     -0.858454      -140.934       140.934       1682.39       1823.33    
  34  0.932015     -0.704065E-01  -11.5588       11.5588       1512.53       1524.09    
  35  0.161906      -1.82074      -298.915       298.915       1461.21       1760.12    
  36  0.812519     -0.207617      -34.0849       34.0849       1613.40       1647.49    
  37  0.346838      -1.05890      -173.842       173.842       1284.82       1458.66    
  38  0.477141     -0.739943      -121.478       121.478       1496.32       1617.80    
  39  0.931946     -0.704808E-01  -11.5710       11.5710       1785.78       1797.35    
  40  0.189794      -1.66182      -272.824       272.824       1817.15       2089.97    
  41  0.361902      -1.01638      -166.862       166.862       1679.68       1846.54    
  42  0.775630E-02  -4.85925      -797.754       797.754       1742.63       2540.39    
  43  0.292497      -1.22930      -201.817       201.817       1859.89       2061.71    
  44  0.264300      -1.33067      -218.459       218.459       1814.84       2033.30    
  45  0.529597     -0.635638      -104.354       104.354       1371.15       1475.50    
  46  0.163272      -1.81234      -297.535       297.535       1837.29       2134.82    
  47  0.212593      -1.54838      -254.201       254.201       1601.65       1855.85    
  48  0.359173      -1.02395      -168.105       168.105       1800.44       1968.54    
  49  0.993707     -0.631295E-02  -1.03641       1.03641       1492.43       1493.47    
loop,thermsimp(1:2)        1   638.571       3.80332    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188       1476.93         68.01          1.18         39.91          1.54          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1476.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:        1
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        2
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      187     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -244.399       244.399       1183.34       1427.74    
   2  0.726663     -0.319292      -52.4189       52.4189       1199.51       1251.93    
   3  0.929061     -0.735808E-01  -12.0799       12.0799       1213.11       1225.19    
   4  0.764703     -0.268268      -44.0422       44.0422       1187.73       1231.77    
   5  0.119617      -2.12346      -348.614       348.614       1220.84       1569.45    
   6  0.369672     -0.995138      -163.374       163.374       1236.30       1399.67    
   7  0.875806     -0.132611      -21.7711       21.7711       1217.29       1239.06    
   8  0.657886     -0.418723      -68.7427       68.7427       1184.14       1252.88    
   9  0.387095E-01  -3.25167      -533.835       533.835       1182.60       1716.43    
  10  0.454078     -0.789485      -129.612       129.612       1165.80       1295.41    
  11  0.890470     -0.116006      -19.0449       19.0449       1345.10       1364.15    
  12  0.118445      -2.13331      -350.230       350.230       1339.91       1690.14    
  13  0.190238      -1.65948      -272.441       272.441       1263.56       1536.00    
  14  0.435624     -0.830976      -136.423       136.423       1428.51       1564.94    
  15  0.768655     -0.263114      -43.1960       43.1960       1246.59       1289.78    
  16  0.870896E-01  -2.44082      -400.715       400.715       1284.82       1685.53    
  17  0.936453     -0.656556E-01  -10.7788       10.7788       1371.15       1381.93    
  18  0.159312      -1.83689      -301.567       301.567       1492.43       1794.00    
  19  0.988165     -0.119051E-01  -1.95449       1.95449       1512.53       1514.48    
  20  0.713347     -0.337787      -55.4552       55.4552       1487.59       1543.05    
  21  0.417075     -0.874489      -143.567       143.567       1398.81       1542.38    
  22  0.719048     -0.329827      -54.1484       54.1484       1249.11       1303.26    
  23  0.785519     -0.241411      -39.6331       39.6331       1200.47       1240.10    
  24  0.356994      -1.03004      -169.103       169.103       1496.32       1665.43    
  25  0.357951      -1.02736      -168.664       168.664       1609.02       1777.68    
  26  0.154816      -1.86552      -306.266       306.266       1619.43       1925.69    
  27  0.246912      -1.39872      -229.632       229.632       1613.40       1843.03    
  28  0.553458     -0.591570      -97.1194       97.1194       1264.10       1361.22    
  29  0.729602     -0.315256      -51.7563       51.7563       1671.58       1723.34    
  30  0.605470     -0.501750      -82.3736       82.3736       1458.41       1540.78    
  31  0.278987E-01  -3.57918      -587.602       587.602       1585.46       2173.06    
  32  0.187991      -1.67136      -274.392       274.392       1494.30       1768.69    
  33  0.543158     -0.610355      -100.203       100.203       1645.25       1745.46    
  34  0.996749     -0.325625E-02 -0.534586      0.534586       1461.21       1461.74    
  35  0.540727     -0.614841      -100.940       100.940       1509.02       1609.96    
  36  0.833271E-01  -2.48498      -407.965       407.965       1785.78       2193.74    
  37  0.404538     -0.905011      -148.578       148.578       1682.39       1830.97    
  38  0.147302      -1.91527      -314.435       314.435       1197.08       1511.51    
  39  0.364226E-01  -3.31257      -543.832       543.832       1386.94       1930.77    
  40  0.381304     -0.964158      -158.288       158.288       1679.68       1837.97    
  41  0.737758     -0.304140      -49.9313       49.9313       1601.65       1651.58    
  42  0.179374      -1.71828      -282.094       282.094       1322.33       1604.43    
  43  0.281757      -1.26671      -207.959       207.959       1800.44       2008.40    
  44  0.192633      -1.64697      -270.386       270.386       1814.84       2085.22    
  45  0.954983     -0.460617E-01  -7.56206       7.56206       1859.89       1867.45    
  46  0.710258     -0.342127      -56.1678       56.1678       1817.15       1873.32    
  47  0.831769     -0.184201      -30.2407       30.2407       1837.29       1867.53    
  48  0.912541     -0.915218E-01  -15.0254       15.0254       1522.04       1537.07    
  49  0.221543      -1.50714      -247.431       247.431       1476.93       1724.36    
loop,thermsimp(1:2)        2   244.399       52.4189    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189       1156.47         68.00          1.18         39.60          1.96          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190       3910.74         68.03          1.11         39.77          2.08          0.05        111.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1156.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:        2
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        3
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      189     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -144.175       144.175       1213.11       1357.28    
   2  0.117190E-02  -6.74913      -1108.02       1108.02       1187.73       2295.75    
   3  0.432199     -0.838870      -137.719       137.719       1217.29       1355.01    
   4  0.466381     -0.762753      -125.223       125.223       1200.47       1325.69    
   5  0.696685     -0.361422      -59.3355       59.3355       1199.51       1258.84    
   6  0.193714      -1.64137      -269.468       269.468       1184.14       1453.61    
   7  0.535145     -0.625217      -102.643       102.643       1246.59       1349.23    
   8  0.812984     -0.207044      -33.9910       33.9910       1165.80       1199.79    
   9  0.956789     -0.441723E-01  -7.25187       7.25187       1249.11       1256.36    
  10  0.496711E-01  -3.00233      -492.900       492.900       1264.10       1757.00    
  11  0.206308E-01  -3.88097      -637.148       637.148       1345.10       1982.25    
  12  0.423434     -0.859358      -141.083       141.083       1371.15       1512.23    
  13  0.216826      -1.52866      -250.964       250.964       1236.30       1487.26    
  14  0.792422     -0.232661      -38.1966       38.1966       1183.34       1221.53    
  15  0.265940      -1.32449      -217.444       217.444       1461.21       1678.65    
  16  0.993400     -0.662201E-02  -1.08715       1.08715       1197.08       1198.16    
  17  0.645200E-01  -2.74078      -449.960       449.960       1512.53       1962.49    
  18  0.651527     -0.428436      -70.3374       70.3374       1263.56       1333.90    
  19  0.858875     -0.152131      -24.9758       24.9758       1522.04       1547.02    
  20  0.126056      -2.07103      -340.005       340.005       1458.41       1798.41    
  21  0.772661E-01  -2.56050      -420.363       420.363       1398.81       1819.18    
  22  0.441429     -0.817737      -134.250       134.250       1487.59       1621.84    
  23  0.166586      -1.79224      -294.236       294.236       1428.51       1722.75    
  24  0.217490      -1.52560      -250.462       250.462       1220.84       1471.30    
  25  0.632871     -0.457488      -75.1069       75.1069       1322.33       1397.44    
  26  0.201694      -1.60100      -262.841       262.841       1509.02       1771.86    
  27  0.282690      -1.26341      -207.416       207.416       1601.65       1809.07    
  28  0.255086E-01  -3.66874      -602.306       602.306       1496.32       2098.63    
  29  0.562308     -0.575706      -94.5149       94.5149       1284.82       1379.33    
  30  0.283366E-01  -3.56360      -585.045       585.045       1339.91       1924.96    
  31  0.404254E-01  -3.20830      -526.713       526.713       1182.60       1709.31    
  32  0.170475      -1.76917      -290.449       290.449       1671.58       1962.03    
  33  0.141712      -1.95396      -320.785       320.785       1476.93       1797.71    
  34  0.773173     -0.257253      -42.2338       42.2338       1645.25       1687.49    
  35  0.255978      -1.36266      -223.712       223.712       1494.30       1718.01    
  36  0.823739     -0.193902      -31.8333       31.8333       1609.02       1640.85    
  37  0.166307      -1.79392      -294.512       294.512       1492.43       1786.94    
  38  0.676319     -0.391090      -64.2061       64.2061       1682.39       1746.60    
  39  0.144546      -1.93416      -317.535       317.535       1679.68       1997.22    
  40  0.593436     -0.521826      -85.6695       85.6695       1613.40       1699.07    
  41  0.762921     -0.270600      -44.4251       44.4251       1859.89       1904.32    
  42  0.855796     -0.155724      -25.5655       25.5655       1837.29       1862.85    
  43  0.433555     -0.835737      -137.205       137.205       1817.15       1954.35    
  44  0.252891      -1.37480      -225.703       225.703       1619.43       1845.13    
  45  0.942909     -0.587850E-01  -9.65087       9.65087       1386.94       1396.59    
  46  0.432313     -0.838605      -137.676       137.676       1800.44       1938.11    
  47  0.975713     -0.245869E-01  -4.03649       4.03649       1814.84       1818.87    
  48  0.541226     -0.613919      -100.789       100.789       1585.46       1686.25    
  49  0.255057      -1.36627      -224.304       224.304       1156.47       1380.78    
loop,thermsimp(1:2)        3   144.175       1108.02    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191       1671.21         68.41          1.23         39.40          1.54          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1671.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:        3
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        4
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      190     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -69.0574       69.0574       1197.08       1266.13    
   2  0.880966     -0.126736      -20.8065       20.8065       1165.80       1186.61    
   3  0.854972     -0.156687      -25.7237       25.7237       1183.34       1209.06    
   4  0.797101     -0.226774      -37.2300       37.2300       1249.11       1286.34    
   5  0.158477      -1.84214      -302.429       302.429       1199.51       1501.94    
   6  0.593839     -0.521148      -85.5580       85.5580       1200.47       1286.03    
   7  0.817101     -0.201993      -33.1616       33.1616       1263.56       1296.72    
   8  0.997190     -0.281377E-02 -0.461943      0.461943       1246.59       1247.05    
   9  0.402857     -0.909174      -149.261       149.261       1217.29       1366.55    
  10  0.690455     -0.370405      -60.8103       60.8103       1213.11       1273.92    
  11  0.609635     -0.494895      -81.2481       81.2481       1284.82       1366.06    
  12  0.491117     -0.711073      -116.739       116.739       1156.47       1273.21    
  13  0.990676     -0.936814E-02  -1.53799       1.53799       1386.94       1388.48    
  14  0.976919     -0.233519E-01  -3.83374       3.83374       1322.33       1326.16    
  15  0.692556     -0.367366      -60.3114       60.3114       1184.14       1244.45    
  16  0.549694     -0.598394      -98.2398       98.2398       1220.84       1319.08    
  17  0.538267E-01  -2.92199      -479.709       479.709       1236.30       1716.00    
  18  0.602193     -0.507178      -83.2646       83.2646       1371.15       1454.41    
  19  0.537276     -0.621243      -101.991       101.991       1522.04       1624.03    
  20  0.338220      -1.08406      -177.972       177.972       1487.59       1665.56    
  21  0.306772      -1.18165      -193.995       193.995       1609.02       1803.02    
  22  0.895389     -0.110497      -18.1406       18.1406       1461.21       1479.35    
  23  0.120096      -2.11946      -347.957       347.957       1585.46       1933.41    
  24  0.680166     -0.385418      -63.2749       63.2749       1645.25       1708.53    
  25  0.369434     -0.995782      -163.480       163.480       1613.40       1776.88    
  26  0.235484      -1.44611      -237.412       237.412       1182.60       1420.01    
  27  0.260836      -1.34386      -220.625       220.625       1494.30       1714.92    
  28  0.720259     -0.328144      -53.8722       53.8722       1428.51       1482.39    
  29  0.695069     -0.363744      -59.7167       59.7167       1682.39       1742.11    
  30  0.105076      -2.25307      -369.893       369.893       1264.10       1633.99    
  31  0.968349     -0.321628E-01  -5.28024       5.28024       1509.02       1514.30    
  32  0.974131     -0.262091E-01  -4.30281       4.30281       1492.43       1496.73    
  33  0.647785E-01  -2.73678      -449.304       449.304       1476.93       1926.23    
  34  0.910402     -0.938690E-01  -15.4107       15.4107       1458.41       1473.82    
  35  0.488733     -0.715939      -117.537       117.537       1601.65       1719.19    
  36  0.377436E-01  -3.27694      -537.983       537.983       1814.84       2352.82    
  37  0.154608      -1.86686      -306.487       306.487       1398.81       1705.30    
  38  0.277804      -1.28084      -210.278       210.278       1619.43       1829.70    
  39  0.969547     -0.309263E-01  -5.07724       5.07724       1837.29       1842.37    
  40  0.380083     -0.967367      -158.815       158.815       1859.89       2018.71    
  41  0.751822     -0.285256      -46.8311       46.8311       1339.91       1386.75    
  42  0.137692      -1.98274      -325.511       325.511       1800.44       2125.95    
  43  0.293470      -1.22598      -201.272       201.272       1817.15       2018.42    
  44  0.433705     -0.835390      -137.148       137.148       1671.58       1808.73    
  45  0.418034     -0.872194      -143.190       143.190       1512.53       1655.72    
  46  0.166728      -1.79139      -294.097       294.097       1345.10       1639.20    
  47  0.921960     -0.812537E-01  -13.3396       13.3396       1679.68       1693.02    
  48  0.412601     -0.885275      -145.338       145.338       1496.32       1641.66    
  49  0.925181     -0.777655E-01  -12.7670       12.7670       1671.21       1683.98    
loop,thermsimp(1:2)        4   69.0574       20.8065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192       1168.52         68.28          1.21         39.57          1.74          0.05        110.85
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193       1162.82         68.34          1.21         39.51          1.76          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1162.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:        4
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        5
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      193
neval,tstepnext:      192     193

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -75.7938       75.7938       1165.80       1241.59    
   2  0.876370     -0.131967      -21.6653       21.6653       1183.34       1205.00    
   3  0.840080     -0.174259      -28.6085       28.6085       1184.14       1212.75    
   4  0.608986E-01  -2.79854      -459.444       459.444       1246.59       1706.03    
   5  0.311901      -1.16507      -191.272       191.272       1197.08       1388.35    
   6  0.937552E-01  -2.36707      -388.607       388.607       1156.47       1545.08    
   7  0.608418     -0.496893      -81.5761       81.5761       1213.11       1294.68    
   8  0.297707      -1.21164      -198.919       198.919       1200.47       1399.39    
   9  0.365777      -1.00573      -165.113       165.113       1249.11       1414.22    
  10  0.194673      -1.63643      -268.657       268.657       1263.56       1532.22    
  11  0.941388     -0.604003E-01  -9.91606       9.91606       1220.84       1230.75    
  12  0.984881     -0.152343E-01  -2.50105       2.50105       1322.33       1324.83    
  13  0.750245     -0.287355      -47.1757       47.1757       1284.82       1331.99    
  14  0.437446     -0.826803      -135.738       135.738       1217.29       1353.02    
  15  0.174754      -1.74437      -286.378       286.378       1339.91       1626.29    
  16  0.300465E-01  -3.50501      -575.425       575.425       1386.94       1962.36    
  17  0.372924     -0.986380      -161.936       161.936       1182.60       1344.53    
  18  0.803506     -0.218771      -35.9161       35.9161       1371.15       1407.06    
  19  0.232583      -1.45851      -239.447       239.447       1458.41       1697.85    
  20  0.383368     -0.958759      -157.402       157.402       1461.21       1618.61    
  21  0.622786     -0.473552      -77.7442       77.7442       1428.51       1506.26    
  22  0.356422      -1.03164      -169.367       169.367       1492.43       1661.80    
  23  0.919964     -0.834212E-01  -13.6955       13.6955       1199.51       1213.20    
  24  0.550740     -0.596492      -97.9275       97.9275       1509.02       1606.94    
  25  0.402627     -0.909745      -149.355       149.355       1522.04       1671.40    
  26  0.256265      -1.36154      -223.528       223.528       1264.10       1487.63    
  27  0.763510     -0.269828      -44.2984       44.2984       1345.10       1389.40    
  28  0.388963     -0.944271      -155.023       155.023       1496.32       1651.35    
  29  0.981923     -0.182423E-01  -2.99488       2.99488       1512.53       1515.52    
  30  0.656629     -0.420635      -69.0567       69.0567       1487.59       1556.65    
  31  0.932472     -0.699161E-01  -11.4783       11.4783       1671.21       1682.69    
  32  0.336775      -1.08834      -178.676       178.676       1679.68       1858.36    
  33  0.810758     -0.209786      -34.4410       34.4410       1398.81       1433.25    
  34  0.557014     -0.585166      -96.0680       96.0680       1645.25       1741.32    
  35  0.652747     -0.426565      -70.0302       70.0302       1494.30       1564.33    
  36  0.890774     -0.115665      -18.9889       18.9889       1236.30       1255.28    
  37  0.703035     -0.352349      -57.8460       57.8460       1601.65       1659.49    
  38  0.534296     -0.626805      -102.904       102.904       1682.39       1785.30    
  39  0.604162     -0.503914      -82.7287       82.7287       1613.40       1696.13    
  40  0.545557     -0.605948      -99.4799       99.4799       1609.02       1708.50    
  41  0.371346     -0.990620      -162.632       162.632       1671.58       1834.21    
  42  0.491801     -0.709680      -116.510       116.510       1619.43       1735.94    
  43  0.879731     -0.128139      -21.0369       21.0369       1837.29       1858.33    
  44  0.995113     -0.489866E-02 -0.804224      0.804224       1476.93       1477.73    
  45  0.467927     -0.759444      -124.680       124.680       1585.46       1710.14    
  46  0.355083      -1.03540      -169.985       169.985       1817.15       1987.13    
  47  0.216960      -1.52804      -250.862       250.862       1859.89       2110.75    
  48  0.276988      -1.28378      -210.761       210.761       1800.44       2011.20    
  49  0.905458     -0.993144E-01  -16.3047       16.3047       1162.82       1179.13    
loop,thermsimp(1:2)        5   75.7938       21.6653    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194       1163.53         68.45          1.22         39.38          1.81          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195       1666.35         67.96          1.10         39.37          2.37          0.05        110.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1163.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    164.172               193
loop is:        5
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    164.172               193
loop is:        6
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    82.0862               241

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      194     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -125.804       125.804       1162.82       1288.63    
   2  0.942431     -0.592928E-01  -4.86712       4.86712       1183.34       1188.20    
   3  0.193824      -1.64081      -134.687       134.687       1184.14       1318.83    
   4  0.162512      -1.81700      -149.151       149.151       1199.51       1348.66    
   5  0.625243     -0.469616      -38.5489       38.5489       1220.84       1259.39    
   6  0.499178     -0.694793      -57.0329       57.0329       1165.80       1222.83    
   7  0.706095     -0.348006      -28.5665       28.5665       1236.30       1264.86    
   8  0.527414     -0.639770      -52.5162       52.5162       1213.11       1265.62    
   9  0.575748     -0.552085      -45.3185       45.3185       1322.33       1367.65    
  10  0.490522     -0.712286      -58.4688       58.4688       1284.82       1343.28    
  11  0.306517      -1.18248      -97.0655       97.0655       1182.60       1279.66    
  12  0.798470     -0.225057      -18.4741       18.4741       1217.29       1235.76    
  13  0.333550      -1.09796      -90.1276       90.1276       1197.08       1287.20    
  14  0.166731      -1.79138      -147.047       147.047       1345.10       1492.15    
  15  0.443580     -0.812878      -66.7261       66.7261       1200.47       1267.20    
  16  0.669985     -0.400500      -32.8755       32.8755       1371.15       1404.02    
  17  0.339921      -1.07904      -88.5745       88.5745       1249.11       1337.69    
  18  0.201260      -1.60316      -131.597       131.597       1398.81       1530.41    
  19  0.772250     -0.258447      -21.2149       21.2149       1476.93       1498.14    
  20  0.401372E-01  -3.21545      -263.944       263.944       1264.10       1528.04    
  21  0.940962     -0.608526E-01  -4.99516       4.99516       1428.51       1433.51    
  22  0.115324      -2.16001      -177.307       177.307       1512.53       1689.84    
  23  0.939991E-01  -2.36447      -194.090       194.090       1263.56       1457.65    
  24  0.412221     -0.886196      -72.7444       72.7444       1156.47       1229.22    
  25  0.136462      -1.99171      -163.492       163.492       1487.59       1651.08    
  26  0.310095      -1.17088      -96.1127       96.1127       1494.30       1590.41    
  27  0.985727     -0.143755E-01  -1.18003       1.18003       1509.02       1510.20    
  28  0.900161     -0.105182      -8.63396       8.63396       1461.21       1469.84    
  29  0.250220      -1.38542      -113.724       113.724       1339.91       1453.64    
  30  0.780405     -0.247942      -20.3526       20.3526       1496.32       1516.68    
  31  0.228719      -1.47526      -121.098       121.098       1601.65       1722.75    
  32  0.407088     -0.898727      -73.7731       73.7731       1492.43       1566.20    
  33  0.975627     -0.246749E-01  -2.02547       2.02547       1522.04       1524.07    
  34  0.885140     -0.122009      -10.0153       10.0153       1671.21       1681.23    
  35  0.896135     -0.109664      -9.00192       9.00192       1613.40       1622.40    
  36  0.856661     -0.154713      -12.6998       12.6998       1458.41       1471.11    
  37  0.258643      -1.35231      -111.006       111.006       1246.59       1357.59    
  38  0.336283      -1.08980      -89.4576       89.4576       1609.02       1698.48    
  39  0.868205     -0.141327      -11.6010       11.6010       1585.46       1597.06    
  40  0.937935     -0.640747E-01  -5.25965       5.25965       1619.43       1624.69    
  41  0.418906     -0.870109      -71.4239       71.4239       1645.25       1716.68    
  42  0.351040      -1.04685      -85.9323       85.9323       1682.39       1768.32    
  43  0.611628E-01  -2.79422      -229.367       229.367       1671.58       1900.95    
  44  0.153518      -1.87394      -153.824       153.824       1837.29       1991.11    
  45  0.938341     -0.636423E-01  -5.22415       5.22415       1679.68       1684.90    
  46  0.598133     -0.513942      -42.1875       42.1875       1386.94       1429.12    
  47  0.795771     -0.228444      -18.7521       18.7521       1817.15       1835.90    
  48  0.295375      -1.21951      -100.105       100.105       1800.44       1900.54    
  49  0.804738     -0.217239      -17.8323       17.8323       1163.53       1181.36    
loop,thermsimp(1:2)        6   125.804       4.86712    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196       1293.21         67.99          1.16         39.69          1.70          0.05        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1293.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:        6
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:        7
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      195     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -109.256       109.256       1163.53       1272.79    
   2  0.401807     -0.911784      -74.8448       74.8448       1183.34       1258.18    
   3  0.418885     -0.870159      -71.4280       71.4280       1165.80       1237.23    
   4  0.753378     -0.283189      -23.2459       23.2459       1156.47       1179.72    
   5  0.792066     -0.233111      -19.1352       19.1352       1217.29       1236.42    
   6  0.868474     -0.141017      -11.5756       11.5756       1220.84       1232.41    
   7  0.318670      -1.14360      -93.8736       93.8736       1236.30       1330.17    
   8  0.863267     -0.147031      -12.0692       12.0692       1213.11       1225.18    
   9  0.589255     -0.528896      -43.4151       43.4151       1200.47       1243.89    
  10  0.632079E-01  -2.76133      -226.667       226.667       1182.60       1409.27    
  11  0.992270     -0.775975E-02 -0.636968      0.636968       1197.08       1197.71    
  12  0.466140     -0.763269      -62.6538       62.6538       1162.82       1225.48    
  13  0.177509      -1.72873      -141.905       141.905       1184.14       1326.05    
  14  0.933326     -0.690005E-01  -5.66399       5.66399       1249.11       1254.78    
  15  0.876357     -0.131982      -10.8339       10.8339       1284.82       1295.65    
  16  0.673496     -0.395274      -32.4465       32.4465       1199.51       1231.96    
  17  0.648708     -0.432773      -35.5247       35.5247       1246.59       1282.11    
  18  0.400813     -0.914259      -75.0481       75.0481       1322.33       1397.38    
  19  0.763164     -0.270282      -22.1864       22.1864       1371.15       1393.33    
  20  0.196240      -1.62842      -133.671       133.671       1386.94       1520.61    
  21  0.923666     -0.794046E-01  -6.51802       6.51802       1428.51       1435.03    
  22  0.999600     -0.400298E-03 -0.328589E-01  0.328589E-01   1339.91       1339.95    
  23  0.379715     -0.968335      -79.4869       79.4869       1263.56       1343.05    
  24  0.197375      -1.62265      -133.197       133.197       1461.21       1594.40    
  25  0.760736     -0.273468      -22.4480       22.4480       1458.41       1480.86    
  26  0.392182     -0.936030      -76.8351       76.8351       1345.10       1421.94    
  27  0.256208      -1.36177      -111.782       111.782       1476.93       1588.71    
  28  0.251796      -1.37914      -113.208       113.208       1509.02       1622.22    
  29  0.332089E-01  -3.40494      -279.498       279.498       1496.32       1775.82    
  30  0.970457     -0.299883E-01  -2.46163       2.46163       1522.04       1524.50    
  31  0.467370E-01  -3.06322      -251.448       251.448       1264.10       1515.55    
  32  0.716125     -0.333901      -27.4086       27.4086       1398.81       1426.22    
  33  0.757897     -0.277208      -22.7549       22.7549       1492.43       1515.18    
  34  0.765628     -0.267059      -21.9219       21.9219       1494.30       1516.22    
  35  0.323816      -1.12758      -92.5588       92.5588       1585.46       1678.02    
  36  0.909845     -0.944807E-01  -7.75556       7.75556       1613.40       1621.16    
  37  0.515782     -0.662071      -54.3469       54.3469       1619.43       1673.77    
  38  0.464370     -0.767074      -62.9661       62.9661       1487.59       1550.56    
  39  0.445707     -0.808094      -66.3334       66.3334       1671.21       1737.54    
  40  0.786320     -0.240391      -19.7328       19.7328       1679.68       1699.41    
  41  0.631860     -0.459087      -37.6847       37.6847       1512.53       1550.21    
  42  0.672488     -0.396772      -32.5695       32.5695       1609.02       1641.59    
  43  0.251717E-02  -5.98462      -491.255       491.255       1645.25       2136.51    
  44  0.245023      -1.40640      -115.446       115.446       1601.65       1717.10    
  45  0.252688      -1.37560      -112.918       112.918       1682.39       1795.31    
  46  0.268946      -1.31324      -107.799       107.799       1817.15       1924.95    
  47  0.550357     -0.597189      -49.0209       49.0209       1800.44       1849.46    
  48  0.826205     -0.190912      -15.6712       15.6712       1671.58       1687.25    
  49  0.964276     -0.363780E-01  -2.98613       2.98613       1293.21       1296.19    
loop,thermsimp(1:2)        7   109.256       74.8448    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197       1118.98         68.44          1.23         39.37          1.63          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198       1523.59         68.13          1.15         39.56          1.86          0.04        110.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1118.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:        7
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:        8
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      197     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -184.372       184.372       1156.47       1340.85    
   2  0.476819     -0.740619      -60.7946       60.7946       1197.08       1257.87    
   3  0.564430     -0.571938      -46.9482       46.9482       1213.11       1260.06    
   4  0.211741      -1.55239      -127.430       127.430       1162.82       1290.25    
   5  0.154226E-01  -4.17192      -342.457       342.457       1199.51       1541.97    
   6  0.489577     -0.714213      -58.6270       58.6270       1220.84       1279.46    
   7  0.583965     -0.537914      -44.1553       44.1553       1217.29       1261.44    
   8  0.430258     -0.843370      -69.2290       69.2290       1165.80       1235.03    
   9  0.280982      -1.26946      -104.206       104.206       1200.47       1304.68    
  10  0.535183     -0.625146      -51.3159       51.3159       1249.11       1300.43    
  11  0.306750      -1.18172      -97.0031       97.0031       1183.34       1280.34    
  12  0.924930     -0.780370E-01  -6.40576       6.40576       1163.53       1169.94    
  13  0.829670E-01  -2.48931      -204.338       204.338       1246.59       1450.92    
  14  0.330275      -1.10783      -90.9375       90.9375       1284.82       1375.75    
  15  0.229751      -1.47076      -120.729       120.729       1293.21       1413.94    
  16  0.455737     -0.785839      -64.5065       64.5065       1184.14       1248.65    
  17  0.830949     -0.185187      -15.2013       15.2013       1236.30       1251.50    
  18  0.148624      -1.90634      -156.484       156.484       1339.91       1496.40    
  19  0.883001     -0.124429      -10.2139       10.2139       1263.56       1273.77    
  20  0.668001     -0.403466      -33.1190       33.1190       1371.15       1404.27    
  21  0.610583     -0.493341      -40.4965       40.4965       1322.33       1362.83    
  22  0.689050     -0.372441      -30.5723       30.5723       1182.60       1213.17    
  23  0.124417      -2.08412      -171.077       171.077       1345.10       1516.18    
  24  0.785584E-01  -2.54391      -208.820       208.820       1398.81       1607.63    
  25  0.936565     -0.655366E-01  -5.37965       5.37965       1428.51       1433.89    
  26  0.483719     -0.726252      -59.6152       59.6152       1458.41       1518.02    
  27  0.715685     -0.334515      -27.4591       27.4591       1492.43       1519.89    
  28  0.786437     -0.240243      -19.7206       19.7206       1264.10       1283.82    
  29  0.361023      -1.01881      -83.6306       83.6306       1494.30       1577.93    
  30  0.325559      -1.12221      -92.1180       92.1180       1386.94       1479.05    
  31  0.850460     -0.161978      -13.2962       13.2962       1522.04       1535.34    
  32  0.301358      -1.19946      -98.4589       98.4589       1512.53       1610.99    
  33  0.304725      -1.18834      -97.5466       97.5466       1487.59       1585.14    
  34  0.887065     -0.119838      -9.83701       9.83701       1476.93       1486.76    
  35  0.762822     -0.270730      -22.2232       22.2232       1461.21       1483.43    
  36  0.364130      -1.01024      -82.9271       82.9271       1613.40       1696.33    
  37  0.762041     -0.271754      -22.3073       22.3073       1509.02       1531.32    
  38  0.941180     -0.606207E-01  -4.97612       4.97612       1609.02       1614.00    
  39  0.449403     -0.799835      -65.6554       65.6554       1619.43       1685.08    
  40  0.743855     -0.295910      -24.2901       24.2901       1585.46       1609.75    
  41  0.743104     -0.296920      -24.3730       24.3730       1671.58       1695.95    
  42  0.350527      -1.04832      -86.0523       86.0523       1679.68       1765.73    
  43  0.607240     -0.498831      -40.9471       40.9471       1601.65       1642.60    
  44  0.557347     -0.584567      -47.9849       47.9849       1671.21       1719.20    
  45  0.217970      -1.52340      -125.050       125.050       1496.32       1621.37    
  46  0.364570      -1.00904      -82.8279       82.8279       1682.39       1765.22    
  47  0.330900      -1.10594      -90.7823       90.7823       1800.44       1891.22    
  48  0.861127     -0.149514      -12.2730       12.2730       1817.15       1829.42    
  49  0.710764E-01  -2.64400      -217.036       217.036       1118.98       1336.01    
loop,thermsimp(1:2)        8   184.372       60.7946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199       1253.45         68.16          1.16         39.77          1.52          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1253.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:        8
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:        9
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      198     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -36.4518       36.4518       1163.53       1199.98    
   2  0.805197     -0.216668      -17.7854       17.7854       1182.60       1200.38    
   3  0.976428     -0.238543E-01  -1.95811       1.95811       1165.80       1167.76    
   4  0.599028     -0.512447      -42.0648       42.0648       1184.14       1226.20    
   5  0.591081     -0.525802      -43.1611       43.1611       1236.30       1279.46    
   6  0.151500      -1.88717      -154.910       154.910       1197.08       1351.99    
   7  0.565682     -0.569723      -46.7663       46.7663       1213.11       1259.87    
   8  0.345258      -1.06346      -87.2956       87.2956       1217.29       1304.58    
   9  0.658101     -0.418397      -34.3446       34.3446       1263.56       1297.90    
  10  0.691977E-01  -2.67079      -219.235       219.235       1220.84       1440.07    
  11  0.289062      -1.24111      -101.878       101.878       1183.34       1285.22    
  12  0.949819     -0.514835E-01  -4.22609       4.22609       1264.10       1268.32    
  13  0.791632     -0.233658      -19.1801       19.1801       1162.82       1182.00    
  14  0.400532     -0.914962      -75.1057       75.1057       1249.11       1324.22    
  15  0.241886      -1.41929      -116.504       116.504       1200.47       1316.98    
  16  0.383016     -0.959678      -78.7763       78.7763       1118.98       1197.75    
  17  0.993978     -0.604041E-02 -0.495834      0.495834       1156.47       1156.97    
  18  0.807089     -0.214322      -17.5929       17.5929       1322.33       1339.92    
  19  0.732161     -0.311755      -25.5908       25.5908       1284.82       1310.41    
  20  0.176507      -1.73440      -142.370       142.370       1371.15       1513.52    
  21  0.628098     -0.465059      -38.1749       38.1749       1293.21       1331.38    
  22  0.383392     -0.958697      -78.6958       78.6958       1428.51       1507.21    
  23  0.906421     -0.982517E-01  -8.06511       8.06511       1246.59       1254.65    
  24  0.329288      -1.11082      -91.1833       91.1833       1386.94       1478.12    
  25  0.869436     -0.139911      -11.4847       11.4847       1461.21       1472.69    
  26  0.354994      -1.03565      -85.0128       85.0128       1476.93       1561.94    
  27  0.127935      -2.05623      -168.788       168.788       1339.91       1508.70    
  28  0.840123     -0.174207      -14.3000       14.3000       1345.10       1359.40    
  29  0.625861     -0.468627      -38.4678       38.4678       1458.41       1496.88    
  30  0.488384     -0.716653      -58.8273       58.8273       1492.43       1551.26    
  31  0.888226E-01  -2.42111      -198.740       198.740       1509.02       1707.76    
  32  0.262955      -1.33577      -109.648       109.648       1522.04       1631.69    
  33  0.153205E-01  -4.17856      -343.002       343.002       1199.51       1542.51    
  34  0.432355     -0.838509      -68.8300       68.8300       1494.30       1563.13    
  35  0.225273      -1.49044      -122.345       122.345       1487.59       1609.94    
  36  0.812147     -0.208074      -17.0800       17.0800       1398.81       1415.89    
  37  0.832805E-01  -2.48554      -204.029       204.029       1585.46       1789.49    
  38  0.442280     -0.815813      -66.9669       66.9669       1512.53       1579.50    
  39  0.106639      -2.23831      -183.734       183.734       1609.02       1792.76    
  40  0.143053      -1.94454      -159.620       159.620       1496.32       1655.94    
  41  0.871774     -0.137225      -11.2643       11.2643       1601.65       1612.91    
  42  0.137692      -1.98273      -162.755       162.755       1619.43       1782.18    
  43  0.366512      -1.00372      -82.3919       82.3919       1671.58       1753.97    
  44  0.617157     -0.482633      -39.6175       39.6175       1613.40       1653.02    
  45  0.420337     -0.866700      -71.1441       71.1441       1671.21       1742.35    
  46  0.935846     -0.663044E-01  -5.44268       5.44268       1682.39       1687.84    
  47  0.979912     -0.202925E-01  -1.66573       1.66573       1679.68       1681.35    
  48  0.692793     -0.367024      -30.1276       30.1276       1817.15       1847.28    
  49  0.155424      -1.86160      -152.812       152.812       1253.45       1406.26    
loop,thermsimp(1:2)        9   36.4518       17.7854    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200       1302.36         68.32          1.18         39.58          1.71          0.05        110.83
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1302.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:        9
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       10
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      199     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -14.9828       14.9828       1156.47       1171.46    
   2  0.367543      -1.00091      -82.1612       82.1612       1165.80       1247.96    
   3  0.528755     -0.637231      -52.3078       52.3078       1162.82       1215.13    
   4  0.776829     -0.252535      -20.7297       20.7297       1118.98       1139.71    
   5  0.149594E-01  -4.20242      -344.960       344.960       1163.53       1508.49    
   6  0.892228     -0.114033      -9.36053       9.36053       1182.60       1191.96    
   7  0.191037      -1.65529      -135.876       135.876       1184.14       1320.02    
   8  0.516533     -0.660616      -54.2274       54.2274       1246.59       1300.81    
   9  0.273230      -1.29744      -106.502       106.502       1213.11       1319.61    
  10  0.822225     -0.195741      -16.0676       16.0676       1264.10       1280.17    
  11  0.359850      -1.02207      -83.8977       83.8977       1236.30       1320.19    
  12  0.611658     -0.491581      -40.3520       40.3520       1183.34       1223.69    
  13  0.249481      -1.38837      -113.966       113.966       1263.56       1377.53    
  14  0.441252     -0.818139      -67.1579       67.1579       1217.29       1284.44    
  15  0.910514E-01  -2.39633      -196.706       196.706       1284.82       1481.52    
  16  0.745146     -0.294175      -24.1477       24.1477       1200.47       1224.62    
  17  0.758301     -0.276675      -22.7112       22.7112       1249.11       1271.82    
  18  0.638521     -0.448601      -36.8239       36.8239       1293.21       1330.03    
  19  0.150180      -1.89592      -155.629       155.629       1322.33       1477.96    
  20  0.144147      -1.93692      -158.995       158.995       1197.08       1356.07    
  21  0.104928      -2.25448      -185.062       185.062       1345.10       1530.16    
  22  0.398120     -0.921002      -75.6016       75.6016       1253.45       1329.05    
  23  0.802258     -0.220325      -18.0857       18.0857       1398.81       1416.90    
  24  0.399299     -0.918044      -75.3587       75.3587       1220.84       1296.20    
  25  0.493060     -0.707124      -58.0451       58.0451       1461.21       1519.25    
  26  0.504407     -0.684372      -56.1775       56.1775       1386.94       1443.11    
  27  0.762058     -0.271733      -22.3055       22.3055       1458.41       1480.71    
  28  0.430267     -0.843350      -69.2274       69.2274       1428.51       1497.74    
  29  0.993832     -0.618725E-02 -0.507888      0.507888       1339.91       1340.42    
  30  0.705390     -0.349005      -28.6485       28.6485       1371.15       1399.80    
  31  0.969760     -0.307069E-01  -2.52061       2.52061       1199.51       1202.03    
  32  0.245618      -1.40398      -115.247       115.247       1492.43       1607.68    
  33  0.685790     -0.377184      -30.9616       30.9616       1476.93       1507.89    
  34  0.905089     -0.997222E-01  -8.18581       8.18581       1494.30       1502.49    
  35  0.414065     -0.881732      -72.3780       72.3780       1512.53       1584.91    
  36  0.714747E-01  -2.63841      -216.577       216.577       1487.59       1704.17    
  37  0.694510     -0.364548      -29.9244       29.9244       1601.65       1631.57    
  38  0.770213E-01  -2.56367      -210.442       210.442       1522.04       1732.48    
  39  0.846173     -0.167031      -13.7109       13.7109       1613.40       1627.11    
  40  0.485012     -0.723582      -59.3961       59.3961       1496.32       1555.72    
  41  0.345787      -1.06193      -87.1700       87.1700       1679.68       1766.85    
  42  0.851861     -0.160332      -13.1610       13.1610       1682.39       1695.55    
  43  0.774151     -0.255989      -21.0131       21.0131       1509.02       1530.03    
  44  0.512382     -0.668685      -54.8898       54.8898       1671.21       1726.10    
  45  0.839798     -0.174594      -14.3318       14.3318       1671.58       1685.91    
  46  0.430550     -0.842692      -69.1733       69.1733       1619.43       1688.60    
  47  0.988263     -0.118067E-01 -0.969166      0.969166       1585.46       1586.43    
  48  0.349495      -1.05127      -86.2944       86.2944       1609.02       1695.32    
  49  0.290701      -1.23546      -101.414       101.414       1302.36       1403.77    
loop,thermsimp(1:2)       10   14.9828       82.1612    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201       1167.86         68.18          1.19         39.55          1.65          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202       1832.55         68.09          1.09         39.30          2.67          0.05        111.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    1167.9        3.165     -3.458      4.713     -102.6     0.5566    
                     -0.4625     0.3000     -99.70      4.254      2.690    

                       2.773     -1.262      2.001      7302.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.693      0.000      0.000      7000.      295.9    

                      -1.186     -8.459     -7.621     -2.752      10.68    

                      -3.720     -3.949      4091.      0.000      8903.    



                       1807.      6842.      7703.      1242.     -274.5    

                       4809.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.115     -1.609     -2.265     -2.233    -0.3807    

                     -0.3252      9.629      8.612    -0.1603E+05 -4.909    

                     -0.3121     -2.165      9.080      9.145    -0.1969E+05



                      -6.000     0.3018     0.3513E-01  8.918      9.015    

                     -0.1944E+05 -6.000     -1.169    -0.6577      9.637    

                       9.452    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1167.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       10
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       11
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      201     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -6.89832       6.89832       1118.98       1125.88    
   2  0.309089      -1.17413      -96.3796       96.3796       1156.47       1252.85    
   3  0.237901      -1.43590      -117.868       117.868       1182.60       1300.47    
   4  0.542467     -0.611627      -50.2061       50.2061       1199.51       1249.72    
   5  0.523672     -0.646889      -53.1007       53.1007       1162.82       1215.92    
   6  0.850058     -0.162450      -13.3349       13.3349       1183.34       1196.67    
   7  0.589343     -0.528746      -43.4028       43.4028       1200.47       1243.87    
   8  0.979269     -0.209490E-01  -1.71962       1.71962       1165.80       1167.52    
   9  0.110419      -2.20347      -180.875       180.875       1249.11       1429.99    
  10  0.557914     -0.583550      -47.9014       47.9014       1264.10       1312.00    
  11  0.474464     -0.745569      -61.2009       61.2009       1217.29       1278.49    
  12  0.312482      -1.16321      -95.4832       95.4832       1220.84       1316.32    
  13  0.297011      -1.21399      -99.6515       99.6515       1246.59       1346.24    
  14  0.857571     -0.153651      -12.6127       12.6127       1213.11       1225.72    
  15  0.792567     -0.232479      -19.0833       19.0833       1184.14       1203.22    
  16  0.963006     -0.376958E-01  -3.09431       3.09431       1236.30       1239.39    
  17  0.294103      -1.22382      -100.459       100.459       1253.45       1353.91    
  18  0.403484     -0.907618      -74.5029       74.5029       1293.21       1367.71    
  19  0.449313     -0.800035      -65.6718       65.6718       1339.91       1405.59    
  20  0.721912     -0.325852      -26.7479       26.7479       1197.08       1223.82    
  21  0.512488     -0.668479      -54.8729       54.8729       1263.56       1318.43    
  22  0.885190     -0.121953      -10.0106       10.0106       1371.15       1381.16    
  23  0.694751E-01  -2.66679      -218.906       218.906       1302.36       1521.27    
  24  0.820879     -0.197380      -16.2022       16.2022       1398.81       1415.01    
  25  0.211527      -1.55340      -127.513       127.513       1386.94       1514.45    
  26  0.937420     -0.646236E-01  -5.30470       5.30470       1322.33       1327.64    
  27  0.515756E-01  -2.96471      -243.361       243.361       1458.41       1701.77    
  28  0.695222     -0.363525      -29.8403       29.8403       1284.82       1314.66    
  29  0.718776     -0.330205      -27.1053       27.1053       1428.51       1455.62    
  30  0.536080     -0.623471      -51.1784       51.1784       1494.30       1545.48    
  31  0.585855     -0.534682      -43.8900       43.8900       1476.93       1520.82    
  32  0.693572     -0.365900      -30.0354       30.0354       1163.53       1193.56    
  33  0.700823     -0.355500      -29.1816       29.1816       1461.21       1490.39    
  34  0.250985      -1.38236      -113.473       113.473       1509.02       1622.49    
  35  0.290600      -1.23581      -101.443       101.443       1345.10       1446.55    
  36  0.828609     -0.188007      -15.4328       15.4328       1496.32       1511.76    
  37  0.225820      -1.48802      -122.146       122.146       1512.53       1634.67    
  38  0.999674     -0.326354E-03 -0.267891E-01  0.267891E-01   1585.46       1585.48    
  39  0.878216     -0.129862      -10.6599       10.6599       1492.43       1503.09    
  40  0.685898E-01  -2.67961      -219.959       219.959       1613.40       1833.36    
  41  0.273860      -1.29514      -106.313       106.313       1601.65       1707.96    
  42  0.697655     -0.360030      -29.5535       29.5535       1671.58       1701.13    
  43  0.293168      -1.22701      -100.720       100.720       1619.43       1720.15    
  44  0.319476      -1.14107      -93.6663       93.6663       1609.02       1702.69    
  45  0.874681     -0.133896      -10.9910       10.9910       1682.39       1693.38    
  46  0.408697     -0.894781      -73.4491       73.4491       1487.59       1561.04    
  47  0.142130E-01  -4.25360      -349.161       349.161       1671.21       2020.37    
  48  0.164528      -1.80468      -148.139       148.139       1522.04       1670.18    
  49  0.652669     -0.426685      -35.0249       35.0249       1167.86       1202.89    
loop,thermsimp(1:2)       11   6.89832       96.3796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203       1206.93         68.17          1.20         39.73          1.71          0.05        110.85
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204       2037.08         68.38          1.23         39.50          1.68          0.05        110.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1206.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       11
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       12
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      203     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -22.2183       22.2183       1118.98       1141.20    
   2  0.482922E-01  -3.03048      -248.761       248.761       1165.80       1414.56    
   3  0.612960     -0.489456      -40.1776       40.1776       1163.53       1203.71    
   4  0.910127     -0.941714E-01  -7.73017       7.73017       1183.34       1191.07    
   5  0.362433      -1.01492      -83.3107       83.3107       1167.86       1251.17    
   6  0.476779     -0.740702      -60.8014       60.8014       1184.14       1244.94    
   7  0.179006E-01  -4.02292      -330.226       330.226       1162.82       1493.05    
   8  0.589646     -0.528233      -43.3606       43.3606       1197.08       1240.44    
   9  0.926206     -0.766581E-01  -6.29257       6.29257       1213.11       1219.40    
  10  0.492629     -0.707999      -58.1170       58.1170       1236.30       1294.41    
  11  0.661123     -0.413815      -33.9685       33.9685       1200.47       1234.44    
  12  0.542248     -0.612032      -50.2393       50.2393       1199.51       1249.75    
  13  0.216527      -1.53004      -125.595       125.595       1156.47       1282.07    
  14  0.549832     -0.598143      -49.0993       49.0993       1217.29       1266.39    
  15  0.429556     -0.845003      -69.3631       69.3631       1182.60       1251.96    
  16  0.264838      -1.32864      -109.063       109.063       1264.10       1373.16    
  17  0.251706      -1.37949      -113.237       113.237       1284.82       1398.05    
  18  0.701724     -0.354215      -29.0761       29.0761       1220.84       1249.91    
  19  0.324289      -1.12612      -92.4388       92.4388       1263.56       1356.00    
  20  0.160749E-02  -6.43308      -528.067       528.067       1322.33       1850.40    
  21  0.533627     -0.628058      -51.5549       51.5549       1246.59       1298.14    
  22  0.883065     -0.124357      -10.2080       10.2080       1253.45       1263.66    
  23  0.484824     -0.723969      -59.4278       59.4278       1293.21       1352.64    
  24  0.724157     -0.322747      -26.4931       26.4931       1371.15       1397.64    
  25  0.847375     -0.165612      -13.5945       13.5945       1339.91       1353.51    
  26  0.167586      -1.78626      -146.627       146.627       1398.81       1545.44    
  27  0.890079     -0.116445      -9.55851       9.55851       1249.11       1258.67    
  28  0.235223      -1.44722      -118.797       118.797       1345.10       1463.90    
  29  0.206112      -1.57934      -129.642       129.642       1428.51       1558.16    
  30  0.463385     -0.769198      -63.1405       63.1405       1461.21       1524.35    
  31  0.487880E-01  -3.02027      -247.922       247.922       1492.43       1740.35    
  32  0.244157      -1.40994      -115.737       115.737       1496.32       1612.06    
  33  0.770602     -0.260583      -21.3903       21.3903       1386.94       1408.33    
  34  0.264159      -1.33120      -109.273       109.273       1476.93       1586.20    
  35  0.189030E-01  -3.96843      -325.754       325.754       1302.36       1628.11    
  36  0.635342     -0.453592      -37.2336       37.2336       1494.30       1531.53    
  37  0.139550      -1.96933      -161.655       161.655       1487.59       1649.25    
  38  0.561566     -0.577026      -47.3658       47.3658       1585.46       1632.82    
  39  0.951789     -0.494118E-01  -4.05603       4.05603       1509.02       1513.07    
  40  0.527693     -0.639242      -52.4729       52.4729       1512.53       1565.00    
  41  0.925337     -0.775972E-01  -6.36966       6.36966       1522.04       1528.41    
  42  0.795352     -0.228971      -18.7954       18.7954       1682.39       1701.19    
  43  0.530799     -0.633371      -51.9910       51.9910       1671.58       1723.57    
  44  0.642763     -0.441979      -36.2804       36.2804       1458.41       1494.69    
  45  0.485146     -0.723305      -59.3734       59.3734       1609.02       1668.39    
  46  0.795896     -0.228287      -18.7392       18.7392       1601.65       1620.39    
  47  0.519140     -0.655581      -53.8142       53.8142       1619.43       1673.24    
  48  0.694073E-01  -2.66776      -218.986       218.986       1613.40       1832.39    
  49  0.401486     -0.912583      -74.9105       74.9105       1206.93       1281.84    
loop,thermsimp(1:2)       12   22.2183       248.761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205       1919.92         68.13          1.12         39.59          1.89          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1919.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       12
neval is:      204
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       13
neval is:      204


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      204     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -42.9216       42.9216       1118.98       1161.90    
   2  0.691791     -0.368472      -30.2464       30.2464       1183.34       1213.58    
   3  0.688173     -0.373715      -30.6768       30.6768       1163.53       1194.21    
   4  0.439966     -0.821058      -67.3975       67.3975       1213.11       1280.50    
   5  0.945690     -0.558403E-01  -4.58372       4.58372       1200.47       1205.05    
   6  0.238956      -1.43147      -117.504       117.504       1197.08       1314.58    
   7  0.280830E-01  -3.57259      -293.260       293.260       1184.14       1477.40    
   8  0.902031E-01  -2.40569      -197.474       197.474       1199.51       1396.98    
   9  0.198361      -1.61767      -132.788       132.788       1220.84       1353.63    
  10  0.201288      -1.60302      -131.586       131.586       1167.86       1299.45    
  11  0.710033     -0.342444      -28.1099       28.1099       1182.60       1210.71    
  12  0.182913      -1.69874      -139.443       139.443       1249.11       1388.55    
  13  0.817316     -0.201730      -16.5592       16.5592       1253.45       1270.01    
  14  0.894732     -0.111231      -9.13051       9.13051       1217.29       1226.42    
  15  0.854000     -0.157824      -12.9552       12.9552       1206.93       1219.88    
  16  0.248066      -1.39406      -114.433       114.433       1156.47       1270.91    
  17  0.670877     -0.399170      -32.7663       32.7663       1236.30       1269.06    
  18  0.701473     -0.354573      -29.1055       29.1055       1246.59       1275.69    
  19  0.199467      -1.61210      -132.332       132.332       1293.21       1425.54    
  20  0.391533     -0.937685      -76.9710       76.9710       1339.91       1416.89    
  21  0.586761     -0.533138      -43.7632       43.7632       1263.56       1307.32    
  22  0.163799      -1.80912      -148.503       148.503       1264.10       1412.60    
  23  0.955964     -0.450353E-01  -3.69677       3.69677       1371.15       1374.84    
  24  0.365727      -1.00587      -82.5678       82.5678       1284.82       1367.38    
  25  0.733577     -0.309822      -25.4321       25.4321       1386.94       1412.37    
  26  0.111597      -2.19286      -180.004       180.004       1165.80       1345.80    
  27  0.714895     -0.335619      -27.5497       27.5497       1345.10       1372.65    
  28  0.816688     -0.202498      -16.6223       16.6223       1162.82       1179.45    
  29  0.480603     -0.732714      -60.1457       60.1457       1458.41       1518.55    
  30  0.573891     -0.555316      -45.5837       45.5837       1509.02       1554.60    
  31  0.204452      -1.58742      -130.305       130.305       1461.21       1591.51    
  32  0.845356E-01  -2.47058      -202.801       202.801       1522.04       1724.84    
  33  0.524789E-01  -2.94734      -241.936       241.936       1494.30       1736.24    
  34  0.631781     -0.459213      -37.6950       37.6950       1398.81       1436.51    
  35  0.620363     -0.477450      -39.1920       39.1920       1428.51       1467.71    
  36  0.553551     -0.591402      -48.5459       48.5459       1512.53       1561.07    
  37  0.546271     -0.604640      -49.6326       49.6326       1476.93       1526.56    
  38  0.402204     -0.910797      -74.7638       74.7638       1496.32       1571.09    
  39  0.735174     -0.307648      -25.2536       25.2536       1601.65       1626.90    
  40  0.359565      -1.02286      -83.9626       83.9626       1302.36       1386.32    
  41  0.564111     -0.572504      -46.9947       46.9947       1585.46       1632.45    
  42  0.412661     -0.885128      -72.6568       72.6568       1487.59       1560.25    
  43  0.795853     -0.228341      -18.7436       18.7436       1609.02       1627.76    
  44  0.909991E-01  -2.39691      -196.753       196.753       1619.43       1816.18    
  45  0.830687     -0.185502      -15.2272       15.2272       1682.39       1697.62    
  46  0.592588     -0.523256      -42.9521       42.9521       1671.58       1714.53    
  47  0.489472     -0.714427      -58.6446       58.6446       1492.43       1551.07    
  48  0.992056     -0.797586E-02 -0.654708      0.654708       1613.40       1614.06    
  49  0.808208     -0.212936      -17.4791       17.4791       1919.92       1937.40    
loop,thermsimp(1:2)       13   42.9216       30.2464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    206       1322.33         68.15          1.24         39.66          1.69          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1322.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       13
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       14
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      205     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -88.8016       88.8016       1118.98       1207.78    
   2  0.649641     -0.431335      -35.4066       35.4066       1162.82       1198.23    
   3  0.930116     -0.724456E-01  -5.94678       5.94678       1163.53       1169.48    
   4  0.297326      -1.21293      -99.5645       99.5645       1200.47       1300.04    
   5  0.751734     -0.285373      -23.4251       23.4251       1182.60       1206.02    
   6  0.409056     -0.893902      -73.3770       73.3770       1183.34       1256.71    
   7  0.115094      -2.16201      -177.471       177.471       1206.93       1384.40    
   8  0.606681     -0.499753      -41.0228       41.0228       1217.29       1258.31    
   9  0.140571      -1.96204      -161.057       161.057       1236.30       1397.35    
  10  0.447669E-01  -3.10629      -254.983       254.983       1253.45       1508.43    
  11  0.517394     -0.658951      -54.0908       54.0908       1156.47       1210.56    
  12  0.587057     -0.532633      -43.7218       43.7218       1246.59       1290.31    
  13  0.384993E-01  -3.25712      -267.364       267.364       1213.11       1480.47    
  14  0.829105E-01  -2.48999      -204.394       204.394       1167.86       1372.25    
  15  0.382179     -0.961866      -78.9559       78.9559       1263.56       1342.52    
  16  0.269516      -1.31113      -107.626       107.626       1197.08       1304.70    
  17  0.879580     -0.128311      -10.5325       10.5325       1165.80       1176.33    
  18  0.760503E-01  -2.57636      -211.484       211.484       1220.84       1432.32    
  19  0.482544     -0.728684      -59.8149       59.8149       1284.82       1344.63    
  20  0.561499     -0.577145      -47.3757       47.3757       1345.10       1392.48    
  21  0.254621      -1.36798      -112.292       112.292       1371.15       1483.44    
  22  0.479261     -0.735511      -60.3753       60.3753       1302.36       1362.73    
  23  0.638455     -0.448704      -36.8324       36.8324       1249.11       1285.94    
  24  0.289082      -1.24105      -101.873       101.873       1199.51       1301.38    
  25  0.656024     -0.421558      -34.6041       34.6041       1386.94       1421.54    
  26  0.597431     -0.515117      -42.2840       42.2840       1264.10       1306.38    
  27  0.859562     -0.151333      -12.4223       12.4223       1339.91       1352.34    
  28  0.554826     -0.589100      -48.3570       48.3570       1293.21       1341.56    
  29  0.128413      -2.05250      -168.482       168.482       1398.81       1567.29    
  30  0.311170      -1.16742      -95.8288       95.8288       1428.51       1524.34    
  31  0.606679     -0.499755      -41.0230       41.0230       1184.14       1225.16    
  32  0.923238     -0.798686E-01  -6.55611       6.55611       1458.41       1464.96    
  33  0.734154     -0.309037      -25.3677       25.3677       1476.93       1502.29    
  34  0.988670     -0.113947E-01 -0.935349      0.935349       1492.43       1493.37    
  35  0.136308      -1.99284      -163.584       163.584       1509.02       1672.60    
  36  0.345839      -1.06178      -87.1577       87.1577       1487.59       1574.75    
  37  0.349440      -1.05142      -86.3074       86.3074       1512.53       1598.84    
  38  0.625658E-01  -2.77154      -227.505       227.505       1496.32       1723.83    
  39  0.394804     -0.929365      -76.2880       76.2880       1461.21       1537.49    
  40  0.899667E-02  -4.71090      -386.700       386.700       1613.40       2000.10    
  41  0.823946     -0.193651      -15.8960       15.8960       1601.65       1617.55    
  42  0.834235     -0.181240      -14.8773       14.8773       1609.02       1623.90    
  43  0.777534     -0.251627      -20.6551       20.6551       1585.46       1606.11    
  44  0.384993     -0.954531      -78.3538       78.3538       1682.39       1760.75    
  45  0.247443E-01  -3.69916      -303.650       303.650       1671.58       1975.23    
  46  0.810695     -0.209863      -17.2269       17.2269       1522.04       1539.27    
  47  0.893618     -0.112477      -9.23278       9.23278       1494.30       1503.53    
  48  0.545617     -0.605837      -49.7309       49.7309       1619.43       1669.16    
  49  0.587193     -0.532402      -43.7029       43.7029       1322.33       1366.03    
loop,thermsimp(1:2)       14   88.8016       35.4066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207       1497.53         68.32          1.18         39.36          1.71          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1497.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       14
neval is:      206
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       15
neval is:      206


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      206     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -124.392       124.392       1163.53       1287.92    
   2  0.894567E-01  -2.41400      -198.156       198.156       1165.80       1363.96    
   3  0.863615     -0.146628      -12.0361       12.0361       1162.82       1174.86    
   4  0.807990     -0.213206      -17.5013       17.5013       1182.60       1200.10    
   5  0.318173      -1.14516      -94.0019       94.0019       1118.98       1212.98    
   6  0.464606     -0.766566      -62.9244       62.9244       1156.47       1219.40    
   7  0.574933     -0.553501      -45.4348       45.4348       1184.14       1229.57    
   8  0.974939     -0.253802E-01  -2.08337       2.08337       1183.34       1185.42    
   9  0.415757     -0.877653      -72.0432       72.0432       1217.29       1289.33    
  10  0.187109      -1.67606      -137.582       137.582       1249.11       1386.69    
  11  0.730515E-01  -2.61659      -214.786       214.786       1246.59       1461.37    
  12  0.209185      -1.56454      -128.427       128.427       1200.47       1328.90    
  13  0.496690     -0.699790      -57.4431       57.4431       1199.51       1256.95    
  14  0.862986     -0.147356      -12.0959       12.0959       1197.08       1209.17    
  15  0.888200     -0.118558      -9.73197       9.73197       1264.10       1273.83    
  16  0.380888     -0.965250      -79.2337       79.2337       1293.21       1372.44    
  17  0.135305      -2.00022      -164.191       164.191       1263.56       1427.75    
  18  0.927079     -0.757167E-01  -6.21529       6.21529       1284.82       1291.03    
  19  0.603067     -0.505727      -41.5132       41.5132       1339.91       1381.43    
  20  0.136202      -1.99362      -163.649       163.649       1302.36       1466.01    
  21  0.954653     -0.464076E-01  -3.80942       3.80942       1322.33       1326.14    
  22  0.151192      -1.88920      -155.078       155.078       1167.86       1322.94    
  23  0.449259     -0.800155      -65.6817       65.6817       1206.93       1272.61    
  24  0.780874     -0.247341      -20.3033       20.3033       1345.10       1365.41    
  25  0.456238     -0.784740      -64.4163       64.4163       1236.30       1300.71    
  26  0.163284      -1.81227      -148.762       148.762       1386.94       1535.70    
  27  0.821444     -0.196692      -16.1457       16.1457       1220.84       1236.98    
  28  0.861448     -0.149141      -12.2424       12.2424       1458.41       1470.65    
  29  0.924167     -0.788621E-01  -6.47349       6.47349       1213.11       1219.58    
  30  0.195059      -1.63445      -134.166       134.166       1371.15       1505.31    
  31  0.375134     -0.980472      -80.4832       80.4832       1492.43       1572.91    
  32  0.909862     -0.944628E-01  -7.75409       7.75409       1476.93       1484.68    
  33  0.831459     -0.184574      -15.1510       15.1510       1494.30       1509.45    
  34  0.627278     -0.466365      -38.2821       38.2821       1253.45       1291.73    
  35  0.918890     -0.845891E-01  -6.94360       6.94360       1428.51       1435.46    
  36  0.475784     -0.742791      -60.9729       60.9729       1461.21       1522.18    
  37  0.344524      -1.06559      -87.4704       87.4704       1522.04       1609.51    
  38  0.286778      -1.24905      -102.529       102.529       1398.81       1501.34    
  39  0.336148      -1.09020      -89.4906       89.4906       1487.59       1577.08    
  40  0.709840     -0.342716      -28.1323       28.1323       1512.53       1540.66    
  41  0.219827      -1.51491      -124.353       124.353       1585.46       1709.81    
  42  0.347594      -1.05672      -86.7421       86.7421       1601.65       1688.39    
  43  0.905734     -0.990099E-01  -8.12735       8.12735       1609.02       1617.15    
  44  0.826231     -0.190881      -15.6687       15.6687       1619.43       1635.10    
  45  0.400277     -0.915599      -75.1581       75.1581       1509.02       1584.17    
  46  0.555153     -0.588512      -48.3087       48.3087       1496.32       1544.63    
  47  0.864397     -0.145723      -11.9619       11.9619       1682.39       1694.35    
  48  0.277380E-01  -3.58495      -294.275       294.275       1671.58       1965.85    
  49  0.993968     -0.605015E-02 -0.496634      0.496634       1497.53       1498.03    
loop,thermsimp(1:2)       15   124.392       198.156    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    208       1988.03         67.97          1.18         39.79          1.88          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    209       1240.47         67.92          1.18         39.59          1.72          0.05        110.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1240.47
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       15
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       16
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      208     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -120.027       120.027       1162.82       1282.85    
   2  0.641193     -0.444425      -36.4811       36.4811       1183.34       1219.82    
   3  0.353033      -1.04119      -85.4677       85.4677       1182.60       1268.07    
   4  0.928955     -0.736953E-01  -6.04936       6.04936       1197.08       1203.13    
   5  0.350257      -1.04909      -86.1157       86.1157       1118.98       1205.09    
   6  0.682617     -0.381821      -31.3422       31.3422       1156.47       1187.82    
   7  0.162763      -1.81546      -149.024       149.024       1213.11       1362.13    
   8  0.874032     -0.134639      -11.0520       11.0520       1184.14       1195.19    
   9  0.518909     -0.656027      -53.8507       53.8507       1220.84       1274.69    
  10  0.461984     -0.772226      -63.3891       63.3891       1199.51       1262.90    
  11  0.449468     -0.799691      -65.6436       65.6436       1206.93       1272.57    
  12  0.523281     -0.647637      -53.1621       53.1621       1264.10       1317.26    
  13  0.637377     -0.450394      -36.9712       36.9712       1163.53       1200.50    
  14  0.596329     -0.516963      -42.4355       42.4355       1217.29       1259.72    
  15  0.286246      -1.25090      -102.682       102.682       1284.82       1387.50    
  16  0.590425     -0.526913      -43.2523       43.2523       1253.45       1296.70    
  17  0.853637     -0.158249      -12.9900       12.9900       1236.30       1249.29    
  18  0.245572      -1.40416      -115.262       115.262       1167.86       1283.12    
  19  0.375654     -0.979088      -80.3696       80.3696       1322.33       1402.70    
  20  0.281654      -1.26708      -104.009       104.009       1200.47       1304.48    
  21  0.443392     -0.813302      -66.7609       66.7609       1165.80       1232.56    
  22  0.442934     -0.814335      -66.8456       66.8456       1345.10       1411.95    
  23  0.171790      -1.76149      -144.594       144.594       1293.21       1437.80    
  24  0.802582     -0.219921      -18.0525       18.0525       1339.91       1357.97    
  25  0.162733      -1.81564      -149.039       149.039       1249.11       1398.15    
  26  0.838320     -0.176355      -14.4763       14.4763       1263.56       1278.04    
  27  0.210754      -1.55706      -127.813       127.813       1428.51       1556.33    
  28  0.240377      -1.42554      -117.018       117.018       1246.59       1363.60    
  29  0.173042E-01  -4.05680      -333.008       333.008       1302.36       1635.37    
  30  0.640146     -0.446059      -36.6153       36.6153       1458.41       1495.02    
  31  0.749210     -0.288736      -23.7012       23.7012       1476.93       1500.63    
  32  0.666162     -0.406222      -33.3452       33.3452       1497.53       1530.88    
  33  0.601746     -0.507920      -41.6932       41.6932       1398.81       1440.51    
  34  0.677044     -0.390020      -32.0152       32.0152       1371.15       1403.16    
  35  0.290379      -1.23657      -101.505       101.505       1494.30       1595.80    
  36  0.439723     -0.821610      -67.4428       67.4428       1461.21       1528.65    
  37  0.680091     -0.385528      -31.6465       31.6465       1386.94       1418.58    
  38  0.803784     -0.218425      -17.9297       17.9297       1512.53       1530.46    
  39  0.507823     -0.677622      -55.6234       55.6234       1496.32       1551.95    
  40  0.894573     -0.111408      -9.14509       9.14509       1492.43       1501.57    
  41  0.826908     -0.190062      -15.6015       15.6015       1487.59       1503.19    
  42  0.815562     -0.203878      -16.7356       16.7356       1509.02       1525.75    
  43  0.352457      -1.04283      -85.6018       85.6018       1522.04       1607.64    
  44  0.104059      -2.26279      -185.744       185.744       1609.02       1794.76    
  45  0.601892     -0.507677      -41.6732       41.6732       1619.43       1661.10    
  46  0.988184     -0.118862E-01 -0.975691      0.975691       1601.65       1602.62    
  47  0.733912     -0.309366      -25.3947       25.3947       1682.39       1707.79    
  48  0.107394      -2.23125      -183.155       183.155       1585.46       1768.61    
  49  0.592150     -0.523995      -43.0128       43.0128       1240.47       1283.49    
loop,thermsimp(1:2)       16   120.027       36.4811    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210       1196.44         67.99          1.16         39.61          1.78          0.05        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1196.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       16
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       17
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      209     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -20.7208       20.7208       1156.47       1177.19    
   2  0.350417      -1.04863      -86.0781       86.0781       1184.14       1270.22    
   3  0.533846     -0.627648      -51.5212       51.5212       1163.53       1215.05    
   4  0.622955     -0.473280      -38.8498       38.8498       1197.08       1235.93    
   5  0.661091E-01  -2.71645      -222.983       222.983       1118.98       1341.96    
   6  0.759206     -0.275482      -22.6133       22.6133       1183.34       1205.95    
   7  0.430535     -0.842727      -69.1762       69.1762       1165.80       1234.98    
   8  0.257678      -1.35604      -111.312       111.312       1236.30       1347.61    
   9  0.296561      -1.21550      -99.7758       99.7758       1217.29       1317.06    
  10  0.805929     -0.215760      -17.7109       17.7109       1199.51       1217.22    
  11  0.421616     -0.863661      -70.8946       70.8946       1182.60       1253.49    
  12  0.767803     -0.264223      -21.6890       21.6890       1206.93       1228.62    
  13  0.605260     -0.502097      -41.2152       41.2152       1220.84       1262.05    
  14  0.566784     -0.567776      -46.6066       46.6066       1263.56       1310.17    
  15  0.292740      -1.22847      -100.840       100.840       1162.82       1263.66    
  16  0.898463     -0.107069      -8.78893       8.78893       1167.86       1176.65    
  17  0.218067      -1.52295      -125.014       125.014       1240.47       1365.49    
  18  0.856756     -0.154603      -12.6907       12.6907       1253.45       1266.14    
  19  0.338883      -1.08210      -88.8255       88.8255       1200.47       1289.30    
  20  0.796034     -0.228113      -18.7250       18.7250       1264.10       1282.82    
  21  0.778636     -0.250212      -20.5389       20.5389       1339.91       1360.45    
  22  0.575989     -0.551667      -45.2843       45.2843       1213.11       1258.39    
  23  0.355531      -1.03414      -84.8889       84.8889       1246.59       1331.47    
  24  0.164949      -1.80212      -147.929       147.929       1284.82       1432.74    
  25  0.315998      -1.15202      -94.5649       94.5649       1249.11       1343.68    
  26  0.330933      -1.10584      -90.7741       90.7741       1322.33       1413.11    
  27  0.429436     -0.845283      -69.3861       69.3861       1371.15       1440.53    
  28  0.464808     -0.766130      -62.8887       62.8887       1345.10       1407.99    
  29  0.192211      -1.64916      -135.373       135.373       1386.94       1522.31    
  30  0.866849     -0.142891      -11.7293       11.7293       1293.21       1304.94    
  31  0.474973     -0.744498      -61.1130       61.1130       1398.81       1459.93    
  32  0.667713     -0.403897      -33.1543       33.1543       1458.41       1491.56    
  33  0.994155     -0.586200E-02 -0.481189      0.481189       1476.93       1477.41    
  34  0.577739     -0.548634      -45.0353       45.0353       1492.43       1537.47    
  35  0.381919     -0.962546      -79.0117       79.0117       1487.59       1566.60    
  36  0.733204     -0.310331      -25.4739       25.4739       1509.02       1534.49    
  37  0.492382     -0.708500      -58.1581       58.1581       1461.21       1519.36    
  38  0.188899E-01  -3.96913      -325.811       325.811       1512.53       1838.34    
  39  0.741920E-01  -2.60110      -213.514       213.514       1497.53       1711.05    
  40  0.210592      -1.55783      -127.877       127.877       1496.32       1624.20    
  41  0.682838     -0.381498      -31.3157       31.3157       1428.51       1459.83    
  42  0.656831     -0.420328      -34.5031       34.5031       1494.30       1528.80    
  43  0.444670     -0.810424      -66.5246       66.5246       1601.65       1668.17    
  44  0.872301     -0.136621      -11.2147       11.2147       1522.04       1533.26    
  45  0.932741     -0.696282E-01  -5.71551       5.71551       1302.36       1308.07    
  46  0.601727     -0.507951      -41.6958       41.6958       1619.43       1661.12    
  47  0.940344     -0.615097E-01  -5.04910       5.04910       1682.39       1687.44    
  48  0.208477E-01  -3.87051      -317.716       317.716       1585.46       1903.17    
  49  0.257831      -1.35545      -111.264       111.264       1196.44       1307.70    
loop,thermsimp(1:2)       17   20.7208       86.0781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211       1289.19         68.22          1.22         39.32          1.92          0.04        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1289.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       17
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       18
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      210     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -117.011       117.011       1167.86       1284.87    
   2  0.711556E-02  -4.94547      -405.955       405.955       1156.47       1562.43    
   3  0.909796     -0.945347E-01  -7.76000       7.76000       1183.34       1191.10    
   4  0.659218     -0.416702      -34.2054       34.2054       1163.53       1197.73    
   5  0.833482     -0.182144      -14.9515       14.9515       1199.51       1214.46    
   6  0.726295E-01  -2.62238      -215.261       215.261       1206.93       1422.19    
   7  0.687091     -0.375288      -30.8060       30.8060       1165.80       1196.61    
   8  0.860775     -0.149922      -12.3065       12.3065       1197.08       1209.38    
   9  0.846215     -0.166982      -13.7069       13.7069       1182.60       1196.31    
  10  0.398551     -0.919919      -75.5126       75.5126       1213.11       1288.62    
  11  0.416092     -0.876849      -71.9772       71.9772       1220.84       1292.81    
  12  0.463389     -0.769189      -63.1398       63.1398       1162.82       1225.96    
  13  0.207356      -1.57332      -129.148       129.148       1253.45       1382.60    
  14  0.133003      -2.01738      -165.599       165.599       1184.14       1349.74    
  15  0.464971     -0.765779      -62.8599       62.8599       1264.10       1326.96    
  16  0.568281     -0.565140      -46.3902       46.3902       1200.47       1246.86    
  17  0.638811     -0.448147      -36.7866       36.7866       1293.21       1329.99    
  18  0.865664     -0.144259      -11.8417       11.8417       1196.44       1208.28    
  19  0.475002     -0.744436      -61.1079       61.1079       1302.36       1363.47    
  20  0.537086     -0.621597      -51.0245       51.0245       1263.56       1314.58    
  21  0.782345     -0.245459      -20.1488       20.1488       1217.29       1237.44    
  22  0.725469     -0.320937      -26.3445       26.3445       1246.59       1272.93    
  23  0.701426E-01  -2.65723      -218.121       218.121       1118.98       1337.10    
  24  0.297043      -1.21388      -99.6428       99.6428       1249.11       1348.75    
  25  0.444870     -0.809973      -66.4876       66.4876       1236.30       1302.78    
  26  0.685684     -0.377338      -30.9742       30.9742       1339.91       1370.89    
  27  0.651244     -0.428871      -35.2044       35.2044       1240.47       1275.68    
  28  0.269082      -1.31274      -107.758       107.758       1345.10       1452.86    
  29  0.177107      -1.73100      -142.091       142.091       1322.33       1464.42    
  30  0.766464     -0.265968      -21.8323       21.8323       1284.82       1306.65    
  31  0.801833     -0.220855      -18.1291       18.1291       1371.15       1389.28    
  32  0.759414     -0.275209      -22.5908       22.5908       1428.51       1451.11    
  33  0.566307     -0.568618      -46.6757       46.6757       1398.81       1445.49    
  34  0.297948      -1.21084      -99.3928       99.3928       1476.93       1576.32    
  35  0.430097E-01  -3.14633      -258.270       258.270       1458.41       1716.68    
  36  0.529414     -0.635984      -52.2055       52.2055       1461.21       1513.41    
  37  0.717133     -0.332494      -27.2931       27.2931       1386.94       1414.23    
  38  0.209457      -1.56323      -128.320       128.320       1494.30       1622.62    
  39  0.732428     -0.311390      -25.5608       25.5608       1522.04       1547.60    
  40  0.697782     -0.359849      -29.5386       29.5386       1509.02       1538.56    
  41  0.977227     -0.230362E-01  -1.89095       1.89095       1492.43       1494.32    
  42  0.744700     -0.294773      -24.1968       24.1968       1487.59       1511.79    
  43  0.713341     -0.337796      -27.7284       27.7284       1496.32       1524.05    
  44  0.497823     -0.697510      -57.2560       57.2560       1619.43       1676.68    
  45  0.968758     -0.317404E-01  -2.60545       2.60545       1601.65       1604.25    
  46  0.287665      -1.24596      -102.276       102.276       1682.39       1784.67    
  47  0.964672     -0.359674E-01  -2.95242       2.95242       1497.53       1500.48    
  48  0.733769     -0.309561      -25.4107       25.4107       1512.53       1537.94    
  49  0.692680     -0.367187      -30.1410       30.1410       1289.19       1319.33    
loop,thermsimp(1:2)       18   117.011       405.955    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212       1845.19         68.06          1.16         39.73          1.47          0.05        110.46
Just calling func    0   0        110.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    213       1383.38         68.05          1.16         39.67          1.82          0.05        110.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1383.38
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       18
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       19
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      212     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -26.7152       26.7152       1183.34       1210.05    
   2  0.240049      -1.42691      -117.130       117.130       1182.60       1299.73    
   3  0.365543      -1.00637      -82.6092       82.6092       1165.80       1248.41    
   4  0.399010     -0.918769      -75.4183       75.4183       1163.53       1238.95    
   5  0.685268     -0.377945      -31.0241       31.0241       1196.44       1227.46    
   6  0.335805E-01  -3.39381      -278.585       278.585       1197.08       1475.66    
   7  0.820520     -0.197817      -16.2380       16.2380       1199.51       1215.75    
   8  0.756560     -0.278973      -22.8999       22.8999       1162.82       1185.72    
   9  0.869461     -0.139882      -11.4824       11.4824       1217.29       1228.77    
  10  0.787378     -0.239047      -19.6224       19.6224       1200.47       1220.09    
  11  0.330926      -1.10586      -90.7758       90.7758       1246.59       1337.36    
  12  0.339084E-01  -3.38409      -277.787       277.787       1240.47       1518.26    
  13  0.672805     -0.396300      -32.5307       32.5307       1167.86       1200.39    
  14  0.822413     -0.195513      -16.0489       16.0489       1213.11       1229.16    
  15  0.928870     -0.737865E-01  -6.05685       6.05685       1220.84       1226.89    
  16  0.778944     -0.249816      -20.5065       20.5065       1236.30       1256.80    
  17  0.301602E-01  -3.50123      -287.403       287.403       1284.82       1572.22    
  18  0.292626      -1.22886      -100.873       100.873       1263.56       1364.43    
  19  0.149515      -1.90036      -155.993       155.993       1289.19       1445.18    
  20  0.500330E-01  -2.99507      -245.854       245.854       1264.10       1509.95    
  21  0.759114E-01  -2.57819      -211.634       211.634       1293.21       1504.84    
  22  0.613440     -0.488673      -40.1133       40.1133       1118.98       1159.09    
  23  0.132502      -2.02116      -165.909       165.909       1249.11       1415.02    
  24  0.189750E-02  -6.26722      -514.452       514.452       1184.14       1698.59    
  25  0.507622     -0.678018      -55.6559       55.6559       1302.36       1358.02    
  26  0.378733     -0.970924      -79.6994       79.6994       1339.91       1419.61    
  27  0.139411      -1.97033      -161.737       161.737       1253.45       1415.18    
  28  0.298599      -1.20865      -99.2138       99.2138       1371.15       1470.36    
  29  0.767617     -0.264464      -21.7088       21.7088       1386.94       1408.65    
  30  0.656077     -0.421478      -34.5975       34.5975       1206.93       1241.53    
  31  0.701883     -0.353988      -29.0575       29.0575       1398.81       1427.87    
  32  0.940950     -0.608655E-01  -4.99621       4.99621       1428.51       1433.51    
  33  0.621043     -0.476355      -39.1022       39.1022       1345.10       1384.21    
  34  0.622910     -0.473353      -38.8557       38.8557       1322.33       1361.19    
  35  0.525019     -0.644320      -52.8898       52.8898       1492.43       1545.32    
  36  0.871126     -0.137969      -11.3253       11.3253       1497.53       1508.86    
  37  0.475532     -0.743322      -61.0164       61.0164       1487.59       1548.61    
  38  0.320094      -1.13914      -93.5077       93.5077       1461.21       1554.71    
  39  0.688986     -0.372534      -30.5799       30.5799       1496.32       1526.90    
  40  0.831218     -0.184863      -15.1747       15.1747       1512.53       1527.70    
  41  0.639633     -0.446861      -36.6811       36.6811       1509.02       1545.70    
  42  0.628257     -0.464807      -38.1542       38.1542       1522.04       1560.20    
  43  0.925835     -0.770596E-01  -6.32552       6.32552       1156.47       1162.80    
  44  0.611089     -0.492512      -40.4284       40.4284       1476.93       1517.35    
  45  0.423003E-01  -3.16296      -259.635       259.635       1601.65       1861.28    
  46  0.430763     -0.842198      -69.1328       69.1328       1494.30       1563.43    
  47  0.374764     -0.981459      -80.5642       80.5642       1619.43       1699.99    
  48  0.109336      -2.21333      -181.684       181.684       1458.41       1640.09    
  49  0.642636E-02  -5.04735      -414.317       414.317       1383.38       1797.69    
loop,thermsimp(1:2)       19   26.7152       117.130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214       1441.98         67.97          1.18         39.76          1.53          0.05        110.49
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1441.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       19
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       20
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      213     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -95.6477       95.6477       1118.98       1214.62    
   2  0.362384      -1.01505      -83.3216       83.3216       1156.47       1239.79    
   3  0.900627     -0.104664      -8.59148       8.59148       1162.82       1171.42    
   4  0.233893      -1.45289      -119.262       119.262       1167.86       1287.12    
   5  0.183338      -1.69642      -139.253       139.253       1183.34       1322.59    
   6  0.351708      -1.04495      -85.7762       85.7762       1199.51       1285.29    
   7  0.979617     -0.205938E-01  -1.69046       1.69046       1200.47       1202.16    
   8  0.801294     -0.221527      -18.1843       18.1843       1220.84       1239.02    
   9  0.423893     -0.858275      -70.4525       70.4525       1196.44       1266.89    
  10  0.486446     -0.720630      -59.1538       59.1538       1217.29       1276.44    
  11  0.430531     -0.842736      -69.1769       69.1769       1213.11       1282.28    
  12  0.214629      -1.53884      -126.318       126.318       1163.53       1289.85    
  13  0.860310     -0.150463      -12.3509       12.3509       1206.93       1219.28    
  14  0.450659     -0.797045      -65.4264       65.4264       1165.80       1231.23    
  15  0.867432     -0.142218      -11.6741       11.6741       1236.30       1247.97    
  16  0.850327     -0.162134      -13.3089       13.3089       1182.60       1195.91    
  17  0.914193     -0.897130E-01  -7.36420       7.36420       1246.59       1253.95    
  18  0.908448     -0.960172E-01  -7.88169       7.88169       1302.36       1310.24    
  19  0.349788E-01  -3.35301      -275.236       275.236       1322.33       1597.57    
  20  0.825048     -0.192314      -15.7863       15.7863       1263.56       1279.35    
  21  0.628933     -0.463730      -38.0658       38.0658       1345.10       1383.17    
  22  0.756366     -0.279229      -22.9209       22.9209       1386.94       1409.86    
  23  0.545707     -0.605674      -49.7174       49.7174       1249.11       1298.83    
  24  0.653619     -0.425231      -34.9056       34.9056       1253.45       1288.35    
  25  0.781643     -0.246357      -20.2225       20.2225       1339.91       1360.14    
  26  0.444411     -0.811005      -66.5723       66.5723       1398.81       1465.38    
  27  0.223111      -1.50008      -123.136       123.136       1428.51       1551.65    
  28  0.143901      -1.93863      -159.135       159.135       1289.19       1448.32    
  29  0.419282E-01  -3.17180      -260.361       260.361       1371.15       1631.51    
  30  0.407367     -0.898040      -73.7166       73.7166       1197.08       1270.79    
  31  0.722138     -0.325538      -26.7222       26.7222       1293.21       1319.93    
  32  0.290143      -1.23738      -101.572       101.572       1497.53       1599.10    
  33  0.236931E-01  -3.74257      -307.213       307.213       1264.10       1571.31    
  34  0.198981      -1.61454      -132.532       132.532       1476.93       1609.46    
  35  0.765966     -0.266617      -21.8856       21.8856       1240.47       1262.36    
  36  0.522733     -0.648684      -53.2480       53.2480       1496.32       1549.57    
  37  0.297579E-01  -3.51466      -288.505       288.505       1512.53       1801.03    
  38  0.175475      -1.74026      -142.851       142.851       1492.43       1635.28    
  39  0.311931      -1.16497      -95.6281       95.6281       1509.02       1604.64    
  40  0.310920      -1.16822      -95.8948       95.8948       1487.59       1583.49    
  41  0.122272      -2.10150      -172.504       172.504       1461.21       1633.71    
  42  0.949359     -0.519686E-01  -4.26590       4.26590       1522.04       1526.31    
  43  0.500750     -0.691648      -56.7747       56.7747       1494.30       1551.07    
  44  0.729401E-01  -2.61812      -214.911       214.911       1284.82       1499.73    
  45  0.952528     -0.486360E-01  -3.99234       3.99234       1458.41       1462.40    
  46  0.718842     -0.330114      -27.0978       27.0978       1184.14       1211.24    
  47  0.529396     -0.636019      -52.2084       52.2084       1619.43       1671.63    
  48  0.314661      -1.15626      -94.9128       94.9128       1383.38       1478.29    
  49  0.947465     -0.539649E-01  -4.42977       4.42977       1441.98       1446.41    
loop,thermsimp(1:2)       20   95.6477       83.3216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215       1257.10         68.26          1.20         39.48          1.65          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1257.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       20
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       21
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      214     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -96.8845       96.8845       1162.82       1259.71    
   2  0.575213     -0.553015      -45.3948       45.3948       1182.60       1227.99    
   3  0.632244     -0.458480      -37.6349       37.6349       1200.47       1238.11    
   4  0.819203     -0.199424      -16.3699       16.3699       1184.14       1200.51    
   5  0.137693E-02  -6.58790      -540.775       540.775       1118.98       1659.75    
   6  0.367814      -1.00018      -82.1008       82.1008       1206.93       1289.03    
   7  0.452636     -0.792666      -65.0670       65.0670       1165.80       1230.87    
   8  0.278102      -1.27977      -105.051       105.051       1220.84       1325.89    
   9  0.417803     -0.872745      -71.6403       71.6403       1156.47       1228.11    
  10  0.682140     -0.382521      -31.3997       31.3997       1236.30       1267.70    
  11  0.204733      -1.58605      -130.192       130.192       1246.59       1376.78    
  12  0.637442     -0.450292      -36.9628       36.9628       1240.47       1277.44    
  13  0.114518      -2.16702      -177.883       177.883       1196.44       1374.32    
  14  0.724207     -0.322678      -26.4874       26.4874       1197.08       1223.56    
  15  0.461399     -0.773492      -63.4930       63.4930       1217.29       1280.78    
  16  0.731739     -0.312332      -25.6381       25.6381       1263.56       1289.20    
  17  0.773272     -0.257124      -21.1064       21.1064       1213.11       1234.21    
  18  0.789195     -0.236742      -19.4332       19.4332       1199.51       1218.94    
  19  0.762001     -0.271807      -22.3116       22.3116       1167.86       1190.17    
  20  0.933384     -0.689386E-01  -5.65890       5.65890       1253.45       1259.11    
  21  0.694037     -0.365230      -29.9803       29.9803       1163.53       1193.51    
  22  0.423570     -0.859038      -70.5151       70.5151       1249.11       1319.63    
  23  0.272919      -1.29858      -106.595       106.595       1302.36       1408.95    
  24  0.535843     -0.623914      -51.2147       51.2147       1293.21       1344.42    
  25  0.902288     -0.102822      -8.44023       8.44023       1183.34       1191.78    
  26  0.479374     -0.735275      -60.3559       60.3559       1339.91       1400.27    
  27  0.494900E-01  -3.00599      -246.750       246.750       1345.10       1591.85    
  28  0.921867     -0.813539E-01  -6.67803       6.67803       1386.94       1393.62    
  29  0.132425      -2.02174      -165.957       165.957       1441.98       1607.94    
  30  0.640539     -0.445446      -36.5649       36.5649       1289.19       1325.75    
  31  0.215363      -1.53543      -126.038       126.038       1458.41       1584.45    
  32  0.437204E-01  -3.12994      -256.925       256.925       1398.81       1655.74    
  33  0.166028      -1.79560      -147.394       147.394       1383.38       1530.77    
  34  0.425825     -0.853727      -70.0792       70.0792       1284.82       1354.89    
  35  0.810393     -0.210235      -17.2574       17.2574       1522.04       1539.30    
  36  0.855958     -0.155534      -12.7672       12.7672       1496.32       1509.09    
  37  0.830452     -0.185786      -15.2504       15.2504       1494.30       1509.55    
  38  0.658784     -0.417359      -34.2594       34.2594       1428.51       1462.77    
  39  0.910965     -0.932509E-01  -7.65461       7.65461       1264.10       1271.75    
  40  0.603480     -0.505043      -41.4570       41.4570       1487.59       1529.05    
  41  0.702610     -0.352953      -28.9726       28.9726       1322.33       1351.30    
  42  0.329065      -1.11150      -91.2387       91.2387       1497.53       1588.77    
  43  0.790497     -0.235094      -19.2979       19.2979       1509.02       1528.31    
  44  0.641572     -0.443834      -36.4326       36.4326       1476.93       1513.36    
  45  0.650683     -0.429733      -35.2752       35.2752       1371.15       1406.42    
  46  0.194049E-02  -6.24481      -512.613       512.613       1461.21       1973.82    
  47  0.662053     -0.412409      -33.8531       33.8531       1492.43       1526.28    
  48  0.294846      -1.22130      -100.252       100.252       1619.43       1719.68    
  49  0.709874     -0.342668      -28.1283       28.1283       1257.10       1285.23    
loop,thermsimp(1:2)       21   96.8845       45.3948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216       1160.39         68.18          1.20         40.04          1.12          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    217       1519.70         68.02          1.12         39.55          1.89          0.05        110.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1160.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       21
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       22
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      216     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -14.4197       14.4197       1167.86       1182.28    
   2  0.801853     -0.220830      -18.1271       18.1271       1183.34       1201.46    
   3  0.768645     -0.263126      -21.5990       21.5990       1163.53       1185.13    
   4  0.855557     -0.156003      -12.8057       12.8057       1184.14       1196.95    
   5  0.845591     -0.167720      -13.7675       13.7675       1199.51       1213.28    
   6  0.350050      -1.04968      -86.1641       86.1641       1197.08       1283.24    
   7  0.927608     -0.751463E-01  -6.16847       6.16847       1182.60       1188.77    
   8  0.655345E-01  -2.72518      -223.699       223.699       1156.47       1380.17    
   9  0.355481      -1.03428      -84.9004       84.9004       1165.80       1250.70    
  10  0.728523     -0.316737      -25.9997       25.9997       1213.11       1239.11    
  11  0.573220     -0.556486      -45.6798       45.6798       1200.47       1246.15    
  12  0.112478      -2.18499      -179.358       179.358       1253.45       1432.81    
  13  0.338739      -1.08253      -88.8604       88.8604       1162.82       1251.68    
  14  0.239648      -1.42858      -117.267       117.267       1236.30       1353.56    
  15  0.918959     -0.845134E-01  -6.93738       6.93738       1264.10       1271.04    
  16  0.283771      -1.25959      -103.395       103.395       1240.47       1343.87    
  17  0.414404     -0.880913      -72.3108       72.3108       1217.29       1289.60    
  18  0.716403     -0.333512      -27.3768       27.3768       1257.10       1284.48    
  19  0.317726      -1.14657      -94.1173       94.1173       1206.93       1301.05    
  20  0.339005      -1.08174      -88.7960       88.7960       1263.56       1352.36    
  21  0.163059      -1.81364      -148.875       148.875       1249.11       1397.99    
  22  0.477081     -0.740069      -60.7494       60.7494       1289.19       1349.94    
  23  0.105851      -2.24573      -184.343       184.343       1220.84       1405.18    
  24  0.840431     -0.173840      -14.2699       14.2699       1293.21       1307.48    
  25  0.235315      -1.44683      -118.765       118.765       1322.33       1441.10    
  26  0.865464     -0.144489      -11.8606       11.8606       1284.82       1296.68    
  27  0.909462     -0.949026E-01  -7.79019       7.79019       1196.44       1204.23    
  28  0.152105E-01  -4.18577      -343.594       343.594       1246.59       1590.18    
  29  0.962485     -0.382371E-01  -3.13874       3.13874       1386.94       1390.08    
  30  0.259410      -1.34934      -110.763       110.763       1339.91       1450.68    
  31  0.364880      -1.00819      -82.7582       82.7582       1371.15       1453.90    
  32  0.467235     -0.760923      -62.4612       62.4612       1302.36       1364.82    
  33  0.844908     -0.168527      -13.8338       13.8338       1428.51       1442.35    
  34  0.188232      -1.67008      -137.091       137.091       1496.32       1633.41    
  35  0.496585     -0.700000      -57.4603       57.4603       1494.30       1551.76    
  36  0.410505     -0.890367      -73.0868       73.0868       1476.93       1550.01    
  37  0.533875     -0.627594      -51.5168       51.5168       1492.43       1543.95    
  38  0.610668     -0.493202      -40.4850       40.4850       1509.02       1549.50    
  39  0.241933      -1.41910      -116.488       116.488       1487.59       1604.08    
  40  0.642629     -0.442188      -36.2975       36.2975       1383.38       1419.67    
  41  0.775072     -0.254799      -20.9155       20.9155       1522.04       1542.96    
  42  0.345343      -1.06322      -87.2754       87.2754       1458.41       1545.68    
  43  0.844097     -0.169488      -13.9126       13.9126       1497.53       1511.44    
  44  0.426886     -0.851239      -69.8750       69.8750       1345.10       1414.98    
  45  0.594109     -0.520693      -42.7417       42.7417       1441.98       1484.72    
  46  0.489527     -0.714316      -58.6355       58.6355       1398.81       1457.45    
  47  0.313882      -1.15874      -95.1165       95.1165       1118.98       1214.09    
  48  0.687066     -0.375325      -30.8090       30.8090       1619.43       1650.24    
  49  0.394505     -0.930124      -76.3503       76.3503       1160.39       1236.74    
loop,thermsimp(1:2)       22   14.4197       18.1271    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218       1162.37         68.03          1.15         39.82          1.52          0.05        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219       1688.47         67.99          1.11         39.46          2.21          0.05        110.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1162.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       22
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       23
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      218     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -13.4996       13.4996       1167.86       1181.36    
   2  0.848474     -0.164316      -13.4881       13.4881       1163.53       1177.02    
   3  0.146795      -1.91872      -157.500       157.500       1182.60       1340.10    
   4  0.398624     -0.919738      -75.4978       75.4978       1184.14       1259.64    
   5  0.888093     -0.118679      -9.74187       9.74187       1183.34       1193.08    
   6  0.475009     -0.744421      -61.1067       61.1067       1196.44       1257.55    
   7  0.120824      -2.11342      -173.483       173.483       1199.51       1372.99    
   8  0.270052      -1.30914      -107.462       107.462       1118.98       1226.44    
   9  0.201748E-01  -3.90332      -320.409       320.409       1160.39       1480.80    
  10  0.999386     -0.614559E-03 -0.504468E-01  0.504468E-01   1213.11       1213.16    
  11  0.212655      -1.54808      -127.076       127.076       1200.47       1327.55    
  12  0.197911      -1.61994      -132.975       132.975       1165.80       1298.77    
  13  0.786394     -0.240297      -19.7251       19.7251       1162.82       1182.55    
  14  0.781263     -0.246844      -20.2625       20.2625       1264.10       1284.36    
  15  0.788011     -0.238244      -19.5565       19.5565       1197.08       1216.63    
  16  0.956387     -0.445927E-01  -3.66044       3.66044       1257.10       1260.76    
  17  0.717415     -0.332100      -27.2608       27.2608       1217.29       1244.55    
  18  0.808756     -0.212258      -17.4234       17.4234       1284.82       1302.24    
  19  0.756838     -0.278606      -22.8697       22.8697       1206.93       1229.80    
  20  0.570684     -0.560919      -46.0437       46.0437       1293.21       1339.25    
  21  0.946031     -0.554796E-01  -4.55411       4.55411       1240.47       1245.03    
  22  0.678634E-01  -2.69026      -220.833       220.833       1289.19       1510.02    
  23  0.631502     -0.459654      -37.7312       37.7312       1263.56       1301.29    
  24  0.114784E-01  -4.46729      -366.703       366.703       1236.30       1603.00    
  25  0.549681     -0.598417      -49.1218       49.1218       1302.36       1351.48    
  26  0.846433     -0.166725      -13.6858       13.6858       1156.47       1170.16    
  27  0.441841     -0.816805      -67.0484       67.0484       1386.94       1453.99    
  28  0.299100      -1.20698      -99.0761       99.0761       1249.11       1348.19    
  29  0.378130     -0.972517      -79.8302       79.8302       1220.84       1300.67    
  30  0.830469     -0.185764      -15.2487       15.2487       1345.10       1360.35    
  31  0.675108     -0.392883      -32.2503       32.2503       1383.38       1415.63    
  32  0.997619     -0.238377E-02 -0.195674      0.195674       1253.45       1253.64    
  33  0.897623     -0.108005      -8.86570       8.86570       1322.33       1331.20    
  34  0.591811E-01  -2.82715      -232.070       232.070       1428.51       1660.58    
  35  0.229825      -1.47044      -120.703       120.703       1339.91       1460.62    
  36  0.654017     -0.424622      -34.8556       34.8556       1371.15       1406.00    
  37  0.305777      -1.18490      -97.2640       97.2640       1398.81       1496.08    
  38  0.936135     -0.659954E-01  -5.41731       5.41731       1441.98       1447.40    
  39  0.698153     -0.359317      -29.4949       29.4949       1497.53       1527.03    
  40  0.829975     -0.186360      -15.2976       15.2976       1522.04       1537.34    
  41  0.951351     -0.498721E-01  -4.09381       4.09381       1492.43       1496.52    
  42  0.883299     -0.124092      -10.1862       10.1862       1458.41       1468.59    
  43  0.910087     -0.942154E-01  -7.73378       7.73378       1509.02       1516.75    
  44  0.590840     -0.526210      -43.1946       43.1946       1476.93       1520.12    
  45  0.146785      -1.91879      -157.506       157.506       1494.30       1651.81    
  46  0.830381E-01  -2.48846      -204.268       204.268       1246.59       1450.85    
  47  0.289482      -1.23966      -101.759       101.759       1487.59       1589.35    
  48  0.594462     -0.520098      -42.6929       42.6929       1496.32       1539.02    
  49  0.241311      -1.42167      -116.699       116.699       1162.37       1279.06    
loop,thermsimp(1:2)       23   13.4996       13.4881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220       1205.45         68.03          1.15         39.58          1.86          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221       1657.17         67.99          1.10         39.63          1.91          0.05        110.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    1657.2        2.538     -3.823      10.54     -102.6     0.2692    
                     -0.7847     0.2630     -99.70      4.058      2.640    

                       2.608     -2.314      2.489      8637.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.995      0.000      0.000      7000.      154.9    

                      -1.110     -10.81     -6.650     -6.429      11.50    

                      -3.549     -3.949      4662.      0.000     0.1021E+05



                       1562.      7064.      7345.      2296.     -797.5    

                       4685.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.004     -1.527     -2.477     -2.425    -0.3807    

                     -0.3252      9.737      8.689    -0.1677E+05 -4.630    

                     -0.5522     -2.113      9.155      9.296    -0.1969E+05



                      -6.000     0.3175     0.1886      9.035      8.906    

                     -0.1944E+05 -6.000    -0.8566    -0.5281      9.672    

                       9.358    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1205.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       23
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       24
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      220     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -187.364       187.364       1156.47       1343.84    
   2  0.372115     -0.988552      -81.1465       81.1465       1163.53       1244.68    
   3  0.732875     -0.310780      -25.5108       25.5108       1167.86       1193.37    
   4  0.341646      -1.07398      -88.1589       88.1589       1162.82       1250.98    
   5  0.406512     -0.900141      -73.8891       73.8891       1183.34       1257.23    
   6  0.271848      -1.30251      -106.918       106.918       1213.11       1320.03    
   7  0.738418     -0.303245      -24.8922       24.8922       1197.08       1221.97    
   8  0.903199     -0.101813      -8.35743       8.35743       1118.98       1127.33    
   9  0.511789     -0.669842      -54.9848       54.9848       1206.93       1261.91    
  10  0.202674      -1.59616      -131.023       131.023       1217.29       1348.31    
  11  0.325695      -1.12179      -92.0839       92.0839       1240.47       1332.56    
  12  0.719720     -0.328893      -26.9976       26.9976       1253.45       1280.45    
  13  0.715609     -0.334622      -27.4678       27.4678       1196.44       1223.91    
  14  0.973328     -0.270339E-01  -2.21911       2.21911       1184.14       1186.36    
  15  0.373998     -0.983504      -80.7321       80.7321       1257.10       1337.83    
  16  0.977965     -0.222815E-01  -1.82900       1.82900       1162.37       1164.19    
  17  0.105495      -2.24909      -184.619       184.619       1264.10       1448.72    
  18  0.729809     -0.314973      -25.8549       25.8549       1165.80       1191.65    
  19  0.378008     -0.972839      -79.8567       79.8567       1220.84       1300.69    
  20  0.678326     -0.388127      -31.8598       31.8598       1263.56       1295.42    
  21  0.671993     -0.397507      -32.6299       32.6299       1284.82       1317.44    
  22  0.515926     -0.661792      -54.3240       54.3240       1200.47       1254.79    
  23  0.363490      -1.01200      -83.0715       83.0715       1322.33       1405.40    
  24  0.206319      -1.57833      -129.559       129.559       1293.21       1422.77    
  25  0.755157E-01  -2.58341      -212.063       212.063       1182.60       1394.66    
  26  0.413763     -0.882461      -72.4379       72.4379       1249.11       1321.55    
  27  0.279023      -1.27646      -104.780       104.780       1302.36       1407.14    
  28  0.506422     -0.680385      -55.8502       55.8502       1345.10       1400.95    
  29  0.643082E-02  -5.04665      -414.261       414.261       1199.51       1613.77    
  30  0.285888E-01  -3.55474      -291.795       291.795       1371.15       1662.94    
  31  0.660419     -0.414880      -34.0559       34.0559       1383.38       1417.43    
  32  0.739369     -0.301959      -24.7866       24.7866       1441.98       1466.77    
  33  0.270269      -1.30834      -107.396       107.396       1246.59       1353.98    
  34  0.663889     -0.409640      -33.6258       33.6258       1386.94       1420.56    
  35  0.898739E-01  -2.40935      -197.774       197.774       1339.91       1537.69    
  36  0.832427     -0.183410      -15.0554       15.0554       1458.41       1473.46    
  37  0.723106     -0.324200      -26.6123       26.6123       1160.39       1187.00    
  38  0.986274     -0.138207E-01  -1.13449       1.13449       1398.81       1399.95    
  39  0.812861     -0.207195      -17.0078       17.0078       1492.43       1509.44    
  40  0.553236     -0.591971      -48.5926       48.5926       1289.19       1337.78    
  41  0.693785E-01  -2.66818      -219.021       219.021       1509.02       1728.04    
  42  0.117256      -2.14340      -175.943       175.943       1476.93       1652.87    
  43  0.807809     -0.213430      -17.5196       17.5196       1497.53       1515.05    
  44  0.900249     -0.105084      -8.62592       8.62592       1522.04       1530.67    
  45  0.753470     -0.283066      -23.2358       23.2358       1496.32       1519.56    
  46  0.127159      -2.06232      -169.288       169.288       1487.59       1656.88    
  47  0.535389     -0.624762      -51.2843       51.2843       1236.30       1287.58    
  48  0.957281     -0.436582E-01  -3.58373       3.58373       1494.30       1497.88    
  49  0.227700      -1.47973      -121.465       121.465       1205.45       1326.92    
loop,thermsimp(1:2)       24   187.364       81.1465    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222       3871.84         68.08          1.13         39.24          2.20          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223       1118.78         68.12          1.19         39.57          1.85          0.06        110.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1118.78
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       24
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       25
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      222     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01  -3.11340       3.11340       1118.98       1122.09    
   2  0.355374      -1.03458      -84.9250       84.9250       1162.37       1247.29    
   3  0.294461      -1.22261      -100.359       100.359       1184.14       1284.50    
   4  0.644538     -0.439222      -36.0540       36.0540       1160.39       1196.44    
   5  0.741622     -0.298915      -24.5368       24.5368       1165.80       1190.34    
   6  0.805913E-01  -2.51837      -206.723       206.723       1167.86       1374.58    
   7  0.498180     -0.696794      -57.1972       57.1972       1197.08       1254.27    
   8  0.771004     -0.260061      -21.3474       21.3474       1196.44       1217.79    
   9  0.753480     -0.283053      -23.2347       23.2347       1163.53       1186.76    
  10  0.460525     -0.775387      -63.6486       63.6486       1162.82       1226.47    
  11  0.918626     -0.848759E-01  -6.96714       6.96714       1200.47       1207.44    
  12  0.355379      -1.03457      -84.9239       84.9239       1183.34       1268.26    
  13  0.664646     -0.408501      -33.5323       33.5323       1206.93       1240.46    
  14  0.328018      -1.11469      -91.5005       91.5005       1253.45       1344.95    
  15  0.529583     -0.635665      -52.1793       52.1793       1236.30       1288.47    
  16  0.259823      -1.34775      -110.632       110.632       1263.56       1374.19    
  17  0.463690E-01  -3.07112      -252.097       252.097       1220.84       1472.93    
  18  0.366509      -1.00373      -82.3925       82.3925       1284.82       1367.21    
  19  0.794534     -0.229999      -18.8798       18.8798       1213.11       1231.99    
  20  0.669373     -0.401413      -32.9505       32.9505       1249.11       1282.06    
  21  0.798901     -0.224518      -18.4299       18.4299       1205.45       1223.88    
  22  0.610403     -0.493636      -40.5207       40.5207       1240.47       1280.99    
  23  0.267818      -1.31745      -108.144       108.144       1289.19       1397.33    
  24  0.663049     -0.410906      -33.7297       33.7297       1257.10       1290.83    
  25  0.782871     -0.244788      -20.0937       20.0937       1156.47       1176.57    
  26  0.706545     -0.347368      -28.5141       28.5141       1217.29       1245.80    
  27  0.120119      -2.11927      -173.963       173.963       1246.59       1420.55    
  28  0.270575      -1.30721      -107.304       107.304       1182.60       1289.90    
  29  0.505391     -0.682422      -56.0174       56.0174       1398.81       1454.83    
  30  0.665734     -0.406865      -33.3980       33.3980       1345.10       1378.50    
  31  0.836788     -0.178185      -14.6265       14.6265       1322.33       1336.96    
  32  0.866983     -0.142736      -11.7167       11.7167       1302.36       1314.08    
  33  0.552904     -0.592571      -48.6419       48.6419       1383.38       1432.02    
  34  0.554153     -0.590314      -48.4567       48.4567       1386.94       1435.39    
  35  0.592407E-01  -2.82615      -231.988       231.988       1293.21       1525.20    
  36  0.902163     -0.102960      -8.45156       8.45156       1264.10       1272.55    
  37  0.266638E-01  -3.62445      -297.517       297.517       1441.98       1739.50    
  38  0.897053     -0.108640      -8.91785       8.91785       1458.41       1467.33    
  39  0.840496     -0.173763      -14.2635       14.2635       1494.30       1508.56    
  40  0.288358      -1.24355      -102.079       102.079       1492.43       1594.51    
  41  0.835972E-01  -2.48175      -203.717       203.717       1497.53       1701.25    
  42  0.412070     -0.886563      -72.7746       72.7746       1496.32       1569.10    
  43  0.725010     -0.321570      -26.3964       26.3964       1522.04       1548.44    
  44  0.316556      -1.15026      -94.4201       94.4201       1339.91       1434.33    
  45  0.486178     -0.721181      -59.1990       59.1990       1199.51       1258.71    
  46  0.143341      -1.94253      -159.455       159.455       1476.93       1636.38    
  47  0.956913     -0.440430E-01  -3.61532       3.61532       1487.59       1491.21    
  48  0.362697      -1.01419      -83.2507       83.2507       1371.15       1454.40    
  49  0.951746     -0.494572E-01  -4.05975       4.05975       1118.78       1122.84    
loop,thermsimp(1:2)       25   3.11340       84.9250    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224       1383.06         68.39          1.21         39.41          1.71          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1383.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       25
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       26
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      223     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01  -1.03058       1.03058       1118.98       1120.01    
   2  0.516099     -0.661457      -54.2965       54.2965       1118.78       1173.07    
   3  0.202206      -1.59847      -131.212       131.212       1156.47       1287.69    
   4  0.240260      -1.42603      -117.058       117.058       1163.53       1280.59    
   5  0.717263E-01  -2.63490      -216.289       216.289       1165.80       1382.09    
   6  0.395382     -0.927902      -76.1679       76.1679       1160.39       1236.56    
   7  0.494348     -0.704516      -57.8311       57.8311       1200.47       1258.30    
   8  0.970815     -0.296196E-01  -2.43136       2.43136       1196.44       1198.87    
   9  0.992795     -0.723105E-02 -0.593570      0.593570       1205.45       1206.05    
  10  0.387320     -0.948503      -77.8590       77.8590       1162.82       1240.68    
  11  0.586568     -0.533466      -43.7902       43.7902       1213.11       1256.90    
  12  0.119144      -2.12742      -174.632       174.632       1206.93       1381.56    
  13  0.145144      -1.93003      -158.429       158.429       1217.29       1375.72    
  14  0.767931     -0.264056      -21.6753       21.6753       1162.37       1184.04    
  15  0.415014     -0.879442      -72.1900       72.1900       1197.08       1269.27    
  16  0.994477     -0.553801E-02 -0.454594      0.454594       1199.51       1199.96    
  17  0.757243     -0.278071      -22.8258       22.8258       1183.34       1206.16    
  18  0.669290     -0.401537      -32.9607       32.9607       1264.10       1297.06    
  19  0.112026      -2.18903      -179.689       179.689       1240.47       1420.16    
  20  0.434244     -0.834148      -68.4720       68.4720       1249.11       1317.58    
  21  0.491828     -0.709627      -58.2505       58.2505       1184.14       1242.39    
  22  0.517535     -0.658677      -54.0683       54.0683       1236.30       1290.36    
  23  0.411147     -0.888804      -72.9585       72.9585       1182.60       1255.56    
  24  0.250164      -1.38564      -113.742       113.742       1257.10       1370.84    
  25  0.109742E-01  -4.51221      -370.390       370.390       1302.36       1672.75    
  26  0.559459     -0.580786      -47.6745       47.6745       1322.33       1370.01    
  27  0.289677      -1.23899      -101.704       101.704       1253.45       1355.15    
  28  0.835809     -0.179356      -14.7226       14.7226       1284.82       1299.54    
  29  0.236182      -1.44315      -118.463       118.463       1263.56       1382.02    
  30  0.700988     -0.355264      -29.1623       29.1623       1167.86       1197.02    
  31  0.886914     -0.120007      -9.85094       9.85094       1345.10       1354.95    
  32  0.182911      -1.69875      -139.444       139.444       1289.19       1428.63    
  33  0.693089     -0.366597      -30.0926       30.0926       1246.59       1276.68    
  34  0.108523      -2.22079      -182.296       182.296       1383.38       1565.67    
  35  0.141600      -1.95475      -160.458       160.458       1339.91       1500.37    
  36  0.168348E-01  -4.08431      -335.265       335.265       1386.94       1722.20    
  37  0.419419E-01  -3.17147      -260.334       260.334       1371.15       1631.48    
  38  0.244896      -1.40692      -115.489       115.489       1398.81       1514.30    
  39  0.360662      -1.01981      -83.7127       83.7127       1458.41       1542.12    
  40  0.927013     -0.757879E-01  -6.22114       6.22114       1220.84       1227.06    
  41  0.869067     -0.140335      -11.5196       11.5196       1487.59       1499.11    
  42  0.827083     -0.189851      -15.5841       15.5841       1494.30       1509.88    
  43  0.928403     -0.742893E-01  -6.09812       6.09812       1293.21       1299.31    
  44  0.513193     -0.667103      -54.7600       54.7600       1522.04       1576.80    
  45  0.809080     -0.211858      -17.3906       17.3906       1496.32       1513.71    
  46  0.341224E-02  -5.68039      -466.281       466.281       1492.43       1958.71    
  47  0.734431     -0.308659      -25.3367       25.3367       1476.93       1502.26    
  48  0.688454     -0.373307      -30.6434       30.6434       1497.53       1528.17    
  49  0.990614     -0.943067E-02 -0.774127      0.774127       1383.06       1383.83    
loop,thermsimp(1:2)       26   1.03058       54.2965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225       1346.89         67.96          1.13         40.04          1.59          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1346.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       26
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       27
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      224     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -132.273       132.273       1118.98       1251.25    
   2  0.983274     -0.168677E-01  -1.38460       1.38460       1118.78       1120.16    
   3  0.569108     -0.563685      -46.2707       46.2707       1162.37       1208.64    
   4  0.411179     -0.888728      -72.9523       72.9523       1167.86       1240.81    
   5  0.889241     -0.117387      -9.63581       9.63581       1196.44       1206.08    
   6  0.109537      -2.21149      -181.533       181.533       1199.51       1381.04    
   7  0.658027     -0.418509      -34.3538       34.3538       1205.45       1239.81    
   8  0.427534     -0.849722      -69.7504       69.7504       1183.34       1253.09    
   9  0.277803      -1.28084      -105.139       105.139       1220.84       1325.98    
  10  0.568421     -0.564892      -46.3699       46.3699       1160.39       1206.76    
  11  0.368489     -0.998346      -81.9504       81.9504       1162.82       1244.77    
  12  0.100945E-01  -4.59576      -377.249       377.249       1184.14       1561.39    
  13  0.811445     -0.208939      -17.1510       17.1510       1182.60       1199.75    
  14  0.135138      -2.00146      -164.292       164.292       1213.11       1377.40    
  15  0.600340     -0.510258      -41.8852       41.8852       1200.47       1242.36    
  16  0.537538     -0.620755      -50.9554       50.9554       1197.08       1248.03    
  17  0.923261     -0.798434E-01  -6.55404       6.55404       1246.59       1253.14    
  18  0.296505      -1.21569      -99.7916       99.7916       1163.53       1263.32    
  19  0.975666     -0.246348E-01  -2.02218       2.02218       1156.47       1158.50    
  20  0.102971      -2.27331      -186.608       186.608       1236.30       1422.90    
  21  0.110137      -2.20603      -181.085       181.085       1264.10       1445.18    
  22  0.874539     -0.134058      -11.0043       11.0043       1293.21       1304.21    
  23  0.887507     -0.119339      -9.79611       9.79611       1284.82       1294.61    
  24  0.811767     -0.208543      -17.1185       17.1185       1249.11       1266.23    
  25  0.304283      -1.18980      -97.6659       97.6659       1345.10       1442.77    
  26  0.304144      -1.19025      -97.7034       97.7034       1253.45       1351.15    
  27  0.854538     -0.157194      -12.9035       12.9035       1322.33       1335.23    
  28  0.543001     -0.610645      -50.1255       50.1255       1257.10       1307.23    
  29  0.808766     -0.212246      -17.4225       17.4225       1217.29       1234.71    
  30  0.286176      -1.25115      -102.702       102.702       1206.93       1309.63    
  31  0.328161      -1.11425      -91.4645       91.4645       1263.56       1355.02    
  32  0.563264     -0.574006      -47.1180       47.1180       1165.80       1212.92    
  33  0.180895      -1.70984      -140.354       140.354       1383.06       1523.41    
  34  0.977796     -0.224538E-01  -1.84314       1.84314       1240.47       1242.32    
  35  0.650784     -0.429577      -35.2623       35.2623       1289.19       1324.45    
  36  0.350586      -1.04815      -86.0385       86.0385       1487.59       1573.63    
  37  0.852996E-01  -2.46159      -202.062       202.062       1339.91       1541.98    
  38  0.363921      -1.01082      -82.9743       82.9743       1476.93       1559.90    
  39  0.715496E-01  -2.63737      -216.491       216.491       1494.30       1710.79    
  40  0.540542     -0.615184      -50.4981       50.4981       1496.32       1546.82    
  41  0.458744E-02  -5.38443      -441.988       441.988       1398.81       1840.80    
  42  0.684509     -0.379054      -31.1151       31.1151       1497.53       1528.65    
  43  0.827193     -0.189717      -15.5732       15.5732       1458.41       1473.98    
  44  0.430712     -0.842315      -69.1424       69.1424       1383.38       1452.52    
  45  0.925073     -0.778822E-01  -6.39306       6.39306       1522.04       1528.43    
  46  0.139567      -1.96921      -161.645       161.645       1371.15       1532.79    
  47  0.905138     -0.996680E-01  -8.18136       8.18136       1302.36       1310.54    
  48  0.230323      -1.46827      -120.525       120.525       1386.94       1507.46    
  49  0.854981     -0.156676      -12.8609       12.8609       1346.89       1359.75    
loop,thermsimp(1:2)       27   132.273       1.38460    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226       1147.53         68.28          1.21         39.44          1.69          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1147.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       27
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       28
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      225     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -120.048       120.048       1118.78       1238.82    
   2  0.922423     -0.807516E-01  -6.62859       6.62859       1156.47       1163.10    
   3  0.556007     -0.586974      -48.1825       48.1825       1182.60       1230.78    
   4  0.921345     -0.819211E-01  -6.72459       6.72459       1196.44       1203.17    
   5  0.623358     -0.472635      -38.7968       38.7968       1160.39       1199.19    
   6  0.967150     -0.334012E-01  -2.74177       2.74177       1162.37       1165.11    
   7  0.239844      -1.42777      -117.200       117.200       1165.80       1283.00    
   8  0.707370     -0.346201      -28.4183       28.4183       1217.29       1245.70    
   9  0.375591     -0.979256      -80.3834       80.3834       1205.45       1285.84    
  10  0.164915      -1.80233      -147.946       147.946       1167.86       1315.81    
  11  0.634729     -0.454558      -37.3129       37.3129       1240.47       1277.79    
  12  0.956585     -0.443852E-01  -3.64341       3.64341       1200.47       1204.11    
  13  0.281051      -1.26922      -104.185       104.185       1162.82       1267.01    
  14  0.332446      -1.10128      -90.3997       90.3997       1197.08       1287.48    
  15  0.417901     -0.872510      -71.6210       71.6210       1118.98       1190.60    
  16  0.454459     -0.788647      -64.7370       64.7370       1183.34       1248.07    
  17  0.163150      -1.81309      -148.829       148.829       1246.59       1395.41    
  18  0.412675     -0.885095      -72.6541       72.6541       1163.53       1236.18    
  19  0.510076     -0.673195      -55.2600       55.2600       1249.11       1304.37    
  20  0.159872E-02  -6.43855      -528.516       528.516       1284.82       1813.33    
  21  0.279094      -1.27620      -104.759       104.759       1293.21       1397.97    
  22  0.229843E-01  -3.77294      -309.707       309.707       1257.10       1566.81    
  23  0.829240E-02  -4.79242      -393.391       393.391       1206.93       1600.32    
  24  0.722732     -0.324717      -26.6548       26.6548       1302.36       1329.01    
  25  0.399402     -0.917787      -75.3376       75.3376       1289.19       1364.53    
  26  0.321457      -1.13489      -93.1589       93.1589       1220.84       1314.00    
  27  0.103147      -2.27160      -186.467       186.467       1322.33       1508.80    
  28  0.488570     -0.716273      -58.7962       58.7962       1253.45       1312.24    
  29  0.775391     -0.254388      -20.8817       20.8817       1263.56       1284.44    
  30  0.264831      -1.32866      -109.065       109.065       1346.89       1455.96    
  31  0.291634      -1.23225      -101.151       101.151       1213.11       1314.26    
  32  0.754799E-02  -4.88647      -401.112       401.112       1199.51       1600.62    
  33  0.403715     -0.907047      -74.4560       74.4560       1236.30       1310.75    
  34  0.794963     -0.229460      -18.8355       18.8355       1345.10       1363.94    
  35  0.482612E-01  -3.03113      -248.814       248.814       1264.10       1512.91    
  36  0.309506      -1.17278      -96.2688       96.2688       1383.38       1479.65    
  37  0.265676      -1.32548      -108.803       108.803       1458.41       1567.21    
  38  0.793358     -0.231480      -19.0013       19.0013       1386.94       1405.94    
  39  0.603192E-01  -2.80811      -230.507       230.507       1383.06       1613.56    
  40  0.516664     -0.660363      -54.2067       54.2067       1522.04       1576.25    
  41  0.524892E-01  -2.94715      -241.920       241.920       1497.53       1739.45    
  42  0.581500     -0.542144      -44.5025       44.5025       1371.15       1415.65    
  43  0.403805     -0.906823      -74.4376       74.4376       1339.91       1414.35    
  44  0.447829     -0.803344      -65.9434       65.9434       1496.32       1562.27    
  45  0.470604     -0.753737      -61.8714       61.8714       1476.93       1538.80    
  46  0.479088     -0.735871      -60.4048       60.4048       1184.14       1244.54    
  47  0.959223     -0.416322E-01  -3.41743       3.41743       1487.59       1491.01    
  48  0.527403     -0.639789      -52.5179       52.5179       1494.30       1546.82    
  49  0.731687     -0.312402      -25.6439       25.6439       1147.53       1173.18    
loop,thermsimp(1:2)       28   120.048       6.62859    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227       1461.48         67.97          1.12         39.54          1.96          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1461.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       28
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       29
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      226     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -90.4974       90.4974       1156.47       1246.97    
   2  0.991191     -0.884791E-02 -0.726291      0.726291       1162.37       1163.09    
   3  0.752830     -0.283916      -23.3056       23.3056       1147.53       1170.84    
   4  0.718872     -0.330071      -27.0943       27.0943       1118.98       1146.07    
   5  0.362244      -1.01544      -83.3535       83.3535       1160.39       1243.74    
   6  0.993342E-01  -2.30927      -189.559       189.559       1196.44       1386.00    
   7  0.734379     -0.308729      -25.3424       25.3424       1200.47       1225.81    
   8  0.190509      -1.65806      -136.103       136.103       1182.60       1318.70    
   9  0.113713      -2.17408      -178.462       178.462       1163.53       1341.99    
  10  0.582158     -0.541014      -44.4098       44.4098       1118.78       1163.19    
  11  0.100405E-01  -4.60113      -377.689       377.689       1184.14       1561.83    
  12  0.614877     -0.486333      -39.9212       39.9212       1217.29       1257.21    
  13  0.996806     -0.319890E-02 -0.262586      0.262586       1183.34       1183.60    
  14  0.439871E-01  -3.12386      -256.426       256.426       1162.82       1419.25    
  15  0.610456     -0.493549      -40.5135       40.5135       1240.47       1280.99    
  16  0.676471     -0.390866      -32.0847       32.0847       1165.80       1197.88    
  17  0.263829      -1.33246      -109.376       109.376       1263.56       1372.94    
  18  0.761962     -0.271858      -22.3158       22.3158       1205.45       1227.77    
  19  0.405295     -0.903140      -74.1353       74.1353       1197.08       1271.21    
  20  0.184680      -1.68913      -138.654       138.654       1249.11       1387.77    
  21  0.695434     -0.363219      -29.8153       29.8153       1236.30       1266.11    
  22  0.597154     -0.515580      -42.3220       42.3220       1253.45       1295.77    
  23  0.254276      -1.36933      -112.403       112.403       1220.84       1333.24    
  24  0.777974     -0.251062      -20.6088       20.6088       1213.11       1233.72    
  25  0.597236     -0.515443      -42.3107       42.3107       1167.86       1210.17    
  26  0.658168     -0.418295      -34.3362       34.3362       1302.36       1336.70    
  27  0.917953     -0.856086E-01  -7.02728       7.02728       1345.10       1352.13    
  28  0.167567      -1.78637      -146.637       146.637       1289.19       1435.82    
  29  0.867739E-02  -4.74703      -389.666       389.666       1246.59       1636.25    
  30  0.157469      -1.84853      -151.739       151.739       1293.21       1444.95    
  31  0.947458     -0.539724E-01  -4.43039       4.43039       1386.94       1391.37    
  32  0.883772     -0.123556      -10.1422       10.1422       1339.91       1350.06    
  33  0.873100     -0.135705      -11.1395       11.1395       1371.15       1382.29    
  34  0.138043      -1.98019      -162.546       162.546       1346.89       1509.44    
  35  0.833185     -0.182500      -14.9807       14.9807       1383.38       1398.36    
  36  0.907894     -0.966275E-01  -7.93179       7.93179       1487.59       1495.52    
  37  0.858432     -0.152648      -12.5303       12.5303       1322.33       1334.86    
  38  0.192050      -1.65000      -135.442       135.442       1264.10       1399.54    
  39  0.890666     -0.115786      -9.50440       9.50440       1476.93       1486.43    
  40  0.389935     -0.941775      -77.3067       77.3067       1494.30       1571.61    
  41  0.842362     -0.171545      -14.0815       14.0815       1496.32       1510.40    
  42  0.143912      -1.93855      -159.128       159.128       1257.10       1416.23    
  43  0.678545     -0.387804      -31.8334       31.8334       1458.41       1490.24    
  44  0.621021     -0.476390      -39.1051       39.1051       1522.04       1561.15    
  45  0.533199     -0.628861      -51.6208       51.6208       1206.93       1258.55    
  46  0.891703     -0.114623      -9.40893       9.40893       1199.51       1208.92    
  47  0.675469     -0.392349      -32.2064       32.2064       1383.06       1415.26    
  48  0.757471     -0.277770      -22.8011       22.8011       1497.53       1520.33    
  49  0.855441     -0.156139      -12.8168       12.8168       1461.48       1474.29    
loop,thermsimp(1:2)       29   90.4974      0.726291    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228       1173.43         68.43          1.22         39.43          1.61          0.05        110.75
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229       1380.01         68.05          1.12         39.59          2.05          0.05        110.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1173.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       29
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       30
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      228     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -151.693       151.693       1118.98       1270.67    
   2  0.553200     -0.592035      -48.5979       48.5979       1162.37       1210.96    
   3  0.825049     -0.192313      -15.7862       15.7862       1118.78       1134.56    
   4  0.767336     -0.264830      -21.7389       21.7389       1147.53       1169.27    
   5  0.966534     -0.340385E-01  -2.79409       2.79409       1183.34       1186.13    
   6  0.954430     -0.466410E-01  -3.82858       3.82858       1165.80       1169.63    
   7  0.780674     -0.247598      -20.3244       20.3244       1199.51       1219.83    
   8  0.312863      -1.16199      -95.3834       95.3834       1167.86       1263.24    
   9  0.990226     -0.982218E-02 -0.806265      0.806265       1200.47       1201.28    
  10  0.893872     -0.112193      -9.20946       9.20946       1205.45       1214.66    
  11  0.322320      -1.13221      -92.9387       92.9387       1213.11       1306.05    
  12  0.927465     -0.752997E-01  -6.18107       6.18107       1160.39       1166.57    
  13  0.539466     -0.617176      -50.6616       50.6616       1156.47       1207.13    
  14  0.461474     -0.773330      -63.4797       63.4797       1217.29       1280.77    
  15  0.745701     -0.293430      -24.0866       24.0866       1206.93       1231.02    
  16  0.703580     -0.351573      -28.8593       28.8593       1236.30       1265.15    
  17  0.917420E-01  -2.38878      -196.085       196.085       1197.08       1393.16    
  18  0.671661     -0.398001      -32.6704       32.6704       1240.47       1273.14    
  19  0.845179     -0.168207      -13.8075       13.8075       1253.45       1267.26    
  20  0.283605E-01  -3.56276      -292.453       292.453       1182.60       1475.05    
  21  0.108883E-01  -4.52006      -371.035       371.035       1220.84       1591.87    
  22  0.506006     -0.681208      -55.9177       55.9177       1322.33       1378.25    
  23  0.353918      -1.03869      -85.2622       85.2622       1302.36       1387.62    
  24  0.656862     -0.420282      -34.4993       34.4993       1163.53       1198.03    
  25  0.691560     -0.368806      -30.2738       30.2738       1339.91       1370.19    
  26  0.445402     -0.808779      -66.3895       66.3895       1345.10       1411.49    
  27  0.832700     -0.183081      -15.0284       15.0284       1263.56       1278.59    
  28  0.963063     -0.376360E-01  -3.08940       3.08940       1371.15       1374.24    
  29  0.422212     -0.862247      -70.7786       70.7786       1196.44       1267.22    
  30  0.917895     -0.856720E-01  -7.03248       7.03248       1249.11       1256.14    
  31  0.767210     -0.264994      -21.7524       21.7524       1386.94       1408.69    
  32  0.360836      -1.01933      -83.6730       83.6730       1383.38       1467.05    
  33  0.635930     -0.452667      -37.1577       37.1577       1264.10       1301.26    
  34  0.687292     -0.374995      -30.7819       30.7819       1383.06       1413.84    
  35  0.833832     -0.181724      -14.9170       14.9170       1257.10       1272.02    
  36  0.362075      -1.01590      -83.3918       83.3918       1162.82       1246.22    
  37  0.385764     -0.952530      -78.1896       78.1896       1289.19       1367.38    
  38  0.752556     -0.284279      -23.3354       23.3354       1293.21       1316.54    
  39  0.547433     -0.602515      -49.4581       49.4581       1461.48       1510.93    
  40  0.171004      -1.76607      -144.970       144.970       1476.93       1621.90    
  41  0.159022      -1.83871      -150.933       150.933       1458.41       1609.34    
  42  0.850806     -0.161571      -13.2627       13.2627       1487.59       1500.85    
  43  0.926075     -0.768001E-01  -6.30423       6.30423       1346.89       1353.20    
  44  0.584885     -0.536340      -44.0261       44.0261       1496.32       1540.35    
  45  0.547650     -0.602120      -49.4257       49.4257       1497.53       1546.96    
  46  0.864296     -0.145840      -11.9715       11.9715       1522.04       1534.01    
  47  0.384639     -0.955450      -78.4292       78.4292       1184.14       1262.57    
  48  0.359776      -1.02227      -83.9146       83.9146       1494.30       1578.21    
  49  0.147032      -1.91711      -157.368       157.368       1173.43       1330.80    
loop,thermsimp(1:2)       30   151.693       48.5979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230       1401.82         68.44          1.23         39.25          1.75          0.04        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1401.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       30
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       31
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      229     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -105.225       105.225       1118.78       1224.00    
   2  0.202445      -1.59728      -131.115       131.115       1160.39       1291.50    
   3  0.927152     -0.756373E-01  -6.20878       6.20878       1147.53       1153.74    
   4  0.403144     -0.908460      -74.5720       74.5720       1165.80       1240.37    
   5  0.791838     -0.233398      -19.1588       19.1588       1183.34       1202.50    
   6  0.292576      -1.22903      -100.886       100.886       1163.53       1264.42    
   7  0.135578      -1.99821      -164.025       164.025       1200.47       1364.50    
   8  0.516570     -0.660545      -54.2217       54.2217       1156.47       1210.69    
   9  0.730579     -0.313918      -25.7683       25.7683       1162.37       1188.13    
  10  0.508248     -0.676786      -55.5548       55.5548       1205.45       1261.01    
  11  0.928455     -0.742338E-01  -6.09357       6.09357       1199.51       1205.60    
  12  0.696477     -0.361721      -29.6923       29.6923       1206.93       1236.62    
  13  0.465556     -0.764522      -62.7567       62.7567       1162.82       1225.58    
  14  0.194653      -1.63654      -134.337       134.337       1249.11       1383.45    
  15  0.650312     -0.430303      -35.3220       35.3220       1184.14       1219.46    
  16  0.555802     -0.587343      -48.2127       48.2127       1167.86       1216.07    
  17  0.985517     -0.145893E-01  -1.19758       1.19758       1236.30       1237.49    
  18  0.923066     -0.800544E-01  -6.57136       6.57136       1196.44       1203.01    
  19  0.658765     -0.417388      -34.2618       34.2618       1253.45       1287.71    
  20  0.197878      -1.62010      -132.988       132.988       1118.98       1251.97    
  21  0.449673     -0.799236      -65.6062       65.6062       1257.10       1322.71    
  22  0.208093      -1.56977      -128.857       128.857       1240.47       1369.33    
  23  0.102791      -2.27506      -186.751       186.751       1263.56       1450.31    
  24  0.650538     -0.429955      -35.2934       35.2934       1217.29       1252.58    
  25  0.223365      -1.49895      -123.043       123.043       1264.10       1387.14    
  26  0.520729     -0.652525      -53.5633       53.5633       1213.11       1266.67    
  27  0.919707E-01  -2.38629      -195.881       195.881       1293.21       1489.09    
  28  0.788427     -0.237716      -19.5132       19.5132       1173.43       1192.94    
  29  0.395754     -0.926961      -76.0907       76.0907       1346.89       1422.98    
  30  0.903388     -0.101603      -8.34023       8.34023       1289.19       1297.53    
  31  0.569415     -0.563145      -46.2264       46.2264       1339.91       1386.14    
  32  0.974677     -0.256496E-01  -2.10548       2.10548       1371.15       1373.25    
  33  0.376411     -0.977073      -80.2042       80.2042       1322.33       1402.54    
  34  0.309090      -1.17412      -96.3793       96.3793       1302.36       1398.74    
  35  0.248039      -1.39417      -114.442       114.442       1197.08       1311.52    
  36  0.941329     -0.604621E-01  -4.96310       4.96310       1386.94       1391.90    
  37  0.131879      -2.02587      -166.296       166.296       1345.10       1511.40    
  38  0.188022      -1.67120      -137.182       137.182       1383.06       1520.24    
  39  0.898649E-01  -2.40945      -197.782       197.782       1383.38       1581.16    
  40  0.853893     -0.157949      -12.9654       12.9654       1182.60       1195.56    
  41  0.643577     -0.440714      -36.1765       36.1765       1487.59       1523.77    
  42  0.664391     -0.408885      -33.5638       33.5638       1461.48       1495.04    
  43  0.825262     -0.192054      -15.7650       15.7650       1522.04       1537.81    
  44  0.611498     -0.491843      -40.3735       40.3735       1496.32       1536.70    
  45  0.284000      -1.25878      -103.328       103.328       1497.53       1600.86    
  46  0.108174      -2.22402      -182.561       182.561       1494.30       1676.86    
  47  0.293070      -1.22734      -100.748       100.748       1220.84       1321.59    
  48  0.412045     -0.886623      -72.7795       72.7795       1458.41       1531.19    
  49  0.464041     -0.767783      -63.0244       63.0244       1401.82       1464.84    
loop,thermsimp(1:2)       31   105.225       131.115    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231       1258.43         68.03          1.13         39.59          1.82          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1258.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       31
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       32
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      230     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759      -29.1208       29.1208       1147.53       1176.65    
   2  0.779682     -0.248869      -20.4287       20.4287       1162.37       1182.79    
   3  0.611645     -0.491604      -40.3539       40.3539       1173.43       1213.78    
   4  0.380626     -0.965937      -79.2901       79.2901       1182.60       1261.89    
   5  0.986599     -0.134915E-01  -1.10746       1.10746       1183.34       1184.44    
   6  0.699021     -0.358075      -29.3930       29.3930       1196.44       1225.83    
   7  0.981217E-01  -2.32155      -190.567       190.567       1199.51       1390.08    
   8  0.221199      -1.50869      -123.843       123.843       1156.47       1280.32    
   9  0.802460     -0.220073      -18.0650       18.0650       1167.86       1185.93    
  10  0.623430     -0.472519      -38.7872       38.7872       1184.14       1222.93    
  11  0.669862     -0.400684      -32.8906       32.8906       1118.78       1151.67    
  12  0.957999     -0.429090E-01  -3.52223       3.52223       1162.82       1166.35    
  13  0.569879E-01  -2.86492      -235.170       235.170       1206.93       1442.10    
  14  0.245244      -1.40550      -115.372       115.372       1236.30       1351.67    
  15  0.870123     -0.139121      -11.4199       11.4199       1165.80       1177.22    
  16  0.429679     -0.844716      -69.3395       69.3395       1118.98       1188.32    
  17  0.369880     -0.994577      -81.6410       81.6410       1217.29       1298.93    
  18  0.964882     -0.357490E-01  -2.93450       2.93450       1205.45       1208.39    
  19  0.625983     -0.468432      -38.4518       38.4518       1163.53       1201.98    
  20  0.508652     -0.675991      -55.4895       55.4895       1213.11       1268.60    
  21  0.694697     -0.364279      -29.9023       29.9023       1253.45       1283.35    
  22  0.817819     -0.201114      -16.5087       16.5087       1160.39       1176.90    
  23  0.655732     -0.422003      -34.6406       34.6406       1289.19       1323.83    
  24  0.658757     -0.417401      -34.2628       34.2628       1197.08       1231.34    
  25  0.325934      -1.12106      -92.0236       92.0236       1220.84       1312.86    
  26  0.849137     -0.163535      -13.4239       13.4239       1257.10       1270.53    
  27  0.953435     -0.476843E-01  -3.91422       3.91422       1200.47       1204.39    
  28  0.435049     -0.832297      -68.3201       68.3201       1240.47       1308.79    
  29  0.155341E-01  -4.16472      -341.866       341.866       1371.15       1713.01    
  30  0.390095     -0.941364      -77.2730       77.2730       1249.11       1326.38    
  31  0.400867E-02  -5.51929      -453.058       453.058       1339.91       1792.97    
  32  0.989750     -0.103025E-01 -0.845694      0.845694       1264.10       1264.94    
  33  0.194149      -1.63913      -134.550       134.550       1386.94       1521.49    
  34  0.573547     -0.555915      -45.6329       45.6329       1302.36       1347.99    
  35  0.570216     -0.561740      -46.1111       46.1111       1322.33       1368.44    
  36  0.802122     -0.220494      -18.0995       18.0995       1346.89       1364.99    
  37  0.831214E-01  -2.48745      -204.185       204.185       1263.56       1467.75    
  38  0.280368      -1.27165      -104.385       104.385       1401.82       1506.20    
  39  0.568263     -0.565171      -46.3927       46.3927       1293.21       1339.60    
  40  0.570544     -0.561165      -46.0639       46.0639       1461.48       1507.54    
  41  0.524202     -0.645877      -53.0176       53.0176       1345.10       1398.12    
  42  0.625335E-01  -2.77205      -227.547       227.547       1383.06       1610.60    
  43  0.717146     -0.332476      -27.2917       27.2917       1487.59       1514.88    
  44  0.234175      -1.45169      -119.163       119.163       1458.41       1577.57    
  45  0.366320      -1.00425      -82.4349       82.4349       1496.32       1578.76    
  46  0.458915     -0.778891      -63.9362       63.9362       1522.04       1585.98    
  47  0.379536     -0.968806      -79.5256       79.5256       1383.38       1462.90    
  48  0.854466     -0.157278      -12.9104       12.9104       1497.53       1510.44    
  49  0.452738E-01  -3.09503      -254.059       254.059       1258.43       1512.49    
loop,thermsimp(1:2)       32   29.1208       20.4287    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232       1282.34         68.07          1.19         39.61          1.60          0.04        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1282.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       32
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       33
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      231     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -74.4039       74.4039       1118.78       1193.18    
   2  0.598662     -0.513057      -42.1149       42.1149       1162.82       1204.94    
   3  0.165178      -1.80073      -147.815       147.815       1147.53       1295.35    
   4  0.785331     -0.241651      -19.8362       19.8362       1160.39       1180.23    
   5  0.422061     -0.862604      -70.8079       70.8079       1165.80       1236.61    
   6  0.343624      -1.06821      -87.6850       87.6850       1162.37       1250.05    
   7  0.988862     -0.112001E-01 -0.919372      0.919372       1183.34       1184.26    
   8  0.586093E-01  -2.83686      -232.867       232.867       1167.86       1400.73    
   9  0.324880      -1.12430      -92.2895       92.2895       1118.98       1211.27    
  10  0.869373     -0.139983      -11.4907       11.4907       1163.53       1175.02    
  11  0.314362      -1.15721      -94.9909       94.9909       1200.47       1295.46    
  12  0.635265     -0.453712      -37.2435       37.2435       1205.45       1242.70    
  13  0.800738     -0.222221      -18.2413       18.2413       1173.43       1191.67    
  14  0.234515      -1.45024      -119.044       119.044       1184.14       1303.18    
  15  0.818766     -0.199957      -16.4137       16.4137       1196.44       1212.85    
  16  0.480807     -0.732289      -60.1108       60.1108       1197.08       1257.19    
  17  0.173083      -1.75398      -143.978       143.978       1182.60       1326.58    
  18  0.544835     -0.607272      -49.8487       49.8487       1264.10       1313.95    
  19  0.955728     -0.452816E-01  -3.71699       3.71699       1213.11       1216.82    
  20  0.909631     -0.947157E-01  -7.77485       7.77485       1257.10       1264.88    
  21  0.538276     -0.619384      -50.8428       50.8428       1156.47       1207.32    
  22  0.640373     -0.445705      -36.5862       36.5862       1253.45       1290.03    
  23  0.588429     -0.530300      -43.5303       43.5303       1217.29       1260.82    
  24  0.954392     -0.466804E-01  -3.83181       3.83181       1240.47       1244.31    
  25  0.976738     -0.235363E-01  -1.93201       1.93201       1220.84       1222.77    
  26  0.801897     -0.220775      -18.1226       18.1226       1289.19       1307.31    
  27  0.679499     -0.386400      -31.7181       31.7181       1249.11       1280.83    
  28  0.303686      -1.19176      -97.8272       97.8272       1293.21       1391.03    
  29  0.907562     -0.969936E-01  -7.96183       7.96183       1302.36       1310.32    
  30  0.117971E-01  -4.43990      -364.455       364.455       1236.30       1600.75    
  31  0.324683      -1.12491      -92.3393       92.3393       1346.89       1439.23    
  32  0.662106     -0.412329      -33.8466       33.8466       1322.33       1356.18    
  33  0.334080      -1.09637      -89.9972       89.9972       1199.51       1289.51    
  34  0.307577      -1.17903      -96.7821       96.7821       1345.10       1441.89    
  35  0.539029     -0.617986      -50.7281       50.7281       1206.93       1257.66    
  36  0.822737     -0.195119      -16.0166       16.0166       1383.38       1399.39    
  37  0.973480     -0.268776E-01  -2.20628       2.20628       1263.56       1265.77    
  38  0.918970     -0.845018E-01  -6.93643       6.93643       1401.82       1408.75    
  39  0.203072      -1.59419      -130.861       130.861       1461.48       1592.34    
  40  0.467655     -0.760024      -62.3875       62.3875       1497.53       1559.92    
  41  0.323145      -1.12965      -92.7289       92.7289       1258.43       1351.16    
  42  0.505961     -0.681295      -55.9249       55.9249       1487.59       1543.52    
  43  0.699853E-01  -2.65947      -218.306       218.306       1386.94       1605.24    
  44  0.188263      -1.66991      -137.077       137.077       1458.41       1595.48    
  45  0.663178     -0.410711      -33.7137       33.7137       1496.32       1530.04    
  46  0.680233     -0.385320      -31.6294       31.6294       1522.04       1553.67    
  47  0.717812     -0.331548      -27.2155       27.2155       1383.06       1410.27    
  48  0.319374      -1.14139      -93.6926       93.6926       1371.15       1464.84    
  49  0.667076     -0.404851      -33.2327       33.2327       1282.34       1315.57    
loop,thermsimp(1:2)       33   74.4039       42.1149    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233       1724.10         68.49          1.22         39.31          1.82          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234       1336.34         68.44          1.23         39.52          1.42          0.05        110.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1336.34
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       33
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       34
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      233     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -121.025       121.025       1163.53       1284.55    
   2  0.299376      -1.20605      -99.0004       99.0004       1160.39       1259.39    
   3  0.220114      -1.51361      -124.246       124.246       1183.34       1307.58    
   4  0.229209      -1.47312      -120.923       120.923       1173.43       1294.35    
   5  0.902477     -0.102612      -8.42307       8.42307       1118.78       1127.20    
   6  0.659052     -0.416953      -34.2261       34.2261       1162.82       1197.05    
   7  0.100321E-01  -4.60197      -377.758       377.758       1156.47       1534.23    
   8  0.588837     -0.529606      -43.4733       43.4733       1118.98       1162.45    
   9  0.270943      -1.30585      -107.192       107.192       1196.44       1303.63    
  10  0.505518     -0.682171      -55.9968       55.9968       1213.11       1269.10    
  11  0.264565      -1.32967      -109.148       109.148       1220.84       1329.99    
  12  0.806386     -0.215193      -17.6644       17.6644       1165.80       1183.46    
  13  0.340560      -1.07716      -88.4203       88.4203       1205.45       1293.87    
  14  0.906186     -0.985106E-01  -8.08635       8.08635       1240.47       1248.56    
  15  0.786070     -0.240709      -19.7589       19.7589       1162.37       1182.12    
  16  0.540508     -0.615247      -50.5032       50.5032       1197.08       1247.58    
  17  0.935065     -0.671392E-01  -5.51120       5.51120       1206.93       1212.44    
  18  0.915359     -0.884391E-01  -7.25963       7.25963       1217.29       1224.55    
  19  0.958261     -0.426353E-01  -3.49977       3.49977       1257.10       1260.60    
  20  0.935110     -0.670907E-01  -5.50722       5.50722       1263.56       1269.07    
  21  0.637755     -0.449800      -36.9224       36.9224       1249.11       1286.03    
  22  0.975714     -0.245861E-01  -2.01818       2.01818       1199.51       1201.53    
  23  0.797424     -0.226369      -18.5818       18.5818       1253.45       1272.03    
  24  0.214179      -1.54094      -126.490       126.490       1147.53       1274.02    
  25  0.372145     -0.988472      -81.1399       81.1399       1200.47       1281.61    
  26  0.925208     -0.777367E-01  -6.38111       6.38111       1184.14       1190.52    
  27  0.175897      -1.73786      -142.654       142.654       1289.19       1431.84    
  28  0.952033     -0.491554E-01  -4.03498       4.03498       1302.36       1306.39    
  29  0.158274E-01  -4.14601      -340.330       340.330       1264.10       1604.43    
  30  0.799308     -0.224008      -18.3880       18.3880       1282.34       1300.73    
  31  0.248227      -1.39341      -114.380       114.380       1182.60       1296.98    
  32  0.244914      -1.40685      -115.483       115.483       1258.43       1373.91    
  33  0.390842     -0.939452      -77.1160       77.1160       1322.33       1399.45    
  34  0.146784      -1.91879      -157.506       157.506       1293.21       1450.71    
  35  0.500975     -0.691199      -56.7379       56.7379       1383.38       1440.11    
  36  0.480131E-01  -3.03628      -249.237       249.237       1167.86       1417.10    
  37  0.124503      -2.08343      -171.021       171.021       1401.82       1572.84    
  38  0.670304     -0.400024      -32.8365       32.8365       1383.06       1415.89    
  39  0.997449     -0.255468E-02 -0.209704      0.209704       1346.89       1347.10    
  40  0.681761     -0.383076      -31.4452       31.4452       1345.10       1376.55    
  41  0.440529     -0.819778      -67.2924       67.2924       1371.15       1438.44    
  42  0.342489      -1.07152      -87.9567       87.9567       1496.32       1584.28    
  43  0.735753     -0.306861      -25.1890       25.1890       1487.59       1512.78    
  44  0.614752     -0.486537      -39.9379       39.9379       1522.04       1561.98    
  45  0.351660      -1.04509      -85.7875       85.7875       1497.53       1583.32    
  46  0.777165     -0.252103      -20.6941       20.6941       1461.48       1482.17    
  47  0.392618     -0.934919      -76.7439       76.7439       1458.41       1535.15    
  48  0.385647     -0.952832      -78.2144       78.2144       1236.30       1314.51    
  49  0.834392     -0.181052      -14.8619       14.8619       1336.34       1351.20    
loop,thermsimp(1:2)       34   121.025       99.0004    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235       1321.96         68.31          1.19         39.56          1.65          0.04        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1321.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       34
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       35
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      234     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -86.8265       86.8265       1118.78       1205.60    
   2  0.621479     -0.475653      -39.0446       39.0446       1118.98       1158.02    
   3  0.221273      -1.50836      -123.815       123.815       1162.37       1286.18    
   4  0.180626E-01  -4.01391      -329.487       329.487       1165.80       1495.29    
   5  0.216093      -1.53205      -125.760       125.760       1184.14       1309.90    
   6  0.351343      -1.04599      -85.8615       85.8615       1162.82       1248.69    
   7  0.360847      -1.01930      -83.6706       83.6706       1199.51       1283.18    
   8  0.439525     -0.822061      -67.4798       67.4798       1206.93       1274.41    
   9  0.910616E-01  -2.39622      -196.696       196.696       1217.29       1413.98    
  10  0.549745     -0.598300      -49.1122       49.1122       1197.08       1246.19    
  11  0.619825     -0.478318      -39.2633       39.2633       1240.47       1279.74    
  12  0.548169E-01  -2.90376      -238.358       238.358       1160.39       1398.75    
  13  0.947163     -0.542842E-01  -4.45599       4.45599       1257.10       1261.56    
  14  0.725459     -0.320951      -26.3456       26.3456       1263.56       1289.91    
  15  0.481613     -0.730615      -59.9734       59.9734       1213.11       1273.08    
  16  0.866286     -0.143540      -11.7827       11.7827       1253.45       1265.23    
  17  0.221988E-01  -3.80772      -312.561       312.561       1147.53       1460.09    
  18  0.980823     -0.193630E-01  -1.58944       1.58944       1200.47       1202.06    
  19  0.332549      -1.10097      -90.3742       90.3742       1163.53       1253.90    
  20  0.989035     -0.110256E-01 -0.905050      0.905050       1249.11       1250.02    
  21  0.364016      -1.01056      -82.9528       82.9528       1205.45       1288.41    
  22  0.861799     -0.148733      -12.2089       12.2089       1173.43       1185.64    
  23  0.622306     -0.474324      -38.9354       38.9354       1182.60       1221.53    
  24  0.575476     -0.552558      -45.3574       45.3574       1282.34       1327.70    
  25  0.205536      -1.58213      -129.871       129.871       1196.44       1326.31    
  26  0.124037      -2.08718      -171.328       171.328       1302.36       1473.69    
  27  0.467008     -0.761408      -62.5011       62.5011       1183.34       1245.84    
  28  0.273870      -1.29510      -106.310       106.310       1236.30       1342.61    
  29  0.842780     -0.171050      -14.0408       14.0408       1220.84       1234.88    
  30  0.709315     -0.343455      -28.1929       28.1929       1346.89       1375.09    
  31  0.677144     -0.389871      -32.0030       32.0030       1336.34       1368.34    
  32  0.656062     -0.421500      -34.5994       34.5994       1258.43       1293.03    
  33  0.721592     -0.326295      -26.7843       26.7843       1345.10       1371.89    
  34  0.120172      -2.11883      -173.927       173.927       1322.33       1496.26    
  35  0.832403     -0.183439      -15.0578       15.0578       1383.06       1398.11    
  36  0.607577     -0.498276      -40.9016       40.9016       1167.86       1208.76    
  37  0.169814      -1.77305      -145.543       145.543       1289.19       1434.73    
  38  0.578085     -0.548034      -44.9860       44.9860       1371.15       1416.13    
  39  0.201144      -1.60373      -131.644       131.644       1383.38       1515.02    
  40  0.922823     -0.803178E-01  -6.59298       6.59298       1293.21       1299.80    
  41  0.136644      -1.99038      -163.382       163.382       1461.48       1624.86    
  42  0.836366     -0.178689      -14.6679       14.6679       1487.59       1502.26    
  43  0.590669     -0.526499      -43.2183       43.2183       1156.47       1199.69    
  44  0.745946     -0.293102      -24.0596       24.0596       1458.41       1482.47    
  45  0.874736     -0.133833      -10.9858       10.9858       1522.04       1533.03    
  46  0.370232     -0.993625      -81.5629       81.5629       1401.82       1483.38    
  47  0.832293     -0.183570      -15.0686       15.0686       1497.53       1512.60    
  48  0.351566      -1.04536      -85.8095       85.8095       1496.32       1582.13    
  49  0.705870     -0.348324      -28.5926       28.5926       1321.96       1350.56    
loop,thermsimp(1:2)       35   86.8265       39.0446    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236       1219.59         67.94          1.19         39.59          1.73          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237       4174.47         67.78          1.14         39.35          2.29          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1219.59
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       35
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       36
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      236     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -119.326       119.326       1118.98       1238.30    
   2  0.607568     -0.498291      -40.9028       40.9028       1173.43       1214.33    
   3  0.905785     -0.989529E-01  -8.12267       8.12267       1156.47       1164.60    
   4  0.995938E-01  -2.30666      -189.345       189.345       1200.47       1389.82    
   5  0.851360     -0.160920      -13.2093       13.2093       1118.78       1131.99    
   6  0.730583     -0.313913      -25.7679       25.7679       1167.86       1193.63    
   7  0.426216     -0.852810      -70.0039       70.0039       1182.60       1252.60    
   8  0.285108      -1.25489      -103.009       103.009       1220.84       1323.85    
   9  0.839246     -0.175251      -14.3857       14.3857       1183.34       1197.72    
  10  0.217639      -1.52492      -125.175       125.175       1197.08       1322.25    
  11  0.183996E-02  -6.29801      -516.980       516.980       1162.82       1679.80    
  12  0.682631     -0.381801      -31.3406       31.3406       1249.11       1280.45    
  13  0.203596      -1.59162      -130.650       130.650       1163.53       1294.18    
  14  0.881164     -0.126512      -10.3849       10.3849       1257.10       1267.49    
  15  0.711431     -0.340477      -27.9484       27.9484       1253.45       1281.40    
  16  0.874326     -0.134302      -11.0243       11.0243       1213.11       1224.13    
  17  0.814222     -0.205523      -16.8706       16.8706       1206.93       1223.80    
  18  0.995668     -0.434126E-02 -0.356358      0.356358       1240.47       1240.83    
  19  0.693805     -0.365564      -30.0078       30.0078       1199.51       1229.52    
  20  0.958584     -0.422984E-01  -3.47212       3.47212       1162.37       1165.84    
  21  0.748022     -0.290323      -23.8315       23.8315       1205.45       1229.29    
  22  0.696703     -0.361396      -29.6656       29.6656       1263.56       1293.23    
  23  0.732990     -0.310623      -25.4979       25.4979       1258.43       1283.92    
  24  0.534749     -0.625958      -51.3825       51.3825       1293.21       1344.59    
  25  0.691641     -0.368688      -30.2642       30.2642       1184.14       1214.40    
  26  0.300458      -1.20245      -98.7043       98.7043       1196.44       1295.15    
  27  0.977116     -0.231502E-01  -1.90031       1.90031       1282.34       1284.24    
  28  0.542581     -0.611418      -50.1890       50.1890       1236.30       1286.48    
  29  0.266111      -1.32384      -108.669       108.669       1321.96       1430.63    
  30  0.692298     -0.367738      -30.1862       30.1862       1336.34       1366.52    
  31  0.664047     -0.409403      -33.6063       33.6063       1345.10       1378.71    
  32  0.542186     -0.612146      -50.2488       50.2488       1346.89       1397.14    
  33  0.362243      -1.01544      -83.3535       83.3535       1383.06       1466.41    
  34  0.578658     -0.547044      -44.9047       44.9047       1160.39       1205.29    
  35  0.489298     -0.714783      -58.6738       58.6738       1217.29       1275.96    
  36  0.617485     -0.482100      -39.5738       39.5738       1371.15       1410.72    
  37  0.368651     -0.997905      -81.9142       81.9142       1289.19       1371.10    
  38  0.198936      -1.61477      -132.550       132.550       1147.53       1280.08    
  39  0.505263     -0.682676      -56.0383       56.0383       1302.36       1358.40    
  40  0.983997     -0.161325E-01  -1.32425       1.32425       1458.41       1459.73    
  41  0.630553     -0.461159      -37.8548       37.8548       1401.82       1439.67    
  42  0.423821E-01  -3.16103      -259.477       259.477       1165.80       1425.28    
  43  0.488935     -0.715526      -58.7348       58.7348       1322.33       1381.07    
  44  0.402078     -0.911110      -74.7896       74.7896       1487.59       1562.38    
  45  0.380878     -0.965277      -79.2359       79.2359       1497.53       1576.77    
  46  0.260585E-01  -3.64741      -299.402       299.402       1383.38       1682.78    
  47  0.681660     -0.383224      -31.4574       31.4574       1522.04       1553.50    
  48  0.489074     -0.715241      -58.7114       58.7114       1496.32       1555.03    
  49  0.752363     -0.284536      -23.3565       23.3565       1219.59       1242.95    
loop,thermsimp(1:2)       36   119.326       40.9028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238       1151.91         67.96          1.14         39.54          2.02          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    239       1956.36         67.94          1.10         39.52          2.30          0.05        110.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1151.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       36
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       37
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      238     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -72.9280       72.9280       1118.78       1191.71    
   2  0.697205     -0.360676      -29.6065       29.6065       1156.47       1186.08    
   3  0.314648E-01  -3.45889      -283.927       283.927       1162.37       1446.29    
   4  0.857269     -0.154003      -12.6415       12.6415       1167.86       1180.50    
   5  0.652165     -0.427457      -35.0884       35.0884       1183.34       1218.43    
   6  0.510145     -0.673060      -55.2489       55.2489       1160.39       1215.64    
   7  0.175175      -1.74197      -142.991       142.991       1173.43       1316.42    
   8  0.373803     -0.984025      -80.7749       80.7749       1184.14       1264.92    
   9  0.514972     -0.663642      -54.4759       54.4759       1206.93       1261.41    
  10  0.548235     -0.601051      -49.3380       49.3380       1213.11       1262.44    
  11  0.541310     -0.613763      -50.3815       50.3815       1205.45       1255.84    
  12  0.734083     -0.309133      -25.3755       25.3755       1199.51       1224.88    
  13  0.422599     -0.861332      -70.7035       70.7035       1118.98       1189.68    
  14  0.287055      -1.24808      -102.450       102.450       1240.47       1342.92    
  15  0.885133     -0.122017      -10.0159       10.0159       1219.59       1229.61    
  16  0.391075     -0.938857      -77.0672       77.0672       1182.60       1259.67    
  17  0.473784     -0.747003      -61.3186       61.3186       1257.10       1318.42    
  18  0.691812     -0.368440      -30.2439       30.2439       1217.29       1247.53    
  19  0.644447     -0.439363      -36.0656       36.0656       1147.53       1183.60    
  20  0.805933     -0.215754      -17.7104       17.7104       1249.11       1266.82    
  21  0.393766     -0.931998      -76.5042       76.5042       1253.45       1329.95    
  22  0.907098E-01  -2.40009      -197.014       197.014       1258.43       1455.44    
  23  0.376515     -0.976796      -80.1815       80.1815       1282.34       1362.52    
  24  0.819190     -0.199439      -16.3712       16.3712       1236.30       1252.67    
  25  0.692438     -0.367536      -30.1696       30.1696       1263.56       1293.73    
  26  0.188370      -1.66935      -137.030       137.030       1163.53       1300.56    
  27  0.500532     -0.692083      -56.8105       56.8105       1196.44       1253.25    
  28  0.282311      -1.26475      -103.818       103.818       1197.08       1300.90    
  29  0.338061      -1.08453      -89.0248       89.0248       1220.84       1309.86    
  30  0.466208     -0.763123      -62.6419       62.6419       1293.21       1355.85    
  31  0.893084     -0.113075      -9.28188       9.28188       1302.36       1311.64    
  32  0.818806     -0.199908      -16.4097       16.4097       1336.34       1352.75    
  33  0.585066     -0.536031      -44.0008       44.0008       1289.19       1333.19    
  34  0.527412     -0.639774      -52.5166       52.5166       1345.10       1397.62    
  35  0.994295     -0.572143E-02 -0.469650      0.469650       1322.33       1322.80    
  36  0.739278     -0.302082      -24.7967       24.7967       1200.47       1225.27    
  37  0.230995      -1.46536      -120.286       120.286       1346.89       1467.18    
  38  0.414929     -0.879648      -72.2069       72.2069       1371.15       1443.35    
  39  0.378446     -0.971682      -79.7617       79.7617       1165.80       1245.56    
  40  0.368620     -0.997990      -81.9212       81.9212       1321.96       1403.88    
  41  0.301312      -1.19961      -98.4712       98.4712       1401.82       1500.29    
  42  0.105882E-01  -4.54801      -373.329       373.329       1458.41       1831.74    
  43  0.481885     -0.730049      -59.9269       59.9269       1383.06       1442.98    
  44  0.446716     -0.805833      -66.1477       66.1477       1522.04       1588.19    
  45  0.482098     -0.729608      -59.8907       59.8907       1496.32       1556.21    
  46  0.278892      -1.27693      -104.818       104.818       1487.59       1592.41    
  47  0.756484     -0.279074      -22.9081       22.9081       1497.53       1520.44    
  48  0.662766     -0.411334      -33.7648       33.7648       1162.82       1196.59    
  49  0.433861E-01  -3.13762      -257.555       257.555       1151.91       1409.46    
loop,thermsimp(1:2)       37   72.9280       29.6065    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240       1577.02         67.94          1.19         39.81          2.03          0.05        111.01
Just calling func    0   0        111.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1577.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       37
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       38
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      239     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -73.4180       73.4180       1167.86       1241.28    
   2  0.259700      -1.34823      -110.671       110.671       1147.53       1258.20    
   3  0.681144E-01  -2.68657      -220.530       220.530       1156.47       1377.00    
   4  0.158140      -1.84427      -151.389       151.389       1118.98       1270.37    
   5  0.497681     -0.697796      -57.2794       57.2794       1118.78       1176.06    
   6  0.800218     -0.222871      -18.2946       18.2946       1162.82       1181.12    
   7  0.831967     -0.183962      -15.1008       15.1008       1160.39       1175.49    
   8  0.707345     -0.346237      -28.4212       28.4212       1183.34       1211.76    
   9  0.265927      -1.32454      -108.726       108.726       1199.51       1308.24    
  10  0.659046     -0.416962      -34.2268       34.2268       1200.47       1234.70    
  11  0.654587E-01  -2.72634      -223.794       223.794       1219.59       1443.39    
  12  0.223329      -1.49911      -123.056       123.056       1165.80       1288.86    
  13  0.996019     -0.398855E-02 -0.327405      0.327405       1217.29       1217.61    
  14  0.553910     -0.590753      -48.4926       48.4926       1236.30       1284.79    
  15  0.218863      -1.51931      -124.714       124.714       1196.44       1321.16    
  16  0.414020     -0.881841      -72.3870       72.3870       1205.45       1277.84    
  17  0.229117      -1.47352      -120.956       120.956       1182.60       1303.55    
  18  0.341764      -1.07363      -88.1306       88.1306       1206.93       1295.06    
  19  0.357052      -1.02987      -84.5383       84.5383       1213.11       1297.65    
  20  0.780779     -0.247463      -20.3133       20.3133       1184.14       1204.45    
  21  0.382234     -0.961721      -78.9440       78.9440       1249.11       1328.06    
  22  0.123899      -2.08829      -171.420       171.420       1263.56       1434.98    
  23  0.393312     -0.933152      -76.5989       76.5989       1163.53       1240.13    
  24  0.481741     -0.730349      -59.9516       59.9516       1197.08       1257.03    
  25  0.120001      -2.12026      -174.044       174.044       1220.84       1394.88    
  26  0.506023     -0.681173      -55.9149       55.9149       1302.36       1358.27    
  27  0.891157     -0.115235      -9.45922       9.45922       1173.43       1182.89    
  28  0.584674     -0.536701      -44.0558       44.0558       1257.10       1301.16    
  29  0.313196      -1.16093      -95.2960       95.2960       1322.33       1417.63    
  30  0.507340     -0.678574      -55.7016       55.7016       1253.45       1309.15    
  31  0.985030     -0.150835E-01  -1.23815       1.23815       1289.19       1290.43    
  32  0.186570      -1.67895      -137.818       137.818       1240.47       1378.29    
  33  0.992622     -0.740493E-02 -0.607842      0.607842       1336.34       1336.94    
  34  0.344152      -1.06667      -87.5589       87.5589       1293.21       1380.77    
  35  0.327214      -1.11714      -91.7019       91.7019       1282.34       1374.04    
  36  0.722008     -0.325719      -26.7371       26.7371       1345.10       1371.84    
  37  0.471441     -0.751960      -61.7256       61.7256       1321.96       1383.69    
  38  0.483594     -0.726510      -59.6364       59.6364       1151.91       1211.55    
  39  0.799410     -0.223881      -18.3775       18.3775       1383.06       1401.43    
  40  0.864070     -0.146101      -11.9929       11.9929       1371.15       1383.14    
  41  0.326419      -1.11957      -91.9016       91.9016       1162.37       1254.27    
  42  0.970166E-01  -2.33287      -191.497       191.497       1258.43       1449.92    
  43  0.822479     -0.195432      -16.0423       16.0423       1346.89       1362.93    
  44  0.719858     -0.328701      -26.9818       26.9818       1401.82       1428.80    
  45  0.359763      -1.02231      -83.9175       83.9175       1497.53       1581.45    
  46  0.879180     -0.128765      -10.5699       10.5699       1496.32       1506.89    
  47  0.152514      -1.88050      -154.363       154.363       1522.04       1676.40    
  48  0.379430     -0.969085      -79.5485       79.5485       1487.59       1567.14    
  49  0.444703     -0.810349      -66.5185       66.5185       1577.02       1643.54    
loop,thermsimp(1:2)       38   73.4180       110.671    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241       1249.61         68.07          1.20         39.64          1.75          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    242       2095.67         67.96          1.14         39.53          1.99          0.04        110.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    1249.6        2.972     -3.380      5.195     -102.6     0.3410    
                     -0.8026     0.1329     -99.70      4.254      3.021    

                       2.779     -1.703      2.113      7436.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.696      0.000      0.000      7000.      92.93    

                      -1.221     -7.783     -7.096     -7.472      10.36    

                      -3.723     -3.949      4223.      0.000      9487.    



                       1457.      5968.      8547.      882.1     -64.42    

                       5268.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.018     -1.548     -1.858     -2.309    -0.3807    

                     -0.3252      9.603      8.503    -0.1593E+05 -4.765    

                     -0.4830     -2.162      9.179      9.147    -0.1969E+05



                      -6.000     0.3538     0.8304E-01  8.875      9.048    

                     -0.1944E+05 -6.000     -1.372    -0.5987      9.593    

                       9.475    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1249.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       38
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       39
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      241     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -170.648       170.648       1160.39       1331.04    
   2  0.274837      -1.29158      -106.020       106.020       1118.78       1224.80    
   3  0.305931E-01  -3.48698      -286.233       286.233       1162.82       1449.06    
   4  0.929157     -0.734779E-01  -6.03152       6.03152       1173.43       1179.46    
   5  0.995956     -0.405208E-02 -0.332619      0.332619       1184.14       1184.47    
   6  0.904971     -0.998521E-01  -8.19648       8.19648       1151.91       1160.11    
   7  0.189758      -1.66200      -136.428       136.428       1183.34       1319.76    
   8  0.134931      -2.00299      -164.418       164.418       1217.29       1381.70    
   9  0.302412      -1.19596      -98.1722       98.1722       1200.47       1298.64    
  10  0.389155     -0.943777      -77.4710       77.4710       1163.53       1241.00    
  11  0.947428     -0.540040E-01  -4.43298       4.43298       1167.86       1172.29    
  12  0.338357      -1.08365      -88.9529       88.9529       1162.37       1251.32    
  13  0.937476     -0.645645E-01  -5.29985       5.29985       1197.08       1202.38    
  14  0.399493     -0.917560      -75.3190       75.3190       1147.53       1222.85    
  15  0.527586     -0.639444      -52.4895       52.4895       1118.98       1171.47    
  16  0.297740      -1.21153      -99.4502       99.4502       1205.45       1304.90    
  17  0.557978     -0.583436      -47.8920       47.8920       1236.30       1284.19    
  18  0.267521      -1.31856      -108.235       108.235       1165.80       1274.03    
  19  0.637637     -0.449986      -36.9376       36.9376       1289.19       1326.13    
  20  0.838569     -0.176059      -14.4520       14.4520       1206.93       1221.38    
  21  0.132199E-01  -4.32603      -355.107       355.107       1213.11       1568.21    
  22  0.745606     -0.293557      -24.0970       24.0970       1257.10       1281.20    
  23  0.334504      -1.09511      -89.8930       89.8930       1182.60       1272.49    
  24  0.118852      -2.12987      -174.833       174.833       1199.51       1374.34    
  25  0.319911      -1.13971      -93.5548       93.5548       1253.45       1347.00    
  26  0.638302E-01  -2.75153      -225.862       225.862       1196.44       1422.30    
  27  0.173204      -1.75329      -143.921       143.921       1249.11       1393.03    
  28  0.885640     -0.121444      -9.96891       9.96891       1336.34       1346.31    
  29  0.710758     -0.341423      -28.0261       28.0261       1302.36       1330.39    
  30  0.938919     -0.630265E-01  -5.17360       5.17360       1346.89       1352.07    
  31  0.217740      -1.52445      -125.136       125.136       1345.10       1470.24    
  32  0.130036      -2.03994      -167.451       167.451       1282.34       1449.79    
  33  0.331090      -1.10537      -90.7353       90.7353       1156.47       1247.21    
  34  0.453525E-01  -3.09329      -253.916       253.916       1240.47       1494.39    
  35  0.494600     -0.704006      -57.7891       57.7891       1293.21       1351.00    
  36  0.488771E-01  -3.01845      -247.773       247.773       1371.15       1618.92    
  37  0.262916E-01  -3.63850      -298.671       298.671       1321.96       1620.63    
  38  0.975293     -0.250177E-01  -2.05361       2.05361       1220.84       1222.89    
  39  0.521026     -0.651955      -53.5165       53.5165       1383.06       1436.57    
  40  0.210960      -1.55609      -127.733       127.733       1322.33       1450.06    
  41  0.475166E-02  -5.34926      -439.100       439.100       1401.82       1840.92    
  42  0.675859     -0.391771      -32.1590       32.1590       1263.56       1295.72    
  43  0.691418     -0.369011      -30.2907       30.2907       1219.59       1249.88    
  44  0.425152     -0.855309      -70.2091       70.2091       1258.43       1328.64    
  45  0.141313      -1.95678      -160.624       160.624       1496.32       1656.95    
  46  0.902170     -0.102952      -8.45095       8.45095       1487.59       1496.04    
  47  0.794321     -0.230268      -18.9018       18.9018       1497.53       1516.43    
  48  0.685387     -0.377772      -31.0099       31.0099       1577.02       1608.03    
  49  0.273223      -1.29747      -106.504       106.504       1249.61       1356.11    
loop,thermsimp(1:2)       39   170.648       106.020    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243       1500.39         68.09          1.20         39.82          1.59          0.04        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1500.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    82.0862               241
loop is:       39
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    82.0862               241
loop is:       40
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    41.0431               289

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      242     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -31.3727       31.3727       1151.91       1183.28    
   2  0.310178      -1.17061      -48.0454       48.0454       1118.98       1167.02    
   3  0.883713     -0.123623      -5.07388       5.07388       1167.86       1172.93    
   4  0.641465     -0.444001      -18.2232       18.2232       1173.43       1191.65    
   5  0.458576E-01  -3.08222      -126.504       126.504       1184.14       1310.64    
   6  0.611421     -0.491970      -20.1920       20.1920       1197.08       1217.27    
   7  0.292603      -1.22894      -50.4394       50.4394       1206.93       1257.37    
   8  0.180818      -1.71026      -70.1945       70.1945       1147.53       1217.73    
   9  0.490648     -0.712028      -29.2238       29.2238       1220.84       1250.06    
  10  0.538601     -0.618781      -25.3967       25.3967       1118.78       1144.17    
  11  0.451209     -0.795824      -32.6631       32.6631       1163.53       1196.19    
  12  0.610260     -0.493870      -20.2699       20.2699       1156.47       1176.74    
  13  0.425113     -0.855401      -35.1083       35.1083       1219.59       1254.70    
  14  0.647858     -0.434084      -17.8161       17.8161       1162.37       1180.18    
  15  0.394937     -0.929029      -38.1302       38.1302       1182.60       1220.73    
  16  0.452279E-01  -3.09604      -127.071       127.071       1165.80       1292.87    
  17  0.954905     -0.461437E-01  -1.89388       1.89388       1257.10       1259.00    
  18  0.362548      -1.01460      -41.6422       41.6422       1236.30       1277.94    
  19  0.808078     -0.213097      -8.74616       8.74616       1263.56       1272.31    
  20  0.219348      -1.51709      -62.2662       62.2662       1200.47       1262.74    
  21  0.206981      -1.57513      -64.6480       64.6480       1205.45       1270.10    
  22  0.719933     -0.328597      -13.4866       13.4866       1183.34       1196.82    
  23  0.950238     -0.510432E-01  -2.09497       2.09497       1289.19       1291.28    
  24  0.845993     -0.167244      -6.86421       6.86421       1258.43       1265.29    
  25  0.157926      -1.84563      -75.7504       75.7504       1302.36       1378.11    
  26  0.430020     -0.843924      -34.6373       34.6373       1160.39       1195.03    
  27  0.624159     -0.471350      -19.3457       19.3457       1336.34       1355.68    
  28  0.355386      -1.03455      -42.4612       42.4612       1253.45       1295.91    
  29  0.297353      -1.21284      -49.7785       49.7785       1293.21       1342.99    
  30  0.185476      -1.68483      -69.1506       69.1506       1346.89       1416.04    
  31  0.406569     -0.900002      -36.9389       36.9389       1249.61       1286.55    
  32  0.147052      -1.91697      -78.6784       78.6784       1199.51       1278.19    
  33  0.205955      -1.58010      -64.8520       64.8520       1217.29       1282.14    
  34  0.383503     -0.958409      -39.3361       39.3361       1249.11       1288.45    
  35  0.514677E-01  -2.96680      -121.767       121.767       1196.44       1318.21    
  36  0.499194     -0.694760      -28.5151       28.5151       1383.06       1411.57    
  37  0.103172E-01  -4.57394      -187.729       187.729       1162.82       1350.55    
  38  0.470163     -0.754676      -30.9742       30.9742       1282.34       1313.31    
  39  0.983694     -0.164404E-01 -0.674763      0.674763       1322.33       1323.01    
  40  0.880425     -0.127351      -5.22686       5.22686       1345.10       1350.33    
  41  0.969759     -0.307072E-01  -1.26032       1.26032       1240.47       1241.73    
  42  0.761826E-01  -2.57462      -105.670       105.670       1487.59       1593.26    
  43  0.124427      -2.08404      -85.5353       85.5353       1497.53       1583.07    
  44  0.997702     -0.230032E-02 -0.944123E-01  0.944123E-01   1213.11       1213.20    
  45  0.213939      -1.54206      -63.2910       63.2910       1577.02       1640.31    
  46  0.471369     -0.752113      -30.8690       30.8690       1371.15       1402.02    
  47  0.421561E-01  -3.16638      -129.958       129.958       1321.96       1451.92    
  48  0.693092     -0.366592      -15.0461       15.0461       1496.32       1511.37    
  49  0.375157     -0.980409      -40.2390       40.2390       1500.39       1540.63    
loop,thermsimp(1:2)       40   31.3727       48.0454    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244       1454.04         68.03          1.16         39.75          1.64          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1454.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       40
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       41
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      243     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -60.1286       60.1286       1118.78       1178.91    
   2  0.984723     -0.153953E-01 -0.631872      0.631872       1118.98       1119.61    
   3  0.689569     -0.371688      -15.2552       15.2552       1167.86       1183.12    
   4  0.539532     -0.617054      -25.3258       25.3258       1156.47       1181.80    
   5  0.103859      -2.26472      -92.9513       92.9513       1162.37       1255.32    
   6  0.403261     -0.908171      -37.2741       37.2741       1151.91       1189.18    
   7  0.545138     -0.606716      -24.9015       24.9015       1173.43       1198.33    
   8  0.211198      -1.55496      -63.8204       63.8204       1160.39       1224.21    
   9  0.533123     -0.629004      -25.8163       25.8163       1163.53       1189.35    
  10  0.891214     -0.115171      -4.72696       4.72696       1183.34       1188.06    
  11  0.604806     -0.502847      -20.6384       20.6384       1213.11       1233.75    
  12  0.176166      -1.73633      -71.2644       71.2644       1197.08       1268.34    
  13  0.733693     -0.309664      -12.7096       12.7096       1147.53       1160.24    
  14  0.248504      -1.39230      -57.1442       57.1442       1182.60       1239.74    
  15  0.183808      -1.69387      -69.5215       69.5215       1240.47       1309.99    
  16  0.308674E-02  -5.78064      -237.255       237.255       1220.84       1458.09    
  17  0.651025     -0.429207      -17.6160       17.6160       1219.59       1237.21    
  18  0.864353     -0.145775      -5.98304       5.98304       1206.93       1212.91    
  19  0.547352     -0.602664      -24.7352       24.7352       1257.10       1281.84    
  20  0.631248     -0.460057      -18.8822       18.8822       1200.47       1219.35    
  21  0.344368E-01  -3.36863      -138.259       138.259       1258.43       1396.69    
  22  0.876828     -0.131444      -5.39488       5.39488       1205.45       1210.85    
  23  0.884538     -0.122690      -5.03559       5.03559       1263.56       1268.60    
  24  0.926808     -0.760084E-01  -3.11962       3.11962       1236.30       1239.42    
  25  0.823462     -0.194237      -7.97210       7.97210       1199.51       1207.48    
  26  0.852580     -0.159489      -6.54591       6.54591       1217.29       1223.83    
  27  0.577707     -0.548689      -22.5199       22.5199       1249.61       1272.13    
  28  0.510093     -0.673163      -27.6287       27.6287       1249.11       1276.74    
  29  0.890288     -0.116210      -4.76961       4.76961       1289.19       1293.96    
  30  0.304875      -1.18785      -48.7531       48.7531       1165.80       1214.55    
  31  0.152164      -1.88279      -77.2757       77.2757       1253.45       1330.72    
  32  0.718687     -0.330329      -13.5577       13.5577       1184.14       1197.70    
  33  0.488128     -0.717177      -29.4352       29.4352       1282.34       1311.77    
  34  0.373052     -0.986038      -40.4701       40.4701       1196.44       1236.91    
  35  0.247351      -1.39695      -57.3350       57.3350       1322.33       1379.67    
  36  0.532108     -0.630909      -25.8945       25.8945       1293.21       1319.10    
  37  0.828879E-02  -4.79285      -196.713       196.713       1345.10       1541.82    
  38  0.168277      -1.78214      -73.1447       73.1447       1162.82       1235.97    
  39  0.253216      -1.37351      -56.3733       56.3733       1336.34       1392.71    
  40  0.458588     -0.779602      -31.9973       31.9973       1302.36       1334.36    
  41  0.725692     -0.320630      -13.1596       13.1596       1371.15       1384.31    
  42  0.283543      -1.26039      -51.7304       51.7304       1383.06       1434.79    
  43  0.798055     -0.225578      -9.25841       9.25841       1346.89       1356.15    
  44  0.805371     -0.216453      -8.88388       8.88388       1321.96       1330.85    
  45  0.580747     -0.543441      -22.3045       22.3045       1496.32       1518.63    
  46  0.581119     -0.542799      -22.2782       22.2782       1500.39       1522.67    
  47  0.305196      -1.18680      -48.7100       48.7100       1497.53       1546.24    
  48  0.905702     -0.990454E-01  -4.06513       4.06513       1487.59       1491.66    
  49  0.265633E-01  -3.62822      -148.914       148.914       1454.04       1602.96    
loop,thermsimp(1:2)       41   60.1286      0.631872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245       1577.02         68.09          1.23         39.54          1.87          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246       1282.31         68.52          1.28         39.37          1.50          0.05        110.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1282.31
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       41
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       42
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      245     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -127.926       127.926       1118.98       1246.90    
   2  0.196215      -1.62854      -66.8404       66.8404       1147.53       1214.37    
   3  0.501152     -0.690846      -28.3545       28.3545       1118.78       1147.13    
   4  0.288339      -1.24362      -51.0420       51.0420       1156.47       1207.52    
   5  0.773132     -0.257306      -10.5606       10.5606       1167.86       1178.42    
   6  0.417683     -0.873033      -35.8320       35.8320       1183.34       1219.17    
   7  0.229479      -1.47195      -60.4132       60.4132       1151.91       1212.32    
   8  0.964123     -0.365367E-01  -1.49958       1.49958       1163.53       1165.03    
   9  0.263782      -1.33263      -54.6954       54.6954       1184.14       1238.84    
  10  0.102960      -2.27342      -93.3080       93.3080       1173.43       1266.74    
  11  0.828790     -0.187788      -7.70741       7.70741       1199.51       1207.22    
  12  0.738697     -0.302868      -12.4306       12.4306       1205.45       1217.88    
  13  0.458595     -0.779589      -31.9967       31.9967       1206.93       1238.93    
  14  0.905176     -0.996260E-01  -4.08896       4.08896       1165.80       1169.89    
  15  0.147067      -1.91687      -78.6741       78.6741       1200.47       1279.14    
  16  0.142365      -1.94936      -80.0077       80.0077       1217.29       1297.29    
  17  0.483147     -0.727435      -29.8562       29.8562       1160.39       1190.25    
  18  0.640417     -0.445636      -18.2903       18.2903       1213.11       1231.40    
  19  0.719349     -0.329408      -13.5199       13.5199       1162.82       1176.34    
  20  0.714234     -0.336545      -13.8128       13.8128       1196.44       1210.25    
  21  0.825507     -0.191757      -7.87030       7.87030       1219.59       1227.46    
  22  0.155188      -1.86312      -76.4680       76.4680       1236.30       1312.76    
  23  0.248874      -1.39081      -57.0831       57.0831       1182.60       1239.68    
  24  0.107953      -2.22606      -91.3644       91.3644       1162.37       1253.73    
  25  0.349169      -1.05220      -43.1855       43.1855       1197.08       1240.26    
  26  0.967311     -0.332356E-01  -1.36409       1.36409       1263.56       1264.92    
  27  0.519506     -0.654877      -26.8782       26.8782       1249.61       1276.49    
  28  0.462662     -0.770758      -31.6343       31.6343       1249.11       1280.75    
  29  0.811438     -0.208948      -8.57586       8.57586       1257.10       1265.68    
  30  0.394710E-01  -3.23219      -132.659       132.659       1289.19       1421.85    
  31  0.482930     -0.727884      -29.8746       29.8746       1240.47       1270.35    
  32  0.520883     -0.652231      -26.7696       26.7696       1282.34       1309.11    
  33  0.980978E-01  -2.32179      -95.2935       95.2935       1293.21       1388.50    
  34  0.626549     -0.467529      -19.1888       19.1888       1253.45       1272.64    
  35  0.618402     -0.480616      -19.7260       19.7260       1321.96       1341.69    
  36  0.681438     -0.383550      -15.7421       15.7421       1302.36       1318.10    
  37  0.816820     -0.202336      -8.30449       8.30449       1346.89       1355.20    
  38  0.578487     -0.547340      -22.4645       22.4645       1322.33       1344.80    
  39  0.349734      -1.05058      -43.1191       43.1191       1371.15       1414.27    
  40  0.945672     -0.558596E-01  -2.29265       2.29265       1336.34       1338.63    
  41  0.767680     -0.264382      -10.8510       10.8510       1258.43       1269.28    
  42  0.122064      -2.10321      -86.3221       86.3221       1383.06       1469.38    
  43  0.211623      -1.55295      -63.7377       63.7377       1220.84       1284.58    
  44  0.969992E-01  -2.33305      -95.7557       95.7557       1487.59       1583.35    
  45  0.877482     -0.130699      -5.36430       5.36430       1496.32       1501.69    
  46  0.448991     -0.800752      -32.8653       32.8653       1500.39       1533.26    
  47  0.833113     -0.182586      -7.49391       7.49391       1345.10       1352.60    
  48  0.691765     -0.368508      -15.1247       15.1247       1497.53       1512.66    
  49  0.310664      -1.16904      -47.9812       47.9812       1282.31       1330.29    
loop,thermsimp(1:2)       42   127.926       66.8404    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247       1135.49         68.24          1.18         39.45          2.04          0.05        110.96
Just calling func    0   0        110.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248       1528.66         68.26          1.16         39.40          2.07          0.05        110.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1135.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       42
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       43
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      247     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -49.6076       49.6076       1118.78       1168.38    
   2  0.383173     -0.959268      -39.3713       39.3713       1163.53       1202.90    
   3  0.386205     -0.951387      -39.0479       39.0479       1165.80       1204.85    
   4  0.362178      -1.01562      -41.6841       41.6841       1162.82       1204.51    
   5  0.394462     -0.930233      -38.1796       38.1796       1167.86       1206.04    
   6  0.883072     -0.124349      -5.10365       5.10365       1160.39       1165.49    
   7  0.571477     -0.559531      -22.9649       22.9649       1199.51       1222.47    
   8  0.944036     -0.575912E-01  -2.36372       2.36372       1156.47       1158.84    
   9  0.326573      -1.11910      -45.9314       45.9314       1196.44       1242.37    
  10  0.467297     -0.760791      -31.2252       31.2252       1151.91       1183.13    
  11  0.828365     -0.188301      -7.72845       7.72845       1147.53       1155.26    
  12  0.826991     -0.189962      -7.79662       7.79662       1205.45       1213.25    
  13  0.675447E-01  -2.69497      -110.610       110.610       1183.34       1293.95    
  14  0.924113     -0.789214E-01  -3.23918       3.23918       1219.59       1222.83    
  15  0.810131     -0.210560      -8.64203       8.64203       1213.11       1221.75    
  16  0.410286     -0.890900      -36.5653       36.5653       1184.14       1220.71    
  17  0.334977      -1.09369      -44.8886       44.8886       1206.93       1251.82    
  18  0.119017      -2.12849      -87.3597       87.3597       1182.60       1269.96    
  19  0.447328     -0.804463      -33.0177       33.0177       1197.08       1230.09    
  20  0.324388E-02  -5.73098      -235.217       235.217       1118.98       1354.19    
  21  0.158272      -1.84344      -75.6605       75.6605       1162.37       1238.03    
  22  0.241219      -1.42205      -58.3654       58.3654       1263.56       1321.93    
  23  0.259790      -1.34788      -55.3212       55.3212       1257.10       1312.42    
  24  0.521973     -0.650139      -26.6837       26.6837       1173.43       1200.11    
  25  0.336335      -1.08965      -44.7225       44.7225       1258.43       1303.15    
  26  0.642248     -0.442780      -18.1731       18.1731       1240.47       1258.65    
  27  0.984615     -0.155047E-01 -0.636361      0.636361       1253.45       1254.08    
  28  0.373782     -0.984082      -40.3898       40.3898       1249.61       1290.00    
  29  0.932479     -0.699087E-01  -2.86927       2.86927       1200.47       1203.34    
  30  0.711360     -0.340577      -13.9783       13.9783       1249.11       1263.09    
  31  0.315363      -1.15403      -47.3650       47.3650       1220.84       1268.20    
  32  0.528583     -0.637556      -26.1673       26.1673       1217.29       1243.45    
  33  0.622355E-01  -2.77683      -113.970       113.970       1282.34       1396.31    
  34  0.144849      -1.93206      -79.2977       79.2977       1236.30       1315.59    
  35  0.868928     -0.140495      -5.76633       5.76633       1302.36       1308.13    
  36  0.243398      -1.41306      -57.9962       57.9962       1282.31       1340.30    
  37  0.936928     -0.651491E-01  -2.67392       2.67392       1336.34       1339.01    
  38  0.979804E-01  -2.32299      -95.3426       95.3426       1321.96       1417.31    
  39  0.805773     -0.215953      -8.86336       8.86336       1322.33       1331.19    
  40  0.210751      -1.55708      -63.9074       63.9074       1345.10       1409.01    
  41  0.497104     -0.698956      -28.6873       28.6873       1346.89       1375.58    
  42  0.532106     -0.630913      -25.8946       25.8946       1293.21       1319.10    
  43  0.898420     -0.107117      -4.39642       4.39642       1371.15       1375.54    
  44  0.579370     -0.545814      -22.4019       22.4019       1289.19       1311.59    
  45  0.191213      -1.65437      -67.9003       67.9003       1383.06       1450.96    
  46  0.491633     -0.710023      -29.1416       29.1416       1496.32       1525.46    
  47  0.989123     -0.109370E-01 -0.448888      0.448888       1497.53       1497.98    
  48  0.576855     -0.550164      -22.5804       22.5804       1500.39       1522.97    
  49  0.133368      -2.01464      -82.6871       82.6871       1135.49       1218.17    
loop,thermsimp(1:2)       43   49.6076       39.3713    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249       1793.28         68.01          1.21         39.59          1.53          0.05        110.39
Just calling func    0   0        110.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    250       1206.96         68.08          1.21         39.94          1.41          0.05        110.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1206.96
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       43
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       44
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      249     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -51.2267       51.2267       1147.53       1198.76    
   2  0.260243      -1.34614      -55.2497       55.2497       1156.47       1211.72    
   3  0.646915     -0.435540      -17.8759       17.8759       1160.39       1178.27    
   4  0.572447     -0.557835      -22.8953       22.8953       1118.78       1141.67    
   5  0.105907      -2.24520      -92.1498       92.1498       1151.91       1244.06    
   6  0.693038     -0.366671      -15.0493       15.0493       1173.43       1188.48    
   7  0.329408      -1.11046      -45.5767       45.5767       1163.53       1209.11    
   8  0.187221      -1.67546      -68.7662       68.7662       1200.47       1269.24    
   9  0.545731     -0.605630      -24.8569       24.8569       1162.82       1187.68    
  10  0.752820     -0.283930      -11.6534       11.6534       1165.80       1177.45    
  11  0.153542      -1.87378      -76.9057       76.9057       1167.86       1244.77    
  12  0.400659     -0.914645      -37.5398       37.5398       1205.45       1242.99    
  13  0.306182      -1.18357      -48.5776       48.5776       1135.49       1184.06    
  14  0.270957E-01  -3.60838      -148.099       148.099       1184.14       1332.24    
  15  0.776765     -0.252618      -10.3682       10.3682       1213.11       1223.47    
  16  0.711945     -0.339755      -13.9446       13.9446       1199.51       1213.45    
  17  0.217190      -1.52698      -62.6721       62.6721       1219.59       1282.26    
  18  0.285226      -1.25447      -51.4875       51.4875       1197.08       1248.56    
  19  0.348904      -1.05296      -43.2167       43.2167       1162.37       1205.58    
  20  0.686414     -0.376275      -15.4435       15.4435       1196.44       1211.88    
  21  0.212825      -1.54729      -63.5054       63.5054       1217.29       1280.79    
  22  0.501697     -0.689760      -28.3099       28.3099       1206.93       1235.24    
  23  0.363771      -1.01123      -41.5040       41.5040       1253.45       1294.95    
  24  0.789273     -0.236642      -9.71254       9.71254       1240.47       1250.19    
  25  0.232884      -1.45721      -59.8085       59.8085       1249.11       1308.92    
  26  0.754896     -0.281175      -11.5403       11.5403       1220.84       1232.38    
  27  0.639358     -0.447290      -18.3582       18.3582       1182.60       1200.96    
  28  0.532505     -0.630163      -25.8638       25.8638       1249.61       1275.47    
  29  0.759813     -0.274683      -11.2738       11.2738       1183.34       1194.61    
  30  0.768360     -0.263497      -10.8147       10.8147       1258.43       1269.24    
  31  0.245116      -1.40602      -57.7075       57.7075       1302.36       1360.07    
  32  0.672517     -0.396727      -16.2829       16.2829       1289.19       1305.47    
  33  0.910675     -0.935691E-01  -3.84036       3.84036       1257.10       1260.94    
  34  0.441618     -0.817310      -33.5449       33.5449       1236.30       1269.84    
  35  0.212980      -1.54656      -63.4755       63.4755       1293.21       1356.68    
  36  0.471690     -0.751434      -30.8412       30.8412       1263.56       1294.40    
  37  0.968545     -0.319606E-01  -1.31176       1.31176       1322.33       1323.64    
  38  0.711169     -0.340845      -13.9893       13.9893       1336.34       1350.33    
  39  0.222170      -1.50431      -61.7417       61.7417       1282.31       1344.05    
  40  0.896100     -0.109703      -4.50256       4.50256       1118.98       1123.48    
  41  0.898054     -0.107525      -4.41315       4.41315       1371.15       1375.56    
  42  0.981364     -0.188122E-01 -0.772111      0.772111       1346.89       1347.66    
  43  0.238126      -1.43496      -58.8950       58.8950       1282.34       1341.23    
  44  0.884882     -0.122301      -5.01963       5.01963       1345.10       1350.12    
  45  0.206421      -1.57784      -64.7594       64.7594       1321.96       1386.72    
  46  0.421939     -0.862894      -35.4158       35.4158       1383.06       1418.47    
  47  0.334170E-01  -3.39869      -139.493       139.493       1497.53       1637.02    
  48  0.940374     -0.614772E-01  -2.52321       2.52321       1500.39       1502.91    
  49  0.119361      -2.12561      -87.2415       87.2415       1206.96       1294.20    
loop,thermsimp(1:2)       44   51.2267       55.2497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251       1302.13         67.93          1.20         39.77          1.62          0.05        110.56
Just calling func    0   0        110.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1302.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       44
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       45
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      250     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -65.1829       65.1829       1118.98       1184.16    
   2  0.455846E-01  -3.08818      -126.749       126.749       1118.78       1245.53    
   3  0.655807     -0.421889      -17.3156       17.3156       1165.80       1183.11    
   4  0.902989     -0.102045      -4.18825       4.18825       1160.39       1164.58    
   5  0.826012     -0.191146      -7.84520       7.84520       1135.49       1143.33    
   6  0.160871      -1.82715      -74.9920       74.9920       1162.82       1237.82    
   7  0.516410     -0.660854      -27.1235       27.1235       1173.43       1200.55    
   8  0.506939     -0.679364      -27.8832       27.8832       1183.34       1211.22    
   9  0.728359     -0.316962      -13.0091       13.0091       1147.53       1160.54    
  10  0.453162     -0.791506      -32.4858       32.4858       1182.60       1215.08    
  11  0.837994     -0.176745      -7.25414       7.25414       1162.37       1169.62    
  12  0.118024      -2.13686      -87.7035       87.7035       1163.53       1251.23    
  13  0.274030      -1.29452      -53.1311       53.1311       1156.47       1209.60    
  14  0.402227     -0.910738      -37.3795       37.3795       1196.44       1233.82    
  15  0.444245     -0.811380      -33.3015       33.3015       1199.51       1232.81    
  16  0.594880     -0.519396      -21.3176       21.3176       1213.11       1234.42    
  17  0.548806     -0.600010      -24.6263       24.6263       1220.84       1245.46    
  18  0.222827      -1.50136      -61.6204       61.6204       1206.93       1268.55    
  19  0.152541      -1.88032      -77.1741       77.1741       1205.45       1282.63    
  20  0.816533     -0.202688      -8.31893       8.31893       1151.91       1160.23    
  21  0.525417     -0.643564      -26.4139       26.4139       1167.86       1194.27    
  22  0.661450     -0.413320      -16.9639       16.9639       1197.08       1214.04    
  23  0.437535     -0.826598      -33.9261       33.9261       1240.47       1274.40    
  24  0.464442     -0.766918      -31.4767       31.4767       1257.10       1288.58    
  25  0.683975     -0.379834      -15.5896       15.5896       1200.47       1216.06    
  26  0.407919     -0.896688      -36.8028       36.8028       1258.43       1295.23    
  27  0.934669     -0.675632E-01  -2.77300       2.77300       1236.30       1239.07    
  28  0.866891     -0.142842      -5.86266       5.86266       1249.61       1255.47    
  29  0.145435E-01  -4.23061      -173.637       173.637       1217.29       1390.92    
  30  0.514599     -0.664368      -27.2677       27.2677       1219.59       1246.86    
  31  0.370591     -0.992656      -40.7417       40.7417       1206.96       1247.70    
  32  0.251726      -1.37941      -56.6154       56.6154       1263.56       1320.18    
  33  0.959470     -0.413742E-01  -1.69812       1.69812       1253.45       1255.15    
  34  0.344885E-01  -3.36713      -138.197       138.197       1289.19       1427.39    
  35  0.348690      -1.05357      -43.2419       43.2419       1249.11       1292.35    
  36  0.610898     -0.492826      -20.2271       20.2271       1322.33       1342.56    
  37  0.440567     -0.819693      -33.6427       33.6427       1184.14       1217.78    
  38  0.340409      -1.07761      -44.2284       44.2284       1282.34       1326.57    
  39  0.345015E-01  -3.36675      -138.182       138.182       1282.31       1420.49    
  40  0.667224     -0.404630      -16.6073       16.6073       1346.89       1363.50    
  41  0.138336      -1.97807      -81.1862       81.1862       1345.10       1426.29    
  42  0.412023     -0.886676      -36.3919       36.3919       1336.34       1372.73    
  43  0.578410     -0.547473      -22.4700       22.4700       1293.21       1315.68    
  44  0.972817     -0.275594E-01  -1.13112       1.13112       1302.36       1303.49    
  45  0.152341      -1.88163      -77.2281       77.2281       1371.15       1448.37    
  46  0.764264     -0.268842      -11.0341       11.0341       1321.96       1333.00    
  47  0.898082E-01  -2.41008      -98.9171       98.9171       1383.06       1481.97    
  48  0.205097      -1.58427      -65.0234       65.0234       1500.39       1565.41    
  49  0.249611E-01  -3.69044      -151.467       151.467       1302.13       1453.60    
loop,thermsimp(1:2)       45   65.1829       126.749    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252       1345.69         68.05          1.20         39.58          1.95          0.04        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1345.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       45
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       46
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      251     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016      -9.44058       9.44058       1135.49       1144.93    
   2  0.338444      -1.08340      -44.4659       44.4659       1151.91       1196.38    
   3  0.563800     -0.573055      -23.5199       23.5199       1147.53       1171.05    
   4  0.295284      -1.21982      -50.0650       50.0650       1160.39       1210.45    
   5  0.506481     -0.680269      -27.9203       27.9203       1162.37       1190.29    
   6  0.345803      -1.06189      -43.5831       43.5831       1165.80       1209.38    
   7  0.741641     -0.298890      -12.2674       12.2674       1118.98       1131.24    
   8  0.182310      -1.70204      -69.8572       69.8572       1167.86       1237.72    
   9  0.315187      -1.15459      -47.3879       47.3879       1173.43       1220.82    
  10  0.598844     -0.512755      -21.0450       21.0450       1156.47       1177.52    
  11  0.659119     -0.416852      -17.1089       17.1089       1183.34       1200.45    
  12  0.247481      -1.39642      -57.3135       57.3135       1197.08       1254.39    
  13  0.255298      -1.36532      -56.0370       56.0370       1182.60       1238.64    
  14  0.876488     -0.131833      -5.41082       5.41082       1200.47       1205.88    
  15  0.358010      -1.02719      -42.1592       42.1592       1184.14       1226.30    
  16  0.317480      -1.14734      -47.0904       47.0904       1199.51       1246.60    
  17  0.153422      -1.87456      -76.9378       76.9378       1196.44       1273.38    
  18  0.296162      -1.21685      -49.9433       49.9433       1213.11       1263.05    
  19  0.629760     -0.462417      -18.9790       18.9790       1162.82       1181.80    
  20  0.458345E-01  -3.08272      -126.524       126.524       1236.30       1362.82    
  21  0.209534      -1.56287      -64.1449       64.1449       1220.84       1284.98    
  22  0.490210E-01  -3.01551      -123.766       123.766       1118.78       1242.54    
  23  0.144817      -1.93229      -79.3070       79.3070       1219.59       1298.90    
  24  0.764061     -0.269107      -11.0450       11.0450       1206.96       1218.00    
  25  0.158664      -1.84097      -75.5591       75.5591       1163.53       1239.09    
  26  0.242818      -1.41544      -58.0941       58.0941       1253.45       1311.54    
  27  0.779950     -0.248525      -10.2002       10.2002       1249.61       1259.81    
  28  0.763580     -0.269737      -11.0708       11.0708       1206.93       1218.00    
  29  0.817639     -0.201335      -8.26339       8.26339       1240.47       1248.74    
  30  0.656802     -0.420373      -17.2534       17.2534       1205.45       1222.71    
  31  0.202192      -1.59854      -65.6090       65.6090       1257.10       1322.71    
  32  0.469647     -0.755773      -31.0193       31.0193       1249.11       1280.13    
  33  0.107456      -2.23067      -91.5536       91.5536       1258.43       1349.98    
  34  0.709118     -0.343734      -14.1079       14.1079       1302.36       1316.47    
  35  0.988480     -0.115868E-01 -0.475560      0.475560       1293.21       1293.68    
  36  0.645173     -0.438236      -17.9866       17.9866       1263.56       1281.55    
  37  0.583143     -0.539322      -22.1355       22.1355       1282.34       1304.47    
  38  0.276552E-01  -3.58794      -147.260       147.260       1321.96       1469.22    
  39  0.560517     -0.578896      -23.7597       23.7597       1322.33       1346.09    
  40  0.292779      -1.22834      -50.4147       50.4147       1346.89       1397.31    
  41  0.486207     -0.721121      -29.5970       29.5970       1336.34       1365.93    
  42  0.379142E-01  -3.27243      -134.311       134.311       1217.29       1351.60    
  43  0.459895     -0.776757      -31.8805       31.8805       1282.31       1314.19    
  44  0.810771     -0.209769      -8.60957       8.60957       1345.10       1353.71    
  45  0.189138      -1.66528      -68.3481       68.3481       1289.19       1357.54    
  46  0.509870     -0.673599      -27.6466       27.6466       1371.15       1398.79    
  47  0.468020E-01  -3.06183      -125.667       125.667       1302.13       1427.80    
  48  0.568404     -0.564922      -23.1862       23.1862       1383.06       1406.24    
  49  0.891250     -0.115130      -4.72531       4.72531       1345.69       1350.41    
loop,thermsimp(1:2)       46   9.44058       44.4659    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253       1245.83         68.10          1.22         39.50          1.89          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1245.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       46
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       47
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      252     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926      -17.5224       17.5224       1118.98       1136.50    
   2  0.474910     -0.744630      -30.5619       30.5619       1135.49       1166.05    
   3  0.125725      -2.07366      -85.1094       85.1094       1147.53       1232.64    
   4  0.950967     -0.502756E-01  -2.06346       2.06346       1156.47       1158.54    
   5  0.562475     -0.575409      -23.6166       23.6166       1162.82       1186.44    
   6  0.728528     -0.316729      -12.9995       12.9995       1162.37       1175.37    
   7  0.326058      -1.12068      -45.9962       45.9962       1151.91       1197.91    
   8  0.460979     -0.774402      -31.7839       31.7839       1183.34       1215.12    
   9  0.186861      -1.67739      -68.8454       68.8454       1200.47       1269.32    
  10  0.737773     -0.304119      -12.4820       12.4820       1165.80       1178.28    
  11  0.254524      -1.36836      -56.1617       56.1617       1160.39       1216.55    
  12  0.475390     -0.743621      -30.5205       30.5205       1206.93       1237.45    
  13  0.783107     -0.244486      -10.0344       10.0344       1206.96       1216.99    
  14  0.615536     -0.485261      -19.9166       19.9166       1173.43       1193.35    
  15  0.600710E-01  -2.81223      -115.423       115.423       1205.45       1320.88    
  16  0.834417     -0.181022      -7.42972       7.42972       1184.14       1191.57    
  17  0.270355      -1.30802      -53.6852       53.6852       1167.86       1221.55    
  18  0.408387     -0.895540      -36.7557       36.7557       1182.60       1219.35    
  19  0.248286      -1.39318      -57.1802       57.1802       1163.53       1220.71    
  20  0.586808E-01  -2.83564      -116.384       116.384       1118.78       1235.16    
  21  0.747050     -0.291623      -11.9691       11.9691       1199.51       1211.48    
  22  0.261869E-01  -3.64250      -149.499       149.499       1240.47       1389.97    
  23  0.495813     -0.701557      -28.7941       28.7941       1197.08       1225.87    
  24  0.600032     -0.510772      -20.9637       20.9637       1249.61       1270.57    
  25  0.936456     -0.656531E-01  -2.69461       2.69461       1213.11       1215.80    
  26  0.583260     -0.539121      -22.1272       22.1272       1196.44       1218.57    
  27  0.994266     -0.575021E-02 -0.236007      0.236007       1249.11       1249.35    
  28  0.149755      -1.89876      -77.9308       77.9308       1263.56       1341.49    
  29  0.751239     -0.286032      -11.7396       11.7396       1220.84       1232.58    
  30  0.703931     -0.351075      -14.4092       14.4092       1293.21       1307.62    
  31  0.998476     -0.152564E-02 -0.626170E-01  0.626170E-01   1219.59       1219.65    
  32  0.501495     -0.690161      -28.3263       28.3263       1282.34       1310.66    
  33  0.446468     -0.806387      -33.0966       33.0966       1253.45       1286.54    
  34  0.321376      -1.13514      -46.5899       46.5899       1282.31       1328.90    
  35  0.850901     -0.161459      -6.62679       6.62679       1302.36       1308.99    
  36  0.975881     -0.244142E-01  -1.00203       1.00203       1257.10       1258.10    
  37  0.386316     -0.951100      -39.0361       39.0361       1322.33       1361.37    
  38  0.782734     -0.244962      -10.0540       10.0540       1258.43       1268.48    
  39  0.142678      -1.94716      -79.9176       79.9176       1345.69       1425.60    
  40  0.509914     -0.673514      -27.6431       27.6431       1217.29       1244.93    
  41  0.211111      -1.55537      -63.8372       63.8372       1345.10       1408.94    
  42  0.212538      -1.54864      -63.5608       63.5608       1289.19       1352.75    
  43  0.889982     -0.116555      -4.78376       4.78376       1236.30       1241.08    
  44  0.769070     -0.262573      -10.7768       10.7768       1336.34       1347.11    
  45  0.792434     -0.232646      -9.54851       9.54851       1346.89       1356.44    
  46  0.250220E-01  -3.68800      -151.367       151.367       1371.15       1522.51    
  47  0.190304      -1.65913      -68.0959       68.0959       1383.06       1451.15    
  48  0.579595     -0.545425      -22.3859       22.3859       1302.13       1324.52    
  49  0.373376     -0.985170      -40.4344       40.4344       1245.83       1286.26    
loop,thermsimp(1:2)       47   17.5224       30.5619    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254       1195.11         68.41          1.21         39.55          1.68          0.05        110.90
Just calling func    0   0        110.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1195.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       47
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       48
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      253     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -47.2805       47.2805       1118.98       1166.26    
   2  0.452730     -0.792459      -32.5250       32.5250       1156.47       1189.00    
   3  0.463916     -0.768051      -31.5232       31.5232       1135.49       1167.01    
   4  0.531172E-01  -2.93526      -120.472       120.472       1162.37       1282.84    
   5  0.933113     -0.692290E-01  -2.84137       2.84137       1165.80       1168.64    
   6  0.107612      -2.22922      -91.4941       91.4941       1162.82       1254.32    
   7  0.228017      -1.47833      -60.6754       60.6754       1184.14       1244.82    
   8  0.766526     -0.265887      -10.9128       10.9128       1173.43       1184.34    
   9  0.676418     -0.390944      -16.0455       16.0455       1151.91       1167.95    
  10  0.220696      -1.51097      -62.0148       62.0148       1199.51       1261.52    
  11  0.959946E-01  -2.34346      -96.1830       96.1830       1183.34       1279.52    
  12  0.570655     -0.560971      -23.0240       23.0240       1213.11       1236.13    
  13  0.736426     -0.305947      -12.5570       12.5570       1160.39       1172.95    
  14  0.966377     -0.342013E-01  -1.40373       1.40373       1206.96       1208.36    
  15  0.797662     -0.226070      -9.27861       9.27861       1196.44       1205.72    
  16  0.413688     -0.882643      -36.2264       36.2264       1182.60       1218.82    
  17  0.200670      -1.60609      -65.9190       65.9190       1219.59       1285.51    
  18  0.843958E-01  -2.47224      -101.468       101.468       1163.53       1265.00    
  19  0.375580     -0.979284      -40.1929       40.1929       1167.86       1208.05    
  20  0.968669     -0.318322E-01  -1.30649       1.30649       1197.08       1198.38    
  21  0.379263     -0.969525      -39.7923       39.7923       1220.84       1260.63    
  22  0.421746     -0.863352      -35.4346       35.4346       1147.53       1182.97    
  23  0.639909     -0.446429      -18.3228       18.3228       1118.78       1137.10    
  24  0.549878     -0.598059      -24.5462       24.5462       1206.93       1231.48    
  25  0.226469      -1.48515      -60.9550       60.9550       1236.30       1297.25    
  26  0.547044E-02  -5.20840      -213.769       213.769       1217.29       1431.06    
  27  0.372808     -0.986692      -40.4969       40.4969       1249.11       1289.61    
  28  0.406819E-01  -3.20197      -131.419       131.419       1257.10       1388.52    
  29  0.664564     -0.408624      -16.7712       16.7712       1258.43       1275.20    
  30  0.708700     -0.344323      -14.1321       14.1321       1200.47       1214.60    
  31  0.863329     -0.146959      -6.03165       6.03165       1249.61       1255.64    
  32  0.406109     -0.901134      -36.9853       36.9853       1245.83       1282.82    
  33  0.101947      -2.28330      -93.7137       93.7137       1253.45       1347.16    
  34  0.660574     -0.414646      -17.0184       17.0184       1293.21       1310.23    
  35  0.839002     -0.175542      -7.20480       7.20480       1302.36       1309.56    
  36  0.735312E-01  -2.61005      -107.124       107.124       1282.34       1389.46    
  37  0.559917     -0.579967      -23.8036       23.8036       1205.45       1229.26    
  38  0.922004     -0.812055E-01  -3.33292       3.33292       1302.13       1305.46    
  39  0.891471     -0.114882      -4.71512       4.71512       1282.31       1287.02    
  40  0.489346     -0.714686      -29.3329       29.3329       1263.56       1292.89    
  41  0.583196     -0.539231      -22.1317       22.1317       1336.34       1358.47    
  42  0.989235     -0.108230E-01 -0.444211      0.444211       1289.19       1289.63    
  43  0.844741     -0.168725      -6.92501       6.92501       1346.89       1353.82    
  44  0.734982     -0.307909      -12.6375       12.6375       1322.33       1334.97    
  45  0.913246     -0.907495E-01  -3.72464       3.72464       1240.47       1244.20    
  46  0.605096     -0.502369      -20.6188       20.6188       1345.10       1365.72    
  47  0.623739     -0.472024      -19.3733       19.3733       1345.69       1365.06    
  48  0.780990     -0.247193      -10.1456       10.1456       1383.06       1393.20    
  49  0.615662E-01  -2.78764      -114.413       114.413       1195.11       1309.53    
loop,thermsimp(1:2)       48   47.2805       32.5250    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255       1464.56         68.40          1.21         39.41          1.71          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256       1215.35         68.13          1.21         39.89          1.54          0.05        110.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1215.35
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       48
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       49
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      255     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.348913      0.348913       1118.78       1119.13    
   2  0.120199      -2.11861      -86.9541       86.9541       1118.98       1205.93    
   3  0.825835     -0.191360      -7.85401       7.85401       1135.49       1143.34    
   4  0.769690     -0.261767      -10.7437       10.7437       1151.91       1162.65    
   5  0.206534      -1.57729      -64.7369       64.7369       1165.80       1230.54    
   6  0.435455     -0.831363      -34.1217       34.1217       1160.39       1194.51    
   7  0.408718     -0.894731      -36.7225       36.7225       1147.53       1184.26    
   8  0.504170E-01  -2.98743      -122.613       122.613       1173.43       1296.04    
   9  0.943874     -0.577631E-01  -2.37078       2.37078       1156.47       1158.84    
  10  0.161493      -1.82330      -74.8337       74.8337       1197.08       1271.91    
  11  0.248560      -1.39207      -57.1349       57.1349       1196.44       1253.58    
  12  0.952734     -0.484195E-01  -1.98729       1.98729       1167.86       1169.85    
  13  0.349224      -1.05204      -43.1791       43.1791       1206.96       1250.14    
  14  0.245013      -1.40644      -57.7247       57.7247       1200.47       1258.20    
  15  0.713805     -0.337146      -13.8375       13.8375       1182.60       1196.44    
  16  0.206995      -1.57506      -64.6454       64.6454       1205.45       1270.10    
  17  0.573984     -0.555154      -22.7852       22.7852       1206.93       1229.71    
  18  0.791297     -0.234082      -9.60747       9.60747       1213.11       1222.71    
  19  0.599323     -0.511955      -21.0122       21.0122       1240.47       1261.49    
  20  0.632893     -0.457454      -18.7753       18.7753       1184.14       1202.92    
  21  0.920472     -0.828688E-01  -3.40119       3.40119       1162.82       1166.23    
  22  0.650695     -0.429713      -17.6368       17.6368       1249.61       1267.25    
  23  0.759327     -0.275322      -11.3001       11.3001       1220.84       1232.14    
  24  0.547563     -0.602278      -24.7193       24.7193       1199.51       1224.23    
  25  0.375945     -0.978312      -40.1530       40.1530       1163.53       1203.68    
  26  0.436593     -0.828753      -34.0146       34.0146       1258.43       1292.44    
  27  0.226348      -1.48568      -60.9769       60.9769       1183.34       1244.31    
  28  0.889061     -0.117589      -4.82622       4.82622       1245.83       1250.66    
  29  0.294563      -1.22226      -50.1654       50.1654       1162.37       1212.53    
  30  0.760606     -0.273640      -11.2310       11.2310       1219.59       1230.82    
  31  0.131934      -2.02545      -83.1307       83.1307       1282.31       1365.44    
  32  0.150887      -1.89123      -77.6218       77.6218       1249.11       1326.73    
  33  0.108814      -2.21811      -91.0382       91.0382       1289.19       1380.23    
  34  0.392982     -0.933991      -38.3339       38.3339       1263.56       1301.89    
  35  0.524209     -0.645865      -26.5083       26.5083       1236.30       1262.80    
  36  0.779329     -0.249322      -10.2329       10.2329       1302.13       1312.37    
  37  0.684136     -0.379599      -15.5799       15.5799       1195.11       1210.69    
  38  0.898629     -0.106885      -4.38690       4.38690       1302.36       1306.75    
  39  0.885947E-01  -2.42368      -99.4754       99.4754       1293.21       1392.68    
  40  0.865042     -0.144977      -5.95031       5.95031       1322.33       1328.28    
  41  0.953799     -0.473027E-01  -1.94145       1.94145       1253.45       1255.39    
  42  0.264945      -1.32823      -54.5148       54.5148       1346.89       1401.41    
  43  0.931660     -0.707875E-01  -2.90534       2.90534       1336.34       1339.24    
  44  0.273150      -1.29773      -53.2630       53.2630       1345.69       1398.95    
  45  0.773196     -0.257223      -10.5572       10.5572       1345.10       1355.66    
  46  0.936342     -0.657743E-01  -2.69958       2.69958       1257.10       1259.80    
  47  0.367272      -1.00165      -41.1110       41.1110       1282.34       1323.45    
  48  0.970907     -0.295243E-01  -1.21177       1.21177       1383.06       1384.27    
  49  0.722669     -0.324804      -13.3310       13.3310       1215.35       1228.68    
loop,thermsimp(1:2)       49  0.348913       86.9541    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257       1511.60         68.10          1.20         39.77          1.64          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258       1242.94         68.10          1.20         39.59          1.76          0.04        110.70
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1242.94
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       49
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       50
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      257     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -192.471       192.471       1118.78       1311.25    
   2  0.902150     -0.102974      -4.22638       4.22638       1135.49       1139.71    
   3  0.375868     -0.978517      -40.1614       40.1614       1156.47       1196.63    
   4  0.136549E-01  -4.29366      -176.225       176.225       1151.91       1328.13    
   5  0.948329     -0.530533E-01  -2.17747       2.17747       1162.82       1165.00    
   6  0.489379E-01  -3.01720      -123.835       123.835       1167.86       1291.70    
   7  0.319400      -1.14131      -46.8429       46.8429       1147.53       1194.38    
   8  0.748008     -0.290342      -11.9165       11.9165       1160.39       1172.31    
   9  0.468015     -0.759255      -31.1622       31.1622       1182.60       1213.76    
  10  0.467420     -0.760527      -31.2144       31.2144       1184.14       1215.35    
  11  0.345085      -1.06396      -43.6683       43.6683       1163.53       1207.20    
  12  0.598981     -0.512526      -21.0357       21.0357       1118.98       1140.01    
  13  0.231496      -1.46319      -60.0539       60.0539       1195.11       1255.17    
  14  0.685496     -0.377613      -15.4984       15.4984       1162.37       1177.86    
  15  0.225803      -1.48809      -61.0758       61.0758       1213.11       1274.18    
  16  0.744991E-01  -2.59697      -106.588       106.588       1199.51       1306.10    
  17  0.436777     -0.828332      -33.9973       33.9973       1215.35       1249.35    
  18  0.241074      -1.42265      -58.3900       58.3900       1206.93       1265.32    
  19  0.728071     -0.317357      -13.0253       13.0253       1165.80       1178.82    
  20  0.228500      -1.47622      -60.5886       60.5886       1219.59       1280.18    
  21  0.423678     -0.858781      -35.2470       35.2470       1220.84       1256.08    
  22  0.812855     -0.207202      -8.50421       8.50421       1183.34       1191.84    
  23  0.810546     -0.210047      -8.62098       8.62098       1206.96       1215.58    
  24  0.113500      -2.17595      -89.3077       89.3077       1245.83       1335.14    
  25  0.197385      -1.62260      -66.5966       66.5966       1196.44       1263.04    
  26  0.101018      -2.29246      -94.0897       94.0897       1253.45       1347.54    
  27  0.857009E-01  -2.45689      -100.838       100.838       1200.47       1301.31    
  28  0.693668     -0.365762      -15.0120       15.0120       1257.10       1272.11    
  29  0.705918     -0.348256      -14.2935       14.2935       1240.47       1254.77    
  30  0.309793      -1.17185      -48.0964       48.0964       1236.30       1284.39    
  31  0.144843      -1.93210      -79.2995       79.2995       1249.61       1328.91    
  32  0.412916     -0.884511      -36.3031       36.3031       1205.45       1241.76    
  33  0.916661     -0.870180E-01  -3.57149       3.57149       1197.08       1200.65    
  34  0.933384E-01  -2.37152      -97.3346       97.3346       1258.43       1355.76    
  35  0.937330     -0.647200E-01  -2.65631       2.65631       1173.43       1176.09    
  36  0.958012     -0.428952E-01  -1.76055       1.76055       1263.56       1265.32    
  37  0.692877E-01  -2.66949      -109.564       109.564       1302.36       1411.92    
  38  0.228520E-01  -3.77872      -155.090       155.090       1302.13       1457.22    
  39  0.188135      -1.67060      -68.5664       68.5664       1282.34       1350.91    
  40  0.122595E-01  -4.40146      -180.649       180.649       1249.11       1429.76    
  41  0.776693     -0.252710      -10.3720       10.3720       1322.33       1332.70    
  42  0.571957     -0.558691      -22.9304       22.9304       1336.34       1359.27    
  43  0.313016      -1.16150      -47.6716       47.6716       1345.10       1392.77    
  44  0.512360     -0.668728      -27.4467       27.4467       1282.31       1309.75    
  45  0.874954     -0.133584      -5.48270       5.48270       1289.19       1294.67    
  46  0.617920     -0.481397      -19.7580       19.7580       1383.06       1402.81    
  47  0.529196     -0.636396      -26.1197       26.1197       1293.21       1319.33    
  48  0.389261E-02  -5.54867      -227.735       227.735       1345.69       1573.42    
  49  0.323386E-01  -3.43149      -140.839       140.839       1242.94       1383.78    
loop,thermsimp(1:2)       50   192.471       4.22638    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259       1520.48         68.03          1.20         39.76          1.80          0.05        110.83
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260       1248.74         68.08          1.19         39.59          2.02          0.05        110.92
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1248.74
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       50
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       51
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      259     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577      -4.16902       4.16902       1135.49       1139.66    
   2  0.808902     -0.212077      -8.70431       8.70431       1118.98       1127.68    
   3  0.762147     -0.271616      -11.1480       11.1480       1162.82       1173.97    
   4  0.287851      -1.24531      -51.1114       51.1114       1160.39       1211.50    
   5  0.212418      -1.54920      -63.5840       63.5840       1173.43       1237.01    
   6  0.380717     -0.965699      -39.6353       39.6353       1162.37       1202.00    
   7  0.877795     -0.130342      -5.34964       5.34964       1165.80       1171.15    
   8  0.836834     -0.178130      -7.31099       7.31099       1183.34       1190.65    
   9  0.435183     -0.831988      -34.1474       34.1474       1147.53       1181.68    
  10  0.900166     -0.105177      -4.31677       4.31677       1156.47       1160.79    
  11  0.175095      -1.74242      -71.5145       71.5145       1197.08       1268.59    
  12  0.322232      -1.13248      -46.4806       46.4806       1163.53       1210.01    
  13  0.706662     -0.347203      -14.2503       14.2503       1182.60       1196.85    
  14  0.494297     -0.704618      -28.9197       28.9197       1184.14       1213.06    
  15  0.324383      -1.12583      -46.2076       46.2076       1206.96       1253.16    
  16  0.777122     -0.252157      -10.3493       10.3493       1205.45       1215.80    
  17  0.499054E-01  -2.99763      -123.032       123.032       1215.35       1338.38    
  18  0.489193E-01  -3.01758      -123.851       123.851       1240.47       1364.32    
  19  0.480140     -0.733678      -30.1124       30.1124       1195.11       1225.22    
  20  0.914126     -0.897865E-01  -3.68511       3.68511       1220.84       1224.52    
  21  0.613008     -0.489378      -20.0856       20.0856       1196.44       1216.53    
  22  0.470573     -0.753804      -30.9384       30.9384       1206.93       1237.87    
  23  0.614279     -0.487307      -20.0006       20.0006       1263.56       1283.56    
  24  0.410529     -0.890308      -36.5410       36.5410       1257.10       1293.64    
  25  0.582759     -0.539981      -22.1625       22.1625       1213.11       1235.27    
  26  0.422753E-01  -3.16355      -129.842       129.842       1219.59       1349.43    
  27  0.717044     -0.332618      -13.6517       13.6517       1236.30       1249.95    
  28  0.420765     -0.865682      -35.5303       35.5303       1167.86       1203.39    
  29  0.801392     -0.221405      -9.08714       9.08714       1289.19       1298.27    
  30  0.426188     -0.852875      -35.0046       35.0046       1200.47       1235.48    
  31  0.338881      -1.08211      -44.4130       44.4130       1199.51       1243.92    
  32  0.398160     -0.920902      -37.7967       37.7967       1282.31       1320.10    
  33  0.938837     -0.631132E-01  -2.59036       2.59036       1118.78       1121.37    
  34  0.411860E-01  -3.18966      -130.913       130.913       1293.21       1424.12    
  35  0.180703      -1.71090      -70.2207       70.2207       1151.91       1222.13    
  36  0.617012     -0.482867      -19.8183       19.8183       1249.61       1269.43    
  37  0.788612     -0.237480      -9.74692       9.74692       1322.33       1332.08    
  38  0.381719     -0.963071      -39.5274       39.5274       1245.83       1285.36    
  39  0.376038     -0.978064      -40.1428       40.1428       1253.45       1293.59    
  40  0.105996      -2.24435      -92.1152       92.1152       1282.34       1374.45    
  41  0.769932E-01  -2.56404      -105.236       105.236       1258.43       1363.66    
  42  0.365987      -1.00516      -41.2548       41.2548       1336.34       1377.59    
  43  0.731763     -0.312298      -12.8177       12.8177       1242.94       1255.76    
  44  0.447137     -0.804891      -33.0352       33.0352       1345.10       1378.14    
  45  0.273519      -1.29638      -53.2076       53.2076       1383.06       1436.26    
  46  0.870614     -0.138556      -5.68678       5.68678       1302.36       1308.05    
  47  0.822463     -0.195452      -8.02194       8.02194       1249.11       1257.13    
  48  0.456061     -0.785129      -32.2241       32.2241       1302.13       1334.36    
  49  0.603947     -0.504269      -20.6968       20.6968       1248.74       1269.43    
loop,thermsimp(1:2)       51   4.16902       8.70431    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261       1427.88         68.04          1.21         39.67          1.74          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    1427.9        3.168     -3.387      4.760     -102.6     0.9323    
                     -0.7155     0.1908     -99.70      4.279     -2.365    

                       2.812     -1.618      2.195      7687.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.766      0.000      0.000      7000.      1.007    

                      -1.185     -10.75     -8.149     -7.774      10.72    

                      -3.903     -3.949      4135.      0.000      9647.    



                       1288.      7047.      8377.      1203.     -382.3    

                       5191.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.099     -1.674     -2.255     -2.303    -0.3807    

                     -0.3252      9.633      8.539    -0.1613E+05 -4.881    

                     -0.6377     -2.194      9.130      9.051    -0.1969E+05



                      -6.000     0.1694    -0.1126      8.965      9.070    

                     -0.1944E+05 -6.000     -1.287    -0.5999      9.609    

                       9.423    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1427.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       51
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       52
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      260     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -35.4984       35.4984       1118.78       1154.28    
   2  0.315135      -1.15476      -47.3947       47.3947       1118.98       1166.37    
   3  0.696708     -0.361389      -14.8325       14.8325       1135.49       1150.32    
   4  0.922116     -0.810842E-01  -3.32795       3.32795       1156.47       1159.80    
   5  0.908133     -0.963648E-01  -3.95511       3.95511       1165.80       1169.75    
   6  0.174132      -1.74794      -71.7409       71.7409       1162.82       1234.56    
   7  0.490629     -0.712068      -29.2255       29.2255       1147.53       1176.76    
   8  0.382604     -0.960755      -39.4323       39.4323       1183.34       1222.77    
   9  0.985159     -0.149527E-01 -0.613705      0.613705       1182.60       1183.21    
  10  0.182634      -1.70027      -69.7844       69.7844       1162.37       1232.15    
  11  0.554568     -0.589565      -24.1976       24.1976       1167.86       1192.06    
  12  0.999791     -0.209153E-03 -0.858428E-02  0.858428E-02   1163.53       1163.54    
  13  0.284621      -1.25660      -51.5747       51.5747       1160.39       1211.96    
  14  0.920706E-01  -2.38520      -97.8959       97.8959       1184.14       1282.04    
  15  0.243911      -1.41095      -57.9098       57.9098       1205.45       1263.36    
  16  0.866829     -0.142914      -5.86561       5.86561       1196.44       1202.31    
  17  0.640039     -0.446225      -18.3145       18.3145       1151.91       1170.22    
  18  0.737488E-01  -2.60709      -107.003       107.003       1220.84       1327.84    
  19  0.511916     -0.669594      -27.4822       27.4822       1195.11       1222.59    
  20  0.870220     -0.139009      -5.70537       5.70537       1213.11       1218.81    
  21  0.594690     -0.519714      -21.3307       21.3307       1200.47       1221.80    
  22  0.659508     -0.416262      -17.0847       17.0847       1173.43       1190.51    
  23  0.702023     -0.353789      -14.5206       14.5206       1206.93       1221.45    
  24  0.178121      -1.72529      -70.8113       70.8113       1199.51       1270.32    
  25  0.622271     -0.474379      -19.4700       19.4700       1236.30       1255.77    
  26  0.877027     -0.131217      -5.38556       5.38556       1206.96       1212.34    
  27  0.206753      -1.57623      -64.6935       64.6935       1242.94       1307.63    
  28  0.927381     -0.753912E-01  -3.09429       3.09429       1249.11       1252.21    
  29  0.610274     -0.493848      -20.2690       20.2690       1197.08       1217.35    
  30  0.453676     -0.790373      -32.4393       32.4393       1249.61       1282.05    
  31  0.203335      -1.59290      -65.3775       65.3775       1248.74       1314.11    
  32  0.558786     -0.581989      -23.8866       23.8866       1263.56       1287.45    
  33  0.685013     -0.378317      -15.5273       15.5273       1245.83       1261.36    
  34  0.753574     -0.282929      -11.6123       11.6123       1253.45       1265.06    
  35  0.736990E-01  -2.60777      -107.031       107.031       1257.10       1364.13    
  36  0.719848     -0.328716      -13.4915       13.4915       1289.19       1302.68    
  37  0.177345E-01  -4.03224      -165.496       165.496       1302.36       1467.86    
  38  0.277334E-01  -3.58512      -147.144       147.144       1282.31       1429.45    
  39  0.228604      -1.47576      -60.5698       60.5698       1322.33       1382.90    
  40  0.874609     -0.133979      -5.49890       5.49890       1302.13       1307.63    
  41  0.875699     -0.132733      -5.44778       5.44778       1215.35       1220.80    
  42  0.540874     -0.614569      -25.2238       25.2238       1219.59       1244.81    
  43  0.343108E-01  -3.37230      -138.409       138.409       1258.43       1396.84    
  44  0.982551     -0.176027E-01 -0.722471      0.722471       1240.47       1241.20    
  45  0.201823      -1.60037      -65.6840       65.6840       1282.34       1348.02    
  46  0.116838      -2.14697      -88.1183       88.1183       1336.34       1424.45    
  47  0.520586     -0.652800      -26.7929       26.7929       1345.10       1371.90    
  48  0.515528     -0.662563      -27.1936       27.1936       1293.21       1320.40    
  49  0.814407     -0.205295      -8.42594       8.42594       1427.88       1436.30    
loop,thermsimp(1:2)       52   35.4984       47.3947    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262       1093.20         68.05          1.22         39.55          1.82          0.05        110.69
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    263       1649.18         68.25          1.13         39.32          1.92          0.05        110.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1093.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       52
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       53
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      262     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -138.678       138.678       1135.49       1274.17    
   2  0.714674     -0.335928      -13.7875       13.7875       1118.78       1132.56    
   3  0.977792     -0.224587E-01 -0.921774      0.921774       1156.47       1157.40    
   4  0.771231     -0.259767      -10.6616       10.6616       1163.53       1174.19    
   5  0.265148      -1.32747      -54.4834       54.4834       1118.98       1173.46    
   6  0.559491     -0.580728      -23.8349       23.8349       1165.80       1189.63    
   7  0.934824E-01  -2.36998      -97.2714       97.2714       1151.91       1249.18    
   8  0.928182     -0.745278E-01  -3.05885       3.05885       1147.53       1150.59    
   9  0.464905     -0.765922      -31.4358       31.4358       1182.60       1214.03    
  10  0.871919     -0.137059      -5.62531       5.62531       1173.43       1179.05    
  11  0.982233     -0.179265E-01 -0.735757      0.735757       1167.86       1168.60    
  12  0.426376     -0.852433      -34.9865       34.9865       1196.44       1231.43    
  13  0.471128E-01  -3.05521      -125.395       125.395       1160.39       1285.78    
  14  0.686439     -0.376238      -15.4420       15.4420       1206.96       1222.40    
  15  0.117826      -2.13855      -87.7725       87.7725       1197.08       1284.85    
  16  0.756878E-01  -2.58114      -105.938       105.938       1213.11       1319.04    
  17  0.196211      -1.62856      -66.8413       66.8413       1215.35       1282.19    
  18  0.431930     -0.839491      -34.4553       34.4553       1206.93       1241.38    
  19  0.707794     -0.345602      -14.1846       14.1846       1200.47       1214.66    
  20  0.174358E-01  -4.04923      -166.193       166.193       1195.11       1361.30    
  21  0.267976      -1.31686      -54.0479       54.0479       1183.34       1237.38    
  22  0.793866     -0.230841      -9.47442       9.47442       1162.37       1171.84    
  23  0.135848      -1.99622      -81.9311       81.9311       1162.82       1244.76    
  24  0.663958     -0.409536      -16.8086       16.8086       1240.47       1257.28    
  25  0.281101      -1.26904      -52.0854       52.0854       1219.59       1271.68    
  26  0.606466     -0.500106      -20.5259       20.5259       1249.11       1269.64    
  27  0.940056     -0.618158E-01  -2.53711       2.53711       1236.30       1238.83    
  28  0.124106      -2.08662      -85.6413       85.6413       1245.83       1331.47    
  29  0.205090      -1.58431      -65.0249       65.0249       1205.45       1270.48    
  30  0.852960     -0.159043      -6.52761       6.52761       1253.45       1259.98    
  31  0.241701      -1.42005      -58.2833       58.2833       1199.51       1257.79    
  32  0.744368     -0.295220      -12.1167       12.1167       1184.14       1196.26    
  33  0.279909      -1.27329      -52.2598       52.2598       1249.61       1301.87    
  34  0.142971      -1.94511      -79.8335       79.8335       1263.56       1343.39    
  35  0.367233      -1.00176      -41.1153       41.1153       1289.19       1330.30    
  36  0.839044     -0.175493      -7.20276       7.20276       1302.13       1309.33    
  37  0.762369     -0.271325      -11.1360       11.1360       1242.94       1254.08    
  38  0.414704     -0.880189      -36.1257       36.1257       1248.74       1284.86    
  39  0.294445      -1.22266      -50.1819       50.1819       1293.21       1343.39    
  40  0.296874      -1.21445      -49.8446       49.8446       1220.84       1270.68    
  41  0.834777     -0.180590      -7.41199       7.41199       1282.34       1289.75    
  42  0.399354     -0.917907      -37.6737       37.6737       1257.10       1294.78    
  43  0.948666     -0.526981E-01  -2.16289       2.16289       1345.10       1347.27    
  44  0.306553E-01  -3.48495      -143.033       143.033       1322.33       1465.36    
  45  0.768324E-01  -2.56613      -105.322       105.322       1258.43       1363.75    
  46  0.723813     -0.323222      -13.2660       13.2660       1336.34       1349.60    
  47  0.912222     -0.918720E-01  -3.77071       3.77071       1282.31       1286.08    
  48  0.846322     -0.166855      -6.84824       6.84824       1427.88       1434.72    
  49  0.704090     -0.350850      -14.4000       14.4000       1093.20       1107.60    
loop,thermsimp(1:2)       53   138.678       13.7875    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264       1535.14         68.39          1.07         38.88          2.60          0.05        110.98
Just calling func    0   0        110.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265       1228.26         68.35          1.12         38.97          2.11          0.05        110.60
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1228.26
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       53
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       54
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      264     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133      -19.9524       19.9524       1093.20       1113.15    
   2  0.438442     -0.824528      -33.8412       33.8412       1118.78       1152.62    
   3  0.666371     -0.405908      -16.6597       16.6597       1147.53       1164.19    
   4  0.419797     -0.867984      -35.6247       35.6247       1156.47       1192.10    
   5  0.662493     -0.411746      -16.8993       16.8993       1167.86       1184.76    
   6  0.261021      -1.34315      -55.1272       55.1272       1162.37       1217.49    
   7  0.451731     -0.794667      -32.6156       32.6156       1118.98       1151.59    
   8  0.858047     -0.153096      -6.28354       6.28354       1163.53       1169.81    
   9  0.678039     -0.388550      -15.9473       15.9473       1173.43       1189.38    
  10  0.257304      -1.35750      -55.7158       55.7158       1165.80       1221.52    
  11  0.379774     -0.968178      -39.7370       39.7370       1184.14       1223.88    
  12  0.200314      -1.60787      -65.9920       65.9920       1182.60       1248.59    
  13  0.702955E-01  -2.65505      -108.971       108.971       1200.47       1309.44    
  14  0.846007     -0.167228      -6.86355       6.86355       1206.96       1213.82    
  15  0.692217     -0.367856      -15.0980       15.0980       1196.44       1211.54    
  16  0.830541     -0.185678      -7.62080       7.62080       1183.34       1190.96    
  17  0.162133E-02  -6.42451      -263.682       263.682       1236.30       1499.98    
  18  0.829216     -0.187275      -7.68633       7.68633       1206.93       1214.62    
  19  0.464918     -0.765894      -31.4347       31.4347       1162.82       1194.26    
  20  0.204157      -1.58887      -65.2120       65.2120       1151.91       1217.12    
  21  0.203429      -1.59244      -65.3586       65.3586       1242.94       1308.30    
  22  0.403935     -0.906500      -37.2056       37.2056       1240.47       1277.68    
  23  0.508037     -0.677201      -27.7944       27.7944       1199.51       1227.30    
  24  0.337702      -1.08559      -44.5560       44.5560       1253.45       1298.00    
  25  0.375672     -0.979039      -40.1828       40.1828       1249.11       1289.29    
  26  0.218755      -1.51980      -62.3774       62.3774       1205.45       1267.83    
  27  0.803422     -0.218876      -8.98333       8.98333       1220.84       1229.82    
  28  0.324101      -1.12670      -46.2433       46.2433       1219.59       1265.83    
  29  0.804001     -0.218155      -8.95374       8.95374       1135.49       1144.44    
  30  0.727676     -0.317899      -13.0476       13.0476       1215.35       1228.40    
  31  0.769479     -0.262042      -10.7550       10.7550       1197.08       1207.83    
  32  0.632293     -0.458402      -18.8142       18.8142       1248.74       1267.55    
  33  0.300459      -1.20244      -49.3520       49.3520       1160.39       1209.74    
  34  0.567362     -0.566759      -23.2615       23.2615       1282.31       1305.57    
  35  0.803345     -0.218971      -8.98725       8.98725       1282.34       1291.33    
  36  0.764706     -0.268264      -11.0104       11.0104       1257.10       1268.11    
  37  0.159444      -1.83606      -75.3576       75.3576       1249.61       1324.97    
  38  0.951670     -0.495367E-01  -2.03314       2.03314       1302.13       1304.17    
  39  0.769198     -0.262407      -10.7700       10.7700       1213.11       1223.88    
  40  0.916532     -0.871588E-01  -3.57727       3.57727       1289.19       1292.77    
  41  0.146117E-01  -4.22593      -173.445       173.445       1245.83       1419.28    
  42  0.196164      -1.62880      -66.8511       66.8511       1293.21       1360.06    
  43  0.399482     -0.917586      -37.6605       37.6605       1263.56       1301.22    
  44  0.646732     -0.435823      -17.8875       17.8875       1345.10       1362.99    
  45  0.207790      -1.57122      -64.4879       64.4879       1336.34       1400.82    
  46  0.276388      -1.28595      -52.7793       52.7793       1195.11       1247.89    
  47  0.410494     -0.890394      -36.5445       36.5445       1258.43       1294.97    
  48  0.437747     -0.826115      -33.9063       33.9063       1427.88       1461.78    
  49  0.414886     -0.879752      -36.1077       36.1077       1228.26       1264.37    
loop,thermsimp(1:2)       54   19.9524       33.8412    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266       1178.90         68.36          1.11         38.90          2.70          0.05        111.12
Just calling func    0   0        111.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1178.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       54
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       55
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      265     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241      -19.2180       19.2180       1093.20       1112.42    
   2  0.909442     -0.949244E-01  -3.89599       3.89599       1135.49       1139.38    
   3  0.449837     -0.798870      -32.7881       32.7881       1118.98       1151.77    
   4  0.761598     -0.272336      -11.1775       11.1775       1118.78       1129.95    
   5  0.706800     -0.347007      -14.2423       14.2423       1147.53       1161.78    
   6  0.214343      -1.54018      -63.2136       63.2136       1163.53       1226.74    
   7  0.855661     -0.155881      -6.39783       6.39783       1167.86       1174.26    
   8  0.432924E-01  -3.13978      -128.866       128.866       1173.43       1302.30    
   9  0.902784     -0.102271      -4.19754       4.19754       1183.34       1187.53    
  10  0.706965     -0.346774      -14.2327       14.2327       1156.47       1170.71    
  11  0.826667     -0.190354      -7.81270       7.81270       1162.82       1170.64    
  12  0.824436     -0.193055      -7.92359       7.92359       1197.08       1205.00    
  13  0.442772     -0.814700      -33.4378       33.4378       1160.39       1193.83    
  14  0.416355     -0.876217      -35.9626       35.9626       1196.44       1232.40    
  15  0.268464      -1.31504      -53.9732       53.9732       1206.96       1260.93    
  16  0.779742     -0.248792      -10.2112       10.2112       1206.93       1217.14    
  17  0.406799E-01  -3.20202      -131.421       131.421       1151.91       1283.33    
  18  0.975397     -0.249106E-01  -1.02241       1.02241       1162.37       1163.39    
  19  0.425150E-01  -3.15790      -129.610       129.610       1165.80       1295.41    
  20  0.302481      -1.19574      -49.0767       49.0767       1213.11       1262.18    
  21  0.732033     -0.311930      -12.8026       12.8026       1184.14       1196.94    
  22  0.774561     -0.255459      -10.4848       10.4848       1199.51       1209.99    
  23  0.899897     -0.105475      -4.32901       4.32901       1215.35       1219.68    
  24  0.549624     -0.598520      -24.5651       24.5651       1220.84       1245.40    
  25  0.143543      -1.94112      -79.6696       79.6696       1195.11       1274.78    
  26  0.229055      -1.47379      -60.4891       60.4891       1182.60       1243.09    
  27  0.334206      -1.09600      -44.9831       44.9831       1228.26       1273.25    
  28  0.301620      -1.19859      -49.1937       49.1937       1219.59       1268.78    
  29  0.856030     -0.155449      -6.38013       6.38013       1248.74       1255.12    
  30  0.978878     -0.213482E-01 -0.876195      0.876195       1205.45       1206.33    
  31  0.890790E-01  -2.41823      -99.2517       99.2517       1257.10       1356.35    
  32  0.275076      -1.29071      -52.9746       52.9746       1240.47       1293.45    
  33  0.506865     -0.679511      -27.8892       27.8892       1249.11       1277.00    
  34  0.628553     -0.464334      -19.0577       19.0577       1282.34       1301.40    
  35  0.787972     -0.238293      -9.78027       9.78027       1289.19       1298.97    
  36  0.746168     -0.292804      -12.0176       12.0176       1258.43       1270.44    
  37  0.116954      -2.14598      -88.0776       88.0776       1253.45       1341.53    
  38  0.245368      -1.40500      -57.6654       57.6654       1263.56       1321.23    
  39  0.873952     -0.134729      -5.52971       5.52971       1302.13       1307.66    
  40  0.850596     -0.161818      -6.64151       6.64151       1282.31       1288.95    
  41  0.455763     -0.785783      -32.2510       32.2510       1242.94       1275.19    
  42  0.984333     -0.157910E-01 -0.648111      0.648111       1200.47       1201.12    
  43  0.956700     -0.442655E-01  -1.81679       1.81679       1249.61       1251.43    
  44  0.186161      -1.68114      -68.9993       68.9993       1293.21       1362.21    
  45  0.791379     -0.233979      -9.60320       9.60320       1345.10       1354.71    
  46  0.262937      -1.33584      -54.8271       54.8271       1336.34       1391.16    
  47  0.115228E-01  -4.46342      -183.193       183.193       1245.83       1429.02    
  48  0.324912      -1.12420      -46.1406       46.1406       1427.88       1474.02    
  49  0.164288      -1.80613      -74.1292       74.1292       1178.90       1253.03    
loop,thermsimp(1:2)       55   19.2180       3.89599    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267       1342.81         68.27          1.10         38.81          2.56          0.04        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1342.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       55
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       56
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      266     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -57.5862       57.5862       1093.20       1150.78    
   2  0.963480     -0.372033E-01  -1.52694       1.52694       1118.78       1120.30    
   3  0.633143     -0.457059      -18.7591       18.7591       1135.49       1154.25    
   4  0.939850E-02  -4.66721      -191.557       191.557       1118.98       1310.53    
   5  0.796978     -0.226928      -9.31384       9.31384       1147.53       1156.85    
   6  0.229125      -1.47349      -60.4766       60.4766       1162.37       1222.84    
   7  0.926958     -0.758467E-01  -3.11298       3.11298       1162.82       1165.94    
   8  0.687512     -0.374676      -15.3779       15.3779       1156.47       1171.85    
   9  0.695030     -0.363800      -14.9315       14.9315       1167.86       1182.79    
  10  0.900736     -0.104543      -4.29075       4.29075       1183.34       1187.63    
  11  0.867179     -0.142510      -5.84904       5.84904       1160.39       1166.24    
  12  0.879271     -0.128662      -5.28068       5.28068       1184.14       1189.42    
  13  0.197557      -1.62173      -66.5607       66.5607       1200.47       1267.03    
  14  0.790701     -0.234835      -9.63835       9.63835       1197.08       1206.72    
  15  0.807456     -0.213867      -8.77775       8.77775       1205.45       1214.23    
  16  0.688117     -0.373796      -15.3417       15.3417       1199.51       1214.85    
  17  0.227000      -1.48280      -60.8589       60.8589       1206.93       1267.79    
  18  0.374715     -0.981589      -40.2874       40.2874       1215.35       1255.64    
  19  0.176077      -1.73683      -71.2850       71.2850       1163.53       1234.81    
  20  0.446126E-01  -3.10974      -127.633       127.633       1196.44       1324.07    
  21  0.997763E-01  -2.30482      -94.5971       94.5971       1182.60       1277.20    
  22  0.142978E-01  -4.24765      -174.337       174.337       1220.84       1395.17    
  23  0.652216     -0.427379      -17.5410       17.5410       1249.61       1267.15    
  24  0.909797     -0.945339E-01  -3.87996       3.87996       1178.90       1182.78    
  25  0.145015      -1.93092      -79.2509       79.2509       1248.74       1327.99    
  26  0.189723      -1.66219      -68.2215       68.2215       1206.96       1275.18    
  27  0.260997      -1.34324      -55.1309       55.1309       1213.11       1268.24    
  28  0.167755      -1.78525      -73.2721       73.2721       1219.59       1292.86    
  29  0.148939      -1.90422      -78.1550       78.1550       1258.43       1336.58    
  30  0.209474      -1.56315      -64.1567       64.1567       1228.26       1292.42    
  31  0.594522     -0.519998      -21.3423       21.3423       1195.11       1216.45    
  32  0.401703     -0.912043      -37.4331       37.4331       1242.94       1280.37    
  33  0.306469      -1.18264      -48.5392       48.5392       1249.11       1297.65    
  34  0.879335     -0.128589      -5.27769       5.27769       1151.91       1157.19    
  35  0.920707     -0.826134E-01  -3.39071       3.39071       1282.31       1285.70    
  36  0.215616      -1.53425      -62.9706       62.9706       1240.47       1303.44    
  37  0.821708     -0.196370      -8.05965       8.05965       1165.80       1173.86    
  38  0.935240     -0.669517E-01  -2.74790       2.74790       1289.19       1291.94    
  39  0.691932     -0.368268      -15.1148       15.1148       1282.34       1297.45    
  40  0.493152     -0.706938      -29.0149       29.0149       1173.43       1202.44    
  41  0.362160      -1.01567      -41.6862       41.6862       1302.13       1343.82    
  42  0.636318     -0.452056      -18.5538       18.5538       1263.56       1282.11    
  43  0.178369      -1.72390      -70.7542       70.7542       1253.45       1324.20    
  44  0.987372     -0.127089E-01 -0.521612      0.521612       1345.10       1345.62    
  45  0.557690     -0.583953      -23.9672       23.9672       1257.10       1281.07    
  46  0.434391     -0.833811      -34.2222       34.2222       1293.21       1327.43    
  47  0.759572     -0.275001      -11.2869       11.2869       1336.34       1347.62    
  48  0.578559     -0.547214      -22.4594       22.4594       1245.83       1268.29    
  49  0.262392      -1.33792      -54.9122       54.9122       1342.81       1397.72    
loop,thermsimp(1:2)       56   57.5862       1.52694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    268       1427.88         68.43          1.17         39.09          2.13          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    269       1117.10         68.35          1.14         39.00          2.27          0.05        110.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1117.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       56
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       57
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      268     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -48.8845       48.8845       1118.78       1167.66    
   2  0.729962     -0.314762      -12.9188       12.9188       1093.20       1106.12    
   3  0.788140     -0.238080      -9.77154       9.77154       1135.49       1145.26    
   4  0.718031     -0.331242      -13.5952       13.5952       1147.53       1161.13    
   5  0.603575     -0.504885      -20.7220       20.7220       1151.91       1172.63    
   6  0.287757      -1.24564      -51.1249       51.1249       1162.82       1213.95    
   7  0.690986     -0.369635      -15.1710       15.1710       1160.39       1175.56    
   8  0.976315     -0.239695E-01 -0.983783      0.983783       1156.47       1157.46    
   9  0.983892     -0.162393E-01 -0.666511      0.666511       1165.80       1166.47    
  10  0.858769     -0.152255      -6.24901       6.24901       1178.90       1185.15    
  11  0.968889     -0.316048E-01  -1.29716       1.29716       1167.86       1169.16    
  12  0.364921      -1.00807      -41.3745       41.3745       1183.34       1224.71    
  13  0.540930     -0.614466      -25.2196       25.2196       1184.14       1209.36    
  14  0.812278E-01  -2.51050      -103.039       103.039       1173.43       1276.47    
  15  0.919841     -0.835539E-01  -3.42931       3.42931       1197.08       1200.51    
  16  0.275462      -1.28930      -52.9170       52.9170       1205.45       1258.37    
  17  0.704362     -0.350463      -14.3841       14.3841       1199.51       1213.89    
  18  0.896809     -0.108913      -4.47012       4.47012       1195.11       1199.58    
  19  0.166873      -1.79052      -73.4887       73.4887       1162.37       1235.85    
  20  0.927791E-02  -4.68012      -192.087       192.087       1163.53       1355.62    
  21  0.906733     -0.979074E-01  -4.01842       4.01842       1215.35       1219.37    
  22  0.575421     -0.552654      -22.6826       22.6826       1200.47       1223.15    
  23  0.975069     -0.252469E-01  -1.03621       1.03621       1249.61       1250.65    
  24  0.610094     -0.494143      -20.2812       20.2812       1206.93       1227.21    
  25  0.823028     -0.194765      -7.99374       7.99374       1213.11       1221.10    
  26  0.709022     -0.343869      -14.1134       14.1134       1245.83       1259.94    
  27  0.956893     -0.440633E-01  -1.80850       1.80850       1206.96       1208.77    
  28  0.897850E-01  -2.41034      -98.9277       98.9277       1182.60       1281.53    
  29  0.836996     -0.177936      -7.30306       7.30306       1242.94       1250.24    
  30  0.688664     -0.373001      -15.3091       15.3091       1257.10       1272.41    
  31  0.587454     -0.531957      -21.8332       21.8332       1263.56       1285.39    
  32  0.880970     -0.126731      -5.20144       5.20144       1282.31       1287.51    
  33  0.506724     -0.679789      -27.9006       27.9006       1289.19       1317.09    
  34  0.802262     -0.220320      -9.04260       9.04260       1228.26       1237.31    
  35  0.764787E-01  -2.57074      -105.511       105.511       1219.59       1325.10    
  36  0.907101     -0.975014E-01  -4.00176       4.00176       1282.34       1286.34    
  37  0.797350     -0.226461      -9.29468       9.29468       1249.11       1258.41    
  38  0.257375      -1.35722      -55.7045       55.7045       1240.47       1296.18    
  39  0.643190     -0.441315      -18.1129       18.1129       1118.98       1137.09    
  40  0.513768     -0.665984      -27.3340       27.3340       1196.44       1223.77    
  41  0.850264     -0.162208      -6.65753       6.65753       1253.45       1260.11    
  42  0.200819      -1.60535      -65.8886       65.8886       1293.21       1359.10    
  43  0.331940      -1.10280      -45.2624       45.2624       1248.74       1294.00    
  44  0.900490     -0.104816      -4.30197       4.30197       1258.43       1262.73    
  45  0.618957     -0.479719      -19.6892       19.6892       1302.13       1321.82    
  46  0.395756     -0.926956      -38.0452       38.0452       1345.10       1383.15    
  47  0.528166     -0.638345      -26.1996       26.1996       1336.34       1362.54    
  48  0.586635     -0.533352      -21.8904       21.8904       1220.84       1242.73    
  49  0.705559     -0.348765      -14.3144       14.3144       1117.10       1131.42    
loop,thermsimp(1:2)       57   48.8845       12.9188    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270       1191.53         68.39          1.12         39.12          2.10          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1191.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       57
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       58
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      269     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486      -26.0413       26.0413       1093.20       1119.24    
   2  0.175946E-01  -4.04016      -165.821       165.821       1117.10       1282.92    
   3  0.419998     -0.867504      -35.6051       35.6051       1118.98       1154.58    
   4  0.448197E-01  -3.10511      -127.443       127.443       1135.49       1262.93    
   5  0.501784     -0.689586      -28.3027       28.3027       1156.47       1184.78    
   6  0.858173     -0.152949      -6.27752       6.27752       1147.53       1153.81    
   7  0.101932      -2.28345      -93.7200       93.7200       1165.80       1259.52    
   8  0.453268     -0.791273      -32.4763       32.4763       1118.78       1151.25    
   9  0.128092      -2.05501      -84.3438       84.3438       1167.86       1252.20    
  10  0.779644     -0.248918      -10.2163       10.2163       1151.91       1162.13    
  11  0.769943E-01  -2.56402      -105.235       105.235       1160.39       1265.62    
  12  0.140214      -1.96458      -80.6326       80.6326       1178.90       1259.53    
  13  0.571588     -0.559337      -22.9569       22.9569       1195.11       1218.07    
  14  0.455096     -0.787247      -32.3110       32.3110       1197.08       1229.39    
  15  0.594240     -0.520471      -21.3618       21.3618       1206.96       1228.32    
  16  0.833288     -0.182376      -7.48527       7.48527       1184.14       1191.63    
  17  0.807090E-01  -2.51691      -103.302       103.302       1199.51       1302.81    
  18  0.430313     -0.843242      -34.6092       34.6092       1162.82       1197.43    
  19  0.990463     -0.958277E-02 -0.393306      0.393306       1215.35       1215.74    
  20  0.907906     -0.966144E-01  -3.96535       3.96535       1213.11       1217.07    
  21  0.607469     -0.498455      -20.4581       20.4581       1200.47       1220.93    
  22  0.927102     -0.756916E-01  -3.10662       3.10662       1196.44       1199.55    
  23  0.379122     -0.969896      -39.8075       39.8075       1183.34       1223.14    
  24  0.183121E-01  -4.00019      -164.180       164.180       1206.93       1371.11    
  25  0.561966     -0.576313      -23.6537       23.6537       1162.37       1186.02    
  26  0.638772     -0.448208      -18.3958       18.3958       1228.26       1246.66    
  27  0.234202      -1.45157      -59.5769       59.5769       1220.84       1280.41    
  28  0.257221      -1.35782      -55.7290       55.7290       1242.94       1298.67    
  29  0.688379     -0.373416      -15.3261       15.3261       1249.61       1264.94    
  30  0.360237E-01  -3.32358      -136.410       136.410       1205.45       1341.86    
  31  0.849177     -0.163487      -6.71002       6.71002       1249.11       1255.82    
  32  0.324868E-01  -3.42692      -140.651       140.651       1245.83       1386.48    
  33  0.216483E-01  -3.83283      -157.311       157.311       1253.45       1410.76    
  34  0.794095     -0.230552      -9.46255       9.46255       1258.43       1267.89    
  35  0.453180     -0.791465      -32.4842       32.4842       1257.10       1289.59    
  36  0.286278      -1.25079      -51.3364       51.3364       1173.43       1224.77    
  37  0.931500     -0.709590E-01  -2.91238       2.91238       1182.60       1185.51    
  38  0.483424     -0.726861      -29.8326       29.8326       1263.56       1293.39    
  39  0.782276     -0.245547      -10.0780       10.0780       1282.34       1292.42    
  40  0.976661     -0.236156E-01 -0.969257      0.969257       1282.31       1283.28    
  41  0.707981     -0.345338      -14.1737       14.1737       1248.74       1262.91    
  42  0.101993      -2.28285      -93.6953       93.6953       1240.47       1334.17    
  43  0.690974E-01  -2.67224      -109.677       109.677       1289.19       1398.86    
  44  0.767576E-01  -2.56710      -105.362       105.362       1302.13       1407.49    
  45  0.584825     -0.536443      -22.0173       22.0173       1219.59       1241.61    
  46  0.588828     -0.529621      -21.7373       21.7373       1163.53       1185.27    
  47  0.894562     -0.111421      -4.57306       4.57306       1293.21       1297.78    
  48  0.260723      -1.34430      -55.1741       55.1741       1336.34       1391.51    
  49  0.773456E-01  -2.55947      -105.049       105.049       1191.53       1296.58    
loop,thermsimp(1:2)       58   26.0413       165.821    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271       1098.08         68.34          1.16         39.00          2.20          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272       1282.22         68.29          1.18         38.93          2.07          0.04        110.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1098.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       58
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       59
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      271     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01  -2.23854       2.23854       1093.20       1095.44    
   2  0.224221      -1.49512      -61.3644       61.3644       1118.78       1180.14    
   3  0.699642     -0.357186      -14.6600       14.6600       1147.53       1162.19    
   4  0.490916     -0.711482      -29.2014       29.2014       1118.98       1148.18    
   5  0.204251      -1.58840      -65.1930       65.1930       1151.91       1217.10    
   6  0.356522      -1.03136      -42.3302       42.3302       1156.47       1198.80    
   7  0.745938     -0.293113      -12.0302       12.0302       1163.53       1175.56    
   8  0.451533     -0.795107      -32.6337       32.6337       1182.60       1215.23    
   9  0.101038      -2.29226      -94.0815       94.0815       1162.37       1256.45    
  10  0.826978     -0.189977      -7.79725       7.79725       1184.14       1191.94    
  11  0.212337      -1.54958      -63.5996       63.5996       1162.82       1226.42    
  12  0.490540     -0.712248      -29.2329       29.2329       1196.44       1225.67    
  13  0.672078     -0.397381      -16.3097       16.3097       1215.35       1231.66    
  14  0.690580     -0.370223      -15.1951       15.1951       1213.11       1228.30    
  15  0.513190     -0.667108      -27.3802       27.3802       1195.11       1222.49    
  16  0.268393      -1.31530      -53.9841       53.9841       1200.47       1254.46    
  17  0.896898     -0.108813      -4.46602       4.46602       1183.34       1187.80    
  18  0.911953     -0.921674E-01  -3.78283       3.78283       1173.43       1177.21    
  19  0.355703      -1.03366      -42.4245       42.4245       1206.96       1249.38    
  20  0.293818      -1.22479      -50.2693       50.2693       1197.08       1247.35    
  21  0.713392     -0.337724      -13.8612       13.8612       1219.59       1233.45    
  22  0.660627     -0.414565      -17.0150       17.0150       1228.26       1245.28    
  23  0.795097     -0.229291      -9.41080       9.41080       1167.86       1177.27    
  24  0.919484     -0.839428E-01  -3.44527       3.44527       1249.11       1252.56    
  25  0.976382     -0.239014E-01 -0.980986      0.980986       1165.80       1166.78    
  26  0.922195     -0.809991E-01  -3.32445       3.32445       1178.90       1182.22    
  27  0.436062     -0.829970      -34.0645       34.0645       1248.74       1282.80    
  28  0.271848      -1.30251      -53.4591       53.4591       1135.49       1188.95    
  29  0.389360     -0.943252      -38.7140       38.7140       1249.61       1288.32    
  30  0.314178E-01  -3.46038      -142.025       142.025       1160.39       1302.41    
  31  0.545460     -0.606126      -24.8773       24.8773       1258.43       1283.30    
  32  0.925479E-01  -2.38003      -97.6837       97.6837       1220.84       1318.52    
  33  0.971973     -0.284273E-01  -1.16674       1.16674       1117.10       1118.27    
  34  0.403500     -0.907578      -37.2498       37.2498       1282.31       1319.56    
  35  0.392926     -0.934133      -38.3397       38.3397       1257.10       1295.44    
  36  0.718758     -0.330230      -13.5537       13.5537       1282.34       1295.89    
  37  0.746082     -0.292920      -12.0223       12.0223       1263.56       1275.58    
  38  0.353478      -1.03993      -42.6821       42.6821       1191.53       1234.21    
  39  0.843229     -0.170517      -6.99854       6.99854       1293.21       1300.21    
  40  0.388011     -0.946720      -38.8563       38.8563       1242.94       1281.80    
  41  0.969569     -0.309034E-01  -1.26837       1.26837       1199.51       1200.78    
  42  0.441380E-01  -3.12043      -128.072       128.072       1240.47       1368.55    
  43  0.533000     -0.629233      -25.8257       25.8257       1205.45       1231.28    
  44  0.288396      -1.24342      -51.0339       51.0339       1206.93       1257.96    
  45  0.683115     -0.381092      -15.6412       15.6412       1245.83       1261.47    
  46  0.339511      -1.08025      -44.3368       44.3368       1336.34       1380.67    
  47  0.150420E-01  -4.19691      -172.254       172.254       1289.19       1461.44    
  48  0.141026      -1.95881      -80.3956       80.3956       1302.13       1382.53    
  49  0.421666     -0.863541      -35.4424       35.4424       1098.08       1133.52    
loop,thermsimp(1:2)       59   2.23854       61.3644    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273       1310.85         68.38          1.09         39.32          2.08          0.05        110.92
Just calling func    0   0        110.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1310.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       59
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       60
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      272     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808      -43.4268       43.4268       1093.20       1136.63    
   2  0.605757     -0.501276      -20.5739       20.5739       1117.10       1137.67    
   3  0.690633     -0.370146      -15.1919       15.1919       1098.08       1113.27    
   4  0.400665     -0.914628      -37.5392       37.5392       1118.98       1156.52    
   5  0.862165     -0.148309      -6.08705       6.08705       1147.53       1153.62    
   6  0.874011     -0.134662      -5.52695       5.52695       1165.80       1171.33    
   7  0.389525     -0.942826      -38.6965       38.6965       1163.53       1202.23    
   8  0.102225E-01  -4.58317      -188.107       188.107       1173.43       1361.54    
   9  0.102697      -2.27597      -93.4129       93.4129       1167.86       1261.27    
  10  0.818271     -0.200561      -8.23165       8.23165       1118.78       1127.01    
  11  0.888768     -0.117920      -4.83978       4.83978       1178.90       1183.74    
  12  0.539210     -0.617651      -25.3503       25.3503       1183.34       1208.69    
  13  0.317914      -1.14597      -47.0343       47.0343       1135.49       1182.52    
  14  0.437422     -0.826857      -33.9368       33.9368       1184.14       1218.08    
  15  0.925263     -0.776773E-01  -3.18812       3.18812       1156.47       1159.66    
  16  0.422436     -0.861717      -35.3675       35.3675       1199.51       1234.88    
  17  0.965248     -0.353697E-01  -1.45168       1.45168       1182.60       1184.05    
  18  0.771278     -0.259706      -10.6591       10.6591       1151.91       1162.57    
  19  0.902488     -0.102600      -4.21102       4.21102       1195.11       1199.32    
  20  0.512816     -0.667839      -27.4102       27.4102       1196.44       1223.85    
  21  0.915966     -0.877758E-01  -3.60259       3.60259       1162.82       1166.43    
  22  0.612605     -0.490035      -20.1126       20.1126       1213.11       1233.22    
  23  0.323528      -1.12847      -46.3159       46.3159       1205.45       1251.77    
  24  0.206646      -1.57675      -64.7147       64.7147       1215.35       1280.06    
  25  0.481057     -0.731769      -30.0340       30.0340       1219.59       1249.62    
  26  0.287887E-01  -3.54777      -145.612       145.612       1191.53       1337.14    
  27  0.996968     -0.303648E-02 -0.124627      0.124627       1228.26       1228.39    
  28  0.132770      -2.01914      -82.8717       82.8717       1197.08       1279.95    
  29  0.716038     -0.334023      -13.7093       13.7093       1206.96       1220.67    
  30  0.229552      -1.47162      -60.4000       60.4000       1249.11       1309.51    
  31  0.236358      -1.44241      -59.2008       59.2008       1200.47       1259.67    
  32  0.542780     -0.611051      -25.0794       25.0794       1162.37       1187.44    
  33  0.875156     -0.133353      -5.47321       5.47321       1206.93       1212.40    
  34  0.988730     -0.113343E-01 -0.465195      0.465195       1245.83       1246.30    
  35  0.244332      -1.40923      -57.8391       57.8391       1263.56       1321.40    
  36  0.659246     -0.416659      -17.1010       17.1010       1242.94       1260.04    
  37  0.457872     -0.781166      -32.0615       32.0615       1248.74       1280.80    
  38  0.380652E-01  -3.26846      -134.148       134.148       1258.43       1392.57    
  39  0.358843      -1.02487      -42.0638       42.0638       1249.61       1291.67    
  40  0.846233     -0.166960      -6.85255       6.85255       1257.10       1263.95    
  41  0.359308      -1.02358      -42.0107       42.0107       1282.34       1324.35    
  42  0.533329     -0.628617      -25.8004       25.8004       1293.21       1319.01    
  43  0.645289     -0.438058      -17.9792       17.9792       1160.39       1178.37    
  44  0.311850      -1.16523      -47.8247       47.8247       1220.84       1268.66    
  45  0.270084      -1.30902      -53.7263       53.7263       1282.31       1336.03    
  46  0.530313     -0.634287      -26.0331       26.0331       1240.47       1266.51    
  47  0.975874     -0.244213E-01  -1.00233       1.00233       1336.34       1337.34    
  48  0.313811      -1.15896      -47.5675       47.5675       1302.13       1349.70    
  49  0.932688     -0.696844E-01  -2.86006       2.86006       1310.85       1313.71    
loop,thermsimp(1:2)       60   43.4268       20.5739    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274       1236.09         68.33          1.14         38.98          2.37          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1236.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       60
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       61
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      273     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597      -16.8111       16.8111       1098.08       1114.89    
   2  0.718953     -0.329960      -13.5426       13.5426       1118.78       1132.32    
   3  0.454275     -0.789053      -32.3852       32.3852       1093.20       1125.58    
   4  0.253407E-01  -3.67534      -150.847       150.847       1117.10       1267.95    
   5  0.611947     -0.491110      -20.1567       20.1567       1147.53       1167.69    
   6  0.234016      -1.45237      -59.6096       59.6096       1118.98       1178.59    
   7  0.359481E-01  -3.32568      -136.496       136.496       1156.47       1292.97    
   8  0.222118E-01  -3.80713      -156.257       156.257       1151.91       1308.17    
   9  0.905838E-01  -2.40148      -98.5642       98.5642       1162.82       1261.39    
  10  0.791683     -0.233594      -9.58742       9.58742       1165.80       1175.39    
  11  0.557734     -0.583873      -23.9640       23.9640       1160.39       1184.35    
  12  0.936048E-01  -2.36867      -97.2177       97.2177       1135.49       1232.70    
  13  0.431059     -0.841510      -34.5382       34.5382       1178.90       1213.44    
  14  0.225758      -1.48829      -61.0841       61.0841       1182.60       1243.68    
  15  0.275181E-01  -3.59291      -147.464       147.464       1162.37       1309.83    
  16  0.802517     -0.220002      -9.02957       9.02957       1195.11       1204.14    
  17  0.423872     -0.858323      -35.2282       35.2282       1163.53       1198.76    
  18  0.300971      -1.20074      -49.2821       49.2821       1183.34       1232.62    
  19  0.479556     -0.734895      -30.1624       30.1624       1206.93       1237.09    
  20  0.621838     -0.475076      -19.4986       19.4986       1184.14       1203.64    
  21  0.397654     -0.922172      -37.8488       37.8488       1206.96       1244.81    
  22  0.664976     -0.408004      -16.7458       16.7458       1196.44       1213.19    
  23  0.288358      -1.24355      -51.0392       51.0392       1228.26       1279.30    
  24  0.442017     -0.816406      -33.5078       33.5078       1213.11       1246.61    
  25  0.150763E-01  -4.19463      -172.161       172.161       1199.51       1371.67    
  26  0.600886     -0.509350      -20.9053       20.9053       1245.83       1266.74    
  27  0.162927      -1.81446      -74.4709       74.4709       1219.59       1294.06    
  28  0.932743     -0.696251E-01  -2.85763       2.85763       1205.45       1208.31    
  29  0.997186     -0.281799E-02 -0.115659      0.115659       1200.47       1200.59    
  30  0.418339     -0.871463      -35.7675       35.7675       1242.94       1278.71    
  31  0.694800     -0.364132      -14.9451       14.9451       1167.86       1182.81    
  32  0.852711     -0.159334      -6.53958       6.53958       1257.10       1263.64    
  33  0.624847     -0.470249      -19.3005       19.3005       1240.47       1259.77    
  34  0.427649     -0.849453      -34.8642       34.8642       1220.84       1255.70    
  35  0.149871      -1.89798      -77.8991       77.8991       1197.08       1274.98    
  36  0.563430     -0.573713      -23.5469       23.5469       1215.35       1238.90    
  37  0.860100     -0.150706      -6.18545       6.18545       1248.74       1254.92    
  38  0.867090E-01  -2.44520      -100.358       100.358       1249.61       1349.97    
  39  0.847848     -0.165054      -6.77431       6.77431       1249.11       1255.89    
  40  0.782599E-01  -2.54772      -104.566       104.566       1310.85       1415.42    
  41  0.697889E-01  -2.66228      -109.268       109.268       1293.21       1402.48    
  42  0.422765     -0.860939      -35.3356       35.3356       1263.56       1298.90    
  43  0.158365      -1.84286      -75.6365       75.6365       1282.34       1357.98    
  44  0.518935     -0.655976      -26.9233       26.9233       1282.31       1309.23    
  45  0.430406     -0.843027      -34.6004       34.6004       1191.53       1226.13    
  46  0.639805     -0.446592      -18.3295       18.3295       1336.34       1354.67    
  47  0.830453E-01  -2.48837      -102.130       102.130       1302.13       1404.26    
  48  0.639384     -0.447250      -18.3565       18.3565       1173.43       1191.79    
  49  0.833791     -0.181773      -7.46052       7.46052       1236.09       1243.55    
loop,thermsimp(1:2)       61   16.8111       13.5426    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275       1274.82         68.29          1.13         38.80          2.23          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1274.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       61
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       62
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      274     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.581477      0.581477       1098.08       1098.66    
   2  0.420912     -0.865330      -35.5158       35.5158       1093.20       1128.71    
   3  0.617210     -0.482545      -19.8052       19.8052       1118.78       1138.58    
   4  0.787846     -0.238453      -9.78686       9.78686       1147.53       1157.32    
   5  0.608770     -0.496315      -20.3703       20.3703       1165.80       1186.17    
   6  0.925975     -0.769083E-01  -3.15655       3.15655       1118.98       1122.13    
   7  0.545822     -0.605462      -24.8500       24.8500       1167.86       1192.71    
   8  0.240142      -1.42653      -58.5490       58.5490       1160.39       1218.94    
   9  0.800257     -0.222822      -9.14530       9.14530       1173.43       1182.57    
  10  0.250149      -1.38570      -56.8734       56.8734       1163.53       1220.40    
  11  0.814044     -0.205741      -8.44426       8.44426       1200.47       1208.92    
  12  0.897552     -0.108084      -4.43610       4.43610       1184.14       1188.58    
  13  0.807530     -0.213775      -8.77400       8.77400       1195.11       1203.89    
  14  0.369031     -0.996874      -40.9148       40.9148       1205.45       1246.37    
  15  0.892620     -0.113594      -4.66226       4.66226       1196.44       1201.10    
  16  0.992736     -0.729054E-02 -0.299226      0.299226       1178.90       1179.20    
  17  0.264259      -1.33083      -54.6212       54.6212       1191.53       1246.15    
  18  0.164586      -1.80432      -74.0550       74.0550       1183.34       1257.39    
  19  0.594739     -0.519633      -21.3273       21.3273       1135.49       1156.81    
  20  0.766319     -0.266156      -10.9239       10.9239       1206.93       1217.85    
  21  0.392663     -0.934804      -38.3672       38.3672       1215.35       1253.72    
  22  0.900399     -0.104917      -4.30613       4.30613       1236.09       1240.39    
  23  0.853164E-01  -2.46139      -101.023       101.023       1182.60       1283.62    
  24  0.753181     -0.283450      -11.6337       11.6337       1206.96       1218.59    
  25  0.801958     -0.220699      -9.05815       9.05815       1213.11       1222.16    
  26  0.840206     -0.174108      -7.14594       7.14594       1248.74       1255.88    
  27  0.899787     -0.105597      -4.33404       4.33404       1220.84       1225.17    
  28  0.555629     -0.587654      -24.1191       24.1191       1249.11       1273.23    
  29  0.117481E-01  -4.44406      -182.398       182.398       1240.47       1422.87    
  30  0.228476      -1.47632      -60.5928       60.5928       1162.82       1223.42    
  31  0.121877      -2.10474      -86.3852       86.3852       1257.10       1343.49    
  32  0.475375     -0.743652      -30.5218       30.5218       1245.83       1276.35    
  33  0.208734      -1.56669      -64.3019       64.3019       1117.10       1181.40    
  34  0.680231     -0.385322      -15.8148       15.8148       1197.08       1212.89    
  35  0.211647      -1.55284      -63.7332       63.7332       1242.94       1306.67    
  36  0.982763     -0.173870E-01 -0.713618      0.713618       1228.26       1228.98    
  37  0.819904     -0.198568      -8.14985       8.14985       1156.47       1164.62    
  38  0.282339      -1.26465      -51.9051       51.9051       1219.59       1271.50    
  39  0.391986     -0.936529      -38.4380       38.4380       1263.56       1302.00    
  40  0.218050      -1.52303      -62.5099       62.5099       1151.91       1214.42    
  41  0.236244      -1.44289      -59.2207       59.2207       1282.31       1341.53    
  42  0.544673     -0.607570      -24.9365       24.9365       1162.37       1187.30    
  43  0.721937     -0.325818      -13.3726       13.3726       1249.61       1262.98    
  44  0.649728     -0.431202      -17.6979       17.6979       1336.34       1354.03    
  45  0.641823     -0.443443      -18.2003       18.2003       1282.34       1300.54    
  46  0.597293     -0.515347      -21.1514       21.1514       1199.51       1220.66    
  47  0.467405     -0.760558      -31.2157       31.2157       1293.21       1324.42    
  48  0.676900     -0.390232      -16.0163       16.0163       1302.13       1318.15    
  49  0.925913     -0.769750E-01  -3.15929       3.15929       1274.82       1277.97    
loop,thermsimp(1:2)       62  0.581477       35.5158    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276       1165.68         68.33          1.11         39.20          2.12          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1165.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       62
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       63
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      275     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.621044      0.621044       1098.08       1098.70    
   2  0.760415     -0.273890      -11.2413       11.2413       1118.98       1130.22    
   3  0.328612      -1.11288      -45.6759       45.6759       1093.20       1138.87    
   4  0.164880      -1.80254      -73.9817       73.9817       1118.78       1192.76    
   5  0.706606     -0.347282      -14.2535       14.2535       1135.49       1149.74    
   6  0.832070     -0.183839      -7.54533       7.54533       1147.53       1155.08    
   7  0.231505      -1.46315      -60.0523       60.0523       1156.47       1216.53    
   8  0.802671E-01  -2.52240      -103.527       103.527       1178.90       1282.43    
   9  0.116349      -2.15116      -88.2903       88.2903       1117.10       1205.39    
  10  0.874222     -0.134421      -5.51706       5.51706       1173.43       1178.95    
  11  0.729333     -0.315625      -12.9542       12.9542       1165.80       1178.75    
  12  0.301675      -1.19841      -49.1863       49.1863       1162.37       1211.55    
  13  0.496896     -0.699375      -28.7045       28.7045       1184.14       1212.84    
  14  0.692174     -0.367918      -15.1005       15.1005       1167.86       1182.96    
  15  0.717718     -0.331678      -13.6131       13.6131       1196.44       1210.05    
  16  0.867334E-01  -2.44492      -100.347       100.347       1195.11       1295.46    
  17  0.762934     -0.270584      -11.1056       11.1056       1200.47       1211.58    
  18  0.966741     -0.338246E-01  -1.38827       1.38827       1197.08       1198.47    
  19  0.375386     -0.979801      -40.2141       40.2141       1151.91       1192.12    
  20  0.878716     -0.129293      -5.30659       5.30659       1206.93       1212.24    
  21  0.238969      -1.43142      -58.7500       58.7500       1206.96       1265.71    
  22  0.939578     -0.623249E-01  -2.55801       2.55801       1160.39       1162.95    
  23  0.694828     -0.364091      -14.9434       14.9434       1163.53       1178.47    
  24  0.869149     -0.140241      -5.75590       5.75590       1199.51       1205.27    
  25  0.310010      -1.17115      -48.0677       48.0677       1213.11       1261.17    
  26  0.831753     -0.184219      -7.56093       7.56093       1162.82       1170.38    
  27  0.621050     -0.476344      -19.5506       19.5506       1220.84       1240.39    
  28  0.902274     -0.102837      -4.22076       4.22076       1228.26       1232.48    
  29  0.341345      -1.07486      -44.1157       44.1157       1236.09       1280.20    
  30  0.718647     -0.330385      -13.5600       13.5600       1191.53       1205.09    
  31  0.489532     -0.714305      -29.3173       29.3173       1205.45       1234.77    
  32  0.387793     -0.947282      -38.8794       38.8794       1215.35       1254.23    
  33  0.576785     -0.550285      -22.5854       22.5854       1248.74       1271.32    
  34  0.454048     -0.789552      -32.4057       32.4057       1183.34       1215.74    
  35  0.532728     -0.629744      -25.8467       25.8467       1249.61       1275.46    
  36  0.459832     -0.776895      -31.8862       31.8862       1219.59       1251.48    
  37  0.784910     -0.242187      -9.94008       9.94008       1249.11       1259.05    
  38  0.842297     -0.171622      -7.04390       7.04390       1245.83       1252.87    
  39  0.967556     -0.329823E-01  -1.35370       1.35370       1274.82       1276.17    
  40  0.126414      -2.06819      -84.8850       84.8850       1182.60       1267.48    
  41  0.407002     -0.898938      -36.8952       36.8952       1282.34       1319.23    
  42  0.903435     -0.101551      -4.16799       4.16799       1263.56       1267.73    
  43  0.430116     -0.843701      -34.6281       34.6281       1242.94       1277.57    
  44  0.675859     -0.391771      -16.0795       16.0795       1302.13       1318.21    
  45  0.444470     -0.810872      -33.2807       33.2807       1293.21       1326.49    
  46  0.728661     -0.316547      -12.9921       12.9921       1282.31       1295.30    
  47  0.143617      -1.94060      -79.6483       79.6483       1257.10       1336.75    
  48  0.729467E-01  -2.61803      -107.452       107.452       1336.34       1443.79    
  49  0.720547     -0.327745      -13.4517       13.4517       1165.68       1179.13    
loop,thermsimp(1:2)       63  0.621044       11.2413    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277       1109.36         68.35          1.16         39.02          2.01          0.05        110.59
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278       1266.02         68.37          1.15         38.94          2.28          0.05        110.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1109.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       63
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       64
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      277     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01  -1.49157       1.49157       1098.08       1099.57    
   2  0.186231      -1.68077      -68.9838       68.9838       1118.98       1187.96    
   3  0.127308      -2.06115      -84.5958       84.5958       1093.20       1177.79    
   4  0.305661      -1.18528      -48.6475       48.6475       1135.49       1184.13    
   5  0.685804     -0.377164      -15.4800       15.4800       1147.53       1163.01    
   6  0.713250     -0.337923      -13.8694       13.8694       1160.39       1174.26    
   7  0.562604     -0.575180      -23.6072       23.6072       1162.82       1186.43    
   8  0.410540     -0.890283      -36.5400       36.5400       1163.53       1200.07    
   9  0.667633     -0.404017      -16.5821       16.5821       1165.80       1182.38    
  10  0.111237      -2.19609      -90.1343       90.1343       1173.43       1263.56    
  11  0.987129     -0.129550E-01 -0.531713      0.531713       1165.68       1166.21    
  12  0.525481     -0.643442      -26.4088       26.4088       1167.86       1194.27    
  13  0.740553     -0.300358      -12.3276       12.3276       1151.91       1164.24    
  14  0.456748E-01  -3.08621      -126.668       126.668       1118.78       1245.44    
  15  0.831796     -0.184168      -7.55884       7.55884       1197.08       1204.64    
  16  0.798422     -0.225118      -9.23955       9.23955       1191.53       1200.77    
  17  0.985535     -0.145708E-01 -0.598029      0.598029       1199.51       1200.11    
  18  0.323340      -1.12905      -46.3397       46.3397       1117.10       1163.44    
  19  0.745026     -0.294336      -12.0805       12.0805       1196.44       1208.52    
  20  0.711871     -0.339858      -13.9488       13.9488       1162.37       1176.31    
  21  0.232875      -1.45725      -59.8102       59.8102       1200.47       1260.28    
  22  0.118192      -2.13545      -87.6454       87.6454       1206.93       1294.57    
  23  0.310641      -1.16912      -47.9841       47.9841       1184.14       1232.12    
  24  0.220899      -1.51005      -61.9772       61.9772       1183.34       1245.31    
  25  0.487797     -0.717856      -29.4630       29.4630       1156.47       1185.94    
  26  0.278848      -1.27709      -52.4156       52.4156       1228.26       1280.68    
  27  0.159355      -1.83662      -75.3805       75.3805       1205.45       1280.83    
  28  0.473156     -0.748329      -30.7137       30.7137       1220.84       1251.55    
  29  0.358980      -1.02449      -42.0481       42.0481       1219.59       1261.64    
  30  0.873266     -0.135515      -5.56194       5.56194       1245.83       1251.39    
  31  0.168201      -1.78260      -73.1632       73.1632       1215.35       1288.51    
  32  0.492581     -0.708096      -29.0624       29.0624       1249.11       1278.17    
  33  0.878329     -0.129734      -5.32470       5.32470       1213.11       1218.43    
  34  0.266147      -1.32371      -54.3291       54.3291       1206.96       1261.29    
  35  0.510485     -0.672394      -27.5971       27.5971       1182.60       1210.20    
  36  0.810074     -0.210630      -8.64490       8.64490       1263.56       1272.21    
  37  0.950614     -0.506467E-01  -2.07870       2.07870       1248.74       1250.81    
  38  0.329006      -1.11168      -45.6268       45.6268       1249.61       1295.24    
  39  0.934893E-01  -2.36991      -97.2684       97.2684       1274.82       1372.08    
  40  0.686671     -0.375900      -15.4281       15.4281       1242.94       1258.37    
  41  0.888060     -0.118716      -4.87248       4.87248       1236.09       1240.96    
  42  0.749618     -0.288192      -11.8283       11.8283       1178.90       1190.73    
  43  0.433754     -0.835279      -34.2824       34.2824       1282.31       1316.59    
  44  0.630341     -0.461494      -18.9411       18.9411       1195.11       1214.05    
  45  0.569388     -0.563194      -23.1152       23.1152       1302.13       1325.25    
  46  0.965872     -0.347242E-01  -1.42519       1.42519       1282.34       1283.76    
  47  0.797995     -0.225653      -9.26150       9.26150       1293.21       1302.47    
  48  0.716091     -0.333948      -13.7062       13.7062       1257.10       1270.81    
  49  0.339849      -1.07925      -44.2959       44.2959       1109.36       1153.65    
loop,thermsimp(1:2)       64   1.49157       68.9838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279       1302.87         68.43          1.11         39.21          1.99          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1302.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       64
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       65
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      278     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726      -35.1627       35.1627       1098.08       1133.24    
   2  0.350039      -1.04971      -43.0833       43.0833       1109.36       1152.44    
   3  0.872911     -0.135921      -5.57863       5.57863       1147.53       1153.11    
   4  0.829005     -0.187529      -7.69675       7.69675       1117.10       1124.80    
   5  0.201827      -1.60035      -65.6831       65.6831       1151.91       1217.59    
   6  0.735791     -0.306809      -12.5924       12.5924       1165.68       1178.27    
   7  0.985788     -0.143135E-01 -0.587469      0.587469       1160.39       1160.98    
   8  0.962727     -0.379858E-01  -1.55906       1.55906       1162.37       1163.92    
   9  0.796954     -0.226958      -9.31508       9.31508       1093.20       1102.51    
  10  0.563149     -0.574211      -23.5674       23.5674       1165.80       1189.37    
  11  0.776846     -0.252513      -10.3639       10.3639       1135.49       1145.85    
  12  0.921010     -0.822839E-01  -3.37718       3.37718       1156.47       1159.85    
  13  0.884938     -0.122238      -5.01704       5.01704       1162.82       1167.84    
  14  0.850974     -0.161373      -6.62325       6.62325       1118.98       1125.60    
  15  0.391065     -0.938882      -38.5346       38.5346       1178.90       1217.43    
  16  0.150921      -1.89100      -77.6125       77.6125       1167.86       1245.47    
  17  0.295162      -1.22023      -50.0820       50.0820       1163.53       1213.61    
  18  0.662567     -0.411634      -16.8947       16.8947       1199.51       1216.40    
  19  0.893994     -0.112056      -4.59912       4.59912       1191.53       1196.13    
  20  0.103282      -2.27029      -93.1798       93.1798       1197.08       1290.26    
  21  0.416341     -0.876251      -35.9640       35.9640       1196.44       1232.40    
  22  0.986101E-01  -2.31658      -95.0797       95.0797       1182.60       1277.68    
  23  0.617817E-01  -2.78415      -114.270       114.270       1195.11       1309.38    
  24  0.371945     -0.989010      -40.5920       40.5920       1213.11       1253.70    
  25  0.884755     -0.122444      -5.02549       5.02549       1184.14       1189.17    
  26  0.584237     -0.537449      -22.0586       22.0586       1236.09       1258.15    
  27  0.239981      -1.42719      -58.5765       58.5765       1183.34       1241.91    
  28  0.106477      -2.23982      -91.9292       91.9292       1118.78       1210.71    
  29  0.142954      -1.94523      -79.8383       79.8383       1248.74       1328.57    
  30  0.802284     -0.220292      -9.04147       9.04147       1245.83       1254.87    
  31  0.373571     -0.984648      -40.4130       40.4130       1220.84       1261.25    
  32  0.617091     -0.482739      -19.8131       19.8131       1242.94       1262.75    
  33  0.813617     -0.206266      -8.46579       8.46579       1200.47       1208.94    
  34  0.219787E-01  -3.81768      -156.689       156.689       1206.96       1363.65    
  35  0.398995     -0.918807      -37.7107       37.7107       1219.59       1257.30    
  36  0.906985     -0.976296E-01  -4.00702       4.00702       1173.43       1177.44    
  37  0.259146E-01  -3.65295      -149.928       149.928       1257.10       1407.03    
  38  0.347543      -1.05687      -43.3771       43.3771       1263.56       1306.94    
  39  0.879549     -0.128346      -5.26770       5.26770       1249.11       1254.38    
  40  0.618015     -0.481242      -19.7516       19.7516       1228.26       1248.02    
  41  0.173348      -1.75246      -71.9262       71.9262       1205.45       1277.38    
  42  0.324418      -1.12572      -46.2031       46.2031       1282.34       1328.54    
  43  0.426503     -0.852135      -34.9743       34.9743       1215.35       1250.32    
  44  0.672650     -0.396530      -16.2748       16.2748       1206.93       1223.20    
  45  0.500711     -0.691727      -28.3906       28.3906       1249.61       1278.00    
  46  0.457446     -0.782097      -32.0997       32.0997       1293.21       1325.31    
  47  0.408507     -0.895245      -36.7436       36.7436       1282.31       1319.05    
  48  0.649058     -0.432234      -17.7402       17.7402       1302.13       1319.87    
  49  0.275220      -1.29018      -52.9531       52.9531       1302.87       1355.82    
loop,thermsimp(1:2)       65   35.1627       43.0833    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280       1173.66         68.31          1.14         38.98          2.00          0.05        110.48
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1173.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       65
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       66
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      279     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220      -30.6272       30.6272       1093.20       1123.83    
   2  0.162949E-01  -4.11691      -168.971       168.971       1117.10       1286.07    
   3  0.560104     -0.579632      -23.7899       23.7899       1118.98       1142.77    
   4  0.583629     -0.538490      -22.1013       22.1013       1098.08       1120.18    
   5  0.794243     -0.230366      -9.45493       9.45493       1135.49       1144.94    
   6  0.183626E-01  -3.99744      -164.067       164.067       1109.36       1273.43    
   7  0.642495     -0.442397      -18.1573       18.1573       1147.53       1165.69    
   8  0.611061E-02  -5.09773      -209.227       209.227       1156.47       1365.70    
   9  0.974115E-01  -2.32881      -95.5816       95.5816       1160.39       1255.97    
  10  0.817249E-01  -2.50440      -102.788       102.788       1162.37       1265.15    
  11  0.644422     -0.439401      -18.0344       18.0344       1162.82       1180.86    
  12  0.378181     -0.972383      -39.9096       39.9096       1173.43       1213.34    
  13  0.105422      -2.24978      -92.3379       92.3379       1165.68       1258.01    
  14  0.713647     -0.337367      -13.8466       13.8466       1184.14       1197.99    
  15  0.602100     -0.507333      -20.8225       20.8225       1165.80       1186.62    
  16  0.746624     -0.292194      -11.9925       11.9925       1191.53       1203.52    
  17  0.687673     -0.374442      -15.3683       15.3683       1200.47       1215.84    
  18  0.356323      -1.03192      -42.3531       42.3531       1118.78       1161.13    
  19  0.631203     -0.460128      -18.8851       18.8851       1163.53       1182.41    
  20  0.348432      -1.05431      -43.2723       43.2723       1199.51       1242.78    
  21  0.200848      -1.60521      -65.8826       65.8826       1178.90       1244.78    
  22  0.863860     -0.146345      -6.00644       6.00644       1151.91       1157.92    
  23  0.278415      -1.27864      -52.4794       52.4794       1206.93       1259.41    
  24  0.871038     -0.138069      -5.66679       5.66679       1196.44       1202.11    
  25  0.581010     -0.542987      -22.2859       22.2859       1183.34       1205.62    
  26  0.960519     -0.402815E-01  -1.65328       1.65328       1167.86       1169.51    
  27  0.104828      -2.25543      -92.5698       92.5698       1228.26       1320.83    
  28  0.907238     -0.973501E-01  -3.99555       3.99555       1215.35       1219.34    
  29  0.685005     -0.378330      -15.5278       15.5278       1213.11       1228.63    
  30  0.239566E-01  -3.73151      -153.153       153.153       1249.11       1402.26    
  31  0.643900     -0.440211      -18.0676       18.0676       1245.83       1263.90    
  32  0.526819     -0.640898      -26.3044       26.3044       1219.59       1245.90    
  33  0.463387     -0.769192      -31.5700       31.5700       1236.09       1267.66    
  34  0.847158E-01  -2.46845      -101.313       101.313       1220.84       1322.15    
  35  0.134368E-01  -4.30976      -176.886       176.886       1242.94       1419.83    
  36  0.141068      -1.95851      -80.3833       80.3833       1205.45       1285.84    
  37  0.239867      -1.42767      -58.5960       58.5960       1182.60       1241.19    
  38  0.317049      -1.14870      -47.1461       47.1461       1249.61       1296.76    
  39  0.925847     -0.770459E-01  -3.16220       3.16220       1197.08       1200.24    
  40  0.939258     -0.626649E-01  -2.57196       2.57196       1263.56       1266.13    
  41  0.111598      -2.19286      -90.0016       90.0016       1195.11       1285.11    
  42  0.357545      -1.02849      -42.2125       42.2125       1282.31       1324.52    
  43  0.902640     -0.102432      -4.20412       4.20412       1302.13       1306.34    
  44  0.914421     -0.894640E-01  -3.67188       3.67188       1293.21       1296.88    
  45  0.320420      -1.13812      -46.7120       46.7120       1282.34       1329.05    
  46  0.341333      -1.07490      -44.1171       44.1171       1248.74       1292.85    
  47  0.509727     -0.673879      -27.6581       27.6581       1302.87       1330.52    
  48  0.130581E-02  -6.64093      -272.564       272.564       1206.96       1479.52    
  49  0.105413      -2.24987      -92.3414       92.3414       1173.66       1266.00    
loop,thermsimp(1:2)       66   30.6272       168.971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281       1123.30         68.44          1.13         39.12          2.22          0.05        110.96
Just calling func    0   0        110.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282       1652.46         68.46          1.11         39.01          2.15          0.05        110.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    1123.3        3.112     -3.420      4.685     -102.6     0.3565    
                     -0.1967     0.6267     -99.70      4.739      1.609    

                       3.262     -1.279      1.893      6750.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.440      0.000      0.000      7000.      260.7    

                      -1.306     -6.799     -7.659     -7.531      9.491    

                      -4.355     -3.949      4833.      0.000      8306.    



                       1716.      6845.      7439.      2982.      2001.    

                       4592.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.976     -1.596     -2.213     -2.136    -0.3807    

                     -0.3252      9.601      8.543    -0.1575E+05 -4.655    

                      0.2935E-02 -2.409      9.029      9.089    -0.1969E+05



                      -6.000     0.2712    -0.4648E-01  9.006      8.976    

                     -0.1944E+05 -6.000     -1.084    -0.7289      9.662    

                       9.411    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1123.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       66
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       67
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      281     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780      -13.9867       13.9867       1098.08       1112.07    
   2  0.492413     -0.708438      -29.0765       29.0765       1093.20       1122.27    
   3  0.156563      -1.85430      -76.1061       76.1061       1118.98       1195.08    
   4  0.185270      -1.68594      -69.1963       69.1963       1135.49       1204.68    
   5  0.685983     -0.376903      -15.4693       15.4693       1151.91       1167.38    
   6  0.518581     -0.656659      -26.9513       26.9513       1118.78       1145.73    
   7  0.430667     -0.842421      -34.5756       34.5756       1147.53       1182.11    
   8  0.748228     -0.290047      -11.9044       11.9044       1167.86       1179.77    
   9  0.348167      -1.05507      -43.3035       43.3035       1162.82       1206.13    
  10  0.281980E-01  -3.56850      -146.462       146.462       1163.53       1309.99    
  11  0.670749     -0.399360      -16.3910       16.3910       1165.80       1182.19    
  12  0.225031      -1.49152      -61.2165       61.2165       1184.14       1245.36    
  13  0.258016      -1.35474      -55.6025       55.6025       1197.08       1252.68    
  14  0.122388      -2.10056      -86.2133       86.2133       1196.44       1282.65    
  15  0.556210     -0.586609      -24.0763       24.0763       1191.53       1215.61    
  16  0.938933     -0.630108E-01  -2.58616       2.58616       1183.34       1185.92    
  17  0.440352     -0.820180      -33.6627       33.6627       1173.43       1207.09    
  18  0.779048     -0.249683      -10.2478       10.2478       1200.47       1210.72    
  19  0.929725     -0.728667E-01  -2.99067       2.99067       1215.35       1218.34    
  20  0.330740      -1.10642      -45.4111       45.4111       1213.11       1258.52    
  21  0.214890      -1.53763      -63.1090       63.1090       1182.60       1245.71    
  22  0.363221      -1.01274      -41.5661       41.5661       1199.51       1241.08    
  23  0.681309     -0.383740      -15.7499       15.7499       1178.90       1194.65    
  24  0.107313      -2.23200      -91.6083       91.6083       1219.59       1311.20    
  25  0.622524     -0.473973      -19.4533       19.4533       1160.39       1179.84    
  26  0.532378     -0.630402      -25.8736       25.8736       1165.68       1191.55    
  27  0.298562      -1.20878      -49.6120       49.6120       1206.93       1256.54    
  28  0.432099     -0.839100      -34.4393       34.4393       1245.83       1280.27    
  29  0.243978      -1.41068      -57.8986       57.8986       1162.37       1220.26    
  30  0.581243     -0.542587      -22.2694       22.2694       1173.66       1195.93    
  31  0.897127E-01  -2.41114      -98.9607       98.9607       1263.56       1362.52    
  32  0.738124     -0.303644      -12.4625       12.4625       1236.09       1248.55    
  33  0.462727     -0.770619      -31.6286       31.6286       1109.36       1140.99    
  34  0.984641E-01  -2.31806      -95.1405       95.1405       1195.11       1290.25    
  35  0.641923     -0.443287      -18.1939       18.1939       1205.45       1223.65    
  36  0.334628      -1.09474      -44.9314       44.9314       1117.10       1162.03    
  37  0.482851     -0.728048      -29.8813       29.8813       1248.74       1278.62    
  38  0.826279     -0.190822      -7.83194       7.83194       1249.61       1257.44    
  39  0.966417     -0.341596E-01  -1.40202       1.40202       1293.21       1294.61    
  40  0.236833      -1.44040      -59.1185       59.1185       1302.13       1361.25    
  41  0.274744      -1.29192      -53.0242       53.0242       1228.26       1281.29    
  42  0.310307      -1.17019      -48.0283       48.0283       1220.84       1268.87    
  43  0.697298     -0.360543      -14.7978       14.7978       1282.31       1297.10    
  44  0.239072      -1.43099      -58.7323       58.7323       1282.34       1341.07    
  45  0.809729     -0.211055      -8.66236       8.66236       1302.87       1311.53    
  46  0.651880     -0.427895      -17.5621       17.5621       1156.47       1174.04    
  47  0.515020     -0.663550      -27.2341       27.2341       1249.11       1276.35    
  48  0.359059      -1.02427      -42.0392       42.0392       1242.94       1284.98    
  49  0.516010E-02  -5.26680      -216.166       216.166       1123.30       1339.46    
loop,thermsimp(1:2)       67   13.9867       29.0765    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283       1052.93         68.38          1.11         39.32          1.92          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284       1619.17         68.32          1.09         39.09          2.32          0.05        110.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1052.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       67
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       68
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      283     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089      -21.3050       21.3050       1098.08       1119.39    
   2  0.204294      -1.58819      -65.1844       65.1844       1093.20       1158.38    
   3  0.902141     -0.102985      -4.22680       4.22680       1109.36       1113.59    
   4  0.317306      -1.14789      -47.1130       47.1130       1118.78       1165.89    
   5  0.914914E-01  -2.39151      -98.1550       98.1550       1117.10       1215.26    
   6  0.362439      -1.01490      -41.6546       41.6546       1151.91       1193.56    
   7  0.284546      -1.25686      -51.5854       51.5854       1156.47       1208.06    
   8  0.752727     -0.284053      -11.6584       11.6584       1167.86       1179.52    
   9  0.972148     -0.282475E-01  -1.15936       1.15936       1160.39       1161.55    
  10  0.312417      -1.16342      -47.7502       47.7502       1147.53       1195.28    
  11  0.772549E-01  -2.56064      -105.097       105.097       1165.80       1270.90    
  12  0.190763      -1.65672      -67.9971       67.9971       1183.34       1251.33    
  13  0.829036     -0.187492      -7.69525       7.69525       1165.68       1173.37    
  14  0.309766      -1.17194      -48.1000       48.1000       1178.90       1227.00    
  15  0.691616     -0.368724      -15.1336       15.1336       1118.98       1134.11    
  16  0.177510      -1.72873      -70.9524       70.9524       1173.66       1244.61    
  17  0.848561     -0.164214      -6.73984       6.73984       1135.49       1142.23    
  18  0.464945     -0.765836      -31.4323       31.4323       1162.82       1194.26    
  19  0.626682     -0.467316      -19.1801       19.1801       1173.43       1192.61    
  20  0.451266     -0.795699      -32.6580       32.6580       1200.47       1233.13    
  21  0.161179E-01  -4.12783      -169.419       169.419       1191.53       1360.95    
  22  0.848853     -0.163869      -6.72571       6.72571       1215.35       1222.07    
  23  0.565946     -0.569256      -23.3640       23.3640       1162.37       1185.73    
  24  0.798567     -0.224937      -9.23210       9.23210       1205.45       1214.69    
  25  0.282371      -1.26453      -51.9004       51.9004       1199.51       1251.41    
  26  0.887219     -0.119663      -4.91136       4.91136       1184.14       1189.05    
  27  0.311981      -1.16481      -47.8075       47.8075       1182.60       1230.41    
  28  0.454937     -0.787596      -32.3254       32.3254       1236.09       1268.41    
  29  0.200774E-01  -3.90816      -160.403       160.403       1197.08       1357.48    
  30  0.549692     -0.598397      -24.5600       24.5600       1206.93       1231.49    
  31  0.928164     -0.745470E-01  -3.05964       3.05964       1249.61       1252.67    
  32  0.876026     -0.132360      -5.43245       5.43245       1213.11       1218.54    
  33  0.360538      -1.02016      -41.8704       41.8704       1220.84       1262.71    
  34  0.810484     -0.210124      -8.62413       8.62413       1249.11       1257.74    
  35  0.350387      -1.04872      -43.0426       43.0426       1248.74       1291.78    
  36  0.609257     -0.495514      -20.3374       20.3374       1245.83       1266.17    
  37  0.847473     -0.165497      -6.79249       6.79249       1228.26       1235.06    
  38  0.459433     -0.777763      -31.9218       31.9218       1196.44       1228.36    
  39  0.213778      -1.54282      -63.3220       63.3220       1242.94       1306.26    
  40  0.983077     -0.170677E-01 -0.700509      0.700509       1195.11       1195.81    
  41  0.719533     -0.329153      -13.5094       13.5094       1293.21       1306.72    
  42  0.317292      -1.14793      -47.1148       47.1148       1282.31       1329.42    
  43  0.300670      -1.20174      -49.3232       49.3232       1163.53       1212.85    
  44  0.486388     -0.720748      -29.5817       29.5817       1219.59       1249.17    
  45  0.309580      -1.17254      -48.1246       48.1246       1302.87       1350.99    
  46  0.111802      -2.19103      -89.9267       89.9267       1123.30       1213.22    
  47  0.913484     -0.904897E-01  -3.71398       3.71398       1282.34       1286.05    
  48  0.438377     -0.824676      -33.8473       33.8473       1302.13       1335.98    
  49  0.773114     -0.257329      -10.5616       10.5616       1052.93       1063.49    
loop,thermsimp(1:2)       68   21.3050       65.1844    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285       1395.33         68.30          1.13         38.98          2.06          0.05        110.53
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1395.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       68
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       69
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      284     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560      -33.6373       33.6373       1052.93       1086.57    
   2  0.752309     -0.284608      -11.6812       11.6812       1109.36       1121.04    
   3  0.209108      -1.56490      -64.2285       64.2285       1098.08       1162.31    
   4  0.842922     -0.170881      -7.01350       7.01350       1118.98       1125.99    
   5  0.161148      -1.82543      -74.9213       74.9213       1135.49       1210.41    
   6  0.601748     -0.507917      -20.8465       20.8465       1093.20       1114.04    
   7  0.890912     -0.115510      -4.74088       4.74088       1160.39       1165.13    
   8  0.631939     -0.458963      -18.8373       18.8373       1118.78       1137.61    
   9  0.144759E-01  -4.23527      -173.829       173.829       1165.68       1339.51    
  10  0.653698     -0.425110      -17.4478       17.4478       1167.86       1185.31    
  11  0.401463     -0.912639      -37.4575       37.4575       1162.37       1199.82    
  12  0.906126     -0.985765E-01  -4.04589       4.04589       1184.14       1188.19    
  13  0.480601E-01  -3.03530      -124.578       124.578       1173.43       1298.01    
  14  0.264260      -1.33082      -54.6210       54.6210       1151.91       1206.53    
  15  0.586033     -0.534379      -21.9326       21.9326       1162.82       1184.76    
  16  0.323072      -1.12988      -46.3737       46.3737       1147.53       1193.91    
  17  0.785147     -0.241884      -9.92766       9.92766       1195.11       1205.04    
  18  0.139165      -1.97210      -80.9410       80.9410       1156.47       1237.41    
  19  0.105818E-01  -4.54862      -186.689       186.689       1163.53       1350.22    
  20  0.896943     -0.108763      -4.46399       4.46399       1123.30       1127.76    
  21  0.854239     -0.157544      -6.46608       6.46608       1205.45       1211.92    
  22  0.566003     -0.569157      -23.3600       23.3600       1117.10       1140.46    
  23  0.566387     -0.568477      -23.3321       23.3321       1213.11       1236.44    
  24  0.414905     -0.879707      -36.1059       36.1059       1215.35       1251.45    
  25  0.173772      -1.75001      -71.8260       71.8260       1178.90       1250.72    
  26  0.884308E-01  -2.42554      -99.5515       99.5515       1196.44       1295.99    
  27  0.417457     -0.873573      -35.8541       35.8541       1182.60       1218.45    
  28  0.334615      -1.09477      -44.9329       44.9329       1206.93       1251.86    
  29  0.706024E-01  -2.65069      -108.793       108.793       1200.47       1309.26    
  30  0.996422     -0.358418E-02 -0.147106      0.147106       1228.26       1228.41    
  31  0.894500     -0.111491      -4.57593       4.57593       1173.66       1178.24    
  32  0.827855     -0.188917      -7.75373       7.75373       1219.59       1227.34    
  33  0.434964     -0.832492      -34.1681       34.1681       1183.34       1217.50    
  34  0.121450      -2.10825      -86.5292       86.5292       1199.51       1286.04    
  35  0.498977     -0.695195      -28.5330       28.5330       1249.61       1278.14    
  36  0.117961      -2.13740      -87.7255       87.7255       1249.11       1336.84    
  37  0.309211      -1.17373      -48.1735       48.1735       1220.84       1269.01    
  38  0.786265     -0.240461      -9.86928       9.86928       1245.83       1255.70    
  39  0.614330     -0.487222      -19.9971       19.9971       1236.09       1256.08    
  40  0.820857     -0.197407      -8.10218       8.10218       1165.80       1173.90    
  41  0.670448     -0.399809      -16.4094       16.4094       1282.34       1298.75    
  42  0.742403     -0.297863      -12.2252       12.2252       1248.74       1260.96    
  43  0.760912E-01  -2.57582      -105.720       105.720       1242.94       1348.66    
  44  0.709677     -0.342945      -14.0755       14.0755       1293.21       1307.28    
  45  0.943449     -0.582133E-01  -2.38926       2.38926       1282.31       1284.70    
  46  0.176370      -1.73517      -71.2169       71.2169       1302.13       1373.35    
  47  0.866890     -0.142843      -5.86273       5.86273       1302.87       1308.73    
  48  0.711056     -0.341004      -13.9959       13.9959       1197.08       1211.07    
  49  0.929667E-01  -2.37551      -97.4984       97.4984       1395.33       1492.83    
loop,thermsimp(1:2)       69   33.6373       11.6812    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       1191.53         68.37          1.12         39.02          2.31          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1191.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       69
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       70
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      285     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.479306      0.479306       1052.93       1053.41    
   2  0.482301     -0.729186      -29.9281       29.9281       1093.20       1123.13    
   3  0.546964     -0.603372      -24.7643       24.7643       1109.36       1134.12    
   4  0.543918     -0.608957      -24.9935       24.9935       1118.98       1143.97    
   5  0.427641     -0.849472      -34.8650       34.8650       1123.30       1158.16    
   6  0.498345     -0.696462      -28.5849       28.5849       1118.78       1147.36    
   7  0.989308     -0.107494E-01 -0.441187      0.441187       1117.10       1117.54    
   8  0.658822     -0.417302      -17.1273       17.1273       1098.08       1115.21    
   9  0.917808     -0.857673E-01  -3.52016       3.52016       1160.39       1163.91    
  10  0.914490E-04  -9.29973      -381.690       381.690       1165.80       1547.49    
  11  0.989901     -0.101499E-01 -0.416583      0.416583       1173.66       1174.08    
  12  0.558183     -0.583069      -23.9310       23.9310       1162.82       1186.75    
  13  0.706994     -0.346733      -14.2310       14.2310       1167.86       1182.09    
  14  0.599152     -0.512240      -21.0239       21.0239       1184.14       1205.16    
  15  0.845909     -0.167343      -6.86827       6.86827       1147.53       1154.40    
  16  0.655384     -0.422534      -17.3421       17.3421       1162.37       1179.71    
  17  0.412232E-01  -3.18875      -130.876       130.876       1195.11       1325.99    
  18  0.495401     -0.702387      -28.8281       28.8281       1151.91       1180.74    
  19  0.378829     -0.970671      -39.8393       39.8393       1135.49       1175.33    
  20  0.653665E-02  -5.03033      -206.460       206.460       1197.08       1403.54    
  21  0.782670     -0.245045      -10.0574       10.0574       1205.45       1215.51    
  22  0.945547     -0.559921E-01  -2.29809       2.29809       1183.34       1185.63    
  23  0.969857     -0.306063E-01  -1.25618       1.25618       1182.60       1183.85    
  24  0.822249     -0.195712      -8.03261       8.03261       1219.59       1227.62    
  25  0.265012E-01  -3.63056      -149.010       149.010       1228.26       1377.27    
  26  0.360432E-01  -3.32304      -136.388       136.388       1213.11       1349.49    
  27  0.796418     -0.227631      -9.34266       9.34266       1156.47       1165.82    
  28  0.292313E-01  -3.53252      -144.985       144.985       1178.90       1323.88    
  29  0.227321      -1.48139      -60.8009       60.8009       1215.35       1276.15    
  30  0.812637     -0.207471      -8.51524       8.51524       1206.93       1215.44    
  31  0.930544     -0.719857E-01  -2.95452       2.95452       1245.83       1248.78    
  32  0.674873     -0.393231      -16.1394       16.1394       1236.09       1252.23    
  33  0.264030      -1.33169      -54.6567       54.6567       1248.74       1303.39    
  34  0.807464     -0.213856      -8.77732       8.77732       1220.84       1229.61    
  35  0.653731     -0.425060      -17.4458       17.4458       1249.61       1267.06    
  36  0.858536     -0.152527      -6.26018       6.26018       1282.31       1288.57    
  37  0.538887     -0.618250      -25.3749       25.3749       1199.51       1224.88    
  38  0.468049     -0.759182      -31.1592       31.1592       1196.44       1227.60    
  39  0.401324     -0.912987      -37.4718       37.4718       1173.43       1210.90    
  40  0.363356      -1.01237      -41.5509       41.5509       1282.34       1323.89    
  41  0.924933     -0.780342E-01  -3.20276       3.20276       1293.21       1296.41    
  42  0.797289     -0.226538      -9.29782       9.29782       1302.87       1312.16    
  43  0.200097      -1.60895      -66.0363       66.0363       1200.47       1266.51    
  44  0.686219     -0.376559      -15.4551       15.4551       1249.11       1264.57    
  45  0.895629     -0.110230      -4.52416       4.52416       1165.68       1170.20    
  46  0.331830      -1.10313      -45.2759       45.2759       1242.94       1288.22    
  47  0.967018     -0.335379E-01  -1.37650       1.37650       1163.53       1164.91    
  48  0.268282      -1.31572      -54.0011       54.0011       1302.13       1356.13    
  49  0.472399     -0.749931      -30.7795       30.7795       1191.53       1222.31    
loop,thermsimp(1:2)       70  0.479306       29.9281    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287       1280.53         68.31          1.14         38.70          2.19          0.05        110.39
Just calling func    0   0        110.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1280.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       70
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       71
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      286     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575      -6.18008       6.18008       1052.93       1059.11    
   2  0.573661     -0.555717      -22.8083       22.8083       1098.08       1120.89    
   3  0.499290     -0.694569      -28.5072       28.5072       1117.10       1145.61    
   4  0.677563     -0.389253      -15.9761       15.9761       1093.20       1109.17    
   5  0.476566     -0.741149      -30.4191       30.4191       1109.36       1139.78    
   6  0.153036      -1.87708      -77.0412       77.0412       1118.98       1196.02    
   7  0.626270     -0.467973      -19.2071       19.2071       1118.78       1137.98    
   8  0.794744     -0.229735      -9.42905       9.42905       1147.53       1156.96    
   9  0.111868E-01  -4.49302      -184.407       184.407       1123.30       1307.70    
  10  0.643880     -0.440243      -18.0689       18.0689       1160.39       1178.46    
  11  0.634705     -0.454595      -18.6580       18.6580       1163.53       1182.19    
  12  0.653568     -0.425308      -17.4560       17.4560       1156.47       1173.93    
  13  0.888231     -0.118524      -4.86458       4.86458       1165.68       1170.54    
  14  0.681775E-01  -2.68564      -110.227       110.227       1173.66       1283.89    
  15  0.241248      -1.42193      -58.3604       58.3604       1135.49       1193.85    
  16  0.208857      -1.56610      -64.2778       64.2778       1162.37       1226.64    
  17  0.652439     -0.427038      -17.5269       17.5269       1151.91       1169.44    
  18  0.489833     -0.713691      -29.2921       29.2921       1167.86       1197.15    
  19  0.719225     -0.329581      -13.5270       13.5270       1182.60       1196.13    
  20  0.924762     -0.782189E-01  -3.21035       3.21035       1183.34       1186.55    
  21  0.845502     -0.167825      -6.88805       6.88805       1162.82       1169.71    
  22  0.665989     -0.406482      -16.6833       16.6833       1184.14       1200.82    
  23  0.378562     -0.971376      -39.8683       39.8683       1173.43       1213.30    
  24  0.396889     -0.924098      -37.9279       37.9279       1206.93       1244.86    
  25  0.158089      -1.84460      -75.7080       75.7080       1205.45       1281.16    
  26  0.590577     -0.526655      -21.6156       21.6156       1191.53       1213.15    
  27  0.949513     -0.518061E-01  -2.12628       2.12628       1199.51       1201.64    
  28  0.518198     -0.657398      -26.9816       26.9816       1196.44       1223.42    
  29  0.551080     -0.595875      -24.4565       24.4565       1219.59       1244.05    
  30  0.986285     -0.138097E-01 -0.566795      0.566795       1220.84       1221.40    
  31  0.920142     -0.832276E-01  -3.41592       3.41592       1245.83       1249.25    
  32  0.133201      -2.01590      -82.7388       82.7388       1236.09       1318.83    
  33  0.584507     -0.536987      -22.0396       22.0396       1249.11       1271.15    
  34  0.790583     -0.234984      -9.64448       9.64448       1200.47       1210.12    
  35  0.702664     -0.352876      -14.4831       14.4831       1249.61       1264.09    
  36  0.148885      -1.90458      -78.1699       78.1699       1215.35       1293.52    
  37  0.290436      -1.23637      -50.7445       50.7445       1242.94       1293.68    
  38  0.638249     -0.449027      -18.4295       18.4295       1282.31       1300.74    
  39  0.381605     -0.963369      -39.5396       39.5396       1293.21       1332.75    
  40  0.823069     -0.194716      -7.99174       7.99174       1248.74       1256.73    
  41  0.492318     -0.708630      -29.0844       29.0844       1302.87       1331.95    
  42  0.773199     -0.257218      -10.5570       10.5570       1178.90       1189.46    
  43  0.289475E-01  -3.54227      -145.386       145.386       1282.34       1427.72    
  44  0.355683      -1.03371      -42.4268       42.4268       1195.11       1237.54    
  45  0.160396      -1.83011      -75.1133       75.1133       1213.11       1288.22    
  46  0.972861     -0.275140E-01  -1.12926       1.12926       1302.13       1303.26    
  47  0.781938E-02  -4.85115      -199.106       199.106       1228.26       1427.37    
  48  0.225299      -1.49033      -61.1677       61.1677       1197.08       1258.24    
  49  0.631686     -0.459363      -18.8537       18.8537       1280.53       1299.38    
loop,thermsimp(1:2)       71   6.18008       22.8083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288       1190.85         68.36          1.11         38.98          2.27          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1190.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       71
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       72
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      287     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232      -33.6238       33.6238       1052.93       1086.56    
   2  0.202294      -1.59803      -65.5881       65.5881       1093.20       1158.79    
   3  0.873786     -0.134920      -5.53755       5.53755       1098.08       1103.62    
   4  0.262141      -1.33887      -54.9515       54.9515       1118.78       1173.73    
   5  0.342005      -1.07293      -44.0363       44.0363       1109.36       1153.39    
   6  0.421217     -0.864607      -35.4861       35.4861       1117.10       1152.59    
   7  0.618489     -0.480477      -19.7202       19.7202       1147.53       1167.25    
   8  0.412552     -0.885393      -36.3392       36.3392       1151.91       1188.25    
   9  0.951192     -0.500396E-01  -2.05378       2.05378       1162.82       1164.88    
  10  0.298546      -1.20883      -49.6142       49.6142       1165.68       1215.29    
  11  0.805120     -0.216763      -8.89664       8.89664       1156.47       1165.37    
  12  0.208146      -1.56951      -64.4177       64.4177       1160.39       1224.81    
  13  0.924021     -0.790209E-01  -3.24326       3.24326       1163.53       1166.77    
  14  0.447624     -0.803802      -32.9905       32.9905       1183.34       1216.33    
  15  0.667709     -0.403903      -16.5774       16.5774       1178.90       1195.48    
  16  0.767295E-01  -2.56747      -105.377       105.377       1135.49       1240.86    
  17  0.301582      -1.19871      -49.1989       49.1989       1118.98       1168.18    
  18  0.788580     -0.237522      -9.74863       9.74863       1182.60       1192.35    
  19  0.887020     -0.119888      -4.92056       4.92056       1167.86       1172.78    
  20  0.233035E-01  -3.75915      -154.287       154.287       1184.14       1338.43    
  21  0.899320     -0.106116      -4.35535       4.35535       1199.51       1203.86    
  22  0.144480      -1.93461      -79.4025       79.4025       1200.47       1279.87    
  23  0.274629      -1.29233      -53.0414       53.0414       1191.53       1244.57    
  24  0.831597     -0.184407      -7.56863       7.56863       1173.43       1181.00    
  25  0.388827     -0.944620      -38.7701       38.7701       1220.84       1259.61    
  26  0.257578      -1.35643      -55.6722       55.6722       1196.44       1252.11    
  27  0.427791     -0.849120      -34.8505       34.8505       1162.37       1197.22    
  28  0.837664E-01  -2.47972      -101.776       101.776       1195.11       1296.89    
  29  0.782727     -0.244972      -10.0544       10.0544       1219.59       1229.65    
  30  0.259676E-01  -3.65091      -149.844       149.844       1206.93       1356.77    
  31  0.166181      -1.79468      -73.6592       73.6592       1245.83       1319.49    
  32  0.360749      -1.01957      -41.8464       41.8464       1248.74       1290.58    
  33  0.369697     -0.995071      -40.8408       40.8408       1197.08       1237.92    
  34  0.959392     -0.414553E-01  -1.70145       1.70145       1249.61       1251.31    
  35  0.449170     -0.800353      -32.8490       32.8490       1249.11       1281.96    
  36  0.655790E-02  -5.02708      -206.327       206.327       1205.45       1411.78    
  37  0.133569      -2.01313      -82.6252       82.6252       1173.66       1256.29    
  38  0.282061      -1.26563      -51.9455       51.9455       1213.11       1265.05    
  39  0.431813     -0.839762      -34.4664       34.4664       1215.35       1249.82    
  40  0.713174     -0.338031      -13.8738       13.8738       1242.94       1256.81    
  41  0.511305     -0.670790      -27.5313       27.5313       1280.53       1308.06    
  42  0.264485      -1.32997      -54.5862       54.5862       1282.31       1336.89    
  43  0.779298     -0.249362      -10.2346       10.2346       1302.13       1312.37    
  44  0.709352E-02  -4.94857      -203.105       203.105       1123.30       1326.40    
  45  0.770402     -0.260843      -10.7058       10.7058       1236.09       1246.79    
  46  0.694393     -0.364718      -14.9691       14.9691       1302.87       1317.84    
  47  0.589268E-01  -2.83146      -116.212       116.212       1293.21       1409.42    
  48  0.817644     -0.201328      -8.26312       8.26312       1228.26       1236.53    
  49  0.990168     -0.988073E-02 -0.405536      0.405536       1190.85       1191.25    
loop,thermsimp(1:2)       72   33.6238       65.5881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289       1144.91         68.33          1.16         39.18          1.85          0.05        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1144.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       72
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       73
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      288     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326      -8.75557       8.75557       1052.93       1061.69    
   2  0.554495     -0.589697      -24.2030       24.2030       1098.08       1122.28    
   3  0.997056     -0.294851E-02 -0.121016      0.121016       1117.10       1117.22    
   4  0.901183E-01  -2.40663      -98.7756       98.7756       1109.36       1208.13    
   5  0.296736      -1.21491      -49.8638       49.8638       1093.20       1143.06    
   6  0.907820     -0.967094E-01  -3.96925       3.96925       1162.82       1166.79    
   7  0.325542      -1.12226      -46.0611       46.0611       1156.47       1202.53    
   8  0.947537     -0.538896E-01  -2.21180       2.21180       1163.53       1165.74    
   9  0.378276     -0.972130      -39.8992       39.8992       1147.53       1187.43    
  10  0.985613     -0.144920E-01 -0.594795      0.594795       1118.98       1119.57    
  11  0.167434      -1.78717      -73.3508       73.3508       1167.86       1241.21    
  12  0.693849E-01  -2.66809      -109.506       109.506       1118.78       1228.28    
  13  0.434983     -0.832447      -34.1662       34.1662       1173.43       1207.60    
  14  0.998656     -0.134491E-02 -0.551993E-01  0.551993E-01   1151.91       1151.96    
  15  0.650302     -0.430318      -17.6616       17.6616       1190.85       1208.51    
  16  0.152610      -1.87987      -77.1557       77.1557       1182.60       1259.75    
  17  0.273947      -1.29482      -53.1434       53.1434       1178.90       1232.04    
  18  0.990471     -0.957469E-02 -0.392975      0.392975       1162.37       1162.76    
  19  0.684493     -0.379077      -15.5585       15.5585       1199.51       1215.07    
  20  0.864467E-01  -2.44823      -100.483       100.483       1165.68       1266.16    
  21  0.546085     -0.604980      -24.8303       24.8303       1183.34       1208.17    
  22  0.246642      -1.39982      -57.4528       57.4528       1160.39       1217.84    
  23  0.484505     -0.724627      -29.7409       29.7409       1219.59       1249.33    
  24  0.567359     -0.566763      -23.2617       23.2617       1228.26       1251.53    
  25  0.564371     -0.572043      -23.4784       23.4784       1197.08       1220.56    
  26  0.825604     -0.191640      -7.86552       7.86552       1135.49       1143.35    
  27  0.302493      -1.19570      -49.0752       49.0752       1191.53       1240.61    
  28  0.630396     -0.461407      -18.9376       18.9376       1236.09       1255.03    
  29  0.886734     -0.120210      -4.93381       4.93381       1215.35       1220.28    
  30  0.389345     -0.943288      -38.7155       38.7155       1249.61       1288.33    
  31  0.181391      -1.70710      -70.0647       70.0647       1196.44       1266.51    
  32  0.933221     -0.691132E-01  -2.83662       2.83662       1173.66       1176.50    
  33  0.169237E-01  -4.07904      -167.416       167.416       1242.94       1410.36    
  34  0.757788     -0.277351      -11.3834       11.3834       1220.84       1232.22    
  35  0.300993E-01  -3.50325      -143.784       143.784       1213.11       1356.89    
  36  0.395621     -0.927300      -38.0592       38.0592       1200.47       1238.53    
  37  0.459505     -0.777605      -31.9153       31.9153       1249.11       1281.03    
  38  0.733176     -0.310370      -12.7385       12.7385       1248.74       1261.47    
  39  0.575459     -0.552587      -22.6799       22.6799       1195.11       1217.79    
  40  0.560889     -0.578233      -23.7325       23.7325       1280.53       1304.26    
  41  0.428351     -0.847812      -34.7968       34.7968       1302.13       1336.93    
  42  0.553832     -0.590895      -24.2521       24.2521       1302.87       1327.12    
  43  0.581118     -0.542801      -22.2782       22.2782       1245.83       1268.11    
  44  0.319195E-01  -3.44454      -141.375       141.375       1123.30       1264.67    
  45  0.224512E-01  -3.79641      -155.817       155.817       1282.31       1438.12    
  46  0.113637E-01  -4.47733      -183.764       183.764       1184.14       1367.90    
  47  0.889134     -0.117508      -4.82289       4.82289       1206.93       1211.75    
  48  0.422937     -0.860531      -35.3189       35.3189       1293.21       1328.53    
  49  0.479928     -0.734119      -30.1305       30.1305       1144.91       1175.04    
loop,thermsimp(1:2)       73   8.75557       24.2030    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290       1045.14         68.42          1.12         38.99          2.13          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    291       1625.35         68.32          1.08         39.24          2.08          0.05        110.76
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1045.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    41.0431               289
loop is:       73
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    41.0431               289
loop is:       74
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    20.5215               337

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      290     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889      -2.39875       2.39875       1052.93       1055.33    
   2  0.480213     -0.733525      -15.0531       15.0531       1117.10       1132.15    
   3  0.226156      -1.48653      -30.5059       30.5059       1118.98       1149.48    
   4  0.633402     -0.456651      -9.37117       9.37117       1098.08       1107.45    
   5  0.925311     -0.776258E-01  -1.59300       1.59300       1093.20       1094.79    
   6  0.498405     -0.696343      -14.2900       14.2900       1135.49       1149.78    
   7  0.133283      -2.01528      -41.3567       41.3567       1151.91       1193.27    
   8  0.657074E-01  -2.72254      -55.8708       55.8708       1162.37       1218.24    
   9  0.726758     -0.319162      -6.54970       6.54970       1163.53       1170.08    
  10  0.398365     -0.920388      -18.8878       18.8878       1162.82       1181.71    
  11  0.321047E-01  -3.43875      -70.5685       70.5685       1144.91       1215.48    
  12  0.276307      -1.28624      -26.3957       26.3957       1173.66       1200.06    
  13  0.483740     -0.726208      -14.9029       14.9029       1147.53       1162.44    
  14  0.224589      -1.49348      -30.6486       30.6486       1156.47       1187.12    
  15  0.832041     -0.183874      -3.77337       3.77337       1173.43       1177.20    
  16  0.939301     -0.626192E-01  -1.28504       1.28504       1109.36       1110.64    
  17  0.624052     -0.471522      -9.67635       9.67635       1183.34       1193.01    
  18  0.172753      -1.75589      -36.0337       36.0337       1190.85       1226.88    
  19  0.468323     -0.758597      -15.5676       15.5676       1206.93       1222.50    
  20  0.963461     -0.372229E-01 -0.763871      0.763871       1199.51       1200.27    
  21  0.812092     -0.208142      -4.27139       4.27139       1195.11       1199.38    
  22  0.376764     -0.976137      -20.0318       20.0318       1160.39       1180.42    
  23  0.791872E-01  -2.53594      -52.0414       52.0414       1215.35       1267.39    
  24  0.237003      -1.43968      -29.5445       29.5445       1197.08       1226.62    
  25  0.320094      -1.13914      -23.3769       23.3769       1118.78       1142.15    
  26  0.821410E-01  -2.49932      -51.2899       51.2899       1178.90       1230.19    
  27  0.789147     -0.236802      -4.85955       4.85955       1220.84       1225.70    
  28  0.734353E-01  -2.61135      -53.5889       53.5889       1200.47       1254.06    
  29  0.226401      -1.48545      -30.4837       30.4837       1191.53       1222.02    
  30  0.380831     -0.965399      -19.8115       19.8115       1167.86       1187.67    
  31  0.264857      -1.32857      -27.2642       27.2642       1219.59       1246.85    
  32  0.246167      -1.40174      -28.7660       28.7660       1228.26       1257.03    
  33  0.142133      -1.95099      -40.0374       40.0374       1236.09       1276.13    
  34  0.123438E-01  -4.39460      -90.1840       90.1840       1182.60       1272.78    
  35  0.853289     -0.158657      -3.25588       3.25588       1248.74       1251.99    
  36  0.418603     -0.870831      -17.8708       17.8708       1123.30       1141.17    
  37  0.235242      -1.44714      -29.6976       29.6976       1165.68       1195.37    
  38  0.841712     -0.172317      -3.53621       3.53621       1196.44       1199.98    
  39  0.113373      -2.17707      -44.6769       44.6769       1245.83       1290.51    
  40  0.617966     -0.481322      -9.87747       9.87747       1249.11       1258.99    
  41  0.149268      -1.90202      -39.0323       39.0323       1249.61       1288.64    
  42  0.811010     -0.209475      -4.29876       4.29876       1280.53       1284.83    
  43  0.571477     -0.559531      -11.4824       11.4824       1302.87       1314.35    
  44  0.105494      -2.24911      -46.1551       46.1551       1293.21       1339.36    
  45  0.709548     -0.343127      -7.04149       7.04149       1302.13       1309.17    
  46  0.535895     -0.623816      -12.8017       12.8017       1213.11       1225.91    
  47  0.137736      -1.98242      -40.6823       40.6823       1184.14       1224.82    
  48  0.666779     -0.405297      -8.31732       8.31732       1242.94       1251.26    
  49  0.326487      -1.11936      -22.9711       22.9711       1045.14       1068.11    
loop,thermsimp(1:2)       74   2.39875       15.0531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292       1057.63         68.38          1.15         39.12          2.01          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293       1278.46         68.31          1.10         38.93          2.26          0.05        110.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1057.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       74
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       75
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      292     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264      -8.97333       8.97333       1052.93       1061.91    
   2  0.108032      -2.22533      -45.6671       45.6671       1045.14       1090.81    
   3  0.908790     -0.956413E-01  -1.96271       1.96271       1093.20       1095.16    
   4  0.987883     -0.121914E-01 -0.250185      0.250185       1098.08       1098.33    
   5  0.318380      -1.14451      -23.4871       23.4871       1109.36       1132.85    
   6  0.924426     -0.785824E-01  -1.61263       1.61263       1117.10       1118.71    
   7  0.965220     -0.353996E-01 -0.726454      0.726454       1123.30       1124.02    
   8  0.852248     -0.159878      -3.28095       3.28095       1118.78       1122.06    
   9  0.329186      -1.11113      -22.8022       22.8022       1118.98       1141.78    
  10  0.282479      -1.26415      -25.9423       25.9423       1135.49       1161.43    
  11  0.818943     -0.199740      -4.09898       4.09898       1147.53       1151.63    
  12  0.842569     -0.171300      -3.51534       3.51534       1163.53       1167.04    
  13  0.370966     -0.991644      -20.3501       20.3501       1173.43       1193.78    
  14  0.362233      -1.01547      -20.8389       20.8389       1160.39       1181.23    
  15  0.356944E-01  -3.33276      -68.3934       68.3934       1162.82       1231.22    
  16  0.149119      -1.90301      -39.0527       39.0527       1156.47       1195.53    
  17  0.127170      -2.06223      -42.3202       42.3202       1167.86       1210.18    
  18  0.589256     -0.528895      -10.8537       10.8537       1183.34       1194.19    
  19  0.702139     -0.353624      -7.25691       7.25691       1151.91       1159.17    
  20  0.713819     -0.337127      -6.91836       6.91836       1165.68       1172.60    
  21  0.121783      -2.10552      -43.2085       43.2085       1195.11       1238.32    
  22  0.992321     -0.770837E-02 -0.158188      0.158188       1196.44       1196.60    
  23  0.622746     -0.473616      -9.71934       9.71934       1173.66       1183.38    
  24  0.388486     -0.945499      -19.4031       19.4031       1199.51       1218.91    
  25  0.365204      -1.00730      -20.6714       20.6714       1144.91       1165.59    
  26  0.416566     -0.875710      -17.9709       17.9709       1162.37       1180.34    
  27  0.250735      -1.38336      -28.3886       28.3886       1191.53       1219.92    
  28  0.243824      -1.41131      -28.9623       28.9623       1206.93       1235.89    
  29  0.177195      -1.73050      -35.5126       35.5126       1184.14       1219.65    
  30  0.723685     -0.323399      -6.63665       6.63665       1220.84       1227.47    
  31  0.157256      -1.84988      -37.9624       37.9624       1213.11       1251.07    
  32  0.941988     -0.597623E-01  -1.22641       1.22641       1197.08       1198.30    
  33  0.110785      -2.20016      -45.1508       45.1508       1190.85       1236.00    
  34  0.200758      -1.60566      -32.9505       32.9505       1178.90       1211.85    
  35  0.873323     -0.135450      -2.77964       2.77964       1219.59       1222.37    
  36  0.842283     -0.171639      -3.52229       3.52229       1242.94       1246.46    
  37  0.326633      -1.11892      -22.9619       22.9619       1248.74       1271.70    
  38  0.648559     -0.433003      -8.88589       8.88589       1200.47       1209.36    
  39  0.460689E-01  -3.07762      -63.1574       63.1574       1228.26       1291.42    
  40  0.676614     -0.390654      -8.01682       8.01682       1249.11       1257.13    
  41  0.863029     -0.147307      -3.02297       3.02297       1215.35       1218.37    
  42  0.646727     -0.435831      -8.94392       8.94392       1182.60       1191.54    
  43  0.310616      -1.16920      -23.9937       23.9937       1236.09       1260.08    
  44  0.521840     -0.650394      -13.3471       13.3471       1280.53       1293.88    
  45  0.381245     -0.964312      -19.7892       19.7892       1249.61       1269.40    
  46  0.815908     -0.203453      -4.17518       4.17518       1245.83       1250.01    
  47  0.209395E-01  -3.86612      -79.3387       79.3387       1302.13       1381.47    
  48  0.800991E-01  -2.52449      -51.8064       51.8064       1302.87       1354.67    
  49  0.824204     -0.193337      -3.96758       3.96758       1057.63       1061.60    
loop,thermsimp(1:2)       75   8.97333       45.6671    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294       1326.96         68.41          1.11         38.92          2.34          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1326.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       75
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       76
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      293     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733      -32.7797       32.7797       1057.63       1090.41    
   2  0.337724      -1.08553      -22.2767       22.2767       1052.93       1075.21    
   3  0.870295     -0.138923      -2.85092       2.85092       1045.14       1047.99    
   4  0.837087     -0.177827      -3.64928       3.64928       1093.20       1096.85    
   5  0.512110     -0.669215      -13.7333       13.7333       1098.08       1111.81    
   6  0.998742     -0.125879E-02 -0.258323E-01  0.258323E-01   1117.10       1117.13    
   7  0.203490      -1.59214      -32.6732       32.6732       1118.78       1151.45    
   8  0.525951E-01  -2.94513      -60.4387       60.4387       1123.30       1183.74    
   9  0.474810     -0.744841      -15.2853       15.2853       1109.36       1124.64    
  10  0.440755     -0.819266      -16.8126       16.8126       1118.98       1135.79    
  11  0.225689      -1.48860      -30.5483       30.5483       1147.53       1178.08    
  12  0.902704     -0.102360      -2.10059       2.10059       1151.91       1154.01    
  13  0.663331     -0.410481      -8.42370       8.42370       1135.49       1143.91    
  14  0.511480     -0.670447      -13.7586       13.7586       1144.91       1158.67    
  15  0.625297     -0.469528      -9.63545       9.63545       1163.53       1173.16    
  16  0.812907     -0.207139      -4.25082       4.25082       1165.68       1169.93    
  17  0.979453     -0.207607E-01 -0.426041      0.426041       1162.37       1162.79    
  18  0.255329      -1.36520      -28.0161       28.0161       1160.39       1188.41    
  19  0.856654     -0.154722      -3.17513       3.17513       1173.66       1176.84    
  20  0.610394     -0.493650      -10.1305       10.1305       1182.60       1192.73    
  21  0.703614     -0.351525      -7.21383       7.21383       1173.43       1180.64    
  22  0.623403     -0.472562      -9.69770       9.69770       1183.34       1193.03    
  23  0.375727     -0.978893      -20.0884       20.0884       1156.47       1176.56    
  24  0.870528     -0.138656      -2.84543       2.84543       1196.44       1199.29    
  25  0.175838E-01  -4.04078      -82.9230       82.9230       1197.08       1280.00    
  26  0.237914      -1.43585      -29.4658       29.4658       1200.47       1229.94    
  27  0.464352     -0.767112      -15.7423       15.7423       1167.86       1183.60    
  28  0.776873     -0.252478      -5.18125       5.18125       1178.90       1184.08    
  29  0.380679     -0.965800      -19.8197       19.8197       1215.35       1235.17    
  30  0.391295     -0.938295      -19.2553       19.2553       1199.51       1218.76    
  31  0.369488     -0.995636      -20.4320       20.4320       1184.14       1204.57    
  32  0.302398      -1.19601      -24.5440       24.5440       1191.53       1216.08    
  33  0.809138     -0.211786      -4.34617       4.34617       1219.59       1223.94    
  34  0.675473     -0.392342      -8.05147       8.05147       1220.84       1228.89    
  35  0.486217     -0.721100      -14.7981       14.7981       1162.82       1177.62    
  36  0.937468     -0.645730E-01  -1.32514       1.32514       1206.93       1208.25    
  37  0.741025     -0.299721      -6.15073       6.15073       1190.85       1197.00    
  38  0.155236      -1.86281      -38.2277       38.2277       1195.11       1233.34    
  39  0.407249     -0.898331      -18.4351       18.4351       1242.94       1261.38    
  40  0.348550E-01  -3.35656      -68.8818       68.8818       1245.83       1314.71    
  41  0.178548      -1.72290      -35.3565       35.3565       1213.11       1248.46    
  42  0.127429      -2.06020      -42.2784       42.2784       1249.11       1291.39    
  43  0.919888     -0.835037E-01  -1.71363       1.71363       1236.09       1237.80    
  44  0.520080     -0.653772      -13.4164       13.4164       1249.61       1263.03    
  45  0.574092     -0.554965      -11.3887       11.3887       1248.74       1260.12    
  46  0.893427     -0.112690      -2.31258       2.31258       1228.26       1230.58    
  47  0.658991     -0.417045      -8.55842       8.55842       1280.53       1289.09    
  48  0.803744     -0.218475      -4.48344       4.48344       1302.87       1307.35    
  49  0.499877     -0.693392      -14.2295       14.2295       1326.96       1341.19    
loop,thermsimp(1:2)       76   32.7797       22.2767    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295       1302.13         68.34          1.16         39.38          1.78          0.05        110.71
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1302.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       76
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       77
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      294     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181      -10.1824       10.1824       1045.14       1055.32    
   2  0.437836     -0.825911      -16.9490       16.9490       1052.93       1069.88    
   3  0.123560      -2.09103      -42.9112       42.9112       1057.63       1100.54    
   4  0.943438     -0.582242E-01  -1.19485       1.19485       1093.20       1094.39    
   5  0.215054      -1.53686      -31.5388       31.5388       1098.08       1129.62    
   6  0.984763     -0.153546E-01 -0.315100      0.315100       1117.10       1117.42    
   7  0.154160E-01  -4.17235      -85.6231       85.6231       1109.36       1194.98    
   8  0.231957      -1.46120      -29.9861       29.9861       1118.98       1148.96    
   9  0.476349     -0.741605      -15.2189       15.2189       1135.49       1150.71    
  10  0.620436     -0.477333      -9.79561       9.79561       1118.78       1128.57    
  11  0.456145     -0.784945      -16.1083       16.1083       1151.91       1168.02    
  12  0.507296     -0.678660      -13.9271       13.9271       1144.91       1158.84    
  13  0.910123     -0.941755E-01  -1.93263       1.93263       1162.37       1164.30    
  14  0.323556      -1.12838      -23.1562       23.1562       1165.68       1188.83    
  15  0.666279     -0.406046      -8.33270       8.33270       1163.53       1171.86    
  16  0.781920     -0.246002      -5.04835       5.04835       1156.47       1161.52    
  17  0.921689     -0.815478E-01  -1.67349       1.67349       1173.66       1175.33    
  18  0.152544      -1.88030      -38.5867       38.5867       1162.82       1201.41    
  19  0.265926      -1.32454      -27.1816       27.1816       1147.53       1174.72    
  20  0.812409     -0.207751      -4.26337       4.26337       1173.43       1177.69    
  21  0.517560E-01  -2.96121      -60.7687       60.7687       1167.86       1228.63    
  22  0.559187     -0.581271      -11.9286       11.9286       1123.30       1135.23    
  23  0.708792     -0.344194      -7.06338       7.06338       1178.90       1185.96    
  24  0.287762      -1.24562      -25.5621       25.5621       1160.39       1185.95    
  25  0.896953     -0.108752      -2.23177       2.23177       1182.60       1184.83    
  26  0.305048      -1.18729      -24.3650       24.3650       1183.34       1207.70    
  27  0.752428     -0.284450      -5.83735       5.83735       1190.85       1196.69    
  28  0.248159      -1.39369      -28.6006       28.6006       1196.44       1225.04    
  29  0.997822     -0.217989E-02 -0.447348E-01  0.447348E-01   1184.14       1184.18    
  30  0.706427     -0.347535      -7.13195       7.13195       1206.93       1214.06    
  31  0.885217     -0.121923      -2.50204       2.50204       1191.53       1194.03    
  32  0.448301     -0.802290      -16.4642       16.4642       1199.51       1215.97    
  33  0.316275      -1.15114      -23.6233       23.6233       1219.59       1243.21    
  34  0.682241     -0.382372      -7.84686       7.84686       1220.84       1228.68    
  35  0.655896     -0.421752      -8.65501       8.65501       1200.47       1209.13    
  36  0.129575      -2.04350      -41.9358       41.9358       1228.26       1270.20    
  37  0.236133      -1.44336      -29.6200       29.6200       1195.11       1224.73    
  38  0.481338     -0.731186      -15.0051       15.0051       1215.35       1230.35    
  39  0.825902     -0.191279      -3.92534       3.92534       1236.09       1240.01    
  40  0.818029     -0.200857      -4.12190       4.12190       1213.11       1217.23    
  41  0.135951E-01  -4.29805      -88.2025       88.2025       1248.74       1336.94    
  42  0.535484     -0.624585      -12.8174       12.8174       1242.94       1255.76    
  43  0.451882     -0.794334      -16.3010       16.3010       1249.61       1265.91    
  44  0.591282     -0.525463      -10.7833       10.7833       1197.08       1207.86    
  45  0.220584      -1.51148      -31.0178       31.0178       1280.53       1311.55    
  46  0.217569      -1.52524      -31.3002       31.3002       1249.11       1280.41    
  47  0.541669     -0.613101      -12.5818       12.5818       1302.87       1315.45    
  48  0.927891     -0.748411E-01  -1.53586       1.53586       1245.83       1247.37    
  49  0.888902     -0.117768      -2.41678       2.41678       1302.13       1304.55    
loop,thermsimp(1:2)       77   10.1824       16.9490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296       1095.15         68.31          1.12         38.92          2.29          0.05        110.69
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297       1583.91         68.37          1.13         38.95          2.28          0.04        110.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1095.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       77
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       78
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      296     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -47.6629       47.6629       1045.14       1092.80    
   2  0.700279     -0.356277      -7.31136       7.31136       1052.93       1060.24    
   3  0.681564     -0.383366      -7.86726       7.86726       1093.20       1101.07    
   4  0.838213E-01  -2.47907      -50.8743       50.8743       1057.63       1108.51    
   5  0.708687     -0.344341      -7.06641       7.06641       1117.10       1124.17    
   6  0.253966      -1.37055      -28.1259       28.1259       1118.78       1146.90    
   7  0.210796      -1.55686      -31.9492       31.9492       1098.08       1130.03    
   8  0.967741     -0.327906E-01 -0.672914      0.672914       1123.30       1123.97    
   9  0.901331     -0.103882      -2.13183       2.13183       1118.98       1121.11    
  10  0.985067     -0.150452E-01 -0.308750      0.308750       1135.49       1135.80    
  11  0.153899      -1.87146      -38.4052       38.4052       1144.91       1183.32    
  12  0.297572      -1.21210      -24.8741       24.8741       1156.47       1181.35    
  13  0.111036      -2.19790      -45.1043       45.1043       1162.37       1207.47    
  14  0.489011     -0.715370      -14.6805       14.6805       1151.91       1166.59    
  15  0.970731     -0.297058E-01 -0.609610      0.609610       1163.53       1164.14    
  16  0.246322      -1.40112      -28.7531       28.7531       1147.53       1176.29    
  17  0.293332      -1.22645      -25.1686       25.1686       1173.66       1198.83    
  18  0.545752     -0.605591      -12.4277       12.4277       1173.43       1185.86    
  19  0.455999     -0.785265      -16.1149       16.1149       1184.14       1200.25    
  20  0.427211     -0.850477      -17.4531       17.4531       1182.60       1200.05    
  21  0.185046E-01  -3.98974      -81.8755       81.8755       1160.39       1242.26    
  22  0.768936     -0.262748      -5.39199       5.39199       1178.90       1184.29    
  23  0.870591     -0.138583      -2.84395       2.84395       1165.68       1168.52    
  24  0.563023     -0.574436      -11.7883       11.7883       1191.53       1203.32    
  25  0.132150E-01  -4.32640      -88.7845       88.7845       1109.36       1198.14    
  26  0.890415     -0.116068      -2.38189       2.38189       1190.85       1193.23    
  27  0.163417      -1.81145      -37.1738       37.1738       1162.82       1200.00    
  28  0.360288      -1.02085      -20.9494       20.9494       1183.34       1204.29    
  29  0.622131     -0.474604      -9.73960       9.73960       1197.08       1206.82    
  30  0.942630     -0.590811E-01  -1.21244       1.21244       1200.47       1201.68    
  31  0.135626      -1.99785      -40.9991       40.9991       1206.93       1247.93    
  32  0.369646     -0.995208      -20.4232       20.4232       1199.51       1219.93    
  33  0.501457     -0.690237      -14.1647       14.1647       1213.11       1227.27    
  34  0.459762     -0.777047      -15.9462       15.9462       1195.11       1211.06    
  35  0.489970     -0.713411      -14.6403       14.6403       1196.44       1211.08    
  36  0.504194     -0.684794      -14.0530       14.0530       1167.86       1181.91    
  37  0.543102E-01  -2.91304      -59.7801       59.7801       1220.84       1280.62    
  38  0.873609     -0.135122      -2.77291       2.77291       1215.35       1218.12    
  39  0.425787     -0.853816      -17.5216       17.5216       1236.09       1253.61    
  40  0.792406     -0.232682      -4.77499       4.77499       1219.59       1224.37    
  41  0.691102     -0.369469      -7.58207       7.58207       1245.83       1253.41    
  42  0.752290     -0.284633      -5.84112       5.84112       1242.94       1248.78    
  43  0.279962      -1.27310      -26.1260       26.1260       1249.61       1275.74    
  44  0.315915E-01  -3.45487      -70.8992       70.8992       1228.26       1299.16    
  45  0.266419      -1.32269      -27.1435       27.1435       1249.11       1276.25    
  46  0.949868     -0.514319E-01  -1.05546       1.05546       1302.13       1303.19    
  47  0.520560     -0.652850      -13.3975       13.3975       1280.53       1293.93    
  48  0.805351     -0.216477      -4.44245       4.44245       1302.87       1307.31    
  49  0.281582      -1.26733      -26.0076       26.0076       1095.15       1121.15    
loop,thermsimp(1:2)       78   47.6629       7.31136    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298       1232.76         68.33          1.16         38.69          2.16          0.05        110.38
Just calling func    0   0        110.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1232.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       78
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       79
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      297     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960      -34.0576       34.0576       1052.93       1086.99    
   2  0.812983     -0.207045      -4.24889       4.24889       1045.14       1049.39    
   3  0.820046E-01  -2.50098      -51.3240       51.3240       1093.20       1144.52    
   4  0.863006     -0.147333      -3.02351       3.02351       1057.63       1060.65    
   5  0.647901     -0.434017      -8.90671       8.90671       1118.98       1127.88    
   6  0.650063E-01  -2.73327      -56.0910       56.0910       1095.15       1151.24    
   7  0.407685E-02  -5.50243      -112.918       112.918       1123.30       1236.22    
   8  0.935930     -0.662149E-01  -1.35883       1.35883       1117.10       1118.46    
   9  0.158531      -1.84180      -37.7967       37.7967       1098.08       1135.88    
  10  0.846482     -0.166666      -3.42025       3.42025       1135.49       1138.91    
  11  0.252208      -1.37750      -28.2685       28.2685       1118.78       1147.05    
  12  0.781651E-02  -4.85152      -99.5606       99.5606       1163.53       1263.09    
  13  0.990286     -0.976134E-02 -0.200318      0.200318       1151.91       1152.11    
  14  0.550116     -0.597625      -12.2642       12.2642       1165.68       1177.94    
  15  0.483066     -0.727601      -14.9315       14.9315       1147.53       1162.46    
  16  0.196160      -1.62883      -33.4260       33.4260       1156.47       1189.90    
  17  0.469455     -0.756184      -15.5181       15.5181       1167.86       1183.38    
  18  0.624392     -0.470977      -9.66518       9.66518       1144.91       1154.58    
  19  0.743593     -0.296262      -6.07975       6.07975       1178.90       1184.98    
  20  0.348439      -1.05429      -21.6357       21.6357       1173.43       1195.06    
  21  0.779083     -0.249637      -5.12294       5.12294       1190.85       1195.97    
  22  0.989010     -0.110506E-01 -0.226775      0.226775       1109.36       1109.59    
  23  0.655432E-01  -2.72505      -55.9222       55.9222       1173.66       1229.58    
  24  0.470908     -0.753092      -15.4546       15.4546       1162.82       1178.28    
  25  0.685537     -0.377553      -7.74796       7.74796       1182.60       1190.35    
  26  0.863060E-02  -4.75244      -97.5274       97.5274       1184.14       1281.67    
  27  0.526195     -0.642084      -13.1766       13.1766       1200.47       1213.65    
  28  0.767692     -0.264367      -5.42521       5.42521       1191.53       1196.96    
  29  0.380048     -0.967459      -19.8538       19.8538       1183.34       1203.19    
  30  0.337508E-01  -3.38875      -69.5424       69.5424       1197.08       1266.62    
  31  0.683667     -0.380285      -7.80403       7.80403       1162.37       1170.17    
  32  0.245511      -1.40441      -28.8208       28.8208       1195.11       1223.93    
  33  0.294388      -1.22286      -25.0949       25.0949       1196.44       1221.54    
  34  0.159040      -1.83860      -37.7309       37.7309       1215.35       1253.08    
  35  0.613798     -0.488089      -10.0163       10.0163       1199.51       1209.53    
  36  0.863839E-01  -2.44895      -50.2563       50.2563       1219.59       1269.85    
  37  0.118930      -2.12922      -43.6949       43.6949       1213.11       1256.80    
  38  0.961460     -0.393026E-01 -0.806550      0.806550       1160.39       1161.20    
  39  0.457884     -0.781140      -16.0302       16.0302       1206.93       1222.96    
  40  0.312963      -1.16167      -23.8393       23.8393       1242.94       1266.78    
  41  0.892553     -0.113669      -2.33266       2.33266       1245.83       1248.16    
  42  0.448774     -0.801235      -16.4426       16.4426       1236.09       1252.53    
  43  0.942987E-01  -2.36129      -48.4573       48.4573       1249.61       1298.07    
  44  0.848599     -0.164169      -3.36899       3.36899       1249.11       1252.48    
  45  0.665342     -0.407455      -8.36160       8.36160       1220.84       1229.20    
  46  0.894010     -0.112039      -2.29920       2.29920       1280.53       1282.83    
  47  0.403928     -0.906518      -18.6032       18.6032       1228.26       1246.87    
  48  0.612812     -0.489696      -10.0493       10.0493       1302.13       1312.18    
  49  0.726279     -0.319821      -6.56322       6.56322       1232.76       1239.32    
loop,thermsimp(1:2)       79   34.0576       4.24889    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299       1352.02         68.40          1.12         38.95          2.38          0.05        110.90
Just calling func    0   0        110.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300       1148.41         68.38          1.13         38.99          2.06          0.05        110.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1148.41
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       79
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       80
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      299     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733      -22.3138       22.3138       1045.14       1067.46    
   2  0.744737     -0.294724      -6.04819       6.04819       1057.63       1063.68    
   3  0.361564E-01  -3.31990      -68.1295       68.1295       1052.93       1121.06    
   4  0.312099      -1.16444      -23.8960       23.8960       1109.36       1133.25    
   5  0.119132      -2.12752      -43.6601       43.6601       1117.10       1160.76    
   6  0.617735     -0.481696      -9.88514       9.88514       1118.98       1128.86    
   7  0.117626      -2.14025      -43.9212       43.9212       1098.08       1142.00    
   8  0.258570      -1.35259      -27.7572       27.7572       1135.49       1163.24    
   9  0.851854E-01  -2.46293      -50.5430       50.5430       1093.20       1143.74    
  10  0.220620      -1.51131      -31.0145       31.0145       1118.78       1149.79    
  11  0.648876     -0.432513      -8.87584       8.87584       1095.15       1104.02    
  12  0.958689     -0.421884E-01 -0.865772      0.865772       1151.91       1152.78    
  13  0.240652      -1.42440      -29.2309       29.2309       1144.91       1174.15    
  14  0.975871     -0.244252E-01 -0.501243      0.501243       1160.39       1160.89    
  15  0.467835     -0.759639      -15.5890       15.5890       1147.53       1163.12    
  16  0.398205     -0.920788      -18.8960       18.8960       1162.37       1181.26    
  17  0.757338E-01  -2.58053      -52.9565       52.9565       1165.68       1218.63    
  18  0.654643     -0.423666      -8.69428       8.69428       1162.82       1171.52    
  19  0.305298      -1.18647      -24.3481       24.3481       1167.86       1192.21    
  20  0.435768     -0.830645      -17.0461       17.0461       1178.90       1195.94    
  21  0.689410     -0.371920      -7.63237       7.63237       1156.47       1164.11    
  22  0.267500      -1.31864      -27.0604       27.0604       1182.60       1209.66    
  23  0.590747     -0.526367      -10.8019       10.8019       1173.43       1184.23    
  24  0.108947E-01  -4.51948      -92.7466       92.7466       1190.85       1283.59    
  25  0.236025      -1.44382      -29.6294       29.6294       1191.53       1221.16    
  26  0.590760     -0.526345      -10.8014       10.8014       1183.34       1194.14    
  27  0.782443     -0.245334      -5.03463       5.03463       1199.51       1204.54    
  28  0.702257     -0.353456      -7.25346       7.25346       1200.47       1207.72    
  29  0.764991     -0.267891      -5.49755       5.49755       1196.44       1201.94    
  30  0.753362     -0.283210      -5.81190       5.81190       1206.93       1212.74    
  31  0.961949E-01  -2.34138      -48.0487       48.0487       1195.11       1243.16    
  32  0.541564     -0.613294      -12.5857       12.5857       1220.84       1233.42    
  33  0.474786     -0.744891      -15.2863       15.2863       1173.66       1188.95    
  34  0.242842      -1.41534      -29.0450       29.0450       1123.30       1152.34    
  35  0.495414     -0.702361      -14.4135       14.4135       1232.76       1247.17    
  36  0.636645     -0.451543      -9.26637       9.26637       1228.26       1237.53    
  37  0.758087     -0.276957      -5.68359       5.68359       1245.83       1251.51    
  38  0.209321      -1.56389      -32.0934       32.0934       1249.11       1281.20    
  39  0.484343     -0.724961      -14.8773       14.8773       1236.09       1250.97    
  40  0.499790     -0.693567      -14.2331       14.2331       1215.35       1229.58    
  41  0.316628      -1.15003      -23.6004       23.6004       1213.11       1236.71    
  42  0.705469     -0.348892      -7.15980       7.15980       1163.53       1170.69    
  43  0.514591     -0.664383      -13.6342       13.6342       1197.08       1210.71    
  44  0.869006     -0.140406      -2.88134       2.88134       1242.94       1245.82    
  45  0.112600      -2.18392      -44.8173       44.8173       1219.59       1264.41    
  46  0.511991     -0.669449      -13.7381       13.7381       1184.14       1197.88    
  47  0.477456     -0.739283      -15.1712       15.1712       1280.53       1295.70    
  48  0.494460     -0.704290      -14.4531       14.4531       1249.61       1264.06    
  49  0.698938     -0.358193      -7.35068       7.35068       1148.41       1155.76    
loop,thermsimp(1:2)       80   22.3138       6.04819    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301       1153.45         68.32          1.11         39.47          1.87          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    1153.4        3.102     -3.473      4.442     -102.6     0.2497    
                     -0.5579     0.3779     -99.70      4.411      1.978    

                       2.923    -0.9795      1.948      6830.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.561      0.000      0.000      7000.      461.6    

                      -1.236     -6.269     -7.499     -7.650      10.17    

                      -3.806     -3.949      4128.      0.000      7942.    



                       2266.      6892.      7752.      1579.      1010.    

                       4762.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.965     -1.620     -2.199     -2.124    -0.3807    

                     -0.3252      9.564      8.506    -0.1584E+05 -5.092    

                      0.4805E-02 -2.220      9.088      9.105    -0.1969E+05



                      -6.000     0.4821     0.3914E-02  8.963      8.997    

                     -0.1944E+05 -6.000     -1.051    -0.6462      9.673    

                       9.000    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1153.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       80
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       81
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      300     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733      -21.9032       21.9032       1057.63       1079.53    
   2  0.822787     -0.195058      -4.00289       4.00289       1045.14       1049.14    
   3  0.320831E-01  -3.43942      -70.5823       70.5823       1095.15       1165.73    
   4  0.224034      -1.49596      -30.6994       30.6994       1052.93       1083.63    
   5  0.200770      -1.60559      -32.9493       32.9493       1118.98       1151.93    
   6  0.983846     -0.162863E-01 -0.334219      0.334219       1109.36       1109.69    
   7  0.762274     -0.271449      -5.57056       5.57056       1098.08       1103.65    
   8  0.872649     -0.136221      -2.79548       2.79548       1093.20       1095.99    
   9  0.366891      -1.00269      -20.5767       20.5767       1118.78       1139.35    
  10  0.800852     -0.222079      -4.55741       4.55741       1123.30       1127.85    
  11  0.755695     -0.280117      -5.74843       5.74843       1151.91       1157.66    
  12  0.595174     -0.518902      -10.6487       10.6487       1148.41       1159.06    
  13  0.316509      -1.15040      -23.6081       23.6081       1117.10       1140.71    
  14  0.847901     -0.164991      -3.38587       3.38587       1160.39       1163.78    
  15  0.116195      -2.15248      -44.1723       44.1723       1147.53       1191.71    
  16  0.121963      -2.10403      -43.1780       43.1780       1135.49       1178.67    
  17  0.298485      -1.20903      -24.8112       24.8112       1156.47       1181.28    
  18  0.698751     -0.358461      -7.35617       7.35617       1163.53       1170.89    
  19  0.248186      -1.39358      -28.5983       28.5983       1162.82       1191.42    
  20  0.717251     -0.332329      -6.81990       6.81990       1144.91       1151.73    
  21  0.591856     -0.524491      -10.7634       10.7634       1162.37       1173.13    
  22  0.780177E-01  -2.55082      -52.3468       52.3468       1173.43       1225.78    
  23  0.314281      -1.15747      -23.7530       23.7530       1173.66       1197.41    
  24  0.565423E-01  -2.87277      -58.9536       58.9536       1167.86       1226.81    
  25  0.964829     -0.358044E-01 -0.734762      0.734762       1183.34       1184.07    
  26  0.900157     -0.105186      -2.15859       2.15859       1178.90       1181.06    
  27  0.656998     -0.420074      -8.62056       8.62056       1184.14       1192.76    
  28  0.888436E-01  -2.42088      -49.6802       49.6802       1196.44       1246.12    
  29  0.853838     -0.158014      -3.24269       3.24269       1199.51       1202.75    
  30  0.704842     -0.349782      -7.17807       7.17807       1200.47       1207.65    
  31  0.890111     -0.116409      -2.38889       2.38889       1182.60       1184.99    
  32  0.424397     -0.857087      -17.5887       17.5887       1197.08       1214.67    
  33  0.959371     -0.414778E-01 -0.851189      0.851189       1206.93       1207.78    
  34  0.323832      -1.12753      -23.1387       23.1387       1165.68       1188.82    
  35  0.943913     -0.577217E-01  -1.18454       1.18454       1191.53       1192.72    
  36  0.119048      -2.12823      -43.6745       43.6745       1215.35       1259.02    
  37  0.427842E-01  -3.15159      -64.6754       64.6754       1220.84       1285.51    
  38  0.433544     -0.835761      -17.1511       17.1511       1213.11       1230.26    
  39  0.773173     -0.257253      -5.27923       5.27923       1228.26       1233.54    
  40  0.455657     -0.786014      -16.1302       16.1302       1195.11       1211.24    
  41  0.362132      -1.01575      -20.8447       20.8447       1242.94       1263.78    
  42  0.775394     -0.254384      -5.22034       5.22034       1232.76       1237.98    
  43  0.889906     -0.116639      -2.39362       2.39362       1236.09       1238.48    
  44  0.415923     -0.877255      -18.0026       18.0026       1245.83       1263.83    
  45  0.374532E-01  -3.28466      -67.4064       67.4064       1249.61       1317.02    
  46  0.904805     -0.100036      -2.05289       2.05289       1219.59       1221.64    
  47  0.130905      -2.03328      -41.7261       41.7261       1249.11       1290.84    
  48  0.951733     -0.494710E-01  -1.01522       1.01522       1190.85       1191.86    
  49  0.720673     -0.327570      -6.72224       6.72224       1153.45       1160.17    
loop,thermsimp(1:2)       81   21.9032       4.00289    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302       1384.13         68.15          1.11         39.06          2.08          0.05        110.44
Just calling func    0   0        110.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    303       1156.10         68.23          1.11         39.03          2.18          0.05        110.60
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1156.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       81
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       82
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      302     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184      -12.0294       12.0294       1045.14       1057.17    
   2  0.926592     -0.762421E-01  -1.56461       1.56461       1057.63       1059.20    
   3  0.766762     -0.265579      -5.45009       5.45009       1052.93       1058.38    
   4  0.627980     -0.465247      -9.54760       9.54760       1093.20       1102.75    
   5  0.647527     -0.434594      -8.91854       8.91854       1098.08       1107.00    
   6  0.639464     -0.447125      -9.17569       9.17569       1109.36       1118.53    
   7  0.168437      -1.78119      -36.5528       36.5528       1123.30       1159.85    
   8  0.725133     -0.321400      -6.59563       6.59563       1118.78       1125.37    
   9  0.620073     -0.477917      -9.80760       9.80760       1117.10       1126.91    
  10  0.837394     -0.177461      -3.64177       3.64177       1144.91       1148.56    
  11  0.763326     -0.270070      -5.54225       5.54225       1118.98       1124.52    
  12  0.216703      -1.52923      -31.3821       31.3821       1151.91       1183.29    
  13  0.846730     -0.166373      -3.41423       3.41423       1148.41       1151.83    
  14  0.712127     -0.339499      -6.96705       6.96705       1153.45       1160.42    
  15  0.731222     -0.313039      -6.42404       6.42404       1160.39       1166.81    
  16  0.131329      -2.03005      -41.6598       41.6598       1095.15       1136.81    
  17  0.946517     -0.549662E-01  -1.12799       1.12799       1163.53       1164.66    
  18  0.303743      -1.19157      -24.4529       24.4529       1162.37       1186.82    
  19  0.452199     -0.793633      -16.2866       16.2866       1135.49       1151.77    
  20  0.176302      -1.73556      -35.6163       35.6163       1178.90       1214.51    
  21  0.569871     -0.562345      -11.5402       11.5402       1156.47       1168.01    
  22  0.267873      -1.31724      -27.0319       27.0319       1183.34       1210.37    
  23  0.295877      -1.21781      -24.9913       24.9913       1182.60       1207.59    
  24  0.658567     -0.417689      -8.57162       8.57162       1165.68       1174.25    
  25  0.633120     -0.457096      -9.38031       9.38031       1162.82       1172.20    
  26  0.655522     -0.422324      -8.66674       8.66674       1147.53       1156.20    
  27  0.532295     -0.630558      -12.9400       12.9400       1190.85       1203.79    
  28  0.611209     -0.492317      -10.1031       10.1031       1191.53       1201.63    
  29  0.768812E-01  -2.56549      -52.6479       52.6479       1184.14       1236.79    
  30  0.845132     -0.168262      -3.45300       3.45300       1173.66       1177.11    
  31  0.133696      -2.01219      -41.2932       41.2932       1199.51       1240.80    
  32  0.850522E-01  -2.46449      -50.5751       50.5751       1200.47       1251.05    
  33  0.901960     -0.103185      -2.11751       2.11751       1206.93       1209.05    
  34  0.394454E-01  -3.23284      -66.3428       66.3428       1195.11       1261.45    
  35  0.152819      -1.87850      -38.5497       38.5497       1197.08       1235.63    
  36  0.951369     -0.498538E-01  -1.02308       1.02308       1219.59       1220.61    
  37  0.909075     -0.953273E-01  -1.95626       1.95626       1173.43       1175.39    
  38  0.552964     -0.592462      -12.1582       12.1582       1167.86       1180.02    
  39  0.904748     -0.100099      -2.05419       2.05419       1213.11       1215.16    
  40  0.434860     -0.832731      -17.0889       17.0889       1228.26       1245.35    
  41  0.807557E-01  -2.51633      -51.6389       51.6389       1232.76       1284.39    
  42  0.245089      -1.40614      -28.8561       28.8561       1236.09       1264.94    
  43  0.566857     -0.567648      -11.6490       11.6490       1196.44       1208.09    
  44  0.154441      -1.86794      -38.3330       38.3330       1215.35       1253.68    
  45  0.961849     -0.388974E-01 -0.798235      0.798235       1242.94       1243.74    
  46  0.267234      -1.31963      -27.0809       27.0809       1245.83       1272.91    
  47  0.170042      -1.77171      -36.3582       36.3582       1220.84       1257.20    
  48  0.796608     -0.227393      -4.66645       4.66645       1249.11       1253.78    
  49  0.474137     -0.746260      -15.3144       15.3144       1156.10       1171.41    
loop,thermsimp(1:2)       82   12.0294       1.56461    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304       1311.20         68.36          1.09         38.89          2.48          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305       1119.98         68.40          1.10         39.32          2.13          0.05        111.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1119.98
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       82
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       83
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      304     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129      -9.79143       9.79143       1045.14       1054.93    
   2  0.835522     -0.179699      -3.68770       3.68770       1052.93       1056.62    
   3  0.626661     -0.467350      -9.59074       9.59074       1057.63       1067.22    
   4  0.197939      -1.61980      -33.2407       33.2407       1093.20       1126.44    
   5  0.842637     -0.171219      -3.51368       3.51368       1098.08       1101.59    
   6  0.873669     -0.135053      -2.77151       2.77151       1109.36       1112.13    
   7  0.298180E-01  -3.51264      -72.0849       72.0849       1118.98       1191.06    
   8  0.548374     -0.600797      -12.3293       12.3293       1118.78       1131.11    
   9  0.407469E-01  -3.20037      -65.6766       65.6766       1117.10       1182.78    
  10  0.210105E-02  -6.16532      -126.522       126.522       1095.15       1221.67    
  11  0.631577     -0.459536      -9.43038       9.43038       1144.91       1154.34    
  12  0.944026     -0.576013E-01  -1.18207       1.18207       1135.49       1136.67    
  13  0.492775     -0.707703      -14.5232       14.5232       1148.41       1162.94    
  14  0.195107      -1.63421      -33.5365       33.5365       1147.53       1181.07    
  15  0.775688     -0.254005      -5.21257       5.21257       1123.30       1128.51    
  16  0.763907     -0.269310      -5.52665       5.52665       1153.45       1158.98    
  17  0.797499     -0.226275      -4.64351       4.64351       1163.53       1168.17    
  18  0.639217     -0.447511      -9.18363       9.18363       1160.39       1169.57    
  19  0.775225     -0.254602      -5.22482       5.22482       1156.47       1161.70    
  20  0.680633     -0.384733      -7.89531       7.89531       1156.10       1163.99    
  21  0.532184     -0.630766      -12.9443       12.9443       1162.82       1175.77    
  22  0.843009     -0.170778      -3.50463       3.50463       1165.68       1169.18    
  23  0.943186     -0.584913E-01  -1.20033       1.20033       1173.43       1174.63    
  24  0.601611     -0.508143      -10.4279       10.4279       1173.66       1184.09    
  25  0.259021      -1.35084      -27.7214       27.7214       1167.86       1195.58    
  26  0.855132     -0.156500      -3.21162       3.21162       1151.91       1155.12    
  27  0.351229      -1.04632      -21.4720       21.4720       1162.37       1183.84    
  28  0.950362     -0.509122E-01  -1.04480       1.04480       1191.53       1192.58    
  29  0.447301     -0.804524      -16.5101       16.5101       1190.85       1207.36    
  30  0.325509      -1.12237      -23.0327       23.0327       1182.60       1205.63    
  31  0.717010     -0.332666      -6.82682       6.82682       1196.44       1203.27    
  32  0.676718     -0.390500      -8.01367       8.01367       1206.93       1214.94    
  33  0.493623     -0.705983      -14.4879       14.4879       1183.34       1197.82    
  34  0.155805E-01  -4.16174      -85.4053       85.4053       1178.90       1264.30    
  35  0.417708     -0.872973      -17.9148       17.9148       1213.11       1231.02    
  36  0.395067     -0.928699      -19.0583       19.0583       1219.59       1238.65    
  37  0.977835     -0.224139E-01 -0.459968      0.459968       1197.08       1197.54    
  38  0.603414     -0.505151      -10.3665       10.3665       1184.14       1194.51    
  39  0.173810      -1.74979      -35.9084       35.9084       1199.51       1235.42    
  40  0.979719     -0.204895E-01 -0.420476      0.420476       1242.94       1243.36    
  41  0.234071      -1.45213      -29.8000       29.8000       1228.26       1258.06    
  42  0.264051      -1.33161      -27.3268       27.3268       1200.47       1227.80    
  43  0.756353     -0.279247      -5.73059       5.73059       1215.35       1221.08    
  44  0.980782     -0.194046E-01 -0.398212      0.398212       1249.11       1249.51    
  45  0.444591E-01  -3.11319      -63.8874       63.8874       1220.84       1284.73    
  46  0.276895      -1.28412      -26.3521       26.3521       1195.11       1221.46    
  47  0.754338     -0.281915      -5.78534       5.78534       1236.09       1241.87    
  48  0.288496      -1.24308      -25.5098       25.5098       1245.83       1271.34    
  49  0.945547     -0.559915E-01  -1.14903       1.14903       1119.98       1121.13    
loop,thermsimp(1:2)       83   9.79143       3.68770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306       1114.72         68.33          1.12         38.99          2.17          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1114.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       83
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       84
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      305     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573      -11.4012       11.4012       1045.14       1056.54    
   2  0.583943E-01  -2.84054      -58.2922       58.2922       1052.93       1111.23    
   3  0.377108     -0.975224      -20.0131       20.0131       1057.63       1077.64    
   4  0.117758      -2.13912      -43.8981       43.8981       1098.08       1141.98    
   5  0.531627     -0.631812      -12.9658       12.9658       1109.36       1122.32    
   6  0.348101      -1.05526      -21.6556       21.6556       1119.98       1141.64    
   7  0.713050     -0.338204      -6.94047       6.94047       1093.20       1100.14    
   8  0.895286     -0.110612      -2.26993       2.26993       1123.30       1125.57    
   9  0.873863     -0.134831      -2.76694       2.76694       1118.78       1121.54    
  10  0.225074      -1.49132      -30.6043       30.6043       1135.49       1166.09    
  11  0.542220     -0.612083      -12.5609       12.5609       1144.91       1157.47    
  12  0.262707      -1.33672      -27.4315       27.4315       1151.91       1179.34    
  13  0.864358E-01  -2.44835      -50.2440       50.2440       1153.45       1203.69    
  14  0.468331     -0.758581      -15.5672       15.5672       1156.47       1172.04    
  15  0.896509     -0.109247      -2.24192       2.24192       1148.41       1150.66    
  16  0.169842E-01  -4.07547      -83.6350       83.6350       1156.10       1239.73    
  17  0.980158     -0.200410E-01 -0.411272      0.411272       1163.53       1163.94    
  18  0.252821      -1.37507      -28.2186       28.2186       1165.68       1193.90    
  19  0.556823     -0.585507      -12.0155       12.0155       1160.39       1172.40    
  20  0.520304     -0.653342      -13.4076       13.4076       1173.43       1186.84    
  21  0.956705E-01  -2.34685      -48.1609       48.1609       1162.82       1210.98    
  22  0.458762     -0.779224      -15.9909       15.9909       1147.53       1163.52    
  23  0.684654     -0.378842      -7.77441       7.77441       1117.10       1124.88    
  24  0.749393     -0.288492      -5.92030       5.92030       1162.37       1168.29    
  25  0.112724      -2.18282      -44.7948       44.7948       1173.66       1218.45    
  26  0.642114     -0.442989      -9.09083       9.09083       1118.98       1128.07    
  27  0.881888     -0.125691      -2.57937       2.57937       1191.53       1194.11    
  28  0.933845     -0.684452E-01  -1.40460       1.40460       1184.14       1185.54    
  29  0.124482      -2.08359      -42.7585       42.7585       1167.86       1210.62    
  30  0.189487      -1.66344      -34.1363       34.1363       1197.08       1231.21    
  31  0.526869     -0.640804      -13.1503       13.1503       1183.34       1196.49    
  32  0.490162     -0.713020      -14.6323       14.6323       1196.44       1211.07    
  33  0.292049      -1.23083      -25.2586       25.2586       1182.60       1207.86    
  34  0.646685     -0.435896      -8.94525       8.94525       1190.85       1199.79    
  35  0.738289     -0.303420      -6.22665       6.22665       1206.93       1213.16    
  36  0.379268     -0.969513      -19.8959       19.8959       1215.35       1235.24    
  37  0.691037     -0.369562      -7.58398       7.58398       1195.11       1202.70    
  38  0.566288     -0.568653      -11.6696       11.6696       1095.15       1106.82    
  39  0.130734      -2.03459      -41.7530       41.7530       1200.47       1242.22    
  40  0.298876      -1.20773      -24.7844       24.7844       1213.11       1237.89    
  41  0.369194     -0.996434      -20.4484       20.4484       1199.51       1219.96    
  42  0.291325      -1.23331      -25.3095       25.3095       1219.59       1244.90    
  43  0.828296     -0.188384      -3.86594       3.86594       1236.09       1239.95    
  44  0.540492E-01  -2.91786      -59.8790       59.8790       1242.94       1302.82    
  45  0.979889     -0.203162E-01 -0.416920      0.416920       1249.11       1249.53    
  46  0.411533     -0.887866      -18.2204       18.2204       1228.26       1246.48    
  47  0.430635     -0.842495      -17.2893       17.2893       1178.90       1196.19    
  48  0.948338     -0.530447E-01  -1.08856       1.08856       1245.83       1246.92    
  49  0.400713E-02  -5.51968      -113.272       113.272       1114.72       1227.99    
loop,thermsimp(1:2)       84   11.4012       58.2922    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307       1122.64         68.29          1.12         38.99          2.09          0.05        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1122.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       84
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       85
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      306     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01  -1.34193       1.34193       1045.14       1046.48    
   2  0.765516     -0.267206      -5.48347       5.48347       1057.63       1063.11    
   3  0.899266     -0.106176      -2.17889       2.17889       1093.20       1095.38    
   4  0.953341     -0.477822E-01 -0.980565      0.980565       1095.15       1096.13    
   5  0.642356     -0.442612      -9.08309       9.08309       1052.93       1062.02    
   6  0.265713      -1.32534      -27.1980       27.1980       1118.78       1145.98    
   7  0.379937     -0.967749      -19.8597       19.8597       1109.36       1129.22    
   8  0.449606     -0.799384      -16.4046       16.4046       1117.10       1133.51    
   9  0.810725     -0.209826      -4.30596       4.30596       1123.30       1127.60    
  10  0.218977      -1.51879      -31.1679       31.1679       1118.98       1150.15    
  11  0.456613     -0.783919      -16.0872       16.0872       1119.98       1136.07    
  12  0.439289E-02  -5.42777      -111.386       111.386       1098.08       1209.47    
  13  0.710409     -0.341914      -7.01661       7.01661       1148.41       1155.43    
  14  0.385315     -0.953695      -19.5713       19.5713       1144.91       1164.49    
  15  0.116701      -2.14814      -44.0832       44.0832       1147.53       1191.62    
  16  0.985237     -0.148728E-01 -0.305212      0.305212       1163.53       1163.83    
  17  0.856588     -0.154798      -3.17669       3.17669       1135.49       1138.66    
  18  0.155419      -1.86163      -38.2035       38.2035       1162.37       1200.57    
  19  0.257525      -1.35664      -27.8404       27.8404       1156.47       1184.31    
  20  0.548716     -0.600174      -12.3165       12.3165       1160.39       1172.71    
  21  0.589698     -0.528145      -10.8383       10.8383       1151.91       1162.75    
  22  0.884364     -0.122887      -2.52182       2.52182       1184.14       1186.66    
  23  0.871018E-01  -2.44068      -50.0865       50.0865       1173.43       1223.52    
  24  0.486795     -0.719912      -14.7737       14.7737       1165.68       1180.45    
  25  0.161417      -1.82376      -37.4265       37.4265       1191.53       1228.96    
  26  0.598774     -0.512871      -10.5249       10.5249       1178.90       1189.42    
  27  0.483527     -0.726647      -14.9119       14.9119       1183.34       1198.25    
  28  0.715961     -0.334130      -6.85686       6.85686       1190.85       1197.70    
  29  0.771801     -0.259029      -5.31567       5.31567       1195.11       1200.43    
  30  0.458713     -0.779330      -15.9931       15.9931       1153.45       1169.44    
  31  0.235181      -1.44740      -29.7029       29.7029       1182.60       1212.30    
  32  0.488220     -0.716988      -14.7137       14.7137       1167.86       1182.57    
  33  0.365473      -1.00656      -20.6562       20.6562       1162.82       1183.48    
  34  0.191311      -1.65386      -33.9397       33.9397       1196.44       1230.38    
  35  0.484999     -0.723609      -14.8496       14.8496       1206.93       1221.78    
  36  0.799086     -0.224286      -4.60270       4.60270       1173.66       1178.26    
  37  0.811458     -0.208923      -4.28742       4.28742       1199.51       1203.80    
  38  0.829885E-01  -2.48905      -51.0792       51.0792       1114.72       1165.80    
  39  0.731085     -0.313226      -6.42789       6.42789       1197.08       1203.50    
  40  0.854012     -0.157810      -3.23850       3.23850       1215.35       1218.59    
  41  0.699629     -0.357205      -7.33040       7.33040       1213.11       1220.44    
  42  0.918965     -0.845069E-01  -1.73421       1.73421       1156.10       1157.83    
  43  0.463498     -0.768952      -15.7801       15.7801       1236.09       1251.87    
  44  0.758690E-01  -2.57875      -52.9199       52.9199       1200.47       1253.39    
  45  0.577757     -0.548602      -11.2582       11.2582       1219.59       1230.85    
  46  0.897332     -0.108329      -2.22308       2.22308       1228.26       1230.49    
  47  0.522547     -0.649040      -13.3193       13.3193       1245.83       1259.15    
  48  0.408730E-01  -3.19729      -65.6133       65.6133       1249.11       1314.72    
  49  0.244793      -1.40734      -28.8808       28.8808       1122.64       1151.52    
loop,thermsimp(1:2)       85   1.34193       5.48347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308       1077.74         68.09          1.12         39.38          2.00          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1077.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       85
neval is:      307
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       86
neval is:      307


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      307     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542      -22.4797       22.4797       1045.14       1067.62    
   2  0.140144      -1.96508      -40.3266       40.3266       1052.93       1093.26    
   3  0.520913     -0.652172      -13.3836       13.3836       1057.63       1071.01    
   4  0.628337     -0.464678      -9.53592       9.53592       1093.20       1102.73    
   5  0.203324      -1.59296      -32.6899       32.6899       1095.15       1127.84    
   6  0.481205     -0.731462      -15.0107       15.0107       1123.30       1138.31    
   7  0.948759     -0.526009E-01  -1.07945       1.07945       1109.36       1110.44    
   8  0.251825      -1.37902      -28.2996       28.2996       1117.10       1145.40    
   9  0.363806      -1.01114      -20.7501       20.7501       1119.98       1140.73    
  10  0.465077     -0.765552      -15.7103       15.7103       1135.49       1151.20    
  11  0.580920     -0.543143      -11.1461       11.1461       1118.78       1129.92    
  12  0.957129     -0.438167E-01 -0.899186      0.899186       1118.98       1119.88    
  13  0.345007      -1.06419      -21.8388       21.8388       1122.64       1144.48    
  14  0.177852E-01  -4.02939      -82.6893       82.6893       1148.41       1231.10    
  15  0.843779     -0.169864      -3.48587       3.48587       1156.10       1159.58    
  16  0.765452     -0.267288      -5.48517       5.48517       1151.91       1157.39    
  17  0.453925     -0.789824      -16.2084       16.2084       1163.53       1179.74    
  18  0.378234     -0.972243      -19.9519       19.9519       1144.91       1164.87    
  19  0.167312      -1.78790      -36.6904       36.6904       1114.72       1151.41    
  20  0.240345      -1.42568      -29.2571       29.2571       1153.45       1182.71    
  21  0.868226     -0.141303      -2.89976       2.89976       1160.39       1163.29    
  22  0.907002     -0.976102E-01  -2.00311       2.00311       1173.66       1175.66    
  23  0.433040     -0.836925      -17.1750       17.1750       1165.68       1182.85    
  24  0.291080      -1.23416      -25.3268       25.3268       1167.86       1193.19    
  25  0.391091     -0.938815      -19.2659       19.2659       1162.82       1182.09    
  26  0.541803     -0.612853      -12.5767       12.5767       1156.47       1169.05    
  27  0.494251     -0.704711      -14.4618       14.4618       1184.14       1198.60    
  28  0.617376     -0.482277      -9.89706       9.89706       1178.90       1188.80    
  29  0.919515     -0.839094E-01  -1.72195       1.72195       1147.53       1149.26    
  30  0.836216     -0.178868      -3.67065       3.67065       1190.85       1194.52    
  31  0.436173     -0.829716      -17.0271       17.0271       1183.34       1200.36    
  32  0.175211      -1.74176      -35.7437       35.7437       1195.11       1230.86    
  33  0.304297      -1.18975      -24.4155       24.4155       1162.37       1186.78    
  34  0.996125     -0.388259E-02 -0.796768E-01  0.796768E-01   1197.08       1197.16    
  35  0.146253      -1.92242      -39.4510       39.4510       1199.51       1238.96    
  36  0.110666      -2.20124      -45.1728       45.1728       1098.08       1143.25    
  37  0.481190E-01  -3.03408      -62.2640       62.2640       1182.60       1244.86    
  38  0.342728      -1.07082      -21.9748       21.9748       1215.35       1237.32    
  39  0.998409E-01  -2.30418      -47.2853       47.2853       1213.11       1260.39    
  40  0.509248     -0.674821      -13.8484       13.8484       1206.93       1220.78    
  41  0.974159     -0.261804E-01 -0.537263      0.537263       1173.43       1173.97    
  42  0.950347     -0.509279E-01  -1.04512       1.04512       1191.53       1192.58    
  43  0.333494      -1.09813      -22.5353       22.5353       1196.44       1218.98    
  44  0.914660     -0.892024E-01  -1.83057       1.83057       1228.26       1230.09    
  45  0.249678      -1.38758      -28.4754       28.4754       1219.59       1248.07    
  46  0.512508     -0.668440      -13.7174       13.7174       1236.09       1249.81    
  47  0.592185     -0.523937      -10.7520       10.7520       1200.47       1211.22    
  48  0.931089     -0.714008E-01  -1.46525       1.46525       1245.83       1247.30    
  49  0.638700     -0.448321      -9.20023       9.20023       1077.74       1086.94    
loop,thermsimp(1:2)       86   22.4797       40.3266    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    309       1151.42         68.15          1.12         39.09          2.52          0.05        110.93
Just calling func    0   0        110.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1151.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       86
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       87
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      308     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750      -63.7707       63.7707       1045.14       1108.91    
   2  0.682805     -0.381545      -7.82990       7.82990       1057.63       1065.46    
   3  0.699780     -0.356989      -7.32597       7.32597       1077.74       1085.07    
   4  0.515086     -0.663422      -13.6144       13.6144       1052.93       1066.55    
   5  0.402461     -0.910157      -18.6778       18.6778       1093.20       1111.88    
   6  0.652803     -0.426480      -8.75203       8.75203       1109.36       1118.11    
   7  0.483213     -0.727297      -14.9253       14.9253       1118.98       1133.90    
   8  0.873684     -0.135037      -2.77116       2.77116       1095.15       1097.92    
   9  0.142648      -1.94738      -39.9632       39.9632       1118.78       1158.74    
  10  0.844357     -0.169180      -3.47184       3.47184       1123.30       1126.77    
  11  0.154187      -1.86959      -38.3668       38.3668       1119.98       1158.35    
  12  0.437314E-01  -3.12969      -64.2261       64.2261       1098.08       1162.31    
  13  0.455393E-02  -5.39176      -110.647       110.647       1122.64       1233.29    
  14  0.236800      -1.44054      -29.5621       29.5621       1117.10       1146.66    
  15  0.660181     -0.415241      -8.52139       8.52139       1147.53       1156.05    
  16  0.652586     -0.426813      -8.75885       8.75885       1135.49       1144.25    
  17  0.153101      -1.87666      -38.5119       38.5119       1114.72       1153.23    
  18  0.753412     -0.283143      -5.81052       5.81052       1151.91       1157.72    
  19  0.240839      -1.42363      -29.2150       29.2150       1156.10       1185.31    
  20  0.684622     -0.378888      -7.77538       7.77538       1160.39       1168.16    
  21  0.243018      -1.41462      -29.0302       29.0302       1144.91       1173.94    
  22  0.815539     -0.203906      -4.18447       4.18447       1156.47       1160.66    
  23  0.589355     -0.528726      -10.8503       10.8503       1173.43       1184.28    
  24  0.243009      -1.41466      -29.0310       29.0310       1173.66       1202.69    
  25  0.821886     -0.196154      -4.02539       4.02539       1163.53       1167.55    
  26  0.261401      -1.34170      -27.5338       27.5338       1162.82       1190.36    
  27  0.571134     -0.560131      -11.4948       11.4948       1153.45       1164.94    
  28  0.406429E-01  -3.20293      -65.7291       65.7291       1165.68       1231.41    
  29  0.341463      -1.07451      -22.0507       22.0507       1162.37       1184.42    
  30  0.252643      -1.37578      -28.2331       28.2331       1178.90       1207.13    
  31  0.503366     -0.686439      -14.0868       14.0868       1191.53       1205.62    
  32  0.247804      -1.39512      -28.6299       28.6299       1167.86       1196.49    
  33  0.902392     -0.102706      -2.10768       2.10768       1190.85       1192.96    
  34  0.198330E-01  -3.92041      -80.4528       80.4528       1197.08       1277.53    
  35  0.695627     -0.362942      -7.44813       7.44813       1184.14       1191.59    
  36  0.833441     -0.182192      -3.73887       3.73887       1183.34       1187.08    
  37  0.720954     -0.327181      -6.71425       6.71425       1200.47       1207.19    
  38  0.155604      -1.86044      -38.1792       38.1792       1196.44       1234.62    
  39  0.496580E-01  -3.00260      -61.6179       61.6179       1206.93       1268.55    
  40  0.804644     -0.217356      -4.46048       4.46048       1228.26       1232.72    
  41  0.329241      -1.11097      -22.7987       22.7987       1195.11       1217.91    
  42  0.889596     -0.116988      -2.40078       2.40078       1148.41       1150.81    
  43  0.857341     -0.153920      -3.15867       3.15867       1215.35       1218.51    
  44  0.238258      -1.43440      -29.4361       29.4361       1199.51       1228.95    
  45  0.998437     -0.156448E-02 -0.321055E-01  0.321055E-01   1182.60       1182.63    
  46  0.280889      -1.26979      -26.0581       26.0581       1245.83       1271.89    
  47  0.518450     -0.656912      -13.4809       13.4809       1219.59       1233.07    
  48  0.348786      -1.05330      -21.6153       21.6153       1236.09       1257.70    
  49  0.250207      -1.38547      -28.4319       28.4319       1151.42       1179.85    
loop,thermsimp(1:2)       87   63.7707       7.82990    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310       1077.79         68.18          1.12         39.16          2.26          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1077.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       87
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       88
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      309     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752      -15.4476       15.4476       1057.63       1073.08    
   2  0.531040     -0.632917      -12.9884       12.9884       1052.93       1065.92    
   3  0.592986E-01  -2.82517      -57.9768       57.9768       1077.74       1135.72    
   4  0.247694      -1.39556      -28.6391       28.6391       1095.15       1123.79    
   5  0.131832      -2.02623      -41.5813       41.5813       1045.14       1086.72    
   6  0.928797E-01  -2.37645      -48.7684       48.7684       1093.20       1141.97    
   7  0.638590     -0.448492      -9.20375       9.20375       1109.36       1118.56    
   8  0.220145      -1.51347      -31.0588       31.0588       1123.30       1154.36    
   9  0.764323     -0.268765      -5.51547       5.51547       1118.98       1124.49    
  10  0.223429      -1.49866      -30.7548       30.7548       1135.49       1166.24    
  11  0.705665     -0.348615      -7.15411       7.15411       1117.10       1124.26    
  12  0.812667     -0.207434      -4.25687       4.25687       1148.41       1152.67    
  13  0.344167      -1.06663      -21.8889       21.8889       1114.72       1136.61    
  14  0.691720     -0.368573      -7.56370       7.56370       1147.53       1155.10    
  15  0.601584     -0.508189      -10.4288       10.4288       1151.91       1162.34    
  16  0.323598      -1.12825      -23.1535       23.1535       1119.98       1143.13    
  17  0.536181     -0.623284      -12.7908       12.7908       1118.78       1131.57    
  18  0.224445      -1.49412      -30.6617       30.6617       1156.47       1187.13    
  19  0.967837     -0.326916E-01 -0.670881      0.670881       1098.08       1098.75    
  20  0.982234     -0.179257E-01 -0.367864      0.367864       1153.45       1153.82    
  21  0.656459     -0.420894      -8.63740       8.63740       1163.53       1172.17    
  22  0.138036      -1.98024      -40.6376       40.6376       1160.39       1201.03    
  23  0.698821     -0.358360      -7.35411       7.35411       1144.91       1152.27    
  24  0.603237     -0.505446      -10.3725       10.3725       1151.42       1161.79    
  25  0.253585      -1.37205      -28.1567       28.1567       1182.60       1210.76    
  26  0.404885     -0.904153      -18.5546       18.5546       1173.43       1191.98    
  27  0.802083     -0.220543      -4.52588       4.52588       1162.37       1166.89    
  28  0.756447     -0.279123      -5.72803       5.72803       1156.10       1161.83    
  29  0.390929     -0.939231      -19.2745       19.2745       1183.34       1202.61    
  30  0.260757      -1.34417      -27.5844       27.5844       1162.82       1190.41    
  31  0.177681      -1.72776      -35.4564       35.4564       1184.14       1219.60    
  32  0.806362     -0.215223      -4.41670       4.41670       1190.85       1195.26    
  33  0.222380      -1.50337      -30.8514       30.8514       1167.86       1198.71    
  34  0.969986     -0.304736E-01 -0.625365      0.625365       1173.66       1174.29    
  35  0.417166     -0.874272      -17.9414       17.9414       1191.53       1209.47    
  36  0.212672      -1.54800      -31.7674       31.7674       1178.90       1210.67    
  37  0.141187      -1.95767      -40.1744       40.1744       1200.47       1240.65    
  38  0.750343     -0.287224      -5.89428       5.89428       1195.11       1201.01    
  39  0.628172     -0.464941      -9.54131       9.54131       1215.35       1224.89    
  40  0.466629     -0.762221      -15.6420       15.6420       1199.51       1215.15    
  41  0.120425      -2.11672      -43.4385       43.4385       1165.68       1209.12    
  42  0.179567      -1.71721      -35.2398       35.2398       1228.26       1263.50    
  43  0.209268      -1.56414      -32.0986       32.0986       1219.59       1251.69    
  44  0.730304E-01  -2.61688      -53.7024       53.7024       1122.64       1176.34    
  45  0.985392     -0.147157E-01 -0.301990      0.301990       1196.44       1196.74    
  46  0.726759E-01  -2.62175      -53.8023       53.8023       1236.09       1289.89    
  47  0.205943      -1.58016      -32.4273       32.4273       1206.93       1239.36    
  48  0.198791      -1.61550      -33.1526       33.1526       1245.83       1278.98    
  49  0.320500      -1.13787      -23.3509       23.3509       1077.79       1101.14    
loop,thermsimp(1:2)       88   15.4476       12.9884    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311       1200.23         68.12          1.09         39.22          2.02          0.05        110.51
Just calling func    0   0        110.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1200.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       88
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       89
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      310     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877      -21.5224       21.5224       1052.93       1074.46    
   2  0.650675     -0.429745      -8.81903       8.81903       1057.63       1066.45    
   3  0.849247     -0.163405      -3.35333       3.35333       1045.14       1048.50    
   4  0.910703     -0.935381E-01  -1.91955       1.91955       1098.08       1100.00    
   5  0.188892      -1.66658      -34.2007       34.2007       1077.79       1111.99    
   6  0.256564      -1.36038      -27.9170       27.9170       1109.36       1137.28    
   7  0.465488E-01  -3.06725      -62.9448       62.9448       1095.15       1158.09    
   8  0.824855     -0.192548      -3.95139       3.95139       1117.10       1121.05    
   9  0.730565     -0.313937      -6.44246       6.44246       1118.98       1125.42    
  10  0.888077     -0.118697      -2.43584       2.43584       1118.78       1121.21    
  11  0.898172     -0.107394      -2.20389       2.20389       1077.74       1079.94    
  12  0.314974      -1.15527      -23.7078       23.7078       1114.72       1138.43    
  13  0.247979      -1.39441      -28.6155       28.6155       1093.20       1121.81    
  14  0.330032E-01  -3.41115      -70.0021       70.0021       1119.98       1189.98    
  15  0.570783E-01  -2.86333      -58.7600       58.7600       1144.91       1203.67    
  16  0.694187     -0.365014      -7.49064       7.49064       1148.41       1155.90    
  17  0.314834      -1.15571      -23.7169       23.7169       1153.45       1177.17    
  18  0.917621     -0.859711E-01  -1.76426       1.76426       1123.30       1125.06    
  19  0.613858     -0.487991      -10.0143       10.0143       1147.53       1157.55    
  20  0.744084E-01  -2.59819      -53.3188       53.3188       1151.42       1204.74    
  21  0.454198     -0.789221      -16.1960       16.1960       1156.10       1172.29    
  22  0.118203E-01  -4.43793      -91.0732       91.0732       1151.91       1242.98    
  23  0.746996     -0.291695      -5.98603       5.98603       1135.49       1141.47    
  24  0.416160     -0.876686      -17.9910       17.9910       1162.37       1180.36    
  25  0.339178E-01  -3.38381      -69.4411       69.4411       1163.53       1232.97    
  26  0.824080     -0.193487      -3.97065       3.97065       1173.66       1177.63    
  27  0.589652     -0.528223      -10.8400       10.8400       1122.64       1133.48    
  28  0.680293     -0.385231      -7.90554       7.90554       1156.47       1164.38    
  29  0.864872E-01  -2.44776      -50.2318       50.2318       1162.82       1213.06    
  30  0.672988     -0.396027      -8.12709       8.12709       1173.43       1181.56    
  31  0.797049E-01  -2.52942      -51.9077       51.9077       1190.85       1242.76    
  32  0.831708     -0.184273      -3.78157       3.78157       1196.44       1200.22    
  33  0.280253E-01  -3.57465      -73.3573       73.3573       1167.86       1241.22    
  34  0.131717      -2.02710      -41.5992       41.5992       1195.11       1236.71    
  35  0.343675      -1.06806      -21.9182       21.9182       1160.39       1182.31    
  36  0.280745      -1.27031      -26.0687       26.0687       1183.34       1209.41    
  37  0.322275      -1.13235      -23.2376       23.2376       1165.68       1188.91    
  38  0.769830E-01  -2.56417      -52.6208       52.6208       1191.53       1244.15    
  39  0.851798     -0.160406      -3.29177       3.29177       1178.90       1182.19    
  40  0.864683     -0.145392      -2.98367       2.98367       1182.60       1185.58    
  41  0.157880      -1.84592      -37.8811       37.8811       1199.51       1237.39    
  42  0.371895     -0.989143      -20.2987       20.2987       1184.14       1204.44    
  43  0.861425     -0.149167      -3.06114       3.06114       1215.35       1218.41    
  44  0.778275E-01  -2.55326      -52.3968       52.3968       1206.93       1259.33    
  45  0.450106     -0.798272      -16.3818       16.3818       1200.47       1216.85    
  46  0.188928      -1.66639      -34.1969       34.1969       1219.59       1253.79    
  47  0.225391      -1.48992      -30.5754       30.5754       1228.26       1258.84    
  48  0.814689     -0.204949      -4.20586       4.20586       1245.83       1250.04    
  49  0.556109     -0.586791      -12.0418       12.0418       1200.23       1212.28    
loop,thermsimp(1:2)       89   21.5224       8.81903    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312       1224.14         68.08          1.12         39.61          1.79          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1224.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       89
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       90
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      311     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786      -41.6147       41.6147       1045.14       1086.76    
   2  0.314760      -1.15594      -23.7218       23.7218       1057.63       1081.35    
   3  0.748375     -0.289851      -5.94819       5.94819       1052.93       1058.88    
   4  0.632472     -0.458119      -9.40130       9.40130       1077.74       1087.14    
   5  0.677472     -0.389387      -7.99082       7.99082       1098.08       1106.07    
   6  0.433475     -0.835921      -17.1544       17.1544       1077.79       1094.95    
   7  0.458976     -0.778758      -15.9813       15.9813       1117.10       1133.08    
   8  0.411427E-02  -5.49329      -112.731       112.731       1118.78       1231.51    
   9  0.904989     -0.998322E-01  -2.04871       2.04871       1093.20       1095.25    
  10  0.480311     -0.733322      -15.0489       15.0489       1123.30       1138.35    
  11  0.277870      -1.28060      -26.2799       26.2799       1118.98       1145.26    
  12  0.958372     -0.425196E-01 -0.872569      0.872569       1122.64       1123.51    
  13  0.321639      -1.13432      -23.2781       23.2781       1109.36       1132.64    
  14  0.562333     -0.575660      -11.8134       11.8134       1114.72       1126.54    
  15  0.665565     -0.407119      -8.35470       8.35470       1135.49       1143.84    
  16  0.307614      -1.17891      -24.1931       24.1931       1148.41       1172.61    
  17  0.504790E-01  -2.98620      -61.2814       61.2814       1147.53       1208.81    
  18  0.361959      -1.01622      -20.8545       20.8545       1095.15       1116.00    
  19  0.470787     -0.753350      -15.4599       15.4599       1156.47       1171.93    
  20  0.312221      -1.16404      -23.8880       23.8880       1156.10       1179.99    
  21  0.156792      -1.85283      -38.0230       38.0230       1153.45       1191.47    
  22  0.445216     -0.809196      -16.6060       16.6060       1173.66       1190.27    
  23  0.999492     -0.508321E-03 -0.104315E-01  0.104315E-01   1162.37       1162.38    
  24  0.167067      -1.78936      -36.7204       36.7204       1173.43       1210.15    
  25  0.435083     -0.832219      -17.0784       17.0784       1178.90       1195.98    
  26  0.110403      -2.20362      -45.2216       45.2216       1160.39       1205.61    
  27  0.704194     -0.350701      -7.19693       7.19693       1182.60       1189.80    
  28  0.767816     -0.264205      -5.42190       5.42190       1165.68       1171.10    
  29  0.231293      -1.46407      -30.0450       30.0450       1119.98       1150.02    
  30  0.965513     -0.350953E-01 -0.720209      0.720209       1196.44       1197.16    
  31  0.674440     -0.393873      -8.08287       8.08287       1144.91       1153.00    
  32  0.248626      -1.39181      -28.5620       28.5620       1184.14       1212.70    
  33  0.461218     -0.773884      -15.8813       15.8813       1151.42       1167.30    
  34  0.778910     -0.249859      -5.12750       5.12750       1183.34       1188.46    
  35  0.665530     -0.407172      -8.35580       8.35580       1200.23       1208.59    
  36  0.383296     -0.958947      -19.6791       19.6791       1162.82       1182.50    
  37  0.492311     -0.708645      -14.5425       14.5425       1200.47       1215.01    
  38  0.631911     -0.459006      -9.41952       9.41952       1215.35       1224.77    
  39  0.150454E-01  -4.19668      -86.1224       86.1224       1163.53       1249.65    
  40  0.958677     -0.422006E-01 -0.866021      0.866021       1195.11       1195.98    
  41  0.411899     -0.886977      -18.2021       18.2021       1199.51       1217.71    
  42  0.466999     -0.761428      -15.6257       15.6257       1167.86       1183.49    
  43  0.622674     -0.473731      -9.72170       9.72170       1190.85       1200.57    
  44  0.497710     -0.697737      -14.3186       14.3186       1151.91       1166.23    
  45  0.763352E-01  -2.57262      -52.7941       52.7941       1191.53       1244.33    
  46  0.192360      -1.64839      -33.8274       33.8274       1245.83       1279.66    
  47  0.444368     -0.811101      -16.6450       16.6450       1219.59       1236.24    
  48  0.617268     -0.482452      -9.90066       9.90066       1228.26       1238.16    
  49  0.898554     -0.106968      -2.19515       2.19515       1224.14       1226.34    
loop,thermsimp(1:2)       90   41.6147       23.7218    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313       1202.68         68.12          1.12         39.24          2.24          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1202.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       90
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       91
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      312     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01  -1.70271       1.70271       1052.93       1054.64    
   2  0.393393     -0.932946      -19.1455       19.1455       1057.63       1076.78    
   3  0.317218      -1.14817      -23.5622       23.5622       1045.14       1068.70    
   4  0.324247      -1.12625      -23.1124       23.1124       1077.74       1100.85    
   5  0.515746E-01  -2.96473      -60.8408       60.8408       1077.79       1138.63    
   6  0.143224      -1.94335      -39.8804       39.8804       1093.20       1133.08    
   7  0.512136     -0.669164      -13.7323       13.7323       1098.08       1111.81    
   8  0.993896     -0.612239E-02 -0.125641      0.125641       1095.15       1095.27    
   9  0.440900     -0.818937      -16.8059       16.8059       1122.64       1139.45    
  10  0.861233     -0.149390      -3.06572       3.06572       1114.72       1117.79    
  11  0.690005     -0.371056      -7.61465       7.61465       1109.36       1116.97    
  12  0.192792      -1.64614      -33.7814       33.7814       1117.10       1150.88    
  13  0.975175     -0.251388E-01 -0.515886      0.515886       1123.30       1123.81    
  14  0.595327E-01  -2.82123      -57.8960       57.8960       1135.49       1193.38    
  15  0.142661      -1.94729      -39.9613       39.9613       1118.98       1158.94    
  16  0.141610      -1.95468      -40.1130       40.1130       1119.98       1160.09    
  17  0.976591     -0.236872E-01 -0.486099      0.486099       1144.91       1145.40    
  18  0.894748     -0.111213      -2.28227       2.28227       1162.37       1164.65    
  19  0.747310     -0.291275      -5.97741       5.97741       1151.91       1157.89    
  20  0.434887     -0.832670      -17.0877       17.0877       1151.42       1168.51    
  21  0.673581     -0.395146      -8.10902       8.10902       1165.68       1173.79    
  22  0.624944     -0.470094      -9.64706       9.64706       1156.47       1166.12    
  23  0.617967     -0.481321      -9.87745       9.87745       1148.41       1158.29    
  24  0.659853     -0.415739      -8.53160       8.53160       1156.10       1164.63    
  25  0.963159E-01  -2.34012      -48.0229       48.0229       1162.82       1210.85    
  26  0.179190      -1.71931      -35.2829       35.2829       1167.86       1203.14    
  27  0.251042      -1.38213      -28.3635       28.3635       1183.34       1211.70    
  28  0.116711      -2.14806      -44.0815       44.0815       1182.60       1226.68    
  29  0.890376     -0.116112      -2.38279       2.38279       1173.66       1176.04    
  30  0.880065E-02  -4.73293      -97.1270       97.1270       1153.45       1250.58    
  31  0.613810     -0.488070      -10.0160       10.0160       1178.90       1188.91    
  32  0.960436E-01  -2.34295      -48.0810       48.0810       1195.11       1243.19    
  33  0.768907E-02  -4.86796      -99.8980       99.8980       1196.44       1296.34    
  34  0.316163      -1.15150      -23.6305       23.6305       1190.85       1214.48    
  35  0.195769      -1.63082      -33.4669       33.4669       1160.39       1193.86    
  36  0.813020     -0.207000      -4.24795       4.24795       1200.23       1204.48    
  37  0.578245     -0.547758      -11.2408       11.2408       1147.53       1158.77    
  38  0.711511     -0.340365      -6.98481       6.98481       1173.43       1180.41    
  39  0.565886     -0.569362      -11.6842       11.6842       1184.14       1195.82    
  40  0.874556     -0.134039      -2.75069       2.75069       1200.47       1203.22    
  41  0.335685      -1.09158      -22.4009       22.4009       1199.51       1221.91    
  42  0.861776     -0.148759      -3.05277       3.05277       1215.35       1218.40    
  43  0.634500     -0.454918      -9.33563       9.33563       1224.14       1233.48    
  44  0.211879      -1.55174      -31.8441       31.8441       1118.78       1150.62    
  45  0.789454     -0.236414      -4.85159       4.85159       1219.59       1224.44    
  46  0.726316E-01  -2.62235      -53.8148       53.8148       1228.26       1282.08    
  47  0.344022      -1.06705      -21.8975       21.8975       1191.53       1213.43    
  48  0.367544      -1.00091      -20.5403       20.5403       1163.53       1184.07    
  49  0.634223     -0.455355      -9.34459       9.34459       1202.68       1212.03    
loop,thermsimp(1:2)       91   1.70271       19.1455    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314       1408.50         68.13          1.21         39.46          1.98          0.05        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    315       1176.62         67.92          1.14         39.42          2.11          0.05        110.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1176.62
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       91
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       92
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      314     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858      -23.7758       23.7758       1052.93       1076.71    
   2  0.484866     -0.723883      -14.8552       14.8552       1045.14       1060.00    
   3  0.743257     -0.296713      -6.08901       6.08901       1057.63       1063.72    
   4  0.476659     -0.740953      -15.2055       15.2055       1095.15       1110.35    
   5  0.895662E-01  -2.41278      -49.5139       49.5139       1077.74       1127.25    
   6  0.100541      -2.29719      -47.1418       47.1418       1098.08       1145.22    
   7  0.394309     -0.930621      -19.0978       19.0978       1109.36       1128.46    
   8  0.856201     -0.155250      -3.18597       3.18597       1114.72       1117.91    
   9  0.903325     -0.101673      -2.08649       2.08649       1123.30       1125.38    
  10  0.849389     -0.163238      -3.34989       3.34989       1093.20       1096.55    
  11  0.245876      -1.40293      -28.7903       28.7903       1077.79       1106.58    
  12  0.535664     -0.624247      -12.8105       12.8105       1122.64       1135.45    
  13  0.509317     -0.674685      -13.8456       13.8456       1144.91       1158.76    
  14  0.103141      -2.27166      -46.6180       46.6180       1118.78       1165.40    
  15  0.822327     -0.195617      -4.01436       4.01436       1117.10       1121.12    
  16  0.293454      -1.22603      -25.1601       25.1601       1151.91       1177.07    
  17  0.610098E-01  -2.79672      -57.3930       57.3930       1148.41       1205.81    
  18  0.467864E-01  -3.06216      -62.8403       62.8403       1147.53       1210.37    
  19  0.888641     -0.118062      -2.42281       2.42281       1118.98       1121.40    
  20  0.371769     -0.989482      -20.3057       20.3057       1119.98       1140.29    
  21  0.770202     -0.261103      -5.35823       5.35823       1156.10       1161.46    
  22  0.752967E-01  -2.58632      -53.0753       53.0753       1162.37       1215.44    
  23  0.787365E-01  -2.54165      -52.1586       52.1586       1156.47       1208.63    
  24  0.516026     -0.661597      -13.5770       13.5770       1151.42       1165.00    
  25  0.133613      -2.01281      -41.3060       41.3060       1165.68       1206.98    
  26  0.705575     -0.348742      -7.15673       7.15673       1173.66       1180.82    
  27  0.747326     -0.291254      -5.97699       5.97699       1173.43       1179.41    
  28  0.941066E-01  -2.36333      -48.4991       48.4991       1163.53       1212.03    
  29  0.243001      -1.41469      -29.0316       29.0316       1178.90       1207.93    
  30  0.186020      -1.68190      -34.5152       34.5152       1135.49       1170.00    
  31  0.707073     -0.346621      -7.11321       7.11321       1160.39       1167.50    
  32  0.820399     -0.197964      -4.06253       4.06253       1184.14       1188.20    
  33  0.169787E-01  -4.07580      -83.6416       83.6416       1167.86       1251.50    
  34  0.196118      -1.62904      -33.4304       33.4304       1200.47       1233.90    
  35  0.910420E-01  -2.39643      -49.1785       49.1785       1200.23       1249.41    
  36  0.101963      -2.28314      -46.8536       46.8536       1162.82       1209.68    
  37  0.816143     -0.203166      -4.16927       4.16927       1183.34       1187.51    
  38  0.921931     -0.812847E-01  -1.66809       1.66809       1202.68       1204.35    
  39  0.867385     -0.142273      -2.91965       2.91965       1191.53       1194.45    
  40  0.534867     -0.625737      -12.8411       12.8411       1190.85       1203.69    
  41  0.354961      -1.03575      -21.2552       21.2552       1215.35       1236.60    
  42  0.707205     -0.346435      -7.10938       7.10938       1199.51       1206.62    
  43  0.341296      -1.07501      -22.0608       22.0608       1219.59       1241.65    
  44  0.615332     -0.485594      -9.96514       9.96514       1182.60       1192.56    
  45  0.100325      -2.29934      -47.1860       47.1860       1224.14       1271.33    
  46  0.218012      -1.52321      -31.2585       31.2585       1195.11       1226.37    
  47  0.346044      -1.06119      -21.7772       21.7772       1153.45       1175.23    
  48  0.313706      -1.15930      -23.7906       23.7906       1228.26       1252.05    
  49  0.884226     -0.123043      -2.52503       2.52503       1176.62       1179.15    
loop,thermsimp(1:2)       92   23.7758       14.8552    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316       1242.18         68.08          1.13         39.13          2.40          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1242.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       92
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       93
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      315     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -103.591       103.591       1045.14       1148.73    
   2  0.977343     -0.229176E-01 -0.470306      0.470306       1057.63       1058.10    
   3  0.515611     -0.662402      -13.5935       13.5935       1052.93       1066.53    
   4  0.985018     -0.150949E-01 -0.309772      0.309772       1093.20       1093.51    
   5  0.909744E-01  -2.39718      -49.1938       49.1938       1077.79       1126.99    
   6  0.163485      -1.81103      -37.1652       37.1652       1095.15       1132.31    
   7  0.709610     -0.343039      -7.03969       7.03969       1114.72       1121.76    
   8  0.639309     -0.447368      -9.18068       9.18068       1117.10       1126.28    
   9  0.500633     -0.691882      -14.1985       14.1985       1118.98       1133.18    
  10  0.623218     -0.472859      -9.70380       9.70380       1123.30       1133.00    
  11  0.974620     -0.257075E-01 -0.527557      0.527557       1077.74       1078.27    
  12  0.940866     -0.609540E-01  -1.25087       1.25087       1109.36       1110.61    
  13  0.268848      -1.31361      -26.9573       26.9573       1122.64       1149.60    
  14  0.131404      -2.02948      -41.6480       41.6480       1119.98       1161.63    
  15  0.242045      -1.41863      -29.1125       29.1125       1098.08       1127.19    
  16  0.333489      -1.09815      -22.5357       22.5357       1144.91       1167.45    
  17  0.540917     -0.614489      -12.6103       12.6103       1156.10       1168.71    
  18  0.935945     -0.661981E-01  -1.35849       1.35849       1151.42       1152.78    
  19  0.948265     -0.531218E-01  -1.09014       1.09014       1118.78       1119.87    
  20  0.306672      -1.18198      -24.2560       24.2560       1160.39       1184.65    
  21  0.674766E-01  -2.69597      -55.3255       55.3255       1135.49       1190.81    
  22  0.304885      -1.18782      -24.3759       24.3759       1153.45       1177.83    
  23  0.987276     -0.128055E-01 -0.262788      0.262788       1151.91       1152.17    
  24  0.866309     -0.143514      -2.94513       2.94513       1176.62       1179.57    
  25  0.325072      -1.12371      -23.0602       23.0602       1173.43       1196.49    
  26  0.882651     -0.124826      -2.56162       2.56162       1173.66       1176.22    
  27  0.608994E-02  -5.10112      -104.683       104.683       1183.34       1288.02    
  28  0.956776     -0.441859E-01 -0.906762      0.906762       1184.14       1185.05    
  29  0.680690E-01  -2.68723      -55.1462       55.1462       1182.60       1237.74    
  30  0.870194     -0.139039      -2.85329       2.85329       1191.53       1194.38    
  31  0.154954      -1.86463      -38.2650       38.2650       1190.85       1229.11    
  32  0.533144     -0.628963      -12.9073       12.9073       1202.68       1215.59    
  33  0.848128     -0.164724      -3.38039       3.38039       1148.41       1151.79    
  34  0.302343E-01  -3.49878      -71.8003       71.8003       1199.51       1271.31    
  35  0.670768     -0.399332      -8.19491       8.19491       1165.68       1173.87    
  36  0.575709     -0.552152      -11.3310       11.3310       1178.90       1190.23    
  37  0.961243     -0.395278E-01 -0.811172      0.811172       1156.47       1157.28    
  38  0.174287      -1.74705      -35.8523       35.8523       1162.82       1198.68    
  39  0.450902     -0.796506      -16.3455       16.3455       1147.53       1163.88    
  40  0.807155     -0.214240      -4.39654       4.39654       1163.53       1167.93    
  41  0.245094E-01  -3.70870      -76.1082       76.1082       1162.37       1238.47    
  42  0.840819     -0.173379      -3.55800       3.55800       1195.11       1198.67    
  43  0.418157     -0.871899      -17.8927       17.8927       1200.47       1218.36    
  44  0.795491     -0.228796      -4.69524       4.69524       1215.35       1220.04    
  45  0.675445E-01  -2.69497      -55.3049       55.3049       1219.59       1274.90    
  46  0.158617      -1.84126      -37.7856       37.7856       1200.23       1238.02    
  47  0.538475     -0.619015      -12.7031       12.7031       1167.86       1180.56    
  48  0.318292      -1.14479      -23.4928       23.4928       1228.26       1251.76    
  49  0.427160     -0.850596      -17.4556       17.4556       1242.18       1259.63    
loop,thermsimp(1:2)       93   103.591      0.470306    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317       1091.47         68.10          1.12         39.52          2.02          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1091.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       93
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       94
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      316     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831      -18.0145       18.0145       1057.63       1075.65    
   2  0.262668E-01  -3.63945      -74.6871       74.6871       1052.93       1127.62    
   3  0.620248     -0.477636      -9.80183       9.80183       1077.74       1087.54    
   4  0.249183      -1.38957      -28.5161       28.5161       1093.20       1121.71    
   5  0.999872     -0.128438E-03 -0.263574E-02  0.263574E-02   1109.36       1109.36    
   6  0.933252     -0.690802E-01  -1.41763       1.41763       1118.78       1120.19    
   7  0.857047     -0.154263      -3.16571       3.16571       1114.72       1117.89    
   8  0.365787      -1.00570      -20.6386       20.6386       1117.10       1137.74    
   9  0.499682     -0.693784      -14.2375       14.2375       1077.79       1092.03    
  10  0.761560     -0.272387      -5.58980       5.58980       1098.08       1103.67    
  11  0.793904E-01  -2.53338      -51.9888       51.9888       1095.15       1147.14    
  12  0.514449     -0.664659      -13.6398       13.6398       1123.30       1136.94    
  13  0.678176     -0.388349      -7.96952       7.96952       1118.98       1126.95    
  14  0.257558      -1.35651      -27.8377       27.8377       1045.14       1072.98    
  15  0.832067E-01  -2.48643      -51.0253       51.0253       1122.64       1173.66    
  16  0.272851      -1.29883      -26.6540       26.6540       1148.41       1175.07    
  17  0.255245      -1.36553      -28.0228       28.0228       1151.91       1179.93    
  18  0.419883     -0.867779      -17.8082       17.8082       1151.42       1169.23    
  19  0.870346     -0.138865      -2.84972       2.84972       1156.47       1159.32    
  20  0.814510E-01  -2.50775      -51.4630       51.4630       1119.98       1171.44    
  21  0.560000     -0.579819      -11.8988       11.8988       1147.53       1159.43    
  22  0.860285     -0.150492      -3.08832       3.08832       1144.91       1148.00    
  23  0.538601     -0.618780      -12.6983       12.6983       1163.53       1176.23    
  24  0.542321     -0.611898      -12.5571       12.5571       1156.10       1168.65    
  25  0.836575     -0.178440      -3.66186       3.66186       1165.68       1169.34    
  26  0.705694     -0.348574      -7.15328       7.15328       1173.66       1180.81    
  27  0.301063      -1.20043      -24.6348       24.6348       1153.45       1178.08    
  28  0.125899      -2.07227      -42.5262       42.5262       1176.62       1219.15    
  29  0.476747     -0.740770      -15.2018       15.2018       1167.86       1183.06    
  30  0.676103     -0.391410      -8.03233       8.03233       1160.39       1168.42    
  31  0.385349     -0.953606      -19.5695       19.5695       1184.14       1203.71    
  32  0.141470      -1.95567      -40.1333       40.1333       1178.90       1219.03    
  33  0.146971      -1.91752      -39.3505       39.3505       1135.49       1174.84    
  34  0.616396     -0.483866      -9.92968       9.92968       1191.53       1201.46    
  35  0.962361     -0.383659E-01 -0.787328      0.787328       1173.43       1174.22    
  36  0.618266     -0.480836      -9.86750       9.86750       1195.11       1204.98    
  37  0.369072     -0.996763      -20.4551       20.4551       1162.82       1183.28    
  38  0.312675      -1.16259      -23.8581       23.8581       1202.68       1226.54    
  39  0.367326      -1.00150      -20.5524       20.5524       1200.47       1221.02    
  40  0.184422      -1.69053      -34.6923       34.6923       1215.35       1250.04    
  41  0.113088      -2.17959      -44.7286       44.7286       1190.85       1235.58    
  42  0.333487      -1.09815      -22.5358       22.5358       1182.60       1205.13    
  43  0.407562     -0.897562      -18.4194       18.4194       1200.23       1218.65    
  44  0.443434     -0.813206      -16.6882       16.6882       1162.37       1179.05    
  45  0.265046      -1.32785      -27.2496       27.2496       1228.26       1255.51    
  46  0.444603     -0.810573      -16.6342       16.6342       1242.18       1258.81    
  47  0.689395E-01  -2.67453      -54.8854       54.8854       1199.51       1254.39    
  48  0.862417     -0.148017      -3.03753       3.03753       1219.59       1222.63    
  49  0.541063     -0.614219      -12.6047       12.6047       1091.47       1104.07    
loop,thermsimp(1:2)       94   18.0145       74.6871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318       1216.29         68.11          1.12         39.14          2.17          0.05        110.60
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1216.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       94
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       95
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      317     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797      -25.1998       25.1998       1045.14       1070.34    
   2  0.225242      -1.49058      -30.5890       30.5890       1057.63       1088.22    
   3  0.946430E-01  -2.35764      -48.3825       48.3825       1077.74       1126.12    
   4  0.371694     -0.989684      -20.3098       20.3098       1077.79       1098.10    
   5  0.933291     -0.690381E-01  -1.41677       1.41677       1098.08       1099.50    
   6  0.926571     -0.762651E-01  -1.56508       1.56508       1091.47       1093.03    
   7  0.138048      -1.98015      -40.6358       40.6358       1109.36       1149.99    
   8  0.113008E-01  -4.48288      -91.9957       91.9957       1114.72       1206.72    
   9  0.405736     -0.902053      -18.5115       18.5115       1118.78       1137.29    
  10  0.390885     -0.939341      -19.2767       19.2767       1093.20       1112.48    
  11  0.873008     -0.135810      -2.78703       2.78703       1118.98       1121.76    
  12  0.945037     -0.565316E-01  -1.16012       1.16012       1052.93       1054.09    
  13  0.642194E-01  -2.74545      -56.3409       56.3409       1123.30       1179.64    
  14  0.322052E-01  -3.43563      -70.5044       70.5044       1117.10       1187.61    
  15  0.521559     -0.650933      -13.3581       13.3581       1095.15       1108.50    
  16  0.271788      -1.30273      -26.7341       26.7341       1144.91       1171.65    
  17  0.153503      -1.87403      -38.4581       38.4581       1156.47       1194.93    
  18  0.219303      -1.51730      -31.1374       31.1374       1147.53       1178.67    
  19  0.476616     -0.741044      -15.2074       15.2074       1160.39       1175.60    
  20  0.510024     -0.673297      -13.8171       13.8171       1156.10       1169.91    
  21  0.393388     -0.932959      -19.1458       19.1458       1151.42       1170.56    
  22  0.947927     -0.534776E-01  -1.09744       1.09744       1165.68       1166.77    
  23  0.472009     -0.750758      -15.4067       15.4067       1119.98       1135.39    
  24  0.678717     -0.387551      -7.95314       7.95314       1122.64       1130.59    
  25  0.617620     -0.481882      -9.88897       9.88897       1173.43       1183.32    
  26  0.138594E-01  -4.27879      -87.8074       87.8074       1135.49       1223.29    
  27  0.588445     -0.530273      -10.8820       10.8820       1148.41       1159.30    
  28  0.950805     -0.504465E-01  -1.03524       1.03524       1163.53       1164.56    
  29  0.444108     -0.811687      -16.6571       16.6571       1153.45       1170.11    
  30  0.299195      -1.20666      -24.7625       24.7625       1162.37       1187.13    
  31  0.808517E-01  -2.51514      -51.6145       51.6145       1151.91       1203.52    
  32  0.493903     -0.705415      -14.4762       14.4762       1173.66       1188.14    
  33  0.973584     -0.267710E-01 -0.549382      0.549382       1167.86       1168.41    
  34  0.219889      -1.51463      -31.0826       31.0826       1162.82       1193.91    
  35  0.872114     -0.136835      -2.80807       2.80807       1191.53       1194.34    
  36  0.413991     -0.881912      -18.0982       18.0982       1184.14       1202.24    
  37  0.155656      -1.86011      -38.1723       38.1723       1195.11       1233.28    
  38  0.744603     -0.294905      -6.05190       6.05190       1182.60       1188.65    
  39  0.627736     -0.465635      -9.55555       9.55555       1200.23       1209.79    
  40  0.137880      -1.98137      -40.6608       40.6608       1178.90       1219.56    
  41  0.270817      -1.30631      -26.8075       26.8075       1176.62       1203.43    
  42  0.271872      -1.30243      -26.7278       26.7278       1200.47       1227.20    
  43  0.988104     -0.119670E-01 -0.245581      0.245581       1219.59       1219.84    
  44  0.837729E-01  -2.47965      -50.8862       50.8862       1202.68       1253.57    
  45  0.731806     -0.312240      -6.40766       6.40766       1190.85       1197.26    
  46  0.520356     -0.653242      -13.4055       13.4055       1215.35       1228.75    
  47  0.158934      -1.83927      -37.7446       37.7446       1199.51       1237.25    
  48  0.724534     -0.322226      -6.61258       6.61258       1228.26       1234.88    
  49  0.895315     -0.110580      -2.26926       2.26926       1216.29       1218.56    
loop,thermsimp(1:2)       95   25.1998       30.5890    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319       1207.07         68.05          1.11         39.11          2.23          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1207.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       95
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   45.6686    

hmean,hstd :    1148.90       45.6686    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1148.90       45.6686    
h(1),h(best1),h(np1) :    1052.93       1045.14       1207.07    
htherm(1),htherm(best1),htherm(np1) :    1054.09       1070.34       1253.57    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        1
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      318     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195490      -1.63225      -33.4962       33.4962       1052.93       1086.43    
   2  0.313379      -1.16034      -23.8120       23.8120       1045.14       1068.95    
   3  0.769177     -0.262434      -5.38555       5.38555       1057.63       1063.02    
   4  0.884560E-01  -2.42525      -49.7699       49.7699       1091.47       1141.24    
   5  0.890596     -0.115865      -2.37773       2.37773       1077.79       1080.17    
   6  0.657268     -0.419664      -8.61215       8.61215       1098.08       1106.69    
   7  0.960898     -0.398874E-01 -0.818551      0.818551       1095.15       1095.97    
   8  0.613422E-01  -2.79129      -57.2815       57.2815       1093.20       1150.48    
   9  0.264483E-01  -3.63256      -74.5458       74.5458       1118.98       1193.52    
  10  0.304822      -1.18803      -24.3802       24.3802       1077.74       1102.12    
  11  0.977907     -0.223409E-01 -0.458469      0.458469       1122.64       1123.10    
  12  0.746737     -0.292042      -5.99316       5.99316       1119.98       1125.97    
  13  0.450918E-01  -3.09905      -63.5974       63.5974       1118.78       1182.37    
  14  0.625433     -0.469311      -9.63099       9.63099       1109.36       1118.99    
  15  0.990029     -0.100208E-01 -0.205642      0.205642       1148.41       1148.62    
  16  0.985060     -0.150527E-01 -0.308905      0.308905       1163.53       1163.84    
  17  0.691362     -0.369092      -7.57434       7.57434       1165.68       1173.25    
  18  0.864323E-02  -4.75098      -97.4974       97.4974       1167.86       1265.36    
  19  0.908027E-01  -2.39907      -49.2326       49.2326       1156.10       1205.33    
  20  0.500093     -0.692962      -14.2206       14.2206       1153.45       1167.67    
  21  0.806913     -0.214539      -4.40268       4.40268       1151.42       1155.82    
  22  0.317749      -1.14649      -23.5278       23.5278       1144.91       1168.44    
  23  0.753050     -0.283623      -5.82039       5.82039       1160.39       1166.21    
  24  0.850048     -0.162463      -3.33398       3.33398       1147.53       1150.87    
  25  0.346718      -1.05924      -21.7373       21.7373       1123.30       1145.03    
  26  0.731558     -0.312579      -6.41460       6.41460       1173.43       1179.84    
  27  0.226645      -1.48437      -30.4616       30.4616       1162.37       1192.83    
  28  0.887805     -0.119003      -2.44212       2.44212       1117.10       1119.54    
  29  0.277731      -1.28110      -26.2902       26.2902       1173.66       1199.95    
  30  0.914814     -0.890349E-01  -1.82713       1.82713       1182.60       1184.43    
  31  0.298911      -1.20761      -24.7820       24.7820       1162.82       1187.61    
  32  0.469757     -0.755540      -15.5048       15.5048       1191.53       1207.04    
  33  0.217087      -1.52746      -31.3458       31.3458       1156.47       1187.82    
  34  0.143996      -1.93797      -39.7702       39.7702       1190.85       1230.62    
  35  0.873815     -0.134887      -2.76808       2.76808       1184.14       1186.91    
  36  0.102289      -2.27995      -46.7881       46.7881       1176.62       1223.41    
  37  0.583483     -0.538740      -11.0558       11.0558       1151.91       1162.97    
  38  0.308185      -1.17705      -24.1550       24.1550       1114.72       1138.88    
  39  0.129509      -2.04400      -41.9461       41.9461       1200.23       1242.18    
  40  0.858329     -0.152767      -3.13502       3.13502       1216.29       1219.42    
  41  0.247121      -1.39788      -28.6866       28.6866       1178.90       1207.58    
  42  0.672462     -0.396810      -8.14315       8.14315       1219.59       1227.73    
  43  0.978226     -0.220145E-01 -0.451771      0.451771       1135.49       1135.94    
  44  0.571205     -0.560006      -11.4922       11.4922       1200.47       1211.96    
  45  0.390724E-01  -3.24234      -66.5378       66.5378       1215.35       1281.89    
  46  0.773307     -0.257080      -5.27567       5.27567       1195.11       1200.39    
  47  0.860034     -0.150783      -3.09430       3.09430       1228.26       1231.36    
  48  0.521048     -0.651913      -13.3783       13.3783       1199.51       1212.89    
  49  0.577715     -0.548675      -11.2597       11.2597       1207.07       1218.33    
loop,thermsimp(1:2)        1   33.4962       23.8120    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320       1074.35         68.12          1.12         39.13          2.39          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321       1265.87         68.14          1.12         39.18          2.23          0.05        110.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    1265.9        2.815     -3.786      4.248     -102.6     0.1034    
                      0.1590     0.9162     -99.70      4.847     0.5266    

                       3.382     -1.908      1.824      7071.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.534      0.000      0.000      7000.      679.5    

                      -1.238     -5.907     -7.261     -7.135      9.158    

                      -3.448     -3.949      4945.      0.000      6650.    



                       3138.      7282.      7618.      2487.      2694.    

                       4703.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.135     -1.709     -2.180     -2.183    -0.3807    

                     -0.3252      9.557      8.540    -0.1639E+05 -5.165    

                      0.6061     -2.345      8.965      8.985    -0.1969E+05



                      -6.000     0.4341    -0.2971      9.000      8.923    

                     -0.1944E+05 -6.000     -3.025    -0.6683      9.661    

                       9.430    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1074.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        1
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        2
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      320     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233544      -1.45438      -29.8462       29.8462       1057.63       1087.48    
   2  0.293881      -1.22458      -25.1303       25.1303       1045.14       1070.27    
   3  0.833435     -0.182199      -3.73901       3.73901       1077.79       1081.53    
   4  0.931284     -0.711905E-01  -1.46094       1.46094       1052.93       1054.39    
   5  0.965536     -0.350722E-01 -0.719736      0.719736       1095.15       1095.87    
   6  0.534034     -0.627296      -12.8731       12.8731       1077.74       1090.61    
   7  0.975689     -0.246118E-01 -0.505071      0.505071       1098.08       1098.59    
   8  0.958131     -0.427704E-01 -0.877716      0.877716       1109.36       1110.24    
   9  0.487835     -0.717779      -14.7299       14.7299       1117.10       1131.83    
  10  0.941751     -0.600144E-01  -1.23159       1.23159       1122.64       1123.87    
  11  0.764698     -0.268274      -5.50540       5.50540       1119.98       1125.49    
  12  0.282403      -1.26442      -25.9478       25.9478       1135.49       1161.44    
  13  0.694349     -0.364781      -7.48587       7.48587       1114.72       1122.21    
  14  0.257622      -1.35626      -27.8326       27.8326       1091.47       1119.30    
  15  0.401572     -0.912369      -18.7232       18.7232       1123.30       1142.02    
  16  0.828654     -0.187952      -3.85707       3.85707       1148.41       1152.27    
  17  0.113844      -2.17292      -44.5917       44.5917       1093.20       1137.79    
  18  0.383967     -0.957199      -19.6432       19.6432       1147.53       1167.18    
  19  0.767294     -0.264886      -5.43586       5.43586       1151.42       1156.85    
  20  0.230085      -1.46930      -30.1524       30.1524       1151.91       1182.06    
  21  0.248551      -1.39211      -28.5682       28.5682       1163.53       1192.10    
  22  0.739043     -0.302399      -6.20568       6.20568       1160.39       1166.59    
  23  0.427702     -0.849328      -17.4295       17.4295       1153.45       1170.88    
  24  0.217549      -1.52533      -31.3021       31.3021       1144.91       1176.22    
  25  0.126759      -2.06546      -42.3865       42.3865       1165.68       1208.06    
  26  0.278624      -1.27789      -26.2243       26.2243       1173.43       1199.65    
  27  0.736668     -0.305618      -6.27175       6.27175       1118.78       1125.05    
  28  0.183809      -1.69386      -34.7605       34.7605       1182.60       1217.36    
  29  0.915242     -0.885666E-01  -1.81752       1.81752       1184.14       1185.96    
  30  0.864610     -0.145477      -2.98541       2.98541       1162.82       1165.81    
  31  0.996457     -0.354911E-02 -0.728332E-01  0.728332E-01   1156.47       1156.55    
  32  0.937047     -0.650222E-01  -1.33436       1.33436       1162.37       1163.70    
  33  0.664908     -0.408106      -8.37497       8.37497       1118.98       1127.35    
  34  0.409422     -0.893009      -18.3259       18.3259       1173.66       1191.99    
  35  0.293825E-01  -3.52736      -72.3868       72.3868       1195.11       1267.50    
  36  0.528099     -0.638471      -13.1024       13.1024       1156.10       1169.20    
  37  0.582244E-01  -2.84345      -58.3520       58.3520       1191.53       1249.88    
  38  0.394879     -0.929175      -19.0681       19.0681       1178.90       1197.97    
  39  0.619316     -0.479139      -9.83268       9.83268       1200.47       1210.30    
  40  0.760056     -0.274363      -5.63035       5.63035       1199.51       1205.14    
  41  0.322606      -1.13132      -23.2165       23.2165       1207.07       1230.28    
  42  0.806034     -0.215629      -4.42504       4.42504       1216.29       1220.71    
  43  0.158197      -1.84391      -37.8399       37.8399       1176.62       1214.46    
  44  0.964399     -0.362497E-01 -0.743900      0.743900       1219.59       1220.33    
  45  0.891984     -0.114307      -2.34575       2.34575       1190.85       1193.19    
  46  0.896576E-01  -2.41176      -49.4930       49.4930       1228.26       1277.76    
  47  0.976522     -0.237576E-01 -0.487542      0.487542       1200.23       1200.72    
  48  0.145640      -1.92662      -39.5371       39.5371       1167.86       1207.40    
  49  0.580689E-01  -2.84612      -58.4069       58.4069       1074.35       1132.76    
loop,thermsimp(1:2)        2   29.8462       25.1303    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322       1080.20         68.12          1.14         39.15          2.47          0.04        110.92
Just calling func    0   0        110.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1080.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        2
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        3
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      321     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.402951     -0.908939      -18.6528       18.6528       1052.93       1071.59    
   2  0.995767     -0.424237E-02 -0.870600E-01  0.870600E-01   1045.14       1045.23    
   3  0.232708      -1.45797      -29.9198       29.9198       1077.79       1107.71    
   4  0.844104     -0.169480      -3.47799       3.47799       1057.63       1061.11    
   5  0.835080     -0.180228      -3.69855       3.69855       1077.74       1081.44    
   6  0.492927     -0.707395      -14.5168       14.5168       1095.15       1109.66    
   7  0.669838     -0.400719      -8.22337       8.22337       1098.08       1106.30    
   8  0.161727      -1.82184      -37.3870       37.3870       1109.36       1146.75    
   9  0.712877     -0.338447      -6.94545       6.94545       1091.47       1098.41    
  10  0.187101      -1.67610      -34.3963       34.3963       1114.72       1149.12    
  11  0.152475      -1.88075      -38.5959       38.5959       1122.64       1161.24    
  12  0.299805      -1.20462      -24.7207       24.7207       1118.78       1143.50    
  13  0.388928     -0.944360      -19.3797       19.3797       1119.98       1139.36    
  14  0.396030     -0.926264      -19.0084       19.0084       1118.98       1137.99    
  15  0.795332     -0.228996      -4.69935       4.69935       1117.10       1121.80    
  16  0.209301      -1.56398      -32.0953       32.0953       1074.35       1106.45    
  17  0.292717      -1.22855      -25.2117       25.2117       1093.20       1118.41    
  18  0.128603E-01  -4.35361      -89.3427       89.3427       1123.30       1212.64    
  19  0.386579E-01  -3.25301      -66.7567       66.7567       1148.41       1215.17    
  20  0.284417      -1.25731      -25.8020       25.8020       1156.47       1182.28    
  21  0.962037     -0.387027E-01 -0.794238      0.794238       1151.42       1152.21    
  22  0.340824      -1.07639      -22.0891       22.0891       1135.49       1157.58    
  23  0.463892     -0.768103      -15.7627       15.7627       1162.37       1178.13    
  24  0.772349     -0.258319      -5.30111       5.30111       1162.82       1168.13    
  25  0.580884     -0.543204      -11.1474       11.1474       1160.39       1171.54    
  26  0.519264     -0.655343      -13.4487       13.4487       1147.53       1160.98    
  27  0.336321      -1.08969      -22.3621       22.3621       1156.10       1178.46    
  28  0.975360     -0.249491E-01 -0.511993      0.511993       1153.45       1153.96    
  29  0.768530     -0.263276      -5.40283       5.40283       1144.91       1150.32    
  30  0.536540     -0.622614      -12.7770       12.7770       1151.91       1164.69    
  31  0.922732     -0.804161E-01  -1.65026       1.65026       1184.14       1185.79    
  32  0.603353     -0.505252      -10.3686       10.3686       1173.66       1184.03    
  33  0.927279E-01  -2.37809      -48.8020       48.8020       1163.53       1212.33    
  34  0.180890      -1.70987      -35.0891       35.0891       1190.85       1225.94    
  35  0.933825E-01  -2.37105      -48.6576       48.6576       1178.90       1227.56    
  36  0.343444      -1.06873      -21.9320       21.9320       1173.43       1195.36    
  37  0.102193      -2.28089      -46.8074       46.8074       1200.23       1247.04    
  38  0.397576     -0.922370      -18.9285       18.9285       1199.51       1218.44    
  39  0.455007     -0.787443      -16.1595       16.1595       1167.86       1184.02    
  40  0.559910     -0.579979      -11.9021       11.9021       1165.68       1177.58    
  41  0.901058     -0.104186      -2.13806       2.13806       1200.47       1202.61    
  42  0.849435     -0.163184      -3.34878       3.34878       1176.62       1179.97    
  43  0.231812      -1.46183      -29.9989       29.9989       1182.60       1212.60    
  44  0.119620      -2.12344      -43.5762       43.5762       1219.59       1263.17    
  45  0.885994     -0.121045      -2.48403       2.48403       1216.29       1218.77    
  46  0.166933      -1.79016      -36.7369       36.7369       1207.07       1243.80    
  47  0.284605      -1.25665      -25.7885       25.7885       1191.53       1217.32    
  48  0.392630     -0.934887      -19.1853       19.1853       1195.11       1214.30    
  49  0.275341      -1.28974      -26.4675       26.4675       1080.20       1106.67    
loop,thermsimp(1:2)        3   18.6528      0.870600E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323       1242.99         68.18          1.12         39.14          2.35          0.05        110.84
Just calling func    0   0        110.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1242.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        3
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        4
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      322     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344716      -1.06504      -21.8562       21.8562       1045.14       1067.00    
   2  0.337825      -1.08523      -22.2705       22.2705       1057.63       1079.90    
   3  0.129257      -2.04595      -41.9861       41.9861       1052.93       1094.92    
   4  0.218013      -1.52320      -31.2585       31.2585       1077.74       1109.00    
   5  0.764988     -0.267896      -5.49763       5.49763       1091.47       1096.97    
   6  0.134235      -2.00816      -41.2106       41.2106       1098.08       1139.29    
   7  0.921891     -0.813288E-01  -1.66899       1.66899       1074.35       1076.02    
   8  0.879140E-01  -2.43140      -49.8960       49.8960       1080.20       1130.10    
   9  0.853506     -0.158403      -3.25066       3.25066       1077.79       1081.04    
  10  0.781888     -0.246043      -5.04919       5.04919       1095.15       1100.20    
  11  0.572060     -0.558512      -11.4615       11.4615       1093.20       1104.66    
  12  0.370929     -0.991745      -20.3521       20.3521       1117.10       1137.45    
  13  0.659208     -0.416716      -8.55166       8.55166       1118.98       1127.53    
  14  0.192080      -1.64984      -33.8573       33.8573       1119.98       1153.84    
  15  0.834249     -0.181224      -3.71899       3.71899       1118.78       1122.50    
  16  0.275735      -1.28831      -26.4382       26.4382       1109.36       1135.80    
  17  0.899896     -0.105476      -2.16453       2.16453       1114.72       1116.89    
  18  0.263842      -1.33241      -27.3430       27.3430       1144.91       1172.26    
  19  0.542051     -0.612396      -12.5673       12.5673       1151.42       1163.99    
  20  0.883103     -0.124314      -2.55111       2.55111       1153.45       1156.00    
  21  0.603547     -0.504931      -10.3620       10.3620       1135.49       1145.85    
  22  0.461006     -0.774344      -15.8907       15.8907       1147.53       1163.42    
  23  0.640920     -0.444850      -9.12901       9.12901       1122.64       1131.77    
  24  0.787319     -0.239122      -4.90715       4.90715       1151.91       1156.82    
  25  0.258775E-01  -3.65438      -74.9936       74.9936       1162.82       1237.82    
  26  0.838926     -0.175633      -3.60426       3.60426       1160.39       1163.99    
  27  0.184807      -1.68845      -34.6495       34.6495       1165.68       1200.33    
  28  0.642750     -0.441999      -9.07050       9.07050       1162.37       1171.44    
  29  0.962815     -0.378938E-01 -0.777638      0.777638       1156.10       1156.88    
  30  0.866393     -0.143417      -2.94313       2.94313       1176.62       1179.57    
  31  0.652626     -0.426751      -8.75758       8.75758       1156.47       1165.23    
  32  0.170956      -1.76635      -36.2482       36.2482       1167.86       1204.11    
  33  0.769008     -0.262654      -5.39007       5.39007       1173.66       1179.05    
  34  0.156770      -1.85298      -38.0260       38.0260       1184.14       1222.17    
  35  0.256549E-01  -3.66302      -75.1709       75.1709       1173.43       1248.60    
  36  0.726661     -0.319295      -6.55242       6.55242       1200.47       1207.02    
  37  0.556665     -0.585792      -12.0213       12.0213       1163.53       1175.55    
  38  0.381201     -0.964427      -19.7915       19.7915       1182.60       1202.39    
  39  0.312648      -1.16268      -23.8599       23.8599       1123.30       1147.16    
  40  0.523641     -0.646949      -13.2764       13.2764       1195.11       1208.39    
  41  0.525107     -0.644154      -13.2190       13.2190       1148.41       1161.63    
  42  0.577096     -0.549746      -11.2816       11.2816       1191.53       1202.81    
  43  0.218919      -1.51905      -31.1733       31.1733       1199.51       1230.68    
  44  0.406968     -0.899021      -18.4493       18.4493       1216.29       1234.74    
  45  0.269244      -1.31214      -26.9271       26.9271       1190.85       1217.77    
  46  0.150666      -1.89269      -38.8409       38.8409       1178.90       1217.74    
  47  0.619490     -0.478859      -9.82693       9.82693       1207.07       1216.89    
  48  0.204317      -1.58808      -32.5899       32.5899       1200.23       1232.82    
  49  0.924766     -0.782150E-01  -1.60509       1.60509       1242.99       1244.59    
loop,thermsimp(1:2)        4   21.8562       22.2705    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324       1094.75         68.10          1.13         39.10          2.32          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1094.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        4
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        5
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      323     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993880     -0.613850E-02 -0.125971      0.125971       1045.14       1045.27    
   2  0.544036     -0.608740      -12.4923       12.4923       1074.35       1086.84    
   3  0.752151     -0.284818      -5.84490       5.84490       1057.63       1063.48    
   4  0.128894      -2.04876      -42.0438       42.0438       1077.79       1119.84    
   5  0.954586     -0.464781E-01 -0.953802      0.953802       1052.93       1053.89    
   6  0.699109     -0.357949      -7.34567       7.34567       1091.47       1098.81    
   7  0.158831      -1.83992      -37.7579       37.7579       1095.15       1132.90    
   8  0.317803      -1.14632      -23.5243       23.5243       1093.20       1116.72    
   9  0.533633     -0.628047      -12.8885       12.8885       1077.74       1090.63    
  10  0.232061      -1.46076      -29.9770       29.9770       1114.72       1144.70    
  11  0.798671     -0.224806      -4.61336       4.61336       1118.78       1123.39    
  12  0.629719     -0.462482      -9.49084       9.49084       1118.98       1128.47    
  13  0.285415      -1.25381      -25.7301       25.7301       1080.20       1105.93    
  14  0.101345      -2.28923      -46.9784       46.9784       1122.64       1169.62    
  15  0.523846     -0.646557      -13.2684       13.2684       1109.36       1122.63    
  16  0.570798     -0.560721      -11.5069       11.5069       1117.10       1128.61    
  17  0.471006     -0.752884      -15.4503       15.4503       1098.08       1113.53    
  18  0.439034     -0.823179      -16.8929       16.8929       1135.49       1152.38    
  19  0.755118     -0.280881      -5.76412       5.76412       1123.30       1129.06    
  20  0.987033     -0.130515E-01 -0.267837      0.267837       1119.98       1120.25    
  21  0.800390E-01  -2.52524      -51.8218       51.8218       1153.45       1205.27    
  22  0.739282     -0.302075      -6.19905       6.19905       1151.91       1158.11    
  23  0.367536      -1.00093      -20.5407       20.5407       1156.10       1176.64    
  24  0.397431     -0.922735      -18.9359       18.9359       1148.41       1167.35    
  25  0.338773      -1.08242      -22.2130       22.2130       1147.53       1169.75    
  26  0.388721     -0.944893      -19.3907       19.3907       1151.42       1170.81    
  27  0.298998      -1.20732      -24.7760       24.7760       1160.39       1185.17    
  28  0.668470     -0.402763      -8.26533       8.26533       1156.47       1164.74    
  29  0.604587     -0.503210      -10.3266       10.3266       1162.37       1172.69    
  30  0.455577     -0.786190      -16.1338       16.1338       1144.91       1161.05    
  31  0.842360     -0.171548      -3.52044       3.52044       1163.53       1167.05    
  32  0.452047     -0.793969      -16.2935       16.2935       1173.66       1189.95    
  33  0.994488     -0.552709E-02 -0.113425      0.113425       1176.62       1176.74    
  34  0.309000E-02  -5.77958      -118.606       118.606       1165.68       1284.28    
  35  0.171789      -1.76149      -36.1484       36.1484       1182.60       1218.75    
  36  0.567417     -0.566661      -11.6288       11.6288       1191.53       1203.16    
  37  0.885121     -0.122031      -2.50426       2.50426       1167.86       1170.36    
  38  0.342608      -1.07117      -21.9820       21.9820       1200.47       1222.45    
  39  0.954017     -0.470733E-01 -0.966017      0.966017       1195.11       1196.08    
  40  0.439346     -0.822467      -16.8783       16.8783       1207.07       1223.94    
  41  0.237365E-01  -3.74074      -76.7658       76.7658       1178.90       1255.66    
  42  0.100236      -2.30023      -47.2042       47.2042       1190.85       1238.05    
  43  0.539338     -0.617412      -12.6703       12.6703       1184.14       1196.81    
  44  0.825393     -0.191896      -3.93801       3.93801       1199.51       1203.45    
  45  0.252744      -1.37538      -28.2249       28.2249       1200.23       1228.46    
  46  0.676050     -0.391488      -8.03393       8.03393       1216.29       1224.32    
  47  0.621378     -0.475815      -9.76447       9.76447       1162.82       1172.59    
  48  0.375614     -0.979194      -20.0946       20.0946       1242.99       1263.08    
  49  0.638637     -0.448418      -9.20224       9.20224       1094.75       1103.95    
loop,thermsimp(1:2)        5  0.125971       12.4923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325       1093.21         68.12          1.11         39.20          2.27          0.05        110.74
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1093.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        5
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        6
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      324     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.342475      -1.07156      -21.9900       21.9900       1045.14       1067.13    
   2  0.738210     -0.303527      -6.22885       6.22885       1052.93       1059.16    
   3  0.254388      -1.36889      -28.0918       28.0918       1057.63       1085.72    
   4  0.184184      -1.69182      -34.7187       34.7187       1074.35       1109.07    
   5  0.467311     -0.760760      -15.6120       15.6120       1077.74       1093.35    
   6  0.718957     -0.329953      -6.77115       6.77115       1091.47       1098.24    
   7  0.233172      -1.45598      -29.8789       29.8789       1094.75       1124.63    
   8  0.855319     -0.156281      -3.20712       3.20712       1080.20       1083.41    
   9  0.331323      -1.10466      -22.6694       22.6694       1098.08       1120.75    
  10  0.737635E-01  -2.60689      -53.4974       53.4974       1093.20       1146.70    
  11  0.960656     -0.401393E-01 -0.823721      0.823721       1077.79       1078.62    
  12  0.312287      -1.16383      -23.8836       23.8836       1119.98       1143.86    
  13  0.252190      -1.37757      -28.2699       28.2699       1109.36       1137.63    
  14  0.775876     -0.253763      -5.20760       5.20760       1118.78       1123.98    
  15  0.397248     -0.923194      -18.9454       18.9454       1118.98       1137.92    
  16  0.587084E-01  -2.83517      -58.1821       58.1821       1117.10       1175.28    
  17  0.923214     -0.798941E-01  -1.63955       1.63955       1123.30       1124.94    
  18  0.147001      -1.91731      -39.3462       39.3462       1095.15       1134.49    
  19  0.275551      -1.28898      -26.4519       26.4519       1114.72       1141.17    
  20  0.157032      -1.85131      -37.9917       37.9917       1135.49       1173.48    
  21  0.468534     -0.758146      -15.5583       15.5583       1151.91       1167.47    
  22  0.101055      -2.29209      -47.0372       47.0372       1144.91       1191.95    
  23  0.891765     -0.114553      -2.35080       2.35080       1156.47       1158.82    
  24  0.756241     -0.279395      -5.73361       5.73361       1163.53       1169.26    
  25  0.212181E-01  -3.85290      -79.0675       79.0675       1148.41       1227.48    
  26  0.807607     -0.213679      -4.38503       4.38503       1122.64       1127.02    
  27  0.233854      -1.45306      -29.8190       29.8190       1147.53       1177.35    
  28  0.622600     -0.473852      -9.72417       9.72417       1167.86       1177.58    
  29  0.188561      -1.66833      -34.2368       34.2368       1151.42       1185.66    
  30  0.938432E-01  -2.36613      -48.5566       48.5566       1162.82       1211.38    
  31  0.846333     -0.166843      -3.42387       3.42387       1162.37       1165.79    
  32  0.258796      -1.35172      -27.7393       27.7393       1156.10       1183.84    
  33  0.503854     -0.685469      -14.0669       14.0669       1176.62       1190.69    
  34  0.577410     -0.549202      -11.2705       11.2705       1160.39       1171.66    
  35  0.282259E-01  -3.56751      -73.2109       73.2109       1173.66       1246.87    
  36  0.618901     -0.479811      -9.84645       9.84645       1195.11       1204.96    
  37  0.563982     -0.572733      -11.7534       11.7534       1184.14       1195.89    
  38  0.290650      -1.23563      -25.3571       25.3571       1191.53       1216.89    
  39  0.165662      -1.79781      -36.8938       36.8938       1199.51       1236.40    
  40  0.871949E-01  -2.43961      -50.0645       50.0645       1153.45       1203.51    
  41  0.494744     -0.703714      -14.4413       14.4413       1182.60       1197.04    
  42  0.156326      -1.85581      -38.0841       38.0841       1200.47       1238.55    
  43  0.558357     -0.582757      -11.9591       11.9591       1207.07       1219.02    
  44  0.974745     -0.255792E-01 -0.524924      0.524924       1216.29       1216.81    
  45  0.399321     -0.917991      -18.8386       18.8386       1200.23       1219.07    
  46  0.649792     -0.431103      -8.84690       8.84690       1190.85       1199.69    
  47  0.210634      -1.55763      -31.9650       31.9650       1178.90       1210.86    
  48  0.939937     -0.619427E-01  -1.27116       1.27116       1242.99       1244.26    
  49  0.617394     -0.482248      -9.89647       9.89647       1093.21       1103.10    
loop,thermsimp(1:2)        6   21.9900       6.22885    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326       1134.47         68.07          1.12         39.30          2.09          0.05        110.63
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1134.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        6
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        7
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      325     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.667416     -0.404342      -8.29773       8.29773       1052.93       1061.23    
   2  0.361364E-01  -3.32046      -68.1409       68.1409       1045.14       1113.28    
   3  0.167171      -1.78874      -36.7076       36.7076       1077.79       1114.50    
   4  0.268590E-01  -3.61716      -74.2296       74.2296       1080.20       1154.43    
   5  0.979339     -0.208774E-01 -0.428436      0.428436       1057.63       1058.06    
   6  0.285956E-01  -3.55450      -72.9439       72.9439       1077.74       1150.68    
   7  0.614036     -0.487701      -10.0084       10.0084       1091.47       1101.48    
   8  0.291622      -1.23230      -25.2886       25.2886       1093.21       1118.50    
   9  0.495778     -0.701626      -14.3985       14.3985       1074.35       1088.75    
  10  0.289385      -1.24000      -25.4467       25.4467       1098.08       1123.53    
  11  0.601390     -0.508511      -10.4354       10.4354       1118.78       1129.21    
  12  0.868837     -0.140599      -2.88531       2.88531       1094.75       1097.63    
  13  0.289097E-01  -3.54358      -72.7197       72.7197       1123.30       1196.02    
  14  0.999895     -0.104574E-03 -0.214603E-02  0.214603E-02   1122.64       1122.64    
  15  0.547924     -0.601620      -12.3462       12.3462       1095.15       1107.49    
  16  0.562607     -0.575175      -11.8035       11.8035       1109.36       1121.16    
  17  0.422387     -0.861832      -17.6861       17.6861       1118.98       1136.66    
  18  0.934703     -0.675264E-01  -1.38575       1.38575       1114.72       1116.11    
  19  0.484044     -0.725579      -14.8900       14.8900       1119.98       1134.87    
  20  0.362136      -1.01574      -20.8445       20.8445       1093.20       1114.04    
  21  0.826677     -0.190341      -3.90609       3.90609       1156.47       1160.38    
  22  0.383965     -0.957204      -19.6433       19.6433       1162.37       1182.01    
  23  0.403854     -0.906702      -18.6069       18.6069       1151.91       1170.52    
  24  0.375365     -0.979857      -20.1082       20.1082       1163.53       1183.64    
  25  0.335540      -1.09201      -22.4098       22.4098       1160.39       1182.80    
  26  0.744256     -0.295370      -6.06144       6.06144       1135.49       1141.55    
  27  0.611040     -0.492593      -10.1088       10.1088       1117.10       1127.21    
  28  0.361728      -1.01686      -20.8676       20.8676       1147.53       1168.40    
  29  0.381582     -0.963430      -19.7711       19.7711       1167.86       1187.63    
  30  0.738884E-01  -2.60520      -53.4627       53.4627       1156.10       1209.56    
  31  0.185722E-01  -3.98609      -81.8008       81.8008       1151.42       1233.22    
  32  0.470279     -0.754429      -15.4821       15.4821       1176.62       1192.10    
  33  0.499505     -0.694139      -14.2448       14.2448       1144.91       1159.16    
  34  0.641578     -0.443824      -9.10796       9.10796       1184.14       1193.25    
  35  0.462400     -0.771325      -15.8288       15.8288       1182.60       1198.43    
  36  0.953656     -0.474527E-01 -0.973802      0.973802       1190.85       1191.82    
  37  0.305321E-01  -3.48898      -71.5992       71.5992       1153.45       1225.05    
  38  0.281396      -1.26799      -26.0212       26.0212       1195.11       1221.13    
  39  0.642231     -0.442807      -9.08708       9.08708       1178.90       1187.99    
  40  0.506226     -0.680772      -13.9705       13.9705       1162.82       1176.79    
  41  0.152451      -1.88091      -38.5993       38.5993       1216.29       1254.89    
  42  0.825356     -0.191941      -3.93892       3.93892       1191.53       1195.47    
  43  0.895901     -0.109926      -2.25584       2.25584       1207.07       1209.32    
  44  0.706880     -0.346894      -7.11881       7.11881       1200.23       1207.35    
  45  0.810453     -0.210162      -4.31285       4.31285       1148.41       1152.73    
  46  0.463153     -0.769698      -15.7954       15.7954       1199.51       1215.30    
  47  0.333587      -1.09785      -22.5296       22.5296       1200.47       1223.00    
  48  0.588678     -0.529875      -10.8739       10.8739       1242.99       1253.86    
  49  0.724542E-01  -2.62480      -53.8650       53.8650       1134.47       1188.34    
loop,thermsimp(1:2)        7   8.29773       68.1409    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327       1201.45         68.08          1.13         39.24          2.26          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1201.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        7
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        8
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      326     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.832859     -0.182891      -3.75322       3.75322       1057.63       1061.38    
   2  0.610299     -0.493806      -10.1337       10.1337       1052.93       1063.07    
   3  0.652915     -0.426308      -8.74849       8.74849       1074.35       1083.10    
   4  0.273016      -1.29823      -26.6416       26.6416       1094.75       1121.39    
   5  0.570853     -0.560623      -11.5048       11.5048       1091.47       1102.97    
   6  0.107477E-01  -4.53306      -93.0255       93.0255       1095.15       1188.17    
   7  0.651717     -0.428145      -8.78620       8.78620       1045.14       1053.93    
   8  0.214404      -1.53989      -31.6010       31.6010       1093.20       1124.80    
   9  0.132680      -2.01982      -41.4498       41.4498       1077.79       1119.24    
  10  0.370727     -0.992290      -20.3633       20.3633       1114.72       1135.09    
  11  0.330444      -1.10732      -22.7239       22.7239       1093.21       1115.93    
  12  0.462713     -0.770647      -15.8149       15.8149       1109.36       1125.17    
  13  0.514022     -0.665489      -13.6569       13.6569       1122.64       1136.30    
  14  0.644984     -0.438530      -8.99932       8.99932       1098.08       1107.08    
  15  0.813975     -0.205826      -4.22387       4.22387       1117.10       1121.32    
  16  0.434803     -0.832863      -17.0916       17.0916       1118.78       1135.87    
  17  0.212985      -1.54653      -31.7372       31.7372       1119.98       1151.72    
  18  0.796179     -0.227931      -4.67749       4.67749       1118.98       1123.65    
  19  0.259948      -1.34727      -27.6481       27.6481       1135.49       1163.14    
  20  0.526723     -0.641081      -13.1560       13.1560       1077.74       1090.90    
  21  0.392691     -0.934731      -19.1821       19.1821       1148.41       1167.60    
  22  0.949472     -0.518494E-01  -1.06403       1.06403       1080.20       1081.27    
  23  0.665479E-01  -2.70983      -55.6100       55.6100       1144.91       1200.52    
  24  0.927466E-01  -2.37788      -48.7979       48.7979       1156.47       1205.27    
  25  0.630503     -0.461237      -9.46529       9.46529       1147.53       1157.00    
  26  0.714749     -0.335823      -6.89162       6.89162       1151.91       1158.80    
  27  0.450999     -0.796290      -16.3411       16.3411       1162.82       1179.17    
  28  0.184997      -1.68742      -34.6284       34.6284       1162.37       1196.99    
  29  0.989607     -0.104473E-01 -0.214395      0.214395       1160.39       1160.60    
  30  0.530766     -0.633434      -12.9990       12.9990       1163.53       1176.53    
  31  0.495227     -0.702738      -14.4213       14.4213       1167.86       1182.28    
  32  0.787696     -0.238642      -4.89731       4.89731       1178.90       1183.80    
  33  0.168123      -1.78306      -36.5912       36.5912       1134.47       1171.07    
  34  0.205580      -1.58192      -32.4635       32.4635       1190.85       1223.31    
  35  0.182087      -1.70327      -34.9538       34.9538       1176.62       1211.58    
  36  0.320489      -1.13791      -23.3516       23.3516       1184.14       1207.49    
  37  0.591526     -0.525050      -10.7748       10.7748       1191.53       1202.31    
  38  0.374258     -0.982811      -20.1688       20.1688       1123.30       1143.47    
  39  0.578871     -0.546675      -11.2186       11.2186       1182.60       1193.82    
  40  0.542113     -0.612280      -12.5649       12.5649       1200.23       1212.80    
  41  0.123399      -2.09233      -42.9379       42.9379       1207.07       1250.00    
  42  0.874747     -0.133820      -2.74620       2.74620       1156.10       1158.84    
  43  0.521146     -0.651725      -13.3744       13.3744       1199.51       1212.88    
  44  0.160493      -1.82950      -37.5442       37.5442       1195.11       1232.66    
  45  0.606451     -0.500131      -10.2635       10.2635       1200.47       1210.73    
  46  0.947463     -0.539676E-01  -1.10750       1.10750       1153.45       1154.56    
  47  0.187698      -1.67292      -34.3309       34.3309       1151.42       1185.75    
  48  0.157453      -1.84863      -37.9368       37.9368       1242.99       1280.93    
  49  0.411413     -0.888157      -18.2263       18.2263       1201.45       1219.68    
loop,thermsimp(1:2)        8   3.75322       10.1337    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328       1192.65         67.99          1.12         39.45          2.08          0.04        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1192.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        8
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:        9
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      327     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.193078      -1.64466      -33.7510       33.7510       1045.14       1078.89    
   2  0.822950     -0.194860      -3.99883       3.99883       1057.63       1061.63    
   3  0.396787     -0.924357      -18.9692       18.9692       1052.93       1071.90    
   4  0.141060      -1.95857      -40.1929       40.1929       1080.20       1120.40    
   5  0.673747     -0.394901      -8.10398       8.10398       1074.35       1082.46    
   6  0.142835      -1.94606      -39.9362       39.9362       1077.74       1117.68    
   7  0.707555     -0.345940      -7.09922       7.09922       1091.47       1098.57    
   8  0.957483     -0.434474E-01 -0.891608      0.891608       1098.08       1098.97    
   9  0.524586     -0.645145      -13.2394       13.2394       1093.21       1106.45    
  10  0.692024     -0.368135      -7.55469       7.55469       1077.79       1085.35    
  11  0.936675E-01  -2.36800      -48.5951       48.5951       1117.10       1165.70    
  12  0.216270      -1.53123      -31.4232       31.4232       1094.75       1126.17    
  13  0.329369      -1.11058      -22.7908       22.7908       1118.98       1141.77    
  14  0.670774     -0.399323      -8.19472       8.19472       1093.20       1101.39    
  15  0.263445      -1.33391      -27.3739       27.3739       1109.36       1136.73    
  16  0.150248      -1.89547      -38.8979       38.8979       1114.72       1153.62    
  17  0.357034      -1.02992      -21.1356       21.1356       1118.78       1139.91    
  18  0.833286E-01  -2.48496      -50.9953       50.9953       1122.64       1173.63    
  19  0.431395     -0.840731      -17.2531       17.2531       1123.30       1140.55    
  20  0.304550      -1.18892      -24.3985       24.3985       1119.98       1144.38    
  21  0.930203     -0.723520E-01  -1.48477       1.48477       1153.45       1154.93    
  22  0.443091     -0.813979      -16.7041       16.7041       1147.53       1164.24    
  23  0.361548      -1.01736      -20.8778       20.8778       1151.91       1172.79    
  24  0.603851     -0.504427      -10.3516       10.3516       1156.10       1166.45    
  25  0.825014     -0.192355      -3.94742       3.94742       1160.39       1164.34    
  26  0.658742     -0.417424      -8.56618       8.56618       1135.49       1144.05    
  27  0.938632     -0.633319E-01  -1.29967       1.29967       1148.41       1149.71    
  28  0.264383E-01  -3.63294      -74.5535       74.5535       1134.47       1209.03    
  29  0.770543     -0.260660      -5.34915       5.34915       1163.53       1168.88    
  30  0.536385     -0.622903      -12.7829       12.7829       1162.82       1175.61    
  31  0.173997      -1.74872      -35.8864       35.8864       1167.86       1203.75    
  32  0.876286     -0.132063      -2.71013       2.71013       1178.90       1181.61    
  33  0.447573     -0.803915      -16.4976       16.4976       1151.42       1167.92    
  34  0.521740E-01  -2.95317      -60.6036       60.6036       1095.15       1155.75    
  35  0.509285     -0.674747      -13.8469       13.8469       1182.60       1196.45    
  36  0.135259      -2.00056      -41.0546       41.0546       1162.37       1203.42    
  37  0.238321      -1.43414      -29.4307       29.4307       1144.91       1174.34    
  38  0.146995      -1.91735      -39.3471       39.3471       1191.53       1230.88    
  39  0.166047      -1.79549      -36.8462       36.8462       1156.47       1193.32    
  40  0.830113     -0.186194      -3.82098       3.82098       1184.14       1187.96    
  41  0.638960     -0.447914      -9.19188       9.19188       1200.47       1209.66    
  42  0.156696      -1.85345      -38.0357       38.0357       1176.62       1214.66    
  43  0.956507     -0.444668E-01 -0.912528      0.912528       1200.23       1201.15    
  44  0.313979      -1.15843      -23.7728       23.7728       1199.51       1223.28    
  45  0.185265      -1.68597      -34.5986       34.5986       1201.45       1236.05    
  46  0.952300     -0.488757E-01  -1.00300       1.00300       1190.85       1191.85    
  47  0.181060      -1.70892      -35.0698       35.0698       1195.11       1230.18    
  48  0.969330     -0.311499E-01 -0.639243      0.639243       1207.07       1207.70    
  49  0.832772     -0.182996      -3.75536       3.75536       1192.65       1196.40    
loop,thermsimp(1:2)        9   33.7510       3.99883    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329       1237.33         68.05          1.11         39.14          2.26          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1237.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:        9
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       10
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      328     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.516123     -0.661410      -13.5731       13.5731       1057.63       1071.20    
   2  0.677402     -0.389491      -7.99295       7.99295       1052.93       1060.93    
   3  0.899541     -0.105871      -2.17263       2.17263       1045.14       1047.31    
   4  0.235706      -1.44517      -29.6571       29.6571       1074.35       1104.01    
   5  0.194769      -1.63594      -33.5721       33.5721       1077.79       1111.36    
   6  0.814930     -0.204653      -4.19980       4.19980       1091.47       1095.67    
   7  0.727423E-01  -2.62083      -53.7835       53.7835       1098.08       1151.86    
   8  0.126759      -2.06547      -42.3866       42.3866       1093.20       1135.58    
   9  0.592876     -0.522770      -10.7281       10.7281       1093.21       1103.93    
  10  0.131380      -2.02966      -41.6519       41.6519       1077.74       1119.39    
  11  0.394760E-01  -3.23206      -66.3269       66.3269       1080.20       1146.53    
  12  0.539964     -0.616252      -12.6464       12.6464       1094.75       1107.39    
  13  0.127256      -2.06155      -42.3063       42.3063       1109.36       1151.66    
  14  0.245583      -1.40412      -28.8147       28.8147       1118.78       1147.59    
  15  0.236145E-01  -3.74590      -76.8716       76.8716       1123.30       1200.17    
  16  0.791943     -0.233266      -4.78697       4.78697       1118.98       1123.76    
  17  0.223014      -1.50052      -30.7930       30.7930       1135.49       1166.28    
  18  0.943370     -0.582970E-01  -1.19634       1.19634       1119.98       1121.18    
  19  0.844237     -0.169322      -3.47475       3.47475       1148.41       1151.89    
  20  0.600301     -0.510323      -10.4726       10.4726       1114.72       1125.20    
  21  0.742625E-01  -2.60015      -53.3591       53.3591       1153.45       1206.81    
  22  0.288925E-01  -3.54417      -72.7319       72.7319       1095.15       1167.88    
  23  0.325834      -1.12137      -23.0122       23.0122       1147.53       1170.55    
  24  0.317147      -1.14839      -23.5667       23.5667       1160.39       1183.96    
  25  0.655873     -0.421788      -8.65574       8.65574       1117.10       1125.76    
  26  0.259034      -1.35080      -27.7204       27.7204       1156.10       1183.82    
  27  0.639742E-01  -2.74927      -56.4194       56.4194       1151.42       1207.84    
  28  0.110416E-01  -4.50609      -92.4718       92.4718       1163.53       1256.00    
  29  0.768965E-01  -2.56529      -52.6438       52.6438       1151.91       1204.55    
  30  0.757182     -0.278151      -5.70810       5.70810       1122.64       1128.35    
  31  0.788615     -0.237477      -4.87339       4.87339       1144.91       1149.79    
  32  0.724297     -0.322554      -6.61930       6.61930       1162.82       1169.44    
  33  0.807261     -0.214109      -4.39384       4.39384       1178.90       1183.29    
  34  0.356497      -1.03143      -21.1665       21.1665       1184.14       1205.31    
  35  0.685602     -0.377458      -7.74602       7.74602       1190.85       1198.59    
  36  0.681617     -0.383288      -7.86566       7.86566       1156.47       1164.34    
  37  0.323748      -1.12779      -23.1440       23.1440       1192.65       1215.79    
  38  0.622817     -0.473503      -9.71701       9.71701       1182.60       1192.32    
  39  0.534584     -0.626266      -12.8520       12.8520       1200.23       1213.09    
  40  0.130255E-02  -6.64343      -136.333       136.333       1162.37       1298.70    
  41  0.357398      -1.02891      -21.1147       21.1147       1167.86       1188.98    
  42  0.290986      -1.23448      -25.3335       25.3335       1207.07       1232.40    
  43  0.182566      -1.70064      -34.8999       34.8999       1134.47       1169.37    
  44  0.695597     -0.362984      -7.44900       7.44900       1200.47       1207.92    
  45  0.612287     -0.490555      -10.0669       10.0669       1176.62       1186.69    
  46  0.845780     -0.167496      -3.43727       3.43727       1199.51       1202.95    
  47  0.628042     -0.465149      -9.54557       9.54557       1195.11       1204.66    
  48  0.830233     -0.186049      -3.81802       3.81802       1191.53       1195.35    
  49  0.373260     -0.985481      -20.2236       20.2236       1237.33       1257.55    
loop,thermsimp(1:2)       10   13.5731       7.99295    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330       1144.28         68.01          1.10         39.03          2.33          0.05        110.53
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1144.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       10
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       11
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      329     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.737263     -0.304811      -6.25519       6.25519       1045.14       1051.40    
   2  0.372515     -0.987477      -20.2646       20.2646       1052.93       1073.20    
   3  0.197611E-01  -3.92404      -80.5274       80.5274       1057.63       1138.16    
   4  0.939239     -0.626858E-01  -1.28641       1.28641       1091.47       1092.76    
   5  0.212506      -1.54879      -31.7835       31.7835       1093.21       1124.99    
   6  0.141762      -1.95360      -40.0910       40.0910       1074.35       1114.44    
   7  0.183632      -1.69482      -34.7804       34.7804       1094.75       1129.53    
   8  0.479067     -0.735915      -15.1021       15.1021       1077.79       1092.89    
   9  0.113189      -2.17870      -44.7102       44.7102       1077.74       1122.45    
  10  0.314091      -1.15807      -23.7654       23.7654       1119.98       1143.75    
  11  0.457761     -0.781409      -16.0357       16.0357       1118.98       1135.01    
  12  0.923744     -0.793200E-01  -1.62777       1.62777       1114.72       1116.35    
  13  0.805387     -0.216433      -4.44154       4.44154       1117.10       1121.54    
  14  0.979257     -0.209609E-01 -0.430149      0.430149       1122.64       1123.07    
  15  0.634716E-01  -2.75716      -56.5812       56.5812       1093.20       1149.78    
  16  0.502866     -0.687432      -14.1072       14.1072       1080.20       1094.31    
  17  0.844986     -0.168435      -3.45655       3.45655       1118.78       1122.23    
  18  0.548347     -0.600848      -12.3303       12.3303       1144.91       1157.24    
  19  0.825472     -0.191800      -3.93603       3.93603       1109.36       1113.29    
  20  0.806424     -0.215145      -4.41511       4.41511       1098.08       1102.50    
  21  0.497450E-01  -3.00085      -61.5820       61.5820       1148.41       1210.00    
  22  0.407289     -0.898233      -18.4331       18.4331       1156.47       1174.91    
  23  0.522833     -0.648493      -13.3081       13.3081       1135.49       1148.80    
  24  0.763038     -0.270448      -5.55001       5.55001       1095.15       1100.70    
  25  0.706120     -0.347970      -7.14089       7.14089       1134.47       1141.62    
  26  0.540862     -0.614591      -12.6124       12.6124       1162.82       1175.44    
  27  0.807340E-01  -2.51660      -51.6444       51.6444       1147.53       1199.18    
  28  0.310756      -1.16875      -23.9845       23.9845       1178.90       1202.88    
  29  0.689192     -0.372235      -7.63884       7.63884       1156.10       1163.74    
  30  0.634973     -0.454174      -9.32034       9.32034       1160.39       1169.71    
  31  0.598432     -0.513442      -10.5366       10.5366       1176.62       1187.16    
  32  0.393639     -0.932321      -19.1327       19.1327       1167.86       1186.99    
  33  0.369460     -0.995714      -20.4336       20.4336       1182.60       1203.03    
  34  0.129274      -2.04582      -41.9833       41.9833       1191.53       1233.51    
  35  0.250376      -1.38479      -28.4181       28.4181       1190.85       1219.27    
  36  0.536641     -0.622425      -12.7731       12.7731       1123.30       1136.07    
  37  0.495942     -0.701296      -14.3917       14.3917       1199.51       1213.90    
  38  0.650684     -0.429731      -8.81875       8.81875       1151.91       1160.73    
  39  0.889212     -0.117420      -2.40964       2.40964       1195.11       1197.52    
  40  0.314936      -1.15539      -23.7103       23.7103       1184.14       1207.85    
  41  0.943567     -0.580875E-01  -1.19205       1.19205       1153.45       1154.64    
  42  0.672016     -0.397473      -8.15675       8.15675       1151.42       1159.58    
  43  0.133907      -2.01061      -41.2609       41.2609       1200.47       1241.73    
  44  0.259017      -1.35086      -27.7217       27.7217       1200.23       1227.96    
  45  0.112444      -2.18530      -44.8457       44.8457       1192.65       1237.49    
  46  0.235994      -1.44395      -29.6320       29.6320       1207.07       1236.70    
  47  0.879651     -0.128231      -2.63149       2.63149       1163.53       1166.16    
  48  0.750555     -0.286942      -5.88849       5.88849       1237.33       1243.22    
  49  0.996491E-01  -2.30610      -47.3247       47.3247       1144.28       1191.61    
loop,thermsimp(1:2)       11   6.25519       20.2646    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331       1206.37         68.15          1.13         39.13          2.54          0.05        110.99
Just calling func    0   0        110.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1206.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       11
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       12
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      330     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783491     -0.243995      -5.00716       5.00716       1045.14       1050.15    
   2  0.973841     -0.265069E-01 -0.543962      0.543962       1052.93       1053.48    
   3  0.294662      -1.22193      -25.0758       25.0758       1091.47       1116.54    
   4  0.702628     -0.352928      -7.24263       7.24263       1077.79       1085.03    
   5  0.763280     -0.270131      -5.54350       5.54350       1080.20       1085.75    
   6  0.578080E-01  -2.85063      -58.4993       58.4993       1095.15       1153.65    
   7  0.834037     -0.181478      -3.72421       3.72421       1098.08       1101.80    
   8  0.976312     -0.239730E-01 -0.491963      0.491963       1109.36       1109.85    
   9  0.603670     -0.504728      -10.3578       10.3578       1074.35       1084.71    
  10  0.458546     -0.779695      -16.0005       16.0005       1114.72       1130.72    
  11  0.201917      -1.59990      -32.8324       32.8324       1117.10       1149.93    
  12  0.362727      -1.01411      -20.8110       20.8110       1118.78       1139.59    
  13  0.466909E-01  -3.06421      -62.8822       62.8822       1077.74       1140.62    
  14  0.602192     -0.507180      -10.4081       10.4081       1122.64       1133.05    
  15  0.332545      -1.10098      -22.5938       22.5938       1093.21       1115.80    
  16  0.758378     -0.276574      -5.67572       5.67572       1094.75       1100.42    
  17  0.834950     -0.180384      -3.70176       3.70176       1118.98       1122.68    
  18  0.910410     -0.938599E-01  -1.92615       1.92615       1123.30       1125.22    
  19  0.825418E-01  -2.49445      -51.1900       51.1900       1057.63       1108.82    
  20  0.639611     -0.446894      -9.17096       9.17096       1134.47       1143.65    
  21  0.345418      -1.06300      -21.8144       21.8144       1119.98       1141.79    
  22  0.961674     -0.390802E-01 -0.801986      0.801986       1135.49       1136.29    
  23  0.274135      -1.29413      -26.5576       26.5576       1093.20       1119.76    
  24  0.275236      -1.29013      -26.4754       26.4754       1153.45       1179.92    
  25  0.373550     -0.984704      -20.2076       20.2076       1144.91       1165.12    
  26  0.407178     -0.898505      -18.4387       18.4387       1151.42       1169.86    
  27  0.908773     -0.956602E-01  -1.96310       1.96310       1151.91       1153.87    
  28  0.578518     -0.547286      -11.2312       11.2312       1156.10       1167.33    
  29  0.674288     -0.394098      -8.08751       8.08751       1163.53       1171.62    
  30  0.758166     -0.276853      -5.68145       5.68145       1160.39       1166.07    
  31  0.764349E-01  -2.57132      -52.7674       52.7674       1156.47       1209.24    
  32  0.962342     -0.383853E-01 -0.787726      0.787726       1162.82       1163.61    
  33  0.918960     -0.845125E-01  -1.73433       1.73433       1167.86       1169.59    
  34  0.617888     -0.481448      -9.88006       9.88006       1176.62       1186.50    
  35  0.227646      -1.47996      -30.3711       30.3711       1144.28       1174.65    
  36  0.262001      -1.33941      -27.4867       27.4867       1195.11       1222.60    
  37  0.589438     -0.528586      -10.8474       10.8474       1147.53       1158.38    
  38  0.201352      -1.60270      -32.8899       32.8899       1178.90       1211.79    
  39  0.350279      -1.04903      -21.5276       21.5276       1182.60       1204.13    
  40  0.647374     -0.434831      -8.92340       8.92340       1184.14       1193.06    
  41  0.604508     -0.503341      -10.3293       10.3293       1148.41       1158.74    
  42  0.700946     -0.355325      -7.29182       7.29182       1199.51       1206.80    
  43  0.575270     -0.552915      -11.3467       11.3467       1190.85       1202.19    
  44  0.554419     -0.589835      -12.1043       12.1043       1200.23       1212.34    
  45  0.375300     -0.980029      -20.1117       20.1117       1191.53       1211.64    
  46  0.605541     -0.501632      -10.2943       10.2943       1207.07       1217.36    
  47  0.109847      -2.20867      -45.3252       45.3252       1192.65       1237.97    
  48  0.553505     -0.591485      -12.1382       12.1382       1200.47       1212.61    
  49  0.412268     -0.886082      -18.1838       18.1838       1206.37       1224.55    
loop,thermsimp(1:2)       12   5.00716      0.543962    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332       1225.05         68.07          1.13         39.29          2.16          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1225.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       12
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       13
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      331     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964298     -0.363545E-01 -0.746051      0.746051       1045.14       1045.89    
   2  0.963371     -0.373169E-01 -0.765800      0.765800       1052.93       1053.70    
   3  0.851172E-02  -4.76631      -97.8121       97.8121       1074.35       1172.16    
   4  0.731929E-01  -2.61466      -53.6568       53.6568       1077.79       1131.45    
   5  0.491869     -0.709543      -14.5609       14.5609       1080.20       1094.76    
   6  0.625436     -0.469306      -9.63087       9.63087       1094.75       1104.38    
   7  0.139469      -1.96991      -40.4257       40.4257       1098.08       1138.51    
   8  0.464987     -0.765746      -15.7143       15.7143       1057.63       1073.35    
   9  0.192956      -1.64529      -33.7640       33.7640       1109.36       1143.12    
  10  0.184589E-01  -3.99221      -81.9263       81.9263       1093.21       1175.13    
  11  0.327387      -1.11661      -22.9146       22.9146       1091.47       1114.38    
  12  0.447570     -0.803921      -16.4977       16.4977       1093.20       1109.70    
  13  0.282132      -1.26538      -25.9676       25.9676       1118.98       1144.94    
  14  0.991234     -0.880510E-02 -0.180694      0.180694       1123.30       1123.48    
  15  0.574009     -0.555110      -11.3917       11.3917       1114.72       1126.11    
  16  0.884017     -0.123279      -2.52987       2.52987       1122.64       1125.17    
  17  0.332578      -1.10088      -22.5918       22.5918       1135.49       1158.08    
  18  0.294524      -1.22240      -25.0854       25.0854       1118.78       1143.86    
  19  0.865605     -0.144326      -2.96180       2.96180       1077.74       1080.70    
  20  0.441883E-01  -3.11930      -64.0128       64.0128       1119.98       1183.99    
  21  0.652915     -0.426309      -8.74851       8.74851       1134.47       1143.22    
  22  0.712636E-01  -2.64137      -54.2050       54.2050       1117.10       1171.31    
  23  0.211397      -1.55402      -31.8908       31.8908       1095.15       1127.04    
  24  0.836672E-01  -2.48091      -50.9121       50.9121       1151.91       1202.82    
  25  0.397953     -0.921422      -18.9090       18.9090       1147.53       1166.44    
  26  0.545442     -0.606159      -12.4393       12.4393       1148.41       1160.85    
  27  0.628874     -0.463825      -9.51841       9.51841       1162.82       1172.34    
  28  0.243035      -1.41455      -29.0288       29.0288       1144.91       1173.94    
  29  0.700237     -0.356336      -7.31256       7.31256       1160.39       1167.70    
  30  0.887974     -0.118813      -2.43823       2.43823       1156.10       1158.54    
  31  0.354481      -1.03710      -21.2829       21.2829       1167.86       1189.14    
  32  0.579479     -0.545626      -11.1971       11.1971       1151.42       1162.62    
  33  0.873601E-01  -2.43772      -50.0257       50.0257       1163.53       1213.56    
  34  0.414510     -0.880658      -18.0725       18.0725       1144.28       1162.36    
  35  0.263485      -1.33376      -27.3708       27.3708       1153.45       1180.82    
  36  0.174560E-01  -4.04807      -83.0727       83.0727       1176.62       1259.69    
  37  0.461287     -0.773735      -15.8782       15.8782       1184.14       1200.02    
  38  0.914554     -0.893185E-01  -1.83295       1.83295       1190.85       1192.68    
  39  0.551497     -0.595119      -12.2128       12.2128       1182.60       1194.81    
  40  0.751145     -0.286157      -5.87238       5.87238       1199.51       1205.38    
  41  0.838814     -0.175766      -3.60698       3.60698       1156.47       1160.08    
  42  0.494321     -0.704571      -14.4589       14.4589       1191.53       1205.99    
  43  0.878137     -0.129953      -2.66683       2.66683       1178.90       1181.57    
  44  0.249667      -1.38763      -28.4763       28.4763       1200.23       1228.71    
  45  0.569995     -0.562128      -11.5357       11.5357       1200.47       1212.01    
  46  0.338221      -1.08406      -22.2465       22.2465       1207.07       1229.31    
  47  0.536421     -0.622836      -12.7816       12.7816       1195.11       1207.89    
  48  0.482027     -0.729755      -14.9757       14.9757       1206.37       1221.34    
  49  0.436505     -0.828955      -17.0114       17.0114       1225.05       1242.06    
loop,thermsimp(1:2)       13  0.746051      0.765800    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333       1087.44         68.19          1.11         39.14          2.40          0.04        110.88
Just calling func    0   0        110.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1087.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       13
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       14
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      332     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.536122     -0.623393      -12.7930       12.7930       1045.14       1057.93    
   2  0.902010     -0.103129      -2.11637       2.11637       1052.93       1055.05    
   3  0.918906     -0.845717E-01  -1.73554       1.73554       1057.63       1059.37    
   4  0.300977E-01  -3.50330      -71.8932       71.8932       1077.74       1149.63    
   5  0.180939      -1.70960      -35.0836       35.0836       1080.20       1115.29    
   6  0.996736     -0.326981E-02 -0.671015E-01  0.671015E-01   1094.75       1094.82    
   7  0.974749     -0.255749E-01 -0.524836      0.524836       1093.20       1093.72    
   8  0.259085      -1.35060      -27.7164       27.7164       1091.47       1119.19    
   9  0.237439      -1.43784      -29.5068       29.5068       1123.30       1152.80    
  10  0.733816     -0.309497      -6.35135       6.35135       1122.64       1128.99    
  11  0.458028     -0.780824      -16.0237       16.0237       1114.72       1130.75    
  12  0.623300     -0.472727      -9.70108       9.70108       1095.15       1104.85    
  13  0.789074     -0.236895      -4.86146       4.86146       1077.79       1082.65    
  14  0.718847     -0.330107      -6.77430       6.77430       1098.08       1104.85    
  15  0.414258     -0.881266      -18.0849       18.0849       1109.36       1127.44    
  16  0.121880E-01  -4.40730      -90.4447       90.4447       1134.47       1224.92    
  17  0.976927     -0.233433E-01 -0.479040      0.479040       1118.78       1119.26    
  18  0.998133     -0.186873E-02 -0.383493E-01  0.383493E-01   1118.98       1119.02    
  19  0.582806     -0.539901      -11.0796       11.0796       1135.49       1146.57    
  20  0.461010     -0.774335      -15.8906       15.8906       1156.10       1171.99    
  21  0.748404     -0.289812      -5.94738       5.94738       1156.47       1162.42    
  22  0.627394     -0.466180      -9.56673       9.56673       1148.41       1157.98    
  23  0.823247     -0.194499      -3.99143       3.99143       1144.28       1148.28    
  24  0.696302     -0.361971      -7.42821       7.42821       1151.42       1158.85    
  25  0.571207     -0.560004      -11.4921       11.4921       1147.53       1159.03    
  26  0.189272      -1.66457      -34.1596       34.1596       1160.39       1194.55    
  27  0.534816     -0.625833      -12.8431       12.8431       1117.10       1129.94    
  28  0.846241     -0.166951      -3.42609       3.42609       1074.35       1077.78    
  29  0.157466      -1.84855      -37.9350       37.9350       1162.82       1200.76    
  30  0.123756      -2.08945      -42.8786       42.8786       1144.91       1187.79    
  31  0.458067     -0.780739      -16.0220       16.0220       1093.21       1109.23    
  32  0.989772     -0.102804E-01 -0.210969      0.210969       1153.45       1153.66    
  33  0.292614      -1.22890      -25.2189       25.2189       1178.90       1204.12    
  34  0.707885     -0.345474      -7.08966       7.08966       1119.98       1127.07    
  35  0.686290     -0.376455      -7.72543       7.72543       1167.86       1175.59    
  36  0.752747     -0.284026      -5.82866       5.82866       1190.85       1196.68    
  37  0.577950E-01  -2.85085      -58.5039       58.5039       1182.60       1241.10    
  38  0.496568E-02  -5.30521      -108.871       108.871       1184.14       1293.01    
  39  0.632817     -0.457575      -9.39014       9.39014       1151.91       1161.30    
  40  0.306568      -1.18232      -24.2629       24.2629       1199.51       1223.77    
  41  0.800757     -0.222198      -4.55984       4.55984       1191.53       1196.09    
  42  0.754206     -0.282090      -5.78892       5.78892       1195.11       1200.90    
  43  0.875958     -0.132437      -2.71782       2.71782       1200.47       1203.19    
  44  0.411581     -0.887750      -18.2180       18.2180       1163.53       1181.75    
  45  0.784837     -0.242279      -4.97195       4.97195       1206.37       1211.34    
  46  0.615964     -0.484567      -9.94407       9.94407       1200.23       1210.18    
  47  0.427318     -0.850227      -17.4480       17.4480       1207.07       1224.51    
  48  0.373288     -0.985405      -20.2220       20.2220       1225.05       1245.28    
  49  0.118712      -2.13106      -43.7326       43.7326       1087.44       1131.17    
loop,thermsimp(1:2)       14   12.7930       2.11637    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334       1296.89         68.08          1.12         39.15          2.30          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    335       1167.95         68.17          1.12         39.11          2.11          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1167.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       14
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       15
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      334     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.210086      -1.56024      -32.0185       32.0185       1052.93       1084.95    
   2  0.682169     -0.382478      -7.84903       7.84903       1045.14       1052.99    
   3  0.831163     -0.184930      -3.79504       3.79504       1057.63       1061.43    
   4  0.625179     -0.469718      -9.63933       9.63933       1074.35       1083.99    
   5  0.907522     -0.970376E-01  -1.99136       1.99136       1077.79       1079.78    
   6  0.406703     -0.899672      -18.4627       18.4627       1093.20       1111.66    
   7  0.463060     -0.769899      -15.7995       15.7995       1094.75       1110.55    
   8  0.206056      -1.57961      -32.4160       32.4160       1095.15       1127.56    
   9  0.303716      -1.19166      -24.4548       24.4548       1098.08       1122.54    
  10  0.843889     -0.169734      -3.48321       3.48321       1093.21       1096.69    
  11  0.273678      -1.29580      -26.5919       26.5919       1080.20       1106.80    
  12  0.571842     -0.558892      -11.4693       11.4693       1118.98       1130.45    
  13  0.803131     -0.219238      -4.49910       4.49910       1091.47       1095.97    
  14  0.330375      -1.10753      -22.7282       22.7282       1118.78       1141.51    
  15  0.155557      -1.86074      -38.1854       38.1854       1119.98       1158.17    
  16  0.878823     -0.129172      -2.65081       2.65081       1109.36       1112.01    
  17  0.781654     -0.246343      -5.05534       5.05534       1122.64       1127.69    
  18  0.782655     -0.245064      -5.02908       5.02908       1117.10       1122.13    
  19  0.682155     -0.382499      -7.84947       7.84947       1114.72       1122.57    
  20  0.899702     -0.105691      -2.16895       2.16895       1087.44       1089.61    
  21  0.444808     -0.810113      -16.6248       16.6248       1135.49       1152.11    
  22  0.495252     -0.702688      -14.4203       14.4203       1144.28       1158.70    
  23  0.640834     -0.444984      -9.13177       9.13177       1077.74       1086.87    
  24  0.314465      -1.15688      -23.7410       23.7410       1123.30       1147.04    
  25  0.368564     -0.998140      -20.4834       20.4834       1153.45       1173.93    
  26  0.572254E-02  -5.16334      -105.960       105.960       1148.41       1254.37    
  27  0.468080E-01  -3.06170      -62.8309       62.8309       1151.42       1214.25    
  28  0.598693E-01  -2.81559      -57.7803       57.7803       1147.53       1205.31    
  29  0.658687     -0.417508      -8.56790       8.56790       1151.91       1160.48    
  30  0.449565     -0.799475      -16.4065       16.4065       1156.47       1172.88    
  31  0.799405     -0.223887      -4.59451       4.59451       1156.10       1160.69    
  32  0.414416     -0.880885      -18.0771       18.0771       1167.86       1185.94    
  33  0.395703E-01  -3.22968      -66.2779       66.2779       1163.53       1229.81    
  34  0.704129E-01  -2.65338      -54.4514       54.4514       1144.91       1199.37    
  35  0.336217      -1.09000      -22.3685       22.3685       1160.39       1182.76    
  36  0.169926      -1.77239      -36.3722       36.3722       1191.53       1227.90    
  37  0.846601E-01  -2.46911      -50.6700       50.6700       1190.85       1241.52    
  38  0.798628     -0.224860      -4.61447       4.61447       1162.82       1167.44    
  39  0.377891     -0.973150      -19.9705       19.9705       1195.11       1215.08    
  40  0.183739      -1.69424      -34.7684       34.7684       1200.47       1235.24    
  41  0.930280     -0.722695E-01  -1.48308       1.48308       1178.90       1180.38    
  42  0.280682      -1.27053      -26.0733       26.0733       1200.23       1226.31    
  43  0.475397     -0.743606      -15.2599       15.2599       1206.37       1221.63    
  44  0.705714     -0.348545      -7.15269       7.15269       1199.51       1206.66    
  45  0.307479      -1.17935      -24.2021       24.2021       1207.07       1231.27    
  46  0.408291     -0.895776      -18.3827       18.3827       1134.47       1152.86    
  47  0.174897      -1.74356      -35.7805       35.7805       1182.60       1218.38    
  48  0.462267     -0.771612      -15.8347       15.8347       1225.05       1240.89    
  49  0.805682E-01  -2.51865      -51.6866       51.6866       1167.95       1219.64    
loop,thermsimp(1:2)       15   32.0185       7.84903    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336       1133.55         68.07          1.13         39.51          1.84          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1133.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       15
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       16
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      335     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652831E-01  -2.72902      -56.0037       56.0037       1045.14       1101.15    
   2  0.388935     -0.944342      -19.3794       19.3794       1057.63       1077.01    
   3  0.716732     -0.333053      -6.83477       6.83477       1077.79       1084.63    
   4  0.375936     -0.978336      -20.0770       20.0770       1074.35       1094.43    
   5  0.518505E-01  -2.95939      -60.7313       60.7313       1052.93       1113.66    
   6  0.892279     -0.113976      -2.33896       2.33896       1077.74       1080.08    
   7  0.145412      -1.92818      -39.5693       39.5693       1087.44       1127.01    
   8  0.759376E-01  -2.57784      -52.9013       52.9013       1091.47       1144.37    
   9  0.799111     -0.224255      -4.60206       4.60206       1093.21       1097.81    
  10  0.566636     -0.568038      -11.6570       11.6570       1080.20       1091.86    
  11  0.957834     -0.430803E-01 -0.884075      0.884075       1094.75       1095.63    
  12  0.421133     -0.864808      -17.7472       17.7472       1093.20       1110.95    
  13  0.965171     -0.354495E-01 -0.727480      0.727480       1109.36       1110.09    
  14  0.527073     -0.640416      -13.1423       13.1423       1117.10       1130.24    
  15  0.221584      -1.50695      -30.9250       30.9250       1098.08       1129.01    
  16  0.675180     -0.392776      -8.06038       8.06038       1114.72       1122.78    
  17  0.462159     -0.771846      -15.8395       15.8395       1095.15       1110.99    
  18  0.134826      -2.00377      -41.1204       41.1204       1122.64       1163.76    
  19  0.869165     -0.140222      -2.87757       2.87757       1118.98       1121.85    
  20  0.898965     -0.106511      -2.18576       2.18576       1118.78       1120.96    
  21  0.174160      -1.74778      -35.8672       35.8672       1123.30       1159.16    
  22  0.463810     -0.768281      -15.7663       15.7663       1135.49       1151.25    
  23  0.145870      -1.92504      -39.5047       39.5047       1134.47       1173.98    
  24  0.525172     -0.644029      -13.2165       13.2165       1119.98       1133.20    
  25  0.667609     -0.404052      -8.29178       8.29178       1144.28       1152.58    
  26  0.964408     -0.362405E-01 -0.743711      0.743711       1151.91       1152.65    
  27  0.981636     -0.185350E-01 -0.380366      0.380366       1156.10       1156.48    
  28  0.585742     -0.534875      -10.9765       10.9765       1162.82       1173.80    
  29  0.956106     -0.448864E-01 -0.921138      0.921138       1156.47       1157.39    
  30  0.153686      -1.87284      -38.4336       38.4336       1153.45       1191.88    
  31  0.937356     -0.646920E-01  -1.32758       1.32758       1178.90       1180.23    
  32  0.821414     -0.196728      -4.03716       4.03716       1160.39       1164.43    
  33  0.901583     -0.103603      -2.12610       2.12610       1167.86       1169.99    
  34  0.145469      -1.92779      -39.5613       39.5613       1144.91       1184.48    
  35  0.944310     -0.573011E-01  -1.17591       1.17591       1147.53       1148.71    
  36  0.639748     -0.446680      -9.16657       9.16657       1199.51       1208.68    
  37  0.533071     -0.629101      -12.9101       12.9101       1151.42       1164.33    
  38  0.708805     -0.344175      -7.06300       7.06300       1195.11       1202.17    
  39  0.953023     -0.481167E-01 -0.987429      0.987429       1182.60       1183.59    
  40  0.606832     -0.499502      -10.2506       10.2506       1167.95       1178.20    
  41  0.791257     -0.234132      -4.80475       4.80475       1206.37       1211.17    
  42  0.203064      -1.59423      -32.7161       32.7161       1200.23       1232.95    
  43  0.168642      -1.77998      -36.5279       36.5279       1191.53       1228.06    
  44  0.718173     -0.331045      -6.79356       6.79356       1163.53       1170.32    
  45  0.976939E-02  -4.62850      -94.9840       94.9840       1207.07       1302.05    
  46  0.211685      -1.55265      -31.8629       31.8629       1200.47       1232.33    
  47  0.624191     -0.471298      -9.67177       9.67177       1225.05       1234.73    
  48  0.749801     -0.287948      -5.90913       5.90913       1190.85       1196.76    
  49  0.710340     -0.342011      -7.01859       7.01859       1133.55       1140.56    
loop,thermsimp(1:2)       16   56.0037       19.3794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337       1204.37         68.16          1.12         39.26          2.04          0.05        110.63
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1204.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       16
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       17
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      336     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.488972     -0.715450      -14.6821       14.6821       1057.63       1072.31    
   2  0.243137      -1.41413      -29.0201       29.0201       1077.74       1106.76    
   3  0.530653     -0.633646      -13.0034       13.0034       1077.79       1090.80    
   4  0.926282     -0.765763E-01  -1.57146       1.57146       1080.20       1081.78    
   5  0.374288     -0.982729      -20.1671       20.1671       1074.35       1094.52    
   6  0.675293     -0.392608      -8.05693       8.05693       1094.75       1102.81    
   7  0.605942     -0.500970      -10.2807       10.2807       1093.21       1103.49    
   8  0.280229      -1.27215      -26.1064       26.1064       1045.14       1071.25    
   9  0.297259      -1.21315      -24.8957       24.8957       1109.36       1134.25    
  10  0.697504E-01  -2.66283      -54.6454       54.6454       1093.20       1147.84    
  11  0.824348     -0.193163      -3.96400       3.96400       1095.15       1099.11    
  12  0.750452     -0.287080      -5.89132       5.89132       1052.93       1058.82    
  13  0.120595      -2.11532      -43.4096       43.4096       1118.78       1162.19    
  14  0.935324     -0.668625E-01  -1.37212       1.37212       1118.98       1120.35    
  15  0.215551      -1.53456      -31.4915       31.4915       1114.72       1146.21    
  16  0.708821     -0.344153      -7.06254       7.06254       1087.44       1094.50    
  17  0.402499     -0.910063      -18.6759       18.6759       1098.08       1116.76    
  18  0.836443     -0.178597      -3.66509       3.66509       1117.10       1120.77    
  19  0.969979E-01  -2.33307      -47.8781       47.8781       1119.98       1167.86    
  20  0.178795      -1.72152      -35.3282       35.3282       1133.55       1168.87    
  21  0.140077      -1.96556      -40.3363       40.3363       1091.47       1131.81    
  22  0.375507     -0.979479      -20.1004       20.1004       1147.53       1167.63    
  23  0.831487     -0.184540      -3.78704       3.78704       1135.49       1139.27    
  24  0.815951     -0.203401      -4.17410       4.17410       1144.28       1148.46    
  25  0.468603     -0.757998      -15.5553       15.5553       1151.91       1167.46    
  26  0.677551     -0.389270      -7.98843       7.98843       1156.10       1164.09    
  27  0.169538      -1.77468      -36.4191       36.4191       1156.47       1192.89    
  28  0.950448     -0.508223E-01  -1.04295       1.04295       1123.30       1124.34    
  29  0.981726     -0.184427E-01 -0.378473      0.378473       1122.64       1123.02    
  30  0.442406     -0.815527      -16.7359       16.7359       1151.42       1168.16    
  31  0.531953     -0.631200      -12.9532       12.9532       1160.39       1173.34    
  32  0.363692      -1.01145      -20.7565       20.7565       1167.86       1188.62    
  33  0.144511E-01  -4.23698      -86.9494       86.9494       1163.53       1250.48    
  34  0.748780     -0.289310      -5.93709       5.93709       1162.82       1168.76    
  35  0.195075      -1.63437      -33.5398       33.5398       1134.47       1168.01    
  36  0.440325     -0.820241      -16.8326       16.8326       1167.95       1184.78    
  37  0.805864     -0.215841      -4.42939       4.42939       1178.90       1183.33    
  38  0.921415     -0.818451E-01  -1.67959       1.67959       1182.60       1184.28    
  39  0.296293      -1.21641      -24.9625       24.9625       1144.91       1169.88    
  40  0.645874E-01  -2.73974      -56.2236       56.2236       1153.45       1209.67    
  41  0.488279     -0.716868      -14.7112       14.7112       1190.85       1205.56    
  42  0.573105     -0.556686      -11.4241       11.4241       1195.11       1206.54    
  43  0.967891     -0.326356E-01 -0.669732      0.669732       1199.51       1200.18    
  44  0.780434E-01  -2.55049      -52.3400       52.3400       1206.37       1258.71    
  45  0.968859     -0.316363E-01 -0.649226      0.649226       1191.53       1192.18    
  46  0.858835     -0.152178      -3.12293       3.12293       1200.47       1203.59    
  47  0.968806     -0.316911E-01 -0.650351      0.650351       1200.23       1200.88    
  48  0.134500      -2.00619      -41.1701       41.1701       1225.05       1266.22    
  49  0.993707     -0.631323E-02 -0.129557      0.129557       1204.37       1204.50    
loop,thermsimp(1:2)       17   14.6821       29.0201    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338       1196.31         68.01          1.13         39.20          2.03          0.05        110.42
Just calling func    0   0        110.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1196.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       17
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       18
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      337
neval,tstepnext:      337     337

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.490618     -0.712090      -14.6132       14.6132       1052.93       1067.55    
   2  0.486668     -0.720173      -14.7791       14.7791       1045.14       1059.92    
   3  0.319995E-01  -3.44203      -70.6359       70.6359       1057.63       1128.27    
   4  0.957863     -0.430503E-01 -0.883458      0.883458       1080.20       1081.09    
   5  0.713202E-01  -2.64058      -54.1887       54.1887       1077.79       1131.98    
   6  0.677570     -0.389242      -7.98785       7.98785       1087.44       1095.43    
   7  0.533853     -0.627634      -12.8800       12.8800       1074.35       1087.23    
   8  0.963967     -0.366984E-01 -0.753108      0.753108       1095.15       1095.90    
   9  0.590118     -0.527432      -10.8237       10.8237       1094.75       1105.57    
  10  0.102350      -2.27936      -46.7759       46.7759       1093.21       1139.98    
  11  0.313487      -1.16000      -23.8049       23.8049       1077.74       1101.54    
  12  0.876181     -0.132183      -2.71259       2.71259       1098.08       1100.79    
  13  0.780541     -0.247768      -5.08458       5.08458       1118.98       1124.06    
  14  0.222922      -1.50093      -30.8014       30.8014       1117.10       1147.90    
  15  0.913991     -0.899351E-01  -1.84561       1.84561       1122.64       1124.49    
  16  0.493176     -0.706888      -14.5064       14.5064       1123.30       1137.80    
  17  0.884766     -0.122432      -2.51249       2.51249       1091.47       1093.98    
  18  0.576549E-01  -2.85328      -58.5537       58.5537       1109.36       1167.91    
  19  0.398597     -0.919804      -18.8758       18.8758       1135.49       1154.36    
  20  0.980633     -0.195573E-01 -0.401346      0.401346       1114.72       1115.12    
  21  0.304985      -1.18749      -24.3692       24.3692       1093.20       1117.57    
  22  0.628666     -0.464156      -9.52520       9.52520       1144.28       1153.81    
  23  0.367895     -0.999957      -20.5207       20.5207       1118.78       1139.30    
  24  0.442302     -0.815762      -16.7407       16.7407       1156.10       1172.84    
  25  0.656121     -0.421410      -8.64798       8.64798       1151.91       1160.56    
  26  0.229893      -1.47014      -30.1695       30.1695       1147.53       1177.70    
  27  0.475469     -0.743453      -15.2568       15.2568       1119.98       1135.24    
  28  0.801985     -0.220665      -4.52839       4.52839       1134.47       1139.00    
  29  0.454630     -0.788272      -16.1765       16.1765       1151.42       1167.60    
  30  0.858022     -0.153126      -3.14238       3.14238       1162.82       1165.97    
  31  0.692704     -0.367153      -7.53455       7.53455       1133.55       1141.08    
  32  0.466274     -0.762981      -15.6576       15.6576       1144.91       1160.57    
  33  0.682446     -0.382072      -7.84071       7.84071       1160.39       1168.23    
  34  0.660760     -0.414365      -8.50340       8.50340       1178.90       1187.40    
  35  0.957519     -0.434092E-01 -0.890824      0.890824       1182.60       1183.49    
  36  0.108167      -2.22408      -45.6415       45.6415       1167.95       1213.59    
  37  0.846378     -0.166789      -3.42277       3.42277       1167.86       1171.28    
  38  0.621158E-01  -2.77876      -57.0243       57.0243       1191.53       1248.56    
  39  0.988945E-01  -2.31370      -47.4807       47.4807       1156.47       1203.95    
  40  0.253472      -1.37250      -28.1659       28.1659       1199.51       1227.68    
  41  0.915015     -0.888152E-01  -1.82262       1.82262       1200.23       1202.06    
  42  0.662342     -0.411973      -8.45432       8.45432       1200.47       1208.93    
  43  0.210223      -1.55959      -32.0052       32.0052       1204.37       1236.38    
  44  0.141043      -1.95869      -40.1954       40.1954       1190.85       1231.04    
  45  0.839834     -0.174551      -3.58206       3.58206       1195.11       1198.69    
  46  0.132358      -2.02225      -41.4996       41.4996       1153.45       1194.95    
  47  0.129895E-01  -4.34361      -89.1376       89.1376       1163.53       1252.67    
  48  0.795497     -0.228788      -4.69508       4.69508       1206.37       1211.06    
  49  0.547485     -0.602421      -12.3626       12.3626       1196.31       1208.68    
loop,thermsimp(1:2)       18   14.6132       14.7791    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339       1121.79         68.14          1.13         39.48          1.92          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1121.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.5215               337
loop is:       18
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    20.5215               337
loop is:       19
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    10.2608               385

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      338     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.155141      -1.86342      -19.1201       19.1201       1045.14       1064.26    
   2  0.881882     -0.125697      -1.28975       1.28975       1052.93       1054.22    
   3  0.908319     -0.961592E-01 -0.986667      0.986667       1080.20       1081.19    
   4  0.732380     -0.311455      -3.19577       3.19577       1074.35       1077.55    
   5  0.367412      -1.00127      -10.2738       10.2738       1091.47       1101.74    
   6  0.624330     -0.471077      -4.83361       4.83361       1087.44       1092.27    
   7  0.833858     -0.181693      -1.86431       1.86431       1095.15       1097.01    
   8  0.194603E-02  -6.24197      -64.0474       64.0474       1098.08       1162.13    
   9  0.995416     -0.459497E-02 -0.471480E-01  0.471480E-01   1077.74       1077.79    
  10  0.665599     -0.407068      -4.17683       4.17683       1094.75       1098.93    
  11  0.747574     -0.290922      -2.98509       2.98509       1114.72       1117.71    
  12  0.539692     -0.616756      -6.32839       6.32839       1093.20       1099.53    
  13  0.958323     -0.425700E-01 -0.436801      0.436801       1118.98       1119.41    
  14  0.111027      -2.19798      -22.5530       22.5530       1122.64       1145.19    
  15  0.520965     -0.652072      -6.69076       6.69076       1057.63       1064.32    
  16  0.177207E-01  -4.03302      -41.3819       41.3819       1077.79       1119.17    
  17  0.860365     -0.150398      -1.54320       1.54320       1119.98       1121.52    
  18  0.383700     -0.957895      -9.82874       9.82874       1123.30       1133.13    
  19  0.524904     -0.644539      -6.61347       6.61347       1134.47       1141.09    
  20  0.589629     -0.528262      -5.42038       5.42038       1118.78       1124.20    
  21  0.125125      -2.07844      -21.3264       21.3264       1093.21       1114.53    
  22  0.154207      -1.86946      -19.1821       19.1821       1133.55       1152.73    
  23  0.752747     -0.284026      -2.91433       2.91433       1117.10       1120.02    
  24  0.551286     -0.595501      -6.11030       6.11030       1144.28       1150.39    
  25  0.733343     -0.310142      -3.18229       3.18229       1135.49       1138.67    
  26  0.904985     -0.998368E-01  -1.02440       1.02440       1151.91       1152.93    
  27  0.987632     -0.124455E-01 -0.127701      0.127701       1144.91       1145.04    
  28  0.228587      -1.47584      -15.1432       15.1432       1162.82       1177.97    
  29  0.384883     -0.954815      -9.79714       9.79714       1151.42       1161.22    
  30  0.781910     -0.246015      -2.52431       2.52431       1109.36       1111.88    
  31  0.402051E-02  -5.51635      -56.6020       56.6020       1160.39       1216.99    
  32  0.880575     -0.127180      -1.30497       1.30497       1167.86       1169.17    
  33  0.427180     -0.850550      -8.72730       8.72730       1156.10       1164.83    
  34  0.613064     -0.489286      -5.02045       5.02045       1147.53       1152.55    
  35  0.529053     -0.636668      -6.53270       6.53270       1182.60       1189.13    
  36  0.973505     -0.268519E-01 -0.275522      0.275522       1178.90       1179.17    
  37  0.889868     -0.116682      -1.19725       1.19725       1153.45       1154.65    
  38  0.133989      -2.01000      -20.6241       20.6241       1195.11       1215.74    
  39  0.289828      -1.23847      -12.7076       12.7076       1200.23       1212.94    
  40  0.724995     -0.321591      -3.29977       3.29977       1156.47       1159.77    
  41  0.547932     -0.601605      -6.17293       6.17293       1196.31       1202.49    
  42  0.608240E-01  -2.79977      -28.7278       28.7278       1200.47       1229.20    
  43  0.481259E-01  -3.03393      -31.1305       31.1305       1206.37       1237.50    
  44  0.356843      -1.03046      -10.5733       10.5733       1167.95       1178.52    
  45  0.417411     -0.873685      -8.96468       8.96468       1199.51       1208.47    
  46  0.918903     -0.845742E-01 -0.867797      0.867797       1190.85       1191.72    
  47  0.852285     -0.159834      -1.64002       1.64002       1204.37       1206.01    
  48  0.744864     -0.294553      -3.02235       3.02235       1191.53       1194.55    
  49  0.128521      -2.05166      -21.0517       21.0517       1121.79       1142.84    
loop,thermsimp(1:2)       19   19.1201       1.28975    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340       1218.68         68.08          1.11         39.15          2.22          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1218.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       19
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       20
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      339     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.272787      -1.29906      -13.3294       13.3294       1052.93       1066.26    
   2  0.284829      -1.25587      -12.8862       12.8862       1045.14       1058.03    
   3  0.422534E-01  -3.16407      -32.4658       32.4658       1057.63       1090.10    
   4  0.788018E-01  -2.54082      -26.0708       26.0708       1074.35       1100.42    
   5  0.396626E-01  -3.22735      -33.1151       33.1151       1077.74       1110.86    
   6  0.412432     -0.885684      -9.08780       9.08780       1080.20       1089.29    
   7  0.390866     -0.939390      -9.63887       9.63887       1087.44       1097.08    
   8  0.853334     -0.158604      -1.62740       1.62740       1095.15       1096.77    
   9  0.506127     -0.680968      -6.98725       6.98725       1094.75       1101.74    
  10  0.254200      -1.36963      -14.0535       14.0535       1093.20       1107.25    
  11  0.643116     -0.441430      -4.52942       4.52942       1091.47       1096.00    
  12  0.897721     -0.107896      -1.10710       1.10710       1109.36       1110.47    
  13  0.830899     -0.185247      -1.90078       1.90078       1093.21       1095.11    
  14  0.357312      -1.02915      -10.5598       10.5598       1114.72       1125.28    
  15  0.525942     -0.642564      -6.59320       6.59320       1077.79       1084.39    
  16  0.742929     -0.297155      -3.04904       3.04904       1118.98       1122.03    
  17  0.970959     -0.294711E-01 -0.302397      0.302397       1117.10       1117.40    
  18  0.235894      -1.44437      -14.8204       14.8204       1119.98       1134.80    
  19  0.723381E-01  -2.62640      -26.9489       26.9489       1118.78       1145.73    
  20  0.190915      -1.65593      -16.9911       16.9911       1123.30       1140.29    
  21  0.524670     -0.644986      -6.61806       6.61806       1135.49       1142.11    
  22  0.536043     -0.623540      -6.39800       6.39800       1134.47       1140.87    
  23  0.281730      -1.26681      -12.9984       12.9984       1121.79       1134.78    
  24  0.747791     -0.290632      -2.98211       2.98211       1144.91       1147.90    
  25  0.255771      -1.36347      -13.9903       13.9903       1122.64       1136.63    
  26  0.194866      -1.63544      -16.7809       16.7809       1144.28       1161.06    
  27  0.639630     -0.446865      -4.58518       4.58518       1147.53       1152.12    
  28  0.485808     -0.721941      -7.40767       7.40767       1133.55       1140.95    
  29  0.659147     -0.416809      -4.27679       4.27679       1151.91       1156.19    
  30  0.196308      -1.62807      -16.7053       16.7053       1153.45       1170.15    
  31  0.308964      -1.17453      -12.0516       12.0516       1156.47       1168.52    
  32  0.181287      -1.70768      -17.5221       17.5221       1151.42       1168.94    
  33  0.386667     -0.950191      -9.74970       9.74970       1098.08       1107.83    
  34  0.947825     -0.535853E-01 -0.549827      0.549827       1156.10       1156.65    
  35  0.699942     -0.356758      -3.66061       3.66061       1167.86       1171.52    
  36  0.208747      -1.56663      -16.0748       16.0748       1162.82       1178.90    
  37  0.717648     -0.331775      -3.40427       3.40427       1167.95       1171.35    
  38  0.734922     -0.307991      -3.16022       3.16022       1178.90       1182.06    
  39  0.862816     -0.147554      -1.51402       1.51402       1182.60       1184.11    
  40  0.677494     -0.389354      -3.99507       3.99507       1190.85       1194.84    
  41  0.829375     -0.187082      -1.91961       1.91961       1191.53       1193.45    
  42  0.393856     -0.931770      -9.56068       9.56068       1196.31       1205.88    
  43  0.447370     -0.804370      -8.25345       8.25345       1204.37       1212.63    
  44  0.485389     -0.722806      -7.41654       7.41654       1199.51       1206.93    
  45  0.522363     -0.649392      -6.66326       6.66326       1200.23       1206.90    
  46  0.740056E-01  -2.60361      -26.7151       26.7151       1195.11       1221.83    
  47  0.396252     -0.925705      -9.49844       9.49844       1160.39       1169.89    
  48  0.429395     -0.845378      -8.67423       8.67423       1200.47       1209.15    
  49  0.865472     -0.144480      -1.48248       1.48248       1218.68       1220.16    
loop,thermsimp(1:2)       20   13.3294       12.8862    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341       1150.70         68.13          1.10         38.96          2.40          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    1150.7        3.124     -3.414      4.405     -102.6     0.4608    
                      0.1614E-01 0.6568     -99.70      4.842      1.178    

                       3.371     -1.513      1.823      6797.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.544      0.000      0.000      7000.      418.6    

                      -1.265     -6.270     -7.409     -7.367      9.140    

                      -3.537     -3.949      4211.      0.000      6993.    



                       2430.      6361.      6706.      1460.      2266.    

                       4609.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.991     -1.676     -2.165     -2.167    -0.3807    

                     -0.3252      9.567      8.459    -0.1595E+05 -5.068    

                     -0.5987E-01 -2.272      8.970      9.012    -0.1969E+05



                      -6.000     0.3957    -0.1757      8.942      8.987    

                     -0.1944E+05 -6.000    -0.9335    -0.7417      10.12    

                       9.451    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1150.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       20
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       21
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      340     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633870E-01  -2.75850      -28.3043       28.3043       1045.14       1073.45    
   2  0.713782     -0.337177      -3.45970       3.45970       1052.93       1056.39    
   3  0.851614     -0.160622      -1.64811       1.64811       1077.79       1079.44    
   4  0.721769     -0.326050      -3.34552       3.34552       1080.20       1083.55    
   5  0.954937     -0.461102E-01 -0.473126      0.473126       1057.63       1058.10    
   6  0.302532E-01  -3.49815      -35.8937       35.8937       1093.21       1129.10    
   7  0.942920E-01  -2.36136      -24.2294       24.2294       1091.47       1115.70    
   8  0.515750E-01  -2.96472      -30.4203       30.4203       1095.15       1125.57    
   9  0.612753     -0.489794      -5.02566       5.02566       1087.44       1092.46    
  10  0.758041     -0.277018      -2.84242       2.84242       1074.35       1077.19    
  11  0.530485E-01  -2.93655      -30.1313       30.1313       1094.75       1124.88    
  12  0.941175     -0.606258E-01 -0.622068      0.622068       1093.20       1093.82    
  13  0.167539      -1.78654      -18.3313       18.3313       1098.08       1116.41    
  14  0.738662E-01  -2.60550      -26.7344       26.7344       1109.36       1136.09    
  15  0.822155     -0.195827      -2.00934       2.00934       1077.74       1079.75    
  16  0.578765     -0.546859      -5.61120       5.61120       1117.10       1122.71    
  17  0.912739E-01  -2.39389      -24.5632       24.5632       1118.98       1143.54    
  18  0.949215     -0.521197E-01 -0.534788      0.534788       1114.72       1115.26    
  19  0.485124     -0.723351      -7.42214       7.42214       1121.79       1129.21    
  20  0.359009      -1.02441      -10.5112       10.5112       1119.98       1130.49    
  21  0.747559     -0.290942      -2.98529       2.98529       1122.64       1125.62    
  22  0.482847     -0.728056      -7.47042       7.47042       1123.30       1130.77    
  23  0.994301     -0.571526E-02 -0.586430E-01  0.586430E-01   1134.47       1134.53    
  24  0.937801     -0.642177E-01 -0.658923      0.658923       1133.55       1134.21    
  25  0.699033     -0.358058      -3.67395       3.67395       1135.49       1139.16    
  26  0.358162      -1.02677      -10.5355       10.5355       1118.78       1129.31    
  27  0.746418     -0.292470      -3.00096       3.00096       1144.91       1147.92    
  28  0.532195     -0.630744      -6.47193       6.47193       1147.53       1154.01    
  29  0.727066     -0.318738      -3.27050       3.27050       1151.91       1155.18    
  30  0.461510     -0.773252      -7.93416       7.93416       1156.10       1164.03    
  31  0.285112      -1.25487      -12.8760       12.8760       1144.28       1157.16    
  32  0.316830      -1.14939      -11.7936       11.7936       1156.47       1168.27    
  33  0.835731     -0.179448      -1.84128       1.84128       1151.42       1153.26    
  34  0.516269E-02  -5.26630      -54.0363       54.0363       1160.39       1214.43    
  35  0.309002      -1.17441      -12.0503       12.0503       1153.45       1165.50    
  36  0.770766     -0.260370      -2.67160       2.67160       1167.95       1170.62    
  37  0.878913     -0.129069      -1.32435       1.32435       1167.86       1169.19    
  38  0.981341E-01  -2.32142      -23.8196       23.8196       1162.82       1186.64    
  39  0.634060     -0.455612      -4.67493       4.67493       1178.90       1183.57    
  40  0.359967      -1.02174      -10.4839       10.4839       1182.60       1193.08    
  41  0.480002     -0.733964      -7.53104       7.53104       1191.53       1199.06    
  42  0.706923     -0.346834      -3.55878       3.55878       1190.85       1194.41    
  43  0.497828     -0.697501      -7.15690       7.15690       1196.31       1203.47    
  44  0.885038     -0.122125      -1.25309       1.25309       1200.23       1201.49    
  45  0.504752     -0.683689      -7.01517       7.01517       1199.51       1206.52    
  46  0.719262     -0.329529      -3.38123       3.38123       1200.47       1203.85    
  47  0.516359     -0.660954      -6.78189       6.78189       1204.37       1211.15    
  48  0.584389E-01  -2.83977      -29.1383       29.1383       1218.68       1247.82    
  49  0.768960E-01  -2.56530      -26.3220       26.3220       1150.70       1177.02    
loop,thermsimp(1:2)       21   28.3043       3.45970    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342       1189.20         68.10          1.12         39.09          2.26          0.05        110.62
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1189.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       21
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       22
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      341     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.434858     -0.832735      -8.54451       8.54451       1052.93       1061.48    
   2  0.380177E-01  -3.26970      -33.5497       33.5497       1057.63       1091.18    
   3  0.198795      -1.61548      -16.5761       16.5761       1045.14       1061.72    
   4  0.880944E-01  -2.42935      -24.9270       24.9270       1074.35       1099.28    
   5  0.279105      -1.27617      -13.0945       13.0945       1077.79       1090.89    
   6  0.379482     -0.968948      -9.94216       9.94216       1077.74       1087.68    
   7  0.510142     -0.673065      -6.90617       6.90617       1080.20       1087.11    
   8  0.869007     -0.140404      -1.44065       1.44065       1087.44       1088.88    
   9  0.905256     -0.995378E-01  -1.02133       1.02133       1093.20       1094.22    
  10  0.587200     -0.532390      -5.46273       5.46273       1114.72       1120.19    
  11  0.309008      -1.17439      -12.0501       12.0501       1091.47       1103.52    
  12  0.210718      -1.55723      -15.9784       15.9784       1098.08       1114.06    
  13  0.362152      -1.01569      -10.4218       10.4218       1117.10       1127.52    
  14  0.465452     -0.764747      -7.84689       7.84689       1094.75       1102.60    
  15  0.155270E-01  -4.16518      -42.7379       42.7379       1095.15       1137.88    
  16  0.632166     -0.458603      -4.70562       4.70562       1122.64       1127.35    
  17  0.171028      -1.76593      -18.1198       18.1198       1093.21       1111.33    
  18  0.926401     -0.764482E-01 -0.784417      0.784417       1121.79       1122.57    
  19  0.130449      -2.03678      -20.8989       20.8989       1118.78       1139.68    
  20  0.536069     -0.623492      -6.39751       6.39751       1119.98       1126.38    
  21  0.128128      -2.05472      -21.0831       21.0831       1123.30       1144.38    
  22  0.729730     -0.315081      -3.23297       3.23297       1133.55       1136.78    
  23  0.982387     -0.177702E-01 -0.182336      0.182336       1134.47       1134.66    
  24  0.707707     -0.345726      -3.54741       3.54741       1109.36       1112.91    
  25  0.643878     -0.440245      -4.51726       4.51726       1135.49       1140.00    
  26  0.136721      -1.98982      -20.4170       20.4170       1118.98       1139.39    
  27  0.146320      -1.92196      -19.7208       19.7208       1144.91       1164.63    
  28  0.214169      -1.54099      -15.8118       15.8118       1151.42       1167.23    
  29  0.774008     -0.256172      -2.62853       2.62853       1147.53       1150.16    
  30  0.487333     -0.718808      -7.37553       7.37553       1151.91       1159.28    
  31  0.594481E-01  -2.82265      -28.9626       28.9626       1144.28       1173.25    
  32  0.305368      -1.18624      -12.1717       12.1717       1156.10       1168.27    
  33  0.206200      -1.57891      -16.2008       16.2008       1153.45       1169.65    
  34  0.185235      -1.68613      -17.3010       17.3010       1156.47       1173.77    
  35  0.945154     -0.564077E-01 -0.578787      0.578787       1167.86       1168.44    
  36  0.657328     -0.419572      -4.30514       4.30514       1167.95       1172.25    
  37  0.932191     -0.702171E-01 -0.720482      0.720482       1150.70       1151.42    
  38  0.258055      -1.35458      -13.8991       13.8991       1178.90       1192.80    
  39  0.525568E-01  -2.94586      -30.2268       30.2268       1162.82       1193.05    
  40  0.692807     -0.367004      -3.76574       3.76574       1182.60       1186.36    
  41  0.691658     -0.368664      -3.78278       3.78278       1190.85       1194.63    
  42  0.163447      -1.81127      -18.5850       18.5850       1191.53       1210.12    
  43  0.462923     -0.770194      -7.90278       7.90278       1200.23       1208.14    
  44  0.758611     -0.276266      -2.83470       2.83470       1196.31       1199.15    
  45  0.278938      -1.27677      -13.1006       13.1006       1200.47       1213.57    
  46  0.726655     -0.319304      -3.27631       3.27631       1199.51       1202.79    
  47  0.288418      -1.24334      -12.7577       12.7577       1204.37       1217.13    
  48  0.640221     -0.445941      -4.57570       4.57570       1160.39       1164.96    
  49  0.531981     -0.631147      -6.47605       6.47605       1189.20       1195.68    
loop,thermsimp(1:2)       22   8.54451       33.5497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343       1254.03         68.06          1.11         39.04          2.39          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    344       1096.52         68.06          1.12         39.58          1.92          0.05        110.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1096.52
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       22
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       23
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      343     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.262849      -1.33618      -13.7102       13.7102       1052.93       1066.64    
   2  0.388449     -0.945595      -9.70253       9.70253       1045.14       1054.84    
   3  0.827051     -0.189889      -1.94841       1.94841       1080.20       1082.15    
   4  0.958395     -0.424951E-01 -0.436033      0.436033       1077.74       1078.18    
   5  0.125400      -2.07625      -21.3039       21.3039       1087.44       1108.74    
   6  0.524174     -0.645931      -6.62775       6.62775       1077.79       1084.42    
   7  0.783721     -0.243702      -2.50057       2.50057       1057.63       1060.13    
   8  0.183361      -1.69630      -17.4054       17.4054       1093.20       1110.60    
   9  0.122208      -2.10203      -21.5684       21.5684       1074.35       1095.92    
  10  0.913915     -0.900182E-01 -0.923656      0.923656       1094.75       1095.67    
  11  0.273776      -1.29545      -13.2923       13.2923       1091.47       1104.76    
  12  0.779874     -0.248622      -2.55106       2.55106       1093.21       1095.76    
  13  0.305314      -1.18641      -12.1735       12.1735       1109.36       1121.53    
  14  0.720732     -0.327488      -3.36028       3.36028       1098.08       1101.44    
  15  0.222329      -1.50360      -15.4281       15.4281       1114.72       1130.15    
  16  0.826299     -0.190798      -1.95774       1.95774       1121.79       1123.74    
  17  0.581574     -0.542017      -5.56151       5.56151       1119.98       1125.54    
  18  0.616258     -0.484089      -4.96713       4.96713       1122.64       1127.61    
  19  0.604230     -0.503801      -5.16938       5.16938       1117.10       1122.27    
  20  0.333333      -1.09861      -11.2726       11.2726       1134.47       1145.75    
  21  0.289888E-01  -3.54085      -36.3318       36.3318       1133.55       1169.88    
  22  0.396892     -0.924091      -9.48189       9.48189       1095.15       1104.63    
  23  0.910378     -0.938957E-01 -0.963442      0.963442       1118.98       1119.94    
  24  0.998355     -0.164683E-02 -0.168977E-01  0.168977E-01   1118.78       1118.79    
  25  0.735990     -0.306539      -3.14532       3.14532       1135.49       1138.63    
  26  0.779044     -0.249688      -2.56199       2.56199       1123.30       1125.86    
  27  0.498268     -0.696618      -7.14784       7.14784       1147.53       1154.68    
  28  0.693129     -0.366539      -3.76097       3.76097       1150.70       1154.46    
  29  0.691370     -0.369080      -3.78705       3.78705       1151.91       1155.70    
  30  0.519398     -0.655086      -6.72168       6.72168       1144.91       1151.64    
  31  0.365801      -1.00567      -10.3189       10.3189       1160.39       1170.71    
  32  0.352392      -1.04301      -10.7021       10.7021       1151.42       1162.12    
  33  0.176642      -1.73363      -17.7884       17.7884       1156.10       1173.89    
  34  0.982977     -0.171697E-01 -0.176174      0.176174       1167.86       1168.04    
  35  0.466781     -0.761894      -7.81762       7.81762       1153.45       1161.27    
  36  0.481130     -0.731617      -7.50696       7.50696       1167.95       1175.46    
  37  0.238852      -1.43191      -14.6925       14.6925       1144.28       1158.98    
  38  0.453247     -0.791318      -8.11954       8.11954       1156.47       1164.59    
  39  0.579188     -0.546129      -5.60370       5.60370       1182.60       1188.20    
  40  0.802776E-01  -2.52226      -25.8804       25.8804       1178.90       1204.78    
  41  0.819632     -0.198900      -2.04087       2.04087       1162.82       1164.86    
  42  0.917023     -0.866231E-01 -0.888820      0.888820       1190.85       1191.74    
  43  0.328296      -1.11384      -11.4289       11.4289       1189.20       1200.63    
  44  0.751681     -0.285443      -2.92886       2.92886       1196.31       1199.24    
  45  0.760454     -0.273840      -2.80981       2.80981       1199.51       1202.32    
  46  0.655053     -0.423039      -4.34071       4.34071       1200.23       1204.57    
  47  0.438192     -0.825097      -8.46613       8.46613       1191.53       1200.00    
  48  0.615984E-01  -2.78712      -28.5980       28.5980       1200.47       1229.07    
  49  0.373345     -0.985252      -10.1094       10.1094       1096.52       1106.63    
loop,thermsimp(1:2)       23   13.7102       9.70253    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345       1083.56         68.12          1.12         39.20          2.15          0.05        110.63
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1083.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       23
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       24
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      344     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562447     -0.575458      -5.90465       5.90465       1045.14       1051.05    
   2  0.429755     -0.844539      -8.66562       8.66562       1057.63       1066.30    
   3  0.598807     -0.512815      -5.26188       5.26188       1052.93       1058.19    
   4  0.757798     -0.277339      -2.84571       2.84571       1077.74       1080.59    
   5  0.954130E-01  -2.34954      -24.1081       24.1081       1080.20       1104.31    
   6  0.968708E-01  -2.33438      -23.9525       23.9525       1077.79       1101.74    
   7  0.196924      -1.62494      -16.6731       16.6731       1094.75       1111.42    
   8  0.616654     -0.483447      -4.96054       4.96054       1093.21       1098.17    
   9  0.181969      -1.70392      -17.4835       17.4835       1074.35       1091.84    
  10  0.383918     -0.957326      -9.82290       9.82290       1098.08       1107.90    
  11  0.377012     -0.975478      -10.0092       10.0092       1095.15       1105.16    
  12  0.899192     -0.106259      -1.09030       1.09030       1091.47       1092.56    
  13  0.409833     -0.892005      -9.15266       9.15266       1096.52       1105.67    
  14  0.728621     -0.316601      -3.24857       3.24857       1087.44       1090.69    
  15  0.568233     -0.565224      -5.79964       5.79964       1093.20       1099.00    
  16  0.647091     -0.435269      -4.46619       4.46619       1118.78       1123.24    
  17  0.118896      -2.12951      -21.8504       21.8504       1118.98       1140.83    
  18  0.910801     -0.934313E-01 -0.958677      0.958677       1109.36       1110.32    
  19  0.484176     -0.725308      -7.44222       7.44222       1117.10       1124.54    
  20  0.327343      -1.11675      -11.4587       11.4587       1121.79       1133.24    
  21  0.674995     -0.393050      -4.03300       4.03300       1119.98       1124.01    
  22  0.234857      -1.44878      -14.8656       14.8656       1123.30       1138.16    
  23  0.800837     -0.222098      -2.27890       2.27890       1122.64       1124.92    
  24  0.619975     -0.478077      -4.90544       4.90544       1114.72       1119.63    
  25  0.578519     -0.547284      -5.61555       5.61555       1135.49       1141.10    
  26  0.837214     -0.177675      -1.82309       1.82309       1134.47       1136.30    
  27  0.935915     -0.662302E-01 -0.679573      0.679573       1144.91       1145.59    
  28  0.779751     -0.248781      -2.55268       2.55268       1150.70       1153.25    
  29  0.801557     -0.221199      -2.26967       2.26967       1147.53       1149.80    
  30  0.827533E-01  -2.49189      -25.5687       25.5687       1151.91       1177.48    
  31  0.640581     -0.445379      -4.56993       4.56993       1144.28       1148.85    
  32  0.226382      -1.48553      -15.2427       15.2427       1153.45       1168.69    
  33  0.198814E-01  -3.91797      -40.2014       40.2014       1151.42       1191.62    
  34  0.147003      -1.91730      -19.6730       19.6730       1156.47       1176.15    
  35  0.568592     -0.564592      -5.79315       5.79315       1162.82       1168.62    
  36  0.650717     -0.429680      -4.40885       4.40885       1167.86       1172.27    
  37  0.259092      -1.35057      -13.8579       13.8579       1133.55       1147.40    
  38  0.935898     -0.662490E-01 -0.679766      0.679766       1160.39       1161.07    
  39  0.702433     -0.353205      -3.62416       3.62416       1156.10       1159.72    
  40  0.622661     -0.473753      -4.86107       4.86107       1167.95       1172.81    
  41  0.546960     -0.603380      -6.19115       6.19115       1182.60       1188.79    
  42  0.883578     -0.123775      -1.27003       1.27003       1190.85       1192.12    
  43  0.728206E-02  -4.92234      -50.5070       50.5070       1196.31       1246.82    
  44  0.112001      -2.18925      -22.4634       22.4634       1191.53       1213.99    
  45  0.689494     -0.371797      -3.81493       3.81493       1189.20       1193.01    
  46  0.872629     -0.136244      -1.39797       1.39797       1199.51       1200.91    
  47  0.688489     -0.373256      -3.82989       3.82989       1200.23       1204.06    
  48  0.947843     -0.535662E-01 -0.549631      0.549631       1178.90       1179.45    
  49  0.294529      -1.22238      -12.5425       12.5425       1083.56       1096.10    
loop,thermsimp(1:2)       24   5.90465       8.66562    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346       1193.39         68.12          1.12         39.05          2.29          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1193.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       24
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       25
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      345     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.756122     -0.279553      -2.86843       2.86843       1045.14       1048.01    
   2  0.693006     -0.366716      -3.76279       3.76279       1052.93       1056.70    
   3  0.647780     -0.434203      -4.45526       4.45526       1057.63       1062.09    
   4  0.895769     -0.110072      -1.12943       1.12943       1077.74       1078.87    
   5  0.775956     -0.253659      -2.60274       2.60274       1087.44       1090.04    
   6  0.891264     -0.115114      -1.18116       1.18116       1074.35       1075.53    
   7  0.553736     -0.591068      -6.06481       6.06481       1091.47       1097.53    
   8  0.646797     -0.435723      -4.47085       4.47085       1083.56       1088.03    
   9  0.646048     -0.436881      -4.48274       4.48274       1093.21       1097.69    
  10  0.160937      -1.82675      -18.7438       18.7438       1093.20       1111.94    
  11  0.840732     -0.173482      -1.78006       1.78006       1077.79       1079.57    
  12  0.377447     -0.974325      -9.99733       9.99733       1080.20       1090.20    
  13  0.214649      -1.53875      -15.7888       15.7888       1095.15       1110.94    
  14  0.424093     -0.857804      -8.80173       8.80173       1096.52       1105.32    
  15  0.693510     -0.365990      -3.75534       3.75534       1098.08       1101.84    
  16  0.252894      -1.37478      -14.1063       14.1063       1109.36       1123.46    
  17  0.765441     -0.267303      -2.74274       2.74274       1094.75       1097.49    
  18  0.481029     -0.731828      -7.50912       7.50912       1114.72       1122.23    
  19  0.211808      -1.55207      -15.9255       15.9255       1118.78       1134.70    
  20  0.616599E-01  -2.78612      -28.5878       28.5878       1119.98       1148.57    
  21  0.110259      -2.20492      -22.6242       22.6242       1117.10       1139.73    
  22  0.475319     -0.743769      -7.63165       7.63165       1122.64       1130.27    
  23  0.500411E-01  -2.99491      -30.7301       30.7301       1121.79       1152.52    
  24  0.126445      -2.06795      -21.2187       21.2187       1134.47       1155.69    
  25  0.693760     -0.365629      -3.75164       3.75164       1123.30       1127.05    
  26  0.876607E-01  -2.43428      -24.9776       24.9776       1118.98       1143.95    
  27  0.564718     -0.571429      -5.86330       5.86330       1135.49       1141.35    
  28  0.572706     -0.557383      -5.71918       5.71918       1144.91       1150.63    
  29  0.739618     -0.301621      -3.09487       3.09487       1133.55       1136.64    
  30  0.428028     -0.848566      -8.70695       8.70695       1144.28       1152.99    
  31  0.864224     -0.145923      -1.49728       1.49728       1147.53       1149.03    
  32  0.326884      -1.11815      -11.4731       11.4731       1150.70       1162.17    
  33  0.626295     -0.467933      -4.80136       4.80136       1156.10       1160.90    
  34  0.576680     -0.550467      -5.64822       5.64822       1160.39       1166.04    
  35  0.988375     -0.116929E-01 -0.119979      0.119979       1162.82       1162.94    
  36  0.834431     -0.181006      -1.85726       1.85726       1153.45       1155.31    
  37  0.944839     -0.567403E-01 -0.582199      0.582199       1167.86       1168.44    
  38  0.182182      -1.70275      -17.4715       17.4715       1167.95       1185.42    
  39  0.882984     -0.124449      -1.27694       1.27694       1156.47       1157.75    
  40  0.756839     -0.278604      -2.85870       2.85870       1151.91       1154.77    
  41  0.530350     -0.634218      -6.50757       6.50757       1178.90       1185.41    
  42  0.257866      -1.35531      -13.9066       13.9066       1182.60       1196.50    
  43  0.575794     -0.552006      -5.66401       5.66401       1151.42       1157.08    
  44  0.907029     -0.975811E-01  -1.00126       1.00126       1190.85       1191.85    
  45  0.385513     -0.953180      -9.78036       9.78036       1189.20       1198.98    
  46  0.352081      -1.04389      -10.7111       10.7111       1199.51       1210.22    
  47  0.587153     -0.532470      -5.46355       5.46355       1200.23       1205.70    
  48  0.748916     -0.289129      -2.96669       2.96669       1191.53       1194.50    
  49  0.152024      -1.88371      -19.3284       19.3284       1193.39       1212.72    
loop,thermsimp(1:2)       25   2.86843       3.76279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    347       1196.31         68.02          1.13         39.20          2.13          0.05        110.54
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1196.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       25
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       26
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      346     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.409890     -0.891867      -9.15124       9.15124       1045.14       1054.29    
   2  0.389332     -0.943323      -9.67923       9.67923       1052.93       1062.61    
   3  0.765657     -0.267021      -2.73984       2.73984       1057.63       1060.37    
   4  0.505025     -0.683148      -7.00963       7.00963       1074.35       1081.36    
   5  0.681598     -0.383316      -3.93311       3.93311       1077.74       1081.67    
   6  0.895525     -0.110345      -1.13222       1.13222       1077.79       1078.92    
   7  0.540074     -0.616050      -6.32115       6.32115       1083.56       1089.88    
   8  0.125370      -2.07648      -21.3063       21.3063       1087.44       1108.74    
   9  0.306095      -1.18386      -12.1473       12.1473       1080.20       1092.35    
  10  0.898677     -0.106831      -1.09617       1.09617       1094.75       1095.84    
  11  0.355276      -1.03486      -10.6185       10.6185       1091.47       1102.09    
  12  0.855641     -0.155905      -1.59970       1.59970       1093.21       1094.81    
  13  0.894333E-01  -2.41426      -24.7722       24.7722       1098.08       1122.85    
  14  0.291038      -1.23430      -12.6649       12.6649       1096.52       1109.18    
  15  0.848476E-01  -2.46690      -25.3123       25.3123       1095.15       1120.46    
  16  0.655469     -0.422404      -4.33420       4.33420       1093.20       1097.53    
  17  0.181028      -1.70910      -17.5367       17.5367       1114.72       1132.26    
  18  0.801189     -0.221659      -2.27439       2.27439       1109.36       1111.63    
  19  0.659702     -0.415967      -4.26814       4.26814       1123.30       1127.57    
  20  0.500397     -0.692354      -7.10408       7.10408       1122.64       1129.74    
  21  0.901964     -0.103181      -1.05872       1.05872       1118.78       1119.84    
  22  0.331186      -1.10508      -11.3389       11.3389       1133.55       1144.89    
  23  0.572805E-01  -2.85979      -29.3437       29.3437       1117.10       1146.44    
  24  0.511624     -0.670164      -6.87640       6.87640       1135.49       1142.36    
  25  0.953295     -0.478312E-01 -0.490785      0.490785       1118.98       1119.47    
  26  0.454382     -0.788818      -8.09388       8.09388       1119.98       1128.07    
  27  0.697217E-01  -2.66324      -27.3269       27.3269       1147.53       1174.86    
  28  0.269239      -1.31216      -13.4638       13.4638       1144.91       1158.38    
  29  0.855725     -0.155806      -1.59869       1.59869       1121.79       1123.38    
  30  0.408332E-02  -5.50085      -56.4429       56.4429       1144.28       1200.73    
  31  0.926366     -0.764862E-01 -0.784808      0.784808       1151.91       1152.69    
  32  0.356547      -1.03129      -10.5818       10.5818       1153.45       1164.03    
  33  0.550351     -0.597200      -6.12773       6.12773       1134.47       1140.60    
  34  0.475063     -0.744308      -7.63718       7.63718       1151.42       1159.06    
  35  0.420107     -0.867246      -8.89861       8.89861       1156.47       1165.37    
  36  0.521034     -0.651939      -6.68940       6.68940       1156.10       1162.79    
  37  0.979034     -0.211889E-01 -0.217414      0.217414       1150.70       1150.92    
  38  0.599858     -0.511062      -5.24389       5.24389       1162.82       1168.07    
  39  0.800850     -0.222082      -2.27873       2.27873       1160.39       1162.67    
  40  0.823189     -0.194570      -1.99644       1.99644       1167.86       1169.86    
  41  0.709226E-01  -2.64617      -27.1517       27.1517       1178.90       1206.05    
  42  0.555654     -0.587609      -6.02932       6.02932       1167.95       1173.98    
  43  0.920379     -0.829696E-01 -0.851332      0.851332       1190.85       1191.70    
  44  0.904537     -0.100332      -1.02948       1.02948       1191.53       1192.56    
  45  0.990568     -0.947695E-02 -0.972408E-01  0.972408E-01   1182.60       1182.70    
  46  0.647203     -0.435096      -4.46442       4.46442       1189.20       1193.66    
  47  0.634714     -0.454580      -4.66434       4.66434       1200.23       1204.90    
  48  0.771196     -0.259812      -2.66587       2.66587       1199.51       1202.18    
  49  0.857464     -0.153776      -1.57787       1.57787       1196.31       1197.89    
loop,thermsimp(1:2)       26   9.15124       9.67923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348       1088.31         68.08          1.13         39.18          2.29          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1088.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       26
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       27
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      347     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478820     -0.736431      -7.55635       7.55635       1045.14       1052.70    
   2  0.431280     -0.840999      -8.62930       8.62930       1057.63       1066.26    
   3  0.231120      -1.46482      -15.0302       15.0302       1052.93       1067.96    
   4  0.306155      -1.18366      -12.1453       12.1453       1077.79       1089.94    
   5  0.514107     -0.665324      -6.82673       6.82673       1074.35       1081.18    
   6  0.784944E-01  -2.54473      -26.1109       26.1109       1077.74       1103.85    
   7  0.767893     -0.264105      -2.70992       2.70992       1083.56       1086.27    
   8  0.240450E-02  -6.03041      -61.8767       61.8767       1080.20       1142.08    
   9  0.185505      -1.68467      -17.2860       17.2860       1093.21       1110.49    
  10  0.405909     -0.901627      -9.25139       9.25139       1094.75       1104.00    
  11  0.681143     -0.383983      -3.93996       3.93996       1093.20       1097.14    
  12  0.529175     -0.636436      -6.53033       6.53033       1091.47       1098.00    
  13  0.873060     -0.135751      -1.39291       1.39291       1087.44       1088.83    
  14  0.457661     -0.781625      -8.02008       8.02008       1096.52       1104.54    
  15  0.564230     -0.572293      -5.87217       5.87217       1109.36       1115.23    
  16  0.949800     -0.515039E-01 -0.528470      0.528470       1118.98       1119.51    
  17  0.581003E-01  -2.84558      -29.1979       29.1979       1118.78       1147.98    
  18  0.180069      -1.71442      -17.5912       17.5912       1095.15       1112.74    
  19  0.222412      -1.50322      -15.4242       15.4242       1098.08       1113.50    
  20  0.821703     -0.196377      -2.01498       2.01498       1121.79       1123.80    
  21  0.948363     -0.530176E-01 -0.544002      0.544002       1123.30       1123.84    
  22  0.796186     -0.227922      -2.33866       2.33866       1119.98       1122.32    
  23  0.881546     -0.126078      -1.29365       1.29365       1122.64       1123.93    
  24  0.702001     -0.353821      -3.63048       3.63048       1114.72       1118.35    
  25  0.878483     -0.129559      -1.32938       1.32938       1134.47       1135.80    
  26  0.158251      -1.84358      -18.9165       18.9165       1135.49       1154.40    
  27  0.759310E-02  -4.88052      -50.0779       50.0779       1133.55       1183.62    
  28  0.549090     -0.599492      -6.15125       6.15125       1117.10       1123.25    
  29  0.294083      -1.22389      -12.5581       12.5581       1150.70       1163.26    
  30  0.358851      -1.02485      -10.5157       10.5157       1151.91       1162.43    
  31  0.591031E-01  -2.82847      -29.0223       29.0223       1144.91       1173.94    
  32  0.413139     -0.883972      -9.07024       9.07024       1151.42       1160.49    
  33  0.564800     -0.571284      -5.86182       5.86182       1160.39       1166.25    
  34  0.472034     -0.750704      -7.70280       7.70280       1156.10       1163.80    
  35  0.270343      -1.30806      -13.4217       13.4217       1153.45       1166.87    
  36  0.704266     -0.350600      -3.59743       3.59743       1156.47       1160.07    
  37  0.317895E-01  -3.44862      -35.3855       35.3855       1162.82       1198.21    
  38  0.489641     -0.714083      -7.32705       7.32705       1167.86       1175.19    
  39  0.558309     -0.582843      -5.98042       5.98042       1167.95       1173.93    
  40  0.239099      -1.43088      -14.6819       14.6819       1147.53       1162.22    
  41  0.387399     -0.948301      -9.73030       9.73030       1182.60       1192.33    
  42  0.434686     -0.833131      -8.54857       8.54857       1190.85       1199.40    
  43  0.713921     -0.336983      -3.45771       3.45771       1191.53       1194.99    
  44  0.655374     -0.422550      -4.33569       4.33569       1189.20       1193.53    
  45  0.739749     -0.301444      -3.09305       3.09305       1196.31       1199.41    
  46  0.758411     -0.276530      -2.83741       2.83741       1144.28       1147.12    
  47  0.750796     -0.286621      -2.94095       2.94095       1199.51       1202.45    
  48  0.557150E-01  -2.88751      -29.6280       29.6280       1200.23       1229.86    
  49  0.438885     -0.823518      -8.44993       8.44993       1088.31       1096.76    
loop,thermsimp(1:2)       27   7.55635       8.62930    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    349       1226.82         68.09          1.15         39.29          2.35          0.05        110.92
Just calling func    0   0        110.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    350       1087.08         68.05          1.14         39.25          2.06          0.04        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1087.08
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       27
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       28
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      349     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382581     -0.960815      -9.85871       9.85871       1045.14       1055.00    
   2  0.718155     -0.331070      -3.39704       3.39704       1057.63       1061.03    
   3  0.581515     -0.542118      -5.56255       5.56255       1052.93       1058.50    
   4  0.230175E-01  -3.77150      -38.6985       38.6985       1074.35       1113.05    
   5  0.506601     -0.680031      -6.97764       6.97764       1083.56       1090.54    
   6  0.209297      -1.56400      -16.0479       16.0479       1087.44       1103.49    
   7  0.757725     -0.277434      -2.84669       2.84669       1077.79       1080.64    
   8  0.230972      -1.46546      -15.0367       15.0367       1088.31       1103.35    
   9  0.495080     -0.703037      -7.21370       7.21370       1093.20       1100.41    
  10  0.947190     -0.542553E-01 -0.556701      0.556701       1091.47       1092.03    
  11  0.977432     -0.228269E-01 -0.234221      0.234221       1077.74       1077.97    
  12  0.320616      -1.13751      -11.6717       11.6717       1094.75       1106.42    
  13  0.252125      -1.37783      -14.1376       14.1376       1096.52       1110.66    
  14  0.871535     -0.137499      -1.41085       1.41085       1093.21       1094.62    
  15  0.856468E-02  -4.76011      -48.8424       48.8424       1095.15       1143.99    
  16  0.352534      -1.04261      -10.6980       10.6980       1098.08       1108.78    
  17  0.750419     -0.287124      -2.94612       2.94612       1109.36       1112.30    
  18  0.215691      -1.53391      -15.7391       15.7391       1114.72       1130.46    
  19  0.833929     -0.181606      -1.86342       1.86342       1118.98       1120.84    
  20  0.714656E-01  -2.63854      -27.0734       27.0734       1119.98       1147.05    
  21  0.758349     -0.276612      -2.83825       2.83825       1117.10       1119.94    
  22  0.571963     -0.558680      -5.73249       5.73249       1121.79       1127.52    
  23  0.472398     -0.749934      -7.69490       7.69490       1123.30       1130.99    
  24  0.606854     -0.499467      -5.12492       5.12492       1122.64       1127.76    
  25  0.247109      -1.39793      -14.3438       14.3438       1134.47       1148.82    
  26  0.581778     -0.541666      -5.55791       5.55791       1080.20       1085.76    
  27  0.455447     -0.786476      -8.06986       8.06986       1144.28       1152.35    
  28  0.606617     -0.499857      -5.12892       5.12892       1118.78       1123.91    
  29  0.620033     -0.477983      -4.90447       4.90447       1135.49       1140.39    
  30  0.367527      -1.00096      -10.2706       10.2706       1156.47       1166.74    
  31  0.611260     -0.492233      -5.05069       5.05069       1151.42       1156.47    
  32  0.310332      -1.17011      -12.0062       12.0062       1147.53       1159.54    
  33  0.611387     -0.492025      -5.04856       5.04856       1151.91       1156.96    
  34  0.584386     -0.537193      -5.51202       5.51202       1150.70       1156.21    
  35  0.950350     -0.509246E-01 -0.522525      0.522525       1156.10       1156.62    
  36  0.228570      -1.47591      -15.1440       15.1440       1160.39       1175.53    
  37  0.879867     -0.127985      -1.31322       1.31322       1153.45       1154.76    
  38  0.390808E-01  -3.24212      -33.2667       33.2667       1167.95       1201.22    
  39  0.104244      -2.26102      -23.1998       23.1998       1144.91       1168.11    
  40  0.922634     -0.805225E-01 -0.826223      0.826223       1167.86       1168.69    
  41  0.559015     -0.581578      -5.96744       5.96744       1133.55       1139.51    
  42  0.809074     -0.211865      -2.17390       2.17390       1182.60       1184.77    
  43  0.840951     -0.173222      -1.77739       1.77739       1189.20       1190.98    
  44  0.384796     -0.955043      -9.79948       9.79948       1191.53       1201.33    
  45  0.471744     -0.751318      -7.70910       7.70910       1162.82       1170.53    
  46  0.750950     -0.286417      -2.93885       2.93885       1190.85       1193.79    
  47  0.197617      -1.62143      -16.6371       16.6371       1196.31       1212.95    
  48  0.405005     -0.903855      -9.27425       9.27425       1199.51       1208.78    
  49  0.526481     -0.641540      -6.58270       6.58270       1087.08       1093.66    
loop,thermsimp(1:2)       28   9.85871       3.39704    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351       1175.12         68.10          1.12         39.40          2.12          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1175.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       28
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       29
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      350     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.571653     -0.559223      -5.73806       5.73806       1045.14       1050.88    
   2  0.243540      -1.41247      -14.4931       14.4931       1052.93       1067.43    
   3  0.374772     -0.981437      -10.0703       10.0703       1057.63       1067.70    
   4  0.700054     -0.356598      -3.65898       3.65898       1077.74       1081.40    
   5  0.301581      -1.19872      -12.2997       12.2997       1077.79       1090.09    
   6  0.531818     -0.631454      -6.47920       6.47920       1080.20       1086.68    
   7  0.185013      -1.68733      -17.3133       17.3133       1083.56       1100.87    
   8  0.107050      -2.23446      -22.9273       22.9273       1091.47       1114.40    
   9  0.979566     -0.206453E-01 -0.211836      0.211836       1087.08       1087.29    
  10  0.706074     -0.348035      -3.57111       3.57111       1093.21       1096.78    
  11  0.112110      -2.18827      -22.4534       22.4534       1093.20       1115.65    
  12  0.212442      -1.54908      -15.8948       15.8948       1088.31       1104.20    
  13  0.625740     -0.468820      -4.81046       4.81046       1087.44       1092.25    
  14  0.265918      -1.32457      -13.5911       13.5911       1094.75       1108.34    
  15  0.369004     -0.996947      -10.2295       10.2295       1098.08       1108.31    
  16  0.531799     -0.631491      -6.47958       6.47958       1096.52       1103.00    
  17  0.227318      -1.48140      -15.2003       15.2003       1109.36       1124.56    
  18  0.512871     -0.667732      -6.85144       6.85144       1074.35       1081.20    
  19  0.394785     -0.929415      -9.53651       9.53651       1117.10       1126.64    
  20  0.720084     -0.328388      -3.36952       3.36952       1118.98       1122.35    
  21  0.185505      -1.68467      -17.2860       17.2860       1118.78       1136.06    
  22  0.658242     -0.418183      -4.29088       4.29088       1121.79       1126.08    
  23  0.888593     -0.118116      -1.21196       1.21196       1122.64       1123.85    
  24  0.773453     -0.256890      -2.63589       2.63589       1114.72       1117.36    
  25  0.594480E-01  -2.82265      -28.9626       28.9626       1123.30       1152.26    
  26  0.112908      -2.18118      -22.3806       22.3806       1133.55       1155.93    
  27  0.940300     -0.615559E-01 -0.631611      0.631611       1135.49       1136.12    
  28  0.990261     -0.978663E-02 -0.100418      0.100418       1095.15       1095.25    
  29  0.686451     -0.376220      -3.86031       3.86031       1119.98       1123.84    
  30  0.558815     -0.581936      -5.97111       5.97111       1134.47       1140.45    
  31  0.574196     -0.554784      -5.69251       5.69251       1144.28       1149.98    
  32  0.678960     -0.387193      -3.97289       3.97289       1153.45       1157.42    
  33  0.306232      -1.18341      -12.1427       12.1427       1150.70       1162.84    
  34  0.969485     -0.309907E-01 -0.317988      0.317988       1151.42       1151.74    
  35  0.520627     -0.652722      -6.69743       6.69743       1156.10       1162.80    
  36  0.870581     -0.138594      -1.42208       1.42208       1151.91       1153.33    
  37  0.127650      -2.05846      -21.1214       21.1214       1147.53       1168.65    
  38  0.276190      -1.28667      -13.2022       13.2022       1156.47       1169.68    
  39  0.842544     -0.171330      -1.75797       1.75797       1144.91       1146.67    
  40  0.336933      -1.08787      -11.1624       11.1624       1167.86       1179.02    
  41  0.685284     -0.377921      -3.87777       3.87777       1162.82       1166.70    
  42  0.555142     -0.588531      -6.03878       6.03878       1160.39       1166.43    
  43  0.857048     -0.154261      -1.58284       1.58284       1182.60       1184.18    
  44  0.612111E-01  -2.79343      -28.6627       28.6627       1189.20       1217.86    
  45  0.672500     -0.396753      -4.07099       4.07099       1190.85       1194.92    
  46  0.820423E-01  -2.50052      -25.6573       25.6573       1167.95       1193.61    
  47  0.546679     -0.603893      -6.19641       6.19641       1191.53       1197.73    
  48  0.624723     -0.470446      -4.82714       4.82714       1199.51       1204.34    
  49  0.906365     -0.983128E-01  -1.00877       1.00877       1175.12       1176.13    
loop,thermsimp(1:2)       29   5.73806       14.4931    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352       1218.16         68.07          1.11         39.17          2.20          0.05        110.60
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1218.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       29
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       30
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      351     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218498      -1.52098      -15.6064       15.6064       1045.14       1060.75    
   2  0.142120      -1.95108      -20.0196       20.0196       1052.93       1072.95    
   3  0.240947      -1.42318      -14.6029       14.6029       1057.63       1072.23    
   4  0.622235     -0.474438      -4.86810       4.86810       1074.35       1079.22    
   5  0.167679      -1.78570      -18.3227       18.3227       1077.74       1096.06    
   6  0.712985E-01  -2.64088      -27.0975       27.0975       1080.20       1107.30    
   7  0.861645E-02  -4.75408      -48.7806       48.7806       1087.08       1135.86    
   8  0.820106     -0.198321      -2.03493       2.03493       1077.79       1079.83    
   9  0.882469     -0.125032      -1.28292       1.28292       1087.44       1088.72    
  10  0.530124     -0.634644      -6.51194       6.51194       1095.15       1101.66    
  11  0.920027E-01  -2.38594      -24.4816       24.4816       1093.21       1117.69    
  12  0.669458     -0.401287      -4.11751       4.11751       1083.56       1087.68    
  13  0.348419      -1.05435      -10.8184       10.8184       1096.52       1107.34    
  14  0.979616     -0.205944E-01 -0.211315      0.211315       1088.31       1088.52    
  15  0.661083     -0.413875      -4.24668       4.24668       1098.08       1102.33    
  16  0.535120     -0.625265      -6.41570       6.41570       1094.75       1101.16    
  17  0.929679E-01  -2.37550      -24.3745       24.3745       1091.47       1115.84    
  18  0.580221     -0.544346      -5.58541       5.58541       1093.20       1098.78    
  19  0.652449     -0.427023      -4.38158       4.38158       1114.72       1119.10    
  20  0.252328      -1.37703      -14.1294       14.1294       1118.98       1133.11    
  21  0.364859      -1.00824      -10.3454       10.3454       1119.98       1130.33    
  22  0.205873      -1.58049      -16.2171       16.2171       1122.64       1138.86    
  23  0.404183E-01  -3.20847      -32.9214       32.9214       1109.36       1142.28    
  24  0.922242     -0.809474E-01 -0.830582      0.830582       1121.79       1122.62    
  25  0.164359      -1.80570      -18.5279       18.5279       1117.10       1135.63    
  26  0.606051     -0.500791      -5.13850       5.13850       1118.78       1123.92    
  27  0.461849E-01  -3.07510      -31.5529       31.5529       1135.49       1167.04    
  28  0.761223     -0.272829      -2.79944       2.79944       1134.47       1137.27    
  29  0.170682      -1.76796      -18.1406       18.1406       1144.91       1163.05    
  30  0.501713     -0.689726      -7.07712       7.07712       1144.28       1151.36    
  31  0.892390E-01  -2.41644      -24.7945       24.7945       1151.42       1176.21    
  32  0.281632E-01  -3.56974      -36.6283       36.6283       1123.30       1159.93    
  33  0.664381     -0.408899      -4.19562       4.19562       1151.91       1156.10    
  34  0.124936      -2.07995      -21.3419       21.3419       1133.55       1154.89    
  35  0.623262     -0.472788      -4.85117       4.85117       1153.45       1158.30    
  36  0.876206     -0.132154      -1.35600       1.35600       1156.10       1157.45    
  37  0.744183     -0.295469      -3.03174       3.03174       1150.70       1153.73    
  38  0.251914      -1.37867      -14.1462       14.1462       1160.39       1174.54    
  39  0.391818     -0.936959      -9.61392       9.61392       1162.82       1172.44    
  40  0.131094      -2.03184      -20.8483       20.8483       1147.53       1168.38    
  41  0.887574     -0.119263      -1.22373       1.22373       1156.47       1157.70    
  42  0.682509     -0.381980      -3.91941       3.91941       1175.12       1179.04    
  43  0.184805      -1.68846      -17.3249       17.3249       1167.86       1185.19    
  44  0.258729      -1.35197      -13.8723       13.8723       1182.60       1196.47    
  45  0.275506      -1.28915      -13.2276       13.2276       1167.95       1181.18    
  46  0.718710     -0.330297      -3.38911       3.38911       1190.85       1194.24    
  47  0.445066     -0.809533      -8.30644       8.30644       1191.53       1199.84    
  48  0.772965     -0.257522      -2.64237       2.64237       1199.51       1202.15    
  49  0.992595     -0.743255E-02 -0.762637E-01  0.762637E-01   1218.16       1218.23    
loop,thermsimp(1:2)       30   15.6064       20.0196    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353       1189.20         68.03          1.13         39.18          2.14          0.04        110.53
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1189.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       30
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       31
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      352     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179824      -1.71578      -17.6052       17.6052       1045.14       1062.75    
   2  0.422562     -0.861418      -8.83882       8.83882       1057.63       1066.47    
   3  0.186245      -1.68069      -17.2452       17.2452       1052.93       1070.18    
   4  0.567236     -0.566979      -5.81764       5.81764       1074.35       1080.17    
   5  0.464464E-01  -3.06946      -31.4950       31.4950       1077.79       1109.29    
   6  0.349374      -1.05161      -10.7904       10.7904       1083.56       1094.35    
   7  0.336208      -1.09002      -11.1845       11.1845       1088.31       1099.49    
   8  0.631615     -0.459475      -4.71457       4.71457       1087.44       1092.15    
   9  0.225630E-01  -3.79144      -38.9031       38.9031       1077.74       1116.64    
  10  0.221391      -1.50782      -15.4714       15.4714       1093.20       1108.67    
  11  0.635199     -0.453817      -4.65651       4.65651       1094.75       1099.40    
  12  0.957727     -0.431923E-01 -0.443186      0.443186       1095.15       1095.59    
  13  0.284413      -1.25733      -12.9012       12.9012       1098.08       1110.98    
  14  0.814352     -0.205363      -2.10718       2.10718       1080.20       1082.31    
  15  0.699052     -0.358030      -3.67367       3.67367       1096.52       1100.19    
  16  0.145269      -1.92917      -19.7948       19.7948       1091.47       1111.26    
  17  0.397569     -0.922386      -9.46440       9.46440       1093.21       1102.67    
  18  0.610583     -0.493342      -5.06207       5.06207       1114.72       1119.78    
  19  0.737372     -0.304663      -3.12608       3.12608       1121.79       1124.91    
  20  0.230083      -1.46931      -15.0763       15.0763       1118.78       1133.85    
  21  0.721698     -0.326149      -3.34654       3.34654       1119.98       1123.33    
  22  0.469765     -0.755524      -7.75226       7.75226       1118.98       1126.73    
  23  0.148742      -1.90554      -19.5524       19.5524       1117.10       1136.65    
  24  0.631872     -0.459069      -4.71040       4.71040       1087.08       1091.79    
  25  0.456921     -0.783245      -8.03670       8.03670       1134.47       1142.51    
  26  0.631874E-01  -2.76165      -28.3367       28.3367       1122.64       1150.98    
  27  0.470948     -0.753008      -7.72645       7.72645       1109.36       1117.08    
  28  0.313695      -1.15933      -11.8957       11.8957       1144.28       1156.18    
  29  0.856516     -0.154883      -1.58922       1.58922       1150.70       1152.29    
  30  0.487159     -0.719166      -7.37919       7.37919       1133.55       1140.93    
  31  0.383726     -0.957827      -9.82805       9.82805       1151.91       1161.74    
  32  0.242248      -1.41779      -14.5477       14.5477       1156.10       1170.65    
  33  0.760305     -0.274035      -2.81181       2.81181       1156.47       1159.29    
  34  0.524314     -0.645664      -6.62502       6.62502       1153.45       1160.07    
  35  0.759572     -0.275001      -2.82172       2.82172       1123.30       1126.12    
  36  0.784019     -0.243322      -2.49667       2.49667       1144.91       1147.41    
  37  0.430930     -0.841810      -8.63762       8.63762       1135.49       1144.12    
  38  0.670659     -0.399494      -4.09912       4.09912       1147.53       1151.63    
  39  0.458005     -0.780876      -8.01239       8.01239       1162.82       1170.84    
  40  0.413739     -0.882521      -9.05535       9.05535       1160.39       1169.44    
  41  0.388661     -0.945048      -9.69693       9.69693       1151.42       1161.12    
  42  0.753750     -0.282694      -2.90066       2.90066       1175.12       1178.02    
  43  0.505767     -0.681679      -6.99455       6.99455       1167.95       1174.94    
  44  0.759664     -0.274878      -2.82047       2.82047       1167.86       1170.68    
  45  0.468968     -0.757221      -7.76967       7.76967       1190.85       1198.62    
  46  0.740796     -0.300031      -3.07855       3.07855       1182.60       1185.68    
  47  0.737223     -0.304865      -3.12815       3.12815       1191.53       1194.66    
  48  0.584325     -0.537298      -5.51309       5.51309       1199.51       1205.02    
  49  0.850800     -0.161578      -1.65792       1.65792       1189.20       1190.86    
loop,thermsimp(1:2)       31   17.6052       8.83882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354       1121.36         68.11          1.12         39.23          2.22          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1121.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       31
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       32
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      353     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.574970E-01  -2.85602      -29.3050       29.3050       1045.14       1074.45    
   2  0.695439     -0.363212      -3.72684       3.72684       1057.63       1061.36    
   3  0.338668      -1.08273      -11.1097       11.1097       1052.93       1064.04    
   4  0.494821     -0.703559      -7.21906       7.21906       1074.35       1081.57    
   5  0.433638E-02  -5.44072      -55.8259       55.8259       1080.20       1136.03    
   6  0.270974      -1.30573      -13.3978       13.3978       1087.08       1100.48    
   7  0.926362E-01  -2.37907      -24.4111       24.4111       1087.44       1111.85    
   8  0.437858     -0.825861      -8.47397       8.47397       1083.56       1092.04    
   9  0.297746      -1.21151      -12.4311       12.4311       1095.15       1107.58    
  10  0.948309     -0.530750E-01 -0.544591      0.544591       1094.75       1095.29    
  11  0.845139     -0.168254      -1.72642       1.72642       1088.31       1090.04    
  12  0.930128     -0.724325E-01 -0.743214      0.743214       1096.52       1097.26    
  13  0.921850     -0.813732E-01 -0.834952      0.834952       1093.21       1094.04    
  14  0.447950     -0.803074      -8.24016       8.24016       1093.20       1101.44    
  15  0.712740     -0.338638      -3.47469       3.47469       1077.79       1081.27    
  16  0.574809     -0.553717      -5.68157       5.68157       1098.08       1103.76    
  17  0.136104      -1.99433      -20.4634       20.4634       1091.47       1111.93    
  18  0.340340      -1.07781      -11.0592       11.0592       1077.74       1088.80    
  19  0.149160      -1.90274      -19.5236       19.5236       1109.36       1128.88    
  20  0.433234E-01  -3.13906      -32.2092       32.2092       1114.72       1146.93    
  21  0.909134     -0.952630E-01 -0.977472      0.977472       1119.98       1120.96    
  22  0.619739     -0.478456      -4.90933       4.90933       1121.79       1126.69    
  23  0.726693     -0.319251      -3.27576       3.27576       1123.30       1126.57    
  24  0.962860     -0.378471E-01 -0.388340      0.388340       1118.98       1119.37    
  25  0.615108     -0.485958      -4.98631       4.98631       1118.78       1123.76    
  26  0.500401     -0.692346      -7.10400       7.10400       1117.10       1124.20    
  27  0.402080     -0.911104      -9.34863       9.34863       1133.55       1142.90    
  28  0.749737     -0.288033      -2.95544       2.95544       1134.47       1137.43    
  29  0.926553     -0.762839E-01 -0.782732      0.782732       1135.49       1136.27    
  30  0.519037     -0.655779      -6.72880       6.72880       1144.91       1151.64    
  31  0.498178E-01  -2.99938      -30.7760       30.7760       1122.64       1153.42    
  32  0.473692     -0.747197      -7.66682       7.66682       1147.53       1155.20    
  33  0.574927E-02  -5.15868      -52.9321       52.9321       1150.70       1203.63    
  34  0.349575      -1.05104      -10.7844       10.7844       1144.28       1155.07    
  35  0.661333     -0.413498      -4.24281       4.24281       1156.47       1160.72    
  36  0.314247E-01  -3.46016      -35.5039       35.5039       1153.45       1188.95    
  37  0.318841      -1.14306      -11.7287       11.7287       1151.42       1163.15    
  38  0.111349E-01  -4.49767      -46.1496       46.1496       1151.91       1198.06    
  39  0.845234E-02  -4.77331      -48.9779       48.9779       1160.39       1209.37    
  40  0.704975E-01  -2.65218      -27.2134       27.2134       1156.10       1183.31    
  41  0.126423      -2.06812      -21.2205       21.2205       1167.86       1189.08    
  42  0.120140      -2.11910      -21.7436       21.7436       1162.82       1184.57    
  43  0.664865     -0.408172      -4.18816       4.18816       1167.95       1172.14    
  44  0.829336     -0.187130      -1.92009       1.92009       1175.12       1177.04    
  45  0.656735     -0.420475      -4.31440       4.31440       1182.60       1186.91    
  46  0.955374     -0.456526E-01 -0.468431      0.468431       1189.20       1189.67    
  47  0.220157      -1.51341      -15.5288       15.5288       1191.53       1207.06    
  48  0.151230      -1.88895      -19.3821       19.3821       1190.85       1210.23    
  49  0.127393      -2.06048      -21.1421       21.1421       1121.36       1142.50    
loop,thermsimp(1:2)       32   29.3050       3.72684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355       1136.32         68.09          1.11         39.45          1.94          0.05        110.63
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1136.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       32
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       33
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      354     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806752     -0.214739      -2.20339       2.20339       1057.63       1059.83    
   2  0.549594     -0.598576      -6.14185       6.14185       1052.93       1059.07    
   3  0.631143     -0.460223      -4.72225       4.72225       1045.14       1049.86    
   4  0.268455      -1.31507      -13.4937       13.4937       1077.79       1091.29    
   5  0.513519     -0.666468      -6.83848       6.83848       1074.35       1081.19    
   6  0.886725     -0.120220      -1.23355       1.23355       1077.74       1078.97    
   7  0.568618     -0.564546      -5.79268       5.79268       1088.31       1094.10    
   8  0.443178     -0.813783      -8.35004       8.35004       1083.56       1091.91    
   9  0.898491     -0.107039      -1.09830       1.09830       1093.21       1094.30    
  10  0.235118      -1.44767      -14.8542       14.8542       1094.75       1109.60    
  11  0.509444     -0.674434      -6.92022       6.92022       1096.52       1103.44    
  12  0.223921      -1.49646      -15.3548       15.3548       1087.08       1102.43    
  13  0.188995      -1.66603      -17.0948       17.0948       1093.20       1110.29    
  14  0.969568     -0.309049E-01 -0.317108      0.317108       1098.08       1098.40    
  15  0.287265      -1.24735      -12.7988       12.7988       1095.15       1107.95    
  16  0.559573E-01  -2.88317      -29.5835       29.5835       1087.44       1117.02    
  17  0.668393     -0.402878      -4.13384       4.13384       1091.47       1095.60    
  18  0.488393     -0.716635      -7.35323       7.35323       1118.98       1126.33    
  19  0.605591     -0.501551      -5.14630       5.14630       1119.98       1125.13    
  20  0.490783     -0.711753      -7.30313       7.30313       1118.78       1126.08    
  21  0.313180      -1.16098      -11.9125       11.9125       1117.10       1129.01    
  22  0.200234      -1.60827      -16.5021       16.5021       1123.30       1139.80    
  23  0.575811     -0.551975      -5.66370       5.66370       1121.79       1127.45    
  24  0.856965     -0.154358      -1.58383       1.58383       1109.36       1110.94    
  25  0.310774      -1.16869      -11.9916       11.9916       1080.20       1092.20    
  26  0.836513     -0.178513      -1.83168       1.83168       1135.49       1137.32    
  27  0.286335      -1.25059      -12.8321       12.8321       1134.47       1147.31    
  28  0.240507      -1.42500      -14.6216       14.6216       1121.36       1135.98    
  29  0.103511E-01  -4.57066      -46.8985       46.8985       1133.55       1180.44    
  30  0.516897     -0.659912      -6.77120       6.77120       1114.72       1121.49    
  31  0.237615      -1.43710      -14.7458       14.7458       1144.91       1159.66    
  32  0.602330     -0.506950      -5.20170       5.20170       1122.64       1127.84    
  33  0.677792     -0.388915      -3.99057       3.99057       1144.28       1148.27    
  34  0.965031     -0.355954E-01 -0.365236      0.365236       1147.53       1147.90    
  35  0.851769     -0.160440      -1.64624       1.64624       1156.47       1158.12    
  36  0.998637     -0.136415E-02 -0.139972E-01  0.139972E-01   1151.42       1151.43    
  37  0.690071E-01  -2.67355      -27.4327       27.4327       1167.95       1195.38    
  38  0.865316E-02  -4.74983      -48.7369       48.7369       1175.12       1223.86    
  39  0.657551     -0.419234      -4.30166       4.30166       1156.10       1160.40    
  40  0.249918      -1.38662      -14.2278       14.2278       1162.82       1177.05    
  41  0.762839     -0.270708      -2.77767       2.77767       1182.60       1185.38    
  42  0.875176     -0.133331      -1.36808       1.36808       1153.45       1154.82    
  43  0.805569     -0.216207      -2.21845       2.21845       1167.86       1170.08    
  44  0.308797      -1.17507      -12.0571       12.0571       1189.20       1201.26    
  45  0.255763      -1.36350      -13.9906       13.9906       1151.91       1165.90    
  46  0.218508      -1.52093      -15.6059       15.6059       1150.70       1166.31    
  47  0.518593     -0.656637      -6.73760       6.73760       1191.53       1198.27    
  48  0.856838     -0.154506      -1.58535       1.58535       1160.39       1161.97    
  49  0.300810      -1.20128      -12.3260       12.3260       1136.32       1148.65    
loop,thermsimp(1:2)       33   2.20339       6.14185    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    356       1177.56         68.04          1.12         39.18          2.52          0.05        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1177.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       33
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       34
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      355     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.375893     -0.978451      -10.0397       10.0397       1045.14       1055.18    
   2  0.356800      -1.03058      -10.5746       10.5746       1052.93       1063.51    
   3  0.686180     -0.376616      -3.86437       3.86437       1057.63       1061.50    
   4  0.443986     -0.811963      -8.33136       8.33136       1077.74       1086.07    
   5  0.837544     -0.177281      -1.81904       1.81904       1074.35       1076.17    
   6  0.902394     -0.102704      -1.05382       1.05382       1077.79       1078.85    
   7  0.509658E-01  -2.97660      -30.5422       30.5422       1083.56       1114.10    
   8  0.662569     -0.411631      -4.22365       4.22365       1080.20       1084.43    
   9  0.226311      -1.48585      -15.2459       15.2459       1088.31       1103.55    
  10  0.336196      -1.09006      -11.1849       11.1849       1093.21       1104.39    
  11  0.122038      -2.10342      -21.5827       21.5827       1091.47       1113.05    
  12  0.323275      -1.12925      -11.5870       11.5870       1098.08       1109.67    
  13  0.326513      -1.11929      -11.4847       11.4847       1087.08       1098.56    
  14  0.904434     -0.100446      -1.03065       1.03065       1096.52       1097.55    
  15  0.856476     -0.154928      -1.58969       1.58969       1095.15       1096.74    
  16  0.873700     -0.135019      -1.38540       1.38540       1094.75       1096.13    
  17  0.989627     -0.104267E-01 -0.106986      0.106986       1093.20       1093.31    
  18  0.546745     -0.603772      -6.19517       6.19517       1109.36       1115.55    
  19  0.731718     -0.312360      -3.20506       3.20506       1087.44       1090.64    
  20  0.859154     -0.151807      -1.55766       1.55766       1114.72       1116.28    
  21  0.419381     -0.868976      -8.91636       8.91636       1119.98       1128.90    
  22  0.587067     -0.532617      -5.46506       5.46506       1118.78       1124.24    
  23  0.460289E-01  -3.07849      -31.5877       31.5877       1118.98       1150.56    
  24  0.522902     -0.648362      -6.65269       6.65269       1121.79       1128.44    
  25  0.398671     -0.919618      -9.43599       9.43599       1122.64       1132.08    
  26  0.881302     -0.126355      -1.29650       1.29650       1117.10       1118.40    
  27  0.226039      -1.48705      -15.2582       15.2582       1121.36       1136.62    
  28  0.124144      -2.08631      -21.4072       21.4072       1135.49       1156.89    
  29  0.542680     -0.611235      -6.27175       6.27175       1123.30       1129.57    
  30  0.167496      -1.78679      -18.3339       18.3339       1134.47       1152.81    
  31  0.619825     -0.478318      -4.90792       4.90792       1147.53       1152.44    
  32  0.169564      -1.77452      -18.2080       18.2080       1144.28       1162.49    
  33  0.781291     -0.246807      -2.53243       2.53243       1136.32       1138.85    
  34  0.486264     -0.721004      -7.39806       7.39806       1151.42       1158.82    
  35  0.895366     -0.110522      -1.13404       1.13404       1153.45       1154.58    
  36  0.321503      -1.13475      -11.6434       11.6434       1156.47       1168.12    
  37  0.607862E-01  -2.80039      -28.7342       28.7342       1144.91       1173.65    
  38  0.365124      -1.00752      -10.3379       10.3379       1156.10       1166.44    
  39  0.110107      -2.20630      -22.6384       22.6384       1160.39       1183.03    
  40  0.905082     -0.997294E-01  -1.02330       1.02330       1151.91       1152.93    
  41  0.960140     -0.406759E-01 -0.417366      0.417366       1150.70       1151.12    
  42  0.320200      -1.13881      -11.6851       11.6851       1167.86       1179.55    
  43  0.396920     -0.924021      -9.48117       9.48117       1162.82       1172.31    
  44  0.674668     -0.393534      -4.03797       4.03797       1133.55       1137.58    
  45  0.894300     -0.111715      -1.14628       1.14628       1182.60       1183.74    
  46  0.875669     -0.132767      -1.36230       1.36230       1167.95       1169.31    
  47  0.881286     -0.126374      -1.29669       1.29669       1191.53       1192.83    
  48  0.779885     -0.248609      -2.55092       2.55092       1189.20       1191.75    
  49  0.691264     -0.369233      -3.78862       3.78862       1177.56       1181.35    
loop,thermsimp(1:2)       34   10.0397       10.5746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357       1271.39         68.03          1.14         39.14          2.59          0.05        110.95
Just calling func    0   0        110.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    358       1086.84         68.05          1.13         39.22          2.19          0.05        110.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1086.84
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       34
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       35
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      357     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.478411     -0.737285      -7.56511       7.56511       1045.14       1052.71    
   2  0.380700     -0.965745      -9.90929       9.90929       1057.63       1067.54    
   3  0.821138     -0.197064      -2.02203       2.02203       1052.93       1054.95    
   4  0.728654     -0.316557      -3.24812       3.24812       1074.35       1077.60    
   5  0.670900     -0.399135      -4.09544       4.09544       1077.79       1081.89    
   6  0.175262      -1.74147      -17.8689       17.8689       1080.20       1098.07    
   7  0.709150     -0.343688      -3.52651       3.52651       1077.74       1081.27    
   8  0.247481      -1.39642      -14.3283       14.3283       1087.44       1101.77    
   9  0.231597      -1.46276      -15.0090       15.0090       1093.20       1108.21    
  10  0.764757     -0.268198      -2.75192       2.75192       1094.75       1097.50    
  11  0.798540     -0.224970      -2.30836       2.30836       1095.15       1097.45    
  12  0.903782     -0.101167      -1.03805       1.03805       1096.52       1097.56    
  13  0.136634      -1.99045      -20.4236       20.4236       1087.08       1107.50    
  14  0.141955      -1.95225      -20.0316       20.0316       1088.31       1108.34    
  15  0.658650     -0.417563      -4.28452       4.28452       1093.21       1097.49    
  16  0.265370      -1.32663      -13.6122       13.6122       1098.08       1111.69    
  17  0.439277E-01  -3.12521      -32.0671       32.0671       1091.47       1123.54    
  18  0.451732     -0.794667      -8.15390       8.15390       1083.56       1091.72    
  19  0.475868     -0.742615      -7.61981       7.61981       1109.36       1116.98    
  20  0.336185      -1.09009      -11.1852       11.1852       1114.72       1125.91    
  21  0.519277     -0.655317      -6.72406       6.72406       1117.10       1123.83    
  22  0.455030     -0.787393      -8.07926       8.07926       1118.78       1126.86    
  23  0.272148E-01  -3.60399      -36.9798       36.9798       1121.79       1158.77    
  24  0.125510      -2.07537      -21.2949       21.2949       1119.98       1141.27    
  25  0.687868     -0.374159      -3.83916       3.83916       1123.30       1127.14    
  26  0.271894      -1.30234      -13.3631       13.3631       1122.64       1136.00    
  27  0.641335     -0.444204      -4.55788       4.55788       1121.36       1125.92    
  28  0.858838E-01  -2.45476      -25.1877       25.1877       1133.55       1158.73    
  29  0.579605     -0.545408      -5.59631       5.59631       1136.32       1141.92    
  30  0.249942      -1.38653      -14.2269       14.2269       1118.98       1133.20    
  31  0.938016     -0.639885E-01 -0.656572      0.656572       1150.70       1151.36    
  32  0.453695     -0.790330      -8.10939       8.10939       1147.53       1155.64    
  33  0.319751      -1.14021      -11.6995       11.6995       1134.47       1146.17    
  34  0.346149      -1.06089      -10.8855       10.8855       1151.91       1162.79    
  35  0.870951     -0.138169      -1.41773       1.41773       1153.45       1154.87    
  36  0.187313      -1.67497      -17.1865       17.1865       1135.49       1152.67    
  37  0.984950     -0.151645E-01 -0.155600      0.155600       1151.42       1151.57    
  38  0.524062     -0.646145      -6.62995       6.62995       1144.28       1150.91    
  39  0.432392     -0.838423      -8.60287       8.60287       1156.10       1164.70    
  40  0.687254     -0.375052      -3.84832       3.84832       1156.47       1160.32    
  41  0.869131     -0.140262      -1.43919       1.43919       1167.95       1169.39    
  42  0.350749      -1.04769      -10.7501       10.7501       1162.82       1173.57    
  43  0.663152E-01  -2.71334      -27.8409       27.8409       1144.91       1172.76    
  44  0.306857      -1.18137      -12.1218       12.1218       1167.86       1179.98    
  45  0.925728     -0.771751E-01 -0.791876      0.791876       1177.56       1178.35    
  46  0.649899     -0.430939      -4.42177       4.42177       1160.39       1164.81    
  47  0.492368     -0.708529      -7.27006       7.27006       1182.60       1189.87    
  48  0.104223      -2.26122      -23.2019       23.2019       1189.20       1212.40    
  49  0.345103      -1.06391      -10.9166       10.9166       1086.84       1097.76    
loop,thermsimp(1:2)       35   7.56511       9.90929    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359       1238.78         68.10          1.12         39.19          2.34          0.05        110.79
Just calling func    0   0        110.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    360       1117.81         68.08          1.12         39.15          2.49          0.05        110.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1117.81
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       35
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       36
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      359     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.943705     -0.579419E-01 -0.594529      0.594529       1045.14       1045.74    
   2  0.628336     -0.464680      -4.76798       4.76798       1052.93       1057.70    
   3  0.261321      -1.34200      -13.7700       13.7700       1057.63       1071.40    
   4  0.256100      -1.36219      -13.9771       13.9771       1074.35       1088.33    
   5  0.318070      -1.14548      -11.7536       11.7536       1077.74       1089.49    
   6  0.895943     -0.109878      -1.12744       1.12744       1077.79       1078.92    
   7  0.856491     -0.154912      -1.58951       1.58951       1083.56       1085.15    
   8  0.269953      -1.30951      -13.4366       13.4366       1095.15       1108.58    
   9  0.663616     -0.410051      -4.20744       4.20744       1093.21       1097.41    
  10  0.249338E-01  -3.69153      -37.8780       37.8780       1094.75       1132.63    
  11  0.362852      -1.01376      -10.4020       10.4020       1096.52       1106.92    
  12  0.868529E-02  -4.74612      -48.6989       48.6989       1086.84       1135.54    
  13  0.705785     -0.348444      -3.57530       3.57530       1080.20       1083.78    
  14  0.527358     -0.639875      -6.56561       6.56561       1087.44       1094.00    
  15  0.831399     -0.184645      -1.89460       1.89460       1087.08       1088.97    
  16  0.594963     -0.519255      -5.32796       5.32796       1093.20       1098.53    
  17  0.501981     -0.689193      -7.07165       7.07165       1088.31       1095.38    
  18  0.594311     -0.520353      -5.33922       5.33922       1098.08       1103.42    
  19  0.618124     -0.481066      -4.93611       4.93611       1109.36       1114.29    
  20  0.959578E-01  -2.34385      -24.0497       24.0497       1091.47       1115.52    
  21  0.776845     -0.252514      -2.59099       2.59099       1117.10       1119.69    
  22  0.458742     -0.779266      -7.99587       7.99587       1114.72       1122.72    
  23  0.645084     -0.438374      -4.49806       4.49806       1121.36       1125.86    
  24  0.545194     -0.606614      -6.22432       6.22432       1118.78       1125.00    
  25  0.618072     -0.481151      -4.93698       4.93698       1123.30       1128.23    
  26  0.390168     -0.941179      -9.65722       9.65722       1118.98       1128.63    
  27  0.122318      -2.10113      -21.5592       21.5592       1122.64       1144.20    
  28  0.823049     -0.194740      -1.99818       1.99818       1119.98       1121.98    
  29  0.817844E-01  -2.50367      -25.6896       25.6896       1136.32       1162.01    
  30  0.189400      -1.66389      -17.0728       17.0728       1134.47       1151.55    
  31  0.257378      -1.35721      -13.9260       13.9260       1144.28       1158.21    
  32  0.854384     -0.157375      -1.61479       1.61479       1150.70       1152.31    
  33  0.128350      -2.05300      -21.0653       21.0653       1151.42       1172.48    
  34  0.410790     -0.889673      -9.12873       9.12873       1135.49       1144.62    
  35  0.645584     -0.437599      -4.49011       4.49011       1153.45       1157.94    
  36  0.309517      -1.17274      -12.0332       12.0332       1147.53       1159.57    
  37  0.568550     -0.564667      -5.79392       5.79392       1133.55       1139.34    
  38  0.702184     -0.353560      -3.62780       3.62780       1121.79       1125.41    
  39  0.939991     -0.618850E-01 -0.634988      0.634988       1156.47       1157.11    
  40  0.944105     -0.575180E-01 -0.590179      0.590179       1151.91       1152.50    
  41  0.202943      -1.59483      -16.3642       16.3642       1156.10       1172.46    
  42  0.948631E-02  -4.65791      -47.7937       47.7937       1160.39       1208.18    
  43  0.568674     -0.564449      -5.79168       5.79168       1167.95       1173.74    
  44  0.216733      -1.52909      -15.6896       15.6896       1144.91       1160.60    
  45  0.385755     -0.952553      -9.77393       9.77393       1162.82       1172.60    
  46  0.894850E-01  -2.41368      -24.7663       24.7663       1177.56       1202.32    
  47  0.136648      -1.99035      -20.4225       20.4225       1167.86       1188.28    
  48  0.473765     -0.747044      -7.66525       7.66525       1182.60       1190.26    
  49  0.208114E-01  -3.87225      -39.7323       39.7323       1117.81       1157.54    
loop,thermsimp(1:2)       36  0.594529       4.76798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361       1134.11         68.07          1.13         39.58          1.87          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    1134.1        4.903     -3.413      4.482     -102.6     0.1768    
                     -0.1007     0.7068     -99.70      5.028      1.486    

                       3.350     -2.040      1.863      6911.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.460      0.000      0.000      7000.      465.4    

                      -1.288     -4.982     -6.818     -6.955      9.231    

                      -4.343     -3.949      5014.      0.000      7671.    



                       2616.      6200.      7469.      2829.      4103.    

                       5168.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.944     -1.640     -2.205     -2.134    -0.3807    

                     -0.3252      9.595      8.456    -0.1589E+05 -5.119    

                     -0.1842     -2.337      9.034      8.974    -0.1969E+05



                      -6.000     0.3186    -0.1035      8.943      8.925    

                     -0.1944E+05 -6.000     -1.152    -0.7169      9.688    

                       9.400    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1134.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       36
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       37
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      360     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.577652     -0.548784      -5.63094       5.63094       1045.14       1050.77    
   2  0.954687     -0.463716E-01 -0.475808      0.475808       1052.93       1053.41    
   3  0.530232     -0.634441      -6.50985       6.50985       1057.63       1064.14    
   4  0.762581     -0.271046      -2.78114       2.78114       1077.79       1080.57    
   5  0.261488      -1.34137      -13.7635       13.7635       1080.20       1093.97    
   6  0.639820     -0.446569      -4.58214       4.58214       1083.56       1088.14    
   7  0.527286     -0.640012      -6.56701       6.56701       1074.35       1080.92    
   8  0.819676     -0.198846      -2.04031       2.04031       1087.08       1089.12    
   9  0.564974     -0.570976      -5.85866       5.85866       1077.74       1083.60    
  10  0.313261      -1.16072      -11.9099       11.9099       1087.44       1099.35    
  11  0.741013     -0.299737      -3.07554       3.07554       1088.31       1091.38    
  12  0.286155      -1.25122      -12.8385       12.8385       1093.21       1106.05    
  13  0.145515      -1.92747      -19.7774       19.7774       1093.20       1112.98    
  14  0.417445     -0.873602      -8.96383       8.96383       1098.08       1107.04    
  15  0.110117      -2.20621      -22.6374       22.6374       1096.52       1119.16    
  16  0.798228     -0.225361      -2.31238       2.31238       1095.15       1097.46    
  17  0.981317     -0.188596E-01 -0.193514      0.193514       1109.36       1109.55    
  18  0.947313     -0.541256E-01 -0.555371      0.555371       1091.47       1092.02    
  19  0.979175     -0.210453E-01 -0.215941      0.215941       1117.10       1117.32    
  20  0.507968     -0.677337      -6.95000       6.95000       1119.98       1126.93    
  21  0.313327      -1.16051      -11.9077       11.9077       1114.72       1126.63    
  22  0.174912      -1.74347      -17.8894       17.8894       1118.78       1136.67    
  23  0.278222      -1.27933      -13.1270       13.1270       1121.79       1134.91    
  24  0.551320     -0.595439      -6.10967       6.10967       1121.36       1127.47    
  25  0.509281     -0.674756      -6.92351       6.92351       1123.30       1130.22    
  26  0.202795E-01  -3.89814      -39.9980       39.9980       1118.98       1158.98    
  27  0.394215     -0.930860      -9.55134       9.55134       1094.75       1104.30    
  28  0.463302     -0.769377      -7.89440       7.89440       1086.84       1094.74    
  29  0.132020      -2.02480      -20.7760       20.7760       1133.55       1154.32    
  30  0.330810      -1.10621      -11.3506       11.3506       1122.64       1133.99    
  31  0.415110     -0.879212      -9.02139       9.02139       1135.49       1144.51    
  32  0.381803     -0.962850      -9.87958       9.87958       1134.47       1144.35    
  33  0.209798E-01  -3.86420      -39.6496       39.6496       1150.70       1190.35    
  34  0.906539     -0.981217E-01  -1.00680       1.00680       1151.91       1152.92    
  35  0.507460     -0.678337      -6.96026       6.96026       1156.47       1163.43    
  36  0.694619     -0.364392      -3.73894       3.73894       1117.81       1121.54    
  37  0.704259     -0.350610      -3.59753       3.59753       1153.45       1157.05    
  38  0.953152     -0.479806E-01 -0.492318      0.492318       1144.28       1144.78    
  39  0.393408     -0.932907      -9.57235       9.57235       1147.53       1157.11    
  40  0.361825      -1.01659      -10.4310       10.4310       1144.91       1155.35    
  41  0.420592     -0.866091      -8.88677       8.88677       1136.32       1145.21    
  42  0.474514     -0.745463      -7.64903       7.64903       1156.10       1163.75    
  43  0.769306     -0.262267      -2.69106       2.69106       1151.42       1154.11    
  44  0.881065     -0.126624      -1.29926       1.29926       1162.82       1164.12    
  45  0.298206      -1.20997      -12.4152       12.4152       1167.95       1180.36    
  46  0.364982E-01  -3.31049      -33.9682       33.9682       1167.86       1201.83    
  47  0.835758     -0.179417      -1.84095       1.84095       1182.60       1184.44    
  48  0.936392     -0.657215E-01 -0.674353      0.674353       1177.56       1178.23    
  49  0.213316      -1.54498      -15.8527       15.8527       1134.11       1149.96    
loop,thermsimp(1:2)       37   5.63094      0.475808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362       1089.28         68.12          1.11         39.09          2.44          0.05        110.80
Just calling func    0   0        110.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1089.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       37
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       38
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      361     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708199     -0.345030      -3.54027       3.54027       1045.14       1048.68    
   2  0.656861     -0.420283      -4.31243       4.31243       1052.93       1057.25    
   3  0.531016     -0.632963      -6.49469       6.49469       1057.63       1064.13    
   4  0.259645      -1.34844      -13.8361       13.8361       1077.79       1091.63    
   5  0.509285E-01  -2.97733      -30.5497       30.5497       1074.35       1104.90    
   6  0.222403      -1.50327      -15.4247       15.4247       1077.74       1093.16    
   7  0.883122E-01  -2.42688      -24.9016       24.9016       1083.56       1108.46    
   8  0.689941     -0.371150      -3.80828       3.80828       1087.08       1090.89    
   9  0.811351     -0.209054      -2.14506       2.14506       1088.31       1090.45    
  10  0.252526      -1.37624      -14.1213       14.1213       1091.47       1105.59    
  11  0.229840      -1.47037      -15.0872       15.0872       1080.20       1095.29    
  12  0.108257      -2.22324      -22.8122       22.8122       1086.84       1109.65    
  13  0.933379E-02  -4.67411      -47.9600       47.9600       1095.15       1143.11    
  14  0.685050E-01  -2.68085      -27.5076       27.5076       1087.44       1114.95    
  15  0.875782     -0.132638      -1.36097       1.36097       1094.75       1096.11    
  16  0.592250     -0.523826      -5.37486       5.37486       1093.21       1098.58    
  17  0.259190E-01  -3.65278      -37.4803       37.4803       1098.08       1135.56    
  18  0.411624     -0.887646      -9.10793       9.10793       1109.36       1118.47    
  19  0.215731      -1.53372      -15.7372       15.7372       1093.20       1108.94    
  20  0.104157      -2.26185      -23.2084       23.2084       1117.10       1140.31    
  21  0.796475     -0.227560      -2.33494       2.33494       1096.52       1098.85    
  22  0.316732      -1.14970      -11.7968       11.7968       1117.81       1129.60    
  23  0.868566     -0.140911      -1.44586       1.44586       1114.72       1116.17    
  24  0.932817     -0.695461E-01 -0.713597      0.713597       1119.98       1120.69    
  25  0.704796E-01  -2.65243      -27.2160       27.2160       1121.36       1148.57    
  26  0.584289     -0.537360      -5.51373       5.51373       1123.30       1128.81    
  27  0.345306      -1.06332      -10.9105       10.9105       1122.64       1133.55    
  28  0.367589E-01  -3.30338      -33.8952       33.8952       1121.79       1155.68    
  29  0.470285     -0.754417      -7.74090       7.74090       1118.78       1126.52    
  30  0.303718      -1.19165      -12.2273       12.2273       1134.47       1146.70    
  31  0.298675      -1.20840      -12.3991       12.3991       1135.49       1147.89    
  32  0.506100     -0.681022      -6.98781       6.98781       1144.28       1151.27    
  33  0.240488      -1.42508      -14.6225       14.6225       1136.32       1150.94    
  34  0.673726     -0.394932      -4.05231       4.05231       1134.11       1138.16    
  35  0.303531      -1.19227      -12.2336       12.2336       1151.91       1164.14    
  36  0.450278     -0.797890      -8.18697       8.18697       1151.42       1159.61    
  37  0.850970     -0.161378      -1.65586       1.65586       1133.55       1135.20    
  38  0.370442     -0.993060      -10.1896       10.1896       1144.91       1155.10    
  39  0.328520      -1.11316      -11.4219       11.4219       1153.45       1164.87    
  40  0.194991      -1.63480      -16.7743       16.7743       1147.53       1164.31    
  41  0.547740     -0.601955      -6.17652       6.17652       1118.98       1125.15    
  42  0.574734     -0.553847      -5.68290       5.68290       1156.47       1162.16    
  43  0.900615     -0.104678      -1.07408       1.07408       1156.10       1157.17    
  44  0.316870      -1.14926      -11.7923       11.7923       1162.82       1174.62    
  45  0.961546     -0.392133E-01 -0.402359      0.402359       1177.56       1177.96    
  46  0.714054     -0.336796      -3.45579       3.45579       1167.95       1171.40    
  47  0.325407E-01  -3.42526      -35.1459       35.1459       1182.60       1217.74    
  48  0.264027      -1.33170      -13.6643       13.6643       1150.70       1164.36    
  49  0.139486      -1.96979      -20.2116       20.2116       1089.28       1109.50    
loop,thermsimp(1:2)       38   3.54027       4.31243    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363       1200.15         68.10          1.12         39.65          1.78          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    364       1093.73         68.12          1.13         39.26          2.12          0.04        110.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1093.73
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       38
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       39
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      363     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.796195     -0.227912      -2.33855       2.33855       1045.14       1047.48    
   2  0.306803      -1.18155      -12.1236       12.1236       1052.93       1065.06    
   3  0.857946     -0.153214      -1.57209       1.57209       1057.63       1059.20    
   4  0.363815      -1.01111      -10.3748       10.3748       1088.31       1098.68    
   5  0.755322E-01  -2.58320      -26.5056       26.5056       1087.08       1113.58    
   6  0.345998E-01  -3.36391      -34.5163       34.5163       1077.79       1112.31    
   7  0.280587      -1.27087      -13.0401       13.0401       1077.74       1090.78    
   8  0.907418     -0.971519E-01 -0.996853      0.996853       1080.20       1081.20    
   9  0.696180     -0.362147      -3.71591       3.71591       1094.75       1098.46    
  10  0.640049     -0.446211      -4.57847       4.57847       1093.21       1097.79    
  11  0.620842     -0.476679      -4.89110       4.89110       1096.52       1101.41    
  12  0.850691     -0.161706      -1.65923       1.65923       1074.35       1076.01    
  13  0.308317      -1.17663      -12.0731       12.0731       1091.47       1103.54    
  14  0.198496      -1.61698      -16.5915       16.5915       1083.56       1100.15    
  15  0.119809      -2.12186      -21.7719       21.7719       1093.20       1114.97    
  16  0.905871     -0.988582E-01  -1.01436       1.01436       1089.28       1090.30    
  17  0.386344     -0.951028      -9.75829       9.75829       1086.84       1096.60    
  18  0.112809      -2.18206      -22.3896       22.3896       1087.44       1109.83    
  19  0.682866     -0.381457      -3.91405       3.91405       1114.72       1118.64    
  20  0.819362     -0.199230      -2.04425       2.04425       1109.36       1111.40    
  21  0.412742     -0.884933      -9.08010       9.08010       1119.98       1129.06    
  22  0.211811E-01  -3.85464      -39.5516       39.5516       1118.98       1158.53    
  23  0.422800     -0.860857      -8.83306       8.83306       1118.78       1127.61    
  24  0.826028     -0.191126      -1.96110       1.96110       1123.30       1125.26    
  25  0.457858     -0.781197      -8.01568       8.01568       1117.81       1125.82    
  26  0.551067     -0.595900      -6.11439       6.11439       1122.64       1128.75    
  27  0.160440      -1.82984      -18.7755       18.7755       1133.55       1152.32    
  28  0.240310      -1.42582      -14.6301       14.6301       1098.08       1112.71    
  29  0.614859     -0.486362      -4.99045       4.99045       1134.11       1139.10    
  30  0.489204     -0.714976      -7.33621       7.33621       1117.10       1124.44    
  31  0.151691      -1.88591      -19.3509       19.3509       1095.15       1114.50    
  32  0.221776      -1.50609      -15.4536       15.4536       1134.47       1149.93    
  33  0.333050      -1.09946      -11.2813       11.2813       1135.49       1146.77    
  34  0.905001     -0.998190E-01  -1.02422       1.02422       1121.36       1122.38    
  35  0.598599     -0.513164      -5.26546       5.26546       1136.32       1141.59    
  36  0.603742     -0.504608      -5.17766       5.17766       1144.28       1149.46    
  37  0.989214     -0.108448E-01 -0.111276      0.111276       1144.91       1145.03    
  38  0.175887      -1.73792      -17.8324       17.8324       1121.79       1139.62    
  39  0.708621     -0.344434      -3.53416       3.53416       1156.10       1159.63    
  40  0.940581     -0.612570E-01 -0.628544      0.628544       1151.42       1152.05    
  41  0.870068     -0.139184      -1.42813       1.42813       1156.47       1157.90    
  42  0.260264      -1.34606      -13.8116       13.8116       1151.91       1165.72    
  43  0.216654      -1.52946      -15.6934       15.6934       1147.53       1163.23    
  44  0.553762     -0.591020      -6.06432       6.06432       1150.70       1156.76    
  45  0.891465     -0.114889      -1.17885       1.17885       1153.45       1154.63    
  46  0.320048      -1.13928      -11.6899       11.6899       1167.95       1179.64    
  47  0.163518      -1.81083      -18.5806       18.5806       1162.82       1181.40    
  48  0.652431     -0.427050      -4.38186       4.38186       1177.56       1181.94    
  49  0.317737      -1.14653      -11.7643       11.7643       1093.73       1105.50    
loop,thermsimp(1:2)       39   2.33855       12.1236    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365       1143.94         68.13          1.12         39.09          2.39          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1143.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       39
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       40
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      364     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.783363     -0.244159      -2.50526       2.50526       1045.14       1047.65    
   2  0.179321      -1.71858      -17.6339       17.6339       1057.63       1075.26    
   3  0.331080      -1.10539      -11.3422       11.3422       1052.93       1064.28    
   4  0.130870      -2.03355      -20.8658       20.8658       1074.35       1095.22    
   5  0.604904     -0.502686      -5.15794       5.15794       1080.20       1085.36    
   6  0.140568      -1.96207      -20.1323       20.1323       1089.28       1109.42    
   7  0.127414      -2.06031      -21.1404       21.1404       1077.74       1098.88    
   8  0.389565     -0.942725      -9.67309       9.67309       1086.84       1096.52    
   9  0.835608     -0.179595      -1.84279       1.84279       1093.21       1095.05    
  10  0.934873     -0.673445E-01 -0.691007      0.691007       1094.75       1095.44    
  11  0.639074     -0.447735      -4.59411       4.59411       1088.31       1092.90    
  12  0.349757      -1.05052      -10.7791       10.7791       1083.56       1094.34    
  13  0.175521      -1.74000      -17.8537       17.8537       1096.52       1114.37    
  14  0.761611     -0.272320      -2.79421       2.79421       1091.47       1094.26    
  15  0.162952      -1.81430      -18.6161       18.6161       1093.73       1112.35    
  16  0.542858     -0.610907      -6.26838       6.26838       1087.44       1093.71    
  17  0.715099     -0.335334      -3.44078       3.44078       1109.36       1112.80    
  18  0.996052     -0.395608E-02 -0.405924E-01  0.405924E-01   1077.79       1077.83    
  19  0.668265     -0.403070      -4.13581       4.13581       1098.08       1102.22    
  20  0.294619      -1.22207      -12.5394       12.5394       1087.08       1099.62    
  21  0.721551     -0.326352      -3.34862       3.34862       1095.15       1098.50    
  22  0.216610      -1.52966      -15.6955       15.6955       1093.20       1108.89    
  23  0.649086     -0.432191      -4.43461       4.43461       1114.72       1119.16    
  24  0.692922E-01  -2.66942      -27.3903       27.3903       1121.36       1148.75    
  25  0.271271      -1.30464      -13.3866       13.3866       1117.10       1130.49    
  26  0.407239     -0.898355      -9.21782       9.21782       1123.30       1132.52    
  27  0.435034     -0.832331      -8.54036       8.54036       1117.81       1126.35    
  28  0.638725     -0.448281      -4.59971       4.59971       1118.78       1123.38    
  29  0.932325     -0.700735E-01 -0.719009      0.719009       1122.64       1123.36    
  30  0.958672     -0.422065E-01 -0.433071      0.433071       1119.98       1120.41    
  31  0.336870      -1.08806      -11.1643       11.1643       1134.11       1145.27    
  32  0.453036     -0.791783      -8.12430       8.12430       1121.79       1129.91    
  33  0.422569     -0.861402      -8.83865       8.83865       1136.32       1145.16    
  34  0.596674     -0.516385      -5.29851       5.29851       1144.91       1150.21    
  35  0.586088     -0.534286      -5.48218       5.48218       1135.49       1140.97    
  36  0.174805      -1.74409      -17.8957       17.8957       1144.28       1162.18    
  37  0.854432     -0.157318      -1.61421       1.61421       1134.47       1136.09    
  38  0.754323     -0.281935      -2.89287       2.89287       1151.42       1154.31    
  39  0.956897     -0.440598E-01 -0.452088      0.452088       1133.55       1134.00    
  40  0.334431      -1.09533      -11.2389       11.2389       1153.45       1164.69    
  41  0.750609     -0.286871      -2.94351       2.94351       1150.70       1153.64    
  42  0.778602     -0.250255      -2.56781       2.56781       1156.47       1159.04    
  43  0.330765      -1.10635      -11.3520       11.3520       1118.98       1130.33    
  44  0.601104     -0.508987      -5.22260       5.22260       1156.10       1161.32    
  45  0.578570     -0.547197      -5.61466       5.61466       1147.53       1153.15    
  46  0.381025     -0.964891      -9.90053       9.90053       1151.91       1161.81    
  47  0.764260     -0.268847      -2.75857       2.75857       1167.95       1170.71    
  48  0.194556      -1.63704      -16.7973       16.7973       1162.82       1179.62    
  49  0.785702E-01  -2.54376      -26.1010       26.1010       1143.94       1170.04    
loop,thermsimp(1:2)       40   2.50526       17.6339    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366       1449.72         68.09          1.12         39.44          2.19          0.04        110.88
Just calling func    0   0        110.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    367       1180.61         68.08          1.12         39.42          1.96          0.05        110.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1180.61
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       40
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       41
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      366     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762547     -0.271091      -2.78161       2.78161       1045.14       1047.92    
   2  0.700395     -0.356110      -3.65397       3.65397       1052.93       1056.59    
   3  0.110610      -2.20174      -22.5916       22.5916       1057.63       1080.22    
   4  0.542261     -0.612007      -6.27967       6.27967       1077.79       1084.07    
   5  0.993402     -0.662023E-02 -0.679287E-01  0.679287E-01   1080.20       1080.27    
   6  0.370923     -0.991761      -10.1762       10.1762       1088.31       1098.48    
   7  0.311008      -1.16794      -11.9839       11.9839       1087.44       1099.42    
   8  0.120775      -2.11383      -21.6895       21.6895       1091.47       1113.16    
   9  0.496739     -0.699690      -7.17936       7.17936       1083.56       1090.74    
  10  0.823539     -0.194144      -1.99207       1.99207       1093.21       1095.20    
  11  0.401420     -0.912746      -9.36548       9.36548       1074.35       1083.72    
  12  0.467810E-01  -3.06228      -31.4213       31.4213       1094.75       1126.17    
  13  0.104633      -2.25729      -23.1616       23.1616       1086.84       1110.00    
  14  0.233534      -1.45443      -14.9236       14.9236       1095.15       1110.07    
  15  0.959269     -0.415834E-01 -0.426677      0.426677       1077.74       1078.17    
  16  0.359845      -1.02208      -10.4873       10.4873       1087.08       1097.56    
  17  0.141753E-01  -4.25626      -43.6725       43.6725       1098.08       1141.75    
  18  0.566935     -0.567510      -5.82309       5.82309       1093.20       1099.02    
  19  0.901077     -0.104164      -1.06881       1.06881       1089.28       1090.35    
  20  0.465285     -0.765104      -7.85056       7.85056       1093.73       1101.58    
  21  0.315152      -1.15470      -11.8481       11.8481       1109.36       1121.21    
  22  0.954826     -0.462256E-01 -0.474311      0.474311       1096.52       1096.99    
  23  0.110663      -2.20127      -22.5867       22.5867       1114.72       1137.31    
  24  0.851067     -0.161264      -1.65469       1.65469       1119.98       1121.63    
  25  0.768372     -0.263481      -2.70352       2.70352       1122.64       1125.34    
  26  0.243081      -1.41436      -14.5124       14.5124       1118.78       1133.29    
  27  0.434279     -0.834069      -8.55819       8.55819       1117.81       1126.36    
  28  0.855138     -0.156492      -1.60573       1.60573       1121.79       1123.39    
  29  0.238302      -1.43422      -14.7162       14.7162       1118.98       1133.69    
  30  0.445547     -0.808452      -8.29535       8.29535       1117.10       1125.40    
  31  0.290285      -1.23689      -12.6915       12.6915       1123.30       1135.99    
  32  0.479492     -0.735029      -7.54197       7.54197       1133.55       1141.09    
  33  0.359712      -1.02245      -10.4911       10.4911       1134.47       1144.97    
  34  0.429040     -0.846204      -8.68271       8.68271       1135.49       1144.17    
  35  0.570900     -0.560541      -5.75159       5.75159       1136.32       1142.07    
  36  0.151312      -1.88841      -19.3766       19.3766       1134.11       1153.48    
  37  0.671837     -0.397739      -4.08111       4.08111       1121.36       1125.44    
  38  0.699384     -0.357556      -3.66880       3.66880       1144.91       1148.58    
  39  0.337756      -1.08543      -11.1374       11.1374       1147.53       1158.67    
  40  0.508282     -0.676718      -6.94365       6.94365       1150.70       1157.64    
  41  0.153085      -1.87676      -19.2570       19.2570       1151.42       1170.68    
  42  0.859571     -0.151322      -1.55268       1.55268       1156.47       1158.03    
  43  0.240559      -1.42479      -14.6195       14.6195       1156.10       1170.72    
  44  0.956907     -0.440496E-01 -0.451983      0.451983       1151.91       1152.36    
  45  0.695010     -0.363829      -3.73317       3.73317       1144.28       1148.02    
  46  0.258459      -1.35302      -13.8830       13.8830       1153.45       1167.33    
  47  0.851968     -0.160207      -1.64385       1.64385       1143.94       1145.58    
  48  0.755235     -0.280726      -2.88047       2.88047       1167.95       1170.83    
  49  0.618135     -0.481049      -4.93593       4.93593       1180.61       1185.54    
loop,thermsimp(1:2)       41   2.78161       3.65397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368       1105.02         68.12          1.12         39.23          2.17          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1105.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       41
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       42
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      367     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.633054     -0.457200      -4.69123       4.69123       1045.14       1049.83    
   2  0.416661     -0.875483      -8.98313       8.98313       1052.93       1061.92    
   3  0.671058E-01  -2.70149      -27.7193       27.7193       1077.74       1105.46    
   4  0.701446     -0.354612      -3.63859       3.63859       1057.63       1061.27    
   5  0.176715      -1.73321      -17.7841       17.7841       1080.20       1097.99    
   6  0.223035      -1.50042      -15.3955       15.3955       1074.35       1089.75    
   7  0.907694E-01  -2.39943      -24.6200       24.6200       1077.79       1102.41    
   8  0.113202      -2.17858      -22.3539       22.3539       1089.28       1111.64    
   9  0.443192     -0.813753      -8.34973       8.34973       1083.56       1091.91    
  10  0.999048     -0.952172E-03 -0.977002E-02  0.977002E-02   1093.21       1093.22    
  11  0.606200     -0.500546      -5.13599       5.13599       1096.52       1101.65    
  12  0.120370      -2.11718      -21.7239       21.7239       1087.08       1108.80    
  13  0.448885     -0.800988      -8.21876       8.21876       1088.31       1096.53    
  14  0.531880     -0.631338      -6.47802       6.47802       1093.20       1099.68    
  15  0.804789     -0.217176      -2.22839       2.22839       1087.44       1089.67    
  16  0.427230     -0.850433      -8.72610       8.72610       1093.73       1102.46    
  17  0.222958      -1.50077      -15.3991       15.3991       1086.84       1102.24    
  18  0.850765     -0.161619      -1.65833       1.65833       1095.15       1096.80    
  19  0.926988     -0.758150E-01 -0.777920      0.777920       1091.47       1092.25    
  20  0.729073     -0.315981      -3.24221       3.24221       1109.36       1112.60    
  21  0.411512     -0.887916      -9.11071       9.11071       1119.98       1129.09    
  22  0.692157     -0.367942      -3.77537       3.77537       1121.79       1125.56    
  23  0.917319     -0.862998E-01 -0.885502      0.885502       1122.64       1123.52    
  24  0.376398     -0.977107      -10.0259       10.0259       1117.10       1127.13    
  25  0.276694      -1.28484      -13.1835       13.1835       1121.36       1134.54    
  26  0.296319      -1.21632      -12.4804       12.4804       1094.75       1107.23    
  27  0.395623     -0.927294      -9.51475       9.51475       1117.81       1127.32    
  28  0.397122     -0.923511      -9.47594       9.47594       1118.78       1128.25    
  29  0.414944     -0.879612      -9.02550       9.02550       1118.98       1128.00    
  30  0.249325      -1.38900      -14.2522       14.2522       1123.30       1137.55    
  31  0.668798     -0.402273      -4.12763       4.12763       1114.72       1118.85    
  32  0.765717     -0.266942      -2.73904       2.73904       1133.55       1136.29    
  33  0.420183     -0.867066      -8.89677       8.89677       1098.08       1106.98    
  34  0.851189     -0.161121      -1.65323       1.65323       1136.32       1137.97    
  35  0.733154     -0.310400      -3.18495       3.18495       1135.49       1138.67    
  36  0.721185E-01  -2.62944      -26.9801       26.9801       1134.47       1161.45    
  37  0.356766      -1.03068      -10.5755       10.5755       1143.94       1154.51    
  38  0.654280     -0.424220      -4.35282       4.35282       1144.28       1148.64    
  39  0.662515     -0.411712      -4.22448       4.22448       1144.91       1149.14    
  40  0.164156      -1.80694      -18.5406       18.5406       1151.91       1170.45    
  41  0.116179      -2.15263      -22.0876       22.0876       1134.11       1156.19    
  42  0.134772      -2.00417      -20.5644       20.5644       1150.70       1171.26    
  43  0.298842      -1.20784      -12.3934       12.3934       1156.47       1168.87    
  44  0.583690     -0.538385      -5.52425       5.52425       1147.53       1153.06    
  45  0.894896     -0.111047      -1.13943       1.13943       1153.45       1154.59    
  46  0.148951      -1.90414      -19.5379       19.5379       1151.42       1170.96    
  47  0.315615      -1.15323      -11.8331       11.8331       1156.10       1167.93    
  48  0.810942     -0.209558      -2.15023       2.15023       1167.95       1170.10    
  49  0.697490     -0.360268      -3.69663       3.69663       1105.02       1108.72    
loop,thermsimp(1:2)       42   4.69123       8.98313    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369       1130.17         68.08          1.12         39.19          2.10          0.05        110.54
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1130.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       42
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       43
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      368     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.165518      -1.79868      -18.4558       18.4558       1045.14       1063.60    
   2  0.737067     -0.305077      -3.13033       3.13033       1057.63       1060.76    
   3  0.332012      -1.10258      -11.3134       11.3134       1052.93       1064.25    
   4  0.756847     -0.278594      -2.85859       2.85859       1087.44       1090.30    
   5  0.168413      -1.78134      -18.2779       18.2779       1074.35       1092.63    
   6  0.422244     -0.862172      -8.84655       8.84655       1083.56       1092.41    
   7  0.865590     -0.144344      -1.48108       1.48108       1091.47       1092.95    
   8  0.820021     -0.198425      -2.03599       2.03599       1093.21       1095.24    
   9  0.681904     -0.382867      -3.92851       3.92851       1088.31       1092.24    
  10  0.476378E-02  -5.34671      -54.8614       54.8614       1095.15       1150.01    
  11  0.891588     -0.114751      -1.17743       1.17743       1080.20       1081.38    
  12  0.583910     -0.538008      -5.52038       5.52038       1093.20       1098.72    
  13  0.224086      -1.49572      -15.3473       15.3473       1096.52       1111.87    
  14  0.550831     -0.596327      -6.11878       6.11878       1086.84       1092.96    
  15  0.109755      -2.20951      -22.6712       22.6712       1077.79       1100.46    
  16  0.173189      -1.75337      -17.9910       17.9910       1093.73       1111.72    
  17  0.822854     -0.194976      -2.00061       2.00061       1077.74       1079.74    
  18  0.792562     -0.232484      -2.38547       2.38547       1098.08       1100.47    
  19  0.383253     -0.959060      -9.84069       9.84069       1094.75       1104.59    
  20  0.422533     -0.861488      -8.83953       8.83953       1105.02       1113.86    
  21  0.811047     -0.209429      -2.14890       2.14890       1087.08       1089.23    
  22  0.860783     -0.149912      -1.53822       1.53822       1089.28       1090.82    
  23  0.751011     -0.286335      -2.93802       2.93802       1109.36       1112.30    
  24  0.358967      -1.02452      -10.5124       10.5124       1114.72       1125.23    
  25  0.877019     -0.131227      -1.34649       1.34649       1122.64       1123.99    
  26  0.441658     -0.817220      -8.38531       8.38531       1121.79       1130.17    
  27  0.259650      -1.34842      -13.8359       13.8359       1117.10       1130.94    
  28  0.106035      -2.24398      -23.0250       23.0250       1117.81       1140.83    
  29  0.608421     -0.496887      -5.09845       5.09845       1118.98       1124.08    
  30  0.143099      -1.94422      -19.9492       19.9492       1118.78       1138.73    
  31  0.242177      -1.41809      -14.5507       14.5507       1119.98       1134.53    
  32  0.517081     -0.659556      -6.76756       6.76756       1121.36       1128.13    
  33  0.492461     -0.708339      -7.26811       7.26811       1133.55       1140.81    
  34  0.839297     -0.175190      -1.79759       1.79759       1123.30       1125.10    
  35  0.824305     -0.193215      -1.98254       1.98254       1136.32       1138.30    
  36  0.742325     -0.297968      -3.05739       3.05739       1135.49       1138.54    
  37  0.158654      -1.84103      -18.8904       18.8904       1144.28       1163.17    
  38  0.702604     -0.352962      -3.62166       3.62166       1144.91       1148.54    
  39  0.324396      -1.12579      -11.5515       11.5515       1147.53       1159.08    
  40  0.628286     -0.464760      -4.76880       4.76880       1143.94       1148.71    
  41  0.896889     -0.108823      -1.11661       1.11661       1153.45       1154.57    
  42  0.325633      -1.12199      -11.5124       11.5124       1134.11       1145.62    
  43  0.833588     -0.182016      -1.86762       1.86762       1134.47       1136.34    
  44  0.292459      -1.22943      -12.6149       12.6149       1156.10       1168.71    
  45  0.625236     -0.469626      -4.81872       4.81872       1156.47       1161.29    
  46  0.613119     -0.489197      -5.01954       5.01954       1167.95       1172.97    
  47  0.521950     -0.650183      -6.67138       6.67138       1151.91       1158.58    
  48  0.999935     -0.646019E-04 -0.662866E-03  0.662866E-03   1151.42       1151.42    
  49  0.971287E-01  -2.33172      -23.9252       23.9252       1130.17       1154.09    
loop,thermsimp(1:2)       43   18.4558       3.13033    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    370       1062.30         68.05          1.13         39.43          2.12          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    371       2056.94         67.85          1.12         39.03          2.30          0.05        110.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1062.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       43
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       44
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      370     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960290E-01  -2.34311      -24.0421       24.0421       1057.63       1081.67    
   2  0.509377     -0.674566      -6.92157       6.92157       1045.14       1052.06    
   3  0.960906     -0.398785E-01 -0.409185      0.409185       1052.93       1053.34    
   4  0.145058      -1.93062      -19.8096       19.8096       1077.74       1097.55    
   5  0.584668     -0.536711      -5.50707       5.50707       1080.20       1085.71    
   6  0.137819      -1.98182      -20.3350       20.3350       1087.08       1107.41    
   7  0.829899     -0.186451      -1.91313       1.91313       1087.44       1089.35    
   8  0.249142      -1.38973      -14.2597       14.2597       1089.28       1103.54    
   9  0.471049     -0.752793      -7.72423       7.72423       1088.31       1096.03    
  10  0.744784E-01  -2.59725      -26.6498       26.6498       1083.56       1110.21    
  11  0.233158      -1.45604      -14.9401       14.9401       1074.35       1089.29    
  12  0.714243E-01  -2.63912      -27.0794       27.0794       1091.47       1118.55    
  13  0.749743     -0.288025      -2.95536       2.95536       1086.84       1089.80    
  14  0.873534     -0.135209      -1.38734       1.38734       1093.21       1094.59    
  15  0.265951      -1.32444      -13.5898       13.5898       1093.20       1106.79    
  16  0.328438      -1.11341      -11.4244       11.4244       1077.79       1089.22    
  17  0.988010     -0.120622E-01 -0.123767      0.123767       1098.08       1098.20    
  18  0.737788     -0.304099      -3.12029       3.12029       1094.75       1097.87    
  19  0.171086E-01  -4.06818      -41.7426       41.7426       1093.73       1135.48    
  20  0.452693     -0.792540      -8.13208       8.13208       1096.52       1104.65    
  21  0.922976     -0.801523E-01 -0.822424      0.822424       1109.36       1110.18    
  22  0.323108      -1.12977      -11.5923       11.5923       1105.02       1116.61    
  23  0.740032     -0.301062      -3.08912       3.08912       1122.64       1125.73    
  24  0.606229     -0.500498      -5.13549       5.13549       1118.98       1124.11    
  25  0.813501     -0.206408      -2.11791       2.11791       1123.30       1125.42    
  26  0.457664     -0.781621      -8.02003       8.02003       1114.72       1122.74    
  27  0.848286     -0.164537      -1.68828       1.68828       1121.36       1123.05    
  28  0.430827E-01  -3.14463      -32.2664       32.2664       1121.79       1154.05    
  29  0.215038      -1.53694      -15.7702       15.7702       1117.10       1132.87    
  30  0.955068     -0.459730E-01 -0.471718      0.471718       1119.98       1120.45    
  31  0.100248      -2.30011      -23.6009       23.6009       1134.47       1158.08    
  32  0.272794      -1.29904      -13.3291       13.3291       1136.32       1149.65    
  33  0.796201E-01  -2.53049      -25.9648       25.9648       1135.49       1161.45    
  34  0.143803      -1.93931      -19.8988       19.8988       1118.78       1138.68    
  35  0.151473      -1.88734      -19.3656       19.3656       1133.55       1152.91    
  36  0.212508      -1.54878      -15.8917       15.8917       1117.81       1133.70    
  37  0.570089     -0.561962      -5.76617       5.76617       1134.11       1139.87    
  38  0.811663     -0.208669      -2.14111       2.14111       1144.91       1147.06    
  39  0.652193E-01  -2.73000      -28.0119       28.0119       1143.94       1171.95    
  40  0.753919     -0.282470      -2.89836       2.89836       1095.15       1098.04    
  41  0.915721     -0.880434E-01 -0.903394      0.903394       1151.42       1152.32    
  42  0.689805     -0.371347      -3.81031       3.81031       1130.17       1133.98    
  43  0.296032      -1.21729      -12.4903       12.4903       1153.45       1165.94    
  44  0.685645     -0.377395      -3.87236       3.87236       1151.91       1155.78    
  45  0.931075     -0.714153E-01 -0.732776      0.732776       1147.53       1148.27    
  46  0.273544      -1.29629      -13.3010       13.3010       1156.47       1169.77    
  47  0.269804E-01  -3.61265      -37.0685       37.0685       1144.28       1181.35    
  48  0.684598     -0.378923      -3.88804       3.88804       1156.10       1159.99    
  49  0.724056     -0.322886      -3.31306       3.31306       1062.30       1065.61    
loop,thermsimp(1:2)       44   24.0421       6.92157    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372       1117.25         68.13          1.12         39.29          1.97          0.04        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1117.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       44
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       45
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      371     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960257     -0.405547E-01 -0.416123      0.416123       1045.14       1045.56    
   2  0.700631     -0.355774      -3.65052       3.65052       1052.93       1056.58    
   3  0.900697     -0.104586      -1.07314       1.07314       1062.30       1063.37    
   4  0.217613      -1.52504      -15.6481       15.6481       1057.63       1073.28    
   5  0.247850      -1.39493      -14.3131       14.3131       1080.20       1094.52    
   6  0.910358     -0.939170E-01 -0.963661      0.963661       1077.79       1078.76    
   7  0.983752     -0.163817E-01 -0.168089      0.168089       1074.35       1074.52    
   8  0.161223      -1.82497      -18.7256       18.7256       1087.44       1106.16    
   9  0.527720     -0.639190      -6.55858       6.55858       1086.84       1093.40    
  10  0.733734     -0.309609      -3.17683       3.17683       1093.21       1096.38    
  11  0.406982     -0.898986      -9.22429       9.22429       1088.31       1097.53    
  12  0.731735     -0.312337      -3.20482       3.20482       1077.74       1080.94    
  13  0.840576E-01  -2.47625      -25.4083       25.4083       1094.75       1120.16    
  14  0.505764     -0.681685      -6.99461       6.99461       1095.15       1102.14    
  15  0.130210      -2.03861      -20.9177       20.9177       1098.08       1119.00    
  16  0.565496     -0.570053      -5.84918       5.84918       1089.28       1095.13    
  17  0.944307     -0.573044E-01 -0.587988      0.587988       1096.52       1097.11    
  18  0.131761      -2.02676      -20.7961       20.7961       1093.20       1113.99    
  19  0.133275      -2.01534      -20.6789       20.6789       1087.08       1107.76    
  20  0.890936     -0.115482      -1.18494       1.18494       1109.36       1110.54    
  21  0.650633     -0.429809      -4.41017       4.41017       1083.56       1087.97    
  22  0.132428      -2.02172      -20.7444       20.7444       1105.02       1125.76    
  23  0.731494     -0.312666      -3.20820       3.20820       1091.47       1094.68    
  24  0.171092      -1.76556      -18.1160       18.1160       1119.98       1138.10    
  25  0.257579      -1.35643      -13.9180       13.9180       1114.72       1128.64    
  26  0.324882      -1.12429      -11.5361       11.5361       1121.36       1132.90    
  27  0.526591     -0.641331      -6.58056       6.58056       1118.98       1125.56    
  28  0.282402E-01  -3.56701      -36.6003       36.6003       1123.30       1159.90    
  29  0.983943     -0.161877E-01 -0.166098      0.166098       1122.64       1122.81    
  30  0.629559     -0.462735      -4.74802       4.74802       1117.10       1121.85    
  31  0.202469      -1.59717      -16.3882       16.3882       1117.81       1134.19    
  32  0.737565     -0.304401      -3.12339       3.12339       1130.17       1133.29    
  33  0.388307     -0.945960      -9.70628       9.70628       1093.73       1103.44    
  34  0.585207E-01  -2.83837      -29.1239       29.1239       1118.78       1147.90    
  35  0.900578     -0.104719      -1.07450       1.07450       1134.11       1135.18    
  36  0.420335     -0.866702      -8.89304       8.89304       1144.91       1153.81    
  37  0.730143     -0.314515      -3.22716       3.22716       1147.53       1150.76    
  38  0.448331     -0.802224      -8.23144       8.23144       1136.32       1144.55    
  39  0.344846      -1.06466      -10.9242       10.9242       1151.42       1162.34    
  40  0.854608     -0.157113      -1.61210       1.61210       1133.55       1135.16    
  41  0.537300     -0.621198      -6.37398       6.37398       1121.79       1128.16    
  42  0.164937      -1.80219      -18.4919       18.4919       1151.91       1170.40    
  43  0.595120E-01  -2.82158      -28.9516       28.9516       1134.47       1163.43    
  44  0.398267E-01  -3.22322      -33.0727       33.0727       1156.10       1189.17    
  45  0.183210      -1.69712      -17.4138       17.4138       1135.49       1152.90    
  46  0.184498      -1.69011      -17.3419       17.3419       1153.45       1170.79    
  47  0.306635      -1.18210      -12.1292       12.1292       1156.47       1168.60    
  48  0.868924     -0.140500      -1.44164       1.44164       1143.94       1145.38    
  49  0.841633     -0.172412      -1.76908       1.76908       1117.25       1119.02    
loop,thermsimp(1:2)       45  0.416123       3.65052    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    373       1067.62         68.13          1.13         39.23          2.33          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1067.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       45
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       46
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      372     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668594     -0.402578      -4.13076       4.13076       1045.14       1049.27    
   2  0.484900     -0.723813      -7.42688       7.42688       1052.93       1060.36    
   3  0.814670     -0.204972      -2.10317       2.10317       1062.30       1064.40    
   4  0.111039      -2.19788      -22.5519       22.5519       1057.63       1080.18    
   5  0.717773     -0.331602      -3.40249       3.40249       1074.35       1077.75    
   6  0.751748     -0.285354      -2.92795       2.92795       1077.79       1080.72    
   7  0.983096E-01  -2.31963      -23.8012       23.8012       1077.74       1101.54    
   8  0.150083      -1.89656      -19.4602       19.4602       1083.56       1103.02    
   9  0.733895     -0.309390      -3.17458       3.17458       1086.84       1090.02    
  10  0.982051     -0.181120E-01 -0.185843      0.185843       1080.20       1080.39    
  11  0.449336E-01  -3.10257      -31.8348       31.8348       1091.47       1123.30    
  12  0.929425     -0.731895E-01 -0.750981      0.750981       1089.28       1090.04    
  13  0.692017E-01  -2.67073      -27.4037       27.4037       1093.21       1120.61    
  14  0.644652     -0.439045      -4.50494       4.50494       1096.52       1101.02    
  15  0.661075     -0.413889      -4.24682       4.24682       1088.31       1092.56    
  16  0.410338     -0.890775      -9.14004       9.14004       1095.15       1104.29    
  17  0.967767     -0.327642E-01 -0.336186      0.336186       1093.73       1094.07    
  18  0.496474     -0.700224      -7.18484       7.18484       1087.44       1094.62    
  19  0.748701     -0.289415      -2.96962       2.96962       1087.08       1090.05    
  20  0.428668     -0.847073      -8.69162       8.69162       1109.36       1118.05    
  21  0.922992     -0.801352E-01 -0.822249      0.822249       1093.20       1094.02    
  22  0.844924     -0.168508      -1.72903       1.72903       1098.08       1099.81    
  23  0.680136     -0.385463      -3.95515       3.95515       1117.25       1121.21    
  24  0.136189      -1.99371      -20.4570       20.4570       1094.75       1115.21    
  25  0.660667     -0.414506      -4.25315       4.25315       1117.10       1121.35    
  26  0.473941     -0.746672      -7.66143       7.66143       1122.64       1130.30    
  27  0.792449     -0.232627      -2.38693       2.38693       1118.98       1121.36    
  28  0.960023     -0.407984E-01 -0.418623      0.418623       1105.02       1105.44    
  29  0.951587     -0.496238E-01 -0.509178      0.509178       1121.79       1122.29    
  30  0.197021      -1.62444      -16.6680       16.6680       1114.72       1131.39    
  31  0.664966     -0.408020      -4.18660       4.18660       1121.36       1125.55    
  32  0.832360     -0.183491      -1.88276       1.88276       1130.17       1132.05    
  33  0.589221     -0.528954      -5.42748       5.42748       1117.81       1123.23    
  34  0.163930      -1.80831      -18.5547       18.5547       1133.55       1152.10    
  35  0.967185E-01  -2.33595      -23.9687       23.9687       1134.11       1158.07    
  36  0.386895     -0.949603      -9.74366       9.74366       1119.98       1129.72    
  37  0.709158     -0.343678      -3.52640       3.52640       1136.32       1139.85    
  38  0.801784     -0.220916      -2.26676       2.26676       1143.94       1146.21    
  39  0.631968     -0.458917      -4.70884       4.70884       1118.78       1123.49    
  40  0.866237     -0.143597      -1.47341       1.47341       1147.53       1149.01    
  41  0.377203     -0.974972      -10.0040       10.0040       1135.49       1145.49    
  42  0.261898      -1.33980      -13.7474       13.7474       1144.91       1158.66    
  43  0.306694      -1.18191      -12.1273       12.1273       1123.30       1135.42    
  44  0.603055     -0.505747      -5.18935       5.18935       1151.42       1156.61    
  45  0.146094      -1.92351      -19.7367       19.7367       1134.47       1154.21    
  46  0.887903     -0.118893      -1.21994       1.21994       1156.47       1157.69    
  47  0.375387     -0.979798      -10.0535       10.0535       1151.91       1161.96    
  48  0.788597     -0.237500      -2.43693       2.43693       1153.45       1155.89    
  49  0.335228      -1.09295      -11.2145       11.2145       1067.62       1078.83    
loop,thermsimp(1:2)       46   4.13076       7.42688    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374       1077.54         68.08          1.14         39.62          1.86          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1077.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       46
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       47
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      373     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408943     -0.894179      -9.17497       9.17497       1045.14       1054.32    
   2  0.431368     -0.840794      -8.62720       8.62720       1052.93       1061.56    
   3  0.292375      -1.22972      -12.6179       12.6179       1062.30       1074.92    
   4  0.336431      -1.08936      -11.1777       11.1777       1074.35       1085.53    
   5  0.370622     -0.992574      -10.1846       10.1846       1067.62       1077.80    
   6  0.398679     -0.919597      -9.43578       9.43578       1057.63       1067.07    
   7  0.672261     -0.397108      -4.07464       4.07464       1080.20       1084.28    
   8  0.451252     -0.795728      -8.16479       8.16479       1077.79       1085.96    
   9  0.527060     -0.640440      -6.57141       6.57141       1086.84       1093.41    
  10  0.131951      -2.02533      -20.7814       20.7814       1089.28       1110.07    
  11  0.903524     -0.101452      -1.04098       1.04098       1087.08       1088.12    
  12  0.881507E-01  -2.42871      -24.9204       24.9204       1088.31       1113.23    
  13  0.464884     -0.765968      -7.85942       7.85942       1093.20       1101.06    
  14  0.985345     -0.147637E-01 -0.151487      0.151487       1093.73       1093.88    
  15  0.587696     -0.531546      -5.45407       5.45407       1087.44       1092.89    
  16  0.581244     -0.542585      -5.56734       5.56734       1098.08       1103.65    
  17  0.137299      -1.98559      -20.3737       20.3737       1096.52       1116.89    
  18  0.330005      -1.10865      -11.3756       11.3756       1077.74       1089.12    
  19  0.911104     -0.930980E-01 -0.955258      0.955258       1083.56       1084.52    
  20  0.487848     -0.717751      -7.36468       7.36468       1095.15       1102.51    
  21  0.518423     -0.656964      -6.74096       6.74096       1105.02       1111.76    
  22  0.645499     -0.437732      -4.49147       4.49147       1094.75       1099.24    
  23  0.914509     -0.893680E-01 -0.916985      0.916985       1109.36       1110.28    
  24  0.763582E-01  -2.57232      -26.3940       26.3940       1093.21       1119.60    
  25  0.708063     -0.345222      -3.54225       3.54225       1117.25       1120.80    
  26  0.719838     -0.328729      -3.37301       3.37301       1117.10       1120.47    
  27  0.113625E-01  -4.47744      -45.9420       45.9420       1118.98       1164.92    
  28  0.272258      -1.30101      -13.3493       13.3493       1121.79       1135.13    
  29  0.211076      -1.55554      -15.9610       15.9610       1117.81       1133.77    
  30  0.931648     -0.708004E-01 -0.726466      0.726466       1091.47       1092.20    
  31  0.572966     -0.556929      -5.71453       5.71453       1118.78       1124.49    
  32  0.116283      -2.15173      -22.0784       22.0784       1121.36       1143.44    
  33  0.247808      -1.39510      -14.3148       14.3148       1119.98       1134.29    
  34  0.294404      -1.22280      -12.5469       12.5469       1122.64       1135.19    
  35  0.252764E-01  -3.67788      -37.7379       37.7379       1114.72       1152.46    
  36  0.408562     -0.895111      -9.18453       9.18453       1130.17       1139.35    
  37  0.753478     -0.283056      -2.90437       2.90437       1123.30       1126.20    
  38  0.680565     -0.384832      -3.94867       3.94867       1136.32       1140.27    
  39  0.973188     -0.271778E-01 -0.278865      0.278865       1135.49       1135.77    
  40  0.986871     -0.132158E-01 -0.135605      0.135605       1143.94       1144.07    
  41  0.363246      -1.01267      -10.3908       10.3908       1147.53       1157.92    
  42  0.138088      -1.97986      -20.3149       20.3149       1133.55       1153.86    
  43  0.929547E-01  -2.37564      -24.3759       24.3759       1134.47       1158.85    
  44  0.781724     -0.246253      -2.52675       2.52675       1153.45       1155.98    
  45  0.732428     -0.311390      -3.19511       3.19511       1151.42       1154.61    
  46  0.294929      -1.22102      -12.5286       12.5286       1156.47       1169.00    
  47  0.406491     -0.900193      -9.23668       9.23668       1134.11       1143.34    
  48  0.721836E-01  -2.62854      -26.9709       26.9709       1144.91       1171.88    
  49  0.982586     -0.175676E-01 -0.180257      0.180257       1077.54       1077.72    
loop,thermsimp(1:2)       47   9.17497       8.62720    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375       1144.13         68.12          1.12         39.16          2.26          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1144.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       47
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       48
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      374     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813255     -0.206711      -2.12101       2.12101       1045.14       1047.26    
   2  0.101223E-01  -4.59302      -47.1279       47.1279       1052.93       1100.06    
   3  0.618937E-01  -2.78234      -28.5489       28.5489       1057.63       1086.18    
   4  0.206078      -1.57950      -16.2069       16.2069       1062.30       1078.51    
   5  0.867609     -0.142014      -1.45717       1.45717       1077.54       1079.00    
   6  0.578282     -0.547694      -5.61977       5.61977       1067.62       1073.24    
   7  0.531864     -0.631367      -6.47831       6.47831       1080.20       1086.68    
   8  0.304055      -1.19055      -12.2159       12.2159       1083.56       1095.78    
   9  0.540739     -0.614819      -6.30852       6.30852       1074.35       1080.66    
  10  0.476481     -0.741327      -7.60659       7.60659       1077.79       1085.40    
  11  0.610971     -0.492705      -5.05553       5.05553       1087.08       1092.13    
  12  0.735015     -0.307865      -3.15893       3.15893       1077.74       1080.90    
  13  0.961674     -0.390799E-01 -0.400990      0.400990       1091.47       1091.87    
  14  0.902502     -0.102585      -1.05260       1.05260       1087.44       1088.49    
  15  0.759072     -0.275659      -2.82847       2.82847       1086.84       1089.67    
  16  0.380028E-01  -3.27009      -33.5537       33.5537       1093.73       1127.29    
  17  0.413373     -0.883405      -9.06442       9.06442       1094.75       1103.81    
  18  0.260354      -1.34571      -13.8081       13.8081       1093.20       1107.01    
  19  0.170660      -1.76808      -18.1419       18.1419       1095.15       1113.29    
  20  0.563245     -0.574040      -5.89010       5.89010       1098.08       1103.97    
  21  0.861075     -0.149573      -1.53474       1.53474       1089.28       1090.82    
  22  0.797631     -0.226109      -2.32005       2.32005       1109.36       1111.68    
  23  0.370521E-01  -3.29543      -33.8137       33.8137       1105.02       1138.83    
  24  0.703530     -0.351645      -3.60815       3.60815       1088.31       1091.92    
  25  0.791216E-01  -2.53677      -26.0292       26.0292       1096.52       1122.55    
  26  0.136780      -1.98938      -20.4126       20.4126       1093.21       1113.62    
  27  0.409465     -0.892903      -9.16187       9.16187       1117.10       1126.26    
  28  0.476542     -0.741200      -7.60529       7.60529       1117.25       1124.86    
  29  0.169904      -1.77252      -18.1875       18.1875       1118.78       1136.96    
  30  0.483026     -0.727684      -7.46660       7.46660       1123.30       1130.76    
  31  0.740952     -0.299820      -3.07638       3.07638       1117.81       1120.88    
  32  0.367240      -1.00174      -10.2786       10.2786       1119.98       1130.26    
  33  0.704436     -0.350358      -3.59495       3.59495       1121.79       1125.38    
  34  0.703774     -0.351299      -3.60460       3.60460       1122.64       1126.24    
  35  0.547709     -0.602012      -6.17711       6.17711       1135.49       1141.66    
  36  0.236071      -1.44362      -14.8127       14.8127       1130.17       1144.98    
  37  0.512555     -0.668347      -6.85775       6.85775       1136.32       1143.18    
  38  0.894555     -0.111428      -1.14334       1.14334       1134.11       1135.25    
  39  0.100347      -2.29912      -23.5908       23.5908       1121.36       1144.95    
  40  0.689153     -0.372292      -3.82000       3.82000       1143.94       1147.76    
  41  0.188659      -1.66781      -17.1130       17.1130       1114.72       1131.84    
  42  0.623666     -0.472140      -4.84452       4.84452       1133.55       1138.39    
  43  0.610480     -0.493510      -5.06380       5.06380       1151.42       1156.48    
  44  0.724857     -0.321780      -3.30171       3.30171       1153.45       1156.75    
  45  0.320963      -1.13643      -11.6606       11.6606       1147.53       1159.19    
  46  0.287938      -1.24501      -12.7748       12.7748       1134.47       1147.25    
  47  0.935911     -0.662348E-01 -0.679621      0.679621       1118.98       1119.66    
  48  0.600810     -0.509476      -5.22762       5.22762       1156.47       1161.70    
  49  0.200068      -1.60910      -16.5106       16.5106       1144.13       1160.64    
loop,thermsimp(1:2)       48   2.12101       47.1279    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376       1148.82         68.07          1.13         39.72          1.92          0.05        110.89
Just calling func    0   0        110.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1148.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       48
neval is:      375
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       49
neval is:      375


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      375     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.900563     -0.104735      -1.07466       1.07466       1045.14       1046.22    
   2  0.337202      -1.08707      -11.1542       11.1542       1067.62       1078.77    
   3  0.201324      -1.60284      -16.4463       16.4463       1062.30       1078.75    
   4  0.305897      -1.18451      -12.1540       12.1540       1077.54       1089.70    
   5  0.333562      -1.09793      -11.2656       11.2656       1074.35       1085.62    
   6  0.708340     -0.344831      -3.53823       3.53823       1077.74       1081.28    
   7  0.929963     -0.726100E-01 -0.745035      0.745035       1077.79       1078.54    
   8  0.954883     -0.461669E-01 -0.473708      0.473708       1057.63       1058.10    
   9  0.709141     -0.343701      -3.52663       3.52663       1080.20       1083.73    
  10  0.904936     -0.998906E-01  -1.02496       1.02496       1087.44       1088.46    
  11  0.764543     -0.268477      -2.75478       2.75478       1086.84       1089.60    
  12  0.297182      -1.21341      -12.4505       12.4505       1089.28       1101.73    
  13  0.472241     -0.750266      -7.69831       7.69831       1091.47       1099.17    
  14  0.601817     -0.507801      -5.21043       5.21043       1088.31       1093.52    
  15  0.274906      -1.29132      -13.2500       13.2500       1087.08       1100.33    
  16  0.979328     -0.208884E-01 -0.214332      0.214332       1083.56       1083.78    
  17  0.634279     -0.455267      -4.67139       4.67139       1052.93       1057.60    
  18  0.238460E-01  -3.73614      -38.3357       38.3357       1094.75       1133.08    
  19  0.302486      -1.19572      -12.2690       12.2690       1098.08       1110.35    
  20  0.454285     -0.789030      -8.09606       8.09606       1093.20       1101.29    
  21  0.850435     -0.162007      -1.66232       1.66232       1109.36       1111.02    
  22  0.562689     -0.575029      -5.90024       5.90024       1095.15       1101.05    
  23  0.351622      -1.04520      -10.7245       10.7245       1093.21       1103.93    
  24  0.978081     -0.221628E-01 -0.227407      0.227407       1118.98       1119.20    
  25  0.284594      -1.25669      -12.8946       12.8946       1117.81       1130.70    
  26  0.883683E-01  -2.42624      -24.8951       24.8951       1096.52       1121.41    
  27  0.217395      -1.52604      -15.6583       15.6583       1117.25       1132.91    
  28  0.405933     -0.901568      -9.25078       9.25078       1121.79       1131.04    
  29  0.951690     -0.495156E-01 -0.508068      0.508068       1122.64       1123.15    
  30  0.570178     -0.561806      -5.76456       5.76456       1117.10       1122.87    
  31  0.326664      -1.11882      -11.4800       11.4800       1093.73       1105.21    
  32  0.383874E-01  -3.26003      -33.4504       33.4504       1119.98       1153.43    
  33  0.630130     -0.461829      -4.73873       4.73873       1123.30       1128.04    
  34  0.902033     -0.103105      -1.05793       1.05793       1114.72       1115.78    
  35  0.192240      -1.64901      -16.9201       16.9201       1134.11       1151.03    
  36  0.836744     -0.178237      -1.82885       1.82885       1118.78       1120.61    
  37  0.481446     -0.730962      -7.50023       7.50023       1133.55       1141.05    
  38  0.801468     -0.221310      -2.27081       2.27081       1105.02       1107.29    
  39  0.929206     -0.734244E-01 -0.753391      0.753391       1135.49       1136.24    
  40  0.366038      -1.00502      -10.3123       10.3123       1136.32       1146.63    
  41  0.896697     -0.109037      -1.11881       1.11881       1121.36       1122.48    
  42  0.175481      -1.74022      -17.8560       17.8560       1130.17       1148.02    
  43  0.444632E-01  -3.11309      -31.9427       31.9427       1134.47       1166.42    
  44  0.469791     -0.755467      -7.75168       7.75168       1143.94       1151.69    
  45  0.475427     -0.743541      -7.62931       7.62931       1151.42       1159.05    
  46  0.568468     -0.564810      -5.79538       5.79538       1153.45       1159.24    
  47  0.684504     -0.379060      -3.88945       3.88945       1147.53       1151.42    
  48  0.207720      -1.57157      -16.1255       16.1255       1144.13       1160.25    
  49  0.332731      -1.10042      -11.2912       11.2912       1148.82       1160.11    
loop,thermsimp(1:2)       49   1.07466       11.1542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    377       1263.47         68.09          1.13         39.29          2.21          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    378       1111.55         68.09          1.13         39.36          2.14          0.05        110.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1111.55
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       49
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       50
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      377     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.326509      -1.11930      -11.4849       11.4849       1045.14       1056.63    
   2  0.656045     -0.421526      -4.32518       4.32518       1052.93       1057.26    
   3  0.702016     -0.353799      -3.63025       3.63025       1057.63       1061.26    
   4  0.659850     -0.415743      -4.26584       4.26584       1077.79       1082.06    
   5  0.587501     -0.531877      -5.45747       5.45747       1062.30       1067.76    
   6  0.118734      -2.13087      -21.8643       21.8643       1067.62       1089.48    
   7  0.484942     -0.723727      -7.42599       7.42599       1077.74       1085.17    
   8  0.809010     -0.211944      -2.17471       2.17471       1080.20       1082.38    
   9  0.107401      -2.23119      -22.8937       22.8937       1083.56       1106.46    
  10  0.912046     -0.920651E-01 -0.944659      0.944659       1074.35       1075.30    
  11  0.752441     -0.284433      -2.91850       2.91850       1087.44       1090.36    
  12  0.389912     -0.941833      -9.66394       9.66394       1086.84       1096.51    
  13  0.805927     -0.215762      -2.21389       2.21389       1077.54       1079.76    
  14  0.537328     -0.621147      -6.37345       6.37345       1088.31       1094.68    
  15  0.276300      -1.28627      -13.1981       13.1981       1091.47       1104.67    
  16  0.618485     -0.480483      -4.93013       4.93013       1087.08       1092.01    
  17  0.130066      -2.03972      -20.9291       20.9291       1095.15       1116.08    
  18  0.885305     -0.121824      -1.25000       1.25000       1093.20       1094.45    
  19  0.513359     -0.666781      -6.84168       6.84168       1089.28       1096.13    
  20  0.235519      -1.44596      -14.8367       14.8367       1093.21       1108.04    
  21  0.693842     -0.365511      -3.75043       3.75043       1093.73       1097.48    
  22  0.445925     -0.807605      -8.28665       8.28665       1105.02       1113.31    
  23  0.946501     -0.549828E-01 -0.564166      0.564166       1098.08       1098.64    
  24  0.108015      -2.22549      -22.8352       22.8352       1109.36       1132.19    
  25  0.988375     -0.116930E-01 -0.119980      0.119980       1114.72       1114.84    
  26  0.931439     -0.710246E-01 -0.728767      0.728767       1118.98       1119.71    
  27  0.915176     -0.886393E-01 -0.909507      0.909507       1118.78       1119.69    
  28  0.670330     -0.399985      -4.10415       4.10415       1096.52       1100.62    
  29  0.172595      -1.75681      -18.0262       18.0262       1121.36       1139.39    
  30  0.496295     -0.700585      -7.18855       7.18855       1117.10       1124.29    
  31  0.627359     -0.466236      -4.78394       4.78394       1122.64       1127.42    
  32  0.914384     -0.895052E-01 -0.918392      0.918392       1123.30       1124.22    
  33  0.197109      -1.62400      -16.6635       16.6635       1117.81       1134.47    
  34  0.830736     -0.185444      -1.90279       1.90279       1121.79       1123.69    
  35  0.554634     -0.589446      -6.04817       6.04817       1117.25       1123.30    
  36  0.386467E-01  -3.25329      -33.3813       33.3813       1094.75       1128.13    
  37  0.259980      -1.34715      -13.8228       13.8228       1135.49       1149.31    
  38  0.876870     -0.131396      -1.34823       1.34823       1133.55       1134.89    
  39  0.651025     -0.429207      -4.40400       4.40400       1136.32       1140.72    
  40  0.171053      -1.76578      -18.1183       18.1183       1130.17       1148.28    
  41  0.708910     -0.344027      -3.52999       3.52999       1134.11       1137.64    
  42  0.501487     -0.690177      -7.08175       7.08175       1147.53       1154.62    
  43  0.766040     -0.266521      -2.73472       2.73472       1143.94       1146.67    
  44  0.189113      -1.66541      -17.0884       17.0884       1119.98       1137.07    
  45  0.250338      -1.38494      -14.2106       14.2106       1151.42       1165.63    
  46  0.830098     -0.186211      -1.91067       1.91067       1153.45       1155.36    
  47  0.337228      -1.08700      -11.1534       11.1534       1148.82       1159.97    
  48  0.290155      -1.23734      -12.6961       12.6961       1144.13       1156.82    
  49  0.382897     -0.959988      -9.85022       9.85022       1111.55       1121.40    
loop,thermsimp(1:2)       50   11.4849       4.32518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    379       1145.47         68.03          1.14         39.20          2.46          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1145.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       50
neval is:      378
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       51
neval is:      378


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      378     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.886088     -0.120938      -1.24092       1.24092       1045.14       1046.38    
   2  0.953882E-01  -2.34980      -24.1108       24.1108       1052.93       1077.04    
   3  0.875198     -0.133305      -1.36781       1.36781       1057.63       1059.00    
   4  0.401319     -0.913000      -9.36808       9.36808       1062.30       1071.67    
   5  0.288302      -1.24375      -12.7618       12.7618       1074.35       1087.11    
   6  0.596159E-01  -2.81983      -28.9337       28.9337       1077.54       1106.48    
   7  0.411979     -0.886782      -9.09907       9.09907       1077.79       1086.89    
   8  0.157950      -1.84548      -18.9360       18.9360       1080.20       1099.14    
   9  0.736512     -0.305830      -3.13805       3.13805       1077.74       1080.88    
  10  0.531935     -0.631235      -6.47696       6.47696       1067.62       1074.09    
  11  0.557201     -0.584829      -6.00080       6.00080       1087.44       1093.44    
  12  0.590342     -0.527053      -5.40797       5.40797       1087.08       1092.49    
  13  0.893645     -0.112447      -1.15379       1.15379       1093.20       1094.35    
  14  0.899172     -0.106281      -1.09053       1.09053       1088.31       1089.40    
  15  0.321510      -1.13473      -11.6432       11.6432       1089.28       1100.93    
  16  0.242259E-01  -3.72033      -38.1735       38.1735       1086.84       1125.02    
  17  0.646886     -0.435586      -4.46945       4.46945       1093.73       1098.20    
  18  0.998267     -0.173471E-02 -0.177994E-01  0.177994E-01   1098.08       1098.10    
  19  0.972297     -0.280942E-01 -0.288268      0.288268       1096.52       1096.81    
  20  0.309809      -1.17180      -12.0236       12.0236       1091.47       1103.49    
  21  0.816235     -0.203053      -2.08348       2.08348       1083.56       1085.64    
  22  0.984764     -0.153535E-01 -0.157539      0.157539       1093.21       1093.36    
  23  0.881026     -0.126668      -1.29971       1.29971       1105.02       1106.32    
  24  0.661336E-01  -2.71608      -27.8691       27.8691       1114.72       1142.59    
  25  0.410325     -0.890806      -9.14036       9.14036       1095.15       1104.29    
  26  0.104142E-03  -9.16976      -94.0888       94.0888       1118.78       1212.87    
  27  0.713949     -0.336943      -3.45730       3.45730       1118.98       1122.43    
  28  0.388242     -0.946126      -9.70798       9.70798       1111.55       1121.25    
  29  0.684780     -0.378657      -3.88532       3.88532       1117.25       1121.14    
  30  0.349297      -1.05183      -10.7926       10.7926       1121.79       1132.58    
  31  0.567533     -0.566456      -5.81227       5.81227       1123.30       1129.11    
  32  0.157115      -1.85078      -18.9904       18.9904       1117.10       1136.09    
  33  0.780641     -0.247640      -2.54098       2.54098       1122.64       1125.18    
  34  0.485397     -0.722789      -7.41637       7.41637       1094.75       1102.16    
  35  0.682517     -0.381968      -3.91929       3.91929       1109.36       1113.28    
  36  0.536829     -0.622075      -6.38297       6.38297       1117.81       1124.19    
  37  0.464187     -0.767467      -7.87480       7.87480       1133.55       1141.42    
  38  0.519819     -0.654274      -6.71336       6.71336       1119.98       1126.69    
  39  0.974252     -0.260857E-01 -0.267659      0.267659       1134.11       1134.37    
  40  0.386009     -0.951894      -9.76717       9.76717       1121.36       1131.13    
  41  0.217232      -1.52679      -15.6660       15.6660       1136.32       1151.99    
  42  0.173910      -1.74922      -17.9483       17.9483       1143.94       1161.89    
  43  0.860958     -0.149709      -1.53613       1.53613       1130.17       1131.70    
  44  0.893333     -0.112796      -1.15737       1.15737       1135.49       1136.64    
  45  0.957904     -0.430073E-01 -0.441288      0.441288       1147.53       1147.97    
  46  0.671164E-01  -2.70133      -27.7177       27.7177       1153.45       1181.17    
  47  0.133176      -2.01608      -20.6866       20.6866       1144.13       1164.81    
  48  0.574942     -0.553487      -5.67920       5.67920       1148.82       1154.50    
  49  0.302503      -1.19566      -12.2684       12.2684       1145.47       1157.74    
loop,thermsimp(1:2)       51   1.24092       24.1108    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    380       1103.15         68.03          1.13         39.27          2.07          0.05        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1103.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       51
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       52
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      379     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827214E-01  -2.49228      -25.5727       25.5727       1045.14       1070.71    
   2  0.625679E-01  -2.77150      -28.4378       28.4378       1057.63       1086.07    
   3  0.254112      -1.36998      -14.0570       14.0570       1062.30       1076.36    
   4  0.582152     -0.541023      -5.55132       5.55132       1067.62       1073.17    
   5  0.596882     -0.516035      -5.29492       5.29492       1052.93       1058.23    
   6  0.149943      -1.89750      -19.4698       19.4698       1077.74       1097.21    
   7  0.496252     -0.700672      -7.18944       7.18944       1083.56       1090.75    
   8  0.129782      -2.04190      -20.9515       20.9515       1077.79       1098.74    
   9  0.740869     -0.299931      -3.07752       3.07752       1074.35       1077.43    
  10  0.124297      -2.08508      -21.3946       21.3946       1088.31       1109.70    
  11  0.524903     -0.644542      -6.61350       6.61350       1087.08       1093.69    
  12  0.852180     -0.159958      -1.64129       1.64129       1093.21       1094.85    
  13  0.823232     -0.194517      -1.99589       1.99589       1087.44       1089.43    
  14  0.256230      -1.36168      -13.9719       13.9719       1093.20       1107.17    
  15  0.258393      -1.35327      -13.8856       13.8856       1096.52       1110.40    
  16  0.324549      -1.12532      -11.5466       11.5466       1098.08       1109.63    
  17  0.504546     -0.684097      -7.01936       7.01936       1093.73       1100.75    
  18  0.774284     -0.255817      -2.62488       2.62488       1080.20       1082.83    
  19  0.452119E-01  -3.09639      -31.7714       31.7714       1089.28       1121.06    
  20  0.325288      -1.12305      -11.5233       11.5233       1094.75       1106.27    
  21  0.156855      -1.85244      -19.0074       19.0074       1091.47       1110.48    
  22  0.440906     -0.818924      -8.40279       8.40279       1095.15       1103.55    
  23  0.313753E-02  -5.76432      -59.1464       59.1464       1105.02       1164.17    
  24  0.252529      -1.37623      -14.1212       14.1212       1077.54       1091.66    
  25  0.799267     -0.224060      -2.29903       2.29903       1109.36       1111.66    
  26  0.961010     -0.397708E-01 -0.408079      0.408079       1117.25       1117.66    
  27  0.843711     -0.169946      -1.74377       1.74377       1111.55       1113.29    
  28  0.120002      -2.12025      -21.7554       21.7554       1118.98       1140.73    
  29  0.489889     -0.713576      -7.32184       7.32184       1117.81       1125.13    
  30  0.317246      -1.14808      -11.7802       11.7802       1086.84       1098.62    
  31  0.761766     -0.272116      -2.79212       2.79212       1122.64       1125.43    
  32  0.468167     -0.758930      -7.78721       7.78721       1119.98       1127.77    
  33  0.634908     -0.454275      -4.66121       4.66121       1123.30       1127.96    
  34  0.410644     -0.890029      -9.13238       9.13238       1121.36       1130.49    
  35  0.330962      -1.10575      -11.3459       11.3459       1130.17       1141.51    
  36  0.275422      -1.28945      -13.2308       13.2308       1121.79       1135.02    
  37  0.186052      -1.68173      -17.2559       17.2559       1134.11       1151.36    
  38  0.361178      -1.01838      -10.4494       10.4494       1117.10       1127.55    
  39  0.850100     -0.162402      -1.66637       1.66637       1135.49       1137.15    
  40  0.649062     -0.432226      -4.43498       4.43498       1133.55       1137.98    
  41  0.322988      -1.13014      -11.5961       11.5961       1114.72       1126.32    
  42  0.284964      -1.25539      -12.8813       12.8813       1147.53       1160.41    
  43  0.685335     -0.377848      -3.87701       3.87701       1136.32       1140.20    
  44  0.262422      -1.33780      -13.7269       13.7269       1148.82       1162.55    
  45  0.767375     -0.264780      -2.71685       2.71685       1145.47       1148.19    
  46  0.109385      -2.21288      -22.7059       22.7059       1143.94       1166.64    
  47  0.306599      -1.18221      -12.1304       12.1304       1144.13       1156.26    
  48  0.406201     -0.900907      -9.24400       9.24400       1153.45       1162.69    
  49  0.423601     -0.858964      -8.81364       8.81364       1103.15       1111.96    
loop,thermsimp(1:2)       52   25.5727       28.4378    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381       1189.26         68.03          1.13         39.22          2.24          0.04        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    382       1068.79         68.09          1.12         39.18          2.49          0.05        110.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    1189.3        3.407     -2.954      4.459     -102.6     0.1339    
                      0.1044     0.9423     -99.70      5.099     0.8210    

                       3.537     -1.194      1.676      8546.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.278      0.000      0.000      7000.      451.4    

                      -1.381     -5.675     -7.632     -7.616      8.923    

                      -5.641     -3.949      5508.      0.000      7093.    



                       2097.      6326.      5783.      2231.      5262.    

                       3902.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.749     -1.578     -2.162     -2.003    -0.3807    

                     -0.3252      9.588      8.478    -0.1489E+05 -5.288    

                     -0.1480     -2.495      8.998      9.088    -0.1969E+05



                      -6.000     0.4595     0.1010      9.018      8.982    

                     -0.1944E+05 -6.000     -1.178    -0.7126      9.753    

                       9.377    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1068.79
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       52
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       53
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      381     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265283      -1.32696      -13.6156       13.6156       1052.93       1066.55    
   2  0.615112     -0.485951      -4.98623       4.98623       1045.14       1050.13    
   3  0.424286E-01  -3.15993      -32.4234       32.4234       1067.62       1100.04    
   4  0.726479     -0.319546      -3.27878       3.27878       1062.30       1065.58    
   5  0.402368     -0.910388      -9.34129       9.34129       1074.35       1083.69    
   6  0.958941E-01  -2.34451      -24.0565       24.0565       1080.20       1104.26    
   7  0.137400      -1.98486      -20.3661       20.3661       1057.63       1078.00    
   8  0.887138     -0.119755      -1.22878       1.22878       1087.44       1088.67    
   9  0.655001     -0.423119      -4.34153       4.34153       1083.56       1087.90    
  10  0.304836      -1.18798      -12.1896       12.1896       1077.54       1089.73    
  11  0.346250      -1.06059      -10.8825       10.8825       1087.08       1097.96    
  12  0.608663E-01  -2.79908      -28.7207       28.7207       1093.21       1121.93    
  13  0.307248      -1.18010      -12.1087       12.1087       1077.74       1089.85    
  14  0.695201     -0.363555      -3.73035       3.73035       1086.84       1090.57    
  15  0.628698     -0.464104      -4.76207       4.76207       1077.79       1082.55    
  16  0.609308     -0.495432      -5.08351       5.08351       1093.73       1098.82    
  17  0.335400      -1.09243      -11.2092       11.2092       1095.15       1106.36    
  18  0.910258     -0.940273E-01 -0.964793      0.964793       1094.75       1095.71    
  19  0.439254E-01  -3.12526      -32.0676       32.0676       1093.20       1125.27    
  20  0.978338     -0.219001E-01 -0.224712      0.224712       1098.08       1098.31    
  21  0.282939      -1.26252      -12.9545       12.9545       1088.31       1101.26    
  22  0.763165     -0.270281      -2.77330       2.77330       1096.52       1099.29    
  23  0.206330      -1.57828      -16.1944       16.1944       1091.47       1107.66    
  24  0.228687      -1.47540      -15.1388       15.1388       1109.36       1124.50    
  25  0.634584E-01  -2.75737      -28.2927       28.2927       1103.15       1131.44    
  26  0.665745E-01  -2.70943      -27.8009       27.8009       1111.55       1139.35    
  27  0.761759     -0.272125      -2.79222       2.79222       1117.25       1120.05    
  28  0.636615     -0.451590      -4.63366       4.63366       1089.28       1093.92    
  29  0.804468     -0.217574      -2.23248       2.23248       1117.81       1120.04    
  30  0.508586     -0.676120      -6.93752       6.93752       1122.64       1129.58    
  31  0.232797      -1.45759      -14.9560       14.9560       1114.72       1129.68    
  32  0.932655     -0.697196E-01 -0.715377      0.715377       1117.10       1117.82    
  33  0.970411     -0.300359E-01 -0.308192      0.308192       1119.98       1120.29    
  34  0.151993      -1.88392      -19.3305       19.3305       1123.30       1142.63    
  35  0.571421     -0.559629      -5.74223       5.74223       1121.36       1127.10    
  36  0.673371     -0.395458      -4.05771       4.05771       1121.79       1125.84    
  37  0.828783     -0.187797      -1.92694       1.92694       1135.49       1137.41    
  38  0.285628      -1.25307      -12.8574       12.8574       1133.55       1146.40    
  39  0.127849      -2.05691      -21.1055       21.1055       1136.32       1157.43    
  40  0.101247      -2.29019      -23.4991       23.4991       1118.98       1142.48    
  41  0.593355     -0.521962      -5.35574       5.35574       1130.17       1135.52    
  42  0.362303      -1.01527      -10.4175       10.4175       1145.47       1155.89    
  43  0.754411     -0.281818      -2.89167       2.89167       1134.11       1137.00    
  44  0.917727     -0.858556E-01 -0.880945      0.880945       1144.13       1145.01    
  45  0.281495      -1.26764      -13.0070       13.0070       1147.53       1160.54    
  46  0.757766     -0.277381      -2.84615       2.84615       1148.82       1151.66    
  47  0.721843E-01  -2.62853      -26.9708       26.9708       1153.45       1180.42    
  48  0.995421     -0.458990E-02 -0.470960E-01  0.470960E-01   1105.02       1105.07    
  49  0.101230      -2.29036      -23.5009       23.5009       1068.79       1092.29    
loop,thermsimp(1:2)       53   13.6156       4.98623    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383       1178.95         68.05          1.11         38.84          2.55          0.05        110.60
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    384       1088.22         68.11          1.11         39.06          2.28          0.05        110.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1088.22
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       53
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       54
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      383     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.551084     -0.595868      -6.11407       6.11407       1045.14       1051.26    
   2  0.390343     -0.940730      -9.65262       9.65262       1062.30       1071.95    
   3  0.506127     -0.680968      -6.98726       6.98726       1052.93       1059.92    
   4  0.964820     -0.358141E-01 -0.367481      0.367481       1057.63       1058.00    
   5  0.647775     -0.434212      -4.45536       4.45536       1077.79       1082.25    
   6  0.251459      -1.38048      -14.1648       14.1648       1074.35       1088.52    
   7  0.908837     -0.955893E-01 -0.980820      0.980820       1083.56       1084.54    
   8  0.800726     -0.222236      -2.28031       2.28031       1087.44       1089.72    
   9  0.480867E-01  -3.03475      -31.1389       31.1389       1077.54       1108.68    
  10  0.859127     -0.151839      -1.55798       1.55798       1077.74       1079.30    
  11  0.618632     -0.480244      -4.92768       4.92768       1086.84       1091.77    
  12  0.262118      -1.33896      -13.7388       13.7388       1068.79       1082.53    
  13  0.373394     -0.985121      -10.1081       10.1081       1089.28       1099.39    
  14  0.698954     -0.358170      -3.67510       3.67510       1094.75       1098.42    
  15  0.698639     -0.358621      -3.67973       3.67973       1087.08       1090.76    
  16  0.683233     -0.380919      -3.90853       3.90853       1098.08       1101.99    
  17  0.475083     -0.744266      -7.63674       7.63674       1093.73       1101.37    
  18  0.957666E-01  -2.34584      -24.0701       24.0701       1096.52       1120.59    
  19  0.767182     -0.265031      -2.71943       2.71943       1067.62       1070.34    
  20  0.418812     -0.870332      -8.93028       8.93028       1088.31       1097.24    
  21  0.940661     -0.611725E-01 -0.627677      0.627677       1080.20       1080.83    
  22  0.827990     -0.188754      -1.93676       1.93676       1105.02       1106.96    
  23  0.463008     -0.770011      -7.90090       7.90090       1095.15       1103.05    
  24  0.723352     -0.323860      -3.32305       3.32305       1091.47       1094.79    
  25  0.330269      -1.10785      -11.3674       11.3674       1117.10       1128.47    
  26  0.640927E-02  -5.05001      -51.8170       51.8170       1117.81       1169.62    
  27  0.849682     -0.162893      -1.67141       1.67141       1117.25       1118.93    
  28  0.457568     -0.781830      -8.02218       8.02218       1119.98       1128.00    
  29  0.720244     -0.328166      -3.36723       3.36723       1093.21       1096.57    
  30  0.953392     -0.477287E-01 -0.489734      0.489734       1109.36       1109.85    
  31  0.322501      -1.13165      -11.6116       11.6116       1093.20       1104.81    
  32  0.335509      -1.09211      -11.2059       11.2059       1121.79       1132.99    
  33  0.140389      -1.96334      -20.1454       20.1454       1121.36       1141.50    
  34  0.429265     -0.845681      -8.67734       8.67734       1122.64       1131.32    
  35  0.775769E-01  -2.55649      -26.2315       26.2315       1114.72       1140.95    
  36  0.414811     -0.879933      -9.02879       9.02879       1103.15       1112.18    
  37  0.183764      -1.69410      -17.3828       17.3828       1130.17       1147.55    
  38  0.357541      -1.02851      -10.5533       10.5533       1134.11       1144.66    
  39  0.401419E-02  -5.51792      -56.6181       56.6181       1135.49       1192.11    
  40  0.399411     -0.917764      -9.41696       9.41696       1111.55       1120.96    
  41  0.795187     -0.229178      -2.35154       2.35154       1118.98       1121.33    
  42  0.673332     -0.395517      -4.05831       4.05831       1123.30       1127.36    
  43  0.898211     -0.107350      -1.10150       1.10150       1144.13       1145.23    
  44  0.769733     -0.261711      -2.68536       2.68536       1133.55       1136.23    
  45  0.791938     -0.233272      -2.39355       2.39355       1148.82       1151.21    
  46  0.537104     -0.621563      -6.37771       6.37771       1145.47       1151.85    
  47  0.313282      -1.16065      -11.9092       11.9092       1136.32       1148.23    
  48  0.516025     -0.661601      -6.78854       6.78854       1147.53       1154.32    
  49  0.119673      -2.12299      -21.7835       21.7835       1088.22       1110.00    
loop,thermsimp(1:2)       54   6.11407       9.65262    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385       1033.31         68.11          1.14         39.29          2.22          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    386       2696.63         68.01          1.19         39.66          1.85          0.05        110.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1033.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       54
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       55
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      385
neval,tstepnext:      385     385

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.146220      -1.92264      -19.7278       19.7278       1045.14       1064.87    
   2  0.620947     -0.476510      -4.88936       4.88936       1057.63       1062.52    
   3  0.177272      -1.73007      -17.7518       17.7518       1052.93       1070.68    
   4  0.884738     -0.122464      -1.25657       1.25657       1067.62       1068.87    
   5  0.304829      -1.18800      -12.1898       12.1898       1062.30       1074.49    
   6  0.555834     -0.587286      -6.02601       6.02601       1077.74       1083.77    
   7  0.396848     -0.924202      -9.48303       9.48303       1080.20       1089.69    
   8  0.570840     -0.560646      -5.75266       5.75266       1077.79       1083.54    
   9  0.726203     -0.319926      -3.28269       3.28269       1068.79       1072.07    
  10  0.917349E-01  -2.38885      -24.5115       24.5115       1083.56       1108.07    
  11  0.456603     -0.783941      -8.04384       8.04384       1074.35       1082.40    
  12  0.602259     -0.507068      -5.20291       5.20291       1087.44       1092.64    
  13  0.496888E-01  -3.00198      -30.8026       30.8026       1087.08       1117.88    
  14  0.583997     -0.537860      -5.51886       5.51886       1086.84       1092.36    
  15  0.200789E-01  -3.90809      -40.1000       40.1000       1091.47       1131.57    
  16  0.422855     -0.860726      -8.83171       8.83171       1093.21       1102.04    
  17  0.535645     -0.624284      -6.40564       6.40564       1088.31       1094.71    
  18  0.413266     -0.883663      -9.06707       9.06707       1094.75       1103.82    
  19  0.342457      -1.07161      -10.9955       10.9955       1089.28       1100.28    
  20  0.638345     -0.448876      -4.60582       4.60582       1093.73       1098.34    
  21  0.655695     -0.422060      -4.33066       4.33066       1098.08       1102.41    
  22  0.629392     -0.463001      -4.75074       4.75074       1095.15       1099.90    
  23  0.977606     -0.226486E-01 -0.232392      0.232392       1093.20       1093.43    
  24  0.752980E-01  -2.58630      -26.5374       26.5374       1105.02       1131.56    
  25  0.874423     -0.134191      -1.37691       1.37691       1077.54       1078.92    
  26  0.587202     -0.532387      -5.46270       5.46270       1109.36       1114.82    
  27  0.880682     -0.127059      -1.30372       1.30372       1088.22       1089.52    
  28  0.878591E-01  -2.43202      -24.9544       24.9544       1103.15       1128.10    
  29  0.695678     -0.362869      -3.72332       3.72332       1117.25       1120.98    
  30  0.124758      -2.08138      -21.3565       21.3565       1096.52       1117.88    
  31  0.605547     -0.501622      -5.14703       5.14703       1111.55       1116.69    
  32  0.650291     -0.430335      -4.41557       4.41557       1118.98       1123.39    
  33  0.639591     -0.446926      -4.58580       4.58580       1123.30       1127.88    
  34  0.872983     -0.135839      -1.39381       1.39381       1119.98       1121.37    
  35  0.291503E-01  -3.53529      -36.2748       36.2748       1117.10       1153.38    
  36  0.290539      -1.23602      -12.6825       12.6825       1122.64       1135.32    
  37  0.759349     -0.275294      -2.82473       2.82473       1121.79       1124.61    
  38  0.599537     -0.511597      -5.24938       5.24938       1133.55       1138.80    
  39  0.948707     -0.526557E-01 -0.540288      0.540288       1114.72       1115.26    
  40  0.180828      -1.71021      -17.5481       17.5481       1121.36       1138.91    
  41  0.385708     -0.952674      -9.77517       9.77517       1134.11       1143.88    
  42  0.299380      -1.20604      -12.3749       12.3749       1144.13       1156.50    
  43  0.853891     -0.157952      -1.62071       1.62071       1130.17       1131.79    
  44  0.502000E-01  -2.99174      -30.6976       30.6976       1136.32       1167.02    
  45  0.510049     -0.673249      -6.90805       6.90805       1148.82       1155.73    
  46  0.500368     -0.692411      -7.10467       7.10467       1145.47       1152.57    
  47  0.947833     -0.535774E-01 -0.549745      0.549745       1147.53       1148.08    
  48  0.147734      -1.91235      -19.6221       19.6221       1117.81       1137.43    
  49  0.448609     -0.801603      -8.22506       8.22506       1033.31       1041.54    
loop,thermsimp(1:2)       55   19.7278       4.88936    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387       1116.05         68.13          1.13         39.23          2.29          0.05        110.83
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1116.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.2608               385
loop is:       55
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    10.2608               385
loop is:       56
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    5.13039               433

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      386     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.500984     -0.691182      -3.54603       3.54603       1033.31       1036.86    
   2  0.324862      -1.12436      -5.76838       5.76838       1057.63       1063.40    
   3  0.195419      -1.63261      -8.37592       8.37592       1045.14       1053.52    
   4  0.203731      -1.59096      -8.16222       8.16222       1067.62       1075.78    
   5  0.177968      -1.72615      -8.85583       8.85583       1052.93       1061.79    
   6  0.835197     -0.180088     -0.923920      0.923920       1068.79       1069.72    
   7  0.302476      -1.19575      -6.13468       6.13468       1062.30       1068.44    
   8  0.352903E-01  -3.34415      -17.1568       17.1568       1077.54       1094.70    
   9  0.308671      -1.17548      -6.03067       6.03067       1074.35       1080.38    
  10  0.409306E-01  -3.19588      -16.3961       16.3961       1077.79       1094.19    
  11  0.615747     -0.484919      -2.48782       2.48782       1077.74       1080.23    
  12  0.766359     -0.266105      -1.36522       1.36522       1088.22       1089.58    
  13  0.625912     -0.468545      -2.40382       2.40382       1080.20       1082.61    
  14  0.435348     -0.831610      -4.26648       4.26648       1086.84       1091.11    
  15  0.341014      -1.07583      -5.51943       5.51943       1087.44       1092.96    
  16  0.434268E-01  -3.13668      -16.0924       16.0924       1093.20       1109.29    
  17  0.604743     -0.502951      -2.58034       2.58034       1088.31       1090.89    
  18  0.536278     -0.623102      -3.19676       3.19676       1093.73       1096.93    
  19  0.207674      -1.57179      -8.06387       8.06387       1095.15       1103.21    
  20  0.985598E-01  -2.31709      -11.8876       11.8876       1089.28       1101.17    
  21  0.814506     -0.205174      -1.05262       1.05262       1093.21       1094.26    
  22  0.447321     -0.804478      -4.12728       4.12728       1098.08       1102.21    
  23  0.741331     -0.299308      -1.53556       1.53556       1094.75       1096.28    
  24  0.601378     -0.508531      -2.60896       2.60896       1083.56       1086.17    
  25  0.421939E-01  -3.16548      -16.2401       16.2401       1109.36       1125.60    
  26  0.837477     -0.177362     -0.909933      0.909933       1114.72       1115.63    
  27  0.297606      -1.21198      -6.21795       6.21795       1111.55       1117.76    
  28  0.383069     -0.959540      -4.92281       4.92281       1096.52       1101.44    
  29  0.291041      -1.23429      -6.33240       6.33240       1087.08       1093.41    
  30  0.788773     -0.237276      -1.21732       1.21732       1117.25       1118.47    
  31  0.471794     -0.751213      -3.85401       3.85401       1119.98       1123.83    
  32  0.313755      -1.15914      -5.94685       5.94685       1118.98       1124.92    
  33  0.878815     -0.129181     -0.662746      0.662746       1121.79       1122.45    
  34  0.442284     -0.815802      -4.18538       4.18538       1123.30       1127.48    
  35  0.577998     -0.548185      -2.81240       2.81240       1103.15       1105.96    
  36  0.167851      -1.78468      -9.15608       9.15608       1105.02       1114.18    
  37  0.317031      -1.14875      -5.89355       5.89355       1091.47       1097.36    
  38  0.645763     -0.437323      -2.24363       2.24363       1130.17       1132.41    
  39  0.682139     -0.382522      -1.96248       1.96248       1122.64       1124.60    
  40  0.116437      -2.15041      -11.0324       11.0324       1117.81       1128.84    
  41  0.510594     -0.672180      -3.44854       3.44854       1133.55       1136.99    
  42  0.807696E-02  -4.81874      -24.7220       24.7220       1121.36       1146.08    
  43  0.367650      -1.00062      -5.13359       5.13359       1134.11       1139.24    
  44  0.446943     -0.805324      -4.13163       4.13163       1147.53       1151.67    
  45  0.181490      -1.70655      -8.75528       8.75528       1145.47       1154.22    
  46  0.912521     -0.915438E-01 -0.469655      0.469655       1117.10       1117.57    
  47  0.692870     -0.366912      -1.88240       1.88240       1148.82       1150.70    
  48  0.317456      -1.14742      -5.88669       5.88669       1144.13       1150.01    
  49  0.776642     -0.252776      -1.29684       1.29684       1116.05       1117.34    
loop,thermsimp(1:2)       56   3.54603       5.76838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    388       1131.52         68.05          1.12         39.14          2.36          0.04        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1131.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       56
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       57
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      387     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842839     -0.170980     -0.877192      0.877192       1033.31       1034.19    
   2  0.986423     -0.136696E-01 -0.701304E-01  0.701304E-01   1045.14       1045.21    
   3  0.633540     -0.456433      -2.34168       2.34168       1052.93       1055.27    
   4  0.518217E-01  -2.95995      -15.1857       15.1857       1057.63       1072.82    
   5  0.187161      -1.67579      -8.59743       8.59743       1062.30       1070.90    
   6  0.148298      -1.90853      -9.79152       9.79152       1068.79       1078.58    
   7  0.438795     -0.823722      -4.22601       4.22601       1067.62       1071.84    
   8  0.763297     -0.270109      -1.38576       1.38576       1077.74       1079.13    
   9  0.338275      -1.08390      -5.56080       5.56080       1074.35       1079.91    
  10  0.918815     -0.846702E-01 -0.434391      0.434391       1080.20       1080.64    
  11  0.349782      -1.05045      -5.38919       5.38919       1083.56       1088.95    
  12  0.131188      -2.03112      -10.4204       10.4204       1088.22       1098.64    
  13  0.961440     -0.393229E-01 -0.201742      0.201742       1088.31       1088.51    
  14  0.489949     -0.713455      -3.66030       3.66030       1086.84       1090.50    
  15  0.149956      -1.89742      -9.73447       9.73447       1087.44       1097.17    
  16  0.684004     -0.379791      -1.94848       1.94848       1087.08       1089.03    
  17  0.314778      -1.15589      -5.93015       5.93015       1077.79       1083.72    
  18  0.615260     -0.485711      -2.49188       2.49188       1093.21       1095.70    
  19  0.432805     -0.837468      -4.29654       4.29654       1077.54       1081.84    
  20  0.362224      -1.01549      -5.20987       5.20987       1094.75       1099.96    
  21  0.622697     -0.473696      -2.43024       2.43024       1093.73       1096.16    
  22  0.486392     -0.720740      -3.69768       3.69768       1091.47       1095.17    
  23  0.465513     -0.764615      -3.92277       3.92277       1089.28       1093.21    
  24  0.738251     -0.303471      -1.55692       1.55692       1096.52       1098.08    
  25  0.384600     -0.955551      -4.90234       4.90234       1098.08       1102.98    
  26  0.293922      -1.22444      -6.28185       6.28185       1095.15       1101.43    
  27  0.371803     -0.989390      -5.07595       5.07595       1103.15       1108.22    
  28  0.237589      -1.43721      -7.37346       7.37346       1093.20       1100.57    
  29  0.286147      -1.25125      -6.41939       6.41939       1105.02       1111.44    
  30  0.500459     -0.692230      -3.55141       3.55141       1114.72       1118.27    
  31  0.134865      -2.00348      -10.2786       10.2786       1116.05       1126.33    
  32  0.660213     -0.415193      -2.13010       2.13010       1117.10       1119.23    
  33  0.481817E-01  -3.03278      -15.5593       15.5593       1111.55       1127.11    
  34  0.683728     -0.380195      -1.95055       1.95055       1117.25       1119.20    
  35  0.634601     -0.454758      -2.33309       2.33309       1121.79       1124.12    
  36  0.195153      -1.63397      -8.38290       8.38290       1119.98       1128.36    
  37  0.176401      -1.73499      -8.90119       8.90119       1122.64       1131.54    
  38  0.770296     -0.260980      -1.33893       1.33893       1118.98       1120.32    
  39  0.223005      -1.50056      -7.69845       7.69845       1109.36       1117.06    
  40  0.530844E-01  -2.93587      -15.0622       15.0622       1123.30       1138.36    
  41  0.778354     -0.250574      -1.28554       1.28554       1117.81       1119.09    
  42  0.118362E-02  -6.73917      -34.5746       34.5746       1130.17       1164.74    
  43  0.658087     -0.418418      -2.14664       2.14664       1133.55       1135.69    
  44  0.832154E-01  -2.48632      -12.7558       12.7558       1134.11       1146.86    
  45  0.569178     -0.563562      -2.89129       2.89129       1121.36       1124.25    
  46  0.511101     -0.671188      -3.44345       3.44345       1144.13       1147.57    
  47  0.585157     -0.535875      -2.74925       2.74925       1148.82       1151.57    
  48  0.821991     -0.196026      -1.00569       1.00569       1147.53       1148.54    
  49  0.433318     -0.836284      -4.29046       4.29046       1131.52       1135.81    
loop,thermsimp(1:2)       57  0.877192      0.701304E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389       1113.18         68.10          1.12         39.50          2.02          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1113.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       57
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       58
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      388     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.524788     -0.644761      -3.30787       3.30787       1033.31       1036.62    
   2  0.210443      -1.55854      -7.99593       7.99593       1045.14       1053.14    
   3  0.930464     -0.720719E-01 -0.369757      0.369757       1052.93       1053.30    
   4  0.858664     -0.152378     -0.781758      0.781758       1062.30       1063.08    
   5  0.285726      -1.25272      -6.42694       6.42694       1067.62       1074.04    
   6  0.144917      -1.93160      -9.90984       9.90984       1057.63       1067.54    
   7  0.999977     -0.230243E-04 -0.118124E-03  0.118124E-03   1068.79       1068.79    
   8  0.985482     -0.146243E-01 -0.750282E-01  0.750282E-01   1077.74       1077.82    
   9  0.204255      -1.58839      -8.14904       8.14904       1074.35       1082.50    
  10  0.932647     -0.697284E-01 -0.357733      0.357733       1080.20       1080.56    
  11  0.916829     -0.868346E-01 -0.445495      0.445495       1077.54       1077.99    
  12  0.468002     -0.759282      -3.89541       3.89541       1077.79       1081.69    
  13  0.314730      -1.15604      -5.93093       5.93093       1088.31       1094.24    
  14  0.641708     -0.443621      -2.27595       2.27595       1083.56       1085.84    
  15  0.829165     -0.187336     -0.961105      0.961105       1087.08       1088.04    
  16  0.163052E-01  -4.11627      -21.1181       21.1181       1086.84       1107.96    
  17  0.795714     -0.228516      -1.17237       1.17237       1089.28       1090.46    
  18  0.933380     -0.689433E-01 -0.353706      0.353706       1091.47       1091.82    
  19  0.839430E-01  -2.47762      -12.7111       12.7111       1093.21       1105.92    
  20  0.684979     -0.378367      -1.94117       1.94117       1093.73       1095.67    
  21  0.473112     -0.748422      -3.83970       3.83970       1087.44       1091.28    
  22  0.513710     -0.666097      -3.41734       3.41734       1096.52       1099.94    
  23  0.360837      -1.01933      -5.22955       5.22955       1088.22       1093.45    
  24  0.427332E-01  -3.15278      -16.1750       16.1750       1094.75       1110.92    
  25  0.772426     -0.258219      -1.32476       1.32476       1093.20       1094.52    
  26  0.514081     -0.665375      -3.41363       3.41363       1095.15       1098.56    
  27  0.794349     -0.230233      -1.18118       1.18118       1098.08       1099.26    
  28  0.306573      -1.18230      -6.06565       6.06565       1103.15       1109.21    
  29  0.542954     -0.610731      -3.13329       3.13329       1105.02       1108.15    
  30  0.309169      -1.17387      -6.02240       6.02240       1109.36       1115.38    
  31  0.870005     -0.139256     -0.714438      0.714438       1114.72       1115.44    
  32  0.559982     -0.579850      -2.97485       2.97485       1117.81       1120.78    
  33  0.779248     -0.249426      -1.27965       1.27965       1117.25       1118.53    
  34  0.852492     -0.159591     -0.818764      0.818764       1117.10       1117.92    
  35  0.513103E-01  -2.96986      -15.2365       15.2365       1118.98       1134.21    
  36  0.843623     -0.170050     -0.872420      0.872420       1121.79       1122.66    
  37  0.514962E-01  -2.96625      -15.2180       15.2180       1121.36       1136.58    
  38  0.509762     -0.673812      -3.45691       3.45691       1116.05       1119.50    
  39  0.511862E-01  -2.97229      -15.2490       15.2490       1111.55       1126.80    
  40  0.118788      -2.13041      -10.9298       10.9298       1119.98       1130.91    
  41  0.156747      -1.85312      -9.50723       9.50723       1122.64       1132.15    
  42  0.715854     -0.334278      -1.71498       1.71498       1133.55       1135.26    
  43  0.472923     -0.748824      -3.84175       3.84175       1131.52       1135.37    
  44  0.105826      -2.24596      -11.5226       11.5226       1123.30       1134.82    
  45  0.214159      -1.54104      -7.90612       7.90612       1134.11       1142.01    
  46  0.212749      -1.54764      -7.94001       7.94001       1144.13       1152.07    
  47  0.173051      -1.75417      -8.99957       8.99957       1147.53       1156.53    
  48  0.301411      -1.19928      -6.15277       6.15277       1148.82       1154.97    
  49  0.438447E-01  -3.12710      -16.0432       16.0432       1113.18       1129.22    
loop,thermsimp(1:2)       58   3.30787       7.99593    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    390       1186.41         68.19          1.13         39.33          2.61          0.05        111.32
Just calling func    0   0        111.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    391       1055.64         68.08          1.13         39.29          2.06          0.05        110.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1055.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       58
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       59
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      390     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810144     -0.210543      -1.08017       1.08017       1033.31       1034.39    
   2  0.897699     -0.107920     -0.553672      0.553672       1045.14       1045.70    
   3  0.719626     -0.329023      -1.68802       1.68802       1052.93       1054.62    
   4  0.415410     -0.878490      -4.50699       4.50699       1062.30       1066.81    
   5  0.991404     -0.863283E-02 -0.442897E-01  0.442897E-01   1057.63       1057.68    
   6  0.700708     -0.355664      -1.82469       1.82469       1068.79       1070.62    
   7  0.358389      -1.02614      -5.26447       5.26447       1067.62       1072.88    
   8  0.726731     -0.319199      -1.63762       1.63762       1077.74       1079.38    
   9  0.386831     -0.949769      -4.87268       4.87268       1077.54       1082.41    
  10  0.294784      -1.22151      -6.26684       6.26684       1080.20       1086.47    
  11  0.315848      -1.15249      -5.91274       5.91274       1077.79       1083.70    
  12  0.284632E-01  -3.55914      -18.2598       18.2598       1074.35       1092.61    
  13  0.316608      -1.15009      -5.90041       5.90041       1083.56       1089.46    
  14  0.309580      -1.17254      -6.01558       6.01558       1087.08       1093.09    
  15  0.758095     -0.276946      -1.42084       1.42084       1089.28       1090.71    
  16  0.132565      -2.02068      -10.3669       10.3669       1087.44       1097.80    
  17  0.963676     -0.369997E-01 -0.189823      0.189823       1091.47       1091.66    
  18  0.428996     -0.846309      -4.34189       4.34189       1088.22       1092.56    
  19  0.975676     -0.246243E-01 -0.126332      0.126332       1088.31       1088.43    
  20  0.475146     -0.744134      -3.81769       3.81769       1093.20       1097.02    
  21  0.507593     -0.678075      -3.47879       3.47879       1093.73       1097.21    
  22  0.275170      -1.29037      -6.62008       6.62008       1095.15       1101.77    
  23  0.475456     -0.743481      -3.81434       3.81434       1098.08       1101.89    
  24  0.302172      -1.19676      -6.13983       6.13983       1096.52       1102.66    
  25  0.243313      -1.41341      -7.25133       7.25133       1093.21       1100.46    
  26  0.356568      -1.03123      -5.29061       5.29061       1086.84       1092.13    
  27  0.630291     -0.461573      -2.36805       2.36805       1105.02       1107.39    
  28  0.642369     -0.442593      -2.27067       2.27067       1103.15       1105.42    
  29  0.593424     -0.521846      -2.67727       2.67727       1094.75       1097.43    
  30  0.813415     -0.206514      -1.05950       1.05950       1109.36       1110.42    
  31  0.623760     -0.471989      -2.42149       2.42149       1114.72       1117.14    
  32  0.314127      -1.15796      -5.94077       5.94077       1117.10       1123.04    
  33  0.333295      -1.09873      -5.63690       5.63690       1117.25       1122.89    
  34  0.974282     -0.260545E-01 -0.133670      0.133670       1116.05       1116.18    
  35  0.217685      -1.52471      -7.82234       7.82234       1117.81       1125.63    
  36  0.327903      -1.11504      -5.72058       5.72058       1121.79       1127.51    
  37  0.336622      -1.08880      -5.58594       5.58594       1111.55       1117.13    
  38  0.569408     -0.563159      -2.88922       2.88922       1113.18       1116.06    
  39  0.577250E-01  -2.85206      -14.6322       14.6322       1119.98       1134.61    
  40  0.237530      -1.43746      -7.37473       7.37473       1122.64       1130.01    
  41  0.622163     -0.474553      -2.43464       2.43464       1118.98       1121.41    
  42  0.476244     -0.741825      -3.80585       3.80585       1123.30       1127.10    
  43  0.914828     -0.890196E-01 -0.456705      0.456705       1133.55       1134.00    
  44  0.555890     -0.587184      -3.01248       3.01248       1131.52       1134.54    
  45  0.874902     -0.133644     -0.685644      0.685644       1121.36       1122.04    
  46  0.637871     -0.449619      -2.30672       2.30672       1134.11       1136.41    
  47  0.574852     -0.553643      -2.84040       2.84040       1144.13       1146.97    
  48  0.753498     -0.283029      -1.45205       1.45205       1148.82       1150.27    
  49  0.678645     -0.387657      -1.98883       1.98883       1055.64       1057.63    
loop,thermsimp(1:2)       59   1.08017      0.553672    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392       1136.31         68.03          1.12         39.13          2.41          0.04        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1136.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       59
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       60
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      391     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421109     -0.864863      -4.43708       4.43708       1033.31       1037.75    
   2  0.422022     -0.862697      -4.42597       4.42597       1045.14       1049.57    
   3  0.295550      -1.21892      -6.25351       6.25351       1052.93       1059.19    
   4  0.624681     -0.470513      -2.41392       2.41392       1055.64       1058.05    
   5  0.768652     -0.263117      -1.34989       1.34989       1057.63       1058.98    
   6  0.888855     -0.117822     -0.604470      0.604470       1062.30       1062.90    
   7  0.509140     -0.675031      -3.46317       3.46317       1068.79       1072.26    
   8  0.493628     -0.705973      -3.62192       3.62192       1067.62       1071.24    
   9  0.781578     -0.246440      -1.26433       1.26433       1077.74       1079.00    
  10  0.617265     -0.482456      -2.47519       2.47519       1077.54       1080.02    
  11  0.335801      -1.09124      -5.59846       5.59846       1077.79       1083.39    
  12  0.570262     -0.561660      -2.88153       2.88153       1080.20       1083.09    
  13  0.159269      -1.83716      -9.42534       9.42534       1088.31       1097.73    
  14  0.339767      -1.07950      -5.53823       5.53823       1083.56       1089.10    
  15  0.493989     -0.705242      -3.61817       3.61817       1089.28       1092.90    
  16  0.839254     -0.175242     -0.899058      0.899058       1091.47       1092.37    
  17  0.421889E-01  -3.16560      -16.2407       16.2407       1086.84       1103.08    
  18  0.278070      -1.27988      -6.56630       6.56630       1088.22       1094.78    
  19  0.942016E-01  -2.36232      -12.1196       12.1196       1074.35       1086.47    
  20  0.627802E-01  -2.76812      -14.2015       14.2015       1087.08       1101.28    
  21  0.228221      -1.47744      -7.57985       7.57985       1093.20       1100.78    
  22  0.929298     -0.733263E-01 -0.376192      0.376192       1093.73       1094.11    
  23  0.505346     -0.682512      -3.50155       3.50155       1094.75       1098.25    
  24  0.181316      -1.70751      -8.76021       8.76021       1087.44       1096.20    
  25  0.430977     -0.841701      -4.31825       4.31825       1093.21       1097.52    
  26  0.161604      -1.82261      -9.35068       9.35068       1095.15       1104.50    
  27  0.428774     -0.846826      -4.34454       4.34454       1098.08       1102.43    
  28  0.178213      -1.72477      -8.84876       8.84876       1096.52       1105.37    
  29  0.440884E-01  -3.12156      -16.0148       16.0148       1103.15       1119.16    
  30  0.224754      -1.49275      -7.65838       7.65838       1105.02       1112.68    
  31  0.174128      -1.74796      -8.96773       8.96773       1109.36       1118.33    
  32  0.798091     -0.225532      -1.15707       1.15707       1113.18       1114.33    
  33  0.303667E-01  -3.49441      -17.9277       17.9277       1116.05       1133.97    
  34  0.256290      -1.36145      -6.98475       6.98475       1111.55       1118.53    
  35  0.367468      -1.00112      -5.13613       5.13613       1114.72       1119.86    
  36  0.455395     -0.786590      -4.03551       4.03551       1118.98       1123.01    
  37  0.618612     -0.480277      -2.46401       2.46401       1121.36       1123.82    
  38  0.348147      -1.05513      -5.41323       5.41323       1117.25       1122.67    
  39  0.930736     -0.717801E-01 -0.368259      0.368259       1117.10       1117.47    
  40  0.822258     -0.195701      -1.00402       1.00402       1117.81       1118.81    
  41  0.444031     -0.811860      -4.16516       4.16516       1123.30       1127.46    
  42  0.599515     -0.511634      -2.62488       2.62488       1121.79       1124.41    
  43  0.866231     -0.143603     -0.736741      0.736741       1122.64       1123.38    
  44  0.143678      -1.94018      -9.95389       9.95389       1133.55       1143.50    
  45  0.280081      -1.27267      -6.52931       6.52931       1131.52       1138.05    
  46  0.834705E-01  -2.48326      -12.7401       12.7401       1119.98       1132.72    
  47  0.514478     -0.664603      -3.40967       3.40967       1134.11       1137.51    
  48  0.358853      -1.02484      -5.25784       5.25784       1144.13       1149.38    
  49  0.432015     -0.839295      -4.30591       4.30591       1136.31       1140.62    
loop,thermsimp(1:2)       60   4.43708       4.42597    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393       1176.86         68.05          1.12         39.21          2.21          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    394       1073.61         68.04          1.13         39.05          2.28          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1073.61
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       60
neval is:      393
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       61
neval is:      393


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      393     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297049      -1.21386      -6.22756       6.22756       1033.31       1039.54    
   2  0.575341     -0.552793      -2.83604       2.83604       1045.14       1047.98    
   3  0.202897      -1.59506      -8.18326       8.18326       1055.64       1063.82    
   4  0.154497      -1.86758      -9.58140       9.58140       1057.63       1067.21    
   5  0.990348     -0.969851E-02 -0.497571E-01  0.497571E-01   1052.93       1052.98    
   6  0.189774      -1.66192      -8.52629       8.52629       1062.30       1070.83    
   7  0.744626     -0.294873      -1.51281       1.51281       1067.62       1069.13    
   8  0.927855     -0.748799E-01 -0.384163      0.384163       1068.79       1069.18    
   9  0.730698     -0.313755      -1.60968       1.60968       1077.74       1079.35    
  10  0.375841     -0.978590      -5.02054       5.02054       1077.54       1082.56    
  11  0.792754     -0.232243      -1.19149       1.19149       1080.20       1081.40    
  12  0.232963      -1.45687      -7.47433       7.47433       1077.79       1085.27    
  13  0.816440     -0.202802      -1.04045       1.04045       1074.35       1075.39    
  14  0.626790     -0.467144      -2.39663       2.39663       1083.56       1085.96    
  15  0.943587     -0.580664E-01 -0.297903      0.297903       1091.47       1091.77    
  16  0.790178     -0.235497      -1.20819       1.20819       1089.28       1090.49    
  17  0.318791      -1.14322      -5.86515       5.86515       1093.73       1099.60    
  18  0.982573     -0.175804E-01 -0.901942E-01  0.901942E-01   1088.22       1088.31    
  19  0.959024     -0.418390E-01 -0.214650      0.214650       1087.44       1087.65    
  20  0.309588      -1.17251      -6.01544       6.01544       1093.21       1099.22    
  21  0.255297      -1.36533      -7.00466       7.00466       1088.31       1095.31    
  22  0.287931      -1.24504      -6.38751       6.38751       1094.75       1101.14    
  23  0.948191     -0.531995E-01 -0.272934      0.272934       1093.20       1093.47    
  24  0.231941      -1.46127      -7.49690       7.49690       1087.08       1094.57    
  25  0.730836E-01  -2.61615      -13.4219       13.4219       1098.08       1111.50    
  26  0.130964      -2.03283      -10.4292       10.4292       1086.84       1097.27    
  27  0.199641      -1.61124      -8.26626       8.26626       1095.15       1103.41    
  28  0.375837     -0.978600      -5.02060       5.02060       1096.52       1101.54    
  29  0.584992     -0.536158      -2.75070       2.75070       1105.02       1107.77    
  30  0.505862     -0.681491      -3.49631       3.49631       1113.18       1116.67    
  31  0.431310     -0.840928      -4.31429       4.31429       1117.10       1121.42    
  32  0.273049E-01  -3.60069      -18.4729       18.4729       1109.36       1127.83    
  33  0.865419E-01  -2.44713      -12.5547       12.5547       1111.55       1124.10    
  34  0.174989      -1.74303      -8.94242       8.94242       1117.81       1126.75    
  35  0.547517     -0.602362      -3.09035       3.09035       1103.15       1106.24    
  36  0.562902E-02  -5.17982      -26.5745       26.5745       1114.72       1141.30    
  37  0.386997     -0.949338      -4.87047       4.87047       1117.25       1122.12    
  38  0.750107     -0.287539      -1.47519       1.47519       1118.98       1120.45    
  39  0.218818      -1.51951      -7.79569       7.79569       1122.64       1130.44    
  40  0.821700     -0.196380      -1.00750       1.00750       1121.36       1122.37    
  41  0.223897      -1.49657      -7.67798       7.67798       1121.79       1129.46    
  42  0.744973     -0.294407      -1.51042       1.51042       1123.30       1124.81    
  43  0.279239      -1.27569      -6.54476       6.54476       1119.98       1126.52    
  44  0.210659      -1.55751      -7.99065       7.99065       1116.05       1124.04    
  45  0.998203     -0.179835E-02 -0.922625E-02  0.922625E-02   1134.11       1134.11    
  46  0.355772      -1.03347      -5.30208       5.30208       1131.52       1136.83    
  47  0.437893     -0.825781      -4.23658       4.23658       1136.31       1140.55    
  48  0.897806E-01  -2.41039      -12.3662       12.3662       1133.55       1145.91    
  49  0.970127     -0.303283E-01 -0.155596      0.155596       1073.61       1073.77    
loop,thermsimp(1:2)       61   6.22756       2.83604    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    395       1057.18         68.08          1.11         39.03          2.34          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1057.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       61
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       62
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      394     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.176971      -1.73177      -8.88465       8.88465       1033.31       1042.20    
   2  0.163120      -1.81327      -9.30277       9.30277       1045.14       1054.44    
   3  0.828064     -0.188664     -0.967922      0.967922       1052.93       1053.90    
   4  0.491219     -0.710866      -3.64702       3.64702       1055.64       1059.28    
   5  0.473397     -0.747822      -3.83661       3.83661       1057.63       1061.47    
   6  0.737394     -0.304633      -1.56288       1.56288       1067.62       1069.18    
   7  0.206273      -1.57855      -8.09858       8.09858       1068.79       1076.89    
   8  0.354259      -1.03773      -5.32394       5.32394       1062.30       1067.62    
   9  0.233194      -1.45588      -7.46925       7.46925       1073.61       1081.08    
  10  0.118120E-01  -4.43864      -22.7719       22.7719       1074.35       1097.12    
  11  0.918073     -0.854782E-01 -0.438536      0.438536       1077.74       1078.18    
  12  0.845317     -0.168044     -0.862131      0.862131       1080.20       1081.07    
  13  0.706964     -0.346775      -1.77909       1.77909       1077.54       1079.32    
  14  0.779001     -0.249743      -1.28128       1.28128       1077.79       1079.07    
  15  0.455959     -0.785352      -4.02916       4.02916       1083.56       1087.59    
  16  0.849694     -0.162880     -0.835635      0.835635       1087.44       1088.27    
  17  0.516839     -0.660024      -3.38618       3.38618       1088.22       1091.60    
  18  0.892086     -0.114192     -0.585850      0.585850       1089.28       1089.87    
  19  0.297598      -1.21201      -6.21809       6.21809       1091.47       1097.69    
  20  0.719255E-01  -2.63213      -13.5038       13.5038       1093.20       1106.70    
  21  0.722825     -0.324588      -1.66526       1.66526       1087.08       1088.74    
  22  0.550765     -0.596446      -3.06000       3.06000       1088.31       1091.37    
  23  0.988777     -0.112866E-01 -0.579048E-01  0.579048E-01   1086.84       1086.90    
  24  0.706438     -0.347520      -1.78291       1.78291       1093.21       1094.99    
  25  0.630672     -0.460969      -2.36495       2.36495       1093.73       1096.10    
  26  0.377261     -0.974818      -5.00119       5.00119       1094.75       1099.75    
  27  0.149262E-01  -4.20464      -21.5714       21.5714       1096.52       1118.09    
  28  0.185115      -1.68678      -8.65383       8.65383       1095.15       1103.80    
  29  0.836458     -0.178579     -0.916178      0.916178       1103.15       1104.06    
  30  0.778304     -0.250638      -1.28587       1.28587       1105.02       1106.31    
  31  0.495633     -0.701920      -3.60112       3.60112       1098.08       1101.68    
  32  0.795767E-01  -2.53103      -12.9852       12.9852       1113.18       1126.16    
  33  0.361545      -1.01737      -5.21950       5.21950       1118.98       1124.20    
  34  0.451858     -0.794387      -4.07551       4.07551       1117.10       1121.18    
  35  0.923485     -0.796009E-01 -0.408383      0.408383       1117.25       1117.66    
  36  0.189492      -1.66341      -8.53393       8.53393       1121.36       1129.89    
  37  0.357280      -1.02924      -5.28037       5.28037       1116.05       1121.33    
  38  0.113039      -2.18002      -11.1843       11.1843       1111.55       1122.73    
  39  0.418587     -0.870870      -4.46790       4.46790       1123.30       1127.77    
  40  0.732527E-01  -2.61384      -13.4100       13.4100       1119.98       1133.39    
  41  0.768904     -0.262790      -1.34821       1.34821       1117.81       1119.15    
  42  0.323623      -1.12817      -5.78797       5.78797       1109.36       1115.15    
  43  0.837193     -0.177701     -0.911675      0.911675       1121.79       1122.70    
  44  0.656230     -0.421244      -2.16115       2.16115       1122.64       1124.80    
  45  0.778603     -0.250253      -1.28390       1.28390       1134.11       1135.39    
  46  0.736391     -0.305994      -1.56987       1.56987       1131.52       1133.09    
  47  0.625820E-01  -2.77128      -14.2177       14.2177       1136.31       1150.53    
  48  0.480814     -0.732276      -3.75686       3.75686       1114.72       1118.48    
  49  0.356284      -1.03203      -5.29470       5.29470       1057.18       1062.48    
loop,thermsimp(1:2)       62   8.88465       9.30277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    396       1134.68         68.11          1.12         39.26          2.22          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1134.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       62
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       63
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      395     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278876      -1.27699      -6.55143       6.55143       1033.31       1039.86    
   2  0.603344     -0.505268      -2.59222       2.59222       1052.93       1055.53    
   3  0.363780      -1.01121      -5.18787       5.18787       1045.14       1050.33    
   4  0.298736      -1.20820      -6.19851       6.19851       1055.64       1061.83    
   5  0.992861     -0.716435E-02 -0.367559E-01  0.367559E-01   1057.63       1057.67    
   6  0.166164      -1.79478      -9.20791       9.20791       1057.18       1066.39    
   7  0.416382     -0.876153      -4.49500       4.49500       1062.30       1066.80    
   8  0.770949     -0.260133      -1.33458       1.33458       1067.62       1068.95    
   9  0.782423     -0.245359      -1.25879       1.25879       1068.79       1070.05    
  10  0.115501      -2.15847      -11.0738       11.0738       1077.74       1088.81    
  11  0.348954      -1.05281      -5.40135       5.40135       1077.79       1083.19    
  12  0.441818     -0.816857      -4.19079       4.19079       1077.54       1081.73    
  13  0.888072     -0.118703     -0.608992      0.608992       1080.20       1080.81    
  14  0.808059     -0.213120      -1.09339       1.09339       1073.61       1074.71    
  15  0.432540E-01  -3.14067      -16.1128       16.1128       1086.84       1102.96    
  16  0.369483     -0.995652      -5.10808       5.10808       1083.56       1088.67    
  17  0.262535      -1.33737      -6.86123       6.86123       1087.44       1094.30    
  18  0.873783     -0.134923     -0.692207      0.692207       1087.08       1087.77    
  19  0.636654     -0.451528      -2.31651       2.31651       1089.28       1091.60    
  20  0.534780     -0.625901      -3.21111       3.21111       1088.31       1091.52    
  21  0.557733     -0.583875      -2.99551       2.99551       1088.22       1091.21    
  22  0.929598     -0.730032E-01 -0.374535      0.374535       1093.21       1093.58    
  23  0.350245      -1.04912      -5.38240       5.38240       1093.73       1099.12    
  24  0.391945     -0.936633      -4.80529       4.80529       1074.35       1079.16    
  25  0.123996      -2.08751      -10.7097       10.7097       1091.47       1102.18    
  26  0.609578E-01  -2.79757      -14.3526       14.3526       1094.75       1109.10    
  27  0.165807      -1.79693      -9.21893       9.21893       1098.08       1107.30    
  28  0.766484     -0.265941      -1.36438       1.36438       1095.15       1096.51    
  29  0.629881     -0.462224      -2.37139       2.37139       1103.15       1105.52    
  30  0.273641      -1.29594      -6.64866       6.64866       1105.02       1111.67    
  31  0.344034E-01  -3.36960      -17.2873       17.2873       1093.20       1110.49    
  32  0.747187     -0.291440      -1.49520       1.49520       1109.36       1110.85    
  33  0.511998     -0.669435      -3.43446       3.43446       1117.25       1120.69    
  34  0.544406     -0.608061      -3.11959       3.11959       1096.52       1099.64    
  35  0.272552      -1.29993      -6.66913       6.66913       1114.72       1121.39    
  36  0.605186     -0.502220      -2.57658       2.57658       1117.81       1120.38    
  37  0.923323     -0.797758E-01 -0.409281      0.409281       1117.10       1117.51    
  38  0.373879     -0.983822      -5.04739       5.04739       1116.05       1121.09    
  39  0.325119      -1.12356      -5.76431       5.76431       1121.79       1127.55    
  40  0.746995E-01  -2.59428      -13.3097       13.3097       1111.55       1124.86    
  41  0.465030     -0.765653      -3.92810       3.92810       1118.98       1122.91    
  42  0.150040      -1.89685      -9.73159       9.73159       1122.64       1132.37    
  43  0.127827E-01  -4.35967      -22.3668       22.3668       1113.18       1135.54    
  44  0.667575     -0.404103      -2.07321       2.07321       1123.30       1125.37    
  45  0.725579     -0.320785      -1.64575       1.64575       1121.36       1123.00    
  46  0.555976     -0.587030      -3.01169       3.01169       1131.52       1134.54    
  47  0.834777     -0.180590     -0.926497      0.926497       1119.98       1120.91    
  48  0.582668     -0.540138      -2.77112       2.77112       1134.11       1136.88    
  49  0.265288      -1.32694      -6.80772       6.80772       1134.68       1141.49    
loop,thermsimp(1:2)       63   6.55143       2.59222    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397       1136.31         68.03          1.13         39.11          2.47          0.05        110.79
Just calling func    0   0        110.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1136.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       63
neval is:      396
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       64
neval is:      396


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      396     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379008E-01  -3.27278      -16.7906       16.7906       1033.31       1050.10    
   2  0.772352     -0.258315      -1.32525       1.32525       1045.14       1046.47    
   3  0.802807     -0.219640      -1.12684       1.12684       1052.93       1054.06    
   4  0.514956     -0.663673      -3.40490       3.40490       1057.63       1061.04    
   5  0.554302     -0.590045      -3.02716       3.02716       1055.64       1058.66    
   6  0.503754     -0.685667      -3.51774       3.51774       1057.18       1060.70    
   7  0.400624     -0.914733      -4.69293       4.69293       1062.30       1066.99    
   8  0.912762     -0.912806E-01 -0.468305      0.468305       1067.62       1068.08    
   9  0.197841E-01  -3.92288      -20.1259       20.1259       1068.79       1088.92    
  10  0.657402E-02  -5.02463      -25.7783       25.7783       1073.61       1099.39    
  11  0.802861     -0.219574      -1.12650       1.12650       1074.35       1075.48    
  12  0.494750     -0.703703      -3.61027       3.61027       1080.20       1083.81    
  13  0.533728     -0.627869      -3.22121       3.22121       1077.54       1080.76    
  14  0.202886      -1.59511      -8.18354       8.18354       1077.79       1085.98    
  15  0.459498     -0.777620      -3.98949       3.98949       1087.08       1091.07    
  16  0.476385     -0.741530      -3.80433       3.80433       1083.56       1087.37    
  17  0.604782     -0.502887      -2.58001       2.58001       1077.74       1080.32    
  18  0.652452     -0.427018      -2.19077       2.19077       1088.22       1090.41    
  19  0.611862     -0.491249      -2.52030       2.52030       1088.31       1090.83    
  20  0.974982     -0.253365E-01 -0.129986      0.129986       1089.28       1089.41    
  21  0.950238E-01  -2.35363      -12.0750       12.0750       1093.21       1105.28    
  22  0.322848      -1.13057      -5.80028       5.80028       1087.44       1093.24    
  23  0.581382     -0.542348      -2.78246       2.78246       1095.15       1097.93    
  24  0.267652      -1.31807      -6.76220       6.76220       1093.73       1100.50    
  25  0.232641E-01  -3.76084      -19.2946       19.2946       1096.52       1115.81    
  26  0.515113E-01  -2.96595      -15.2165       15.2165       1091.47       1106.69    
  27  0.300440      -1.20251      -6.16933       6.16933       1086.84       1093.01    
  28  0.760936     -0.273206      -1.40165       1.40165       1103.15       1104.55    
  29  0.447102     -0.804968      -4.12980       4.12980       1098.08       1102.21    
  30  0.550831     -0.596328      -3.05939       3.05939       1094.75       1097.81    
  31  0.314273      -1.15749      -5.93839       5.93839       1093.20       1099.14    
  32  0.967020     -0.335365E-01 -0.172055      0.172055       1109.36       1109.53    
  33  0.505250     -0.682701      -3.50252       3.50252       1105.02       1108.52    
  34  0.416175     -0.876649      -4.49755       4.49755       1117.10       1121.60    
  35  0.450270     -0.797909      -4.09358       4.09358       1117.81       1121.90    
  36  0.521734     -0.650597      -3.33781       3.33781       1117.25       1120.59    
  37  0.135069      -2.00197      -10.2709       10.2709       1119.98       1130.25    
  38  0.186856      -1.67742      -8.60580       8.60580       1116.05       1124.65    
  39  0.965761     -0.348385E-01 -0.178735      0.178735       1114.72       1114.90    
  40  0.419580     -0.868501      -4.45575       4.45575       1118.98       1123.43    
  41  0.558190     -0.583056      -2.99130       2.99130       1121.36       1124.35    
  42  0.862407     -0.148028     -0.759439      0.759439       1111.55       1112.31    
  43  0.507376E-01  -2.98109      -15.2941       15.2941       1123.30       1138.59    
  44  0.568000     -0.565633      -2.90192       2.90192       1121.79       1124.69    
  45  0.750571     -0.286921      -1.47202       1.47202       1122.64       1124.11    
  46  0.873151     -0.135646     -0.695918      0.695918       1131.52       1132.22    
  47  0.204078      -1.58925      -8.15348       8.15348       1113.18       1121.33    
  48  0.610815     -0.492961      -2.52908       2.52908       1134.11       1136.63    
  49  0.666006E-01  -2.70904      -13.8984       13.8984       1136.31       1150.21    
loop,thermsimp(1:2)       64   16.7906       1.32525    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    398       1134.68         68.09          1.12         39.03          2.36          0.04        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1134.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       64
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       65
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      397     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483176     -0.727373      -3.73171       3.73171       1045.14       1048.87    
   2  0.880011     -0.127821     -0.655771      0.655771       1033.31       1033.97    
   3  0.163672      -1.80989      -9.28545       9.28545       1052.93       1062.22    
   4  0.548194     -0.601126      -3.08401       3.08401       1055.64       1058.72    
   5  0.774171     -0.255963      -1.31319       1.31319       1057.18       1058.50    
   6  0.815808     -0.203577      -1.04443       1.04443       1057.63       1058.68    
   7  0.901270     -0.103951     -0.533307      0.533307       1062.30       1062.83    
   8  0.604998     -0.502529      -2.57817       2.57817       1067.62       1070.19    
   9  0.583320     -0.539020      -2.76538       2.76538       1074.35       1077.12    
  10  0.776155     -0.253403      -1.30006       1.30006       1077.74       1079.04    
  11  0.414399     -0.880925      -4.51949       4.51949       1077.54       1082.06    
  12  0.321893      -1.13354      -5.81548       5.81548       1080.20       1086.02    
  13  0.882206     -0.125330     -0.642990      0.642990       1077.79       1078.43    
  14  0.176926      -1.73202      -8.88594       8.88594       1083.56       1092.45    
  15  0.143482      -1.94155      -9.96089       9.96089       1068.79       1078.75    
  16  0.669321     -0.401491      -2.05980       2.05980       1089.28       1091.34    
  17  0.862244     -0.148216     -0.760408      0.760408       1088.22       1088.98    
  18  0.897950     -0.107641     -0.552237      0.552237       1088.31       1088.86    
  19  0.788148     -0.238070      -1.22139       1.22139       1087.08       1088.30    
  20  0.801563     -0.221191      -1.13480       1.13480       1086.84       1087.98    
  21  0.284401      -1.25737      -6.45079       6.45079       1087.44       1093.89    
  22  0.782583     -0.245155      -1.25774       1.25774       1094.75       1096.01    
  23  0.813976     -0.205825      -1.05596       1.05596       1095.15       1096.20    
  24  0.528421     -0.637861      -3.27247       3.27247       1093.20       1096.47    
  25  0.871065     -0.138038     -0.708190      0.708190       1073.61       1074.32    
  26  0.139992      -1.96617      -10.0872       10.0872       1093.73       1103.82    
  27  0.549296     -0.599118      -3.07371       3.07371       1098.08       1101.15    
  28  0.990967     -0.907357E-02 -0.465509E-01  0.465509E-01   1103.15       1103.19    
  29  0.735762     -0.306848      -1.57425       1.57425       1093.21       1094.78    
  30  0.647880     -0.434050      -2.22684       2.22684       1091.47       1093.70    
  31  0.324740      -1.12473      -5.77029       5.77029       1105.02       1110.79    
  32  0.995457E-01  -2.30714      -11.8365       11.8365       1109.36       1121.19    
  33  0.953388     -0.477336E-01 -0.244892      0.244892       1111.55       1111.79    
  34  0.573564     -0.555886      -2.85191       2.85191       1114.72       1117.57    
  35  0.988045     -0.120272E-01 -0.617044E-01  0.617044E-01   1096.52       1096.58    
  36  0.499857     -0.693433      -3.55758       3.55758       1117.25       1120.81    
  37  0.687815E-01  -2.67682      -13.7331       13.7331       1113.18       1126.91    
  38  0.430407     -0.843024      -4.32504       4.32504       1117.10       1121.43    
  39  0.204975      -1.58487      -8.13099       8.13099       1117.81       1125.94    
  40  0.318612      -1.14378      -5.86804       5.86804       1118.98       1124.85    
  41  0.339792      -1.07942      -5.53785       5.53785       1122.64       1128.18    
  42  0.609830     -0.494575      -2.53736       2.53736       1121.36       1123.90    
  43  0.518092     -0.657603      -3.37376       3.37376       1116.05       1119.42    
  44  0.595099     -0.519028      -2.66281       2.66281       1121.79       1124.45    
  45  0.658024     -0.418513      -2.14713       2.14713       1119.98       1122.13    
  46  0.324672      -1.12494      -5.77138       5.77138       1131.52       1137.30    
  47  0.503769     -0.685637      -3.51758       3.51758       1134.11       1137.62    
  48  0.690978     -0.369647      -1.89643       1.89643       1123.30       1125.19    
  49  0.961279     -0.394903E-01 -0.202601      0.202601       1134.68       1134.88    
loop,thermsimp(1:2)       65   3.73171      0.655771    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399       1062.65         68.06          1.11         39.23          2.31          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1062.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       65
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       66
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      398     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606374E-01  -2.80284      -14.3797       14.3797       1033.31       1047.69    
   2  0.695687     -0.362855      -1.86158       1.86158       1045.14       1047.00    
   3  0.695570E-01  -2.66561      -13.6756       13.6756       1057.18       1070.86    
   4  0.320604      -1.13755      -5.83606       5.83606       1057.63       1063.47    
   5  0.469989     -0.755045      -3.87367       3.87367       1055.64       1059.51    
   6  0.571075     -0.560235      -2.87422       2.87422       1052.93       1055.81    
   7  0.881942     -0.125628     -0.644523      0.644523       1062.30       1062.95    
   8  0.195259      -1.63343      -8.38012       8.38012       1067.62       1076.00    
   9  0.825869     -0.191319     -0.981543      0.981543       1073.61       1074.59    
  10  0.213481E-02  -6.14938      -31.5487       31.5487       1074.35       1105.90    
  11  0.625641     -0.468979      -2.40604       2.40604       1077.79       1080.20    
  12  0.148805      -1.90512      -9.77400       9.77400       1068.79       1078.57    
  13  0.194947      -1.63503      -8.38832       8.38832       1077.74       1086.13    
  14  0.174958      -1.74321      -8.94334       8.94334       1077.54       1086.49    
  15  0.553792     -0.590967      -3.03189       3.03189       1080.20       1083.24    
  16  0.342970      -1.07011      -5.49009       5.49009       1086.84       1092.33    
  17  0.426079E-01  -3.15572      -16.1900       16.1900       1087.08       1103.27    
  18  0.604850E-01  -2.80536      -14.3926       14.3926       1088.31       1102.70    
  19  0.206356      -1.57815      -8.09654       8.09654       1088.22       1096.31    
  20  0.556358     -0.586343      -3.00816       3.00816       1089.28       1092.29    
  21  0.449978     -0.798557      -4.09691       4.09691       1083.56       1087.66    
  22  0.392109     -0.936215      -4.80314       4.80314       1091.47       1096.27    
  23  0.438064     -0.825391      -4.23457       4.23457       1087.44       1091.67    
  24  0.534146     -0.627086      -3.21719       3.21719       1093.21       1096.42    
  25  0.936924     -0.651528E-01 -0.334259      0.334259       1094.75       1095.08    
  26  0.810957     -0.209540      -1.07502       1.07502       1095.15       1096.22    
  27  0.874065     -0.134601     -0.690554      0.690554       1093.20       1093.89    
  28  0.370024     -0.994188      -5.10057       5.10057       1096.52       1101.62    
  29  0.600923     -0.509288      -2.61285       2.61285       1098.08       1100.69    
  30  0.138113E-01  -4.28227      -21.9697       21.9697       1103.15       1125.12    
  31  0.979527E-01  -2.32327      -11.9193       11.9193       1093.73       1105.65    
  32  0.917800     -0.857754E-01 -0.440061      0.440061       1105.02       1105.46    
  33  0.882941     -0.124497     -0.638718      0.638718       1111.55       1112.19    
  34  0.608441E-01  -2.79944      -14.3622       14.3622       1114.72       1129.08    
  35  0.536097E-01  -2.92603      -15.0116       15.0116       1116.05       1131.06    
  36  0.786939     -0.239605      -1.22927       1.22927       1117.25       1118.48    
  37  0.540054     -0.616087      -3.16076       3.16076       1109.36       1112.52    
  38  0.374443     -0.982316      -5.03966       5.03966       1117.10       1122.14    
  39  0.842126     -0.171825     -0.881529      0.881529       1119.98       1120.86    
  40  0.534170     -0.627041      -3.21696       3.21696       1121.36       1124.58    
  41  0.314687      -1.15618      -5.93163       5.93163       1121.79       1127.72    
  42  0.265277E-01  -3.62957      -18.6211       18.6211       1118.98       1137.60    
  43  0.357649      -1.02820      -5.27508       5.27508       1123.30       1128.57    
  44  0.861388E-01  -2.45180      -12.5787       12.5787       1117.81       1130.38    
  45  0.566899     -0.567573      -2.91187       2.91187       1113.18       1116.09    
  46  0.111209      -2.19635      -11.2681       11.2681       1122.64       1133.91    
  47  0.734273     -0.308875      -1.58465       1.58465       1134.68       1136.26    
  48  0.709398     -0.343338      -1.76146       1.76146       1131.52       1133.29    
  49  0.250023      -1.38620      -7.11174       7.11174       1062.65       1069.76    
loop,thermsimp(1:2)       66   14.3797       1.86158    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    400       1212.85         67.99          1.14         39.31          2.38          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    401       1119.93         68.04          1.13         39.17          2.27          0.05        110.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    1119.9        2.919     -3.294      4.438     -102.6     0.2957E-01
                     -0.1428     0.7851     -99.70      4.923      1.062    

                       3.336     -2.200      1.969      7116.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.489      0.000      0.000      7000.      286.9    

                      -1.290     -6.058     -6.914     -7.019      9.278    

                      -4.546     -3.949      5223.      0.000      7879.    



                       2282.      7121.      7127.      3533.     -1623.    

                       4852.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.892     -1.608     -2.195     -2.198    -0.3807    

                     -0.3252      9.606      8.433    -0.1589E+05 -5.078    

                     -0.2713     -2.348      9.009      9.047    -0.1969E+05



                      -6.000     0.3585    -0.3445E-01  8.947      8.961    

                     -0.1944E+05 -6.000     -1.124    -0.7537      9.689    

                       9.381    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1119.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       66
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       67
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      400     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497686     -0.697786      -3.57991       3.57991       1045.14       1048.72    
   2  0.830216     -0.186069     -0.954606      0.954606       1033.31       1034.27    
   3  0.267818      -1.31745      -6.75902       6.75902       1052.93       1059.69    
   4  0.400053     -0.916159      -4.70025       4.70025       1055.64       1060.34    
   5  0.411376     -0.888247      -4.55705       4.55705       1062.30       1066.86    
   6  0.499480     -0.694187      -3.56145       3.56145       1057.63       1061.19    
   7  0.739436     -0.301868      -1.54870       1.54870       1062.65       1064.20    
   8  0.115625      -2.15740      -11.0683       11.0683       1057.18       1068.25    
   9  0.377594     -0.973934      -4.99666       4.99666       1073.61       1078.61    
  10  0.661021     -0.413970      -2.12382       2.12382       1067.62       1069.74    
  11  0.765898     -0.266707      -1.36831       1.36831       1068.79       1070.16    
  12  0.608440     -0.496856      -2.54906       2.54906       1077.79       1080.34    
  13  0.366717      -1.00316      -5.14662       5.14662       1080.20       1085.35    
  14  0.853974     -0.157855     -0.809856      0.809856       1077.74       1078.55    
  15  0.140386      -1.96336      -10.0728       10.0728       1077.54       1087.62    
  16  0.882944     -0.124493     -0.638697      0.638697       1083.56       1084.20    
  17  0.760784E-01  -2.57599      -13.2158       13.2158       1087.44       1100.65    
  18  0.279297      -1.27548      -6.54371       6.54371       1089.28       1095.83    
  19  0.142650      -1.94736      -9.99072       9.99072       1086.84       1096.83    
  20  0.814861E-01  -2.50732      -12.8635       12.8635       1093.20       1106.06    
  21  0.801810     -0.220884      -1.13322       1.13322       1094.75       1095.88    
  22  0.611082     -0.492524      -2.52684       2.52684       1095.15       1097.67    
  23  0.599700E-01  -2.81391      -14.4365       14.4365       1091.47       1105.91    
  24  0.948704     -0.526589E-01 -0.270160      0.270160       1088.22       1088.49    
  25  0.992398     -0.763115E-02 -0.391507E-01  0.391507E-01   1093.21       1093.25    
  26  0.880498     -0.127268     -0.652934      0.652934       1098.08       1098.73    
  27  0.948340E-01  -2.35563      -12.0853       12.0853       1096.52       1108.60    
  28  0.982098     -0.180639E-01 -0.926750E-01  0.926750E-01   1088.31       1088.40    
  29  0.217652      -1.52486      -7.82312       7.82312       1087.08       1094.90    
  30  0.261545      -1.34115      -6.88061       6.88061       1105.02       1111.90    
  31  0.834479     -0.180948     -0.928334      0.928334       1093.73       1094.66    
  32  0.162789      -1.81530      -9.31319       9.31319       1074.35       1083.67    
  33  0.290203      -1.23718      -6.34719       6.34719       1111.55       1117.89    
  34  0.102916E-01  -4.57642      -23.4788       23.4788       1109.36       1132.84    
  35  0.834050     -0.181462     -0.930968      0.930968       1113.18       1114.11    
  36  0.965796     -0.348022E-01 -0.178549      0.178549       1117.25       1117.43    
  37  0.141898      -1.95265      -10.0178       10.0178       1119.98       1130.00    
  38  0.548366     -0.600813      -3.08240       3.08240       1117.10       1120.18    
  39  0.958993     -0.418714E-01 -0.214816      0.214816       1121.36       1121.57    
  40  0.241914      -1.41918      -7.28092       7.28092       1103.15       1110.43    
  41  0.696563     -0.361597      -1.85513       1.85513       1121.79       1123.64    
  42  0.946714     -0.547579E-01 -0.280929      0.280929       1123.30       1123.58    
  43  0.690193     -0.370783      -1.90226       1.90226       1114.72       1116.62    
  44  0.303289      -1.19307      -6.12090       6.12090       1117.81       1123.93    
  45  0.878282     -0.129787     -0.665859      0.665859       1116.05       1116.71    
  46  0.712048     -0.339610      -1.74233       1.74233       1131.52       1133.27    
  47  0.967351     -0.331944E-01 -0.170300      0.170300       1122.64       1122.81    
  48  0.718486     -0.330609      -1.69615       1.69615       1134.68       1136.37    
  49  0.805024     -0.216883      -1.11270       1.11270       1119.93       1121.04    
loop,thermsimp(1:2)       67   3.57991      0.954606    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402       1134.58         68.08          1.12         39.02          2.43          0.04        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1134.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       67
neval is:      401
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       68
neval is:      401


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      401     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.260355      -1.34571      -6.90402       6.90402       1033.31       1040.22    
   2  0.567351     -0.566778      -2.90779       2.90779       1045.14       1048.05    
   3  0.212111      -1.55064      -7.95540       7.95540       1052.93       1060.89    
   4  0.384323     -0.956272      -4.90604       4.90604       1055.64       1060.54    
   5  0.379704     -0.968364      -4.96808       4.96808       1057.63       1062.60    
   6  0.221298      -1.50824      -7.73787       7.73787       1062.65       1070.39    
   7  0.729922     -0.314818      -1.61514       1.61514       1062.30       1063.92    
   8  0.646542     -0.436117      -2.23745       2.23745       1057.18       1059.42    
   9  0.839436     -0.175025     -0.897946      0.897946       1067.62       1068.51    
  10  0.808281     -0.212846      -1.09198       1.09198       1068.79       1069.88    
  11  0.724296     -0.322555      -1.65483       1.65483       1077.74       1079.39    
  12  0.161395      -1.82390      -9.35731       9.35731       1073.61       1082.97    
  13  0.691210     -0.369312      -1.89471       1.89471       1077.79       1079.69    
  14  0.664974     -0.408007      -2.09323       2.09323       1074.35       1076.45    
  15  0.835640     -0.179558     -0.921199      0.921199       1083.56       1084.48    
  16  0.345121      -1.06386      -5.45802       5.45802       1080.20       1085.66    
  17  0.910776     -0.934579E-01 -0.479475      0.479475       1077.54       1078.02    
  18  0.482102     -0.729599      -3.74312       3.74312       1088.31       1092.05    
  19  0.828243     -0.188449     -0.966816      0.966816       1088.22       1089.18    
  20  0.805680     -0.216069      -1.10851       1.10851       1093.21       1094.32    
  21  0.694570     -0.364462      -1.86983       1.86983       1093.73       1095.60    
  22  0.304846      -1.18795      -6.09464       6.09464       1087.08       1093.17    
  23  0.212327      -1.54963      -7.95020       7.95020       1089.28       1097.23    
  24  0.670398     -0.399883      -2.05155       2.05155       1094.75       1096.80    
  25  0.466041     -0.763481      -3.91695       3.91695       1086.84       1090.76    
  26  0.500338E-01  -2.99506      -15.3658       15.3658       1095.15       1110.51    
  27  0.367939     -0.999839      -5.12956       5.12956       1098.08       1103.21    
  28  0.973691     -0.266612E-01 -0.136782      0.136782       1087.44       1087.57    
  29  0.688056     -0.373885      -1.91817       1.91817       1091.47       1093.39    
  30  0.219376      -1.51697      -7.78263       7.78263       1093.20       1100.98    
  31  0.135232      -2.00076      -10.2647       10.2647       1096.52       1106.78    
  32  0.796052     -0.228090      -1.17019       1.17019       1103.15       1104.32    
  33  0.596618E-01  -2.81906      -14.4629       14.4629       1105.02       1119.48    
  34  0.352128      -1.04376      -5.35490       5.35490       1113.18       1118.53    
  35  0.903448     -0.101537     -0.520923      0.520923       1114.72       1115.24    
  36  0.782446E-01  -2.54792      -13.0718       13.0718       1116.05       1129.12    
  37  0.992989     -0.703619E-02 -0.360984E-01  0.360984E-01   1117.25       1117.29    
  38  0.509863     -0.673613      -3.45589       3.45589       1111.55       1115.00    
  39  0.285505E-01  -3.55608      -18.2441       18.2441       1117.10       1135.35    
  40  0.117310      -2.14294      -10.9941       10.9941       1119.93       1130.92    
  41  0.608089     -0.497434      -2.55203       2.55203       1121.36       1123.91    
  42  0.516045     -0.661561      -3.39406       3.39406       1122.64       1126.03    
  43  0.505745     -0.681722      -3.49750       3.49750       1123.30       1126.80    
  44  0.273977      -1.29471      -6.64237       6.64237       1121.79       1128.43    
  45  0.776372     -0.253123      -1.29862       1.29862       1117.81       1119.10    
  46  0.813260     -0.206705      -1.06047       1.06047       1119.98       1121.04    
  47  0.823722     -0.193922     -0.994897      0.994897       1109.36       1110.35    
  48  0.690618     -0.370169      -1.89911       1.89911       1131.52       1133.42    
  49  0.906576     -0.980805E-01 -0.503191      0.503191       1134.58       1135.08    
loop,thermsimp(1:2)       68   6.90402       2.90779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    403       1148.80         68.11          1.12         39.08          2.35          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    404       1066.59         68.09          1.12         39.01          2.41          0.05        110.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1066.59
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       68
neval is:      403
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       69
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      403     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427727     -0.849271      -4.35709       4.35709       1033.31       1037.67    
   2  0.300580      -1.20204      -6.16694       6.16694       1045.14       1051.31    
   3  0.440777     -0.819215      -4.20289       4.20289       1057.18       1061.39    
   4  0.119397      -2.12530      -10.9036       10.9036       1055.64       1066.54    
   5  0.324114      -1.12666      -5.78020       5.78020       1052.93       1058.71    
   6  0.708589E-01  -2.64706      -13.5805       13.5805       1057.63       1071.21    
   7  0.234973      -1.44829      -7.43026       7.43026       1062.30       1069.73    
   8  0.630612     -0.461064      -2.36544       2.36544       1067.62       1069.98    
   9  0.637778     -0.449765      -2.30747       2.30747       1068.79       1071.10    
  10  0.952774     -0.483777E-01 -0.248196      0.248196       1062.65       1062.90    
  11  0.156845      -1.85249      -9.50401       9.50401       1074.35       1083.86    
  12  0.386146     -0.951540      -4.88177       4.88177       1077.54       1082.42    
  13  0.233038      -1.45655      -7.47267       7.47267       1077.74       1085.21    
  14  0.748513     -0.289667      -1.48611       1.48611       1077.79       1079.28    
  15  0.829626     -0.186780     -0.958254      0.958254       1073.61       1074.57    
  16  0.108384      -2.22208      -11.4001       11.4001       1083.56       1094.96    
  17  0.632628     -0.457873      -2.34906       2.34906       1080.20       1082.55    
  18  0.989524     -0.105314E-01 -0.540303E-01  0.540303E-01   1087.44       1087.49    
  19  0.151245      -1.88886      -9.69057       9.69057       1088.22       1097.91    
  20  0.898996E-01  -2.40906      -12.3594       12.3594       1086.84       1099.20    
  21  0.858841     -0.152172     -0.780699      0.780699       1088.31       1089.09    
  22  0.849417     -0.163205     -0.837303      0.837303       1087.08       1087.91    
  23  0.446510     -0.806293      -4.13659       4.13659       1091.47       1095.61    
  24  0.989123     -0.109366E-01 -0.561090E-01  0.561090E-01   1093.21       1093.26    
  25  0.898953E-01  -2.40911      -12.3597       12.3597       1093.73       1106.09    
  26  0.433704     -0.835393      -4.28589       4.28589       1094.75       1099.03    
  27  0.410713     -0.889861      -4.56533       4.56533       1089.28       1093.85    
  28  0.310044      -1.17104      -6.00789       6.00789       1093.20       1099.21    
  29  0.888110     -0.118660     -0.608772      0.608772       1098.08       1098.69    
  30  0.661223     -0.413664      -2.12226       2.12226       1103.15       1105.27    
  31  0.519718     -0.654468      -3.35767       3.35767       1096.52       1099.88    
  32  0.818791     -0.199927      -1.02570       1.02570       1109.36       1110.38    
  33  0.981929     -0.182366E-01 -0.935606E-01  0.935606E-01   1095.15       1095.24    
  34  0.308824E-01  -3.47757      -17.8413       17.8413       1111.55       1129.39    
  35  0.995192E-01  -2.30740      -11.8379       11.8379       1114.72       1126.56    
  36  0.292141      -1.23052      -6.31304       6.31304       1117.25       1123.57    
  37  0.546956     -0.603387      -3.09561       3.09561       1113.18       1116.27    
  38  0.875324     -0.133161     -0.683167      0.683167       1117.81       1118.49    
  39  0.497859     -0.697439      -3.57813       3.57813       1105.02       1108.60    
  40  0.808711     -0.212313      -1.08925       1.08925       1119.98       1121.07    
  41  0.916666     -0.870126E-01 -0.446408      0.446408       1121.36       1121.81    
  42  0.574110     -0.554933      -2.84702       2.84702       1122.64       1125.49    
  43  0.908171     -0.963226E-01 -0.494172      0.494172       1123.30       1123.79    
  44  0.243373      -1.41316      -7.25005       7.25005       1121.79       1129.04    
  45  0.647413     -0.434771      -2.23054       2.23054       1116.05       1118.28    
  46  0.309907      -1.17148      -6.01016       6.01016       1119.93       1125.94    
  47  0.167934      -1.78419      -9.15357       9.15357       1131.52       1140.68    
  48  0.676784     -0.390402      -2.00292       2.00292       1134.58       1136.58    
  49  0.769515     -0.261995      -1.34413       1.34413       1066.59       1067.93    
loop,thermsimp(1:2)       69   4.35709       6.16694    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    405       1207.52         68.07          1.15         39.10          2.48          0.05        110.85
Just calling func    0   0        110.85


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    406       1095.72         68.02          1.14         39.12          2.30          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1095.72
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       69
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       70
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      405     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652194     -0.427413      -2.19279       2.19279       1033.31       1035.50    
   2  0.835191     -0.180095     -0.923958      0.923958       1045.14       1046.07    
   3  0.914573     -0.892985E-01 -0.458136      0.458136       1052.93       1053.39    
   4  0.936996     -0.650763E-01 -0.333866      0.333866       1057.18       1057.52    
   5  0.343704E-01  -3.37056      -17.2923       17.2923       1062.65       1079.94    
   6  0.993168     -0.685505E-02 -0.351691E-01  0.351691E-01   1055.64       1055.67    
   7  0.124012      -2.08737      -10.7090       10.7090       1066.59       1077.30    
   8  0.283107E-01  -3.56451      -18.2873       18.2873       1062.30       1080.59    
   9  0.626631     -0.467398      -2.39793       2.39793       1067.62       1070.01    
  10  0.349067      -1.05249      -5.39968       5.39968       1068.79       1074.19    
  11  0.467982E-01  -3.06191      -15.7088       15.7088       1057.63       1073.34    
  12  0.682524E-01  -2.68454      -13.7727       13.7727       1073.61       1087.38    
  13  0.320603      -1.13755      -5.83609       5.83609       1077.79       1083.63    
  14  0.485411     -0.722759      -3.70803       3.70803       1077.54       1081.25    
  15  0.174639      -1.74503      -8.95270       8.95270       1080.20       1089.16    
  16  0.688366     -0.373434      -1.91586       1.91586       1074.35       1076.27    
  17  0.403792     -0.906856      -4.65252       4.65252       1077.74       1082.39    
  18  0.237008      -1.43966      -7.38601       7.38601       1087.44       1094.82    
  19  0.491286     -0.710728      -3.64631       3.64631       1087.08       1090.72    
  20  0.187095      -1.67614      -8.59923       8.59923       1088.31       1096.91    
  21  0.365844      -1.00555      -5.15885       5.15885       1093.21       1098.37    
  22  0.899359     -0.106073     -0.544195      0.544195       1089.28       1089.83    
  23  0.806501     -0.215051      -1.10329       1.10329       1083.56       1084.66    
  24  0.538739     -0.618525      -3.17327       3.17327       1095.15       1098.32    
  25  0.184808      -1.68844      -8.66233       8.66233       1091.47       1100.13    
  26  0.760157     -0.274230      -1.40691       1.40691       1088.22       1089.62    
  27  0.920762     -0.825532E-01 -0.423530      0.423530       1098.08       1098.50    
  28  0.142687      -1.94710      -9.98940       9.98940       1094.75       1104.74    
  29  0.992793     -0.723301E-02 -0.371082E-01  0.371082E-01   1086.84       1086.88    
  30  0.898687     -0.106820     -0.548030      0.548030       1093.20       1093.75    
  31  0.263660      -1.33309      -6.83928       6.83928       1096.52       1103.36    
  32  0.971768     -0.286379E-01 -0.146924      0.146924       1103.15       1103.29    
  33  0.387765     -0.947357      -4.86031       4.86031       1093.73       1098.59    
  34  0.574064     -0.555014      -2.84743       2.84743       1105.02       1107.87    
  35  0.370709     -0.992338      -5.09108       5.09108       1109.36       1114.45    
  36  0.483362E-01  -3.02957      -15.5429       15.5429       1113.18       1128.72    
  37  0.583245     -0.539148      -2.76604       2.76604       1116.05       1118.81    
  38  0.293950E-01  -3.52693      -18.0945       18.0945       1117.81       1135.90    
  39  0.961670     -0.390837E-01 -0.200514      0.200514       1119.98       1120.18    
  40  0.252096      -1.37794      -7.06939       7.06939       1121.36       1128.43    
  41  0.260270      -1.34604      -6.90568       6.90568       1117.25       1124.16    
  42  0.449392     -0.799860      -4.10359       4.10359       1123.30       1127.40    
  43  0.845367     -0.167985     -0.861827      0.861827       1122.64       1123.50    
  44  0.365557      -1.00633      -5.16288       5.16288       1119.93       1125.09    
  45  0.374516     -0.982121      -5.03866       5.03866       1114.72       1119.76    
  46  0.704289     -0.350566      -1.79854       1.79854       1121.79       1123.58    
  47  0.784654     -0.242512      -1.24418       1.24418       1111.55       1112.79    
  48  0.566446     -0.568374      -2.91598       2.91598       1134.58       1137.49    
  49  0.932234     -0.701720E-01 -0.360009      0.360009       1095.72       1096.08    
loop,thermsimp(1:2)       70   2.19279      0.923958    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407       1121.72         68.07          1.12         39.53          1.90          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1121.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       70
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       71
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      406     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993388     -0.663381E-02 -0.340340E-01  0.340340E-01   1033.31       1033.35    
   2  0.170387      -1.76968      -9.07916       9.07916       1045.14       1054.22    
   3  0.430235     -0.843424      -4.32709       4.32709       1052.93       1057.26    
   4  0.932962     -0.693906E-01 -0.356001      0.356001       1055.64       1055.99    
   5  0.723435     -0.323745      -1.66094       1.66094       1057.18       1058.84    
   6  0.251650E-01  -3.68230      -18.8916       18.8916       1067.62       1086.51    
   7  0.763909     -0.269307      -1.38165       1.38165       1057.63       1059.01    
   8  0.754456     -0.281759      -1.44553       1.44553       1068.79       1070.24    
   9  0.999559     -0.441576E-03 -0.226546E-02  0.226546E-02   1074.35       1074.35    
  10  0.643558     -0.440744      -2.26119       2.26119       1066.59       1068.85    
  11  0.629665E-01  -2.76515      -14.1863       14.1863       1062.65       1076.83    
  12  0.649053     -0.432241      -2.21756       2.21756       1062.30       1064.52    
  13  0.399773E-01  -3.21944      -16.5170       16.5170       1077.54       1094.06    
  14  0.849328     -0.163310     -0.837842      0.837842       1077.74       1078.58    
  15  0.391842E-01  -3.23948      -16.6198       16.6198       1077.79       1094.41    
  16  0.105710      -2.24706      -11.5283       11.5283       1083.56       1095.09    
  17  0.660078     -0.415397      -2.13115       2.13115       1086.84       1088.97    
  18  0.353251      -1.04058      -5.33856       5.33856       1073.61       1078.95    
  19  0.454778     -0.787946      -4.04247       4.04247       1080.20       1084.25    
  20  0.572414     -0.557893      -2.86221       2.86221       1088.22       1091.08    
  21  0.202701      -1.59602      -8.18822       8.18822       1089.28       1097.47    
  22  0.880730     -0.127005     -0.651583      0.651583       1087.08       1087.73    
  23  0.390523     -0.940268      -4.82394       4.82394       1093.20       1098.02    
  24  0.174911      -1.74348      -8.94472       8.94472       1087.44       1096.38    
  25  0.903407     -0.101582     -0.521153      0.521153       1095.72       1096.24    
  26  0.776206     -0.253337      -1.29972       1.29972       1088.31       1089.61    
  27  0.285894      -1.25213      -6.42393       6.42393       1095.15       1101.57    
  28  0.285213      -1.25452      -6.43616       6.43616       1093.21       1099.64    
  29  0.412143     -0.886385      -4.54750       4.54750       1098.08       1102.63    
  30  0.464292     -0.767242      -3.93625       3.93625       1093.73       1097.67    
  31  0.453886     -0.789909      -4.05254       4.05254       1091.47       1095.52    
  32  0.870789     -0.138356     -0.709819      0.709819       1103.15       1103.86    
  33  0.338222      -1.08405      -5.56161       5.56161       1096.52       1102.08    
  34  0.249181      -1.38958      -7.12907       7.12907       1094.75       1101.88    
  35  0.524083     -0.646104      -3.31477       3.31477       1105.02       1108.33    
  36  0.646957     -0.435475      -2.23415       2.23415       1111.55       1113.78    
  37  0.971194     -0.292293E-01 -0.149957      0.149957       1109.36       1109.51    
  38  0.775832     -0.253820      -1.30219       1.30219       1116.05       1117.35    
  39  0.411875     -0.887037      -4.55084       4.55084       1114.72       1119.27    
  40  0.300823      -1.20123      -6.16279       6.16279       1119.98       1126.14    
  41  0.535760     -0.624069      -3.20172       3.20172       1122.64       1125.84    
  42  0.547709     -0.602011      -3.08855       3.08855       1121.79       1124.87    
  43  0.714758     -0.335812      -1.72284       1.72284       1117.25       1118.98    
  44  0.610789E-01  -2.79559      -14.3425       14.3425       1119.93       1134.27    
  45  0.442447     -0.815435      -4.18350       4.18350       1123.30       1127.48    
  46  0.421127E-01  -3.16741      -16.2500       16.2500       1121.36       1137.61    
  47  0.218962      -1.51886      -7.79232       7.79232       1113.18       1120.97    
  48  0.475680     -0.743009      -3.81192       3.81192       1117.81       1121.62    
  49  0.997535     -0.246821E-02 -0.126629E-01  0.126629E-01   1121.72       1121.73    
loop,thermsimp(1:2)       71  0.340340E-01   9.07916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408       1112.57         68.03          1.12         38.97          2.31          0.05        110.49
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1112.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       71
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       72
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      407     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244277      -1.40945      -7.23104       7.23104       1033.31       1040.54    
   2  0.308155      -1.17715      -6.03925       6.03925       1045.14       1051.18    
   3  0.782683     -0.245028      -1.25709       1.25709       1055.64       1056.89    
   4  0.760982     -0.273146      -1.40135       1.40135       1052.93       1054.33    
   5  0.429075     -0.846125      -4.34095       4.34095       1057.18       1061.52    
   6  0.736261     -0.306171      -1.57077       1.57077       1057.63       1059.20    
   7  0.460189     -0.776117      -3.98178       3.98178       1062.30       1066.28    
   8  0.933911     -0.683736E-01 -0.350783      0.350783       1066.59       1066.94    
   9  0.460375     -0.775713      -3.97971       3.97971       1068.79       1072.77    
  10  0.939859     -0.620258E-01 -0.318216      0.318216       1074.35       1074.67    
  11  0.550327     -0.597243      -3.06409       3.06409       1062.65       1065.71    
  12  0.480638     -0.732640      -3.75873       3.75873       1077.74       1081.50    
  13  0.252938      -1.37461      -7.05228       7.05228       1073.61       1080.66    
  14  0.536822     -0.622088      -3.19155       3.19155       1080.20       1083.40    
  15  0.363695      -1.01144      -5.18907       5.18907       1067.62       1072.81    
  16  0.279007      -1.27652      -6.54903       6.54903       1087.08       1093.63    
  17  0.164958      -1.80206      -9.24528       9.24528       1086.84       1096.09    
  18  0.207862      -1.57088      -8.05924       8.05924       1088.31       1096.37    
  19  0.926151     -0.767180E-01 -0.393593      0.393593       1088.22       1088.61    
  20  0.931241     -0.712372E-01 -0.365474      0.365474       1077.54       1077.91    
  21  0.410184     -0.891148      -4.57194       4.57194       1077.79       1082.36    
  22  0.180536      -1.71183      -8.78233       8.78233       1083.56       1092.34    
  23  0.505927     -0.681363      -3.49565       3.49565       1091.47       1094.96    
  24  0.950800     -0.504520E-01 -0.258838      0.258838       1095.72       1095.98    
  25  0.530981     -0.633028      -3.24768       3.24768       1087.44       1090.69    
  26  0.878348     -0.129712     -0.665472      0.665472       1089.28       1089.95    
  27  0.699104     -0.357956      -1.83645       1.83645       1093.73       1095.57    
  28  0.795467     -0.228826      -1.17397       1.17397       1093.20       1094.37    
  29  0.828214     -0.188484     -0.966994      0.966994       1093.21       1094.17    
  30  0.840484     -0.173777     -0.891542      0.891542       1095.15       1096.04    
  31  0.916482E-02  -4.69238      -24.0737       24.0737       1094.75       1118.82    
  32  0.965109     -0.355146E-01 -0.182203      0.182203       1096.52       1096.70    
  33  0.686270E-01  -2.67907      -13.7447       13.7447       1098.08       1111.83    
  34  0.777883     -0.251179      -1.28864       1.28864       1103.15       1104.44    
  35  0.424167     -0.857629      -4.39997       4.39997       1105.02       1109.42    
  36  0.422618     -0.861287      -4.41873       4.41873       1109.36       1113.78    
  37  0.202591      -1.59656      -8.19099       8.19099       1111.55       1119.74    
  38  0.520317     -0.653316      -3.35176       3.35176       1116.05       1119.40    
  39  0.918512     -0.850003E-01 -0.436084      0.436084       1117.25       1117.69    
  40  0.516959     -0.659791      -3.38498       3.38498       1114.72       1118.11    
  41  0.477240     -0.739735      -3.79513       3.79513       1113.18       1116.97    
  42  0.520540E-01  -2.95547      -15.1627       15.1627       1117.81       1132.97    
  43  0.304485      -1.18913      -6.10071       6.10071       1121.72       1127.82    
  44  0.879547     -0.128348     -0.658473      0.658473       1121.79       1122.44    
  45  0.297327      -1.21292      -6.22276       6.22276       1122.64       1128.86    
  46  0.320273      -1.13858      -5.84136       5.84136       1119.98       1125.82    
  47  0.503657E-01  -2.98844      -15.3319       15.3319       1123.30       1138.63    
  48  0.836881     -0.178074     -0.913587      0.913587       1119.93       1120.84    
  49  0.550103     -0.597651      -3.06618       3.06618       1112.57       1115.63    
loop,thermsimp(1:2)       72   7.23104       6.03925    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409       1123.76         68.07          1.11         39.07          2.35          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1123.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       72
neval is:      408
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       73
neval is:      408


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      408     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985694     -0.144094E-01 -0.739260E-01  0.739260E-01   1033.31       1033.38    
   2  0.404696     -0.904619      -4.64105       4.64105       1045.14       1049.78    
   3  0.848366     -0.164443     -0.843655      0.843655       1052.93       1053.78    
   4  0.108805      -2.21820      -11.3802       11.3802       1055.64       1067.02    
   5  0.428300     -0.847930      -4.35021       4.35021       1057.63       1061.98    
   6  0.727573     -0.318041      -1.63167       1.63167       1057.18       1058.81    
   7  0.606234     -0.500489      -2.56770       2.56770       1062.65       1065.21    
   8  0.938951     -0.629916E-01 -0.323171      0.323171       1062.30       1062.62    
   9  0.622391     -0.474187      -2.43276       2.43276       1066.59       1069.02    
  10  0.681292E-01  -2.68635      -13.7820       13.7820       1068.79       1082.57    
  11  0.802944     -0.219471      -1.12597       1.12597       1067.62       1068.74    
  12  0.739251     -0.302118      -1.54998       1.54998       1074.35       1075.90    
  13  0.943417     -0.582465E-01 -0.298827      0.298827       1077.54       1077.84    
  14  0.865420E-01  -2.44712      -12.5547       12.5547       1073.61       1086.17    
  15  0.247017      -1.39830      -7.17381       7.17381       1077.74       1084.91    
  16  0.835884     -0.179266     -0.919704      0.919704       1077.79       1078.71    
  17  0.632625     -0.457877      -2.34909       2.34909       1080.20       1082.55    
  18  0.335470      -1.09222      -5.60353       5.60353       1088.22       1093.82    
  19  0.617355     -0.482312      -2.47444       2.47444       1089.28       1091.76    
  20  0.966107E-01  -2.33707      -11.9901       11.9901       1087.44       1099.43    
  21  0.205299      -1.58329      -8.12287       8.12287       1083.56       1091.68    
  22  0.784372     -0.242871      -1.24602       1.24602       1087.08       1088.32    
  23  0.507274     -0.678705      -3.48202       3.48202       1093.21       1096.69    
  24  0.228591      -1.47582      -7.57153       7.57153       1093.20       1100.77    
  25  0.813037     -0.206978      -1.06188       1.06188       1091.47       1092.53    
  26  0.660021E-02  -5.02065      -25.7579       25.7579       1093.73       1119.49    
  27  0.449216     -0.800252      -4.10560       4.10560       1095.72       1099.83    
  28  0.624836     -0.470267      -2.41265       2.41265       1095.15       1097.56    
  29  0.124036      -2.08718      -10.7081       10.7081       1086.84       1097.55    
  30  0.977322     -0.229386E-01 -0.117684      0.117684       1088.31       1088.43    
  31  0.362007      -1.01609      -5.21295       5.21295       1096.52       1101.73    
  32  0.433687     -0.835432      -4.28609       4.28609       1103.15       1107.43    
  33  0.476592     -0.741094      -3.80210       3.80210       1105.02       1108.82    
  34  0.929976     -0.725968E-01 -0.372450      0.372450       1098.08       1098.45    
  35  0.363976      -1.01067      -5.18512       5.18512       1109.36       1114.54    
  36  0.226804      -1.48367      -7.61179       7.61179       1112.57       1120.18    
  37  0.398930     -0.918968      -4.71466       4.71466       1113.18       1117.89    
  38  0.303955      -1.19087      -6.10965       6.10965       1117.25       1123.36    
  39  0.452647     -0.792643      -4.06656       4.06656       1114.72       1118.79    
  40  0.366024      -1.00506      -5.15632       5.15632       1094.75       1099.90    
  41  0.995807     -0.420220E-02 -0.215589E-01  0.215589E-01   1116.05       1116.07    
  42  0.796944     -0.226970      -1.16445       1.16445       1111.55       1112.71    
  43  0.884128     -0.123153     -0.631823      0.631823       1119.93       1120.56    
  44  0.710294     -0.342076      -1.75498       1.75498       1121.79       1123.54    
  45  0.603169     -0.505558      -2.59371       2.59371       1119.98       1122.57    
  46  0.822382     -0.195551      -1.00325       1.00325       1121.72       1122.72    
  47  0.741673E-01  -2.60143      -13.3463       13.3463       1122.64       1135.99    
  48  0.593116     -0.522366      -2.67994       2.67994       1117.81       1120.49    
  49  0.659441     -0.416363      -2.13610       2.13610       1123.76       1125.90    
loop,thermsimp(1:2)       73  0.739260E-01   4.64105    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    410       1204.50         68.07          1.12         39.06          2.23          0.05        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    411       1091.65         68.07          1.12         39.14          2.19          0.05        110.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1091.65
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       73
neval is:      410
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       74
neval is:      410


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      410     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.354251E-01  -3.34033      -17.1372       17.1372       1033.31       1050.45    
   2  0.121809      -2.10530      -10.8010       10.8010       1045.14       1055.94    
   3  0.686317E-01  -2.67900      -13.7443       13.7443       1052.93       1066.68    
   4  0.529445     -0.635926      -3.26255       3.26255       1057.18       1060.45    
   5  0.829516     -0.186912     -0.958933      0.958933       1057.63       1058.59    
   6  0.418811     -0.870336      -4.46516       4.46516       1062.30       1066.77    
   7  0.353353      -1.04029      -5.33708       5.33708       1062.65       1067.98    
   8  0.720073     -0.328403      -1.68483       1.68483       1055.64       1057.32    
   9  0.797644     -0.226092      -1.15994       1.15994       1067.62       1068.78    
  10  0.521803     -0.650466      -3.33714       3.33714       1066.59       1069.93    
  11  0.900951     -0.104305     -0.535124      0.535124       1074.35       1074.89    
  12  0.801614     -0.221128      -1.13447       1.13447       1077.54       1078.68    
  13  0.796757     -0.227205      -1.16565       1.16565       1077.79       1078.96    
  14  0.716648     -0.333170      -1.70929       1.70929       1080.20       1081.91    
  15  0.690691     -0.370062      -1.89856       1.89856       1068.79       1070.69    
  16  0.462468     -0.771178      -3.95644       3.95644       1077.74       1081.70    
  17  0.896079     -0.109726     -0.562937      0.562937       1073.61       1074.17    
  18  0.351033E-02  -5.65205      -28.9972       28.9972       1087.08       1116.07    
  19  0.195795E-01  -3.93327      -20.1792       20.1792       1088.31       1108.49    
  20  0.285350E-01  -3.55662      -18.2469       18.2469       1083.56       1101.81    
  21  0.345848E-01  -3.36434      -17.2604       17.2604       1089.28       1106.54    
  22  0.344304      -1.06623      -5.47017       5.47017       1091.47       1096.94    
  23  0.251512      -1.38026      -7.08129       7.08129       1088.22       1095.30    
  24  0.389628E-01  -3.24515      -16.6489       16.6489       1093.21       1109.86    
  25  0.338848      -1.08220      -5.55212       5.55212       1086.84       1092.39    
  26  0.383648     -0.958031      -4.91507       4.91507       1095.15       1100.06    
  27  0.877462     -0.130722     -0.670655      0.670655       1098.08       1098.75    
  28  0.383552     -0.958280      -4.91635       4.91635       1087.44       1092.35    
  29  0.835013     -0.180308     -0.925048      0.925048       1095.72       1096.65    
  30  0.733865     -0.309430      -1.58750       1.58750       1094.75       1096.34    
  31  0.288449      -1.24324      -6.37829       6.37829       1093.20       1099.58    
  32  0.927737     -0.750074E-01 -0.384817      0.384817       1096.52       1096.90    
  33  0.505507     -0.682193      -3.49992       3.49992       1103.15       1106.65    
  34  0.909677     -0.946660E-01 -0.485673      0.485673       1105.02       1105.50    
  35  0.786508     -0.240152      -1.23207       1.23207       1111.55       1112.78    
  36  0.186545      -1.67908      -8.61434       8.61434       1109.36       1117.97    
  37  0.917771     -0.858077E-01 -0.440226      0.440226       1116.05       1116.49    
  38  0.223043      -1.50039      -7.69758       7.69758       1113.18       1120.87    
  39  0.416209     -0.876568      -4.49713       4.49713       1114.72       1119.22    
  40  0.742048     -0.298341      -1.53061       1.53061       1093.73       1095.26    
  41  0.916531     -0.871589E-01 -0.447159      0.447159       1112.57       1113.01    
  42  0.528872     -0.637009      -3.26810       3.26810       1117.81       1121.07    
  43  0.380167     -0.967145      -4.96183       4.96183       1119.93       1124.89    
  44  0.147221      -1.91582      -9.82890       9.82890       1119.98       1129.81    
  45  0.325715      -1.12173      -5.75492       5.75492       1121.72       1127.47    
  46  0.653191     -0.425886      -2.18496       2.18496       1117.25       1119.44    
  47  0.734482     -0.308590      -1.58319       1.58319       1121.79       1123.37    
  48  0.812100E-01  -2.51072      -12.8810       12.8810       1123.76       1136.65    
  49  0.981448     -0.187266E-01 -0.960746E-01  0.960746E-01   1091.65       1091.74    
loop,thermsimp(1:2)       74   17.1372       10.8010    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    412       1119.75         68.06          1.13         38.88          2.65          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1119.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       74
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       75
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      411     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.825653E-01  -2.49417      -12.7960       12.7960       1033.31       1046.11    
   2  0.822278     -0.195677      -1.00390       1.00390       1045.14       1046.15    
   3  0.815014     -0.204550      -1.04942       1.04942       1055.64       1056.69    
   4  0.207771      -1.57132      -8.06146       8.06146       1057.63       1065.69    
   5  0.392022E-01  -3.23902      -16.6174       16.6174       1057.18       1073.80    
   6  0.798009     -0.225635      -1.15759       1.15759       1052.93       1054.09    
   7  0.946935     -0.545251E-01 -0.279735      0.279735       1062.30       1062.58    
   8  0.143106      -1.94417      -9.97434       9.97434       1062.65       1072.62    
   9  0.485966     -0.721616      -3.70217       3.70217       1067.62       1071.32    
  10  0.789895     -0.235855      -1.21003       1.21003       1066.59       1067.80    
  11  0.191154      -1.65468      -8.48912       8.48912       1068.79       1077.28    
  12  0.556941     -0.585297      -3.00280       3.00280       1073.61       1076.61    
  13  0.354923      -1.03585      -5.31434       5.31434       1074.35       1079.67    
  14  0.206912      -1.57546      -8.08272       8.08272       1077.54       1085.62    
  15  0.295054E-01  -3.52318      -18.0753       18.0753       1077.79       1095.87    
  16  0.531987     -0.631135      -3.23797       3.23797       1077.74       1080.98    
  17  0.552837     -0.592692      -3.04074       3.04074       1080.20       1083.24    
  18  0.230971      -1.46546      -7.51838       7.51838       1091.65       1099.17    
  19  0.879168     -0.128779     -0.660688      0.660688       1087.44       1088.10    
  20  0.463297     -0.769387      -3.94725       3.94725       1086.84       1090.79    
  21  0.405031     -0.903792      -4.63680       4.63680       1093.73       1098.37    
  22  0.297262      -1.21314      -6.22389       6.22389       1088.22       1094.44    
  23  0.418772     -0.870430      -4.46564       4.46564       1094.75       1099.21    
  24  0.596068     -0.517401      -2.65446       2.65446       1095.72       1098.38    
  25  0.720685     -0.327553      -1.68047       1.68047       1096.52       1098.20    
  26  0.756772     -0.278694      -1.42981       1.42981       1091.47       1092.90    
  27  0.231133      -1.46476      -7.51478       7.51478       1098.08       1105.60    
  28  0.783190     -0.244381      -1.25377       1.25377       1093.20       1094.45    
  29  0.913865     -0.900727E-01 -0.462108      0.462108       1095.15       1095.61    
  30  0.690716     -0.370027      -1.89838       1.89838       1083.56       1085.46    
  31  0.187671      -1.67306      -8.58347       8.58347       1105.02       1113.60    
  32  0.558859     -0.581857      -2.98515       2.98515       1089.28       1092.27    
  33  0.377344     -0.974598      -5.00006       5.00006       1103.15       1108.15    
  34  0.800863     -0.222065      -1.13928       1.13928       1088.31       1089.45    
  35  0.717668     -0.331748      -1.70200       1.70200       1093.21       1094.91    
  36  0.408710     -0.894749      -4.59041       4.59041       1111.55       1116.14    
  37  0.744828     -0.294602      -1.51142       1.51142       1112.57       1114.08    
  38  0.366523      -1.00369      -5.14933       5.14933       1087.08       1092.23    
  39  0.558103     -0.583212      -2.99210       2.99210       1116.05       1119.04    
  40  0.993425     -0.659714E-02 -0.338459E-01  0.338459E-01   1109.36       1109.39    
  41  0.892238     -0.114023     -0.584980      0.584980       1114.72       1115.31    
  42  0.527869     -0.638907      -3.27784       3.27784       1117.25       1120.53    
  43  0.805965     -0.215715      -1.10670       1.10670       1113.18       1114.28    
  44  0.425337     -0.854872      -4.38583       4.38583       1117.81       1122.19    
  45  0.553214     -0.592011      -3.03724       3.03724       1121.79       1124.82    
  46  0.961775     -0.389749E-01 -0.199956      0.199956       1119.93       1120.13    
  47  0.721793     -0.326017      -1.67260       1.67260       1121.72       1123.39    
  48  0.734528     -0.308527      -1.58286       1.58286       1119.98       1121.56    
  49  0.838033E-03  -7.08445      -36.3460       36.3460       1119.75       1156.09    
loop,thermsimp(1:2)       75   12.7960       1.00390    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413       1123.76         68.11          1.12         39.21          2.18          0.04        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1123.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       75
neval is:      412
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       76
neval is:      412


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      412     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316695      -1.14982      -5.89901       5.89901       1033.31       1039.21    
   2  0.382504     -0.961016      -4.93038       4.93038       1045.14       1050.07    
   3  0.264614      -1.32948      -6.82076       6.82076       1052.93       1059.75    
   4  0.803265     -0.219071      -1.12392       1.12392       1055.64       1056.76    
   5  0.171034      -1.76589      -9.05970       9.05970       1062.30       1071.36    
   6  0.831601     -0.184402     -0.946055      0.946055       1057.63       1058.58    
   7  0.435344     -0.831619      -4.26652       4.26652       1066.59       1070.86    
   8  0.709095     -0.343766      -1.76365       1.76365       1067.62       1069.38    
   9  0.787618     -0.238742      -1.22484       1.22484       1062.65       1063.87    
  10  0.848523E-01  -2.46684      -12.6559       12.6559       1057.18       1069.84    
  11  0.863403     -0.146874     -0.753521      0.753521       1073.61       1074.37    
  12  0.852899E-04  -9.36945      -48.0689       48.0689       1068.79       1116.86    
  13  0.221667      -1.50658      -7.72933       7.72933       1074.35       1082.08    
  14  0.474061E-01  -3.04901      -15.6426       15.6426       1077.74       1093.38    
  15  0.175322      -1.74113      -8.93268       8.93268       1080.20       1089.14    
  16  0.154041      -1.87053      -9.59657       9.59657       1083.56       1093.16    
  17  0.808967     -0.211997      -1.08762       1.08762       1077.54       1078.63    
  18  0.790119     -0.235572      -1.20857       1.20857       1087.44       1088.65    
  19  0.996800     -0.320514E-02 -0.164436E-01  0.164436E-01   1088.31       1088.33    
  20  0.238948      -1.43151      -7.34420       7.34420       1086.84       1094.19    
  21  0.829852     -0.186508     -0.956860      0.956860       1087.08       1088.03    
  22  0.582759     -0.539981      -2.77031       2.77031       1089.28       1092.05    
  23  0.284746      -1.25616      -6.44458       6.44458       1091.47       1097.91    
  24  0.360633      -1.01989      -5.23245       5.23245       1088.22       1093.45    
  25  0.941077     -0.607306E-01 -0.311571      0.311571       1093.20       1093.51    
  26  0.383331     -0.958856      -4.91930       4.91930       1093.21       1098.13    
  27  0.523735     -0.646770      -3.31818       3.31818       1095.15       1098.46    
  28  0.481378     -0.731103      -3.75084       3.75084       1077.79       1081.54    
  29  0.841845     -0.172159     -0.883244      0.883244       1096.52       1097.40    
  30  0.178872      -1.72108      -8.82983       8.82983       1093.73       1102.56    
  31  0.873649     -0.135077     -0.692996      0.692996       1095.72       1096.42    
  32  0.805285     -0.216559      -1.11103       1.11103       1091.65       1092.76    
  33  0.945892E-01  -2.35821      -12.0985       12.0985       1094.75       1106.85    
  34  0.976997     -0.232719E-01 -0.119394      0.119394       1098.08       1098.20    
  35  0.347817      -1.05608      -5.41810       5.41810       1103.15       1108.56    
  36  0.443928     -0.812092      -4.16635       4.16635       1109.36       1113.52    
  37  0.818184     -0.200668      -1.02951       1.02951       1105.02       1106.05    
  38  0.849587     -0.163005     -0.836277      0.836277       1112.57       1113.40    
  39  0.809085E-01  -2.51444      -12.9000       12.9000       1113.18       1126.08    
  40  0.808062     -0.213117      -1.09337       1.09337       1114.72       1115.82    
  41  0.663621     -0.410044      -2.10368       2.10368       1111.55       1113.65    
  42  0.466900     -0.761639      -3.90750       3.90750       1116.05       1119.95    
  43  0.948620     -0.527466E-01 -0.270610      0.270610       1119.93       1120.20    
  44  0.274490      -1.29284      -6.63277       6.63277       1117.25       1123.89    
  45  0.928375E-01  -2.37690      -12.1944       12.1944       1119.98       1132.17    
  46  0.983714     -0.164200E-01 -0.842410E-01  0.842410E-01   1117.81       1117.89    
  47  0.424265     -0.857398      -4.39878       4.39878       1121.72       1126.11    
  48  0.534428     -0.626558      -3.21449       3.21449       1121.79       1125.00    
  49  0.511115E-01  -2.97374      -15.2565       15.2565       1123.76       1139.02    
loop,thermsimp(1:2)       76   5.89901       4.93038    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    414       1119.75         68.10          1.13         38.84          2.55          0.04        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1119.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       76
neval is:      413
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       77
neval is:      413


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      413     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807533     -0.213771      -1.09673       1.09673       1033.31       1034.41    
   2  0.906511     -0.981526E-01 -0.503561      0.503561       1045.14       1045.65    
   3  0.121906      -2.10450      -10.7969       10.7969       1055.64       1066.43    
   4  0.849960     -0.162566     -0.834028      0.834028       1057.63       1058.46    
   5  0.268960      -1.31319      -6.73719       6.73719       1052.93       1059.67    
   6  0.475959     -0.742424      -3.80892       3.80892       1062.65       1066.46    
   7  0.359795      -1.02222      -5.24439       5.24439       1067.62       1072.86    
   8  0.411175     -0.888736      -4.55956       4.55956       1057.18       1061.74    
   9  0.381099     -0.964695      -4.94926       4.94926       1066.59       1071.54    
  10  0.390615     -0.940033      -4.82273       4.82273       1062.30       1067.12    
  11  0.758954     -0.275815      -1.41504       1.41504       1073.61       1075.03    
  12  0.476320     -0.741666      -3.80503       3.80503       1077.54       1081.35    
  13  0.658674     -0.417527      -2.14207       2.14207       1077.79       1079.93    
  14  0.324645      -1.12502      -5.77180       5.77180       1074.35       1080.12    
  15  0.388092     -0.946513      -4.85598       4.85598       1087.08       1091.93    
  16  0.910971     -0.932447E-01 -0.478381      0.478381       1088.31       1088.79    
  17  0.170451E-01  -4.07189      -20.8904       20.8904       1087.44       1108.33    
  18  0.361549      -1.01736      -5.21944       5.21944       1080.20       1085.42    
  19  0.134057      -2.00949      -10.3095       10.3095       1089.28       1099.59    
  20  0.241841      -1.41948      -7.28246       7.28246       1091.65       1098.93    
  21  0.933265     -0.690659E-01 -0.354335      0.354335       1083.56       1083.92    
  22  0.142292      -1.94987      -10.0036       10.0036       1077.74       1087.74    
  23  0.557913     -0.583552      -2.99385       2.99385       1088.22       1091.21    
  24  0.606116     -0.500684      -2.56870       2.56870       1093.20       1095.77    
  25  0.802619     -0.219875      -1.12804       1.12804       1086.84       1087.97    
  26  0.828050E-02  -4.79385      -24.5943       24.5943       1095.72       1120.32    
  27  0.736740E-01  -2.60811      -13.3806       13.3806       1096.52       1109.90    
  28  0.772368     -0.258294      -1.32515       1.32515       1091.47       1092.79    
  29  0.164353      -1.80574      -9.26413       9.26413       1093.21       1102.47    
  30  0.305683      -1.18521      -6.08058       6.08058       1098.08       1104.16    
  31  0.490685     -0.711953      -3.65259       3.65259       1095.15       1098.80    
  32  0.796715     -0.227258      -1.16592       1.16592       1093.73       1094.90    
  33  0.416735     -0.875305      -4.49065       4.49065       1105.02       1109.51    
  34  0.336518      -1.08910      -5.58752       5.58752       1094.75       1100.34    
  35  0.410249     -0.890990      -4.57112       4.57112       1103.15       1107.72    
  36  0.765564     -0.267142      -1.37054       1.37054       1112.57       1113.94    
  37  0.852656     -0.159399     -0.817779      0.817779       1109.36       1110.18    
  38  0.218548      -1.52075      -7.80203       7.80203       1111.55       1119.35    
  39  0.859169     -0.151790     -0.778739      0.778739       1114.72       1115.50    
  40  0.140392      -1.96332      -10.0726       10.0726       1068.79       1078.86    
  41  0.622846     -0.473456      -2.42901       2.42901       1117.81       1120.23    
  42  0.410234     -0.891028      -4.57132       4.57132       1116.05       1120.62    
  43  0.459429     -0.777770      -3.99026       3.99026       1119.93       1123.92    
  44  0.911803     -0.923309E-01 -0.473693      0.473693       1117.25       1117.73    
  45  0.120848      -2.11322      -10.8416       10.8416       1121.79       1132.63    
  46  0.474460     -0.745577      -3.82510       3.82510       1113.18       1117.00    
  47  0.602073     -0.507376      -2.60304       2.60304       1121.72       1124.32    
  48  0.204387      -1.58774      -8.14572       8.14572       1119.98       1128.13    
  49  0.822244     -0.195718      -1.00411       1.00411       1119.75       1120.75    
loop,thermsimp(1:2)       77   1.09673      0.503561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    415       1126.10         68.07          1.12         38.98          2.33          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1126.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       77
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       78
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      414     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511642     -0.670131      -3.43803       3.43803       1033.31       1036.75    
   2  0.243468      -1.41277      -7.24806       7.24806       1045.14       1052.39    
   3  0.259231      -1.35003      -6.92620       6.92620       1057.63       1064.56    
   4  0.411864     -0.887061      -4.55097       4.55097       1052.93       1057.48    
   5  0.192374      -1.64831      -8.45648       8.45648       1057.18       1065.64    
   6  0.504542     -0.684104      -3.50972       3.50972       1055.64       1059.15    
   7  0.404455E-01  -3.20780      -16.4573       16.4573       1062.65       1079.10    
   8  0.157113      -1.85079      -9.49528       9.49528       1062.30       1071.80    
   9  0.833701     -0.181880     -0.933115      0.933115       1066.59       1067.52    
  10  0.878720     -0.129289     -0.663303      0.663303       1067.62       1068.28    
  11  0.237147      -1.43908      -7.38302       7.38302       1073.61       1080.99    
  12  0.936993     -0.650795E-01 -0.333883      0.333883       1068.79       1069.13    
  13  0.651018     -0.429219      -2.20206       2.20206       1077.79       1079.99    
  14  0.366374      -1.00410      -5.15142       5.15142       1074.35       1079.50    
  15  0.484826E-02  -5.32914      -27.3405       27.3405       1077.54       1104.88    
  16  0.509486     -0.674354      -3.45970       3.45970       1083.56       1087.02    
  17  0.685690     -0.377329      -1.93584       1.93584       1080.20       1082.14    
  18  0.321855E-01  -3.43624      -17.6292       17.6292       1077.74       1095.37    
  19  0.442039     -0.816357      -4.18822       4.18822       1086.84       1091.03    
  20  0.209598      -1.56256      -8.01655       8.01655       1088.31       1096.33    
  21  0.378107     -0.972579      -4.98970       4.98970       1088.22       1093.21    
  22  0.604565     -0.503247      -2.58185       2.58185       1087.08       1089.66    
  23  0.178047      -1.72571      -8.85354       8.85354       1091.47       1100.32    
  24  0.784915     -0.242179      -1.24247       1.24247       1093.73       1094.98    
  25  0.685234     -0.377994      -1.93926       1.93926       1093.20       1095.14    
  26  0.423928     -0.858193      -4.40286       4.40286       1095.15       1099.55    
  27  0.413814E-01  -3.18492      -16.3399       16.3399       1091.65       1107.99    
  28  0.788249     -0.237942      -1.22073       1.22073       1089.28       1090.51    
  29  0.212924      -1.54682      -7.93579       7.93579       1094.75       1102.68    
  30  0.934569     -0.676697E-01 -0.347172      0.347172       1093.21       1093.55    
  31  0.361270      -1.01813      -5.22340       5.22340       1098.08       1103.30    
  32  0.755006     -0.281030      -1.44179       1.44179       1103.15       1104.59    
  33  0.454810     -0.787875      -4.04210       4.04210       1087.44       1091.48    
  34  0.152938      -1.87772      -9.63345       9.63345       1105.02       1114.65    
  35  0.376573     -0.976642      -5.01055       5.01055       1096.52       1101.53    
  36  0.571848E-01  -2.86147      -14.6804       14.6804       1109.36       1124.04    
  37  0.995942     -0.406615E-02 -0.208609E-01  0.208609E-01   1112.57       1112.59    
  38  0.834052     -0.181460     -0.930957      0.930957       1114.72       1115.65    
  39  0.481290     -0.731286      -3.75178       3.75178       1113.18       1116.93    
  40  0.289962E-01  -3.54059      -18.1646       18.1646       1117.25       1135.42    
  41  0.897798     -0.107810     -0.553108      0.553108       1111.55       1112.10    
  42  0.721121     -0.326948      -1.67737       1.67737       1117.81       1119.48    
  43  0.946509     -0.549753E-01 -0.282045      0.282045       1095.72       1096.00    
  44  0.134166      -2.00868      -10.3053       10.3053       1116.05       1126.35    
  45  0.747061     -0.291608      -1.49606       1.49606       1119.75       1121.24    
  46  0.284226      -1.25799      -6.45396       6.45396       1119.93       1126.38    
  47  0.785305     -0.241683      -1.23993       1.23993       1121.72       1122.96    
  48  0.240863      -1.42353      -7.30323       7.30323       1119.98       1127.28    
  49  0.289983      -1.23793      -6.35108       6.35108       1126.10       1132.45    
loop,thermsimp(1:2)       78   3.43803       7.24806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416       1178.94         67.97          1.11         39.20          2.12          0.05        110.45
Just calling func    0   0        110.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    417       1066.36         68.02          1.12         39.01          2.44          0.05        110.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1066.36
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       78
neval is:      416
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       79
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      416     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674234     -0.394178      -2.02229       2.02229       1033.31       1035.33    
   2  0.763241     -0.270181      -1.38613       1.38613       1045.14       1046.53    
   3  0.181180      -1.70826      -8.76406       8.76406       1052.93       1061.70    
   4  0.986466     -0.136262E-01 -0.699078E-01  0.699078E-01   1055.64       1055.71    
   5  0.907914     -0.966062E-01 -0.495627      0.495627       1057.63       1058.13    
   6  0.686562     -0.376058      -1.92932       1.92932       1057.18       1059.11    
   7  0.269744E-01  -3.61287      -18.5354       18.5354       1066.59       1085.13    
   8  0.305757      -1.18497      -6.07933       6.07933       1067.62       1073.70    
   9  0.678790     -0.387443      -1.98773       1.98773       1068.79       1070.78    
  10  0.376044     -0.978048      -5.01776       5.01776       1062.30       1067.32    
  11  0.569163     -0.563589      -2.89143       2.89143       1062.65       1065.54    
  12  0.700219E-02  -4.96153      -25.4546       25.4546       1074.35       1099.81    
  13  0.271434      -1.30403      -6.69020       6.69020       1077.79       1084.48    
  14  0.412709     -0.885014      -4.54046       4.54046       1073.61       1078.15    
  15  0.230294      -1.46840      -7.53345       7.53345       1080.20       1087.74    
  16  0.453167     -0.791494      -4.06067       4.06067       1083.56       1087.62    
  17  0.225846E-01  -3.79049      -19.4467       19.4467       1087.08       1106.52    
  18  0.295035E-01  -3.52324      -18.0756       18.0756       1089.28       1107.36    
  19  0.766595     -0.265797      -1.36364       1.36364       1086.84       1088.21    
  20  0.995962     -0.404634E-02 -0.207593E-01  0.207593E-01   1087.44       1087.46    
  21  0.816964     -0.202160      -1.03716       1.03716       1088.22       1089.25    
  22  0.376195     -0.977647      -5.01571       5.01571       1093.21       1098.22    
  23  0.557992     -0.583410      -2.99312       2.99312       1093.73       1096.73    
  24  0.643422     -0.440955      -2.26227       2.26227       1093.20       1095.46    
  25  0.999852     -0.147642E-03 -0.757460E-03  0.757460E-03   1077.74       1077.74    
  26  0.644170     -0.439793      -2.25631       2.25631       1095.72       1097.98    
  27  0.216981      -1.52794      -7.83894       7.83894       1088.31       1096.15    
  28  0.469613     -0.755845      -3.87778       3.87778       1095.15       1099.02    
  29  0.241394      -1.42133      -7.29195       7.29195       1091.47       1098.76    
  30  0.598509     -0.513314      -2.63350       2.63350       1096.52       1099.15    
  31  0.671670     -0.397989      -2.04184       2.04184       1094.75       1096.79    
  32  0.508456     -0.676377      -3.47008       3.47008       1098.08       1101.55    
  33  0.142355      -1.94943      -10.0013       10.0013       1103.15       1113.15    
  34  0.314602      -1.15645      -5.93302       5.93302       1077.54       1083.48    
  35  0.595792     -0.517863      -2.65684       2.65684       1091.65       1094.30    
  36  0.980752     -0.194358E-01 -0.997131E-01  0.997131E-01   1111.55       1111.65    
  37  0.574834     -0.553674      -2.84056       2.84056       1112.57       1115.41    
  38  0.176457      -1.73468      -8.89956       8.89956       1105.02       1113.92    
  39  0.972462     -0.279243E-01 -0.143262      0.143262       1114.72       1114.87    
  40  0.914299     -0.895977E-01 -0.459671      0.459671       1113.18       1113.64    
  41  0.844829E-01  -2.47121      -12.6782       12.6782       1117.81       1130.48    
  42  0.173441E-01  -4.05450      -20.8012       20.8012       1119.75       1140.55    
  43  0.558790     -0.581981      -2.98579       2.98579       1121.72       1124.70    
  44  0.102972      -2.27330      -11.6629       11.6629       1109.36       1121.02    
  45  0.479128E-01  -3.03837      -15.5880       15.5880       1116.05       1131.63    
  46  0.955710     -0.453003E-01 -0.232408      0.232408       1119.93       1120.16    
  47  0.768826     -0.262891      -1.34873       1.34873       1119.98       1121.33    
  48  0.634123     -0.455512      -2.33695       2.33695       1126.10       1128.44    
  49  0.460722     -0.774961      -3.97585       3.97585       1066.36       1070.33    
loop,thermsimp(1:2)       79   2.02229       1.38613    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418       1120.55         68.06          1.12         39.03          2.21          0.05        110.46
Just calling func    0   0        110.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1120.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       79
neval is:      417
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       80
neval is:      417


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      417     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.684247     -0.379436      -1.94665       1.94665       1033.31       1035.26    
   2  0.345348      -1.06320      -5.45464       5.45464       1045.14       1050.60    
   3  0.950053     -0.512378E-01 -0.262870      0.262870       1055.64       1055.90    
   4  0.837893     -0.176865     -0.907388      0.907388       1057.63       1058.54    
   5  0.333546      -1.09797      -5.63303       5.63303       1057.18       1062.82    
   6  0.161688      -1.82209      -9.34800       9.34800       1052.93       1062.28    
   7  0.617647     -0.481838      -2.47202       2.47202       1062.65       1065.12    
   8  0.401140     -0.913446      -4.68633       4.68633       1062.30       1066.99    
   9  0.358257E-01  -3.32909      -17.0795       17.0795       1066.36       1083.44    
  10  0.349088E-01  -3.35502      -17.2125       17.2125       1068.79       1086.00    
  11  0.152040      -1.88361      -9.66364       9.66364       1067.62       1077.28    
  12  0.703870     -0.351161      -1.80159       1.80159       1077.74       1079.54    
  13  0.550338     -0.597222      -3.06398       3.06398       1073.61       1076.68    
  14  0.320062      -1.13924      -5.84475       5.84475       1077.54       1083.39    
  15  0.842058     -0.171906     -0.881945      0.881945       1077.79       1078.67    
  16  0.872615     -0.136260     -0.699069      0.699069       1066.59       1067.29    
  17  0.687324     -0.374949      -1.92363       1.92363       1087.44       1089.36    
  18  0.707329     -0.346259      -1.77644       1.77644       1083.56       1085.34    
  19  0.781599     -0.246413      -1.26419       1.26419       1080.20       1081.47    
  20  0.257984      -1.35486      -6.95094       6.95094       1086.84       1093.79    
  21  0.624920     -0.470132      -2.41196       2.41196       1088.22       1090.63    
  22  0.816734     -0.202441      -1.03860       1.03860       1091.65       1092.69    
  23  0.740445     -0.300504      -1.54170       1.54170       1093.20       1094.74    
  24  0.433128     -0.836721      -4.29270       4.29270       1088.31       1092.60    
  25  0.964932E-01  -2.33828      -11.9963       11.9963       1093.73       1105.73    
  26  0.336813      -1.08823      -5.58303       5.58303       1094.75       1100.33    
  27  0.631668     -0.459391      -2.35685       2.35685       1095.72       1098.08    
  28  0.173511      -1.75152      -8.98595       8.98595       1093.21       1102.19    
  29  0.714113     -0.336715      -1.72748       1.72748       1091.47       1093.20    
  30  0.856732     -0.154630     -0.793311      0.793311       1095.15       1095.94    
  31  0.871530     -0.137505     -0.705452      0.705452       1096.52       1097.22    
  32  0.524684     -0.644958      -3.30888       3.30888       1074.35       1077.66    
  33  0.199462      -1.61213      -8.27086       8.27086       1098.08       1106.35    
  34  0.848275     -0.164551     -0.844210      0.844210       1087.08       1087.92    
  35  0.836784     -0.178190     -0.914183      0.914183       1089.28       1090.20    
  36  0.478860E-01  -3.03893      -15.5909       15.5909       1111.55       1127.14    
  37  0.297469      -1.21245      -6.22032       6.22032       1103.15       1109.37    
  38  0.649198     -0.432018      -2.21642       2.21642       1113.18       1115.39    
  39  0.657692     -0.419018      -2.14972       2.14972       1105.02       1107.17    
  40  0.684263     -0.379413      -1.94653       1.94653       1114.72       1116.67    
  41  0.249508      -1.38826      -7.12233       7.12233       1112.57       1119.69    
  42  0.745618     -0.293542      -1.50598       1.50598       1119.93       1121.43    
  43  0.338359      -1.08365      -5.55953       5.55953       1109.36       1114.92    
  44  0.472339     -0.750059      -3.84809       3.84809       1119.98       1123.83    
  45  0.796486     -0.227546      -1.16740       1.16740       1121.72       1122.88    
  46  0.241988      -1.41887      -7.27933       7.27933       1126.10       1133.38    
  47  0.162775      -1.81539      -9.31363       9.31363       1117.81       1127.12    
  48  0.749633     -0.288171      -1.47843       1.47843       1116.05       1117.53    
  49  0.942194     -0.595438E-01 -0.305483      0.305483       1120.55       1120.85    
loop,thermsimp(1:2)       80   1.94665       5.45464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    419       1120.69         68.08          1.12         39.01          2.35          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1120.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       80
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       81
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      418     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.212099      -1.55070      -7.95570       7.95570       1033.31       1041.27    
   2  0.790720E-01  -2.53740      -13.0178       13.0178       1045.14       1058.16    
   3  0.474562     -0.745363      -3.82400       3.82400       1055.64       1059.46    
   4  0.898144E-01  -2.41001      -12.3643       12.3643       1057.63       1070.00    
   5  0.458101     -0.780666      -4.00512       4.00512       1052.93       1056.94    
   6  0.931196     -0.712852E-01 -0.365720      0.365720       1057.18       1057.55    
   7  0.205708      -1.58130      -8.11266       8.11266       1062.65       1070.76    
   8  0.733185     -0.310357      -1.59225       1.59225       1062.30       1063.89    
   9  0.169450      -1.77520      -9.10746       9.10746       1066.59       1075.70    
  10  0.474919     -0.744612      -3.82015       3.82015       1073.61       1077.43    
  11  0.843615     -0.170059     -0.872466      0.872466       1067.62       1068.49    
  12  0.876719     -0.131569     -0.674998      0.674998       1074.35       1075.03    
  13  0.190440E-01  -3.96100      -20.3215       20.3215       1077.79       1098.11    
  14  0.303072      -1.19379      -6.12458       6.12458       1077.74       1083.86    
  15  0.469764     -0.755525      -3.87613       3.87613       1080.20       1084.08    
  16  0.571967     -0.558673      -2.86621       2.86621       1077.54       1080.41    
  17  0.672551E-01  -2.69926      -13.8483       13.8483       1066.36       1080.21    
  18  0.255734      -1.36362      -6.99589       6.99589       1083.56       1090.56    
  19  0.984593E-01  -2.31811      -11.8928       11.8928       1068.79       1080.68    
  20  0.106790      -2.23689      -11.4761       11.4761       1087.08       1098.55    
  21  0.569872     -0.562343      -2.88504       2.88504       1087.44       1090.32    
  22  0.535167     -0.625176      -3.20739       3.20739       1089.28       1092.49    
  23  0.874592     -0.133997     -0.687458      0.687458       1088.22       1088.90    
  24  0.437299     -0.827137      -4.24353       4.24353       1088.31       1092.55    
  25  0.859028     -0.151954     -0.779582      0.779582       1091.65       1092.43    
  26  0.766029     -0.266535      -1.36743       1.36743       1091.47       1092.84    
  27  0.702099     -0.353680      -1.81452       1.81452       1086.84       1088.66    
  28  0.161598      -1.82264      -9.35086       9.35086       1093.20       1102.55    
  29  0.212172      -1.55036      -7.95393       7.95393       1095.15       1103.10    
  30  0.776087     -0.253491      -1.30051       1.30051       1096.52       1097.82    
  31  0.346547      -1.05974      -5.43686       5.43686       1095.72       1101.16    
  32  0.175995      -1.73730      -8.91301       8.91301       1094.75       1103.66    
  33  0.310769      -1.16870      -5.99590       5.99590       1093.21       1099.20    
  34  0.716675     -0.333133      -1.70910       1.70910       1093.73       1095.44    
  35  0.977373E-01  -2.32547      -11.9306       11.9306       1098.08       1110.01    
  36  0.191888      -1.65084      -8.46946       8.46946       1105.02       1113.49    
  37  0.323564      -1.12836      -5.78892       5.78892       1103.15       1108.94    
  38  0.289367      -1.24006      -6.36198       6.36198       1109.36       1115.72    
  39  0.209149      -1.56471      -8.02756       8.02756       1113.18       1121.20    
  40  0.879527     -0.128371     -0.658594      0.658594       1114.72       1115.38    
  41  0.148061      -1.91013      -9.79971       9.79971       1116.05       1125.85    
  42  0.432943     -0.837149      -4.29490       4.29490       1112.57       1116.86    
  43  0.558965     -0.581668      -2.98418       2.98418       1120.55       1123.53    
  44  0.496743     -0.699682      -3.58964       3.58964       1119.93       1123.52    
  45  0.791585     -0.233718      -1.19906       1.19906       1121.72       1122.92    
  46  0.394764E-01  -3.23205      -16.5817       16.5817       1119.98       1136.56    
  47  0.665239E-01  -2.71019      -13.9043       13.9043       1117.81       1131.71    
  48  0.309823      -1.17176      -6.01156       6.01156       1111.55       1117.56    
  49  0.121985      -2.10386      -10.7936       10.7936       1120.69       1131.48    
loop,thermsimp(1:2)       81   7.95570       13.0178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420       1119.35         68.10          1.11         39.02          2.40          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1119.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       81
neval is:      419
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       82
neval is:      419


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      419     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.879977     -0.127859     -0.655966      0.655966       1033.31       1033.97    
   2  0.617618     -0.481886      -2.47226       2.47226       1052.93       1055.41    
   3  0.816358E-01  -2.50549      -12.8541       12.8541       1057.18       1070.04    
   4  0.265705      -1.32537      -6.79966       6.79966       1045.14       1051.94    
   5  0.156102      -1.85725      -9.52840       9.52840       1055.64       1065.16    
   6  0.155187      -1.86313      -9.55855       9.55855       1062.30       1071.86    
   7  0.650347     -0.430249      -2.20734       2.20734       1067.62       1069.82    
   8  0.801207     -0.221636      -1.13708       1.13708       1057.63       1058.77    
   9  0.935908     -0.662378E-01 -0.339826      0.339826       1062.65       1062.99    
  10  0.764783E-01  -2.57075      -13.1889       13.1889       1074.35       1087.54    
  11  0.819025     -0.199640      -1.02423       1.02423       1066.59       1067.61    
  12  0.175545      -1.73986      -8.92616       8.92616       1073.61       1082.54    
  13  0.945804     -0.557201E-01 -0.285866      0.285866       1066.36       1066.64    
  14  0.254592      -1.36809      -7.01884       7.01884       1077.54       1084.56    
  15  0.969942     -0.305188E-01 -0.156573      0.156573       1068.79       1068.95    
  16  0.751504     -0.285679      -1.46564       1.46564       1077.74       1079.21    
  17  0.129569E-01  -4.34612      -22.2973       22.2973       1080.20       1102.50    
  18  0.591393     -0.525275      -2.69486       2.69486       1086.84       1089.54    
  19  0.994087     -0.593042E-02 -0.304254E-01  0.304254E-01   1088.22       1088.25    
  20  0.697601     -0.360108      -1.84749       1.84749       1087.44       1089.29    
  21  0.633469     -0.456544      -2.34224       2.34224       1083.56       1085.90    
  22  0.391583     -0.937557      -4.81003       4.81003       1091.65       1096.46    
  23  0.599575     -0.511533      -2.62436       2.62436       1089.28       1091.91    
  24  0.481571     -0.730701      -3.74878       3.74878       1088.31       1092.06    
  25  0.420827     -0.865533      -4.44052       4.44052       1091.47       1095.91    
  26  0.254691      -1.36770      -7.01685       7.01685       1093.73       1100.75    
  27  0.950472     -0.507971E-01 -0.260609      0.260609       1096.52       1096.78    
  28  0.113706      -2.17414      -11.1542       11.1542       1077.79       1088.95    
  29  0.172661      -1.75643      -9.01115       9.01115       1087.08       1096.09    
  30  0.718739     -0.330257      -1.69435       1.69435       1093.21       1094.90    
  31  0.564748     -0.571375      -2.93137       2.93137       1095.72       1098.65    
  32  0.638696     -0.448327      -2.30009       2.30009       1093.20       1095.50    
  33  0.342849      -1.07047      -5.49191       5.49191       1095.15       1100.64    
  34  0.401270     -0.913121      -4.68466       4.68466       1094.75       1099.43    
  35  0.918599     -0.849058E-01 -0.435600      0.435600       1103.15       1103.58    
  36  0.566118     -0.568953      -2.91895       2.91895       1098.08       1101.00    
  37  0.187554      -1.67369      -8.58667       8.58667       1105.02       1113.61    
  38  0.749582E-01  -2.59082      -13.2919       13.2919       1114.72       1128.01    
  39  0.286085      -1.25147      -6.42051       6.42051       1109.36       1115.78    
  40  0.412337     -0.885914      -4.54508       4.54508       1112.57       1117.11    
  41  0.455811     -0.785678      -4.03083       4.03083       1111.55       1115.58    
  42  0.676067     -0.391462      -2.00835       2.00835       1113.18       1115.18    
  43  0.452490     -0.792991      -4.06835       4.06835       1121.72       1125.78    
  44  0.131068E-01  -4.33463      -22.2383       22.2383       1119.93       1142.17    
  45  0.880822     -0.126900     -0.651045      0.651045       1120.55       1121.20    
  46  0.381257E-01  -3.26687      -16.7603       16.7603       1116.05       1132.81    
  47  0.285013      -1.25522      -6.43977       6.43977       1120.69       1127.13    
  48  0.279597      -1.27441      -6.53820       6.53820       1117.81       1124.34    
  49  0.652608     -0.426779      -2.18954       2.18954       1119.35       1121.54    
loop,thermsimp(1:2)       82  0.655966       2.47226    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    421       1073.62         68.08          1.12         39.01          2.25          0.04        110.49
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    1073.6        3.088     -3.331      4.574     -102.6     0.5459    
                     -0.3091     0.5847     -99.70      4.590      2.378    

                       3.053     -1.612      1.914      7077.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.655      0.000      0.000      7000.      396.3    

                      -1.238     -7.594     -7.635     -7.766      9.458    

                      -4.257     -3.949      4000.      0.000      8533.    



                       2203.      6186.      7154.      1756.      7089.    

                       4682.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.985     -1.650     -2.201     -2.201    -0.3807    

                     -0.3252      9.558      8.525    -0.1602E+05 -5.070    

                     -0.2674     -2.252      9.028      9.077    -0.1969E+05



                      -6.000     0.4003    -0.1372      8.979      8.977    

                     -0.1944E+05 -6.000     -1.140    -0.7022      9.673    

                       9.471    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1073.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       82
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       83
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      420     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.552115     -0.593999      -3.04744       3.04744       1033.31       1036.36    
   2  0.319086      -1.14229      -5.86041       5.86041       1045.14       1051.00    
   3  0.987809     -0.122656E-01 -0.629273E-01  0.629273E-01   1052.93       1053.00    
   4  0.730684     -0.313774      -1.60978       1.60978       1057.63       1059.24    
   5  0.330217      -1.10801      -5.68449       5.68449       1062.65       1068.33    
   6  0.228208      -1.47750      -7.58012       7.58012       1055.64       1063.22    
   7  0.531449     -0.632148      -3.24316       3.24316       1066.36       1069.60    
   8  0.291369      -1.23317      -6.32662       6.32662       1066.59       1072.92    
   9  0.868373     -0.141133     -0.724069      0.724069       1068.79       1069.52    
  10  0.750840     -0.286563      -1.47018       1.47018       1067.62       1069.09    
  11  0.922302     -0.808828E-01 -0.414960      0.414960       1057.18       1057.60    
  12  0.835004     -0.180318     -0.925102      0.925102       1062.30       1063.23    
  13  0.839915     -0.174454     -0.895019      0.895019       1077.74       1078.64    
  14  0.436966     -0.827899      -4.24744       4.24744       1073.61       1077.86    
  15  0.960108     -0.407096E-01 -0.208856      0.208856       1077.54       1077.75    
  16  0.651732     -0.428122      -2.19643       2.19643       1083.56       1085.76    
  17  0.309700      -1.17215      -6.01358       6.01358       1074.35       1080.37    
  18  0.526921     -0.640704      -3.28706       3.28706       1088.22       1091.50    
  19  0.853737     -0.158132     -0.811278      0.811278       1077.79       1078.60    
  20  0.266678      -1.32171      -6.78089       6.78089       1087.44       1094.22    
  21  0.299571      -1.20541      -6.18419       6.18419       1086.84       1093.03    
  22  0.846742     -0.166360     -0.853489      0.853489       1089.28       1090.14    
  23  0.818359     -0.200455      -1.02841       1.02841       1088.31       1089.34    
  24  0.234883      -1.44867      -7.43223       7.43223       1093.21       1100.64    
  25  0.986151     -0.139454E-01 -0.715453E-01  0.715453E-01   1093.20       1093.27    
  26  0.974313     -0.260229E-01 -0.133507      0.133507       1091.47       1091.60    
  27  0.620281E-01  -2.78017      -14.2633       14.2633       1087.08       1101.34    
  28  0.368305E-01  -3.30143      -16.9376       16.9376       1091.65       1108.58    
  29  0.111356      -2.19502      -11.2613       11.2613       1096.52       1107.78    
  30  0.617410     -0.482223      -2.47399       2.47399       1095.72       1098.20    
  31  0.275412      -1.28949      -6.61557       6.61557       1094.75       1101.36    
  32  0.173447      -1.75188      -8.98784       8.98784       1095.15       1104.13    
  33  0.570479     -0.561280      -2.87958       2.87958       1093.73       1096.61    
  34  0.359525      -1.02297      -5.24824       5.24824       1098.08       1103.33    
  35  0.933691     -0.686097E-01 -0.351994      0.351994       1080.20       1080.56    
  36  0.510279     -0.672797      -3.45171       3.45171       1103.15       1106.60    
  37  0.347312      -1.05753      -5.42555       5.42555       1105.02       1110.44    
  38  0.491006E-01  -3.01388      -15.4624       15.4624       1113.18       1128.64    
  39  0.410429     -0.890552      -4.56888       4.56888       1111.55       1116.12    
  40  0.344238      -1.06642      -5.47116       5.47116       1109.36       1114.83    
  41  0.472799     -0.749085      -3.84309       3.84309       1112.57       1116.41    
  42  0.785791     -0.241064      -1.23675       1.23675       1120.55       1121.78    
  43  0.925744     -0.771577E-01 -0.395849      0.395849       1119.35       1119.75    
  44  0.529151     -0.636482      -3.26540       3.26540       1117.81       1121.07    
  45  0.815207     -0.204313      -1.04821       1.04821       1121.72       1122.76    
  46  0.825373     -0.191920     -0.984622      0.984622       1120.69       1121.67    
  47  0.876860     -0.131408     -0.674175      0.674175       1114.72       1115.40    
  48  0.579930     -0.544847      -2.79528       2.79528       1116.05       1118.84    
  49  0.593104     -0.522386      -2.68004       2.68004       1073.62       1076.30    
loop,thermsimp(1:2)       83   3.04744       5.86041    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422       1104.94         68.00          1.12         39.03          2.48          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1104.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       83
neval is:      421
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       84
neval is:      421


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      421     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.379478     -0.968959      -4.97113       4.97113       1033.31       1038.28    
   2  0.957028     -0.439225E-01 -0.225339      0.225339       1045.14       1045.37    
   3  0.360821      -1.01937      -5.22978       5.22978       1052.93       1058.16    
   4  0.115816      -2.15575      -11.0599       11.0599       1057.18       1068.24    
   5  0.739959E-01  -2.60375      -13.3582       13.3582       1057.63       1070.99    
   6  0.618280     -0.480813      -2.46676       2.46676       1055.64       1058.10    
   7  0.885995     -0.121044     -0.621001      0.621001       1062.30       1062.92    
   8  0.635424     -0.453462      -2.32644       2.32644       1062.65       1064.97    
   9  0.807967E-01  -2.51582      -12.9071       12.9071       1067.62       1080.52    
  10  0.741317     -0.299327      -1.53566       1.53566       1068.79       1070.33    
  11  0.226644      -1.48438      -7.61542       7.61542       1066.36       1073.97    
  12  0.538747     -0.618510      -3.17320       3.17320       1066.59       1069.76    
  13  0.161559      -1.82289      -9.35211       9.35211       1073.62       1082.98    
  14  0.460148     -0.776207      -3.98224       3.98224       1077.54       1081.52    
  15  0.747711     -0.290739      -1.49160       1.49160       1073.61       1075.10    
  16  0.780108E-01  -2.55091      -13.0871       13.0871       1077.79       1090.88    
  17  0.966572     -0.339994E-01 -0.174430      0.174430       1077.74       1077.91    
  18  0.724118     -0.322802      -1.65610       1.65610       1074.35       1076.01    
  19  0.558090     -0.583236      -2.99222       2.99222       1080.20       1083.20    
  20  0.646658     -0.435938      -2.23653       2.23653       1083.56       1085.80    
  21  0.667537     -0.404161      -2.07350       2.07350       1088.31       1090.38    
  22  0.526422     -0.641653      -3.29193       3.29193       1089.28       1092.58    
  23  0.429996     -0.843979      -4.32994       4.32994       1088.22       1092.55    
  24  0.795573     -0.228692      -1.17328       1.17328       1091.47       1092.64    
  25  0.102698      -2.27597      -11.6766       11.6766       1086.84       1098.52    
  26  0.727545     -0.318079      -1.63187       1.63187       1093.20       1094.83    
  27  0.266601      -1.32200      -6.78238       6.78238       1087.44       1094.22    
  28  0.867357     -0.142304     -0.730076      0.730076       1093.73       1094.46    
  29  0.850002     -0.162516     -0.833772      0.833772       1095.72       1096.56    
  30  0.495621     -0.701943      -3.60124       3.60124       1093.21       1096.81    
  31  0.321507      -1.13474      -5.82163       5.82163       1087.08       1092.90    
  32  0.250033E-01  -3.68875      -18.9247       18.9247       1094.75       1113.67    
  33  0.191559      -1.65256      -8.47828       8.47828       1098.08       1106.56    
  34  0.256845E-01  -3.66187      -18.7868       18.7868       1095.15       1113.93    
  35  0.116644E-01  -4.45121      -22.8364       22.8364       1103.15       1125.98    
  36  0.467566     -0.760214      -3.90019       3.90019       1096.52       1100.42    
  37  0.267525      -1.31854      -6.76464       6.76464       1091.65       1098.41    
  38  0.657917     -0.418676      -2.14797       2.14797       1105.02       1107.17    
  39  0.396760     -0.924425      -4.74266       4.74266       1109.36       1114.10    
  40  0.296989E-01  -3.51664      -18.0417       18.0417       1114.72       1132.76    
  41  0.609352     -0.495360      -2.54139       2.54139       1111.55       1114.09    
  42  0.472240     -0.750268      -3.84916       3.84916       1112.57       1116.42    
  43  0.537782     -0.620302      -3.18239       3.18239       1116.05       1119.23    
  44  0.472387     -0.749957      -3.84757       3.84757       1119.35       1123.20    
  45  0.906366     -0.983121E-01 -0.504379      0.504379       1117.81       1118.31    
  46  0.541294     -0.613793      -3.14900       3.14900       1120.69       1123.84    
  47  0.101850      -2.28426      -11.7191       11.7191       1120.55       1132.27    
  48  0.620195     -0.477721      -2.45090       2.45090       1121.72       1124.17    
  49  0.130970      -2.03278      -10.4290       10.4290       1104.94       1115.37    
loop,thermsimp(1:2)       84   4.97113      0.225339    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    423       1087.38         68.09          1.12         39.00          2.46          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1087.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       84
neval is:      422
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       85
neval is:      422


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      422     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.844994     -0.168425     -0.864088      0.864088       1033.31       1034.18    
   2  0.449571E-01  -3.10205      -15.9147       15.9147       1045.14       1061.06    
   3  0.479268     -0.735496      -3.77338       3.77338       1055.64       1059.41    
   4  0.429117     -0.846026      -4.34044       4.34044       1052.93       1057.27    
   5  0.188230      -1.67009      -8.56820       8.56820       1062.30       1070.87    
   6  0.299420      -1.20591      -6.18677       6.18677       1062.65       1068.83    
   7  0.942772     -0.589312E-01 -0.302340      0.302340       1057.18       1057.49    
   8  0.802892E-01  -2.52212      -12.9395       12.9395       1066.59       1079.53    
   9  0.356076      -1.03261      -5.29770       5.29770       1068.79       1074.09    
  10  0.599935     -0.510933      -2.62128       2.62128       1057.63       1060.25    
  11  0.632404     -0.458227      -2.35088       2.35088       1066.36       1068.71    
  12  0.707791     -0.345606      -1.77309       1.77309       1073.61       1075.38    
  13  0.896171     -0.109624     -0.562412      0.562412       1074.35       1074.91    
  14  0.953459     -0.476587E-01 -0.244508      0.244508       1077.74       1077.98    
  15  0.875614     -0.132830     -0.681469      0.681469       1067.62       1068.30    
  16  0.371483     -0.990253      -5.08038       5.08038       1077.54       1082.62    
  17  0.518071     -0.657644      -3.37397       3.37397       1073.62       1077.00    
  18  0.643549     -0.440757      -2.26125       2.26125       1080.20       1082.46    
  19  0.313409      -1.16025      -5.95251       5.95251       1083.56       1089.51    
  20  0.264619      -1.32946      -6.82066       6.82066       1088.31       1095.13    
  21  0.259435      -1.34925      -6.92217       6.92217       1077.79       1084.71    
  22  0.526335     -0.641817      -3.29277       3.29277       1088.22       1091.51    
  23  0.972976E-01  -2.32998      -11.9537       11.9537       1089.28       1101.24    
  24  0.511532     -0.670346      -3.43913       3.43913       1091.47       1094.91    
  25  0.117109      -2.14465      -11.0029       11.0029       1087.08       1098.08    
  26  0.211716      -1.55251      -7.96498       7.96498       1087.44       1095.40    
  27  0.747149     -0.291491      -1.49546       1.49546       1093.73       1095.23    
  28  0.545786     -0.605529      -3.10660       3.10660       1093.20       1096.30    
  29  0.614707     -0.486610      -2.49650       2.49650       1095.72       1098.22    
  30  0.614766     -0.486514      -2.49601       2.49601       1093.21       1095.70    
  31  0.334093      -1.09634      -5.62463       5.62463       1091.65       1097.27    
  32  0.272402      -1.30048      -6.67194       6.67194       1086.84       1093.51    
  33  0.777384     -0.251821      -1.29194       1.29194       1096.52       1097.81    
  34  0.381316     -0.964128      -4.94635       4.94635       1098.08       1103.03    
  35  0.614497     -0.486952      -2.49825       2.49825       1105.02       1107.52    
  36  0.537037     -0.621687      -3.18950       3.18950       1094.75       1097.94    
  37  0.117965      -2.13737      -10.9655       10.9655       1095.15       1106.11    
  38  0.131038      -2.03226      -10.4263       10.4263       1111.55       1121.97    
  39  0.750151E-01  -2.59007      -13.2880       13.2880       1109.36       1122.65    
  40  0.173299      -1.75273      -8.99220       8.99220       1104.94       1113.93    
  41  0.313111      -1.16120      -5.95739       5.95739       1112.57       1118.52    
  42  0.867565     -0.142065     -0.728847      0.728847       1117.81       1118.53    
  43  0.974158E-01  -2.32877      -11.9475       11.9475       1116.05       1127.99    
  44  0.856967     -0.154356     -0.791907      0.791907       1119.35       1120.14    
  45  0.210880      -1.55647      -7.98528       7.98528       1120.69       1128.67    
  46  0.789931     -0.235810      -1.20980       1.20980       1121.72       1122.93    
  47  0.249169E-01  -3.69221      -18.9425       18.9425       1103.15       1122.09    
  48  0.721362     -0.326614      -1.67566       1.67566       1120.55       1122.22    
  49  0.636302     -0.452082      -2.31936       2.31936       1087.38       1089.70    
loop,thermsimp(1:2)       85  0.864088       15.9147    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    424       1131.29         68.06          1.13         39.13          2.33          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    425       1065.60         68.09          1.12         39.14          2.32          0.05        110.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1065.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       85
neval is:      424
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       86
neval is:      424


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      424     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245460E-01  -3.70721      -19.0194       19.0194       1033.31       1052.33    
   2  0.230091      -1.46928      -7.53797       7.53797       1052.93       1060.47    
   3  0.635055     -0.454044      -2.32942       2.32942       1057.18       1059.51    
   4  0.105077      -2.25307      -11.5591       11.5591       1055.64       1067.20    
   5  0.191095      -1.65498      -8.49071       8.49071       1057.63       1066.12    
   6  0.795443     -0.228856      -1.17412       1.17412       1045.14       1046.32    
   7  0.317275      -1.14799      -5.88961       5.88961       1067.62       1073.51    
   8  0.532563     -0.630054      -3.23242       3.23242       1066.36       1069.59    
   9  0.908868E-01  -2.39814      -12.3034       12.3034       1062.65       1074.95    
  10  0.865077E-01  -2.44752      -12.5567       12.5567       1062.30       1074.86    
  11  0.857681E-01  -2.45611      -12.6008       12.6008       1068.79       1081.39    
  12  0.542418     -0.611718      -3.13835       3.13835       1074.35       1077.49    
  13  0.225242      -1.49058      -7.64724       7.64724       1073.61       1081.26    
  14  0.855554E-01  -2.45859      -12.6135       12.6135       1073.62       1086.24    
  15  0.702960E-01  -2.65504      -13.6214       13.6214       1077.74       1091.36    
  16  0.660623     -0.414572      -2.12691       2.12691       1066.59       1068.72    
  17  0.564351     -0.572079      -2.93499       2.93499       1080.20       1083.14    
  18  0.761763     -0.272120      -1.39608       1.39608       1077.54       1078.94    
  19  0.645184     -0.438219      -2.24824       2.24824       1077.79       1080.04    
  20  0.398573     -0.919864      -4.71926       4.71926       1083.56       1088.28    
  21  0.256272E-01  -3.66410      -18.7983       18.7983       1087.38       1106.18    
  22  0.258189      -1.35406      -6.94687       6.94687       1088.22       1095.16    
  23  0.797366     -0.226442      -1.16173       1.16173       1086.84       1088.00    
  24  0.119239E-01  -4.42921      -22.7236       22.7236       1091.47       1114.19    
  25  0.257284E-01  -3.66016      -18.7780       18.7780       1088.31       1107.09    
  26  0.746847     -0.291894      -1.49753       1.49753       1093.73       1095.23    
  27  0.624240     -0.471220      -2.41754       2.41754       1087.44       1089.86    
  28  0.655139     -0.422908      -2.16968       2.16968       1093.21       1095.38    
  29  0.281457      -1.26777      -6.50417       6.50417       1093.20       1099.70    
  30  0.944371     -0.572367E-01 -0.293646      0.293646       1091.65       1091.94    
  31  0.614735     -0.486563      -2.49626       2.49626       1096.52       1099.01    
  32  0.455809     -0.785681      -4.03084       4.03084       1094.75       1098.78    
  33  0.429494     -0.845147      -4.33593       4.33593       1087.08       1091.41    
  34  0.656424     -0.420948      -2.15963       2.15963       1095.72       1097.88    
  35  0.551886     -0.594413      -3.04957       3.04957       1089.28       1092.33    
  36  0.882055     -0.125501     -0.643871      0.643871       1098.08       1098.72    
  37  0.585710E-01  -2.83752      -14.5576       14.5576       1095.15       1109.70    
  38  0.196796      -1.62559      -8.33989       8.33989       1105.02       1113.36    
  39  0.479291     -0.735447      -3.77313       3.77313       1104.94       1108.71    
  40  0.107404      -2.23116      -11.4467       11.4467       1112.57       1124.01    
  41  0.360460      -1.02037      -5.23491       5.23491       1117.81       1123.04    
  42  0.952241     -0.489375E-01 -0.251068      0.251068       1119.35       1119.60    
  43  0.791501     -0.233824      -1.19961       1.19961       1111.55       1112.75    
  44  0.253666      -1.37174      -7.03754       7.03754       1103.15       1110.18    
  45  0.936914     -0.651638E-01 -0.334315      0.334315       1120.55       1120.88    
  46  0.978059     -0.221850E-01 -0.113817      0.113817       1109.36       1109.47    
  47  0.226070E-01  -3.78950      -19.4416       19.4416       1121.72       1141.16    
  48  0.211122      -1.55532      -7.97938       7.97938       1116.05       1124.03    
  49  0.665051     -0.407891      -2.09264       2.09264       1065.60       1067.69    
loop,thermsimp(1:2)       86   19.0194       7.53797    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    426       1139.76         68.03          1.12         39.00          2.32          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    427       1075.47         68.02          1.12         39.04          2.30          0.05        110.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1075.47
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       86
neval is:      426
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       87
neval is:      426


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      426     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.785570     -0.241345      -1.23819       1.23819       1045.14       1046.38    
   2  0.738730E-02  -4.90799      -25.1799       25.1799       1033.31       1058.49    
   3  0.167821      -1.78486      -9.15701       9.15701       1057.18       1066.34    
   4  0.136502      -1.99142      -10.2167       10.2167       1052.93       1063.15    
   5  0.100366      -2.29893      -11.7944       11.7944       1057.63       1069.43    
   6  0.439637     -0.821807      -4.21619       4.21619       1055.64       1059.85    
   7  0.745548     -0.293635      -1.50646       1.50646       1065.60       1067.11    
   8  0.374855     -0.981216      -5.03402       5.03402       1066.59       1071.62    
   9  0.144230      -1.93634      -9.93420       9.93420       1066.36       1076.29    
  10  0.776977     -0.252344      -1.29462       1.29462       1067.62       1068.91    
  11  0.524160E-01  -2.94854      -15.1272       15.1272       1062.30       1077.43    
  12  0.454382     -0.788817      -4.04694       4.04694       1062.65       1066.69    
  13  0.128840      -2.04919      -10.5131       10.5131       1074.35       1084.87    
  14  0.621729     -0.475251      -2.43822       2.43822       1077.54       1079.98    
  15  0.974694     -0.256318E-01 -0.131501      0.131501       1077.79       1077.92    
  16  0.965418     -0.351939E-01 -0.180559      0.180559       1073.61       1073.79    
  17  0.370644     -0.992512      -5.09197       5.09197       1068.79       1073.88    
  18  0.246546      -1.40021      -7.18360       7.18360       1080.20       1087.39    
  19  0.702523E-01  -2.65566      -13.6246       13.6246       1073.62       1087.25    
  20  0.326197E-01  -3.42284      -17.5605       17.5605       1086.84       1104.40    
  21  0.419579     -0.868503      -4.45576       4.45576       1083.56       1088.02    
  22  0.466221     -0.763095      -3.91497       3.91497       1087.44       1091.35    
  23  0.240579      -1.42471      -7.30929       7.30929       1077.74       1085.05    
  24  0.901129     -0.104107     -0.534110      0.534110       1087.08       1087.61    
  25  0.533703     -0.627916      -3.22145       3.22145       1091.65       1094.87    
  26  0.617116     -0.482699      -2.47643       2.47643       1089.28       1091.76    
  27  0.431696     -0.840033      -4.30969       4.30969       1088.22       1092.53    
  28  0.490629     -0.712067      -3.65318       3.65318       1093.73       1097.39    
  29  0.727929     -0.317551      -1.62916       1.62916       1093.21       1094.84    
  30  0.751113     -0.286200      -1.46831       1.46831       1095.72       1097.19    
  31  0.128641      -2.05073      -10.5210       10.5210       1098.08       1108.60    
  32  0.592334E-01  -2.82627      -14.4999       14.4999       1094.75       1109.25    
  33  0.692882     -0.366896      -1.88232       1.88232       1096.52       1098.40    
  34  0.600682     -0.509689      -2.61490       2.61490       1093.20       1095.81    
  35  0.658975     -0.417069      -2.13973       2.13973       1087.38       1089.52    
  36  0.696343     -0.361913      -1.85675       1.85675       1088.31       1090.17    
  37  0.605529     -0.501652      -2.57367       2.57367       1104.94       1107.51    
  38  0.492956     -0.707335      -3.62890       3.62890       1109.36       1112.99    
  39  0.561246     -0.577595      -2.96329       2.96329       1095.15       1098.11    
  40  0.184946E-01  -3.99027      -20.4716       20.4716       1103.15       1123.62    
  41  0.483815     -0.726052      -3.72493       3.72493       1111.55       1115.27    
  42  0.358577      -1.02561      -5.26179       5.26179       1105.02       1110.28    
  43  0.316248E-01  -3.45382      -17.7194       17.7194       1091.47       1109.19    
  44  0.103277      -2.27034      -11.6477       11.6477       1119.35       1131.00    
  45  0.216677      -1.52935      -7.84615       7.84615       1120.55       1128.39    
  46  0.316630      -1.15002      -5.90005       5.90005       1117.81       1123.71    
  47  0.930307     -0.722406E-01 -0.370622      0.370622       1112.57       1112.94    
  48  0.668609     -0.402556      -2.06527       2.06527       1116.05       1118.11    
  49  0.932709     -0.696615E-01 -0.357390      0.357390       1075.47       1075.83    
loop,thermsimp(1:2)       87   1.23819       25.1799    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    428       1129.89         68.09          1.12         38.96          2.95          0.04        111.17
Just calling func    0   0        111.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1129.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       87
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       88
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      427     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507680     -0.677903      -3.47790       3.47790       1045.14       1048.62    
   2  0.790268     -0.235383      -1.20761       1.20761       1033.31       1034.52    
   3  0.317381      -1.14765      -5.88790       5.88790       1055.64       1061.52    
   4  0.767166     -0.265051      -1.35982       1.35982       1052.93       1054.29    
   5  0.313858      -1.15882      -5.94517       5.94517       1057.18       1063.13    
   6  0.251614      -1.37986      -7.07920       7.07920       1062.65       1069.73    
   7  0.948204     -0.531858E-01 -0.272863      0.272863       1065.60       1065.87    
   8  0.747265     -0.291336      -1.49467       1.49467       1067.62       1069.11    
   9  0.264530      -1.32980      -6.82240       6.82240       1057.63       1064.45    
  10  0.879562     -0.128331     -0.658387      0.658387       1066.59       1067.25    
  11  0.158918      -1.83937      -9.43666       9.43666       1073.61       1083.05    
  12  0.409577E-01  -3.19522      -16.3927       16.3927       1068.79       1085.18    
  13  0.832422     -0.183416     -0.940996      0.940996       1075.47       1076.41    
  14  0.930291     -0.722576E-01 -0.370709      0.370709       1066.36       1066.73    
  15  0.301800      -1.19799      -6.14616       6.14616       1062.30       1068.45    
  16  0.990785     -0.925803E-02 -0.474973E-01  0.474973E-01   1077.79       1077.84    
  17  0.328363      -1.11364      -5.71338       5.71338       1077.54       1083.26    
  18  0.938323     -0.636607E-01 -0.326604      0.326604       1074.35       1074.68    
  19  0.975952     -0.243418E-01 -0.124883      0.124883       1077.74       1077.86    
  20  0.459186     -0.778299      -3.99297       3.99297       1073.62       1077.62    
  21  0.540042     -0.616108      -3.16087       3.16087       1080.20       1083.36    
  22  0.543006     -0.610635      -3.13279       3.13279       1087.08       1090.21    
  23  0.733492     -0.309938      -1.59010       1.59010       1083.56       1085.15    
  24  0.451844     -0.794418      -4.07567       4.07567       1087.38       1091.45    
  25  0.753205     -0.283418      -1.45404       1.45404       1088.31       1089.76    
  26  0.701062     -0.355159      -1.82210       1.82210       1087.44       1089.26    
  27  0.878758     -0.129246     -0.663082      0.663082       1089.28       1089.95    
  28  0.378850     -0.970616      -4.97964       4.97964       1088.22       1093.20    
  29  0.963503     -0.371796E-01 -0.190746      0.190746       1093.21       1093.40    
  30  0.637747     -0.449814      -2.30772       2.30772       1091.65       1093.95    
  31  0.869781     -0.139514     -0.715761      0.715761       1093.20       1093.91    
  32  0.753171     -0.283463      -1.45428       1.45428       1095.72       1097.18    
  33  0.526050E-01  -2.94494      -15.1087       15.1087       1093.73       1108.84    
  34  0.243477      -1.41273      -7.24786       7.24786       1095.15       1102.39    
  35  0.519956E-01  -2.95660      -15.1685       15.1685       1096.52       1111.69    
  36  0.530132E-01  -2.93721      -15.0690       15.0690       1086.84       1101.91    
  37  0.521011     -0.651985      -3.34493       3.34493       1104.94       1108.28    
  38  0.536818     -0.622097      -3.19160       3.19160       1098.08       1101.27    
  39  0.452282     -0.793450      -4.07070       4.07070       1091.47       1095.54    
  40  0.824064     -0.193508     -0.992769      0.992769       1094.75       1095.74    
  41  0.432752     -0.837591      -4.29717       4.29717       1105.02       1109.32    
  42  0.639137     -0.447637      -2.29655       2.29655       1112.57       1114.86    
  43  0.200933      -1.60478      -8.23315       8.23315       1109.36       1117.59    
  44  0.195377      -1.63282      -8.37701       8.37701       1111.55       1119.92    
  45  0.487028     -0.719434      -3.69098       3.69098       1116.05       1119.74    
  46  0.434536     -0.833476      -4.27605       4.27605       1103.15       1107.42    
  47  0.779247     -0.249427      -1.27966       1.27966       1117.81       1119.09    
  48  0.245897      -1.40284      -7.19712       7.19712       1120.55       1127.74    
  49  0.510235     -0.672884      -3.45216       3.45216       1129.89       1133.34    
loop,thermsimp(1:2)       88   3.47790       1.20761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429       1119.35         68.01          1.10         39.00          2.35          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1119.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       88
neval is:      428
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       89
neval is:      428


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      428     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880944     -0.126761     -0.650334      0.650334       1033.31       1033.96    
   2  0.678316     -0.388142      -1.99132       1.99132       1045.14       1047.13    
   3  0.135490      -1.99886      -10.2549       10.2549       1052.93       1063.19    
   4  0.362841      -1.01379      -5.20114       5.20114       1055.64       1060.84    
   5  0.288564      -1.24284      -6.37623       6.37623       1057.18       1063.56    
   6  0.722355     -0.325238      -1.66860       1.66860       1057.63       1059.30    
   7  0.978389     -0.218479E-01 -0.112088      0.112088       1065.60       1065.71    
   8  0.883441     -0.123930     -0.635810      0.635810       1066.36       1066.99    
   9  0.537650     -0.620547      -3.18365       3.18365       1066.59       1069.77    
  10  0.945156     -0.564053E-01 -0.289381      0.289381       1062.30       1062.59    
  11  0.902011     -0.103129     -0.529090      0.529090       1067.62       1068.15    
  12  0.953192     -0.479389E-01 -0.245945      0.245945       1062.65       1062.89    
  13  0.287473      -1.24663      -6.39568       6.39568       1074.35       1080.75    
  14  0.403089     -0.908597      -4.66145       4.66145       1075.47       1080.13    
  15  0.441004     -0.818701      -4.20025       4.20025       1073.62       1077.82    
  16  0.639526     -0.447028      -2.29343       2.29343       1077.79       1080.09    
  17  0.380765     -0.965572      -4.95376       4.95376       1077.74       1082.69    
  18  0.659762     -0.415876      -2.13360       2.13360       1073.61       1075.75    
  19  0.375709     -0.978939      -5.02234       5.02234       1077.54       1082.56    
  20  0.963753     -0.369203E-01 -0.189415      0.189415       1080.20       1080.39    
  21  0.550567E-02  -5.20198      -26.6881       26.6881       1083.56       1110.25    
  22  0.406012     -0.901372      -4.62438       4.62438       1068.79       1073.42    
  23  0.718789     -0.330187      -1.69399       1.69399       1087.44       1089.13    
  24  0.634557     -0.454828      -2.33344       2.33344       1088.31       1090.64    
  25  0.531123     -0.632761      -3.24631       3.24631       1089.28       1092.53    
  26  0.839681     -0.174733     -0.896448      0.896448       1087.08       1087.97    
  27  0.404403     -0.905343      -4.64476       4.64476       1087.38       1092.02    
  28  0.364094      -1.01034      -5.18346       5.18346       1088.22       1093.40    
  29  0.195203      -1.63372      -8.38160       8.38160       1093.21       1101.59    
  30  0.895643     -0.110213     -0.565436      0.565436       1093.20       1093.76    
  31  0.350505      -1.04838      -5.37859       5.37859       1091.65       1097.03    
  32  0.246469      -1.40052      -7.18521       7.18521       1091.47       1098.65    
  33  0.491662     -0.709964      -3.64239       3.64239       1094.75       1098.39    
  34  0.570678     -0.560930      -2.87779       2.87779       1095.72       1098.60    
  35  0.127892      -2.05657      -10.5510       10.5510       1098.08       1108.63    
  36  0.671111     -0.398821      -2.04611       2.04611       1086.84       1088.89    
  37  0.492283     -0.708702      -3.63591       3.63591       1095.15       1098.78    
  38  0.784530     -0.242670      -1.24499       1.24499       1103.15       1104.39    
  39  0.804537     -0.217489      -1.11580       1.11580       1104.94       1106.05    
  40  0.951874     -0.493229E-01 -0.253045      0.253045       1093.73       1093.99    
  41  0.860836     -0.149852     -0.768797      0.768797       1105.02       1105.79    
  42  0.441943E-01  -3.11916      -16.0025       16.0025       1096.52       1112.52    
  43  0.863376     -0.146905     -0.753678      0.753678       1112.57       1113.32    
  44  0.717499E-02  -4.93715      -25.3295       25.3295       1109.36       1134.69    
  45  0.257105      -1.35827      -6.96845       6.96845       1117.81       1124.77    
  46  0.834736     -0.180640     -0.926751      0.926751       1116.05       1116.97    
  47  0.406979     -0.898994      -4.61218       4.61218       1111.55       1116.16    
  48  0.751883     -0.285174      -1.46305       1.46305       1120.55       1122.01    
  49  0.426180     -0.852893      -4.37567       4.37567       1119.35       1123.73    
loop,thermsimp(1:2)       89  0.650334       1.99132    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    430       1175.53         68.07          1.13         39.07          2.29          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    431       1075.40         68.08          1.12         39.12          2.26          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1075.40
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       89
neval is:      430
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       90
neval is:      430


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      430     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519767     -0.654376      -3.35720       3.35720       1033.31       1036.67    
   2  0.451273E-03  -7.70344      -39.5216       39.5216       1045.14       1084.66    
   3  0.838605E-01  -2.47860      -12.7162       12.7162       1057.63       1070.35    
   4  0.268196      -1.31604      -6.75179       6.75179       1055.64       1062.39    
   5  0.682721     -0.381669      -1.95811       1.95811       1062.30       1064.26    
   6  0.134603      -2.00542      -10.2886       10.2886       1062.65       1072.94    
   7  0.809634     -0.211173      -1.08340       1.08340       1052.93       1054.02    
   8  0.578058     -0.548081      -2.81187       2.81187       1057.18       1060.00    
   9  0.181348      -1.70734      -8.75929       8.75929       1065.60       1074.36    
  10  0.893989     -0.112062     -0.574919      0.574919       1066.36       1066.93    
  11  0.137049      -1.98742      -10.1962       10.1962       1067.62       1077.81    
  12  0.316319      -1.15100      -5.90510       5.90510       1066.59       1072.50    
  13  0.458104     -0.780660      -4.00509       4.00509       1068.79       1072.80    
  14  0.250826      -1.38300      -7.09530       7.09530       1073.61       1080.71    
  15  0.631289     -0.459992      -2.35994       2.35994       1073.62       1075.98    
  16  0.815448     -0.204018      -1.04669       1.04669       1077.79       1078.84    
  17  0.957573     -0.433532E-01 -0.222419      0.222419       1075.47       1075.69    
  18  0.633470     -0.456542      -2.34224       2.34224       1080.20       1082.55    
  19  0.660593     -0.414617      -2.12714       2.12714       1074.35       1076.48    
  20  0.664533     -0.408671      -2.09664       2.09664       1077.54       1079.64    
  21  0.620837     -0.476686      -2.44558       2.44558       1077.74       1080.19    
  22  0.195138      -1.63405      -8.38331       8.38331       1087.08       1095.46    
  23  0.439070     -0.823096      -4.22280       4.22280       1086.84       1091.07    
  24  0.731595     -0.312528      -1.60339       1.60339       1087.44       1089.04    
  25  0.176973      -1.73176      -8.88460       8.88460       1088.31       1097.19    
  26  0.450618     -0.797135      -4.08961       4.08961       1087.38       1091.47    
  27  0.306042E-01  -3.48662      -17.8877       17.8877       1089.28       1107.17    
  28  0.737213     -0.304879      -1.56414       1.56414       1088.22       1089.78    
  29  0.103939      -2.26395      -11.6150       11.6150       1093.20       1104.81    
  30  0.327275      -1.11695      -5.73041       5.73041       1093.73       1099.46    
  31  0.384261     -0.956434      -4.90687       4.90687       1091.65       1096.55    
  32  0.844251E-01  -2.47189      -12.6818       12.6818       1094.75       1107.43    
  33  0.341620      -1.07406      -5.51032       5.51032       1095.72       1101.23    
  34  0.590291     -0.527140      -2.70443       2.70443       1091.47       1094.17    
  35  0.335291      -1.09276      -5.60627       5.60627       1095.15       1100.75    
  36  0.871923     -0.137055     -0.703143      0.703143       1093.21       1093.91    
  37  0.216579E-01  -3.83238      -19.6616       19.6616       1103.15       1122.81    
  38  0.674344     -0.394015      -2.02145       2.02145       1105.02       1107.04    
  39  0.622707     -0.473679      -2.43016       2.43016       1104.94       1107.37    
  40  0.805084     -0.216809      -1.11231       1.11231       1098.08       1099.19    
  41  0.298614      -1.20860      -6.20060       6.20060       1083.56       1089.76    
  42  0.556750     -0.585639      -3.00455       3.00455       1096.52       1099.52    
  43  0.239374      -1.42973      -7.33506       7.33506       1112.57       1119.90    
  44  0.403553     -0.907447      -4.65555       4.65555       1111.55       1116.20    
  45  0.815210     -0.204309      -1.04819       1.04819       1116.05       1117.10    
  46  0.701880     -0.353993      -1.81612       1.81612       1120.55       1122.36    
  47  0.996873     -0.313153E-02 -0.160660E-01  0.160660E-01   1119.35       1119.37    
  48  0.270799      -1.30638      -6.70223       6.70223       1117.81       1124.51    
  49  0.129999      -2.04023      -10.4671       10.4671       1075.40       1085.86    
loop,thermsimp(1:2)       90   3.35720       39.5216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    432       1057.48         68.09          1.14         39.26          2.28          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1057.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       90
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       91
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      431     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.525961     -0.642528      -3.29642       3.29642       1033.31       1036.61    
   2  0.526989E-01  -2.94316      -15.0995       15.0995       1052.93       1068.03    
   3  0.341680      -1.07388      -5.50942       5.50942       1057.18       1062.69    
   4  0.405255     -0.903238      -4.63396       4.63396       1055.64       1060.27    
   5  0.514563     -0.664437      -3.40882       3.40882       1062.30       1065.71    
   6  0.466000     -0.763569      -3.91741       3.91741       1066.36       1070.28    
   7  0.342846      -1.07047      -5.49194       5.49194       1057.63       1063.12    
   8  0.358671      -1.02535      -5.26044       5.26044       1066.59       1071.85    
   9  0.554031     -0.590534      -3.02967       3.02967       1068.79       1071.82    
  10  0.778335     -0.250599      -1.28567       1.28567       1062.65       1063.93    
  11  0.217304      -1.52646      -7.83133       7.83133       1065.60       1073.43    
  12  0.982801     -0.173486E-01 -0.890049E-01  0.890049E-01   1075.47       1075.56    
  13  0.298897      -1.20766      -6.19575       6.19575       1073.62       1079.82    
  14  0.152611      -1.87986      -9.64443       9.64443       1074.35       1084.00    
  15  0.834186E-01  -2.48388      -12.7433       12.7433       1067.62       1080.36    
  16  0.691361     -0.369093      -1.89359       1.89359       1077.79       1079.69    
  17  0.202495E-01  -3.89963      -20.0066       20.0066       1077.54       1097.55    
  18  0.462938     -0.770162      -3.95123       3.95123       1077.74       1081.69    
  19  0.893654     -0.112436     -0.576843      0.576843       1073.61       1074.19    
  20  0.751255     -0.286010      -1.46734       1.46734       1080.20       1081.67    
  21  0.528256E-02  -5.24334      -26.9004       26.9004       1045.14       1072.04    
  22  0.661719     -0.412914      -2.11841       2.11841       1075.40       1077.52    
  23  0.711098     -0.340945      -1.74918       1.74918       1087.44       1089.19    
  24  0.394814     -0.929342      -4.76788       4.76788       1083.56       1088.33    
  25  0.529459     -0.635899      -3.26241       3.26241       1088.22       1091.48    
  26  0.123125      -2.09456      -10.7459       10.7459       1086.84       1097.59    
  27  0.150045      -1.89682      -9.73141       9.73141       1087.38       1097.11    
  28  0.847587     -0.165361     -0.848368      0.848368       1093.21       1094.05    
  29  0.684633     -0.378873      -1.94376       1.94376       1091.47       1093.41    
  30  0.238386      -1.43386      -7.35627       7.35627       1087.08       1094.43    
  31  0.260935      -1.34348      -6.89259       6.89259       1091.65       1098.54    
  32  0.731525E-01  -2.61521      -13.4170       13.4170       1088.31       1101.73    
  33  0.760028     -0.274400      -1.40778       1.40778       1098.08       1099.49    
  34  0.748054     -0.290280      -1.48925       1.48925       1093.73       1095.22    
  35  0.448284     -0.802329      -4.11626       4.11626       1096.52       1100.63    
  36  0.658970     -0.417078      -2.13977       2.13977       1095.15       1097.29    
  37  0.101931      -2.28346      -11.7150       11.7150       1095.72       1107.44    
  38  0.946705     -0.547677E-01 -0.280979      0.280979       1093.20       1093.48    
  39  0.923584     -0.794931E-01 -0.407830      0.407830       1105.02       1105.43    
  40  0.632977     -0.457321      -2.34623       2.34623       1089.28       1091.63    
  41  0.386701     -0.950103      -4.87440       4.87440       1104.94       1109.81    
  42  0.585154     -0.535880      -2.74927       2.74927       1094.75       1097.50    
  43  0.538343     -0.619260      -3.17704       3.17704       1111.55       1114.72    
  44  0.843970     -0.169639     -0.870312      0.870312       1116.05       1116.92    
  45  0.420066     -0.867344      -4.44981       4.44981       1119.35       1123.80    
  46  0.826451     -0.190615     -0.977930      0.977930       1112.57       1113.54    
  47  0.523061     -0.648057      -3.32478       3.32478       1120.55       1123.87    
  48  0.699280     -0.357703      -1.83516       1.83516       1103.15       1104.98    
  49  0.662193     -0.412199      -2.11474       2.11474       1057.48       1059.60    
loop,thermsimp(1:2)       91   3.29642       15.0995    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433       1109.84         68.10          1.13         38.79          2.71          0.05        110.78
Just calling func    0   0        110.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1109.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       91
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       92
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      432     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179926      -1.71521      -8.79969       8.79969       1033.31       1042.11    
   2  0.805701     -0.216043      -1.10838       1.10838       1057.48       1058.59    
   3  0.341067      -1.07568      -5.51864       5.51864       1055.64       1061.15    
   4  0.596982     -0.515868      -2.64660       2.64660       1057.18       1059.83    
   5  0.575413E-01  -2.85525      -14.6485       14.6485       1057.63       1072.28    
   6  0.390921     -0.939249      -4.81871       4.81871       1062.65       1067.47    
   7  0.437495     -0.826689      -4.24123       4.24123       1062.30       1066.54    
   8  0.513955     -0.665620      -3.41489       3.41489       1052.93       1056.35    
   9  0.871599     -0.137426     -0.705047      0.705047       1066.36       1067.06    
  10  0.196691      -1.62612      -8.34263       8.34263       1068.79       1077.13    
  11  0.987685E-01  -2.31498      -11.8767       11.8767       1066.59       1078.47    
  12  0.448984     -0.800769      -4.10825       4.10825       1045.14       1049.25    
  13  0.869491     -0.139847     -0.717470      0.717470       1065.60       1066.32    
  14  0.253569      -1.37212      -7.03951       7.03951       1073.61       1080.65    
  15  0.765994     -0.266581      -1.36766       1.36766       1075.47       1076.84    
  16  0.269007      -1.31302      -6.73628       6.73628       1075.40       1082.13    
  17  0.527354     -0.639883      -3.28284       3.28284       1077.79       1081.07    
  18  0.991870     -0.816303E-02 -0.418795E-01  0.418795E-01   1073.62       1073.67    
  19  0.834963     -0.180368     -0.925359      0.925359       1067.62       1068.54    
  20  0.939146E-01  -2.36537      -12.1353       12.1353       1080.20       1092.34    
  21  0.784991     -0.242082      -1.24198       1.24198       1077.74       1078.98    
  22  0.164899      -1.80242      -9.24712       9.24712       1074.35       1083.60    
  23  0.890878     -0.115548     -0.592804      0.592804       1083.56       1084.15    
  24  0.996288E-01  -2.30630      -11.8322       11.8322       1087.44       1099.27    
  25  0.367348E-01  -3.30403      -16.9510       16.9510       1088.22       1105.17    
  26  0.874828     -0.133728     -0.686077      0.686077       1089.28       1089.97    
  27  0.101428      -2.28841      -11.7404       11.7404       1091.47       1103.21    
  28  0.583716     -0.538341      -2.76190       2.76190       1093.20       1095.96    
  29  0.265971      -1.32437      -6.79452       6.79452       1093.21       1100.00    
  30  0.739852     -0.301305      -1.54581       1.54581       1087.08       1088.62    
  31  0.974346     -0.259889E-01 -0.133333      0.133333       1093.73       1093.87    
  32  0.357297      -1.02919      -5.28013       5.28013       1087.38       1092.66    
  33  0.768033     -0.263923      -1.35402       1.35402       1095.15       1096.50    
  34  0.236843      -1.44036      -7.38959       7.38959       1094.75       1102.14    
  35  0.490030E-01  -3.01587      -15.4726       15.4726       1077.54       1093.01    
  36  0.842269     -0.171656     -0.880659      0.880659       1086.84       1087.72    
  37  0.292342      -1.22983      -6.30950       6.30950       1091.65       1097.96    
  38  0.596407     -0.516832      -2.65155       2.65155       1098.08       1100.73    
  39  0.359551      -1.02290      -5.24787       5.24787       1096.52       1101.77    
  40  0.461849     -0.772517      -3.96331       3.96331       1088.31       1092.27    
  41  0.662754     -0.411352      -2.11039       2.11039       1103.15       1105.26    
  42  0.516002     -0.661645      -3.39450       3.39450       1105.02       1108.41    
  43  0.619599     -0.478683      -2.45583       2.45583       1095.72       1098.18    
  44  0.811136     -0.209319      -1.07389       1.07389       1104.94       1106.01    
  45  0.490033     -0.713282      -3.65941       3.65941       1112.57       1116.23    
  46  0.976838     -0.234348E-01 -0.120230      0.120230       1111.55       1111.67    
  47  0.963378E-01  -2.33989      -12.0046       12.0046       1116.05       1128.05    
  48  0.811272     -0.209152      -1.07303       1.07303       1119.35       1120.43    
  49  0.401456     -0.912658      -4.68229       4.68229       1109.84       1114.52    
loop,thermsimp(1:2)       92   8.79969       1.10838    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434       1105.22         68.12          1.11         39.26          2.20          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1105.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       92
neval is:      433
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       93
neval is:      433


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      433
neval,tstepnext:      433     433

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356532      -1.03133      -5.29113       5.29113       1033.31       1038.60    
   2  0.156780      -1.85291      -9.50617       9.50617       1045.14       1054.65    
   3  0.871556     -0.137475     -0.705302      0.705302       1052.93       1053.64    
   4  0.686712     -0.375840      -1.92820       1.92820       1057.48       1059.41    
   5  0.980206     -0.199924E-01 -0.102569      0.102569       1057.18       1057.29    
   6  0.864789     -0.145270     -0.745289      0.745289       1055.64       1056.38    
   7  0.429178     -0.845883      -4.33970       4.33970       1065.60       1069.94    
   8  0.562262     -0.575787      -2.95401       2.95401       1062.30       1065.25    
   9  0.239176      -1.43056      -7.33931       7.33931       1066.36       1073.70    
  10  0.978598     -0.216345E-01 -0.110993      0.110993       1062.65       1062.76    
  11  0.938327     -0.636569E-01 -0.326585      0.326585       1067.62       1067.94    
  12  0.452510     -0.792946      -4.06812       4.06812       1057.63       1061.70    
  13  0.117352      -2.14257      -10.9922       10.9922       1073.62       1084.62    
  14  0.947736     -0.536798E-01 -0.275398      0.275398       1075.47       1075.75    
  15  0.990891     -0.915035E-02 -0.469449E-01  0.469449E-01   1068.79       1068.84    
  16  0.530083     -0.634722      -3.25637       3.25637       1066.59       1069.85    
  17  0.464385     -0.767041      -3.93522       3.93522       1077.74       1081.68    
  18  0.328231E-01  -3.41662      -17.5286       17.5286       1073.61       1091.14    
  19  0.141399E-01  -4.25876      -21.8491       21.8491       1077.79       1099.64    
  20  0.673551     -0.395192      -2.02749       2.02749       1075.40       1077.42    
  21  0.386316E-01  -3.25369      -16.6927       16.6927       1074.35       1091.04    
  22  0.592304     -0.523735      -2.68697       2.68697       1083.56       1086.25    
  23  0.755966     -0.279758      -1.43527       1.43527       1086.84       1088.28    
  24  0.397655     -0.922171      -4.73109       4.73109       1087.08       1091.81    
  25  0.636306     -0.452076      -2.31933       2.31933       1089.28       1091.60    
  26  0.610031     -0.494246      -2.53567       2.53567       1088.31       1090.84    
  27  0.424783     -0.856176      -4.39252       4.39252       1080.20       1084.60    
  28  0.748792     -0.289294      -1.48419       1.48419       1087.38       1088.86    
  29  0.481989     -0.729833      -3.74433       3.74433       1077.54       1081.29    
  30  0.711380     -0.340548      -1.74714       1.74714       1093.73       1095.48    
  31  0.853958     -0.157873     -0.809949      0.809949       1093.20       1094.01    
  32  0.194550      -1.63706      -8.39877       8.39877       1095.15       1103.55    
  33  0.972044     -0.283541E-01 -0.145467      0.145467       1091.65       1091.79    
  34  0.292837      -1.22814      -6.30082       6.30082       1095.72       1102.02    
  35  0.100865      -2.29397      -11.7689       11.7689       1087.44       1099.21    
  36  0.768654     -0.263114      -1.34988       1.34988       1093.21       1094.56    
  37  0.401537     -0.912456      -4.68125       4.68125       1098.08       1102.76    
  38  0.809292     -0.211595      -1.08556       1.08556       1096.52       1097.60    
  39  0.427839     -0.849009      -4.35575       4.35575       1094.75       1099.10    
  40  0.350578      -1.04817      -5.37752       5.37752       1091.47       1096.85    
  41  0.709565     -0.343104      -1.76025       1.76025       1088.22       1089.98    
  42  0.925864     -0.770281E-01 -0.395184      0.395184       1103.15       1103.54    
  43  0.470142     -0.754721      -3.87201       3.87201       1104.94       1108.81    
  44  0.168112      -1.78312      -9.14812       9.14812       1105.02       1114.17    
  45  0.858320     -0.152778     -0.783809      0.783809       1111.55       1112.33    
  46  0.209215      -1.56439      -8.02595       8.02595       1109.84       1117.87    
  47  0.925371     -0.775610E-01 -0.397918      0.397918       1112.57       1112.96    
  48  0.226229E-01  -3.78879      -19.4380       19.4380       1119.35       1138.79    
  49  0.414630     -0.880370      -4.51664       4.51664       1105.22       1109.73    
loop,thermsimp(1:2)       93   5.29113       9.50617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    435       1134.93         68.10          1.12         39.08          2.40          0.04        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    436       1062.09         68.07          1.13         39.07          2.59          0.05        110.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1062.09
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    5.13039               433
loop is:       93
neval is:      435
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    5.13039               433
loop is:       94
neval is:      435


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    2.56519               481

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      435     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.799794     -0.223401     -0.573067      0.573067       1033.31       1033.88    
   2  0.812618     -0.207494     -0.532263      0.532263       1052.93       1053.47    
   3  0.153451      -1.87438      -4.80814       4.80814       1045.14       1049.95    
   4  0.191065      -1.65514      -4.24576       4.24576       1055.64       1059.88    
   5  0.619921     -0.478164      -1.22658       1.22658       1057.18       1058.41    
   6  0.788743     -0.237315     -0.608760      0.608760       1057.48       1058.09    
   7  0.897459     -0.108188     -0.277523      0.277523       1057.63       1057.91    
   8  0.153705      -1.87272      -4.80389       4.80389       1062.65       1067.45    
   9  0.996049     -0.395849E-02 -0.101543E-01  0.101543E-01   1062.30       1062.31    
  10  0.560813E-01  -2.88095      -7.39020       7.39020       1067.62       1075.01    
  11  0.188305      -1.66969      -4.28308       4.28308       1068.79       1073.07    
  12  0.135074      -2.00193      -5.13535       5.13535       1066.59       1071.73    
  13  0.485175     -0.723245      -1.85526       1.85526       1065.60       1067.45    
  14  0.690741     -0.369991     -0.949097      0.949097       1066.36       1067.31    
  15  0.742932     -0.297150     -0.762248      0.762248       1075.47       1076.23    
  16  0.780541     -0.247768     -0.635574      0.635574       1075.40       1076.03    
  17  0.518671E-01  -2.95907      -7.59059       7.59059       1077.54       1085.13    
  18  0.968635     -0.318676E-01 -0.817467E-01  0.817467E-01   1077.74       1077.82    
  19  0.878004     -0.130104     -0.333742      0.333742       1080.20       1080.54    
  20  0.868279     -0.141242     -0.362313      0.362313       1073.62       1073.99    
  21  0.554456     -0.589768      -1.51287       1.51287       1083.56       1085.07    
  22  0.114030      -2.17129      -5.56979       5.56979       1086.84       1092.41    
  23  0.397460     -0.922661      -2.36680       2.36680       1087.38       1089.74    
  24  0.299789      -1.20467      -3.09022       3.09022       1088.22       1091.31    
  25  0.214585      -1.53905      -3.94796       3.94796       1088.31       1092.26    
  26  0.583444     -0.538806      -1.38214       1.38214       1074.35       1075.73    
  27  0.399403     -0.917786      -2.35430       2.35430       1073.61       1075.97    
  28  0.421825     -0.863165      -2.21419       2.21419       1089.28       1091.50    
  29  0.102868      -2.27431      -5.83404       5.83404       1091.65       1097.48    
  30  0.774422     -0.255639     -0.655763      0.655763       1087.08       1087.73    
  31  0.564329     -0.572118      -1.46759       1.46759       1093.20       1094.67    
  32  0.206718      -1.57640      -4.04377       4.04377       1093.21       1097.25    
  33  0.407431     -0.897885      -2.30325       2.30325       1093.73       1096.04    
  34  0.505624     -0.681961      -1.74936       1.74936       1091.47       1093.22    
  35  0.451161     -0.795932      -2.04172       2.04172       1096.52       1098.56    
  36  0.619041     -0.479583      -1.23022       1.23022       1094.75       1095.98    
  37  0.326941      -1.11798      -2.86782       2.86782       1087.44       1090.31    
  38  0.750232     -0.287372     -0.737166      0.737166       1077.79       1078.53    
  39  0.718810     -0.330159     -0.846920      0.846920       1095.72       1096.57    
  40  0.366798      -1.00294      -2.57274       2.57274       1098.08       1100.65    
  41  0.467420     -0.760527      -1.95090       1.95090       1103.15       1105.10    
  42  0.854905     -0.156764     -0.402131      0.402131       1095.15       1095.55    
  43  0.248161      -1.39368      -3.57505       3.57505       1104.94       1108.51    
  44  0.201563      -1.60165      -4.10855       4.10855       1105.22       1109.33    
  45  0.108988      -2.21652      -5.68579       5.68579       1111.55       1117.23    
  46  0.988176     -0.118946E-01 -0.305119E-01  0.305119E-01   1112.57       1112.60    
  47  0.639214     -0.447517      -1.14797       1.14797       1105.02       1106.17    
  48  0.165897E-01  -4.09897      -10.5147       10.5147       1109.84       1120.35    
  49  0.235415      -1.44641      -3.71031       3.71031       1062.09       1065.80    
loop,thermsimp(1:2)       94  0.573067      0.532263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    437       1115.43         68.04          1.10         39.01          2.47          0.05        110.67
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1115.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       94
neval is:      436
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       95
neval is:      436


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      436     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253064      -1.37411      -3.52486       3.52486       1033.31       1036.84    
   2  0.229389      -1.47233      -3.77682       3.77682       1045.14       1048.92    
   3  0.571162     -0.560083      -1.43672       1.43672       1052.93       1054.37    
   4  0.537902     -0.620079      -1.59062       1.59062       1057.63       1059.22    
   5  0.112268      -2.18686      -5.60973       5.60973       1057.48       1063.09    
   6  0.988186     -0.118842E-01 -0.304854E-01  0.304854E-01   1057.18       1057.21    
   7  0.358165      -1.02676      -2.63384       2.63384       1055.64       1058.27    
   8  0.768403     -0.263441     -0.675777      0.675777       1062.30       1062.98    
   9  0.493061     -0.707122      -1.81390       1.81390       1062.09       1063.91    
  10  0.755030     -0.280998     -0.720815      0.720815       1066.36       1067.08    
  11  0.380853     -0.965342      -2.47629       2.47629       1062.65       1065.12    
  12  0.131667      -2.02748      -5.20087       5.20087       1065.60       1070.80    
  13  0.812799     -0.207272     -0.531692      0.531692       1066.59       1067.12    
  14  0.390991     -0.939070      -2.40889       2.40889       1068.79       1071.20    
  15  0.782458     -0.245315     -0.629281      0.629281       1073.62       1074.25    
  16  0.348518E-01  -3.35665      -8.61046       8.61046       1067.62       1076.23    
  17  0.671068     -0.398885      -1.02322       1.02322       1074.35       1075.38    
  18  0.848918     -0.163793     -0.420161      0.420161       1073.61       1074.03    
  19  0.246224      -1.40151      -3.59515       3.59515       1075.40       1078.99    
  20  0.548254     -0.601017      -1.54173       1.54173       1075.47       1077.01    
  21  0.496910     -0.699346      -1.79396       1.79396       1077.74       1079.53    
  22  0.621299     -0.475942      -1.22088       1.22088       1077.79       1079.01    
  23  0.222686      -1.50199      -3.85290       3.85290       1080.20       1084.06    
  24  0.541907     -0.612662      -1.57160       1.57160       1083.56       1085.13    
  25  0.599206     -0.512150      -1.31376       1.31376       1077.54       1078.86    
  26  0.147915      -1.91112      -4.90238       4.90238       1087.08       1091.98    
  27  0.952413     -0.487561E-01 -0.125069      0.125069       1087.38       1087.50    
  28  0.981186     -0.189927E-01 -0.487200E-01  0.487200E-01   1087.44       1087.49    
  29  0.560306     -0.579272      -1.48594       1.48594       1088.22       1089.70    
  30  0.892317     -0.113934     -0.292263      0.292263       1089.28       1089.58    
  31  0.936237E-03  -6.97364      -17.8887       17.8887       1088.31       1106.20    
  32  0.367075      -1.00219      -2.57081       2.57081       1086.84       1089.41    
  33  0.440672     -0.819456      -2.10206       2.10206       1091.47       1093.57    
  34  0.928002     -0.747214E-01 -0.191675      0.191675       1093.20       1093.39    
  35  0.424766     -0.856216      -2.19636       2.19636       1095.15       1097.34    
  36  0.846974     -0.166085     -0.426040      0.426040       1094.75       1095.17    
  37  0.581252     -0.542571      -1.39180       1.39180       1093.73       1095.12    
  38  0.316247      -1.15123      -2.95313       2.95313       1095.72       1098.68    
  39  0.211145E-01  -3.85779      -9.89599       9.89599       1093.21       1103.10    
  40  0.698864     -0.358299     -0.919106      0.919106       1091.65       1092.57    
  41  0.616376     -0.483899      -1.24129       1.24129       1096.52       1097.76    
  42  0.744369     -0.295219     -0.757293      0.757293       1098.08       1098.84    
  43  0.165839      -1.79674      -4.60899       4.60899       1103.15       1107.76    
  44  0.605775     -0.501246      -1.28579       1.28579       1105.02       1106.31    
  45  0.594138     -0.520643      -1.33555       1.33555       1104.94       1106.27    
  46  0.120602      -2.11526      -5.42605       5.42605       1105.22       1110.64    
  47  0.614289     -0.487290      -1.24999       1.24999       1112.57       1113.82    
  48  0.128959E-01  -4.35085      -11.1608       11.1608       1111.55       1122.71    
  49  0.863875     -0.146327     -0.375358      0.375358       1115.43       1115.80    
loop,thermsimp(1:2)       95   3.52486       3.77682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    438       1004.51         68.05          1.11         39.10          2.50          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    439       1126.23         68.02          1.11         39.08          2.30          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1   1004.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       95
neval is:      438
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   20.7547    

hmean,hstd :    1078.76       20.7547    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1078.76       20.7547    
h(1),h(best1),h(np1) :    1033.31       1004.51       1004.51    
htherm(1),htherm(best1),htherm(np1) :    1036.84       1122.71       1122.71    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        1
neval is:      438


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      438     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.704949     -0.349630     -0.896868      0.896868       1033.31       1034.21    
   2  0.970994     -0.294346E-01 -0.755053E-01  0.755053E-01   1045.14       1045.22    
   3  0.665247     -0.407596      -1.04556       1.04556       1052.93       1053.98    
   4  0.679606     -0.386241     -0.990784      0.990784       1057.18       1058.17    
   5  0.216334      -1.53093      -3.92713       3.92713       1055.64       1059.56    
   6  0.920084     -0.832900E-01 -0.213655      0.213655       1057.63       1057.84    
   7  0.922000     -0.812099E-01 -0.208319      0.208319       1062.30       1062.51    
   8  0.387073     -0.949143      -2.43473       2.43473       1057.48       1059.92    
   9  0.392085     -0.936277      -2.40173       2.40173       1062.09       1064.50    
  10  0.559162     -0.581315      -1.49119       1.49119       1062.65       1064.14    
  11  0.552599     -0.593124      -1.52148       1.52148       1066.36       1067.88    
  12  0.657815     -0.418831      -1.07438       1.07438       1066.59       1067.66    
  13  0.755087     -0.280923     -0.720621      0.720621       1065.60       1066.32    
  14  0.183724      -1.69432      -4.34626       4.34626       1068.79       1073.14    
  15  0.889314     -0.117305     -0.300911      0.300911       1073.61       1073.91    
  16  0.346116      -1.06098      -2.72162       2.72162       1073.62       1076.35    
  17  0.212120      -1.55060      -3.97760       3.97760       1074.35       1078.33    
  18  0.409709     -0.892309      -2.28894       2.28894       1067.62       1069.90    
  19  0.288781      -1.24209      -3.18619       3.18619       1075.47       1078.66    
  20  0.470431     -0.754106      -1.93443       1.93443       1077.54       1079.48    
  21  0.335548      -1.09199      -2.80117       2.80117       1075.40       1078.20    
  22  0.188346      -1.66947      -4.28252       4.28252       1077.79       1082.07    
  23  0.546572     -0.604090      -1.54961       1.54961       1077.74       1079.29    
  24  0.258243      -1.35386      -3.47290       3.47290       1080.20       1083.68    
  25  0.544051     -0.608712      -1.56147       1.56147       1083.56       1085.12    
  26  0.594635     -0.519807      -1.33341       1.33341       1087.44       1088.77    
  27  0.342233      -1.07226      -2.75056       2.75056       1087.38       1090.13    
  28  0.309367      -1.17323      -3.00955       3.00955       1086.84       1089.85    
  29  0.717331E-01  -2.63480      -6.75878       6.75878       1089.28       1096.04    
  30  0.443944E-02  -5.41723      -13.8962       13.8962       1088.22       1102.11    
  31  0.901850     -0.103307     -0.265002      0.265002       1087.08       1087.34    
  32  0.289566      -1.23937      -3.17923       3.17923       1091.65       1094.83    
  33  0.824723     -0.192707     -0.494332      0.494332       1093.20       1093.69    
  34  0.830455     -0.185782     -0.476566      0.476566       1091.47       1091.95    
  35  0.656263     -0.421194      -1.08044       1.08044       1093.73       1094.81    
  36  0.170687      -1.76792      -4.53507       4.53507       1094.75       1099.28    
  37  0.455052     -0.787343      -2.01969       2.01969       1095.15       1097.17    
  38  0.531062     -0.632876      -1.62345       1.62345       1096.52       1098.14    
  39  0.958848     -0.420222E-01 -0.107795      0.107795       1095.72       1095.83    
  40  0.660041     -0.415453      -1.06572       1.06572       1098.08       1099.15    
  41  0.598625     -0.513120      -1.31625       1.31625       1093.21       1094.52    
  42  0.303046      -1.19387      -3.06251       3.06251       1088.31       1091.37    
  43  0.742116     -0.298250     -0.765069      0.765069       1104.94       1105.70    
  44  0.426280     -0.852660      -2.18724       2.18724       1105.02       1107.21    
  45  0.891558     -0.114785     -0.294446      0.294446       1103.15       1103.44    
  46  0.399357     -0.917899      -2.35459       2.35459       1105.22       1107.57    
  47  0.526711     -0.641104      -1.64455       1.64455       1112.57       1114.21    
  48  0.616864     -0.483107      -1.23926       1.23926       1115.43       1116.67    
  49  0.783244E-01  -2.54690      -6.53328       6.53328       1004.51       1011.04    
loop,thermsimp(1:2)        1  0.896868      0.755053E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    440       1111.31         68.04          1.13         38.97          2.51          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1111.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        1
neval is:      439
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        2
neval is:      439


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      439     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.934282     -0.679771E-01 -0.174374      0.174374       1004.51       1004.68    
   2  0.959826     -0.410037E-01 -0.105182      0.105182       1033.31       1033.42    
   3  0.673594     -0.395128      -1.01358       1.01358       1045.14       1046.16    
   4  0.779876     -0.248621     -0.637760      0.637760       1052.93       1053.57    
   5  0.445258     -0.809102      -2.07550       2.07550       1057.63       1059.71    
   6  0.730020     -0.314684     -0.807225      0.807225       1057.18       1057.99    
   7  0.373553     -0.984697      -2.52594       2.52594       1055.64       1058.16    
   8  0.502695     -0.687771      -1.76427       1.76427       1057.48       1059.25    
   9  0.752227     -0.284717     -0.730354      0.730354       1062.30       1063.03    
  10  0.496558     -0.700055      -1.79578       1.79578       1062.65       1064.44    
  11  0.642076     -0.443049      -1.13651       1.13651       1062.09       1063.23    
  12  0.278090      -1.27981      -3.28296       3.28296       1065.60       1068.88    
  13  0.306173E-02  -5.78878      -14.8493       14.8493       1066.59       1081.44    
  14  0.563321     -0.573906      -1.47218       1.47218       1066.36       1067.83    
  15  0.393175     -0.933500      -2.39461       2.39461       1067.62       1070.01    
  16  0.122356E-01  -4.40341      -11.2956       11.2956       1068.79       1080.09    
  17  0.720206     -0.328218     -0.841942      0.841942       1073.61       1074.45    
  18  0.677984     -0.388632     -0.996917      0.996917       1073.62       1074.62    
  19  0.690144     -0.370855     -0.951315      0.951315       1075.40       1076.35    
  20  0.434024     -0.834656      -2.14105       2.14105       1074.35       1076.49    
  21  0.765725     -0.266932     -0.684731      0.684731       1075.47       1076.16    
  22  0.225865      -1.48782      -3.81654       3.81654       1077.74       1081.56    
  23  0.765632     -0.267054     -0.685045      0.685045       1077.54       1078.23    
  24  0.719977     -0.328536     -0.842757      0.842757       1077.79       1078.63    
  25  0.670210     -0.400164      -1.02650       1.02650       1080.20       1081.23    
  26  0.733967     -0.309291     -0.793391      0.793391       1083.56       1084.35    
  27  0.102650      -2.27643      -5.83948       5.83948       1087.08       1092.92    
  28  0.943364     -0.583033E-01 -0.149559      0.149559       1087.44       1087.59    
  29  0.813300     -0.206656     -0.530112      0.530112       1086.84       1087.37    
  30  0.441171     -0.818323      -2.09916       2.09916       1087.38       1089.48    
  31  0.986663     -0.134264E-01 -0.344414E-01  0.344414E-01   1088.31       1088.34    
  32  0.392748     -0.934588      -2.39740       2.39740       1091.47       1093.87    
  33  0.566634     -0.568042      -1.45714       1.45714       1093.20       1094.66    
  34  0.256244      -1.36162      -3.49283       3.49283       1093.21       1096.70    
  35  0.288015      -1.24474      -3.19300       3.19300       1093.73       1096.93    
  36  0.636551     -0.451691      -1.15868       1.15868       1091.65       1092.81    
  37  0.283424      -1.26081      -3.23423       3.23423       1095.72       1098.96    
  38  0.492002     -0.709273      -1.81942       1.81942       1089.28       1091.10    
  39  0.667434     -0.404315      -1.03715       1.03715       1095.15       1096.18    
  40  0.418456     -0.871184      -2.23475       2.23475       1096.52       1098.75    
  41  0.218030      -1.52312      -3.90711       3.90711       1098.08       1101.99    
  42  0.693223     -0.366404     -0.939898      0.939898       1094.75       1095.69    
  43  0.261018      -1.34316      -3.44548       3.44548       1088.22       1091.66    
  44  0.889516     -0.117078     -0.300328      0.300328       1103.15       1103.45    
  45  0.815048     -0.204509     -0.524605      0.524605       1104.94       1105.46    
  46  0.916438     -0.872606E-01 -0.223840      0.223840       1105.02       1105.24    
  47  0.426654     -0.851781      -2.18498       2.18498       1105.22       1107.40    
  48  0.730475     -0.314060     -0.805624      0.805624       1112.57       1113.37    
  49  0.145228      -1.92945      -4.94941       4.94941       1111.31       1116.26    
loop,thermsimp(1:2)        2  0.174374      0.105182    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    441       1115.43         68.01          1.11         38.86          2.52          0.05        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    1115.4        2.891     -3.226      4.345     -102.6     0.2381    
                     -0.1520     0.7056     -99.70      4.735      1.879    

                       3.088     -2.442      1.988      7374.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.703      0.000      0.000      7000.      390.9    

                      -1.222     -6.915     -6.923     -7.291      9.363    

                      -4.399     -3.949      4851.      0.000      8142.    



                       2686.      6510.      6926.      2244.      3004.    

                       4923.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.911     -1.663     -2.197     -2.257    -0.3807    

                     -0.3252      9.569      8.432    -0.1613E+05 -5.460    

                     -0.5084     -2.195      9.053      9.040    -0.1969E+05



                      -6.000     0.4840    -0.1140      8.910      8.975    

                     -0.1944E+05 -6.000     -1.166    -0.7217      9.700    

                       9.440    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1115.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        2
neval is:      440
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        3
neval is:      440


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      440     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.672644     -0.396539      -1.01720       1.01720       1004.51       1005.53    
   2  0.422499     -0.861569      -2.21009       2.21009       1033.31       1035.52    
   3  0.983039     -0.171063E-01 -0.438808E-01  0.438808E-01   1045.14       1045.19    
   4  0.823694     -0.193957     -0.497536      0.497536       1052.93       1053.43    
   5  0.410952E-01  -3.19186      -8.18775       8.18775       1057.18       1065.37    
   6  0.982524     -0.176301E-01 -0.452246E-01  0.452246E-01   1055.64       1055.68    
   7  0.133811      -2.01132      -5.15943       5.15943       1057.48       1062.64    
   8  0.737716     -0.304197     -0.780323      0.780323       1057.63       1058.41    
   9  0.551985     -0.594234      -1.52432       1.52432       1062.30       1063.82    
  10  0.506707     -0.679823      -1.74388       1.74388       1062.09       1063.84    
  11  0.513830     -0.665862      -1.70806       1.70806       1062.65       1064.36    
  12  0.888541     -0.118174     -0.303140      0.303140       1066.36       1066.66    
  13  0.127317      -2.06108      -5.28706       5.28706       1065.60       1070.89    
  14  0.196115      -1.62905      -4.17883       4.17883       1067.62       1071.79    
  15  0.332258      -1.10184      -2.82644       2.82644       1073.61       1076.44    
  16  0.809198     -0.211711     -0.543080      0.543080       1073.62       1074.17    
  17  0.238368      -1.43394      -3.67834       3.67834       1075.47       1079.15    
  18  0.275854      -1.28788      -3.30367       3.30367       1075.40       1078.70    
  19  0.977786     -0.224645E-01 -0.576259E-01  0.576259E-01   1074.35       1074.41    
  20  0.941455     -0.603283E-01 -0.154754      0.154754       1077.54       1077.70    
  21  0.197399      -1.62253      -4.16209       4.16209       1077.79       1081.95    
  22  0.410731     -0.889818      -2.28255       2.28255       1068.79       1071.07    
  23  0.756764     -0.278703     -0.714928      0.714928       1080.20       1080.92    
  24  0.250649      -1.38370      -3.54946       3.54946       1066.59       1070.14    
  25  0.519688E-01  -2.95711      -7.58556       7.58556       1077.74       1085.33    
  26  0.112052      -2.18879      -5.61468       5.61468       1083.56       1089.18    
  27  0.941464     -0.603191E-01 -0.154730      0.154730       1086.84       1087.00    
  28  0.394389     -0.930418      -2.38670       2.38670       1087.44       1089.82    
  29  0.215768      -1.53355      -3.93385       3.93385       1088.31       1092.24    
  30  0.956538     -0.444349E-01 -0.113984      0.113984       1087.38       1087.49    
  31  0.956019     -0.449770E-01 -0.115375      0.115375       1089.28       1089.40    
  32  0.475944     -0.742456      -1.90454       1.90454       1088.22       1090.12    
  33  0.891330     -0.115041     -0.295101      0.295101       1091.65       1091.94    
  34  0.535773     -0.624045      -1.60080       1.60080       1087.08       1088.68    
  35  0.254937      -1.36674      -3.50595       3.50595       1091.47       1094.97    
  36  0.973803     -0.265463E-01 -0.680965E-01  0.680965E-01   1093.20       1093.27    
  37  0.562546     -0.575283      -1.47571       1.47571       1094.75       1096.22    
  38  0.753728     -0.282724     -0.725241      0.725241       1095.15       1095.87    
  39  0.958046     -0.428600E-01 -0.109944      0.109944       1093.21       1093.32    
  40  0.362330      -1.01520      -2.60418       2.60418       1093.73       1096.34    
  41  0.752266     -0.284666     -0.730222      0.730222       1096.52       1097.25    
  42  0.330315      -1.10771      -2.84149       2.84149       1095.72       1098.56    
  43  0.637582     -0.450073      -1.15452       1.15452       1098.08       1099.24    
  44  0.690082E-01  -2.67353      -6.85812       6.85812       1103.15       1110.00    
  45  0.613234     -0.489009      -1.25440       1.25440       1105.02       1106.27    
  46  0.127887      -2.05661      -5.27560       5.27560       1104.94       1110.21    
  47  0.487824     -0.717801      -1.84130       1.84130       1105.22       1107.06    
  48  0.569313     -0.563325      -1.44504       1.44504       1112.57       1114.01    
  49  0.508604     -0.676086      -1.73429       1.73429       1115.43       1117.16    
loop,thermsimp(1:2)        3   1.01720       2.21009    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    442       1111.31         68.09          1.14         39.00          2.68          0.05        110.95
Just calling func    0   0        110.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1111.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        3
neval is:      441
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        4
neval is:      441


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      441     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.798513     -0.225003     -0.577177      0.577177       1004.51       1005.09    
   2  0.638408     -0.448778      -1.15120       1.15120       1033.31       1034.46    
   3  0.680643     -0.384717     -0.986872      0.986872       1045.14       1046.13    
   4  0.961577     -0.391809E-01 -0.100507      0.100507       1052.93       1053.03    
   5  0.847986     -0.164892     -0.422979      0.422979       1055.64       1056.06    
   6  0.272167      -1.30134      -3.33818       3.33818       1057.63       1060.97    
   7  0.617328     -0.482354      -1.23733       1.23733       1057.48       1058.72    
   8  0.988374     -0.116944E-01 -0.299984E-01  0.299984E-01   1062.30       1062.33    
   9  0.542264     -0.612001      -1.56990       1.56990       1062.09       1063.66    
  10  0.415814     -0.877516      -2.25100       2.25100       1062.65       1064.90    
  11  0.267384      -1.31907      -3.38367       3.38367       1057.18       1060.57    
  12  0.457473     -0.782037      -2.00607       2.00607       1066.36       1068.36    
  13  0.652976     -0.426215      -1.09332       1.09332       1066.59       1067.68    
  14  0.358056      -1.02707      -2.63462       2.63462       1065.60       1068.23    
  15  0.872742     -0.136115     -0.349161      0.349161       1068.79       1069.14    
  16  0.903157     -0.101859     -0.261288      0.261288       1067.62       1067.88    
  17  0.177047      -1.73134      -4.44122       4.44122       1073.62       1078.06    
  18  0.302956      -1.19417      -3.06327       3.06327       1074.35       1077.42    
  19  0.948694     -0.526688E-01 -0.135106      0.135106       1073.61       1073.75    
  20  0.692226     -0.367843     -0.943589      0.943589       1077.54       1078.49    
  21  0.466535     -0.762421      -1.95576       1.95576       1075.40       1077.35    
  22  0.159230      -1.83741      -4.71330       4.71330       1075.47       1080.19    
  23  0.573784     -0.555503      -1.42497       1.42497       1080.20       1081.63    
  24  0.294604      -1.22212      -3.13498       3.13498       1077.79       1080.93    
  25  0.619338     -0.479105      -1.22900       1.22900       1077.74       1078.97    
  26  0.357513      -1.02858      -2.63852       2.63852       1086.84       1089.48    
  27  0.135435      -1.99926      -5.12850       5.12850       1087.38       1092.51    
  28  0.490167     -0.713010      -1.82901       1.82901       1087.08       1088.91    
  29  0.409560     -0.892671      -2.28987       2.28987       1083.56       1085.85    
  30  0.657018     -0.420044      -1.07750       1.07750       1089.28       1090.36    
  31  0.410122     -0.891301      -2.28636       2.28636       1087.44       1089.72    
  32  0.407218     -0.898406      -2.30458       2.30458       1088.22       1090.52    
  33  0.932850     -0.695113E-01 -0.178310      0.178310       1091.65       1091.83    
  34  0.139206      -1.97180      -5.05806       5.05806       1088.31       1093.37    
  35  0.416824     -0.875091      -2.24478       2.24478       1093.20       1095.44    
  36  0.665493     -0.407227      -1.04462       1.04462       1093.21       1094.25    
  37  0.948852     -0.525019E-01 -0.134678      0.134678       1091.47       1091.60    
  38  0.110908      -2.19906      -5.64100       5.64100       1095.15       1100.79    
  39  0.116497      -2.14989      -5.51487       5.51487       1094.75       1100.26    
  40  0.835798     -0.179369     -0.460116      0.460116       1093.73       1094.19    
  41  0.389785     -0.942161      -2.41682       2.41682       1096.52       1098.94    
  42  0.689009     -0.372500     -0.955536      0.955536       1095.72       1096.68    
  43  0.599122     -0.512291      -1.31412       1.31412       1098.08       1099.39    
  44  0.977477E-01  -2.32537      -5.96501       5.96501       1105.02       1110.98    
  45  0.394232     -0.930817      -2.38772       2.38772       1105.22       1107.61    
  46  0.785039E-01  -2.54461      -6.52741       6.52741       1103.15       1109.67    
  47  0.983301     -0.168402E-01 -0.431983E-01  0.431983E-01   1104.94       1104.98    
  48  0.997277     -0.272636E-02 -0.699364E-02  0.699364E-02   1112.57       1112.57    
  49  0.846943     -0.166122     -0.426136      0.426136       1111.31       1111.74    
loop,thermsimp(1:2)        4  0.577177       1.15120    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    443       1123.69         68.05          1.12         38.90          2.50          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1123.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        4
neval is:      442
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        5
neval is:      442


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      442     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.811489     -0.208884     -0.535828      0.535828       1004.51       1005.05    
   2  0.731551     -0.312588     -0.801849      0.801849       1033.31       1034.11    
   3  0.757108     -0.278250     -0.713764      0.713764       1045.14       1045.86    
   4  0.684238     -0.379449     -0.973360      0.973360       1052.93       1053.91    
   5  0.371195     -0.991029      -2.54218       2.54218       1055.64       1058.18    
   6  0.302280      -1.19640      -3.06900       3.06900       1057.48       1060.55    
   7  0.927809     -0.749297E-01 -0.192209      0.192209       1057.18       1057.38    
   8  0.535678     -0.624221      -1.60125       1.60125       1057.63       1059.23    
   9  0.724827     -0.321822     -0.825535      0.825535       1062.30       1063.13    
  10  0.660067     -0.415415      -1.06562       1.06562       1062.09       1063.16    
  11  0.907930E-01  -2.39917      -6.15434       6.15434       1062.65       1068.80    
  12  0.664112E-01  -2.71189      -6.95652       6.95652       1066.59       1073.55    
  13  0.502773     -0.687617      -1.76387       1.76387       1067.62       1069.38    
  14  0.361422      -1.01771      -2.61062       2.61062       1065.60       1068.21    
  15  0.308497E-01  -3.47863      -8.92335       8.92335       1066.36       1075.28    
  16  0.174600      -1.74526      -4.47692       4.47692       1068.79       1073.27    
  17  0.162978      -1.81414      -4.65362       4.65362       1073.61       1078.27    
  18  0.427923     -0.848811      -2.17736       2.17736       1075.40       1077.57    
  19  0.534694     -0.626061      -1.60597       1.60597       1074.35       1075.96    
  20  0.647569     -0.434529      -1.11465       1.11465       1073.62       1074.74    
  21  0.373550     -0.984702      -2.52595       2.52595       1077.54       1080.07    
  22  0.804103     -0.218028     -0.559284      0.559284       1077.74       1078.30    
  23  0.505198     -0.682806      -1.75153       1.75153       1075.47       1077.22    
  24  0.105841      -2.24582      -5.76096       5.76096       1077.79       1083.55    
  25  0.624957     -0.470072      -1.20583       1.20583       1080.20       1081.41    
  26  0.224577      -1.49354      -3.83121       3.83121       1083.56       1087.39    
  27  0.766222     -0.266284     -0.683070      0.683070       1087.08       1087.76    
  28  0.645296E-01  -2.74063      -7.03025       7.03025       1086.84       1093.87    
  29  0.469840     -0.755362      -1.93765       1.93765       1087.44       1089.38    
  30  0.618430     -0.480571      -1.23276       1.23276       1089.28       1090.52    
  31  0.609945     -0.494386      -1.26820       1.26820       1088.22       1089.48    
  32  0.838697E-01  -2.47849      -6.35781       6.35781       1091.47       1097.83    
  33  0.341460      -1.07453      -2.75637       2.75637       1091.65       1094.40    
  34  0.834322     -0.181136     -0.464648      0.464648       1087.38       1087.84    
  35  0.538769     -0.618468      -1.58649       1.58649       1088.31       1089.90    
  36  0.762709     -0.270879     -0.694857      0.694857       1093.73       1094.43    
  37  0.490122     -0.713101      -1.82924       1.82924       1093.21       1095.04    
  38  0.515825     -0.661987      -1.69812       1.69812       1093.20       1094.90    
  39  0.512184     -0.669072      -1.71630       1.71630       1095.72       1097.44    
  40  0.634134     -0.455495      -1.16843       1.16843       1096.52       1097.69    
  41  0.816569     -0.202643     -0.519819      0.519819       1098.08       1098.60    
  42  0.669400     -0.401374      -1.02960       1.02960       1094.75       1095.78    
  43  0.288427      -1.24331      -3.18934       3.18934       1095.15       1098.34    
  44  0.270539      -1.30734      -3.35358       3.35358       1104.94       1108.29    
  45  0.542986     -0.610673      -1.56649       1.56649       1105.22       1106.78    
  46  0.576168E-01  -2.85394      -7.32091       7.32091       1103.15       1110.47    
  47  0.236528      -1.44169      -3.69821       3.69821       1105.02       1108.72    
  48  0.238062      -1.43523      -3.68163       3.68163       1111.31       1114.99    
  49  0.363391      -1.01228      -2.59669       2.59669       1123.69       1126.29    
loop,thermsimp(1:2)        5  0.535828      0.801849    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    444       1112.57         67.98          1.12         39.28          2.48          0.04        110.91
Just calling func    0   0        110.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1112.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        5
neval is:      443
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        6
neval is:      443


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      443     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.116004      -2.15413      -5.52576       5.52576       1004.51       1010.04    
   2  0.920667     -0.826568E-01 -0.212031      0.212031       1033.31       1033.52    
   3  0.337815      -1.08526      -2.78390       2.78390       1045.14       1047.93    
   4  0.862304     -0.148147     -0.380026      0.380026       1052.93       1053.31    
   5  0.162138      -1.81931      -4.66688       4.66688       1057.18       1061.85    
   6  0.207583E-01  -3.87481      -9.93963       9.93963       1055.64       1065.58    
   7  0.878541     -0.129492     -0.332172      0.332172       1057.63       1057.96    
   8  0.907223E-01  -2.39995      -6.15634       6.15634       1057.48       1063.64    
   9  0.174924      -1.74340      -4.47217       4.47217       1062.30       1066.77    
  10  0.488034     -0.717371      -1.84020       1.84020       1062.09       1063.93    
  11  0.204702      -1.58620      -4.06891       4.06891       1065.60       1069.67    
  12  0.710103     -0.342345     -0.878182      0.878182       1062.65       1063.53    
  13  0.211817      -1.55203      -3.98126       3.98126       1067.62       1071.60    
  14  0.935943     -0.662008E-01 -0.169818      0.169818       1068.79       1068.96    
  15  0.806563     -0.214973     -0.551447      0.551447       1066.59       1067.14    
  16  0.851420     -0.160850     -0.412612      0.412612       1073.62       1074.04    
  17  0.907489     -0.970743E-01 -0.249014      0.249014       1066.36       1066.61    
  18  0.147948      -1.91089      -4.90181       4.90181       1074.35       1079.25    
  19  0.989899     -0.101525E-01 -0.260431E-01  0.260431E-01   1075.47       1075.50    
  20  0.948348     -0.530338E-01 -0.136042      0.136042       1075.40       1075.53    
  21  0.856160     -0.155298     -0.398369      0.398369       1073.61       1074.01    
  22  0.879524     -0.128375     -0.329307      0.329307       1077.74       1078.07    
  23  0.796764     -0.227197     -0.582803      0.582803       1077.54       1078.13    
  24  0.957780     -0.431369E-01 -0.110655      0.110655       1080.20       1080.31    
  25  0.331827      -1.10314      -2.82977       2.82977       1077.79       1080.62    
  26  0.822007     -0.196007     -0.502795      0.502795       1083.56       1084.06    
  27  0.357574      -1.02841      -2.63807       2.63807       1087.08       1089.72    
  28  0.457030     -0.783007      -2.00856       2.00856       1087.38       1089.39    
  29  0.241929      -1.41911      -3.64029       3.64029       1087.44       1091.08    
  30  0.159420      -1.83622      -4.71025       4.71025       1088.22       1092.93    
  31  0.871392     -0.137663     -0.353132      0.353132       1088.31       1088.66    
  32  0.736579     -0.305739     -0.784281      0.784281       1089.28       1090.07    
  33  0.531818E-01  -2.93404      -7.52637       7.52637       1086.84       1094.37    
  34  0.959148     -0.417102E-01 -0.106995      0.106995       1091.65       1091.75    
  35  0.443867E-01  -3.11482      -7.99010       7.99010       1093.73       1101.72    
  36  0.318432      -1.14435      -2.93547       2.93547       1093.20       1096.13    
  37  0.235807E-01  -3.74733      -9.61261       9.61261       1093.21       1102.82    
  38  0.624487     -0.470824      -1.20776       1.20776       1094.75       1095.96    
  39  0.258614      -1.35242      -3.46921       3.46921       1095.72       1099.19    
  40  0.950845     -0.504045E-01 -0.129297      0.129297       1096.52       1096.65    
  41  0.169965      -1.77216      -4.54594       4.54594       1091.47       1096.01    
  42  0.207476      -1.57274      -4.03438       4.03438       1095.15       1099.18    
  43  0.704531     -0.350224     -0.898391      0.898391       1098.08       1098.98    
  44  0.620530     -0.477181      -1.22406       1.22406       1105.22       1106.44    
  45  0.749647     -0.288152     -0.739166      0.739166       1104.94       1105.68    
  46  0.855503     -0.156065     -0.400338      0.400338       1105.02       1105.42    
  47  0.860063     -0.150749     -0.386701      0.386701       1103.15       1103.53    
  48  0.161316      -1.82439      -4.67991       4.67991       1111.31       1115.99    
  49  0.388396     -0.945731      -2.42598       2.42598       1112.57       1114.99    
loop,thermsimp(1:2)        6   5.52576      0.212031    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    445       1115.43         68.00          1.10         38.87          2.59          0.04        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1115.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        6
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        7
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      444     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932199     -0.702091E-01 -0.180100      0.180100       1004.51       1004.69    
   2  0.510325     -0.672708      -1.72562       1.72562       1033.31       1035.04    
   3  0.863839     -0.146369     -0.375465      0.375465       1045.14       1045.52    
   4  0.707053     -0.346650     -0.889225      0.889225       1052.93       1053.82    
   5  0.808834     -0.212161     -0.544234      0.544234       1057.63       1058.18    
   6  0.684501     -0.379065     -0.972374      0.972374       1057.18       1058.16    
   7  0.386513     -0.950589      -2.43844       2.43844       1062.65       1065.09    
   8  0.480058     -0.733848      -1.88246       1.88246       1057.48       1059.36    
   9  0.697801     -0.359821     -0.923011      0.923011       1062.09       1063.02    
  10  0.806131     -0.215509     -0.552821      0.552821       1055.64       1056.19    
  11  0.529485     -0.635851      -1.63108       1.63108       1066.36       1067.99    
  12  0.547496     -0.602400      -1.54527       1.54527       1062.30       1063.85    
  13  0.502177     -0.688802      -1.76691       1.76691       1066.59       1068.36    
  14  0.714156E-01  -2.63924      -6.77016       6.77016       1068.79       1075.56    
  15  0.676238     -0.391210      -1.00353       1.00353       1065.60       1066.60    
  16  0.225230      -1.49063      -3.82377       3.82377       1067.62       1071.44    
  17  0.587852     -0.531281      -1.36284       1.36284       1073.61       1074.97    
  18  0.156670      -1.85361      -4.75488       4.75488       1073.62       1078.38    
  19  0.116250      -2.15201      -5.52033       5.52033       1075.47       1080.99    
  20  0.549251     -0.599199      -1.53706       1.53706       1075.40       1076.93    
  21  0.926231     -0.766317E-01 -0.196575      0.196575       1077.74       1077.94    
  22  0.269854      -1.30987      -3.36008       3.36008       1077.54       1080.90    
  23  0.388677E-01  -3.24759      -8.33070       8.33070       1074.35       1082.68    
  24  0.497689     -0.697780      -1.78994       1.78994       1080.20       1081.99    
  25  0.125376      -2.07644      -5.32647       5.32647       1077.79       1083.12    
  26  0.957877E-01  -2.34562      -6.01697       6.01697       1083.56       1089.58    
  27  0.739546     -0.301719     -0.773967      0.773967       1088.31       1089.08    
  28  0.300448      -1.20248      -3.08459       3.08459       1087.38       1090.46    
  29  0.356596      -1.03115      -2.64510       2.64510       1087.08       1089.72    
  30  0.600947     -0.509248      -1.30632       1.30632       1089.28       1090.59    
  31  0.521938     -0.650206      -1.66790       1.66790       1087.44       1089.11    
  32  0.535283     -0.624959      -1.60314       1.60314       1091.65       1093.25    
  33  0.770626     -0.260551     -0.668365      0.668365       1088.22       1088.88    
  34  0.773107     -0.257338     -0.660121      0.660121       1086.84       1087.50    
  35  0.353741      -1.03919      -2.66572       2.66572       1094.75       1097.41    
  36  0.309044      -1.17427      -3.01223       3.01223       1091.47       1094.48    
  37  0.263408      -1.33405      -3.42210       3.42210       1093.20       1096.62    
  38  0.583467     -0.538767      -1.38204       1.38204       1096.52       1097.90    
  39  0.219559      -1.51613      -3.88918       3.88918       1098.08       1101.97    
  40  0.949123E-01  -2.35480      -6.04052       6.04052       1095.15       1101.19    
  41  0.926379     -0.764713E-01 -0.196164      0.196164       1095.72       1095.92    
  42  0.146628      -1.91986      -4.92480       4.92480       1093.73       1098.66    
  43  0.998118     -0.188389E-02 -0.483255E-02  0.483255E-02   1093.21       1093.21    
  44  0.241713      -1.42000      -3.64258       3.64258       1103.15       1106.79    
  45  0.550303     -0.597286      -1.53215       1.53215       1105.02       1106.55    
  46  0.878320     -0.129744     -0.332818      0.332818       1104.94       1105.27    
  47  0.679811     -0.385940     -0.990010      0.990010       1105.22       1106.21    
  48  0.137778E-01  -4.28470      -10.9911       10.9911       1112.57       1123.56    
  49  0.752812     -0.283939     -0.728359      0.728359       1115.43       1116.15    
loop,thermsimp(1:2)        7  0.180100       1.72562    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446       1134.22         68.03          1.13         39.41          2.03          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    447       1070.64         68.00          1.13         38.96          2.32          0.05        110.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1070.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        7
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        8
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      446     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534728     -0.625997      -1.60580       1.60580       1004.51       1006.12    
   2  0.891304     -0.115069     -0.295175      0.295175       1033.31       1033.61    
   3  0.710791     -0.341377     -0.875697      0.875697       1045.14       1046.02    
   4  0.574149     -0.554867      -1.42334       1.42334       1052.93       1054.36    
   5  0.220647      -1.51119      -3.87650       3.87650       1055.64       1059.51    
   6  0.774887     -0.255038     -0.654221      0.654221       1057.18       1057.84    
   7  0.941732     -0.600346E-01 -0.154000      0.154000       1057.63       1057.78    
   8  0.564338E-01  -2.87469      -7.37413       7.37413       1057.48       1064.86    
   9  0.573286     -0.556371      -1.42720       1.42720       1062.09       1063.52    
  10  0.807834     -0.213399     -0.547410      0.547410       1062.30       1062.85    
  11  0.431082     -0.841457      -2.15850       2.15850       1062.65       1064.81    
  12  0.936870     -0.652112E-01 -0.167279      0.167279       1065.60       1065.77    
  13  0.524698E-02  -5.25010      -13.4675       13.4675       1066.36       1079.83    
  14  0.480494     -0.732942      -1.88014       1.88014       1066.59       1068.47    
  15  0.736344     -0.306057     -0.785096      0.785096       1067.62       1068.40    
  16  0.143769      -1.93955      -4.97531       4.97531       1073.61       1078.59    
  17  0.926564     -0.762723E-01 -0.195653      0.195653       1068.79       1068.99    
  18  0.760744     -0.273459     -0.701475      0.701475       1075.40       1076.10    
  19  0.210096      -1.56019      -4.00219       4.00219       1077.74       1081.74    
  20  0.453206     -0.791409      -2.03012       2.03012       1073.62       1075.65    
  21  0.371949     -0.988999      -2.53697       2.53697       1077.54       1080.08    
  22  0.629021     -0.463590      -1.18920       1.18920       1075.47       1076.66    
  23  0.165410      -1.79933      -4.61562       4.61562       1080.20       1084.82    
  24  0.265757      -1.32517      -3.39932       3.39932       1074.35       1077.75    
  25  0.506597     -0.680040      -1.74443       1.74443       1077.79       1079.54    
  26  0.271669      -1.30317      -3.34288       3.34288       1086.84       1090.19    
  27  0.789188     -0.236751     -0.607312      0.607312       1088.22       1088.82    
  28  0.422940E-01  -3.16311      -8.11399       8.11399       1088.31       1096.42    
  29  0.226854      -1.48345      -3.80533       3.80533       1087.44       1091.24    
  30  0.320198      -1.13882      -2.92129       2.92129       1083.56       1086.48    
  31  0.998414     -0.158710E-02 -0.407121E-02  0.407121E-02   1087.08       1087.08    
  32  0.943114E-01  -2.36115      -6.05681       6.05681       1087.38       1093.43    
  33  0.107960      -2.22599      -5.71010       5.71010       1089.28       1094.99    
  34  0.864949     -0.145085     -0.372170      0.372170       1093.21       1093.58    
  35  0.182814      -1.69928      -4.35899       4.35899       1091.65       1096.01    
  36  0.763255     -0.270163     -0.693021      0.693021       1091.47       1092.16    
  37  0.866088E-01  -2.44635      -6.27537       6.27537       1095.72       1102.00    
  38  0.927332     -0.754437E-01 -0.193528      0.193528       1093.20       1093.39    
  39  0.693333     -0.366245     -0.939488      0.939488       1094.75       1095.69    
  40  0.671439     -0.398332      -1.02180       1.02180       1096.52       1097.54    
  41  0.173693      -1.75047      -4.49028       4.49028       1093.73       1098.22    
  42  0.574066     -0.555010      -1.42371       1.42371       1095.15       1096.57    
  43  0.216158E-02  -6.13691      -15.7424       15.7424       1098.08       1113.82    
  44  0.611545     -0.491767      -1.26148       1.26148       1104.94       1106.20    
  45  0.318370      -1.14454      -2.93597       2.93597       1105.22       1108.15    
  46  0.110781      -2.20020      -5.64393       5.64393       1105.02       1110.66    
  47  0.442761     -0.814726      -2.08993       2.08993       1103.15       1105.24    
  48  0.953176     -0.479560E-01 -0.123017      0.123017       1115.43       1115.55    
  49  0.836181     -0.178910     -0.458938      0.458938       1070.64       1071.10    
loop,thermsimp(1:2)        8   1.60580      0.295175    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448       1094.37         68.05          1.14         39.15          2.48          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1094.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        8
neval is:      447
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:        9
neval is:      447


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      447     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581292     -0.542503      -1.39162       1.39162       1004.51       1005.90    
   2  0.331354      -1.10457      -2.83343       2.83343       1033.31       1036.14    
   3  0.336751      -1.08841      -2.79198       2.79198       1045.14       1047.93    
   4  0.782784     -0.244898     -0.628211      0.628211       1052.93       1053.56    
   5  0.710059     -0.342408     -0.878342      0.878342       1057.63       1058.51    
   6  0.439315     -0.822538      -2.10997       2.10997       1057.18       1059.29    
   7  0.560088     -0.579662      -1.48695       1.48695       1055.64       1057.12    
   8  0.865331     -0.144643     -0.371037      0.371037       1062.30       1062.67    
   9  0.488379     -0.716663      -1.83838       1.83838       1062.09       1063.93    
  10  0.200096      -1.60896      -4.12729       4.12729       1062.65       1066.77    
  11  0.337191      -1.08710      -2.78863       2.78863       1057.48       1060.27    
  12  0.483996E-01  -3.02826      -7.76808       7.76808       1065.60       1073.37    
  13  0.159942      -1.83295      -4.70186       4.70186       1067.62       1072.32    
  14  0.789831     -0.235936     -0.605222      0.605222       1066.59       1067.20    
  15  0.381325     -0.964105      -2.47311       2.47311       1068.79       1071.27    
  16  0.368149     -0.999267      -2.56331       2.56331       1070.64       1073.20    
  17  0.762585     -0.271042     -0.695275      0.695275       1073.62       1074.32    
  18  0.790018     -0.235700     -0.604616      0.604616       1075.40       1076.00    
  19  0.156980      -1.85163      -4.74980       4.74980       1075.47       1080.22    
  20  0.579774     -0.545116      -1.39833       1.39833       1074.35       1075.75    
  21  0.906727     -0.979137E-01 -0.251168      0.251168       1073.61       1073.86    
  22  0.210301      -1.55922      -3.99969       3.99969       1077.79       1081.79    
  23  0.752685     -0.284108     -0.728792      0.728792       1066.36       1067.09    
  24  0.162798E-01  -4.11783      -10.5630       10.5630       1077.54       1088.11    
  25  0.451422     -0.795354      -2.04024       2.04024       1077.74       1079.78    
  26  0.545943     -0.605240      -1.55256       1.55256       1080.20       1081.76    
  27  0.264638      -1.32939      -3.41015       3.41015       1083.56       1086.97    
  28  0.763507     -0.269833     -0.692174      0.692174       1087.08       1087.77    
  29  0.325754      -1.12161      -2.87715       2.87715       1088.22       1091.09    
  30  0.166837      -1.79074      -4.59359       4.59359       1086.84       1091.44    
  31  0.316780      -1.14955      -2.94881       2.94881       1087.44       1090.39    
  32  0.837666     -0.177136     -0.454388      0.454388       1091.47       1091.92    
  33  0.524790     -0.644757      -1.65393       1.65393       1093.20       1094.85    
  34  0.857916     -0.153249     -0.393114      0.393114       1087.38       1087.77    
  35  0.326689      -1.11875      -2.86980       2.86980       1093.21       1096.08    
  36  0.822390E-01  -2.49813      -6.40817       6.40817       1089.28       1095.69    
  37  0.686804     -0.375706     -0.963759      0.963759       1094.75       1095.71    
  38  0.964837     -0.357963E-01 -0.918243E-01  0.918243E-01   1091.65       1091.74    
  39  0.403522     -0.907524      -2.32797       2.32797       1088.31       1090.64    
  40  0.907874     -0.966498E-01 -0.247925      0.247925       1095.15       1095.39    
  41  0.112705      -2.18298      -5.59977       5.59977       1096.52       1102.12    
  42  0.820851     -0.197414     -0.506405      0.506405       1093.73       1094.24    
  43  0.858032     -0.153114     -0.392767      0.392767       1095.72       1096.12    
  44  0.276820      -1.28439      -3.29471       3.29471       1103.15       1106.44    
  45  0.449277     -0.800116      -2.05245       2.05245       1104.94       1106.99    
  46  0.320311      -1.13846      -2.92037       2.92037       1105.22       1108.14    
  47  0.972239     -0.281531E-01 -0.722183E-01  0.722183E-01   1105.02       1105.09    
  48  0.188436      -1.66899      -4.28129       4.28129       1098.08       1102.36    
  49  0.909331E-01  -2.39763      -6.15039       6.15039       1094.37       1100.52    
loop,thermsimp(1:2)        9   1.39162       2.83343    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    449       1116.48         68.02          1.13         38.99          2.58          0.05        110.77
Just calling func    0   0        110.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    450       1045.75         68.06          1.12         39.04          2.41          0.05        110.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1045.75
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:        9
neval is:      449
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       10
neval is:      449


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      449     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822534     -0.195365     -0.501149      0.501149       1004.51       1005.01    
   2  0.782240     -0.245594     -0.629996      0.629996       1033.31       1033.94    
   3  0.322553      -1.13149      -2.90248       2.90248       1045.14       1048.04    
   4  0.467356     -0.760663      -1.95125       1.95125       1052.93       1054.88    
   5  0.147968      -1.91076      -4.90147       4.90147       1055.64       1060.54    
   6  0.159889E-01  -4.13586      -10.6093       10.6093       1057.63       1068.24    
   7  0.562204     -0.575890      -1.47727       1.47727       1057.18       1058.66    
   8  0.299682      -1.20503      -3.09114       3.09114       1057.48       1060.57    
   9  0.859889     -0.150952     -0.387220      0.387220       1062.30       1062.69    
  10  0.587202     -0.532386      -1.36567       1.36567       1062.09       1063.46    
  11  0.815775     -0.203617     -0.522316      0.522316       1062.65       1063.17    
  12  0.480689     -0.732535      -1.87909       1.87909       1066.36       1068.24    
  13  0.183971      -1.69298      -4.34281       4.34281       1066.59       1070.93    
  14  0.541519     -0.613376      -1.57343       1.57343       1068.79       1070.37    
  15  0.731234     -0.313022     -0.802961      0.802961       1067.62       1068.42    
  16  0.174833      -1.74393      -4.47351       4.47351       1070.64       1075.11    
  17  0.922070     -0.811342E-01 -0.208125      0.208125       1065.60       1065.81    
  18  0.599606     -0.511483      -1.31205       1.31205       1073.61       1074.92    
  19  0.215130      -1.53651      -3.94145       3.94145       1073.62       1077.57    
  20  0.810923     -0.209582     -0.537618      0.537618       1074.35       1074.89    
  21  0.210280E-01  -3.86190      -9.90652       9.90652       1075.40       1085.30    
  22  0.346591      -1.05961      -2.71810       2.71810       1077.74       1080.46    
  23  0.110159      -2.20583      -5.65838       5.65838       1075.47       1081.13    
  24  0.987995     -0.120772E-01 -0.309803E-01  0.309803E-01   1080.20       1080.23    
  25  0.195218      -1.63364      -4.19060       4.19060       1077.79       1081.98    
  26  0.863860     -0.146344     -0.375402      0.375402       1083.56       1083.94    
  27  0.326895      -1.11811      -2.86818       2.86818       1087.08       1089.95    
  28  0.285040E-01  -3.55771      -9.12622       9.12622       1087.38       1096.50    
  29  0.203591      -1.59164      -4.08287       4.08287       1077.54       1081.63    
  30  0.371555     -0.990059      -2.53969       2.53969       1087.44       1089.98    
  31  0.478997     -0.736061      -1.88814       1.88814       1088.31       1090.20    
  32  0.619653     -0.478595      -1.22769       1.22769       1088.22       1089.44    
  33  0.196259      -1.62832      -4.17695       4.17695       1086.84       1091.02    
  34  0.983500     -0.166377E-01 -0.426789E-01  0.426789E-01   1091.65       1091.69    
  35  0.694342     -0.364791     -0.935759      0.935759       1091.47       1092.40    
  36  0.901452     -0.103749     -0.266136      0.266136       1093.73       1094.00    
  37  0.850762     -0.161623     -0.414595      0.414595       1093.20       1093.61    
  38  0.837702     -0.177093     -0.454277      0.454277       1095.15       1095.60    
  39  0.632938     -0.457383      -1.17328       1.17328       1089.28       1090.46    
  40  0.320271      -1.13859      -2.92069       2.92069       1094.75       1097.67    
  41  0.851600     -0.160638     -0.412068      0.412068       1093.21       1093.62    
  42  0.238024      -1.43538      -3.68203       3.68203       1095.72       1099.40    
  43  0.987040     -0.130443E-01 -0.334611E-01  0.334611E-01   1094.37       1094.41    
  44  0.901910     -0.103240     -0.264831      0.264831       1096.52       1096.78    
  45  0.124783      -2.08118      -5.33863       5.33863       1098.08       1103.42    
  46  0.564722     -0.571423      -1.46581       1.46581       1105.02       1106.49    
  47  0.106695E-01  -4.54036      -11.6469       11.6469       1103.15       1114.79    
  48  0.517678     -0.658402      -1.68893       1.68893       1104.94       1106.63    
  49  0.791575     -0.233731     -0.599564      0.599564       1045.75       1046.35    
loop,thermsimp(1:2)       10  0.501149      0.629996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    451       1101.08         67.98          1.12         38.79          2.63          0.05        110.56
Just calling func    0   0        110.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1101.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       10
neval is:      450
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       11
neval is:      450


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      450     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371518     -0.990158      -2.53995       2.53995       1004.51       1007.05    
   2  0.421352     -0.864286      -2.21706       2.21706       1033.31       1035.53    
   3  0.733796     -0.309524     -0.793989      0.793989       1045.75       1046.55    
   4  0.371282     -0.990794      -2.54158       2.54158       1045.14       1047.68    
   5  0.134163      -2.00870      -5.15271       5.15271       1052.93       1058.09    
   6  0.449085     -0.800544      -2.05355       2.05355       1057.18       1059.24    
   7  0.149770      -1.89865      -4.87041       4.87041       1055.64       1060.51    
   8  0.193351      -1.64325      -4.21525       4.21525       1057.48       1061.70    
   9  0.484872     -0.723871      -1.85687       1.85687       1062.30       1064.16    
  10  0.880665E-01  -2.42966      -6.23256       6.23256       1062.65       1068.88    
  11  0.744885     -0.294526     -0.755516      0.755516       1062.09       1062.85    
  12  0.342439      -1.07166      -2.74902       2.74902       1065.60       1068.35    
  13  0.422063     -0.862602      -2.21274       2.21274       1066.36       1068.57    
  14  0.509795     -0.673746      -1.72829       1.72829       1057.63       1059.36    
  15  0.968021     -0.325017E-01 -0.833732E-01  0.833732E-01   1067.62       1067.70    
  16  0.799941     -0.223218     -0.572597      0.572597       1068.79       1069.36    
  17  0.498769     -0.695612      -1.78438       1.78438       1066.59       1068.37    
  18  0.142481      -1.94855      -4.99841       4.99841       1074.35       1079.35    
  19  0.887657     -0.119170     -0.305694      0.305694       1073.61       1073.92    
  20  0.955972     -0.450263E-01 -0.115501      0.115501       1070.64       1070.75    
  21  0.226776      -1.48379      -3.80621       3.80621       1073.62       1077.43    
  22  0.300982      -1.20070      -3.08004       3.08004       1080.20       1083.28    
  23  0.161728      -1.82184      -4.67337       4.67337       1077.74       1082.41    
  24  0.650156     -0.430542      -1.10442       1.10442       1075.47       1076.58    
  25  0.310921E-01  -3.47080      -8.90328       8.90328       1077.54       1086.45    
  26  0.820549     -0.197781     -0.507347      0.507347       1077.79       1078.30    
  27  0.949162     -0.521757E-01 -0.133841      0.133841       1083.56       1083.70    
  28  0.461471     -0.773336      -1.98376       1.98376       1075.40       1077.38    
  29  0.325925      -1.12109      -2.87580       2.87580       1088.22       1091.09    
  30  0.251186      -1.38156      -3.54397       3.54397       1087.08       1090.62    
  31  0.520836     -0.652320      -1.67333       1.67333       1087.44       1089.11    
  32  0.339093      -1.08148      -2.77421       2.77421       1088.31       1091.08    
  33  0.876178     -0.132186     -0.339083      0.339083       1089.28       1089.62    
  34  0.664406     -0.408862      -1.04881       1.04881       1086.84       1087.89    
  35  0.415159     -0.879094      -2.25505       2.25505       1091.65       1093.90    
  36  0.733952     -0.309312     -0.793445      0.793445       1091.47       1092.26    
  37  0.475133     -0.744161      -1.90892       1.90892       1093.20       1095.11    
  38  0.361789      -1.01670      -2.60802       2.60802       1093.21       1095.81    
  39  0.111891      -2.19023      -5.61836       5.61836       1093.73       1099.35    
  40  0.123346      -2.09276      -5.36834       5.36834       1094.37       1099.74    
  41  0.282401      -1.26443      -3.24350       3.24350       1095.15       1098.39    
  42  0.397590     -0.922334      -2.36596       2.36596       1087.38       1089.74    
  43  0.123972      -2.08770      -5.35535       5.35535       1096.52       1101.87    
  44  0.830800     -0.185367     -0.475501      0.475501       1094.75       1095.22    
  45  0.743291     -0.296668     -0.761011      0.761011       1095.72       1096.48    
  46  0.569177     -0.563564      -1.44565       1.44565       1098.08       1099.53    
  47  0.333222      -1.09895      -2.81901       2.81901       1105.02       1107.84    
  48  0.748913     -0.289132     -0.741680      0.741680       1104.94       1105.68    
  49  0.552776E-01  -2.89539      -7.42723       7.42723       1101.08       1108.50    
loop,thermsimp(1:2)       11   2.53995       2.21706    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    452       1103.15         68.08          1.13         38.96          2.54          0.04        110.75
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1103.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       11
neval is:      451
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       12
neval is:      451


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      451     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932268     -0.701345E-01 -0.179908      0.179908       1004.51       1004.69    
   2  0.331032      -1.10554      -2.83592       2.83592       1033.31       1036.15    
   3  0.694616     -0.364396     -0.934745      0.934745       1045.75       1046.69    
   4  0.993646     -0.637431E-02 -0.163513E-01  0.163513E-01   1045.14       1045.16    
   5  0.400856E-01  -3.21674      -8.25156       8.25156       1052.93       1061.18    
   6  0.633880     -0.455896      -1.16946       1.16946       1057.18       1058.35    
   7  0.601200E-01  -2.81141      -7.21182       7.21182       1057.63       1064.84    
   8  0.649180     -0.432045      -1.10828       1.10828       1055.64       1056.74    
   9  0.870844E-01  -2.44088      -6.26132       6.26132       1057.48       1063.74    
  10  0.735510     -0.307191     -0.788004      0.788004       1062.09       1062.88    
  11  0.359321      -1.02354      -2.62558       2.62558       1062.30       1064.93    
  12  0.497555     -0.698048      -1.79063       1.79063       1067.62       1069.41    
  13  0.686901E-01  -2.67815      -6.86997       6.86997       1065.60       1072.47    
  14  0.906387     -0.982893E-01 -0.252131      0.252131       1066.59       1066.84    
  15  0.380970     -0.965035      -2.47550       2.47550       1066.36       1068.83    
  16  0.604774     -0.502900      -1.29004       1.29004       1062.65       1063.94    
  17  0.377061     -0.975348      -2.50196       2.50196       1068.79       1071.29    
  18  0.788907     -0.237107     -0.608225      0.608225       1070.64       1071.24    
  19  0.741706     -0.298802     -0.766485      0.766485       1073.61       1074.38    
  20  0.395286     -0.928145      -2.38087       2.38087       1075.47       1077.85    
  21  0.553847     -0.590867      -1.51569       1.51569       1075.40       1076.91    
  22  0.592268E-01  -2.82638      -7.25021       7.25021       1073.62       1080.87    
  23  0.667112     -0.404798      -1.03838       1.03838       1077.79       1078.83    
  24  0.544627     -0.607655      -1.55875       1.55875       1074.35       1075.91    
  25  0.438918     -0.823442      -2.11229       2.11229       1077.74       1079.85    
  26  0.748682     -0.289441     -0.742473      0.742473       1080.20       1080.95    
  27  0.457742     -0.781450      -2.00457       2.00457       1083.56       1085.57    
  28  0.917499     -0.861039E-01 -0.220873      0.220873       1077.54       1077.76    
  29  0.711098     -0.340945     -0.874589      0.874589       1086.84       1087.72    
  30  0.936268     -0.658531E-01 -0.168926      0.168926       1087.44       1087.61    
  31  0.677691     -0.389064     -0.998024      0.998024       1089.28       1090.28    
  32  0.154144      -1.86987      -4.79658       4.79658       1087.38       1092.17    
  33  0.375603     -0.979224      -2.51190       2.51190       1087.08       1089.59    
  34  0.470785     -0.753353      -1.93250       1.93250       1088.31       1090.24    
  35  0.306223E-01  -3.48603      -8.94233       8.94233       1088.22       1097.16    
  36  0.320903      -1.13662      -2.91564       2.91564       1091.47       1094.38    
  37  0.721169     -0.326882     -0.838515      0.838515       1091.65       1092.49    
  38  0.235217      -1.44725      -3.71247       3.71247       1093.20       1096.91    
  39  0.172480      -1.75747      -4.50825       4.50825       1094.75       1099.26    
  40  0.617596     -0.481920      -1.23622       1.23622       1093.21       1094.44    
  41  0.661285     -0.413571      -1.06089       1.06089       1095.72       1096.78    
  42  0.298445      -1.20917      -3.10176       3.10176       1095.15       1098.25    
  43  0.569437     -0.563107      -1.44448       1.44448       1093.73       1095.18    
  44  0.394309     -0.930621      -2.38722       2.38722       1098.08       1100.47    
  45  0.350094      -1.04955      -2.69230       2.69230       1094.37       1097.06    
  46  0.231248      -1.46427      -3.75613       3.75613       1096.52       1100.27    
  47  0.866839     -0.142902     -0.366570      0.366570       1104.94       1105.31    
  48  0.867322     -0.142344     -0.365141      0.365141       1105.02       1105.38    
  49  0.116953      -2.14598      -5.50486       5.50486       1103.15       1108.65    
loop,thermsimp(1:2)       12  0.179908       2.83592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    453       1101.08         68.04          1.12         38.91          2.22          0.05        110.34
Just calling func    0   0        110.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1101.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       12
neval is:      452
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       13
neval is:      452


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      452     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.922982E-01  -2.38273      -6.11216       6.11216       1004.51       1010.62    
   2  0.398313     -0.920518      -2.36131       2.36131       1033.31       1035.67    
   3  0.966781     -0.337829E-01 -0.866598E-01  0.866598E-01   1045.14       1045.23    
   4  0.834786     -0.180580     -0.463222      0.463222       1045.75       1046.22    
   5  0.897933     -0.107659     -0.276167      0.276167       1055.64       1055.91    
   6  0.754433     -0.281789     -0.722844      0.722844       1057.18       1057.91    
   7  0.365110      -1.00756      -2.58458       2.58458       1052.93       1055.52    
   8  0.153021      -1.87718      -4.81532       4.81532       1062.09       1066.91    
   9  0.269185      -1.31236      -3.36645       3.36645       1057.48       1060.85    
  10  0.343604      -1.06826      -2.74030       2.74030       1062.65       1065.39    
  11  0.834195E-01  -2.48387      -6.37161       6.37161       1057.63       1064.00    
  12  0.868931     -0.140491     -0.360387      0.360387       1062.30       1062.66    
  13  0.939794     -0.620944E-01 -0.159284      0.159284       1066.59       1066.75    
  14  0.618916     -0.479786      -1.23074       1.23074       1066.36       1067.59    
  15  0.486928     -0.719639      -1.84601       1.84601       1067.62       1069.46    
  16  0.573604     -0.555816      -1.42578       1.42578       1070.64       1072.06    
  17  0.172906      -1.75501      -4.50194       4.50194       1068.79       1073.29    
  18  0.100972      -2.29292      -5.88177       5.88177       1065.60       1071.48    
  19  0.152456      -1.88088      -4.82482       4.82482       1073.61       1078.44    
  20  0.663894     -0.409632      -1.05079       1.05079       1074.35       1075.40    
  21  0.529041     -0.636690      -1.63323       1.63323       1075.40       1077.03    
  22  0.388461     -0.945563      -2.42555       2.42555       1077.54       1079.97    
  23  0.785741     -0.241128     -0.618541      0.618541       1075.47       1076.09    
  24  0.620307     -0.477541      -1.22498       1.22498       1077.79       1079.02    
  25  0.948673     -0.526914E-01 -0.135164      0.135164       1077.74       1077.88    
  26  0.173123      -1.75375      -4.49872       4.49872       1073.62       1078.12    
  27  0.663060     -0.410890      -1.05401       1.05401       1080.20       1081.26    
  28  0.552682     -0.592972      -1.52109       1.52109       1083.56       1085.08    
  29  0.911932     -0.921901E-01 -0.236485      0.236485       1087.44       1087.67    
  30  0.587146     -0.532481      -1.36592       1.36592       1086.84       1088.21    
  31  0.620861     -0.476649      -1.22270       1.22270       1087.08       1088.30    
  32  0.757598     -0.277603     -0.712104      0.712104       1088.31       1089.02    
  33  0.970125     -0.303301E-01 -0.778025E-01  0.778025E-01   1089.28       1089.36    
  34  0.934482     -0.677634E-01 -0.173826      0.173826       1087.38       1087.55    
  35  0.455429     -0.786516      -2.01756       2.01756       1091.65       1093.66    
  36  0.489437     -0.714499      -1.83283       1.83283       1091.47       1093.30    
  37  0.462744E-01  -3.07317      -7.88327       7.88327       1093.21       1101.09    
  38  0.343684      -1.06803      -2.73971       2.73971       1093.73       1096.47    
  39  0.263559      -1.33348      -3.42063       3.42063       1095.72       1099.14    
  40  0.195654      -1.63141      -4.18488       4.18488       1093.20       1097.38    
  41  0.762134     -0.271632     -0.696790      0.696790       1094.37       1095.07    
  42  0.385726     -0.952629      -2.44368       2.44368       1088.22       1090.66    
  43  0.970876     -0.295568E-01 -0.758189E-01  0.758189E-01   1095.15       1095.22    
  44  0.517601     -0.658550      -1.68931       1.68931       1094.75       1096.44    
  45  0.587593E-01  -2.83431      -7.27054       7.27054       1096.52       1103.79    
  46  0.465074     -0.765558      -1.96380       1.96380       1098.08       1100.04    
  47  0.609046     -0.495862      -1.27198       1.27198       1104.94       1106.21    
  48  0.251442      -1.38054      -3.54136       3.54136       1105.02       1108.56    
  49  0.555227     -0.588378      -1.50930       1.50930       1101.08       1102.59    
loop,thermsimp(1:2)       13   6.11216       2.36131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    454       1191.49         68.04          1.13         38.98          2.52          0.05        110.72
Just calling func    0   0        110.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    455       1037.83         67.99          1.14         39.20          2.15          0.05        110.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1037.83
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       13
neval is:      454
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       14
neval is:      454


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      454     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.599112     -0.512306      -1.31416       1.31416       1004.51       1005.82    
   2  0.185288      -1.68584      -4.32451       4.32451       1033.31       1037.64    
   3  0.279580      -1.27447      -3.26925       3.26925       1045.14       1048.41    
   4  0.475871     -0.742608      -1.90493       1.90493       1045.75       1047.66    
   5  0.983460     -0.166786E-01 -0.427839E-01  0.427839E-01   1052.93       1052.98    
   6  0.969959     -0.305019E-01 -0.782432E-01  0.782432E-01   1055.64       1055.71    
   7  0.415873     -0.877376      -2.25064       2.25064       1057.18       1059.43    
   8  0.843097     -0.170673     -0.437809      0.437809       1057.48       1057.92    
   9  0.103621      -2.26701      -5.81532       5.81532       1062.30       1068.12    
  10  0.827012     -0.189936     -0.487223      0.487223       1057.63       1058.12    
  11  0.713709     -0.337280     -0.865189      0.865189       1062.65       1063.51    
  12  0.757171     -0.278166     -0.713550      0.713550       1066.59       1067.30    
  13  0.682415     -0.382118     -0.980206      0.980206       1062.09       1063.07    
  14  0.169850      -1.77284      -4.54768       4.54768       1066.36       1070.91    
  15  0.137912      -1.98114      -5.08201       5.08201       1067.62       1072.70    
  16  0.119797      -2.12195      -5.44322       5.44322       1065.60       1071.04    
  17  0.922340     -0.808412E-01 -0.207373      0.207373       1070.64       1070.84    
  18  0.840095     -0.174240     -0.446959      0.446959       1068.79       1069.24    
  19  0.676264     -0.391172      -1.00343       1.00343       1074.35       1075.36    
  20  0.191981      -1.65036      -4.23349       4.23349       1075.47       1079.71    
  21  0.528247     -0.638192      -1.63708       1.63708       1075.40       1077.03    
  22  0.450794     -0.796745      -2.04380       2.04380       1077.74       1079.78    
  23  0.808149     -0.213009     -0.546410      0.546410       1073.62       1074.17    
  24  0.179092      -1.71986      -4.41176       4.41176       1073.61       1078.02    
  25  0.728727     -0.316456     -0.811771      0.811771       1077.79       1078.60    
  26  0.719748     -0.328854     -0.843573      0.843573       1077.54       1078.39    
  27  0.357902      -1.02750      -2.63572       2.63572       1080.20       1082.84    
  28  0.665239     -0.407609      -1.04560       1.04560       1083.56       1084.61    
  29  0.338401      -1.08352      -2.77945       2.77945       1087.38       1090.16    
  30  0.455504     -0.786351      -2.01714       2.01714       1087.44       1089.45    
  31  0.422358E-01  -3.16449      -8.11752       8.11752       1086.84       1094.96    
  32  0.162108      -1.81949      -4.66735       4.66735       1087.08       1091.74    
  33  0.896138     -0.109661     -0.281302      0.281302       1088.31       1088.59    
  34  0.980701E-01  -2.32207      -5.95656       5.95656       1089.28       1095.24    
  35  0.950264     -0.510154E-01 -0.130864      0.130864       1088.22       1088.35    
  36  0.122991      -2.09565      -5.37573       5.37573       1091.47       1096.84    
  37  0.718373     -0.330767     -0.848480      0.848480       1091.65       1092.50    
  38  0.296907      -1.21434      -3.11501       3.11501       1094.37       1097.49    
  39  0.708585     -0.344486     -0.883673      0.883673       1095.15       1096.03    
  40  0.261253      -1.34227      -3.44317       3.44317       1094.75       1098.19    
  41  0.305559      -1.18561      -3.04132       3.04132       1093.73       1096.77    
  42  0.617226     -0.482519      -1.23776       1.23776       1093.20       1094.44    
  43  0.493544E-01  -3.00873      -7.71797       7.71797       1095.72       1103.44    
  44  0.225264      -1.49048      -3.82338       3.82338       1098.08       1101.90    
  45  0.131490      -2.02883      -5.20433       5.20433       1093.21       1098.41    
  46  0.850946     -0.161406     -0.414039      0.414039       1101.08       1101.49    
  47  0.237517      -1.43751      -3.68750       3.68750       1096.52       1100.21    
  48  0.302781      -1.19475      -3.06475       3.06475       1104.94       1108.00    
  49  0.205804      -1.58083      -4.05514       4.05514       1037.83       1041.89    
loop,thermsimp(1:2)       14   1.31416       4.32451    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    456       1121.93         68.06          1.11         38.90          2.69          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    457       1036.39         68.00          1.13         39.14          2.27          0.05        110.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1036.39
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       14
neval is:      456
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       15
neval is:      456


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      456     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.420890     -0.865383      -2.21987       2.21987       1004.51       1006.73    
   2  0.285132      -1.25480      -3.21881       3.21881       1033.31       1036.53    
   3  0.460665E-01  -3.07767      -7.89482       7.89482       1037.83       1045.73    
   4  0.971233     -0.291885E-01 -0.748740E-01  0.748740E-01   1045.75       1045.83    
   5  0.600439E-01  -2.81268      -7.21507       7.21507       1045.14       1052.36    
   6  0.952970     -0.481718E-01 -0.123570      0.123570       1052.93       1053.06    
   7  0.416605     -0.875617      -2.24613       2.24613       1055.64       1057.88    
   8  0.350276      -1.04903      -2.69097       2.69097       1057.48       1060.17    
   9  0.211258      -1.55467      -3.98804       3.98804       1057.63       1061.62    
  10  0.268913E-01  -3.61595      -9.27561       9.27561       1057.18       1066.46    
  11  0.246487      -1.40045      -3.59241       3.59241       1062.09       1065.69    
  12  0.837295     -0.177579     -0.455523      0.455523       1062.65       1063.10    
  13  0.343497      -1.06858      -2.74110       2.74110       1066.59       1069.33    
  14  0.976296     -0.239900E-01 -0.615389E-01  0.615389E-01   1062.30       1062.36    
  15  0.617570     -0.481963      -1.23633       1.23633       1068.79       1070.03    
  16  0.599441     -0.511758      -1.31276       1.31276       1070.64       1071.95    
  17  0.556766     -0.585610      -1.50220       1.50220       1066.36       1067.86    
  18  0.474984     -0.744475      -1.90972       1.90972       1065.60       1067.51    
  19  0.608207     -0.497240      -1.27552       1.27552       1067.62       1068.89    
  20  0.699514     -0.357370     -0.916722      0.916722       1073.62       1074.54    
  21  0.315591      -1.15331      -2.95846       2.95846       1074.35       1077.31    
  22  0.626925     -0.466928      -1.19776       1.19776       1075.40       1076.60    
  23  0.736823     -0.305408     -0.783430      0.783430       1073.61       1074.40    
  24  0.801749     -0.220960     -0.566806      0.566806       1077.54       1078.11    
  25  0.128079      -2.05510      -5.27174       5.27174       1077.79       1083.06    
  26  0.120118      -2.11928      -5.43636       5.43636       1075.47       1080.91    
  27  0.893214     -0.112929     -0.289684      0.289684       1077.74       1078.03    
  28  0.522618     -0.648904      -1.66456       1.66456       1080.20       1081.87    
  29  0.204056      -1.58936      -4.07702       4.07702       1083.56       1087.64    
  30  0.391878     -0.936804      -2.40308       2.40308       1088.22       1090.62    
  31  0.627452     -0.466089      -1.19561       1.19561       1088.31       1089.50    
  32  0.240488      -1.42509      -3.65562       3.65562       1087.44       1091.09    
  33  0.705929     -0.348241     -0.893305      0.893305       1087.38       1088.27    
  34  0.491002     -0.711306      -1.82464       1.82464       1087.08       1088.90    
  35  0.538395     -0.619162      -1.58827       1.58827       1091.65       1093.24    
  36  0.220833      -1.51035      -3.87433       3.87433       1093.20       1097.07    
  37  0.133511      -2.01357      -5.16520       5.16520       1086.84       1092.01    
  38  0.310483      -1.16963      -3.00032       3.00032       1089.28       1092.28    
  39  0.871017     -0.138093     -0.354236      0.354236       1095.15       1095.50    
  40  0.802109     -0.220510     -0.565652      0.565652       1093.73       1094.30    
  41  0.662318     -0.412009      -1.05688       1.05688       1091.47       1092.53    
  42  0.214000      -1.54178      -3.95496       3.95496       1094.37       1098.33    
  43  0.514688     -0.664194      -1.70378       1.70378       1094.75       1096.45    
  44  0.900118     -0.105230     -0.269935      0.269935       1093.21       1093.48    
  45  0.808205     -0.212939     -0.546231      0.546231       1096.52       1097.06    
  46  0.354487      -1.03708      -2.66032       2.66032       1101.08       1103.74    
  47  0.472469     -0.749783      -1.92334       1.92334       1098.08       1100.00    
  48  0.643540     -0.440770      -1.13066       1.13066       1095.72       1096.85    
  49  0.276975      -1.28383      -3.29327       3.29327       1036.39       1039.68    
loop,thermsimp(1:2)       15   2.21987       3.21881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    458       1097.92         67.99          1.13         39.03          2.67          0.05        110.87
Just calling func    0   0        110.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1097.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       15
neval is:      457
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       16
neval is:      457


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      457     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.351711      -1.04494      -2.68048       2.68048       1004.51       1007.19    
   2  0.446554     -0.806196      -2.06805       2.06805       1033.31       1035.38    
   3  0.499035     -0.695080      -1.78301       1.78301       1036.39       1038.17    
   4  0.912667     -0.913840E-01 -0.234418      0.234418       1037.83       1038.07    
   5  0.190815      -1.65645      -4.24912       4.24912       1045.75       1050.00    
   6  0.580538E-01  -2.84638      -7.30153       7.30153       1045.14       1052.44    
   7  0.379811     -0.968081      -2.48331       2.48331       1052.93       1055.42    
   8  0.413317E-01  -3.18613      -8.17303       8.17303       1055.64       1063.81    
   9  0.656412E-01  -2.72355      -6.98644       6.98644       1057.48       1064.47    
  10  0.327977      -1.11481      -2.85971       2.85971       1057.63       1060.49    
  11  0.289775E-01  -3.54124      -9.08395       9.08395       1062.30       1071.38    
  12  0.906603     -0.980504E-01 -0.251518      0.251518       1062.65       1062.90    
  13  0.672845     -0.396240      -1.01643       1.01643       1062.09       1063.11    
  14  0.770685     -0.260476     -0.668171      0.668171       1057.18       1057.85    
  15  0.858998     -0.151989     -0.389881      0.389881       1065.60       1065.99    
  16  0.928076     -0.746418E-01 -0.191471      0.191471       1066.36       1066.55    
  17  0.759965     -0.274484     -0.704103      0.704103       1067.62       1068.32    
  18  0.370372     -0.993247      -2.54787       2.54787       1066.59       1069.14    
  19  0.924580     -0.784161E-01 -0.201153      0.201153       1068.79       1068.99    
  20  0.986760     -0.133287E-01 -0.341908E-01  0.341908E-01   1070.64       1070.67    
  21  0.391274     -0.938348      -2.40704       2.40704       1073.61       1076.02    
  22  0.225004      -1.49164      -3.82634       3.82634       1073.62       1077.45    
  23  0.111834      -2.19074      -5.61967       5.61967       1075.40       1081.02    
  24  0.772679     -0.257892     -0.661543      0.661543       1074.35       1075.01    
  25  0.823786     -0.193845     -0.497250      0.497250       1077.74       1078.24    
  26  0.260636      -1.34463      -3.44924       3.44924       1077.54       1080.99    
  27  0.231902      -1.46144      -3.74887       3.74887       1075.47       1079.22    
  28  0.476798     -0.740663      -1.89994       1.89994       1080.20       1082.10    
  29  0.529578     -0.635676      -1.63063       1.63063       1077.79       1079.42    
  30  0.502254     -0.688650      -1.76652       1.76652       1083.56       1085.33    
  31  0.960912     -0.398724E-01 -0.102280      0.102280       1087.38       1087.48    
  32  0.824704     -0.192731     -0.494393      0.494393       1087.08       1087.57    
  33  0.947114     -0.543359E-01 -0.139382      0.139382       1088.31       1088.45    
  34  0.838762     -0.175829     -0.451035      0.451035       1088.22       1088.67    
  35  0.117179      -2.14405      -5.49991       5.49991       1087.44       1092.94    
  36  0.124953      -2.07981      -5.33513       5.33513       1086.84       1092.18    
  37  0.180085E-01  -4.01691      -10.3042       10.3042       1089.28       1099.59    
  38  0.417258     -0.874050      -2.24211       2.24211       1091.47       1093.71    
  39  0.658693     -0.417497      -1.07096       1.07096       1091.65       1092.72    
  40  0.836351     -0.178707     -0.458418      0.458418       1093.21       1093.67    
  41  0.674746     -0.393418      -1.00919       1.00919       1093.73       1094.74    
  42  0.600998     -0.509164      -1.30610       1.30610       1095.15       1096.45    
  43  0.696617     -0.361519     -0.927366      0.927366       1094.75       1095.68    
  44  0.978384     -0.218530E-01 -0.560571E-01  0.560571E-01   1095.72       1095.78    
  45  0.210888      -1.55643      -3.99253       3.99253       1096.52       1100.51    
  46  0.632852E-01  -2.76010      -7.08020       7.08020       1093.20       1100.28    
  47  0.512852     -0.667767      -1.71295       1.71295       1094.37       1096.09    
  48  0.611085     -0.492520      -1.26341       1.26341       1098.08       1099.34    
  49  0.711944     -0.339756     -0.871540      0.871540       1097.92       1098.80    
loop,thermsimp(1:2)       16   2.68048       2.06805    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    459       1081.00         68.07          1.13         39.04          2.61          0.05        110.90
Just calling func    0   0        110.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1081.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       16
neval is:      458
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       17
neval is:      458


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      458     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868687     -0.140773     -0.361109      0.361109       1004.51       1004.87    
   2  0.622683     -0.473718      -1.21518       1.21518       1033.31       1034.53    
   3  0.651914     -0.427842      -1.09750       1.09750       1037.83       1038.93    
   4  0.553842     -0.590876      -1.51571       1.51571       1036.39       1037.90    
   5  0.337973      -1.08479      -2.78270       2.78270       1045.75       1048.54    
   6  0.242640      -1.41618      -3.63277       3.63277       1045.14       1048.77    
   7  0.609172     -0.495655      -1.27145       1.27145       1052.93       1054.20    
   8  0.338499      -1.08323      -2.77870       2.77870       1057.18       1059.96    
   9  0.118472      -2.13308      -5.47175       5.47175       1057.63       1063.10    
  10  0.605491     -0.501716      -1.28700       1.28700       1062.65       1063.93    
  11  0.497482E-01  -3.00078      -7.69758       7.69758       1062.09       1069.79    
  12  0.347530      -1.05691      -2.71117       2.71117       1055.64       1058.35    
  13  0.414309E-01  -3.18373      -8.16688       8.16688       1057.48       1065.65    
  14  0.110553      -2.20226      -5.64922       5.64922       1065.60       1071.25    
  15  0.307437      -1.17948      -3.02560       3.02560       1066.36       1069.38    
  16  0.281641      -1.26712      -3.25042       3.25042       1067.62       1070.87    
  17  0.427972     -0.848697      -2.17707       2.17707       1068.79       1070.97    
  18  0.496057     -0.701064      -1.79836       1.79836       1066.59       1068.39    
  19  0.907084     -0.975199E-01 -0.250157      0.250157       1070.64       1070.89    
  20  0.592111     -0.524061      -1.34432       1.34432       1062.30       1063.64    
  21  0.826994     -0.189958     -0.487279      0.487279       1074.35       1074.84    
  22  0.279030      -1.27644      -3.27430       3.27430       1073.61       1076.89    
  23  0.654717     -0.423553      -1.08649       1.08649       1073.62       1074.71    
  24  0.796995     -0.226907     -0.582061      0.582061       1077.74       1078.32    
  25  0.654627E-01  -2.72627      -6.99342       6.99342       1075.47       1082.47    
  26  0.924427     -0.785809E-01 -0.201575      0.201575       1077.79       1077.99    
  27  0.298307      -1.20963      -3.10294       3.10294       1077.54       1080.65    
  28  0.944398     -0.572079E-01 -0.146749      0.146749       1075.40       1075.54    
  29  0.798146     -0.225464     -0.578359      0.578359       1080.20       1080.78    
  30  0.304773      -1.18819      -3.04793       3.04793       1083.56       1086.61    
  31  0.938512E-01  -2.36604      -6.06936       6.06936       1087.38       1093.45    
  32  0.483033     -0.727670      -1.86661       1.86661       1087.08       1088.94    
  33  0.761373     -0.272632     -0.699355      0.699355       1088.31       1089.01    
  34  0.122125      -2.10271      -5.39386       5.39386       1088.22       1093.61    
  35  0.704283     -0.350575     -0.899294      0.899294       1086.84       1087.74    
  36  0.907284     -0.972998E-01 -0.249593      0.249593       1091.65       1091.90    
  37  0.314579      -1.15652      -2.96670       2.96670       1087.44       1090.40    
  38  0.909859     -0.944657E-01 -0.242323      0.242323       1093.21       1093.45    
  39  0.386535     -0.950533      -2.43830       2.43830       1091.47       1093.91    
  40  0.891371     -0.114994     -0.294982      0.294982       1093.73       1094.03    
  41  0.144567      -1.93401      -4.96111       4.96111       1094.75       1099.71    
  42  0.344336E-01  -3.36872      -8.64142       8.64142       1095.72       1104.36    
  43  0.881575     -0.126045     -0.323329      0.323329       1094.37       1094.70    
  44  0.739451     -0.301847     -0.774297      0.774297       1095.15       1095.92    
  45  0.928626     -0.740488E-01 -0.189949      0.189949       1097.92       1098.11    
  46  0.382928     -0.959908      -2.46235       2.46235       1098.08       1100.54    
  47  0.556888     -0.585391      -1.50164       1.50164       1089.28       1090.79    
  48  0.479341     -0.735343      -1.88630       1.88630       1093.20       1095.08    
  49  0.592914     -0.522706      -1.34084       1.34084       1081.00       1082.34    
loop,thermsimp(1:2)       17  0.361109       1.21518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    460       1086.07         68.01          1.13         39.03          2.49          0.04        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1086.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       17
neval is:      459
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       18
neval is:      459


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      459     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.472884     -0.748904      -1.92108       1.92108       1004.51       1006.43    
   2  0.675464     -0.392355      -1.00647       1.00647       1033.31       1034.32    
   3  0.958431     -0.424575E-01 -0.108912      0.108912       1036.39       1036.49    
   4  0.721093     -0.326988     -0.838786      0.838786       1037.83       1038.67    
   5  0.635520     -0.453311      -1.16283       1.16283       1045.75       1046.92    
   6  0.738192     -0.303552     -0.778669      0.778669       1045.14       1045.92    
   7  0.504943     -0.683310      -1.75282       1.75282       1052.93       1054.69    
   8  0.559948     -0.579911      -1.48758       1.48758       1055.64       1057.12    
   9  0.561469     -0.577199      -1.48063       1.48063       1057.18       1058.66    
  10  0.467828     -0.759655      -1.94866       1.94866       1057.63       1059.58    
  11  0.288239      -1.24397      -3.19101       3.19101       1062.30       1065.49    
  12  0.410214     -0.891075      -2.28578       2.28578       1062.65       1064.93    
  13  0.527762     -0.639111      -1.63944       1.63944       1057.48       1059.12    
  14  0.186329      -1.68024      -4.31014       4.31014       1066.59       1070.90    
  15  0.924113     -0.789212E-01 -0.202448      0.202448       1066.36       1066.56    
  16  0.852662     -0.159392     -0.408872      0.408872       1062.09       1062.50    
  17  0.903782     -0.101167     -0.259512      0.259512       1067.62       1067.88    
  18  0.575891     -0.551837      -1.41557       1.41557       1070.64       1072.05    
  19  0.214801      -1.53804      -3.94538       3.94538       1068.79       1072.74    
  20  0.564777E-01  -2.87391      -7.37213       7.37213       1065.60       1072.97    
  21  0.621987     -0.474836      -1.21805       1.21805       1073.62       1074.84    
  22  0.785316     -0.241669     -0.619926      0.619926       1074.35       1074.97    
  23  0.910092     -0.942094E-01 -0.241665      0.241665       1075.40       1075.64    
  24  0.302832      -1.19458      -3.06432       3.06432       1073.61       1076.68    
  25  0.182175      -1.70279      -4.36797       4.36797       1077.79       1082.16    
  26  0.112568      -2.18420      -5.60289       5.60289       1077.74       1083.34    
  27  0.912404     -0.916724E-01 -0.235157      0.235157       1077.54       1077.78    
  28  0.503463     -0.686245      -1.76035       1.76035       1080.20       1081.96    
  29  0.454725     -0.788063      -2.02153       2.02153       1081.00       1083.02    
  30  0.173768      -1.75003      -4.48917       4.48917       1075.47       1079.96    
  31  0.415873     -0.877376      -2.25064       2.25064       1083.56       1085.81    
  32  0.766054     -0.266502     -0.683629      0.683629       1086.84       1087.53    
  33  0.129655      -2.04288      -5.24037       5.24037       1087.08       1092.32    
  34  0.985651     -0.144527E-01 -0.370740E-01  0.370740E-01   1088.31       1088.35    
  35  0.418861     -0.870217      -2.23227       2.23227       1087.44       1089.67    
  36  0.311313      -1.16696      -2.99347       2.99347       1089.28       1092.28    
  37  0.434284     -0.834057      -2.13952       2.13952       1091.65       1093.79    
  38  0.548842     -0.599944      -1.53897       1.53897       1087.38       1088.92    
  39  0.878632     -0.129389     -0.331907      0.331907       1093.21       1093.54    
  40  0.582787     -0.539934      -1.38503       1.38503       1088.22       1089.60    
  41  0.976868     -0.234034E-01 -0.600343E-01  0.600343E-01   1091.47       1091.53    
  42  0.751254     -0.286012     -0.733676      0.733676       1093.73       1094.47    
  43  0.674066     -0.394427      -1.01178       1.01178       1094.37       1095.38    
  44  0.854180     -0.157614     -0.404310      0.404310       1093.20       1093.60    
  45  0.670037E-01  -2.70301      -6.93374       6.93374       1095.15       1102.08    
  46  0.569693     -0.562658      -1.44333       1.44333       1097.92       1099.37    
  47  0.571975     -0.558661      -1.43307       1.43307       1094.75       1096.18    
  48  0.691289     -0.369198     -0.947063      0.947063       1098.08       1099.03    
  49  0.489152     -0.715083      -1.83433       1.83433       1086.07       1087.90    
loop,thermsimp(1:2)       18   1.92108       1.00647    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    461       1140.04         68.00          1.13         38.95          2.69          0.05        110.82
Just calling func    0   0        110.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    462       1067.62         68.07          1.13         39.44          1.84          0.05        110.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  460    1140.0        3.013     -3.056      4.204     -102.6     0.3595    
                      0.2421E-01 0.8182     -99.70      4.946      1.659    

                       3.266     -1.911      1.894      7054.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.563      0.000      0.000      7000.      682.2    

                      -1.263     -6.913     -7.053     -7.850      8.951    

                      -5.205     -3.949      4757.      0.000      7205.    



                       2597.      6392.      5981.      3202.      4138.    

                       4440.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.897     -1.679     -2.147     -2.178    -0.3807    

                     -0.3252      9.779      8.461    -0.1598E+05 -5.099    

                     -0.4151     -2.395      9.003      9.071    -0.1969E+05



                      -6.000     0.4517    -0.2230      9.003      8.923    

                     -0.1944E+05 -6.000     -1.153    -0.7064      9.697    

                       9.371    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1067.62
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       18
neval is:      461
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       19
neval is:      461


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      461     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933067     -0.692784E-01 -0.177712      0.177712       1004.51       1004.69    
   2  0.145621      -1.92675      -4.94247       4.94247       1033.31       1038.25    
   3  0.824080     -0.193487     -0.496333      0.496333       1036.39       1036.88    
   4  0.495241     -0.702711      -1.80259       1.80259       1037.83       1039.63    
   5  0.239042      -1.43112      -3.67109       3.67109       1045.14       1048.81    
   6  0.167453      -1.78705      -4.58413       4.58413       1045.75       1050.34    
   7  0.409279     -0.893358      -2.29164       2.29164       1052.93       1055.22    
   8  0.536324     -0.623017      -1.59816       1.59816       1055.64       1057.23    
   9  0.697150     -0.360755     -0.925406      0.925406       1057.18       1058.11    
  10  0.141562      -1.95502      -5.01500       5.01500       1057.48       1062.50    
  11  0.225624      -1.48889      -3.81928       3.81928       1057.63       1061.45    
  12  0.153144      -1.87638      -4.81327       4.81327       1062.09       1066.91    
  13  0.561596     -0.576973      -1.48005       1.48005       1062.65       1064.13    
  14  0.430163     -0.843592      -2.16398       2.16398       1062.30       1064.46    
  15  0.905216     -0.995811E-01 -0.255445      0.255445       1066.36       1066.61    
  16  0.568360     -0.565000      -1.44933       1.44933       1067.62       1069.07    
  17  0.378285     -0.972108      -2.49364       2.49364       1066.59       1069.08    
  18  0.164072      -1.80745      -4.63646       4.63646       1070.64       1075.27    
  19  0.158717      -1.84063      -4.72157       4.72157       1068.79       1073.51    
  20  0.664145     -0.409255      -1.04982       1.04982       1065.60       1066.65    
  21  0.325635      -1.12198      -2.87809       2.87809       1073.62       1076.50    
  22  0.148489      -1.90725      -4.89246       4.89246       1074.35       1079.24    
  23  0.367680      -1.00054      -2.56658       2.56658       1075.40       1077.96    
  24  0.417596     -0.873242      -2.24003       2.24003       1073.61       1075.85    
  25  0.401862     -0.911646      -2.33855       2.33855       1077.54       1079.88    
  26  0.105239E-01  -4.55411      -11.6822       11.6822       1075.47       1087.15    
  27  0.587188     -0.532410      -1.36573       1.36573       1080.20       1081.57    
  28  0.284127      -1.25833      -3.22787       3.22787       1077.79       1081.02    
  29  0.869365     -0.139992     -0.359108      0.359108       1081.00       1081.36    
  30  0.736143E-01  -2.60892      -6.69238       6.69238       1077.74       1084.43    
  31  0.494320E-01  -3.00716      -7.71394       7.71394       1083.56       1091.28    
  32  0.633016     -0.457260      -1.17296       1.17296       1086.84       1088.02    
  33  0.499988     -0.693171      -1.77812       1.77812       1086.07       1087.84    
  34  0.552781     -0.592793      -1.52063       1.52063       1088.31       1089.83    
  35  0.854618E-01  -2.45969      -6.30957       6.30957       1087.38       1093.69    
  36  0.816312     -0.202959     -0.520628      0.520628       1088.22       1088.74    
  37  0.632597     -0.457921      -1.17466       1.17466       1087.44       1088.61    
  38  0.433466     -0.835942      -2.14435       2.14435       1091.47       1093.61    
  39  0.230856      -1.46596      -3.76047       3.76047       1089.28       1093.04    
  40  0.190541      -1.65789      -4.25280       4.25280       1087.08       1091.33    
  41  0.178324      -1.72416      -4.42279       4.42279       1093.21       1097.63    
  42  0.227176      -1.48203      -3.80169       3.80169       1093.20       1097.00    
  43  0.152649      -1.87961      -4.82157       4.82157       1091.65       1096.47    
  44  0.496683     -0.699804      -1.79513       1.79513       1093.73       1095.53    
  45  0.274448      -1.29300      -3.31678       3.31678       1094.37       1097.69    
  46  0.172783      -1.75572      -4.50376       4.50376       1094.75       1099.25    
  47  0.708684     -0.344346     -0.883313      0.883313       1098.08       1098.96    
  48  0.157838      -1.84618      -4.73582       4.73582       1097.92       1102.66    
  49  0.724663     -0.322049     -0.826118      0.826118       1067.62       1068.45    
loop,thermsimp(1:2)       19  0.177712       4.94247    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    463       1092.25         67.97          1.12         38.90          2.46          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1092.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       19
neval is:      462
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       20
neval is:      462


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      462     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.203517      -1.59201      -4.08380       4.08380       1004.51       1008.59    
   2  0.880178     -0.127631     -0.327397      0.327397       1036.39       1036.71    
   3  0.253527      -1.37229      -3.52018       3.52018       1033.31       1036.83    
   4  0.546502E-01  -2.90680      -7.45651       7.45651       1037.83       1045.29    
   5  0.489477     -0.714418      -1.83262       1.83262       1045.14       1046.97    
   6  0.178572      -1.72276      -4.41922       4.41922       1045.75       1050.17    
   7  0.948413     -0.529648E-01 -0.135865      0.135865       1052.93       1053.07    
   8  0.572919E-01  -2.85960      -7.33542       7.33542       1055.64       1062.97    
   9  0.615738     -0.484933      -1.24395       1.24395       1057.18       1058.43    
  10  0.885735     -0.121338     -0.311255      0.311255       1057.63       1057.94    
  11  0.997446     -0.255722E-02 -0.655977E-02  0.655977E-02   1057.48       1057.49    
  12  0.349545      -1.05112      -2.69634       2.69634       1062.65       1065.34    
  13  0.988454     -0.116130E-01 -0.297895E-01  0.297895E-01   1062.30       1062.33    
  14  0.809478     -0.211366     -0.542195      0.542195       1066.36       1066.90    
  15  0.978310     -0.219291E-01 -0.562524E-01  0.562524E-01   1065.60       1065.66    
  16  0.808711     -0.212313     -0.544625      0.544625       1062.09       1062.64    
  17  0.447445     -0.804202      -2.06293       2.06293       1067.62       1069.69    
  18  0.495992     -0.701195      -1.79870       1.79870       1067.62       1069.41    
  19  0.208359      -1.56849      -4.02349       4.02349       1066.59       1070.61    
  20  0.707030     -0.346682     -0.889307      0.889307       1068.79       1069.68    
  21  0.991175     -0.886425E-02 -0.227385E-01  0.227385E-01   1070.64       1070.66    
  22  0.744436     -0.295129     -0.757063      0.757063       1073.61       1074.37    
  23  0.475151     -0.744124      -1.90882       1.90882       1073.62       1075.53    
  24  0.403355     -0.907939      -2.32904       2.32904       1075.40       1077.73    
  25  0.182881      -1.69892      -4.35806       4.35806       1074.35       1078.71    
  26  0.862815     -0.147554     -0.378506      0.378506       1077.54       1077.92    
  27  0.771181     -0.259832     -0.666518      0.666518       1077.79       1078.46    
  28  0.139364      -1.97067      -5.05514       5.05514       1081.00       1086.06    
  29  0.563421     -0.573729      -1.47173       1.47173       1080.20       1081.68    
  30  0.308851      -1.17490      -3.01384       3.01384       1077.74       1080.75    
  31  0.785605     -0.241301     -0.618983      0.618983       1075.47       1076.09    
  32  0.233686      -1.45378      -3.72922       3.72922       1086.07       1089.79    
  33  0.145397      -1.92829      -4.94643       4.94643       1086.84       1091.79    
  34  0.620323     -0.477515      -1.22492       1.22492       1087.44       1088.66    
  35  0.454958     -0.787550      -2.02022       2.02022       1088.22       1090.24    
  36  0.362353      -1.01514      -2.60402       2.60402       1088.31       1090.91    
  37  0.368968     -0.997045      -2.55761       2.55761       1083.56       1086.12    
  38  0.623077E-01  -2.77567      -7.12013       7.12013       1087.08       1094.20    
  39  0.764087     -0.269074     -0.690226      0.690226       1089.28       1089.97    
  40  0.326593      -1.11904      -2.87056       2.87056       1091.47       1094.34    
  41  0.665656     -0.406982      -1.04399       1.04399       1087.38       1088.42    
  42  0.518212     -0.657371      -1.68628       1.68628       1093.73       1095.42    
  43  0.416207     -0.876573      -2.24858       2.24858       1091.65       1093.90    
  44  0.704568     -0.350170     -0.898254      0.898254       1093.20       1094.10    
  45  0.391395     -0.938039      -2.40625       2.40625       1093.21       1095.61    
  46  0.253982      -1.37049      -3.51557       3.51557       1094.37       1097.89    
  47  0.373757     -0.984150      -2.52453       2.52453       1098.08       1100.61    
  48  0.866113     -0.143740     -0.368721      0.368721       1094.75       1095.12    
  49  0.938299     -0.636861E-01 -0.163367      0.163367       1092.25       1092.41    
loop,thermsimp(1:2)       20   4.08380      0.327397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    464       1024.28         68.03          1.11         39.13          2.28          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1024.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       20
neval is:      463
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       21
neval is:      463


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      463     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.689627     -0.371605     -0.953238      0.953238       1004.51       1005.46    
   2  0.933435     -0.688844E-01 -0.176702      0.176702       1036.39       1036.56    
   3  0.416629     -0.875559      -2.24598       2.24598       1033.31       1035.56    
   4  0.562207     -0.575885      -1.47726       1.47726       1037.83       1039.31    
   5  0.966630     -0.339391E-01 -0.870603E-01  0.870603E-01   1045.14       1045.23    
   6  0.202933      -1.59488      -4.09118       4.09118       1045.75       1049.84    
   7  0.288024E-01  -3.54730      -9.09950       9.09950       1052.93       1062.03    
   8  0.585249     -0.535717      -1.37422       1.37422       1057.48       1058.86    
   9  0.210785      -1.55692      -3.99379       3.99379       1057.63       1061.62    
  10  0.672731     -0.396410      -1.01687       1.01687       1057.18       1058.20    
  11  0.313600      -1.15964      -2.97470       2.97470       1062.30       1065.28    
  12  0.429692     -0.844687      -2.16679       2.16679       1062.09       1064.26    
  13  0.714979     -0.335502     -0.860627      0.860627       1055.64       1056.50    
  14  0.806283     -0.215320     -0.552339      0.552339       1062.65       1063.20    
  15  0.105187      -2.25202      -5.77686       5.77686       1065.60       1071.38    
  16  0.397355     -0.922926      -2.36748       2.36748       1066.36       1068.73    
  17  0.452880     -0.792128      -2.03196       2.03196       1067.62       1069.65    
  18  0.272764      -1.29915      -3.33257       3.33257       1068.79       1072.12    
  19  0.696828     -0.361217     -0.926591      0.926591       1067.62       1068.55    
  20  0.667523     -0.404182      -1.03680       1.03680       1066.59       1067.63    
  21  0.137545      -1.98380      -5.08883       5.08883       1070.64       1075.73    
  22  0.486889     -0.719719      -1.84622       1.84622       1073.61       1075.46    
  23  0.973404     -0.269564E-01 -0.691484E-01  0.691484E-01   1073.62       1073.69    
  24  0.210453      -1.55849      -3.99784       3.99784       1075.47       1079.47    
  25  0.459577     -0.777448      -1.99430       1.99430       1075.40       1077.39    
  26  0.278675      -1.27771      -3.27757       3.27757       1077.54       1080.82    
  27  0.280962      -1.26954      -3.25660       3.25660       1077.79       1081.05    
  28  0.105764      -2.24655      -5.76283       5.76283       1074.35       1080.11    
  29  0.500220     -0.692707      -1.77693       1.77693       1077.74       1079.52    
  30  0.791031     -0.234418     -0.601327      0.601327       1080.20       1080.80    
  31  0.856506     -0.154894     -0.397332      0.397332       1081.00       1081.40    
  32  0.904280     -0.100617     -0.258101      0.258101       1083.56       1083.82    
  33  0.332181      -1.10207      -2.82703       2.82703       1087.38       1090.20    
  34  0.904309     -0.100585     -0.258019      0.258019       1087.44       1087.70    
  35  0.763590E-01  -2.57231      -6.59847       6.59847       1086.07       1092.66    
  36  0.703213     -0.352095     -0.903191      0.903191       1089.28       1090.19    
  37  0.332441      -1.10129      -2.82503       2.82503       1088.22       1091.04    
  38  0.445914     -0.807629      -2.07172       2.07172       1088.31       1090.38    
  39  0.154208      -1.86946      -4.79551       4.79551       1086.84       1091.64    
  40  0.815735     -0.203666     -0.522443      0.522443       1092.25       1092.77    
  41  0.210583      -1.55788      -3.99625       3.99625       1091.65       1095.64    
  42  0.839155     -0.175360     -0.449832      0.449832       1093.20       1093.65    
  43  0.930787     -0.717244E-01 -0.183987      0.183987       1087.08       1087.26    
  44  0.754433     -0.281789     -0.722844      0.722844       1091.47       1092.19    
  45  0.708066     -0.345218     -0.885551      0.885551       1094.75       1095.63    
  46  0.488874     -0.715650      -1.83578       1.83578       1093.73       1095.57    
  47  0.646527     -0.436140      -1.11878       1.11878       1093.21       1094.33    
  48  0.446057E-01  -3.10989      -7.97748       7.97748       1094.37       1102.35    
  49  0.337164      -1.08719      -2.78884       2.78884       1024.28       1027.07    
loop,thermsimp(1:2)       21  0.953238      0.176702    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    465       1108.64         68.00          1.12         38.92          2.42          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    466       1056.35         68.05          1.11         38.82          2.79          0.04        110.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1056.35
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       21
neval is:      465
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       22
neval is:      465


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      465     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.564979     -0.570967      -1.46464       1.46464       1004.51       1005.97    
   2  0.649914     -0.430915      -1.10538       1.10538       1024.28       1025.38    
   3  0.234494      -1.45033      -3.72037       3.72037       1033.31       1037.03    
   4  0.250059      -1.38606      -3.55550       3.55550       1036.39       1039.94    
   5  0.396140     -0.925987      -2.37533       2.37533       1037.83       1040.21    
   6  0.587608     -0.531696      -1.36390       1.36390       1045.14       1046.51    
   7  0.216174      -1.53167      -3.92903       3.92903       1045.75       1049.68    
   8  0.344171      -1.06662      -2.73608       2.73608       1055.64       1058.37    
   9  0.898582     -0.106937     -0.274315      0.274315       1057.18       1057.46    
  10  0.269335      -1.31180      -3.36502       3.36502       1057.48       1060.85    
  11  0.506240     -0.680744      -1.74624       1.74624       1057.63       1059.38    
  12  0.469054     -0.757038      -1.94195       1.94195       1052.93       1054.87    
  13  0.599330     -0.511942      -1.31323       1.31323       1062.65       1063.96    
  14  0.850776     -0.161606     -0.414550      0.414550       1062.09       1062.51    
  15  0.411587     -0.887735      -2.27721       2.27721       1062.30       1064.58    
  16  0.690925     -0.369723     -0.948412      0.948412       1066.59       1067.54    
  17  0.539174     -0.617717      -1.58456       1.58456       1067.62       1069.21    
  18  0.268467      -1.31503      -3.37330       3.37330       1066.36       1069.73    
  19  0.413033     -0.884227      -2.26821       2.26821       1067.62       1069.88    
  20  0.535238     -0.625044      -1.60336       1.60336       1065.60       1067.20    
  21  0.407229     -0.898380      -2.30452       2.30452       1068.79       1071.10    
  22  0.486369E-01  -3.02337      -7.75553       7.75553       1073.62       1081.38    
  23  0.176950      -1.73189      -4.44263       4.44263       1073.61       1078.05    
  24  0.891669     -0.114660     -0.294125      0.294125       1070.64       1070.93    
  25  0.985364     -0.147443E-01 -0.378220E-01  0.378220E-01   1075.40       1075.44    
  26  0.779121E-01  -2.55217      -6.54682       6.54682       1075.47       1082.02    
  27  0.198695      -1.61599      -4.14531       4.14531       1077.74       1081.89    
  28  0.966734     -0.338319E-01 -0.867854E-01  0.867854E-01   1074.35       1074.44    
  29  0.230243      -1.46862      -3.76729       3.76729       1080.20       1083.97    
  30  0.996515     -0.349094E-02 -0.895494E-02  0.895494E-02   1077.54       1077.55    
  31  0.299142      -1.20684      -3.09577       3.09577       1077.79       1080.89    
  32  0.204924      -1.58512      -4.06613       4.06613       1081.00       1085.07    
  33  0.229288      -1.47278      -3.77795       3.77795       1083.56       1087.34    
  34  0.263068      -1.33534      -3.42542       3.42542       1087.08       1090.50    
  35  0.535099     -0.625303      -1.60402       1.60402       1087.44       1089.04    
  36  0.461620     -0.773013      -1.98293       1.98293       1089.28       1091.27    
  37  0.110748      -2.20050      -5.64470       5.64470       1087.38       1093.02    
  38  0.972332     -0.280583E-01 -0.719749E-01  0.719749E-01   1088.31       1088.38    
  39  0.273306      -1.29716      -3.32747       3.32747       1088.22       1091.54    
  40  0.197973      -1.61962      -4.15465       4.15465       1086.84       1091.00    
  41  0.541456     -0.613494      -1.57373       1.57373       1091.47       1093.04    
  42  0.740418     -0.300540     -0.770943      0.770943       1086.07       1086.84    
  43  0.818704     -0.200033     -0.513124      0.513124       1092.25       1092.76    
  44  0.639833     -0.446547      -1.14548       1.14548       1093.20       1094.34    
  45  0.883244E-01  -2.42674      -6.22505       6.22505       1093.21       1099.43    
  46  0.379012     -0.970189      -2.48872       2.48872       1093.73       1096.22    
  47  0.629399     -0.462989      -1.18766       1.18766       1094.75       1095.94    
  48  0.447172     -0.804811      -2.06450       2.06450       1091.65       1093.71    
  49  0.639763     -0.446657      -1.14576       1.14576       1056.35       1057.50    
loop,thermsimp(1:2)       22   1.46464       1.10538    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    467       1087.57         67.99          1.12         38.96          2.57          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1087.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       22
neval is:      466
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       23
neval is:      466


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      466     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.856405     -0.155012     -0.397635      0.397635       1004.51       1004.91    
   2  0.202381      -1.59760      -4.09816       4.09816       1024.28       1028.38    
   3  0.468782E-01  -3.06020      -7.85001       7.85001       1033.31       1041.16    
   4  0.881899     -0.125678     -0.322388      0.322388       1036.39       1036.71    
   5  0.651671     -0.428215      -1.09845       1.09845       1037.83       1038.93    
   6  0.568610     -0.564561      -1.44821       1.44821       1045.14       1046.59    
   7  0.897617     -0.108012     -0.277071      0.277071       1045.75       1046.03    
   8  0.679451     -0.386471     -0.991372      0.991372       1052.93       1053.92    
   9  0.134747      -2.00436      -5.14157       5.14157       1057.18       1062.32    
  10  0.196368      -1.62776      -4.17553       4.17553       1056.35       1060.52    
  11  0.530475     -0.633983      -1.62629       1.62629       1055.64       1057.26    
  12  0.109926      -2.20794      -5.66380       5.66380       1057.63       1063.29    
  13  0.329932      -1.10887      -2.84446       2.84446       1057.48       1060.33    
  14  0.315682E-01  -3.45560      -8.86429       8.86429       1062.09       1070.96    
  15  0.398644     -0.919687      -2.35917       2.35917       1062.65       1065.01    
  16  0.735606E-01  -2.60965      -6.69424       6.69424       1062.30       1068.99    
  17  0.926864     -0.759486E-01 -0.194823      0.194823       1065.60       1065.79    
  18  0.951427E-01  -2.35238      -6.03430       6.03430       1066.59       1072.62    
  19  0.649794     -0.431100      -1.10586       1.10586       1067.62       1068.73    
  20  0.753721     -0.282733     -0.725265      0.725265       1066.36       1067.08    
  21  0.481624     -0.730591      -1.87411       1.87411       1067.62       1069.49    
  22  0.767971E-01  -2.56659      -6.58379       6.58379       1070.64       1077.22    
  23  0.138368      -1.97784      -5.07353       5.07353       1068.79       1073.87    
  24  0.989715     -0.103379E-01 -0.265187E-01  0.265187E-01   1074.35       1074.38    
  25  0.641675     -0.443673      -1.13811       1.13811       1075.40       1076.54    
  26  0.200623      -1.60633      -4.12054       4.12054       1077.54       1081.66    
  27  0.938705     -0.632541E-01 -0.162259      0.162259       1073.61       1073.77    
  28  0.749560     -0.288270     -0.739467      0.739467       1077.79       1078.53    
  29  0.889204     -0.117428     -0.301226      0.301226       1073.62       1073.92    
  30  0.534697     -0.626056      -1.60595       1.60595       1077.74       1079.35    
  31  0.899645E-01  -2.40834      -6.17786       6.17786       1075.47       1081.65    
  32  0.982602     -0.175515E-01 -0.450230E-01  0.450230E-01   1080.20       1080.25    
  33  0.662698     -0.411436      -1.05541       1.05541       1081.00       1082.06    
  34  0.275577      -1.28889      -3.30625       3.30625       1086.07       1089.37    
  35  0.585503     -0.535284      -1.37311       1.37311       1083.56       1084.93    
  36  0.394027     -0.931335      -2.38905       2.38905       1088.31       1090.70    
  37  0.333190      -1.09904      -2.81925       2.81925       1087.44       1090.26    
  38  0.789561     -0.236278     -0.606100      0.606100       1087.08       1087.68    
  39  0.772800     -0.257734     -0.661138      0.661138       1086.84       1087.50    
  40  0.752121     -0.284858     -0.730715      0.730715       1089.28       1090.02    
  41  0.757220     -0.278101     -0.713382      0.713382       1088.22       1088.93    
  42  0.715721     -0.334464     -0.857965      0.857965       1092.25       1093.11    
  43  0.494872     -0.703457      -1.80450       1.80450       1087.38       1089.18    
  44  0.100481      -2.29779      -5.89427       5.89427       1091.47       1097.36    
  45  0.791863     -0.233367     -0.598631      0.598631       1091.65       1092.25    
  46  0.947382     -0.540532E-01 -0.138657      0.138657       1093.20       1093.34    
  47  0.150069      -1.89666      -4.86531       4.86531       1094.75       1099.61    
  48  0.183117      -1.69763      -4.35474       4.35474       1093.73       1098.09    
  49  0.501919     -0.689317      -1.76823       1.76823       1087.57       1089.34    
loop,thermsimp(1:2)       23  0.397635       4.09816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    468        972.50         68.08          1.13         39.09          2.64          0.05        111.00
Just calling func    0   0        111.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    469       1151.97         67.98          1.12         39.21          2.20          0.04        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    972.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       23
neval is:      468
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       24
neval is:      468


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      468     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265794      -1.32503      -3.39896       3.39896       1004.51       1007.91    
   2  0.873295     -0.135482     -0.347538      0.347538       1024.28       1024.63    
   3  0.876467E-01  -2.43444      -6.24481       6.24481       1036.39       1042.63    
   4  0.629921     -0.462161      -1.18553       1.18553       1037.83       1039.02    
   5  0.434473     -0.833621      -2.13840       2.13840       1033.31       1035.45    
   6  0.346377      -1.06023      -2.71969       2.71969       1045.75       1048.47    
   7  0.140231      -1.96447      -5.03923       5.03923       1045.14       1050.18    
   8  0.162246      -1.81864      -4.66516       4.66516       1052.93       1057.60    
   9  0.944643     -0.569479E-01 -0.146082      0.146082       1055.64       1055.78    
  10  0.612757     -0.489786      -1.25640       1.25640       1057.48       1058.74    
  11  0.154744      -1.86598      -4.78661       4.78661       1056.35       1061.14    
  12  0.357361      -1.02901      -2.63961       2.63961       1057.18       1059.82    
  13  0.370792     -0.992115      -2.54497       2.54497       1057.63       1060.18    
  14  0.309247      -1.17361      -3.01055       3.01055       1062.65       1065.66    
  15  0.779381E-01  -2.55184      -6.54596       6.54596       1065.60       1072.14    
  16  0.364445      -1.00938      -2.58926       2.58926       1066.36       1068.95    
  17  0.952507     -0.486574E-01 -0.124816      0.124816       1067.62       1067.75    
  18  0.449458     -0.799713      -2.05142       2.05142       1062.30       1064.35    
  19  0.561996     -0.576261      -1.47822       1.47822       1067.62       1069.09    
  20  0.143909      -1.93857      -4.97281       4.97281       1062.09       1067.07    
  21  0.433671     -0.835469      -2.14314       2.14314       1066.59       1068.73    
  22  0.774330     -0.255758     -0.656068      0.656068       1073.61       1074.27    
  23  0.671881     -0.397673      -1.02011       1.02011       1068.79       1069.81    
  24  0.233384      -1.45507      -3.73254       3.73254       1073.62       1077.36    
  25  0.715887     -0.334233     -0.857371      0.857371       1074.35       1075.21    
  26  0.279781      -1.27375      -3.26741       3.26741       1075.40       1078.66    
  27  0.139405      -1.97037      -5.05439       5.05439       1070.64       1075.69    
  28  0.869999     -0.139263     -0.357236      0.357236       1077.79       1078.15    
  29  0.890395     -0.116090     -0.297793      0.297793       1077.74       1078.04    
  30  0.453873     -0.789939      -2.02635       2.02635       1080.20       1082.23    
  31  0.688263     -0.373584     -0.958315      0.958315       1075.47       1076.43    
  32  0.349244      -1.05198      -2.69854       2.69854       1077.54       1080.24    
  33  0.508404     -0.676478      -1.73530       1.73530       1081.00       1082.74    
  34  0.235381      -1.44655      -3.71068       3.71068       1083.56       1087.27    
  35  0.487606     -0.718247      -1.84244       1.84244       1086.84       1088.68    
  36  0.275193      -1.29028      -3.30982       3.30982       1087.08       1090.39    
  37  0.844440E-01  -2.47167      -6.34030       6.34030       1088.22       1094.56    
  38  0.788178     -0.238031     -0.610596      0.610596       1087.38       1087.99    
  39  0.517452     -0.658838      -1.69005       1.69005       1087.57       1089.26    
  40  0.970281     -0.301699E-01 -0.773917E-01  0.773917E-01   1086.07       1086.14    
  41  0.298448      -1.20916      -3.10173       3.10173       1089.28       1092.39    
  42  0.269978      -1.30941      -3.35890       3.35890       1087.44       1090.80    
  43  0.368791     -0.997524      -2.55884       2.55884       1088.31       1090.87    
  44  0.613443     -0.488668      -1.25353       1.25353       1091.65       1092.90    
  45  0.227206      -1.48190      -3.80135       3.80135       1092.25       1096.05    
  46  0.232743      -1.45782      -3.73959       3.73959       1093.20       1096.94    
  47  0.350471      -1.04848      -2.68955       2.68955       1091.47       1094.16    
  48  0.546200     -0.604770      -1.55135       1.55135       1093.73       1095.28    
  49  0.427816     -0.849063      -2.17801       2.17801       972.502       974.680    
loop,thermsimp(1:2)       24   3.39896      0.347538    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    470       1061.41         68.05          1.12         39.02          2.42          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1061.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       24
neval is:      469
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       25
neval is:      469


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      469     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.959463E-01  -2.34397      -6.01273       6.01273       972.502       978.515    
   2  0.865442     -0.144515     -0.370708      0.370708       1004.51       1004.88    
   3  0.429385     -0.845402      -2.16862       2.16862       1024.28       1026.45    
   4  0.880624     -0.127125     -0.326100      0.326100       1033.31       1033.64    
   5  0.364430      -1.00942      -2.58936       2.58936       1037.83       1040.42    
   6  0.546634     -0.603976      -1.54931       1.54931       1036.39       1037.94    
   7  0.822212     -0.195757     -0.502154      0.502154       1045.75       1046.25    
   8  0.269693      -1.31047      -3.36161       3.36161       1045.14       1048.50    
   9  0.956342     -0.446399E-01 -0.114510      0.114510       1055.64       1055.75    
  10  0.428299     -0.847933      -2.17511       2.17511       1052.93       1055.11    
  11  0.284104      -1.25841      -3.22807       3.22807       1057.48       1060.71    
  12  0.901656     -0.103523     -0.265555      0.265555       1057.18       1057.45    
  13  0.650355     -0.430237      -1.10364       1.10364       1057.63       1058.73    
  14  0.247865E-01  -3.69745      -9.48469       9.48469       1056.35       1065.83    
  15  0.830009     -0.186319     -0.477945      0.477945       1062.30       1062.78    
  16  0.997155     -0.284877E-02 -0.730763E-02  0.730763E-02   1062.65       1062.65    
  17  0.377729     -0.973578      -2.49741       2.49741       1062.09       1064.59    
  18  0.767426     -0.264713     -0.679040      0.679040       1067.62       1068.30    
  19  0.472642     -0.749418      -1.92240       1.92240       1066.59       1068.51    
  20  0.984438     -0.156839E-01 -0.402323E-01  0.402323E-01   1066.36       1066.40    
  21  0.785656     -0.241236     -0.618817      0.618817       1067.62       1068.23    
  22  0.886488     -0.120488     -0.309075      0.309075       1068.79       1069.10    
  23  0.514796     -0.663984      -1.70325       1.70325       1065.60       1067.30    
  24  0.414154     -0.881517      -2.26126       2.26126       1073.61       1075.87    
  25  0.335573      -1.09192      -2.80098       2.80098       1074.35       1077.15    
  26  0.479386     -0.735249      -1.88606       1.88606       1070.64       1072.52    
  27  0.422990     -0.860406      -2.20711       2.20711       1075.47       1077.68    
  28  0.300375      -1.20272      -3.08522       3.08522       1073.62       1076.71    
  29  0.485328     -0.722931      -1.85446       1.85446       1077.74       1079.59    
  30  0.430750     -0.842227      -2.16047       2.16047       1077.79       1079.95    
  31  0.798866     -0.224562     -0.576046      0.576046       1075.40       1075.97    
  32  0.775112     -0.254747     -0.653476      0.653476       1077.54       1078.20    
  33  0.356073      -1.03262      -2.64887       2.64887       1080.20       1082.85    
  34  0.129729      -2.04230      -5.23890       5.23890       1081.00       1086.24    
  35  0.910417     -0.938521E-01 -0.240749      0.240749       1086.07       1086.31    
  36  0.563102     -0.574294      -1.47317       1.47317       1083.56       1085.03    
  37  0.210518      -1.55819      -3.99705       3.99705       1087.38       1091.37    
  38  0.284252      -1.25789      -3.22674       3.22674       1086.84       1090.07    
  39  0.472723     -0.749246      -1.92196       1.92196       1087.57       1089.49    
  40  0.499442     -0.694264      -1.78092       1.78092       1087.08       1088.86    
  41  0.324329      -1.12600      -2.88840       2.88840       1087.44       1090.33    
  42  0.470185     -0.754630      -1.93577       1.93577       1088.31       1090.24    
  43  0.957455     -0.434769E-01 -0.111527      0.111527       1089.28       1089.40    
  44  0.452290     -0.793433      -2.03531       2.03531       1091.65       1093.68    
  45  0.941069     -0.607383E-01 -0.155806      0.155806       1091.47       1091.62    
  46  0.566208     -0.568794      -1.45907       1.45907       1088.22       1089.68    
  47  0.537483E-01  -2.92344      -7.49920       7.49920       1093.73       1101.23    
  48  0.105024E-01  -4.55615      -11.6874       11.6874       1092.25       1103.94    
  49  0.963769     -0.369035E-01 -0.946647E-01  0.946647E-01   1061.41       1061.51    
loop,thermsimp(1:2)       25   6.01273      0.370708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    471       1097.30         68.03          1.13         38.96          2.53          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1097.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       25
neval is:      470
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       26
neval is:      470


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      470     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.554230     -0.590175      -1.51391       1.51391       972.502       974.016    
   2  0.579741     -0.545174      -1.39848       1.39848       1004.51       1005.91    
   3  0.824455E-01  -2.49562      -6.40174       6.40174       1024.28       1030.68    
   4  0.315100      -1.15486      -2.96245       2.96245       1033.31       1036.27    
   5  0.275555      -1.28897      -3.30645       3.30645       1036.39       1039.69    
   6  0.634682     -0.454632      -1.16622       1.16622       1037.83       1039.00    
   7  0.671828E-01  -2.70034      -6.92689       6.92689       1045.75       1052.68    
   8  0.843963     -0.169647     -0.435176      0.435176       1045.14       1045.58    
   9  0.801288     -0.221535     -0.568279      0.568279       1052.93       1053.50    
  10  0.386583     -0.950409      -2.43798       2.43798       1055.64       1058.07    
  11  0.436986     -0.827854      -2.12361       2.12361       1057.18       1059.31    
  12  0.469599     -0.755876      -1.93897       1.93897       1057.63       1059.57    
  13  0.104412E-02  -6.86458      -17.6090       17.6090       1057.48       1075.09    
  14  0.615471     -0.485368      -1.24506       1.24506       1061.41       1062.66    
  15  0.819025     -0.199640     -0.512116      0.512116       1062.65       1063.16    
  16  0.448367     -0.802144      -2.05765       2.05765       1062.30       1064.36    
  17  0.810334E-01  -2.51289      -6.44606       6.44606       1062.09       1068.54    
  18  0.589831     -0.527920      -1.35422       1.35422       1056.35       1057.70    
  19  0.772888E-01  -2.56021      -6.56742       6.56742       1066.36       1072.93    
  20  0.929898E-01  -2.37527      -6.09301       6.09301       1065.60       1071.69    
  21  0.772792     -0.257745     -0.661167      0.661167       1067.62       1068.28    
  22  0.471913     -0.750961      -1.92636       1.92636       1067.62       1069.55    
  23  0.797459     -0.226325     -0.580568      0.580568       1066.59       1067.17    
  24  0.457939     -0.781019      -2.00347       2.00347       1068.79       1070.80    
  25  0.578405     -0.547481      -1.40439       1.40439       1070.64       1072.04    
  26  0.359256      -1.02372      -2.62604       2.62604       1073.61       1076.24    
  27  0.125054      -2.07901      -5.33306       5.33306       1075.40       1080.73    
  28  0.348647      -1.05370      -2.70293       2.70293       1073.62       1076.33    
  29  0.103177      -2.27131      -5.82634       5.82634       1074.35       1080.18    
  30  0.429994     -0.843983      -2.16498       2.16498       1075.47       1077.64    
  31  0.872975     -0.135849     -0.348478      0.348478       1077.54       1077.89    
  32  0.968061     -0.324600E-01 -0.832662E-01  0.832662E-01   1077.74       1077.82    
  33  0.876099     -0.132276     -0.339314      0.339314       1077.79       1078.13    
  34  0.935178     -0.670183E-01 -0.171915      0.171915       1080.20       1080.38    
  35  0.111536      -2.19340      -5.62651       5.62651       1083.56       1089.19    
  36  0.119639      -2.12328      -5.44661       5.44661       1081.00       1086.45    
  37  0.598442     -0.513426      -1.31704       1.31704       1086.07       1087.38    
  38  0.711442     -0.340462     -0.873350      0.873350       1087.08       1087.95    
  39  0.747494     -0.291029     -0.746547      0.746547       1089.28       1090.03    
  40  0.262451      -1.33769      -3.43144       3.43144       1087.57       1091.00    
  41  0.845864     -0.167397     -0.429406      0.429406       1088.22       1088.65    
  42  0.544636     -0.607637      -1.55871       1.55871       1086.84       1088.40    
  43  0.538840     -0.618336      -1.58615       1.58615       1088.31       1089.89    
  44  0.408773     -0.894595      -2.29481       2.29481       1087.44       1089.73    
  45  0.251694      -1.37954      -3.53879       3.53879       1087.38       1090.92    
  46  0.157458      -1.84860      -4.74201       4.74201       1091.47       1096.21    
  47  0.342548      -1.07134      -2.74820       2.74820       1091.65       1094.40    
  48  0.869179     -0.140207     -0.359657      0.359657       1093.73       1094.09    
  49  0.922210     -0.809826E-01 -0.207736      0.207736       1097.30       1097.51    
loop,thermsimp(1:2)       26   1.51391       1.39848    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    472       1092.25         67.99          1.12         38.77          2.60          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1092.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       26
neval is:      471
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       27
neval is:      471


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      471     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.813982     -0.205818     -0.527962      0.527962       972.502       973.030    
   2  0.422453     -0.861677      -2.21037       2.21037       1004.51       1006.72    
   3  0.267874      -1.31724      -3.37897       3.37897       1024.28       1027.66    
   4  0.997565     -0.243750E-02 -0.625266E-02  0.625266E-02   1033.31       1033.32    
   5  0.514426     -0.664704      -1.70509       1.70509       1037.83       1039.54    
   6  0.171371      -1.76393      -4.52481       4.52481       1036.39       1040.91    
   7  0.704975     -0.349593     -0.896773      0.896773       1045.14       1046.04    
   8  0.499351     -0.694446      -1.78139       1.78139       1045.75       1047.53    
   9  0.736092     -0.306400     -0.785974      0.785974       1052.93       1053.72    
  10  0.696210     -0.362104     -0.928866      0.928866       1056.35       1057.28    
  11  0.273943      -1.29484      -3.32151       3.32151       1055.64       1058.96    
  12  0.656583     -0.420706      -1.07919       1.07919       1057.18       1058.26    
  13  0.817424     -0.201597     -0.517136      0.517136       1057.63       1058.15    
  14  0.504203     -0.684776      -1.75658       1.75658       1061.41       1063.17    
  15  0.342344E-02  -5.67711      -14.5629       14.5629       1062.65       1077.21    
  16  0.471380     -0.752090      -1.92926       1.92926       1062.30       1064.23    
  17  0.232484      -1.45893      -3.74245       3.74245       1066.59       1070.33    
  18  0.529795     -0.635264      -1.62958       1.62958       1067.62       1069.25    
  19  0.548384E-01  -2.90336      -7.44769       7.44769       1062.09       1069.54    
  20  0.759160     -0.275543     -0.706822      0.706822       1067.62       1068.33    
  21  0.658961     -0.417090      -1.06992       1.06992       1068.79       1069.86    
  22  0.955072E-01  -2.34855      -6.02449       6.02449       1065.60       1071.62    
  23  0.762274     -0.271449     -0.696320      0.696320       1070.64       1071.33    
  24  0.595126     -0.518983      -1.33129       1.33129       1066.36       1067.69    
  25  0.994859     -0.515414E-02 -0.132214E-01  0.132214E-01   1057.48       1057.50    
  26  0.547413     -0.602551      -1.54566       1.54566       1073.61       1075.16    
  27  0.206450      -1.57770      -4.04710       4.04710       1073.62       1077.67    
  28  0.889164     -0.117473     -0.301341      0.301341       1075.47       1075.77    
  29  0.882620     -0.124861     -0.320292      0.320292       1077.74       1078.06    
  30  0.273437      -1.29668      -3.32624       3.32624       1077.54       1080.87    
  31  0.239281      -1.43012      -3.66853       3.66853       1077.79       1081.46    
  32  0.465716     -0.764179      -1.96027       1.96027       1074.35       1076.31    
  33  0.624834     -0.470270      -1.20633       1.20633       1080.20       1081.41    
  34  0.124872      -2.08047      -5.33680       5.33680       1075.40       1080.73    
  35  0.583860E-01  -2.84068      -7.28689       7.28689       1081.00       1088.29    
  36  0.605356     -0.501938      -1.28757       1.28757       1086.07       1087.35    
  37  0.842898     -0.170909     -0.438415      0.438415       1087.08       1087.52    
  38  0.170482      -1.76913      -4.53815       4.53815       1086.84       1091.38    
  39  0.631284     -0.460000      -1.17999       1.17999       1088.22       1089.40    
  40  0.914443     -0.894405E-01 -0.229432      0.229432       1083.56       1083.79    
  41  0.237545      -1.43740      -3.68721       3.68721       1087.44       1091.12    
  42  0.128470      -2.05206      -5.26393       5.26393       1088.31       1093.57    
  43  0.672502E-01  -2.69933      -6.92431       6.92431       1089.28       1096.21    
  44  0.625851     -0.468643      -1.20216       1.20216       1087.38       1088.58    
  45  0.289455      -1.23976      -3.18021       3.18021       1087.57       1090.75    
  46  0.426490     -0.852166      -2.18597       2.18597       1093.73       1095.92    
  47  0.639309     -0.447367      -1.14758       1.14758       1091.65       1092.79    
  48  0.930228     -0.723259E-01 -0.185530      0.185530       1091.47       1091.65    
  49  0.487433     -0.718603      -1.84335       1.84335       1092.25       1094.09    
loop,thermsimp(1:2)       27  0.527962       2.21037    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    473       1051.84         68.04          1.12         39.25          2.21          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       27
neval is:      472
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       28
neval is:      472


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      472     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852012     -0.160155     -0.410828      0.410828       972.502       972.913    
   2  0.209759      -1.56179      -4.00630       4.00630       1004.51       1008.52    
   3  0.231672      -1.46243      -3.75142       3.75142       1024.28       1028.03    
   4  0.552784     -0.592788      -1.52062       1.52062       1033.31       1034.83    
   5  0.298066      -1.21044      -3.10501       3.10501       1037.83       1040.94    
   6  0.982229E-01  -2.32052      -5.95257       5.95257       1036.39       1042.34    
   7  0.513244     -0.667004      -1.71099       1.71099       1045.14       1046.85    
   8  0.506896     -0.679450      -1.74292       1.74292       1045.75       1047.50    
   9  0.253686      -1.37166      -3.51857       3.51857       1052.93       1056.45    
  10  0.464337     -0.767145      -1.96787       1.96787       1056.35       1058.32    
  11  0.620988     -0.476443      -1.22217       1.22217       1057.48       1058.70    
  12  0.833370     -0.182278     -0.467578      0.467578       1057.63       1058.10    
  13  0.536169     -0.623305      -1.59890       1.59890       1057.18       1058.78    
  14  0.686501E-01  -2.67873      -6.87147       6.87147       1055.64       1062.51    
  15  0.623564     -0.472305      -1.21155       1.21155       1061.41       1062.62    
  16  0.329641      -1.10975      -2.84673       2.84673       1062.30       1065.15    
  17  0.779151     -0.249551     -0.640146      0.640146       1066.36       1067.00    
  18  0.104603      -2.25758      -5.79113       5.79113       1067.62       1073.41    
  19  0.483984     -0.725704      -1.86157       1.86157       1067.62       1069.48    
  20  0.466377E-02  -5.36793      -13.7698       13.7698       1062.09       1075.86    
  21  0.172152      -1.75938      -4.51314       4.51314       1068.79       1073.31    
  22  0.178201      -1.72484      -4.42455       4.42455       1066.59       1071.02    
  23  0.151142      -1.88954      -4.84703       4.84703       1070.64       1075.48    
  24  0.784508     -0.242699     -0.622569      0.622569       1065.60       1066.22    
  25  0.821620E-01  -2.49906      -6.41058       6.41058       1073.61       1080.02    
  26  0.647136     -0.435199      -1.11637       1.11637       1075.47       1076.59    
  27  0.971377     -0.290411E-01 -0.744961E-01  0.744961E-01   1074.35       1074.43    
  28  0.461755     -0.772720      -1.98218       1.98218       1062.65       1064.63    
  29  0.485420     -0.722742      -1.85397       1.85397       1073.62       1075.48    
  30  0.674473     -0.393823      -1.01023       1.01023       1077.74       1078.75    
  31  0.166592      -1.79221      -4.59737       4.59737       1075.40       1079.99    
  32  0.829538     -0.186886     -0.479399      0.479399       1077.54       1078.02    
  33  0.489716     -0.713930      -1.83137       1.83137       1080.20       1082.03    
  34  0.604698     -0.503025      -1.29036       1.29036       1077.79       1079.08    
  35  0.113505      -2.17591      -5.58162       5.58162       1083.56       1089.14    
  36  0.148871      -1.90468      -4.88587       4.88587       1086.07       1090.95    
  37  0.882645     -0.124832     -0.320218      0.320218       1087.08       1087.40    
  38  0.987071     -0.130131E-01 -0.333812E-01  0.333812E-01   1081.00       1081.03    
  39  0.170536      -1.76881      -4.53734       4.53734       1087.38       1091.91    
  40  0.390345     -0.940725      -2.41314       2.41314       1088.22       1090.63    
  41  0.386025     -0.951852      -2.44169       2.44169       1087.57       1090.01    
  42  0.727498     -0.318144     -0.816101      0.816101       1087.44       1088.25    
  43  0.953502     -0.476138E-01 -0.122139      0.122139       1086.84       1086.96    
  44  0.586364     -0.533814      -1.36934       1.36934       1091.47       1092.84    
  45  0.127618      -2.05871      -5.28100       5.28100       1091.65       1096.93    
  46  0.949787     -0.515174E-01 -0.132152      0.132152       1088.31       1088.44    
  47  0.565431E-01  -2.87275      -7.36917       7.36917       1092.25       1099.62    
  48  0.163563      -1.81056      -4.64443       4.64443       1093.73       1098.38    
  49  0.698306     -0.359097     -0.921154      0.921154       1051.84       1052.76    
loop,thermsimp(1:2)       28  0.410828       4.00630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    474       1089.82         68.00          1.13         38.98          2.67          0.05        110.83
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1089.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       28
neval is:      473
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       29
neval is:      473


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      473     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.135635      -1.99779      -5.12471       5.12471       972.502       977.627    
   2  0.466467     -0.762568      -1.95613       1.95613       1004.51       1006.47    
   3  0.996991     -0.301356E-02 -0.773037E-02  0.773037E-02   1024.28       1024.29    
   4  0.987682     -0.123943E-01 -0.317938E-01  0.317938E-01   1033.31       1033.34    
   5  0.890927     -0.115493     -0.296261      0.296261       1037.83       1038.13    
   6  0.103802      -2.26527      -5.81085       5.81085       1036.39       1042.20    
   7  0.139960      -1.96640      -5.04419       5.04419       1045.14       1050.19    
   8  0.695795     -0.362701     -0.930397      0.930397       1045.75       1046.68    
   9  0.916952     -0.867001E-01 -0.222402      0.222402       1051.84       1052.06    
  10  0.581368     -0.542371      -1.39129       1.39129       1052.93       1054.32    
  11  0.187466      -1.67416      -4.29454       4.29454       1057.63       1061.93    
  12  0.623424E-01  -2.77511      -7.11870       7.11870       1056.35       1063.47    
  13  0.493048     -0.707150      -1.81398       1.81398       1057.48       1059.30    
  14  0.713995     -0.336879     -0.864160      0.864160       1057.18       1058.05    
  15  0.891065     -0.115338     -0.295864      0.295864       1055.64       1055.93    
  16  0.993625     -0.639581E-02 -0.164065E-01  0.164065E-01   1061.41       1061.43    
  17  0.783715     -0.243710     -0.625162      0.625162       1062.65       1063.27    
  18  0.419875     -0.867798      -2.22607       2.22607       1062.30       1064.53    
  19  0.551915E-01  -2.89695      -7.43123       7.43123       1065.60       1073.03    
  20  0.119723E-01  -4.42516      -11.3514       11.3514       1066.36       1077.71    
  21  0.814729E-01  -2.50749      -6.43218       6.43218       1067.62       1074.05    
  22  0.493283E-01  -3.00926      -7.71933       7.71933       1066.59       1074.31    
  23  0.292111      -1.23062      -3.15678       3.15678       1068.79       1071.95    
  24  0.274028      -1.29452      -3.32071       3.32071       1067.62       1070.94    
  25  0.890535     -0.115933     -0.297390      0.297390       1074.35       1074.65    
  26  0.533395     -0.628494      -1.61221       1.61221       1073.62       1075.24    
  27  0.584910     -0.536297      -1.37571       1.37571       1070.64       1072.01    
  28  0.120755      -2.11400      -5.42281       5.42281       1062.09       1067.52    
  29  0.129784      -2.04188      -5.23783       5.23783       1075.47       1080.71    
  30  0.847769     -0.165147     -0.423633      0.423633       1077.54       1077.97    
  31  0.507636E-02  -5.28316      -13.5523       13.5523       1077.74       1091.29    
  32  0.616094     -0.484356      -1.24247       1.24247       1077.79       1079.03    
  33  0.845796     -0.167477     -0.429611      0.429611       1075.40       1075.83    
  34  0.597816     -0.514471      -1.31972       1.31972       1073.61       1074.93    
  35  0.857431     -0.153814     -0.394563      0.394563       1081.00       1081.39    
  36  0.236721      -1.44087      -3.69612       3.69612       1080.20       1083.90    
  37  0.136539      -1.99114      -5.10767       5.10767       1086.84       1091.95    
  38  0.221208      -1.50865      -3.86999       3.86999       1087.08       1090.95    
  39  0.886558     -0.120409     -0.308872      0.308872       1087.44       1087.75    
  40  0.751951     -0.285084     -0.731294      0.731294       1088.31       1089.04    
  41  0.753705     -0.282754     -0.725318      0.725318       1083.56       1084.29    
  42  0.164791      -1.80308      -4.62525       4.62525       1087.57       1092.20    
  43  0.953278     -0.478482E-01 -0.122740      0.122740       1088.22       1088.34    
  44  0.331556E-01  -3.40654      -8.73844       8.73844       1086.07       1094.80    
  45  0.255217      -1.36564      -3.50313       3.50313       1087.38       1090.88    
  46  0.526999     -0.640556      -1.64315       1.64315       1091.47       1093.11    
  47  0.395268     -0.928192      -2.38099       2.38099       1091.65       1094.03    
  48  0.962043     -0.386965E-01 -0.992640E-01  0.992640E-01   1093.73       1093.83    
  49  0.679414     -0.386524     -0.991510      0.991510       1089.82       1090.81    
loop,thermsimp(1:2)       29   5.12471       1.95613    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    475       1084.73         67.99          1.14         38.97          2.50          0.05        110.65
Just calling func    0   0        110.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1084.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       29
neval is:      474
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       30
neval is:      474


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      474     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.893826     -0.112244     -0.287928      0.287928       972.502       972.790    
   2  0.789139     -0.236813     -0.607471      0.607471       1004.51       1005.12    
   3  0.113205      -2.17856      -5.58842       5.58842       1024.28       1029.87    
   4  0.932851     -0.695093E-01 -0.178305      0.178305       1033.31       1033.49    
   5  0.580843     -0.543275      -1.39361       1.39361       1037.83       1039.23    
   6  0.477157     -0.739910      -1.89801       1.89801       1036.39       1038.28    
   7  0.813629     -0.206251     -0.529073      0.529073       1045.75       1046.28    
   8  0.727881     -0.317617     -0.814749      0.814749       1045.14       1045.96    
   9  0.169642      -1.77406      -4.55082       4.55082       1051.84       1056.39    
  10  0.563630     -0.573357      -1.47077       1.47077       1052.93       1054.40    
  11  0.317079      -1.14861      -2.94640       2.94640       1055.64       1058.58    
  12  0.902994E-01  -2.40462      -6.16833       6.16833       1057.18       1063.35    
  13  0.611698     -0.491517      -1.26084       1.26084       1057.48       1058.74    
  14  0.131317E-01  -4.33273      -11.1143       11.1143       1061.41       1072.53    
  15  0.626257     -0.467994      -1.20050       1.20050       1057.63       1058.83    
  16  0.158325      -1.84311      -4.72793       4.72793       1062.65       1067.38    
  17  0.138715E-01  -4.27792      -10.9737       10.9737       1056.35       1067.32    
  18  0.294347      -1.22299      -3.13722       3.13722       1062.30       1065.44    
  19  0.419766E-02  -5.47323      -14.0399       14.0399       1062.09       1076.13    
  20  0.674961     -0.393101      -1.00838       1.00838       1067.62       1068.63    
  21  0.440021     -0.820933      -2.10585       2.10585       1068.79       1070.90    
  22  0.224595      -1.49346      -3.83100       3.83100       1070.64       1074.47    
  23  0.406007     -0.901384      -2.31222       2.31222       1065.60       1067.91    
  24  0.839997     -0.174357     -0.447258      0.447258       1067.62       1068.06    
  25  0.633085     -0.457151      -1.17268       1.17268       1066.59       1067.76    
  26  0.931306     -0.711679E-01 -0.182559      0.182559       1074.35       1074.53    
  27  0.844161E-01  -2.47200      -6.34115       6.34115       1073.61       1079.95    
  28  0.206778      -1.57611      -4.04303       4.04303       1073.62       1077.67    
  29  0.883296     -0.124095     -0.318327      0.318327       1075.40       1075.72    
  30  0.365391      -1.00679      -2.58260       2.58260       1066.36       1068.94    
  31  0.708566     -0.344513     -0.883741      0.883741       1077.54       1078.43    
  32  0.955974     -0.450251E-01 -0.115498      0.115498       1077.79       1077.91    
  33  0.726164     -0.319980     -0.820809      0.820809       1075.47       1076.29    
  34  0.318762      -1.14331      -2.93281       2.93281       1081.00       1083.93    
  35  0.622782     -0.473559      -1.21477       1.21477       1080.20       1081.42    
  36  0.869570E-01  -2.44234      -6.26508       6.26508       1083.56       1089.83    
  37  0.281748E-01  -3.56933      -9.15602       9.15602       1087.44       1096.59    
  38  0.238758      -1.43231      -3.67414       3.67414       1088.22       1091.89    
  39  0.655045     -0.423052      -1.08521       1.08521       1088.31       1089.39    
  40  0.337836      -1.08519      -2.78373       2.78373       1089.82       1092.60    
  41  0.625010     -0.469988      -1.20561       1.20561       1087.38       1088.58    
  42  0.346197E-01  -3.36333      -8.62760       8.62760       1087.08       1095.71    
  43  0.378697     -0.971019      -2.49085       2.49085       1077.74       1080.23    
  44  0.714474     -0.336208     -0.862439      0.862439       1086.84       1087.70    
  45  0.729924     -0.314815     -0.807563      0.807563       1087.57       1088.38    
  46  0.184188      -1.69180      -4.33980       4.33980       1091.47       1095.81    
  47  0.909154     -0.952407E-01 -0.244311      0.244311       1093.73       1093.98    
  48  0.270892E-01  -3.60862      -9.25681       9.25681       1091.65       1100.90    
  49  0.746152     -0.292826     -0.751155      0.751155       1084.73       1085.48    
loop,thermsimp(1:2)       30  0.287928      0.607471    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    476       1055.53         68.01          1.12         39.03          2.32          0.04        110.53
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1055.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       30
neval is:      475
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       31
neval is:      475


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      475     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.456164E-01  -3.08749      -7.92000       7.92000       972.502       980.422    
   2  0.550510     -0.596911      -1.53119       1.53119       1004.51       1006.04    
   3  0.599183     -0.512188      -1.31386       1.31386       1024.28       1025.59    
   4  0.463354     -0.769263      -1.97331       1.97331       1033.31       1035.28    
   5  0.455992     -0.785279      -2.01439       2.01439       1036.39       1038.40    
   6  0.198149      -1.61873      -4.15236       4.15236       1037.83       1041.98    
   7  0.955046     -0.459959E-01 -0.117988      0.117988       1045.14       1045.26    
   8  0.743730     -0.296077     -0.759494      0.759494       1045.75       1046.51    
   9  0.633042     -0.457219      -1.17286       1.17286       1052.93       1054.11    
  10  0.870677     -0.138485     -0.355240      0.355240       1051.84       1052.20    
  11  0.546582     -0.604070      -1.54956       1.54956       1055.64       1057.19    
  12  0.292723      -1.22853      -3.15142       3.15142       1057.48       1060.63    
  13  0.805221E-01  -2.51922      -6.46230       6.46230       1057.63       1064.09    
  14  0.658185     -0.418269      -1.07294       1.07294       1057.18       1058.26    
  15  0.974478     -0.258538E-01 -0.663199E-01  0.663199E-01   1062.30       1062.37    
  16  0.268855      -1.31358      -3.36959       3.36959       1056.35       1059.72    
  17  0.494484     -0.704241      -1.80651       1.80651       1062.65       1064.45    
  18  0.982953     -0.171941E-01 -0.441063E-01  0.441063E-01   1066.59       1066.63    
  19  0.703308     -0.351960     -0.902846      0.902846       1065.60       1066.50    
  20  0.671580     -0.398123      -1.02126       1.02126       1067.62       1068.64    
  21  0.210384      -1.55882      -3.99868       3.99868       1067.62       1071.62    
  22  0.837290     -0.177585     -0.455540      0.455540       1066.36       1066.81    
  23  0.180021      -1.71468      -4.39849       4.39849       1068.79       1073.19    
  24  0.617844     -0.481519      -1.23519       1.23519       1061.41       1062.65    
  25  0.524065     -0.646139      -1.65747       1.65747       1070.64       1072.29    
  26  0.854055     -0.157759     -0.404683      0.404683       1074.35       1074.76    
  27  0.411337     -0.888343      -2.27877       2.27877       1075.40       1077.68    
  28  0.981489     -0.186841E-01 -0.479284E-01  0.479284E-01   1062.09       1062.14    
  29  0.646949     -0.435488      -1.11711       1.11711       1075.47       1076.59    
  30  0.350244      -1.04912      -2.69121       2.69121       1073.62       1076.31    
  31  0.655455     -0.422425      -1.08360       1.08360       1077.79       1078.88    
  32  0.577459     -0.549117      -1.40859       1.40859       1077.54       1078.95    
  33  0.790874     -0.234617     -0.601838      0.601838       1073.61       1074.21    
  34  0.654199     -0.424344      -1.08852       1.08852       1077.74       1078.83    
  35  0.571446     -0.559585      -1.43544       1.43544       1080.20       1081.64    
  36  0.324671      -1.12494      -2.88570       2.88570       1081.00       1083.89    
  37  0.310261E-01  -3.47293      -8.90873       8.90873       1084.73       1093.64    
  38  0.113505      -2.17591      -5.58163       5.58163       1086.84       1092.42    
  39  0.690688     -0.370066     -0.949292      0.949292       1087.57       1088.52    
  40  0.336841      -1.08814      -2.79130       2.79130       1087.38       1090.17    
  41  0.157762E-01  -4.14925      -10.6436       10.6436       1088.31       1098.95    
  42  0.692953     -0.366793     -0.940895      0.940895       1083.56       1084.50    
  43  0.917810     -0.857647E-01 -0.220003      0.220003       1088.22       1088.44    
  44  0.930239     -0.723139E-01 -0.185499      0.185499       1089.82       1090.00    
  45  0.213939      -1.54206      -3.95569       3.95569       1093.73       1097.69    
  46  0.191222      -1.65432      -4.24365       4.24365       1087.08       1091.32    
  47  0.509241     -0.674835      -1.73108       1.73108       1091.47       1093.20    
  48  0.482746     -0.728264      -1.86814       1.86814       1087.44       1089.31    
  49  0.558324E-01  -2.88540      -7.40161       7.40161       1055.53       1062.93    
loop,thermsimp(1:2)       31   7.92000       1.53119    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    477       1078.47         68.09          1.12         38.91          2.63          0.05        110.80
Just calling func    0   0        110.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1078.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       31
neval is:      476
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       32
neval is:      476


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      476     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.195290      -1.63327      -4.18965       4.18965       972.502       976.692    
   2  0.163951      -1.80819      -4.63835       4.63835       1004.51       1009.15    
   3  0.419868     -0.867814      -2.22611       2.22611       1024.28       1026.50    
   4  0.734040     -0.309192     -0.793137      0.793137       1033.31       1034.10    
   5  0.606079     -0.500745      -1.28451       1.28451       1036.39       1037.67    
   6  0.535424     -0.624696      -1.60246       1.60246       1037.83       1039.43    
   7  0.280299      -1.27190      -3.26266       3.26266       1045.14       1048.40    
   8  0.113078      -2.17968      -5.59129       5.59129       1045.75       1051.34    
   9  0.793508     -0.231291     -0.593306      0.593306       1051.84       1052.43    
  10  0.310674      -1.16901      -2.99874       2.99874       1052.93       1055.93    
  11  0.727780     -0.317757     -0.815108      0.815108       1055.64       1056.45    
  12  0.785018     -0.242049     -0.620901      0.620901       1057.18       1057.80    
  13  0.544769     -0.607394      -1.55808       1.55808       1056.35       1057.91    
  14  0.956533     -0.444404E-01 -0.113998      0.113998       1057.48       1057.60    
  15  0.429201E-01  -3.14842      -8.07629       8.07629       1062.09       1070.17    
  16  0.521359     -0.651317      -1.67075       1.67075       1062.30       1063.97    
  17  0.721055     -0.327040     -0.838920      0.838920       1061.41       1062.25    
  18  0.211580E-01  -3.85574      -9.89072       9.89072       1055.53       1065.42    
  19  0.481395     -0.731068      -1.87533       1.87533       1057.63       1059.51    
  20  0.570335     -0.561531      -1.44043       1.44043       1062.65       1064.09    
  21  0.870915     -0.138211     -0.354538      0.354538       1065.60       1065.95    
  22  0.233853      -1.45306      -3.72739       3.72739       1066.59       1070.32    
  23  0.307270      -1.18003      -3.02700       3.02700       1066.36       1069.39    
  24  0.394628     -0.929811      -2.38514       2.38514       1067.62       1070.00    
  25  0.104262      -2.26085      -5.79951       5.79951       1067.62       1073.42    
  26  0.473629     -0.747330      -1.91705       1.91705       1070.64       1072.55    
  27  0.376754     -0.976162      -2.50404       2.50404       1068.79       1071.30    
  28  0.940665     -0.611679E-01 -0.156907      0.156907       1073.61       1073.77    
  29  0.541404     -0.613589      -1.57397       1.57397       1074.35       1075.93    
  30  0.294748      -1.22163      -3.13372       3.13372       1073.62       1076.76    
  31  0.910904     -0.933181E-01 -0.239379      0.239379       1075.47       1075.71    
  32  0.498988     -0.695173      -1.78325       1.78325       1075.40       1077.18    
  33  0.791968     -0.233234     -0.598291      0.598291       1077.74       1078.34    
  34  0.699447     -0.357465     -0.916967      0.916967       1077.79       1078.71    
  35  0.755221E-01  -2.58333      -6.62674       6.62674       1077.54       1084.17    
  36  0.855130E-01  -2.45909      -6.30803       6.30803       1080.20       1086.51    
  37  0.657852     -0.418775      -1.07424       1.07424       1081.00       1082.07    
  38  0.967250     -0.332985E-01 -0.854172E-01  0.854172E-01   1083.56       1083.65    
  39  0.628707     -0.464089      -1.19048       1.19048       1088.22       1089.41    
  40  0.646567E-01  -2.73866      -7.02520       7.02520       1087.57       1094.60    
  41  0.607154     -0.498973      -1.27996       1.27996       1087.44       1088.72    
  42  0.666321     -0.405983      -1.04143       1.04143       1089.82       1090.86    
  43  0.749880     -0.287841     -0.738369      0.738369       1087.38       1088.12    
  44  0.683383     -0.380700     -0.976568      0.976568       1087.08       1088.05    
  45  0.658232     -0.418198      -1.07276       1.07276       1086.84       1087.92    
  46  0.345395      -1.06307      -2.72697       2.72697       1091.47       1094.20    
  47  0.220689      -1.51100      -3.87601       3.87601       1084.73       1088.60    
  48  0.428774     -0.846826      -2.17227       2.17227       1093.73       1095.91    
  49  0.660075     -0.415402      -1.06559       1.06559       1078.47       1079.54    
loop,thermsimp(1:2)       32   4.18965       4.63835    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    478       1023.20         68.01          1.12         38.90          2.61          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1023.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       32
neval is:      477
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       33
neval is:      477


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      477     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.819000E-01  -2.50226      -6.41877       6.41877       972.502       978.921    
   2  0.451517     -0.795142      -2.03969       2.03969       1004.51       1006.55    
   3  0.994192E-01  -2.30841      -5.92152       5.92152       1024.28       1030.20    
   4  0.746841     -0.291903     -0.748788      0.748788       1033.31       1034.06    
   5  0.611746     -0.491439      -1.26064       1.26064       1036.39       1037.65    
   6  0.270477      -1.30757      -3.35416       3.35416       1037.83       1041.19    
   7  0.910534     -0.937242E-01 -0.240421      0.240421       1045.14       1045.38    
   8  0.942878     -0.588187E-01 -0.150881      0.150881       1045.75       1045.90    
   9  0.485061     -0.723481      -1.85587       1.85587       1051.84       1053.70    
  10  0.680127     -0.385476     -0.988820      0.988820       1052.93       1053.92    
  11  0.568210     -0.565264      -1.45001       1.45001       1055.64       1057.09    
  12  0.290478      -1.23623      -3.17117       3.17117       1057.48       1060.65    
  13  0.759168E-01  -2.57812      -6.61337       6.61337       1057.18       1063.80    
  14  0.724808     -0.321849     -0.825604      0.825604       1056.35       1057.17    
  15  0.896740     -0.108989     -0.279579      0.279579       1057.63       1057.91    
  16  0.484129     -0.725403      -1.86080       1.86080       1061.41       1063.27    
  17  0.841169     -0.172963     -0.443683      0.443683       1062.30       1062.74    
  18  0.124231      -2.08561      -5.34999       5.34999       1062.65       1068.00    
  19  0.512837     -0.667798      -1.71303       1.71303       1055.53       1057.24    
  20  0.659640     -0.416061      -1.06728       1.06728       1065.60       1066.67    
  21  0.775478     -0.254276     -0.652266      0.652266       1066.36       1067.01    
  22  0.514721     -0.664130      -1.70362       1.70362       1067.62       1069.32    
  23  0.642501     -0.442387      -1.13481       1.13481       1062.09       1063.23    
  24  0.372010     -0.988836      -2.53655       2.53655       1066.59       1069.13    
  25  0.630365     -0.461456      -1.18372       1.18372       1068.79       1069.98    
  26  0.697349     -0.360469     -0.924672      0.924672       1070.64       1071.56    
  27  0.702368     -0.353297     -0.906276      0.906276       1067.62       1068.53    
  28  0.904702     -0.100150     -0.256904      0.256904       1073.61       1073.87    
  29  0.613508     -0.488561      -1.25325       1.25325       1075.47       1076.73    
  30  0.399820     -0.916740      -2.35162       2.35162       1074.35       1076.70    
  31  0.450706     -0.796939      -2.04430       2.04430       1073.62       1075.67    
  32  0.491730     -0.709826      -1.82084       1.82084       1075.40       1077.22    
  33  0.859232     -0.151717     -0.389182      0.389182       1077.74       1078.13    
  34  0.500784     -0.691581      -1.77404       1.77404       1077.79       1079.57    
  35  0.423737     -0.858643      -2.20258       2.20258       1078.47       1080.68    
  36  0.120442      -2.11658      -5.42945       5.42945       1081.00       1086.43    
  37  0.954439     -0.466313E-01 -0.119618      0.119618       1083.56       1083.68    
  38  0.798812     -0.224629     -0.576217      0.576217       1077.54       1078.12    
  39  0.430786     -0.842144      -2.16026       2.16026       1080.20       1082.36    
  40  0.414903     -0.879710      -2.25663       2.25663       1086.84       1089.10    
  41  0.508906     -0.675492      -1.73277       1.73277       1087.08       1088.81    
  42  0.201745      -1.60075      -4.10624       4.10624       1087.38       1091.48    
  43  0.789439E-01  -2.53902      -6.51307       6.51307       1084.73       1091.24    
  44  0.300237      -1.20318      -3.08639       3.08639       1087.44       1090.52    
  45  0.325303      -1.12300      -2.88071       2.88071       1088.22       1091.10    
  46  0.237964      -1.43564      -3.68269       3.68269       1089.82       1093.50    
  47  0.453987     -0.789687      -2.02570       2.02570       1091.47       1093.49    
  48  0.984013E-01  -2.31870      -5.94792       5.94792       1087.57       1093.52    
  49  0.477956     -0.738237      -1.89372       1.89372       1023.20       1025.09    
loop,thermsimp(1:2)       33   6.41877       2.03969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    479       1076.01         67.97          1.11         38.86          2.61          0.05        110.61
Just calling func    0   0        110.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1076.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       33
neval is:      478
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       34
neval is:      478


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      478     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.981444     -0.187299E-01 -0.480459E-01  0.480459E-01   972.502       972.550    
   2  0.357031      -1.02993      -2.64197       2.64197       1004.51       1007.15    
   3  0.350447      -1.04855      -2.68972       2.68972       1023.20       1025.89    
   4  0.189989      -1.66079      -4.26024       4.26024       1024.28       1028.54    
   5  0.587578     -0.531746      -1.36403       1.36403       1033.31       1034.68    
   6  0.114991      -2.16291      -5.54827       5.54827       1036.39       1041.93    
   7  0.657381     -0.419492      -1.07608       1.07608       1037.83       1038.91    
   8  0.641189E-02  -5.04960      -12.9532       12.9532       1045.14       1058.10    
   9  0.968794     -0.317033E-01 -0.813250E-01  0.813250E-01   1045.75       1045.83    
  10  0.503328E-02  -5.29168      -13.5742       13.5742       1051.84       1065.41    
  11  0.829431     -0.187016     -0.479732      0.479732       1052.93       1053.41    
  12  0.191311      -1.65386      -4.24246       4.24246       1055.64       1059.88    
  13  0.196005      -1.62961      -4.18027       4.18027       1056.35       1060.53    
  14  0.336490      -1.08919      -2.79397       2.79397       1055.53       1058.32    
  15  0.149023E-01  -4.20624      -10.7898       10.7898       1057.63       1068.42    
  16  0.125271E-01  -4.37986      -11.2352       11.2352       1057.48       1068.72    
  17  0.414930     -0.879646      -2.25646       2.25646       1062.30       1064.56    
  18  0.262487      -1.33755      -3.43109       3.43109       1062.09       1065.53    
  19  0.195281      -1.63332      -4.18977       4.18977       1061.41       1065.60    
  20  0.143722      -1.93988      -4.97615       4.97615       1057.18       1062.16    
  21  0.438997     -0.823262      -2.11183       2.11183       1065.60       1067.71    
  22  0.824417     -0.193079     -0.495284      0.495284       1066.36       1066.85    
  23  0.549781     -0.598236      -1.53459       1.53459       1062.65       1064.18    
  24  0.551873E-01  -2.89702      -7.43142       7.43142       1067.62       1075.05    
  25  0.934834     -0.673864E-01 -0.172859      0.172859       1066.59       1066.76    
  26  0.928568     -0.741115E-01 -0.190110      0.190110       1067.62       1067.81    
  27  0.941294     -0.604999E-01 -0.155194      0.155194       1068.79       1068.95    
  28  0.322815      -1.13067      -2.90040       2.90040       1070.64       1073.54    
  29  0.298431      -1.20922      -3.10187       3.10187       1073.61       1076.71    
  30  0.977329     -0.229318E-01 -0.588245E-01  0.588245E-01   1073.62       1073.68    
  31  0.513921     -0.665686      -1.70761       1.70761       1074.35       1076.06    
  32  0.235108      -1.44771      -3.71366       3.71366       1075.47       1079.19    
  33  0.779842     -0.248665     -0.637873      0.637873       1075.40       1076.04    
  34  0.297000E-01  -3.51661      -9.02078       9.02078       1077.54       1086.56    
  35  0.779190E-02  -4.85467      -12.4532       12.4532       1077.74       1090.19    
  36  0.559158     -0.581323      -1.49121       1.49121       1077.79       1079.28    
  37  0.125647      -2.07428      -5.32093       5.32093       1078.47       1083.79    
  38  0.142977      -1.94507      -4.98948       4.98948       1080.20       1085.19    
  39  0.923378E-01  -2.38230      -6.11107       6.11107       1083.56       1089.67    
  40  0.813591     -0.206297     -0.529193      0.529193       1081.00       1081.53    
  41  0.206767      -1.57616      -4.04316       4.04316       1087.08       1091.12    
  42  0.955262     -0.457693E-01 -0.117407      0.117407       1086.84       1086.96    
  43  0.178167      -1.72503      -4.42504       4.42504       1087.44       1091.86    
  44  0.246986      -1.39843      -3.58723       3.58723       1088.22       1091.80    
  45  0.568163     -0.565348      -1.45023       1.45023       1084.73       1086.18    
  46  0.742294     -0.298010     -0.764452      0.764452       1087.38       1088.14    
  47  0.888804E-01  -2.42046      -6.20896       6.20896       1091.47       1097.68    
  48  0.276498      -1.28555      -3.29769       3.29769       1089.82       1093.11    
  49  0.284239      -1.25794      -3.22686       3.22686       1076.01       1079.23    
loop,thermsimp(1:2)       34  0.480459E-01   2.64197    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    480       1093.81         67.98          1.13         38.98          2.45          0.04        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1093.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       34
neval is:      479
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       35
neval is:      479


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      479     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946856E-01  -2.35719      -6.04666       6.04666       972.502       978.549    
   2  0.756296E-01  -2.58191      -6.62309       6.62309       1004.51       1011.13    
   3  0.561067     -0.577915      -1.48246       1.48246       1023.20       1024.68    
   4  0.216838      -1.52860      -3.92116       3.92116       1024.28       1028.20    
   5  0.314923      -1.15543      -2.96389       2.96389       1033.31       1036.27    
   6  0.142515      -1.94831      -4.99779       4.99779       1037.83       1042.83    
   7  0.847169E-01  -2.46844      -6.33202       6.33202       1036.39       1042.72    
   8  0.526542     -0.641424      -1.64538       1.64538       1045.75       1047.40    
   9  0.732157     -0.311761     -0.799727      0.799727       1052.93       1053.73    
  10  0.916925     -0.867295E-01 -0.222478      0.222478       1045.14       1045.36    
  11  0.212460      -1.54900      -3.97349       3.97349       1055.53       1059.50    
  12  0.536257     -0.623142      -1.59848       1.59848       1055.64       1057.23    
  13  0.366591      -1.00351      -2.57419       2.57419       1056.35       1058.92    
  14  0.880705     -0.127033     -0.325864      0.325864       1057.18       1057.51    
  15  0.217460      -1.52574      -3.91382       3.91382       1062.65       1066.56    
  16  0.382542     -0.960916      -2.46493       2.46493       1062.30       1064.77    
  17  0.322523      -1.13158      -2.90273       2.90273       1051.84       1054.74    
  18  0.621048     -0.476347      -1.22192       1.22192       1062.09       1063.32    
  19  0.968083     -0.324370E-01 -0.832072E-01  0.832072E-01   1061.41       1061.50    
  20  0.834423     -0.181015     -0.464339      0.464339       1066.59       1067.05    
  21  0.822993     -0.194808     -0.499720      0.499720       1066.36       1066.86    
  22  0.269825      -1.30998      -3.36035       3.36035       1065.60       1068.96    
  23  0.752085     -0.284906     -0.730838      0.730838       1067.62       1068.35    
  24  0.562833     -0.574772      -1.47440       1.47440       1057.63       1059.11    
  25  0.816806     -0.202354     -0.519076      0.519076       1057.48       1058.00    
  26  0.912682     -0.913679E-01 -0.234376      0.234376       1068.79       1069.03    
  27  0.318966      -1.14267      -2.93117       2.93117       1070.64       1073.57    
  28  0.974130E-01  -2.32880      -5.97381       5.97381       1073.62       1079.60    
  29  0.989500     -0.105555E-01 -0.270768E-01  0.270768E-01   1067.62       1067.65    
  30  0.632994     -0.457295      -1.17305       1.17305       1075.40       1076.57    
  31  0.490860     -0.711597      -1.82538       1.82538       1074.35       1076.18    
  32  0.855011     -0.156641     -0.401813      0.401813       1073.61       1074.01    
  33  0.208926E-01  -3.86836      -9.92310       9.92310       1075.47       1085.40    
  34  0.629123     -0.463428      -1.18878       1.18878       1076.01       1077.20    
  35  0.520337     -0.653278      -1.67578       1.67578       1077.79       1079.47    
  36  0.860508     -0.150232     -0.385374      0.385374       1081.00       1081.39    
  37  0.703334     -0.351923     -0.902751      0.902751       1078.47       1079.38    
  38  0.982718     -0.174329E-01 -0.447187E-01  0.447187E-01   1080.20       1080.25    
  39  0.170183      -1.77088      -4.54265       4.54265       1084.73       1089.27    
  40  0.687538     -0.374638     -0.961018      0.961018       1077.54       1078.50    
  41  0.469943E-01  -3.05773      -7.84367       7.84367       1086.84       1094.69    
  42  0.436271     -0.829491      -2.12780       2.12780       1087.38       1089.51    
  43  0.739146     -0.302260     -0.775356      0.775356       1083.56       1084.34    
  44  0.986288     -0.138071E-01 -0.354178E-01  0.354178E-01   1077.74       1077.78    
  45  0.670480     -0.399761      -1.02546       1.02546       1087.08       1088.10    
  46  0.280759      -1.27026      -3.25845       3.25845       1088.22       1091.47    
  47  0.680423     -0.385041     -0.987704      0.987704       1087.44       1088.43    
  48  0.424121     -0.857736      -2.20026       2.20026       1089.82       1092.02    
  49  0.640263     -0.445876      -1.14376       1.14376       1093.81       1094.95    
loop,thermsimp(1:2)       35   6.04666       6.62309    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    481       1091.47         68.06          1.12         38.96          2.56          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  480    1091.5        2.959     -3.359      4.543     -102.6     0.2376    
                     -0.3574     0.6123     -99.70      4.800      2.191    

                       3.348     -2.222      2.090      7475.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.695      0.000      0.000      7000.      28.33    

                      -1.303     -7.421     -6.839     -7.060      9.094    

                      -4.120     -3.949      5108.      0.000      9024.    



                       1578.      6960.      7959.      1872.      2465.    

                       4913.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.071     -1.597     -2.242     -2.265    -0.3807    

                     -0.3252      9.615      8.520    -0.1601E+05 -4.946    

                     -0.3622     -2.348      9.011      9.086    -0.1969E+05



                      -6.000     0.3726    -0.1985E-01  8.958      8.950    

                     -0.1944E+05 -6.000     -1.172    -0.6963      9.663    

                       9.382    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1091.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       35
neval is:      480
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       36
neval is:      480


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      480     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102610      -2.27682      -5.84049       5.84049       972.502       978.342    
   2  0.682356     -0.382203     -0.980425      0.980425       1004.51       1005.49    
   3  0.177286      -1.72999      -4.43776       4.43776       1023.20       1027.63    
   4  0.705484     -0.348871     -0.894921      0.894921       1024.28       1025.17    
   5  0.700105     -0.356525     -0.914555      0.914555       1033.31       1034.23    
   6  0.502373E-01  -2.99100      -7.67249       7.67249       1036.39       1044.06    
   7  0.513397     -0.666706      -1.71023       1.71023       1037.83       1039.54    
   8  0.803947     -0.218222     -0.559781      0.559781       1045.14       1045.70    
   9  0.433536     -0.835780      -2.14394       2.14394       1045.75       1047.90    
  10  0.469536     -0.756009      -1.93931       1.93931       1052.93       1054.87    
  11  0.312394      -1.16349      -2.98458       2.98458       1051.84       1054.83    
  12  0.971867     -0.285367E-01 -0.732020E-01  0.732020E-01   1055.64       1055.71    
  13  0.869634     -0.139683     -0.358314      0.358314       1057.18       1057.54    
  14  0.415775     -0.877610      -2.25124       2.25124       1057.48       1059.73    
  15  0.657149     -0.419844      -1.07698       1.07698       1056.35       1057.43    
  16  0.517026     -0.659662      -1.69216       1.69216       1057.63       1059.32    
  17  0.845021     -0.168394     -0.431962      0.431962       1055.53       1055.96    
  18  0.646794E-01  -2.73831      -7.02430       7.02430       1061.41       1068.44    
  19  0.490710     -0.711902      -1.82617       1.82617       1062.09       1063.92    
  20  0.935557     -0.666133E-01 -0.170876      0.170876       1062.30       1062.47    
  21  0.155562      -1.86071      -4.77309       4.77309       1062.65       1067.42    
  22  0.739793     -0.301384     -0.773109      0.773109       1066.36       1067.13    
  23  0.195416      -1.63263      -4.18800       4.18800       1066.59       1070.78    
  24  0.679649E-01  -2.68876      -6.89720       6.89720       1067.62       1074.52    
  25  0.252534      -1.37621      -3.53025       3.53025       1067.62       1071.15    
  26  0.504672     -0.683847      -1.75420       1.75420       1065.60       1067.35    
  27  0.711577     -0.340272     -0.872864      0.872864       1068.79       1069.66    
  28  0.281313      -1.26829      -3.25340       3.25340       1070.64       1073.89    
  29  0.177966      -1.72616      -4.42795       4.42795       1073.61       1078.04    
  30  0.281850      -1.26638      -3.24851       3.24851       1074.35       1077.60    
  31  0.689216E-01  -2.67479      -6.86134       6.86134       1075.40       1082.26    
  32  0.845597     -0.167712     -0.430215      0.430215       1076.01       1076.44    
  33  0.790470     -0.235127     -0.603147      0.603147       1077.74       1078.34    
  34  0.306736      -1.18177      -3.03146       3.03146       1077.54       1080.57    
  35  0.637662     -0.449947      -1.15420       1.15420       1078.47       1079.63    
  36  0.668809E-01  -2.70484      -6.93844       6.93844       1077.79       1084.73    
  37  0.689320E-02  -4.97722      -12.7675       12.7675       1073.62       1086.39    
  38  0.102899      -2.27401      -5.83327       5.83327       1080.20       1086.04    
  39  0.487302     -0.718871      -1.84404       1.84404       1081.00       1082.84    
  40  0.912503     -0.915638E-01 -0.234879      0.234879       1083.56       1083.80    
  41  0.502050     -0.689055      -1.76756       1.76756       1075.47       1077.24    
  42  0.925412     -0.775163E-01 -0.198844      0.198844       1087.08       1087.28    
  43  0.921811     -0.814150E-01 -0.208845      0.208845       1087.44       1087.65    
  44  0.870535     -0.138648     -0.355658      0.355658       1084.73       1085.08    
  45  0.557947     -0.583490      -1.49677       1.49677       1087.38       1088.87    
  46  0.653329E-02  -5.03084      -12.9051       12.9051       1088.22       1101.12    
  47  0.173764      -1.75006      -4.48923       4.48923       1089.82       1094.31    
  48  0.318212      -1.14504      -2.93724       2.93724       1086.84       1089.78    
  49  0.423539     -0.859110      -2.20378       2.20378       1091.47       1093.67    
loop,thermsimp(1:2)       36   5.84049      0.980425    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    482       1056.96         68.05          1.13         39.16          2.29          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1056.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       36
neval is:      481
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       37
neval is:      481


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      481
neval,tstepnext:      481     481

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.189501      -1.66336      -4.26684       4.26684       972.502       976.769    
   2  0.365380E-02  -5.61199      -14.3958       14.3958       1004.51       1018.91    
   3  0.830232     -0.186050     -0.477255      0.477255       1024.28       1024.76    
   4  0.641913     -0.443302      -1.13716       1.13716       1023.20       1024.33    
   5  0.977753     -0.224987E-01 -0.577135E-01  0.577135E-01   1033.31       1033.37    
   6  0.941040     -0.607695E-01 -0.155885      0.155885       1037.83       1037.99    
   7  0.674724E-01  -2.69604      -6.91586       6.91586       1036.39       1043.30    
   8  0.243526      -1.41253      -3.62342       3.62342       1045.14       1048.77    
   9  0.916671     -0.870070E-01 -0.223190      0.223190       1045.75       1045.98    
  10  0.557286     -0.584677      -1.49981       1.49981       1051.84       1053.34    
  11  0.992934     -0.709123E-02 -0.181904E-01  0.181904E-01   1052.93       1052.95    
  12  0.575424     -0.552647      -1.41765       1.41765       1055.64       1057.05    
  13  0.128032      -2.05548      -5.27270       5.27270       1055.53       1060.80    
  14  0.473218E-01  -3.05078      -7.82585       7.82585       1056.35       1064.18    
  15  0.342686      -1.07094      -2.74717       2.74717       1057.18       1059.93    
  16  0.588634     -0.529951      -1.35943       1.35943       1057.63       1058.99    
  17  0.785774     -0.241086     -0.618433      0.618433       1057.48       1058.10    
  18  0.180861E-01  -4.01261      -10.2931       10.2931       1062.30       1072.59    
  19  0.814771     -0.204848     -0.525475      0.525475       1062.09       1062.62    
  20  0.241579      -1.42056      -3.64400       3.64400       1066.36       1070.00    
  21  0.547139     -0.603053      -1.54695       1.54695       1065.60       1067.15    
  22  0.762461     -0.271204     -0.695692      0.695692       1062.65       1063.34    
  23  0.388112     -0.946461      -2.42786       2.42786       1061.41       1063.84    
  24  0.787095     -0.239406     -0.614123      0.614123       1068.79       1069.41    
  25  0.509851     -0.673637      -1.72801       1.72801       1066.59       1068.32    
  26  0.106857      -2.23627      -5.73646       5.73646       1067.62       1073.35    
  27  0.494106     -0.705005      -1.80847       1.80847       1070.64       1072.44    
  28  0.504670     -0.683850      -1.75421       1.75421       1067.62       1069.38    
  29  0.575895     -0.551830      -1.41555       1.41555       1076.01       1077.42    
  30  0.482961     -0.727820      -1.86700       1.86700       1075.47       1077.34    
  31  0.530700     -0.633559      -1.62520       1.62520       1074.35       1075.98    
  32  0.667588     -0.404084      -1.03655       1.03655       1073.61       1074.65    
  33  0.602101     -0.507331      -1.30140       1.30140       1077.74       1079.04    
  34  0.658488     -0.417809      -1.07176       1.07176       1078.47       1079.55    
  35  0.393981     -0.931452      -2.38935       2.38935       1077.54       1079.93    
  36  0.639259     -0.447446      -1.14779       1.14779       1075.40       1076.55    
  37  0.936740E-01  -2.36793      -6.07421       6.07421       1081.00       1087.07    
  38  0.342820      -1.07055      -2.74616       2.74616       1083.56       1086.31    
  39  0.557341     -0.584578      -1.49956       1.49956       1077.79       1079.29    
  40  0.743227     -0.296754     -0.761232      0.761232       1084.73       1085.49    
  41  0.852843     -0.159180     -0.408328      0.408328       1080.20       1080.61    
  42  0.346148      -1.06089      -2.72138       2.72138       1073.62       1076.34    
  43  0.913769     -0.901773E-01 -0.231322      0.231322       1087.08       1087.31    
  44  0.816355     -0.202906     -0.520494      0.520494       1087.44       1087.96    
  45  0.132158      -2.02375      -5.19132       5.19132       1087.38       1092.57    
  46  0.337498      -1.08619      -2.78630       2.78630       1086.84       1089.63    
  47  0.707154     -0.346507     -0.888858      0.888858       1091.47       1092.36    
  48  0.742004     -0.298400     -0.765454      0.765454       1089.82       1090.58    
  49  0.804507     -0.217525     -0.557994      0.557994       1056.96       1057.52    
loop,thermsimp(1:2)       37   4.26684       14.3958    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    483       1079.52         68.00          1.12         39.08          2.42          0.05        110.68
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1079.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.56519               481
loop is:       37
neval is:      482
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    2.56519               481
loop is:       38
neval is:      482


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.28260               529

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      482     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995416E-01  -2.30718      -2.95918       2.95918       972.502       975.461    
   2  0.503957     -0.685264     -0.878917      0.878917       1004.51       1005.39    
   3  0.622493     -0.474022     -0.607979      0.607979       1023.20       1023.80    
   4  0.935651     -0.665132E-01 -0.853096E-01  0.853096E-01   1024.28       1024.36    
   5  0.199187      -1.61351      -2.06948       2.06948       1033.31       1035.38    
   6  0.758609E-01  -2.57885      -3.30763       3.30763       1037.83       1041.14    
   7  0.984530E-01  -2.31818      -2.97328       2.97328       1036.39       1039.36    
   8  0.239970      -1.42724      -1.83057       1.83057       1045.75       1047.58    
   9  0.913380     -0.906037E-01 -0.116208      0.116208       1045.14       1045.26    
  10  0.189159E-02  -6.27034      -8.04231       8.04231       1052.93       1060.98    
  11  0.993010     -0.701452E-02 -0.899681E-02  0.899681E-02   1051.84       1051.85    
  12  0.723758     -0.323298     -0.414661      0.414661       1055.64       1056.05    
  13  0.793363     -0.231475     -0.296889      0.296889       1056.96       1057.26    
  14  0.600371     -0.510207     -0.654390      0.654390       1057.48       1058.14    
  15  0.362871      -1.01371      -1.30018       1.30018       1057.63       1058.93    
  16  0.619786     -0.478381     -0.613570      0.613570       1057.18       1057.80    
  17  0.866004     -0.143866     -0.184522      0.184522       1055.53       1055.71    
  18  0.671513     -0.398222     -0.510758      0.510758       1062.09       1062.61    
  19  0.719189     -0.329632     -0.422784      0.422784       1062.65       1063.07    
  20  0.710276     -0.342101     -0.438778      0.438778       1061.41       1061.85    
  21  0.615619E-01  -2.78771      -3.57551       3.57551       1056.35       1059.92    
  22  0.188098      -1.67079      -2.14295       2.14295       1065.60       1067.74    
  23  0.508944     -0.675418     -0.866289      0.866289       1066.59       1067.46    
  24  0.981871     -0.182954E-01 -0.234656E-01  0.234656E-01   1067.62       1067.65    
  25  0.225810      -1.48806      -1.90858       1.90858       1068.79       1070.70    
  26  0.989298     -0.107600E-01 -0.138007E-01  0.138007E-01   1066.36       1066.37    
  27  0.869151     -0.140239     -0.179870      0.179870       1070.64       1070.82    
  28  0.661576     -0.413130     -0.529879      0.529879       1062.30       1062.83    
  29  0.192048      -1.65001      -2.11630       2.11630       1067.62       1069.73    
  30  0.980212     -0.199861E-01 -0.256342E-01  0.256342E-01   1073.61       1073.64    
  31  0.160674      -1.82838      -2.34507       2.34507       1074.35       1076.70    
  32  0.123536E-01  -4.39381      -5.63548       5.63548       1073.62       1079.26    
  33  0.297350      -1.21285      -1.55559       1.55559       1075.40       1076.95    
  34  0.394659     -0.929732      -1.19247       1.19247       1075.47       1076.66    
  35  0.423082     -0.860189      -1.10328       1.10328       1076.01       1077.11    
  36  0.523558     -0.647108     -0.829979      0.829979       1077.74       1078.57    
  37  0.916842     -0.868204E-01 -0.111356      0.111356       1077.79       1077.90    
  38  0.150067      -1.89667      -2.43266       2.43266       1078.47       1080.91    
  39  0.561535     -0.577081     -0.740162      0.740162       1077.54       1078.28    
  40  0.926691     -0.761353E-01 -0.976509E-01  0.976509E-01   1080.20       1080.30    
  41  0.479570E-01  -3.03745      -3.89582       3.89582       1084.73       1088.62    
  42  0.494420     -0.704370     -0.903422      0.903422       1083.56       1084.46    
  43  0.722160E-01  -2.62809      -3.37078       3.37078       1081.00       1084.37    
  44  0.851764     -0.160446     -0.205787      0.205787       1087.08       1087.28    
  45  0.140206      -1.96465      -2.51985       2.51985       1087.44       1089.96    
  46  0.706931     -0.346822     -0.444833      0.444833       1086.84       1087.29    
  47  0.675871     -0.391754     -0.502462      0.502462       1089.82       1090.32    
  48  0.979967E-01  -2.32282      -2.97924       2.97924       1091.47       1094.45    
  49  0.337023      -1.08761      -1.39496       1.39496       1079.52       1080.91    
loop,thermsimp(1:2)       38   2.95918      0.878917    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    484       1080.84         67.95          1.14         39.16          2.35          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1080.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       38
neval is:      483
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       39
neval is:      483


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      483     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609718     -0.494759     -0.634576      0.634576       972.502       973.136    
   2  0.415874     -0.877372      -1.12531       1.12531       1004.51       1005.64    
   3  0.961318     -0.394498E-01 -0.505981E-01  0.505981E-01   1023.20       1023.25    
   4  0.965952     -0.346407E-01 -0.444300E-01  0.444300E-01   1024.28       1024.32    
   5  0.154943      -1.86470      -2.39166       2.39166       1033.31       1035.70    
   6  0.371326     -0.990674      -1.27063       1.27063       1036.39       1037.66    
   7  0.313239      -1.16079      -1.48882       1.48882       1037.83       1039.32    
   8  0.886978     -0.119935     -0.153828      0.153828       1045.14       1045.30    
   9  0.749723     -0.288051     -0.369453      0.369453       1045.75       1046.12    
  10  0.552279     -0.593702     -0.761480      0.761480       1051.84       1052.60    
  11  0.551516     -0.595084     -0.763253      0.763253       1055.53       1056.29    
  12  0.339175      -1.08124      -1.38679       1.38679       1055.64       1057.02    
  13  0.124635      -2.08237      -2.67084       2.67084       1056.96       1059.63    
  14  0.937098     -0.649678E-01 -0.833275E-01  0.833275E-01   1057.18       1057.27    
  15  0.639721E-01  -2.74931      -3.52625       3.52625       1057.48       1061.01    
  16  0.258753      -1.35188      -1.73392       1.73392       1057.63       1059.36    
  17  0.116140      -2.15296      -2.76138       2.76138       1056.35       1059.11    
  18  0.182528      -1.70085      -2.18150       2.18150       1052.93       1055.11    
  19  0.323703      -1.12793      -1.44668       1.44668       1061.41       1062.86    
  20  0.624238     -0.471224     -0.604390      0.604390       1062.09       1062.70    
  21  0.250110      -1.38585      -1.77749       1.77749       1062.30       1064.08    
  22  0.785262     -0.241738     -0.310052      0.310052       1062.65       1062.96    
  23  0.272793      -1.29904      -1.66615       1.66615       1066.36       1068.02    
  24  0.552827     -0.592710     -0.760207      0.760207       1066.59       1067.35    
  25  0.581634     -0.541915     -0.695058      0.695058       1067.62       1068.32    
  26  0.294889      -1.22116      -1.56625       1.56625       1065.60       1067.17    
  27  0.955830     -0.451753E-01 -0.579417E-01  0.579417E-01   1067.62       1067.67    
  28  0.691604     -0.368741     -0.472947      0.472947       1068.79       1069.26    
  29  0.975202     -0.251108E-01 -0.322071E-01  0.322071E-01   1070.64       1070.67    
  30  0.577048     -0.549830     -0.705210      0.705210       1073.61       1074.32    
  31  0.265577      -1.32585      -1.70053       1.70053       1075.47       1077.17    
  32  0.657063     -0.419975     -0.538659      0.538659       1074.35       1074.89    
  33  0.936668     -0.654263E-01 -0.839156E-01  0.839156E-01   1075.40       1075.48    
  34  0.333233      -1.09891      -1.40946       1.40946       1076.01       1077.42    
  35  0.796486     -0.227546     -0.291850      0.291850       1077.79       1078.08    
  36  0.968162     -0.323562E-01 -0.414999E-01  0.414999E-01   1077.54       1077.58    
  37  0.519518     -0.654855     -0.839914      0.839914       1077.74       1078.58    
  38  0.470578     -0.753793     -0.966812      0.966812       1073.62       1074.59    
  39  0.226350      -1.48567      -1.90552       1.90552       1080.20       1082.11    
  40  0.714391     -0.336325     -0.431370      0.431370       1078.47       1078.90    
  41  0.402411     -0.910282      -1.16752       1.16752       1079.52       1080.68    
  42  0.968828     -0.316682E-01 -0.406175E-01  0.406175E-01   1081.00       1081.04    
  43  0.595040     -0.519126     -0.665829      0.665829       1083.56       1084.23    
  44  0.370415     -0.993131      -1.27379       1.27379       1087.08       1088.35    
  45  0.321530      -1.13466      -1.45532       1.45532       1086.84       1088.30    
  46  0.733343     -0.310141     -0.397786      0.397786       1084.73       1085.13    
  47  0.753884     -0.282517     -0.362355      0.362355       1087.44       1087.80    
  48  0.750367     -0.287193     -0.368352      0.368352       1089.82       1090.18    
  49  0.101816      -2.28459      -2.93020       2.93020       1080.84       1083.77    
loop,thermsimp(1:2)       39  0.634576       1.12531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    485       1089.33         68.05          1.11         38.75          2.69          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    486       1035.62         68.07          1.11         38.96          2.59          0.05        110.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1035.62
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       39
neval is:      485
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       40
neval is:      485


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      485     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903890     -0.101048     -0.129603      0.129603       972.502       972.632    
   2  0.575116     -0.553184     -0.709512      0.709512       1004.51       1005.22    
   3  0.234605      -1.44985      -1.85957       1.85957       1023.20       1025.06    
   4  0.122801      -2.09719      -2.68985       2.68985       1024.28       1026.97    
   5  0.141985E-01  -4.25462      -5.45696       5.45696       1033.31       1038.77    
   6  0.756588     -0.278937     -0.357763      0.357763       1036.39       1036.74    
   7  0.646676     -0.435910     -0.559096      0.559096       1037.83       1038.39    
   8  0.898014E-01  -2.41016      -3.09126       3.09126       1045.14       1048.23    
   9  0.163265      -1.81238      -2.32456       2.32456       1045.75       1048.08    
  10  0.358760      -1.02510      -1.31479       1.31479       1051.84       1053.16    
  11  0.309585      -1.17252      -1.50388       1.50388       1052.93       1054.44    
  12  0.926638     -0.761923E-01 -0.977240E-01  0.977240E-01   1055.53       1055.63    
  13  0.283309E-01  -3.56380      -4.57092       4.57092       1055.64       1060.21    
  14  0.544265     -0.608319     -0.780227      0.780227       1057.18       1057.96    
  15  0.125708E-01  -4.37638      -5.61313       5.61313       1056.35       1061.96    
  16  0.402687E-01  -3.21218      -4.11993       4.11993       1057.63       1061.75    
  17  0.832731     -0.183044     -0.234772      0.234772       1056.96       1057.20    
  18  0.953573     -0.475391E-01 -0.609735E-01  0.609735E-01   1057.48       1057.54    
  19  0.967735E-01  -2.33538      -2.99535       2.99535       1062.09       1065.09    
  20  0.309578E-01  -3.47513      -4.45719       4.45719       1061.41       1065.87    
  21  0.197205      -1.62351      -2.08231       2.08231       1062.65       1064.73    
  22  0.232676      -1.45811      -1.87017       1.87017       1062.30       1064.17    
  23  0.573480     -0.556032     -0.713165      0.713165       1065.60       1066.31    
  24  0.944617     -0.569761E-01 -0.730774E-01  0.730774E-01   1066.59       1066.66    
  25  0.809219     -0.211686     -0.271508      0.271508       1067.62       1067.89    
  26  0.207880      -1.57080      -2.01470       2.01470       1066.36       1068.37    
  27  0.325884      -1.12121      -1.43807       1.43807       1067.62       1069.06    
  28  0.887246     -0.119633     -0.153440      0.153440       1068.79       1068.95    
  29  0.535078     -0.625343     -0.802062      0.802062       1070.64       1071.44    
  30  0.874713     -0.133859     -0.171688      0.171688       1073.61       1073.78    
  31  0.273380      -1.29689      -1.66339       1.66339       1073.62       1075.29    
  32  0.785279     -0.241717     -0.310025      0.310025       1074.35       1074.66    
  33  0.822807E-01  -2.49762      -3.20344       3.20344       1075.40       1078.60    
  34  0.267430E-01  -3.62148      -4.64490       4.64490       1075.47       1080.12    
  35  0.930838     -0.716701E-01 -0.919238E-01  0.919238E-01   1076.01       1076.10    
  36  0.676222     -0.391233     -0.501794      0.501794       1077.54       1078.04    
  37  0.645353     -0.437958     -0.561724      0.561724       1077.79       1078.35    
  38  0.453782     -0.790138      -1.01343       1.01343       1077.74       1078.75    
  39  0.271751      -1.30287      -1.67105       1.67105       1078.47       1080.14    
  40  0.521656     -0.650746     -0.834645      0.834645       1079.52       1080.35    
  41  0.305810      -1.18479      -1.51961       1.51961       1081.00       1082.52    
  42  0.484713E-01  -3.02678      -3.88214       3.88214       1080.20       1084.09    
  43  0.806308     -0.215289     -0.276129      0.276129       1080.84       1081.12    
  44  0.314175      -1.15781      -1.48500       1.48500       1083.56       1085.05    
  45  0.214468E-01  -3.84218      -4.92797       4.92797       1084.73       1089.66    
  46  0.813020     -0.207000     -0.265497      0.265497       1087.44       1087.70    
  47  0.540435     -0.615382     -0.789286      0.789286       1086.84       1087.63    
  48  0.971427E-01  -2.33157      -2.99047       2.99047       1087.08       1090.07    
  49  0.594395     -0.520211     -0.667221      0.667221       1035.62       1036.29    
loop,thermsimp(1:2)       40  0.129603      0.709512    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    487       1042.61         68.01          1.11         39.41          2.18          0.05        110.76
Just calling func    0   0        110.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1042.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       40
neval is:      486
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       41
neval is:      486


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      486     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.674423     -0.393898     -0.505212      0.505212       972.502       973.007    
   2  0.479548     -0.734911     -0.942595      0.942595       1004.51       1005.45    
   3  0.577498     -0.549050     -0.704210      0.704210       1023.20       1023.90    
   4  0.652957     -0.426245     -0.546700      0.546700       1024.28       1024.82    
   5  0.649111     -0.432152     -0.554277      0.554277       1035.62       1036.17    
   6  0.689953     -0.371132     -0.476013      0.476013       1036.39       1036.86    
   7  0.884625     -0.122591     -0.157235      0.157235       1037.83       1037.99    
   8  0.655607     -0.422194     -0.541505      0.541505       1033.31       1033.85    
   9  0.954363     -0.467110E-01 -0.599113E-01  0.599113E-01   1045.75       1045.81    
  10  0.601698     -0.507999     -0.651558      0.651558       1045.14       1045.79    
  11  0.640071     -0.446176     -0.572264      0.572264       1051.84       1052.41    
  12  0.925620     -0.772915E-01 -0.991338E-01  0.991338E-01   1052.93       1053.03    
  13  0.760294     -0.274051     -0.351496      0.351496       1055.53       1055.88    
  14  0.292719      -1.22854      -1.57572       1.57572       1056.96       1058.54    
  15  0.910533     -0.937251E-01 -0.120211      0.120211       1057.48       1057.60    
  16  0.650466     -0.430066     -0.551602      0.551602       1057.18       1057.73    
  17  0.351310      -1.04609      -1.34171       1.34171       1055.64       1056.98    
  18  0.997229     -0.277449E-02 -0.355855E-02  0.355855E-02   1057.63       1057.63    
  19  0.808601E-01  -2.51503      -3.22577       3.22577       1056.35       1059.58    
  20  0.420537     -0.866224      -1.11102       1.11102       1062.30       1063.41    
  21  0.122547      -2.09926      -2.69251       2.69251       1062.65       1065.34    
  22  0.943531     -0.581261E-01 -0.745524E-01  0.745524E-01   1062.09       1062.17    
  23  0.738977     -0.302488     -0.387970      0.387970       1061.41       1061.80    
  24  0.152624E-01  -4.18236      -5.36428       5.36428       1065.60       1070.96    
  25  0.495842     -0.701498     -0.899738      0.899738       1066.59       1067.49    
  26  0.737954     -0.303874     -0.389748      0.389748       1067.62       1068.01    
  27  0.859054     -0.151924     -0.194857      0.194857       1066.36       1066.55    
  28  0.892829     -0.113360     -0.145395      0.145395       1068.79       1068.94    
  29  0.492035E-01  -3.01179      -3.86291       3.86291       1067.62       1071.49    
  30  0.493120E-01  -3.00959      -3.86009       3.86009       1070.64       1074.50    
  31  0.366039      -1.00501      -1.28903       1.28903       1073.61       1074.90    
  32  0.658741     -0.417425     -0.535388      0.535388       1074.35       1074.89    
  33  0.453109     -0.791623      -1.01533       1.01533       1073.62       1074.64    
  34  0.370957     -0.991668      -1.27191       1.27191       1076.01       1077.28    
  35  0.758039     -0.277020     -0.355305      0.355305       1077.54       1077.90    
  36  0.799628     -0.223608     -0.286799      0.286799       1077.79       1078.08    
  37  0.934112     -0.681593E-01 -0.874209E-01  0.874209E-01   1075.40       1075.48    
  38  0.934175     -0.680913E-01 -0.873337E-01  0.873337E-01   1077.74       1077.83    
  39  0.126850      -2.06475      -2.64824       2.64824       1075.47       1078.12    
  40  0.359146      -1.02403      -1.31341       1.31341       1078.47       1079.79    
  41  0.550575E-01  -2.89938      -3.71873       3.71873       1079.52       1083.23    
  42  0.220619      -1.51132      -1.93841       1.93841       1080.84       1082.78    
  43  0.414861     -0.879812      -1.12844       1.12844       1081.00       1082.13    
  44  0.132097      -2.02422      -2.59625       2.59625       1080.20       1082.80    
  45  0.305184      -1.18684      -1.52224       1.52224       1083.56       1085.08    
  46  0.157149E-01  -4.15315      -5.32681       5.32681       1086.84       1092.17    
  47  0.286781      -1.24904      -1.60201       1.60201       1087.44       1089.04    
  48  0.637394     -0.450367     -0.577640      0.577640       1084.73       1085.31    
  49  0.663335     -0.410476     -0.526475      0.526475       1042.61       1043.13    
loop,thermsimp(1:2)       41  0.505212      0.942595    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    488       1033.29         68.06          1.11         38.96          2.55          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1033.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       41
neval is:      487
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       42
neval is:      487


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      487     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.723413     -0.323775     -0.415272      0.415272       972.502       972.917    
   2  0.185655      -1.68386      -2.15972       2.15972       1004.51       1006.67    
   3  0.957457     -0.434742E-01 -0.557599E-01  0.557599E-01   1023.20       1023.25    
   4  0.621017     -0.476397     -0.611025      0.611025       1024.28       1024.89    
   5  0.104462      -2.25893      -2.89730       2.89730       1033.31       1036.21    
   6  0.452993     -0.791880      -1.01566       1.01566       1035.62       1036.64    
   7  0.667800     -0.403766     -0.517869      0.517869       1036.39       1036.90    
   8  0.972732     -0.276462E-01 -0.354589E-01  0.354589E-01   1037.83       1037.87    
   9  0.260321      -1.34584      -1.72617       1.72617       1042.61       1044.33    
  10  0.763010     -0.270484     -0.346922      0.346922       1045.14       1045.49    
  11  0.641341     -0.444194     -0.569721      0.569721       1045.75       1046.32    
  12  0.878196     -0.129885     -0.166590      0.166590       1051.84       1052.01    
  13  0.854835     -0.156847     -0.201172      0.201172       1052.93       1053.13    
  14  0.714312     -0.336436     -0.431511      0.431511       1055.53       1055.96    
  15  0.701707     -0.354239     -0.454346      0.454346       1055.64       1056.09    
  16  0.889117     -0.117526     -0.150739      0.150739       1057.48       1057.63    
  17  0.141522      -1.95530      -2.50786       2.50786       1057.63       1060.14    
  18  0.189178      -1.66507      -2.13561       2.13561       1057.18       1059.32    
  19  0.622140     -0.474590     -0.608708      0.608708       1056.96       1057.57    
  20  0.130042      -2.03989      -2.61636       2.61636       1056.35       1058.97    
  21  0.577696     -0.548708     -0.703770      0.703770       1061.41       1062.12    
  22  0.682588     -0.381863     -0.489777      0.489777       1062.09       1062.58    
  23  0.835439     -0.179798     -0.230608      0.230608       1062.30       1062.53    
  24  0.540525     -0.615214     -0.789072      0.789072       1062.65       1063.44    
  25  0.782443     -0.245334     -0.314664      0.314664       1066.36       1066.67    
  26  0.905287     -0.995035E-01 -0.127623      0.127623       1066.59       1066.72    
  27  0.695897     -0.362554     -0.465011      0.465011       1067.62       1068.08    
  28  0.382345     -0.961432      -1.23313       1.23313       1068.79       1070.03    
  29  0.125280      -2.07720      -2.66422       2.66422       1065.60       1068.26    
  30  0.699640     -0.357189     -0.458130      0.458130       1067.62       1068.08    
  31  0.349624      -1.05090      -1.34788       1.34788       1070.64       1071.98    
  32  0.909174     -0.952190E-01 -0.122128      0.122128       1073.62       1073.75    
  33  0.801113     -0.221753     -0.284420      0.284420       1074.35       1074.64    
  34  0.284676      -1.25640      -1.61146       1.61146       1073.61       1075.22    
  35  0.971815     -0.285896E-01 -0.366689E-01  0.366689E-01   1075.40       1075.43    
  36  0.667566     -0.404116     -0.518318      0.518318       1076.01       1076.53    
  37  0.113695E-02  -6.77940      -8.69524       8.69524       1077.74       1086.44    
  38  0.408299     -0.895755      -1.14889       1.14889       1077.54       1078.69    
  39  0.625257E-01  -2.77218      -3.55559       3.55559       1077.79       1081.35    
  40  0.515937     -0.661771     -0.848785      0.848785       1075.47       1076.32    
  41  0.876322E-01  -2.43461      -3.12262       3.12262       1078.47       1081.60    
  42  0.995779     -0.423030E-02 -0.542576E-02  0.542576E-02   1081.00       1081.01    
  43  0.423428     -0.859371      -1.10223       1.10223       1080.84       1081.94    
  44  0.895974     -0.109844     -0.140886      0.140886       1080.20       1080.34    
  45  0.467456E-01  -3.06304      -3.92864       3.92864       1079.52       1083.44    
  46  0.331488      -1.10416      -1.41620       1.41620       1083.56       1084.98    
  47  0.422083     -0.862553      -1.10631       1.10631       1084.73       1085.83    
  48  0.630981     -0.460480     -0.590609      0.590609       1087.44       1088.03    
  49  0.953132     -0.480016E-01 -0.615667E-01  0.615667E-01   1033.29       1033.35    
loop,thermsimp(1:2)       42  0.415272       2.15972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    489       1014.24         68.01          1.14         39.00          2.64          0.04        110.82
Just calling func    0   0        110.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1014.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       42
neval is:      488
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       43
neval is:      488


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      488     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.475948     -0.742447     -0.952260      0.952260       972.502       973.454    
   2  0.602827     -0.506126     -0.649155      0.649155       1004.51       1005.16    
   3  0.165820E-01  -4.09943      -5.25792       5.25792       1023.20       1028.45    
   4  0.438093     -0.825323      -1.05856       1.05856       1024.28       1025.34    
   5  0.431975     -0.839387      -1.07659       1.07659       1033.29       1034.37    
   6  0.619769E-01  -2.78099      -3.56689       3.56689       1033.31       1036.88    
   7  0.950555     -0.507092E-01 -0.650395E-01  0.650395E-01   1035.62       1035.68    
   8  0.467256     -0.760877     -0.975898      0.975898       1036.39       1037.36    
   9  0.759251     -0.275423     -0.353256      0.353256       1037.83       1038.19    
  10  0.606403     -0.500211     -0.641568      0.641568       1042.61       1043.25    
  11  0.472546     -0.749621     -0.961461      0.961461       1045.14       1046.10    
  12  0.340147      -1.07838      -1.38312       1.38312       1045.75       1047.14    
  13  0.625998E-01  -2.77099      -3.55407       3.55407       1051.84       1055.39    
  14  0.949579     -0.517367E-01 -0.663573E-01  0.663573E-01   1052.93       1053.00    
  15  0.684964     -0.378389     -0.485321      0.485321       1055.53       1056.01    
  16  0.194402      -1.63783      -2.10067       2.10067       1055.64       1057.74    
  17  0.885462     -0.121646     -0.156023      0.156023       1056.96       1057.12    
  18  0.115564      -2.15793      -2.76776       2.76776       1057.48       1060.25    
  19  0.924911     -0.780574E-01 -0.100116      0.100116       1056.35       1056.45    
  20  0.201643E-02  -6.20643      -7.96034       7.96034       1057.18       1065.14    
  21  0.264504      -1.32990      -1.70572       1.70572       1057.63       1059.34    
  22  0.241350      -1.42151      -1.82322       1.82322       1061.41       1063.24    
  23  0.195111      -1.63418      -2.09600       2.09600       1062.30       1064.40    
  24  0.991465     -0.857191E-02 -0.109943E-01  0.109943E-01   1062.09       1062.11    
  25  0.605579     -0.501570     -0.643312      0.643312       1062.65       1063.29    
  26  0.417123     -0.874375      -1.12147       1.12147       1066.36       1067.48    
  27  0.321829      -1.13373      -1.45412       1.45412       1066.59       1068.04    
  28  0.510817     -0.671745     -0.861577      0.861577       1067.62       1068.48    
  29  0.776438     -0.253038     -0.324546      0.324546       1067.62       1067.94    
  30  0.522679     -0.648787     -0.832132      0.832132       1065.60       1066.43    
  31  0.754225     -0.282065     -0.361775      0.361775       1068.79       1069.15    
  32  0.384540     -0.955707      -1.22579       1.22579       1070.64       1071.86    
  33  0.618720     -0.480103     -0.615779      0.615779       1073.62       1074.24    
  34  0.288710      -1.24233      -1.59341       1.59341       1074.35       1075.95    
  35  0.645703     -0.437415     -0.561027      0.561027       1073.61       1074.17    
  36  0.639113     -0.447673     -0.574184      0.574184       1075.40       1075.97    
  37  0.394197     -0.930906      -1.19398       1.19398       1075.47       1076.67    
  38  0.300083      -1.20370      -1.54386       1.54386       1076.01       1077.55    
  39  0.481786     -0.730255     -0.936622      0.936622       1077.54       1078.48    
  40  0.745437     -0.293784     -0.376807      0.376807       1080.20       1080.58    
  41  0.735307     -0.307467     -0.394356      0.394356       1081.00       1081.39    
  42  0.516048     -0.661555     -0.848508      0.848508       1077.79       1078.64    
  43  0.810479     -0.210130     -0.269512      0.269512       1078.47       1078.74    
  44  0.535152E-01  -2.92779      -3.75517       3.75517       1080.84       1084.60    
  45  0.828890E-01  -2.49025      -3.19399       3.19399       1079.52       1082.71    
  46  0.976655     -0.236220E-01 -0.302975E-01  0.302975E-01   1083.56       1083.59    
  47  0.528807E-01  -2.93972      -3.77047       3.77047       1084.73       1088.50    
  48  0.124161      -2.08618      -2.67572       2.67572       1077.74       1080.42    
  49  0.690691     -0.370063     -0.474642      0.474642       1014.24       1014.71    
loop,thermsimp(1:2)       43  0.952260      0.649155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    490       1068.71         68.01          1.12         39.10          2.30          0.05        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1068.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       43
neval is:      489
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       44
neval is:      489


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      489     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.952211     -0.489682E-01 -0.628065E-01  0.628065E-01   972.502       972.565    
   2  0.866029     -0.143836     -0.184484      0.184484       1004.51       1004.69    
   3  0.411761     -0.887312      -1.13806       1.13806       1014.24       1015.37    
   4  0.699906     -0.356809     -0.457642      0.457642       1024.28       1024.74    
   5  0.499470     -0.694207     -0.890388      0.890388       1023.20       1024.09    
   6  0.565983     -0.569191     -0.730042      0.730042       1033.29       1034.02    
   7  0.493159     -0.706923     -0.906697      0.906697       1035.62       1036.53    
   8  0.569007     -0.563863     -0.723209      0.723209       1033.31       1034.03    
   9  0.650217     -0.430449     -0.552093      0.552093       1036.39       1036.94    
  10  0.961034E-01  -2.34233      -3.00426       3.00426       1037.83       1040.84    
  11  0.689147     -0.372300     -0.477511      0.477511       1042.61       1043.09    
  12  0.607344     -0.498660     -0.639579      0.639579       1045.14       1045.78    
  13  0.192849E-01  -3.94843      -5.06424       5.06424       1045.75       1050.82    
  14  0.731745     -0.312323     -0.400585      0.400585       1052.93       1053.33    
  15  0.863954     -0.146236     -0.187562      0.187562       1051.84       1052.03    
  16  0.499353     -0.694441     -0.890688      0.890688       1055.53       1056.42    
  17  0.835822     -0.179340     -0.230020      0.230020       1056.35       1056.58    
  18  0.515243     -0.663117     -0.850511      0.850511       1056.96       1057.81    
  19  0.284294      -1.25775      -1.61318       1.61318       1055.64       1057.25    
  20  0.699552     -0.357315     -0.458291      0.458291       1057.63       1058.09    
  21  0.306316      -1.18314      -1.51749       1.51749       1057.48       1059.00    
  22  0.917869     -0.857004E-01 -0.109919      0.109919       1062.09       1062.20    
  23  0.328908      -1.11198      -1.42622       1.42622       1061.41       1062.84    
  24  0.850593     -0.161822     -0.207552      0.207552       1062.65       1062.85    
  25  0.620502E-01  -2.77981      -3.56538       3.56538       1062.30       1065.87    
  26  0.583163     -0.539288     -0.691689      0.691689       1057.18       1057.87    
  27  0.394975     -0.928934      -1.19145       1.19145       1065.60       1066.79    
  28  0.601832     -0.507776     -0.651272      0.651272       1066.36       1067.01    
  29  0.955083E-01  -2.34854      -3.01223       3.01223       1067.62       1070.63    
  30  0.380058     -0.967430      -1.24082       1.24082       1066.59       1067.83    
  31  0.785111     -0.241930     -0.310299      0.310299       1067.62       1067.93    
  32  0.290774      -1.23521      -1.58427       1.58427       1068.79       1070.38    
  33  0.104031E-01  -4.56565      -5.85589       5.85589       1070.64       1076.49    
  34  0.323461      -1.12868      -1.44764       1.44764       1073.61       1075.06    
  35  0.893855     -0.112211     -0.143922      0.143922       1073.62       1073.77    
  36  0.826277     -0.190825     -0.244751      0.244751       1074.35       1074.60    
  37  0.808540     -0.212526     -0.272585      0.272585       1075.40       1075.67    
  38  0.597949     -0.514250     -0.659575      0.659575       1075.47       1076.13    
  39  0.510806     -0.671765     -0.861604      0.861604       1076.01       1076.87    
  40  0.346778      -1.05907      -1.35836       1.35836       1077.54       1078.90    
  41  0.835924     -0.179217     -0.229864      0.229864       1077.79       1078.02    
  42  0.449041     -0.800642      -1.02690       1.02690       1078.47       1079.50    
  43  0.951740     -0.494638E-01 -0.634421E-01  0.634421E-01   1077.74       1077.80    
  44  0.788207     -0.237994     -0.305251      0.305251       1080.20       1080.51    
  45  0.899830     -0.105549     -0.135377      0.135377       1081.00       1081.14    
  46  0.326955      -1.11793      -1.43386       1.43386       1079.52       1080.95    
  47  0.882768     -0.124693     -0.159930      0.159930       1083.56       1083.72    
  48  0.285151      -1.25474      -1.60932       1.60932       1080.84       1082.45    
  49  0.465811     -0.763976     -0.979873      0.979873       1068.71       1069.68    
loop,thermsimp(1:2)       44  0.628065E-01  0.184484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    491       1148.73         68.01          1.12         38.89          2.60          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    492       1041.59         67.98          1.12         38.93          2.55          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1041.59
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       44
neval is:      491
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       45
neval is:      491


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      491     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.376954     -0.975632      -1.25134       1.25134       972.502       973.753    
   2  0.970379     -0.300689E-01 -0.385663E-01  0.385663E-01   1004.51       1004.55    
   3  0.739910     -0.301226     -0.386352      0.386352       1014.24       1014.62    
   4  0.489862     -0.713632     -0.915301      0.915301       1023.20       1024.11    
   5  0.379134     -0.969864      -1.24394       1.24394       1024.28       1025.52    
   6  0.798443     -0.225092     -0.288702      0.288702       1033.29       1033.58    
   7  0.183696      -1.69447      -2.17333       2.17333       1033.31       1035.48    
   8  0.860311E-01  -2.45305      -3.14627       3.14627       1035.62       1038.77    
   9  0.604626     -0.503146     -0.645333      0.645333       1036.39       1037.03    
  10  0.812784     -0.207290     -0.265869      0.265869       1037.83       1038.10    
  11  0.364990      -1.00789      -1.29271       1.29271       1042.61       1043.90    
  12  0.262253      -1.33845      -1.71669       1.71669       1045.14       1046.86    
  13  0.135773      -1.99677      -2.56105       2.56105       1045.75       1048.31    
  14  0.700444     -0.356041     -0.456657      0.456657       1051.84       1052.30    
  15  0.638152     -0.449179     -0.576115      0.576115       1052.93       1053.51    
  16  0.209521      -1.56293      -2.00461       2.00461       1055.53       1057.53    
  17  0.512323     -0.668800     -0.857800      0.857800       1056.35       1057.21    
  18  0.695748E-01  -2.66535      -3.41857       3.41857       1055.64       1059.05    
  19  0.903499     -0.101480     -0.130158      0.130158       1056.96       1057.09    
  20  0.374772     -0.981437      -1.25879       1.25879       1057.18       1058.44    
  21  0.505287     -0.682628     -0.875536      0.875536       1057.63       1058.51    
  22  0.738930     -0.302553     -0.388053      0.388053       1057.48       1057.87    
  23  0.210129      -1.56004      -2.00090       2.00090       1062.09       1064.10    
  24  0.438378     -0.824674      -1.05772       1.05772       1061.41       1062.47    
  25  0.180862      -1.71002      -2.19327       2.19327       1062.65       1064.84    
  26  0.784296E-01  -2.54555      -3.26492       3.26492       1062.30       1065.57    
  27  0.164311      -1.80600      -2.31636       2.31636       1065.60       1067.92    
  28  0.481806     -0.730213     -0.936569      0.936569       1066.36       1067.29    
  29  0.278624      -1.27789      -1.63902       1.63902       1066.59       1068.23    
  30  0.206818      -1.57592      -2.02126       2.02126       1067.62       1069.64    
  31  0.359834      -1.02211      -1.31096       1.31096       1068.71       1070.02    
  32  0.304083      -1.19045      -1.52687       1.52687       1068.79       1070.32    
  33  0.592687E-01  -2.82567      -3.62420       3.62420       1067.62       1071.24    
  34  0.422819     -0.860810      -1.10407       1.10407       1073.62       1074.73    
  35  0.575712     -0.552148     -0.708183      0.708183       1074.35       1075.06    
  36  0.713361     -0.337767     -0.433219      0.433219       1073.61       1074.05    
  37  0.414737     -0.880111      -1.12883       1.12883       1075.40       1076.53    
  38  0.595127     -0.518981     -0.665643      0.665643       1075.47       1076.14    
  39  0.528961     -0.636840     -0.816809      0.816809       1070.64       1071.45    
  40  0.330842E-01  -3.40870      -4.37199       4.37199       1076.01       1080.38    
  41  0.196030      -1.62949      -2.08997       2.08997       1077.74       1079.83    
  42  0.599669     -0.511377     -0.655890      0.655890       1077.79       1078.45    
  43  0.204430      -1.58753      -2.03616       2.03616       1077.54       1079.58    
  44  0.567184E-01  -2.86966      -3.68061       3.68061       1078.47       1082.15    
  45  0.965619     -0.349858E-01 -0.448726E-01  0.448726E-01   1080.20       1080.25    
  46  0.679347E-01  -2.68921      -3.44917       3.44917       1079.52       1082.96    
  47  0.539047     -0.617952     -0.792584      0.792584       1081.00       1081.79    
  48  0.898468     -0.107064     -0.137320      0.137320       1080.84       1080.98    
  49  0.212143      -1.55049      -1.98866       1.98866       1041.59       1043.58    
loop,thermsimp(1:2)       45   1.25134      0.385663E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    493       1071.37         68.00          1.12         38.97          2.60          0.05        110.75
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1071.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       45
neval is:      492
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       46
neval is:      492


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      492     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411150     -0.888798      -1.13997       1.13997       972.502       973.642    
   2  0.587516     -0.531852     -0.682152      0.682152       1004.51       1005.19    
   3  0.244478      -1.40863      -1.80671       1.80671       1014.24       1016.04    
   4  0.668247     -0.403097     -0.517011      0.517011       1023.20       1023.71    
   5  0.364677      -1.00874      -1.29381       1.29381       1024.28       1025.57    
   6  0.953446     -0.476724E-01 -0.611444E-01  0.611444E-01   1033.29       1033.35    
   7  0.416430E-01  -3.17862      -4.07689       4.07689       1033.31       1037.39    
   8  0.899897     -0.105475     -0.135282      0.135282       1036.39       1036.52    
   9  0.553517     -0.591462     -0.758607      0.758607       1037.83       1038.59    
  10  0.465198     -0.765293     -0.981562      0.981562       1035.62       1036.60    
  11  0.109571      -2.21119      -2.83606       2.83606       1041.59       1044.42    
  12  0.905990     -0.987273E-01 -0.126627      0.126627       1042.61       1042.73    
  13  0.734904     -0.308015     -0.395059      0.395059       1045.14       1045.54    
  14  0.761233     -0.272816     -0.349913      0.349913       1045.75       1046.10    
  15  0.530098     -0.634694     -0.814057      0.814057       1051.84       1052.65    
  16  0.120202      -2.11858      -2.71728       2.71728       1052.93       1055.65    
  17  0.923613     -0.794620E-01 -0.101918      0.101918       1056.96       1057.07    
  18  0.527375     -0.639843     -0.820661      0.820661       1056.35       1057.17    
  19  0.301711E-01  -3.50087      -4.49020       4.49020       1055.53       1060.02    
  20  0.943751     -0.578930E-01 -0.742534E-01  0.742534E-01   1057.48       1057.56    
  21  0.852516     -0.159564     -0.204656      0.204656       1057.18       1057.39    
  22  0.689783     -0.371378     -0.476328      0.476328       1057.63       1058.11    
  23  0.679926     -0.385771     -0.494789      0.494789       1055.64       1056.13    
  24  0.492544     -0.708171     -0.908297      0.908297       1061.41       1062.32    
  25  0.677731     -0.389005     -0.498936      0.498936       1062.09       1062.59    
  26  0.945293     -0.562607E-01 -0.721598E-01  0.721598E-01   1062.65       1062.72    
  27  0.926517     -0.763224E-01 -0.978908E-01  0.978908E-01   1062.30       1062.40    
  28  0.188178      -1.67037      -2.14241       2.14241       1066.36       1068.50    
  29  0.714898     -0.335615     -0.430459      0.430459       1065.60       1066.03    
  30  0.533411     -0.628463     -0.806064      0.806064       1066.59       1067.40    
  31  0.957718     -0.432023E-01 -0.554112E-01  0.554112E-01   1067.62       1067.68    
  32  0.385252     -0.953858      -1.22342       1.22342       1068.71       1069.93    
  33  0.950314     -0.509632E-01 -0.653652E-01  0.653652E-01   1068.79       1068.86    
  34  0.342902      -1.07031      -1.37278       1.37278       1067.62       1068.99    
  35  0.591435     -0.525204     -0.673625      0.673625       1070.64       1071.31    
  36  0.303703      -1.19170      -1.52847       1.52847       1073.61       1075.14    
  37  0.588332     -0.530464     -0.680372      0.680372       1073.62       1074.30    
  38  0.358881      -1.02477      -1.31436       1.31436       1074.35       1075.67    
  39  0.394022     -0.931349      -1.19455       1.19455       1075.47       1076.67    
  40  0.250643      -1.38373      -1.77476       1.77476       1075.40       1077.17    
  41  0.513924     -0.665680     -0.853799      0.853799       1077.79       1078.65    
  42  0.585127     -0.535927     -0.687378      0.687378       1077.54       1078.23    
  43  0.857115     -0.154183     -0.197754      0.197754       1077.74       1077.94    
  44  0.112453      -2.18522      -2.80275       2.80275       1080.20       1083.01    
  45  0.371545     -0.990085      -1.26988       1.26988       1076.01       1077.28    
  46  0.687662     -0.374457     -0.480278      0.480278       1080.84       1081.32    
  47  0.668495     -0.402726     -0.516535      0.516535       1081.00       1081.52    
  48  0.826390     -0.190688     -0.244576      0.244576       1078.47       1078.72    
  49  0.966739     -0.338270E-01 -0.433864E-01  0.433864E-01   1071.37       1071.41    
loop,thermsimp(1:2)       46   1.13997      0.682152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    494       1076.20         68.04          1.10         38.93          2.52          0.04        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1076.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       46
neval is:      493
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       47
neval is:      493


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      493     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.150109      -1.89639      -2.43231       2.43231       972.502       974.934    
   2  0.239258      -1.43021      -1.83438       1.83438       1004.51       1006.34    
   3  0.668620     -0.402540     -0.516296      0.516296       1014.24       1014.75    
   4  0.966081     -0.345073E-01 -0.442590E-01  0.442590E-01   1023.20       1023.24    
   5  0.923150     -0.799638E-01 -0.102561      0.102561       1024.28       1024.38    
   6  0.341268      -1.07509      -1.37890       1.37890       1033.29       1034.67    
   7  0.810762     -0.209780     -0.269064      0.269064       1036.39       1036.65    
   8  0.936610     -0.654881E-01 -0.839948E-01  0.839948E-01   1035.62       1035.70    
   9  0.841905     -0.172088     -0.220720      0.220720       1033.31       1033.53    
  10  0.289300      -1.24029      -1.59080       1.59080       1037.83       1039.42    
  11  0.384787E-01  -3.25765      -4.17825       4.17825       1042.61       1046.79    
  12  0.633639E-01  -2.75886      -3.53851       3.53851       1041.59       1045.13    
  13  0.574893     -0.553572     -0.710009      0.710009       1045.14       1045.85    
  14  0.983093E-01  -2.31964      -2.97516       2.97516       1045.75       1048.73    
  15  0.224987      -1.49171      -1.91327       1.91327       1051.84       1053.75    
  16  0.805566     -0.216210     -0.277311      0.277311       1052.93       1053.21    
  17  0.431600     -0.840255      -1.07771       1.07771       1055.64       1056.71    
  18  0.495594     -0.701997     -0.900379      0.900379       1056.96       1057.86    
  19  0.127775      -2.05749      -2.63893       2.63893       1056.35       1058.99    
  20  0.146938      -1.91775      -2.45970       2.45970       1057.18       1059.64    
  21  0.538937     -0.618156     -0.792845      0.792845       1057.48       1058.27    
  22  0.811785     -0.208520     -0.267447      0.267447       1057.63       1057.90    
  23  0.224452      -1.49409      -1.91632       1.91632       1055.53       1057.44    
  24  0.739023     -0.302426     -0.387891      0.387891       1061.41       1061.80    
  25  0.608338     -0.497025     -0.637483      0.637483       1062.30       1062.94    
  26  0.818725     -0.200007     -0.256529      0.256529       1062.09       1062.35    
  27  0.434351     -0.833902      -1.06956       1.06956       1062.65       1063.72    
  28  0.874879     -0.133669     -0.171444      0.171444       1065.60       1065.77    
  29  0.478311     -0.737495     -0.945909      0.945909       1066.59       1067.54    
  30  0.420407     -0.866533      -1.11141       1.11141       1067.62       1068.73    
  31  0.803536     -0.218734     -0.280547      0.280547       1066.36       1066.64    
  32  0.375583E-01  -3.28186      -4.20930       4.20930       1068.79       1073.00    
  33  0.520223     -0.653499     -0.838175      0.838175       1067.62       1068.45    
  34  0.902726     -0.102336     -0.131256      0.131256       1068.71       1068.84    
  35  0.510519     -0.672327     -0.862324      0.862324       1070.64       1071.50    
  36  0.896421     -0.109346     -0.140246      0.140246       1071.37       1071.51    
  37  0.478401     -0.737305     -0.945665      0.945665       1073.62       1074.57    
  38  0.440189     -0.820550      -1.05243       1.05243       1073.61       1074.66    
  39  0.187305      -1.67502      -2.14837       2.14837       1074.35       1076.50    
  40  0.997827     -0.217544E-02 -0.279022E-02  0.279022E-02   1075.47       1075.48    
  41  0.453294     -0.791215      -1.01481       1.01481       1075.40       1076.41    
  42  0.143844E-01  -4.24161      -5.44028       5.44028       1076.01       1081.45    
  43  0.735772     -0.306835     -0.393545      0.393545       1077.74       1078.13    
  44  0.184631E-01  -3.99198      -5.12010       5.12010       1077.54       1082.66    
  45  0.217662      -1.52481      -1.95572       1.95572       1077.79       1079.75    
  46  0.461473     -0.773332     -0.991873      0.991873       1078.47       1079.47    
  47  0.669168     -0.401720     -0.515244      0.515244       1080.84       1081.36    
  48  0.436785     -0.828315      -1.06239       1.06239       1081.00       1082.06    
  49  0.518540     -0.656738     -0.842329      0.842329       1076.20       1077.05    
loop,thermsimp(1:2)       47   2.43231       1.83438    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    495       1157.12         67.96          1.13         39.02          2.35          0.05        110.52
Just calling func    0   0        110.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    496       1049.25         68.03          1.12         39.39          2.02          0.05        110.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1049.25
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       47
neval is:      495
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       48
neval is:      495


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      495     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.428946     -0.846425      -1.08562       1.08562       972.502       973.588    
   2  0.178225      -1.72471      -2.21210       2.21210       1004.51       1006.72    
   3  0.309460      -1.17293      -1.50439       1.50439       1014.24       1015.74    
   4  0.769202     -0.262402     -0.336556      0.336556       1023.20       1023.53    
   5  0.867155     -0.142538     -0.182819      0.182819       1024.28       1024.46    
   6  0.842618     -0.171242     -0.219634      0.219634       1033.31       1033.53    
   7  0.887101     -0.119796     -0.153651      0.153651       1033.29       1033.44    
   8  0.293963E-01  -3.52689      -4.52357       4.52357       1035.62       1040.14    
   9  0.388864     -0.944525      -1.21144       1.21144       1036.39       1037.60    
  10  0.841345E-01  -2.47534      -3.17486       3.17486       1037.83       1041.01    
  11  0.764016     -0.269167     -0.345232      0.345232       1041.59       1041.93    
  12  0.104062      -2.26277      -2.90222       2.90222       1045.14       1048.04    
  13  0.454454     -0.788658      -1.01153       1.01153       1042.61       1043.62    
  14  0.655983     -0.421620     -0.540768      0.540768       1045.75       1046.29    
  15  0.899303     -0.106136     -0.136129      0.136129       1052.93       1053.07    
  16  0.566529     -0.568226     -0.728805      0.728805       1051.84       1052.57    
  17  0.391578     -0.937570      -1.20252       1.20252       1055.64       1056.84    
  18  0.743184     -0.296811     -0.380689      0.380689       1055.53       1055.91    
  19  0.811693     -0.208633     -0.267592      0.267592       1056.96       1057.23    
  20  0.608274     -0.497129     -0.637616      0.637616       1057.63       1058.27    
  21  0.786531     -0.240123     -0.307981      0.307981       1057.48       1057.79    
  22  0.257200      -1.35790      -1.74164       1.74164       1056.35       1058.09    
  23  0.369774     -0.994862      -1.27601       1.27601       1057.18       1058.46    
  24  0.955329     -0.456994E-01 -0.586139E-01  0.586139E-01   1061.41       1061.47    
  25  0.428185     -0.848200      -1.08790       1.08790       1062.09       1063.18    
  26  0.969522     -0.309523E-01 -0.396993E-01  0.396993E-01   1062.30       1062.34    
  27  0.457112E-01  -3.08541      -3.95734       3.95734       1062.65       1066.60    
  28  0.126346      -2.06873      -2.65335       2.65335       1065.60       1068.25    
  29  0.979821     -0.203853E-01 -0.261461E-01  0.261461E-01   1066.36       1066.38    
  30  0.249987      -1.38635      -1.77812       1.77812       1066.59       1068.37    
  31  0.100726      -2.29535      -2.94401       2.94401       1067.62       1070.56    
  32  0.563310     -0.573925     -0.736114      0.736114       1067.62       1068.36    
  33  0.601320     -0.508628     -0.652364      0.652364       1068.71       1069.36    
  34  0.850177E-01  -2.46490      -3.16147       3.16147       1070.64       1073.80    
  35  0.176521      -1.73432      -2.22443       2.22443       1071.37       1073.59    
  36  0.254061      -1.37018      -1.75739       1.75739       1068.79       1070.55    
  37  0.540097     -0.616006     -0.790087      0.790087       1073.62       1074.41    
  38  0.983165E-01  -2.31956      -2.97506       2.97506       1073.61       1076.59    
  39  0.729520     -0.315369     -0.404491      0.404491       1075.47       1075.88    
  40  0.847608E-01  -2.46792      -3.16535       3.16535       1075.40       1078.56    
  41  0.791981     -0.233218     -0.299124      0.299124       1074.35       1074.65    
  42  0.117343E-01  -4.44524      -5.70144       5.70144       1076.20       1081.91    
  43  0.469135     -0.756864     -0.970751      0.970751       1077.74       1078.71    
  44  0.221703E-01  -3.80900      -4.88541       4.88541       1078.47       1083.36    
  45  0.234879      -1.44868      -1.85808       1.85808       1077.79       1079.65    
  46  0.854627     -0.157091     -0.201484      0.201484       1080.84       1081.04    
  47  0.664467E-01  -2.71135      -3.47757       3.47757       1076.01       1079.49    
  48  0.209505      -1.56301      -2.00471       2.00471       1081.00       1083.01    
  49  0.507833     -0.677603     -0.869091      0.869091       1049.25       1050.12    
loop,thermsimp(1:2)       48   1.08562       2.21210    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    497       1092.04         67.95          1.12         38.88          2.54          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    498       1034.48         67.97          1.12         39.02          2.32          0.05        110.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1034.48
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       48
neval is:      497
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       49
neval is:      497


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      497     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.822318     -0.195628     -0.250912      0.250912       972.502       972.753    
   2  0.715748     -0.334427     -0.428935      0.428935       1004.51       1004.94    
   3  0.155171      -1.86323      -2.38977       2.38977       1014.24       1016.63    
   4  0.248285      -1.39318      -1.78688       1.78688       1023.20       1024.98    
   5  0.893479E-01  -2.41522      -3.09775       3.09775       1024.28       1027.38    
   6  0.807784     -0.213461     -0.273784      0.273784       1033.29       1033.56    
   7  0.765394     -0.267364     -0.342921      0.342921       1033.31       1033.65    
   8  0.465295     -0.765084     -0.981294      0.981294       1036.39       1037.37    
   9  0.310822      -1.16853      -1.49876       1.49876       1035.62       1037.12    
  10  0.405006     -0.903853      -1.15928       1.15928       1037.83       1038.99    
  11  0.230891      -1.46581      -1.88004       1.88004       1041.59       1043.47    
  12  0.952479     -0.486868E-01 -0.624455E-01  0.624455E-01   1042.61       1042.67    
  13  0.608237     -0.497191     -0.637695      0.637695       1045.75       1046.39    
  14  0.870899     -0.138230     -0.177293      0.177293       1045.14       1045.32    
  15  0.175493      -1.74016      -2.23192       2.23192       1049.25       1051.48    
  16  0.529821     -0.635216     -0.814726      0.814726       1051.84       1052.66    
  17  0.596933     -0.515951     -0.661757      0.661757       1052.93       1053.59    
  18  0.380761     -0.965584      -1.23846       1.23846       1055.53       1056.77    
  19  0.572545     -0.557664     -0.715258      0.715258       1055.64       1056.35    
  20  0.503826     -0.685525     -0.879252      0.879252       1056.96       1057.84    
  21  0.712520     -0.338948     -0.434733      0.434733       1057.48       1057.92    
  22  0.455917     -0.785445      -1.00741       1.00741       1056.35       1057.36    
  23  0.546601     -0.604037     -0.774736      0.774736       1057.63       1058.41    
  24  0.780368     -0.247990     -0.318071      0.318071       1057.18       1057.50    
  25  0.360382      -1.02059      -1.30901       1.30901       1061.41       1062.72    
  26  0.365688      -1.00598      -1.29026       1.29026       1062.30       1063.59    
  27  0.471917     -0.750951     -0.963167      0.963167       1062.09       1063.06    
  28  0.774681     -0.255304     -0.327452      0.327452       1066.36       1066.69    
  29  0.514822     -0.663934     -0.851559      0.851559       1062.65       1063.50    
  30  0.936706     -0.653859E-01 -0.838638E-01  0.838638E-01   1065.60       1065.68    
  31  0.611289     -0.492185     -0.631275      0.631275       1067.62       1068.25    
  32  0.138276      -1.97851      -2.53762       2.53762       1066.59       1069.13    
  33  0.547999E-01  -2.90407      -3.72475       3.72475       1068.71       1072.43    
  34  0.739054E-01  -2.60497      -3.34113       3.34113       1068.79       1072.13    
  35  0.230637E-01  -3.76949      -4.83474       4.83474       1067.62       1072.45    
  36  0.294564E-01  -3.52484      -4.52095       4.52095       1071.37       1075.89    
  37  0.331008      -1.10561      -1.41806       1.41806       1070.64       1072.05    
  38  0.656803     -0.420372     -0.539167      0.539167       1073.62       1074.16    
  39  0.869431     -0.139917     -0.179457      0.179457       1074.35       1074.53    
  40  0.783501     -0.243983     -0.312931      0.312931       1075.47       1075.79    
  41  0.737192     -0.304907     -0.391073      0.391073       1073.61       1074.00    
  42  0.326415      -1.11959      -1.43598       1.43598       1075.40       1076.83    
  43  0.430213     -0.843476      -1.08184       1.08184       1077.74       1078.82    
  44  0.396582     -0.924872      -1.18624       1.18624       1076.01       1077.19    
  45  0.368807     -0.997482      -1.27937       1.27937       1077.79       1079.07    
  46  0.922518     -0.806483E-01 -0.103439      0.103439       1080.84       1080.94    
  47  0.106607      -2.23861      -2.87123       2.87123       1076.20       1079.08    
  48  0.389788     -0.942153      -1.20840       1.20840       1081.00       1082.21    
  49  0.521480     -0.651085     -0.835079      0.835079       1034.48       1035.32    
loop,thermsimp(1:2)       49  0.250912      0.428935    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    499       1067.28         67.99          1.11         38.92          2.40          0.05        110.48
Just calling func    0   0        110.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1067.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       49
neval is:      498
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       50
neval is:      498


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      498     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255294      -1.36534      -1.75118       1.75118       972.502       974.253    
   2  0.413516     -0.883059      -1.13261       1.13261       1004.51       1005.64    
   3  0.223595      -1.49792      -1.92123       1.92123       1014.24       1016.16    
   4  0.714947     -0.335546     -0.430370      0.430370       1023.20       1023.63    
   5  0.331136      -1.10523      -1.41756       1.41756       1024.28       1025.70    
   6  0.910877     -0.933475E-01 -0.119727      0.119727       1033.29       1033.41    
   7  0.576816E-01  -2.85282      -3.65901       3.65901       1033.31       1036.97    
   8  0.130224      -2.03850      -2.61457       2.61457       1034.48       1037.10    
   9  0.739903     -0.301236     -0.386365      0.386365       1035.62       1036.01    
  10  0.930449     -0.720877E-01 -0.924594E-01  0.924594E-01   1036.39       1036.48    
  11  0.471320     -0.752217     -0.964791      0.964791       1037.83       1038.80    
  12  0.427577     -0.849620      -1.08972       1.08972       1042.61       1043.70    
  13  0.519295     -0.655284     -0.840464      0.840464       1041.59       1042.43    
  14  0.157743      -1.84679      -2.36868       2.36868       1045.14       1047.51    
  15  0.408052     -0.896360      -1.14967       1.14967       1045.75       1046.90    
  16  0.784179     -0.243118     -0.311822      0.311822       1049.25       1049.56    
  17  0.932934     -0.694213E-01 -0.890395E-01  0.890395E-01   1051.84       1051.93    
  18  0.602319     -0.506968     -0.650235      0.650235       1052.93       1053.58    
  19  0.792109     -0.233056     -0.298917      0.298917       1055.64       1055.94    
  20  0.916935     -0.867189E-01 -0.111225      0.111225       1055.53       1055.64    
  21  0.245817      -1.40317      -1.79970       1.79970       1056.35       1058.15    
  22  0.722474     -0.325074     -0.416939      0.416939       1057.18       1057.60    
  23  0.448797     -0.801185      -1.02760       1.02760       1056.96       1057.99    
  24  0.147822      -1.91175      -2.45200       2.45200       1057.48       1059.93    
  25  0.826441     -0.190627     -0.244498      0.244498       1057.63       1057.88    
  26  0.136181      -1.99377      -2.55720       2.55720       1061.41       1063.97    
  27  0.555081     -0.588641     -0.754989      0.754989       1062.09       1062.85    
  28  0.421604     -0.863690      -1.10777       1.10777       1062.65       1063.76    
  29  0.934992     -0.672172E-01 -0.862126E-01  0.862126E-01   1062.30       1062.39    
  30  0.917081     -0.865597E-01 -0.111021      0.111021       1065.60       1065.71    
  31  0.211295      -1.55450      -1.99380       1.99380       1066.36       1068.35    
  32  0.336858      -1.08809      -1.39558       1.39558       1067.62       1069.02    
  33  0.210286      -1.55929      -1.99993       1.99993       1066.59       1068.59    
  34  0.575355     -0.552768     -0.708978      0.708978       1070.64       1071.35    
  35  0.822963     -0.194844     -0.249906      0.249906       1068.79       1069.04    
  36  0.510226E-01  -2.97549      -3.81635       3.81635       1068.71       1072.52    
  37  0.829304     -0.187169     -0.240062      0.240062       1067.62       1067.86    
  38  0.297206      -1.21333      -1.55621       1.55621       1073.61       1075.17    
  39  0.733070     -0.310514     -0.398264      0.398264       1073.62       1074.02    
  40  0.545801     -0.605502     -0.776614      0.776614       1074.35       1075.13    
  41  0.990988     -0.905277E-02 -0.116110E-01  0.116110E-01   1075.47       1075.48    
  42  0.671953     -0.397567     -0.509918      0.509918       1071.37       1071.88    
  43  0.594649     -0.519784     -0.666673      0.666673       1075.40       1076.06    
  44  0.698796     -0.358397     -0.459678      0.459678       1076.01       1076.47    
  45  0.703020     -0.352370     -0.451948      0.451948       1077.74       1078.19    
  46  0.634434     -0.455022     -0.583609      0.583609       1077.79       1078.38    
  47  0.691237     -0.369272     -0.473627      0.473627       1076.20       1076.68    
  48  0.902402     -0.102696     -0.131717      0.131717       1080.84       1080.97    
  49  0.433997     -0.834717      -1.07061       1.07061       1067.28       1068.35    
loop,thermsimp(1:2)       50   1.75118       1.13261    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    500       1073.06         67.98          1.12         39.40          2.03          0.04        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1073.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       50
neval is:      499
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       51
neval is:      499


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      499     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642127     -0.442969     -0.568150      0.568150       972.502       973.070    
   2  0.831300     -0.184764     -0.236978      0.236978       1004.51       1004.75    
   3  0.900454     -0.104857     -0.134489      0.134489       1014.24       1014.37    
   4  0.961218     -0.395545E-01 -0.507324E-01  0.507324E-01   1023.20       1023.25    
   5  0.684359     -0.379272     -0.486453      0.486453       1024.28       1024.76    
   6  0.717130     -0.332498     -0.426461      0.426461       1033.29       1033.72    
   7  0.332568      -1.10091      -1.41202       1.41202       1035.62       1037.03    
   8  0.733704     -0.309649     -0.397155      0.397155       1036.39       1036.78    
   9  0.774601E-01  -2.55799      -3.28087       3.28087       1033.31       1036.59    
  10  0.487558E-02  -5.32352      -6.82792       6.82792       1034.48       1041.31    
  11  0.239977      -1.42721      -1.83053       1.83053       1037.83       1039.66    
  12  0.890111     -0.116409     -0.149305      0.149305       1041.59       1041.74    
  13  0.429630     -0.844832      -1.08358       1.08358       1042.61       1043.69    
  14  0.759060     -0.275674     -0.353579      0.353579       1045.75       1046.11    
  15  0.173246      -1.75304      -2.24844       2.24844       1045.14       1047.39    
  16  0.416318     -0.876305      -1.12395       1.12395       1049.25       1050.37    
  17  0.109242      -2.21419      -2.83991       2.83991       1051.84       1054.68    
  18  0.746798     -0.291960     -0.374468      0.374468       1052.93       1053.31    
  19  0.276729      -1.28472      -1.64777       1.64777       1055.53       1057.18    
  20  0.709859     -0.342689     -0.439532      0.439532       1055.64       1056.08    
  21  0.924199     -0.788273E-01 -0.101104      0.101104       1057.18       1057.28    
  22  0.831505     -0.184517     -0.236661      0.236661       1057.63       1057.87    
  23  0.685310     -0.377884     -0.484673      0.484673       1056.96       1057.45    
  24  0.828829     -0.187742     -0.240797      0.240797       1056.35       1056.59    
  25  0.169988      -1.77203      -2.27279       2.27279       1057.48       1059.75    
  26  0.416558E-01  -3.17831      -4.07650       4.07650       1062.30       1066.38    
  27  0.248983      -1.39037      -1.78328       1.78328       1062.09       1063.88    
  28  0.982288     -0.178711E-01 -0.229214E-01  0.229214E-01   1062.65       1062.67    
  29  0.915863     -0.878881E-01 -0.112725      0.112725       1061.41       1061.53    
  30  0.325548      -1.12224      -1.43939       1.43939       1065.60       1067.04    
  31  0.598603     -0.513157     -0.658173      0.658173       1067.62       1068.27    
  32  0.509959     -0.673425     -0.863732      0.863732       1067.28       1068.14    
  33  0.580600     -0.543692     -0.697338      0.697338       1066.36       1067.06    
  34  0.917272     -0.863513E-01 -0.110754      0.110754       1066.59       1066.70    
  35  0.927434E-01  -2.37792      -3.04991       3.04991       1067.62       1070.67    
  36  0.176201      -1.73613      -2.22675       2.22675       1068.79       1071.02    
  37  0.479433     -0.735152     -0.942904      0.942904       1070.64       1071.58    
  38  0.258569      -1.35259      -1.73483       1.73483       1071.37       1073.10    
  39  0.479143     -0.735756     -0.943678      0.943678       1068.71       1069.65    
  40  0.167507      -1.78673      -2.29165       2.29165       1073.62       1075.92    
  41  0.862868     -0.147493     -0.189174      0.189174       1074.35       1074.54    
  42  0.492972     -0.707304     -0.907185      0.907185       1073.61       1074.52    
  43  0.801329     -0.221484     -0.284074      0.284074       1075.47       1075.76    
  44  0.246801      -1.39917      -1.79457       1.79457       1075.40       1077.19    
  45  0.701552     -0.354461     -0.454630      0.454630       1076.01       1076.46    
  46  0.814555     -0.205114     -0.263078      0.263078       1076.20       1076.47    
  47  0.379473     -0.968973      -1.24280       1.24280       1077.74       1078.98    
  48  0.428824     -0.846709      -1.08599       1.08599       1077.79       1078.88    
  49  0.957757     -0.431612E-01 -0.553584E-01  0.553584E-01   1073.06       1073.11    
loop,thermsimp(1:2)       51  0.568150      0.236978    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    501       1021.37         68.05          1.12         38.98          2.49          0.05        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  500    1021.4        2.925     -3.515      4.529     -102.6     0.3196    
                     -0.1464     0.5585     -99.70      4.627      1.334    

                       2.913     -1.574      1.848      6895.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.547      0.000      0.000      7000.     -1881.    

                      -1.166     -6.136     -7.056     -7.550      9.686    

                      -4.325     -3.949      4789.      0.000      7551.    



                       4051.      6422.      7479.      2396.      4176.    

                       4775.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.831     -1.697     -2.138     -2.178    -0.3807    

                     -0.3252      9.623      8.490    -0.1580E+05 -5.070    

                     -0.1234     -2.319      8.914      9.117    -0.1969E+05



                      -6.000     0.4063    -0.9937E-01  8.985      9.030    

                     -0.1944E+05 -6.000     -1.270    -0.7086      9.631    

                       9.443    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1021.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       51
neval is:      500
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       52
neval is:      500


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      500     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896160     -0.109636     -0.140619      0.140619       972.502       972.643    
   2  0.835424     -0.179816     -0.230631      0.230631       1004.51       1004.74    
   3  0.417746     -0.872882      -1.11956       1.11956       1014.24       1015.35    
   4  0.818506     -0.200274     -0.256871      0.256871       1023.20       1023.45    
   5  0.183909      -1.69331      -2.17184       2.17184       1024.28       1026.45    
   6  0.591356     -0.525336     -0.673794      0.673794       1033.29       1033.96    
   7  0.620368     -0.477443     -0.612367      0.612367       1033.31       1033.92    
   8  0.154560      -1.86718      -2.39483       2.39483       1036.39       1038.78    
   9  0.999372     -0.627923E-03 -0.805371E-03  0.805371E-03   1035.62       1035.62    
  10  0.862454     -0.147973     -0.189790      0.189790       1037.83       1038.02    
  11  0.801162     -0.221692     -0.284341      0.284341       1034.48       1034.77    
  12  0.148229      -1.90900      -2.44847       2.44847       1041.59       1044.04    
  13  0.598458     -0.513400     -0.658485      0.658485       1042.61       1043.27    
  14  0.417671     -0.873062      -1.11979       1.11979       1045.75       1046.87    
  15  0.132181      -2.02358      -2.59544       2.59544       1045.14       1047.74    
  16  0.633182     -0.456997     -0.586143      0.586143       1049.25       1049.83    
  17  0.900020     -0.105338     -0.135106      0.135106       1052.93       1053.07    
  18  0.714050     -0.336802     -0.431981      0.431981       1051.84       1052.27    
  19  0.523793     -0.646659     -0.829402      0.829402       1055.64       1056.47    
  20  0.240153E-01  -3.72906      -4.78288       4.78288       1056.35       1061.13    
  21  0.608931     -0.496050     -0.636232      0.636232       1055.53       1056.16    
  22  0.948101     -0.532939E-01 -0.683545E-01  0.683545E-01   1057.18       1057.25    
  23  0.266229      -1.32340      -1.69739       1.69739       1056.96       1058.66    
  24  0.573219     -0.556488     -0.713750      0.713750       1057.63       1058.34    
  25  0.349325      -1.05175      -1.34897       1.34897       1057.48       1058.83    
  26  0.323907      -1.12730      -1.44587       1.44587       1061.41       1062.86    
  27  0.795225E-01  -2.53172      -3.24717       3.24717       1062.65       1065.89    
  28  0.825606     -0.191637     -0.245793      0.245793       1062.09       1062.34    
  29  0.396524     -0.925018      -1.18642       1.18642       1062.30       1063.49    
  30  0.401444     -0.912687      -1.17061       1.17061       1066.59       1067.76    
  31  0.688595     -0.373102     -0.478539      0.478539       1065.60       1066.08    
  32  0.773187     -0.257234     -0.329927      0.329927       1066.36       1066.69    
  33  0.852559     -0.159512     -0.204590      0.204590       1067.28       1067.48    
  34  0.985405     -0.147025E-01 -0.188574E-01  0.188574E-01   1067.62       1067.63    
  35  0.556199     -0.586629     -0.752408      0.752408       1068.71       1069.46    
  36  0.913827     -0.901138E-01 -0.115580      0.115580       1067.62       1067.74    
  37  0.858782     -0.152240     -0.195263      0.195263       1068.79       1068.99    
  38  0.477249     -0.739717     -0.948758      0.948758       1070.64       1071.59    
  39  0.728564     -0.316680     -0.406172      0.406172       1071.37       1071.77    
  40  0.338280      -1.08388      -1.39018       1.39018       1073.06       1074.45    
  41  0.718699     -0.330313     -0.423658      0.423658       1073.61       1074.04    
  42  0.746009     -0.293017     -0.375823      0.375823       1074.35       1074.73    
  43  0.658362     -0.418001     -0.536126      0.536126       1075.47       1076.01    
  44  0.997855     -0.214685E-02 -0.275355E-02  0.275355E-02   1073.62       1073.63    
  45  0.506528     -0.680175     -0.872390      0.872390       1076.01       1076.88    
  46  0.808231E-01  -2.51549      -3.22636       3.22636       1076.20       1079.43    
  47  0.148828      -1.90497      -2.44330       2.44330       1075.40       1077.84    
  48  0.824318     -0.193199     -0.247796      0.247796       1077.79       1078.04    
  49  0.875043     -0.133482     -0.171204      0.171204       1021.37       1021.54    
loop,thermsimp(1:2)       52  0.140619      0.230631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    502       1071.52         67.97          1.13         39.17          2.12          0.05        110.44
Just calling func    0   0        110.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1071.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       52
neval is:      501
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       53
neval is:      501


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      501     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.258600      -1.35247      -1.73468       1.73468       972.502       974.237    
   2  0.335714      -1.09150      -1.39995       1.39995       1004.51       1005.91    
   3  0.106818E-01  -4.53921      -5.82197       5.82197       1014.24       1020.06    
   4  0.435887     -0.830373      -1.06503       1.06503       1021.37       1022.44    
   5  0.776831     -0.252532     -0.323897      0.323897       1023.20       1023.52    
   6  0.729448     -0.315467     -0.404617      0.404617       1024.28       1024.68    
   7  0.616540     -0.483631     -0.620304      0.620304       1033.31       1033.93    
   8  0.832841     -0.182913     -0.234603      0.234603       1033.29       1033.52    
   9  0.673790     -0.394837     -0.506416      0.506416       1034.48       1034.99    
  10  0.535507     -0.624541     -0.801034      0.801034       1035.62       1036.42    
  11  0.396426     -0.925265      -1.18674       1.18674       1037.83       1039.02    
  12  0.333676      -1.09759      -1.40776       1.40776       1036.39       1037.79    
  13  0.562408     -0.575527     -0.738169      0.738169       1042.61       1043.35    
  14  0.988355     -0.117133E-01 -0.150234E-01  0.150234E-01   1041.59       1041.60    
  15  0.674910     -0.393176     -0.504286      0.504286       1045.75       1046.26    
  16  0.645375     -0.437924     -0.561680      0.561680       1045.14       1045.70    
  17  0.400913     -0.914011      -1.17231       1.17231       1049.25       1050.42    
  18  0.228290      -1.47714      -1.89457       1.89457       1051.84       1053.74    
  19  0.882505     -0.124991     -0.160313      0.160313       1052.93       1053.09    
  20  0.932806     -0.695579E-01 -0.892147E-01  0.892147E-01   1055.53       1055.62    
  21  0.664774     -0.408308     -0.523694      0.523694       1055.64       1056.16    
  22  0.559236     -0.581184     -0.745425      0.745425       1057.18       1057.93    
  23  0.961133     -0.396421E-01 -0.508449E-01  0.508449E-01   1057.63       1057.68    
  24  0.767901     -0.264095     -0.338727      0.338727       1056.96       1057.30    
  25  0.782742     -0.244952     -0.314175      0.314175       1057.48       1057.80    
  26  0.477575E-01  -3.04162      -3.90117       3.90117       1056.35       1060.25    
  27  0.760322     -0.274013     -0.351448      0.351448       1062.09       1062.45    
  28  0.498382     -0.696388     -0.893185      0.893185       1061.41       1062.31    
  29  0.131457      -2.02908      -2.60248       2.60248       1062.30       1064.90    
  30  0.689616     -0.371621     -0.476640      0.476640       1062.65       1063.12    
  31  0.178892E-01  -4.02356      -5.16060       5.16060       1065.60       1070.76    
  32  0.243405      -1.41303      -1.81235       1.81235       1066.36       1068.17    
  33  0.282687      -1.26341      -1.62045       1.62045       1067.28       1068.90    
  34  0.828546     -0.188083     -0.241235      0.241235       1067.62       1067.86    
  35  0.667217     -0.404640     -0.518990      0.518990       1067.62       1068.14    
  36  0.813372     -0.206566     -0.264941      0.264941       1066.59       1066.86    
  37  0.853524     -0.158382     -0.203140      0.203140       1068.79       1069.00    
  38  0.832184     -0.183702     -0.235616      0.235616       1068.71       1068.94    
  39  0.911849     -0.922808E-01 -0.118359      0.118359       1070.64       1070.75    
  40  0.258232      -1.35390      -1.73651       1.73651       1071.37       1073.10    
  41  0.742217     -0.298113     -0.382359      0.382359       1073.62       1074.01    
  42  0.854288     -0.157487     -0.201992      0.201992       1073.61       1073.81    
  43  0.966448     -0.341280E-01 -0.437725E-01  0.437725E-01   1073.06       1073.10    
  44  0.474756     -0.744954     -0.955475      0.955475       1074.35       1075.31    
  45  0.332138      -1.10221      -1.41368       1.41368       1075.47       1076.89    
  46  0.591089     -0.525788     -0.674374      0.674374       1076.01       1076.68    
  47  0.644797     -0.438820     -0.562829      0.562829       1075.40       1075.96    
  48  0.729783     -0.315009     -0.404029      0.404029       1077.79       1078.20    
  49  0.306227      -1.18343      -1.51786       1.51786       1071.52       1073.04    
loop,thermsimp(1:2)       53   1.73468       1.39995    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    503       1022.43         67.95          1.13         38.97          2.52          0.05        110.62
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1022.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       53
neval is:      502
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       54
neval is:      502


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      502     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.162942      -1.81436      -2.32709       2.32709       972.502       974.829    
   2  0.240839      -1.42363      -1.82594       1.82594       1004.51       1006.34    
   3  0.676863     -0.390287     -0.500581      0.500581       1014.24       1014.74    
   4  0.298793      -1.20800      -1.54938       1.54938       1021.37       1022.92    
   5  0.463460E-01  -3.07162      -3.93965       3.93965       1023.20       1027.14    
   6  0.424832E-01  -3.15865      -4.05127       4.05127       1024.28       1028.33    
   7  0.551542     -0.595037     -0.763192      0.763192       1033.29       1034.05    
   8  0.198453      -1.61721      -2.07422       2.07422       1033.31       1035.39    
   9  0.408741E-01  -3.19726      -4.10079       4.10079       1034.48       1038.58    
  10  0.926138     -0.767317E-01 -0.984158E-01  0.984158E-01   1035.62       1035.72    
  11  0.998189     -0.181307E-02 -0.232544E-02  0.232544E-02   1036.39       1036.39    
  12  0.221790      -1.50602      -1.93162       1.93162       1037.83       1039.76    
  13  0.512477     -0.668500     -0.857416      0.857416       1041.59       1042.44    
  14  0.716428     -0.333477     -0.427717      0.427717       1042.61       1043.04    
  15  0.542239     -0.612048     -0.785011      0.785011       1045.14       1045.93    
  16  0.237089      -1.43932      -1.84607       1.84607       1045.75       1047.60    
  17  0.520333     -0.653285     -0.837902      0.837902       1049.25       1050.09    
  18  0.516420     -0.660835     -0.847584      0.847584       1052.93       1053.78    
  19  0.927350     -0.754245E-01 -0.967392E-01  0.967392E-01   1051.84       1051.94    
  20  0.495169     -0.702857     -0.901482      0.901482       1055.53       1056.43    
  21  0.756269     -0.279358     -0.358304      0.358304       1055.64       1055.99    
  22  0.697909     -0.359666     -0.461307      0.461307       1056.96       1057.42    
  23  0.911964     -0.921545E-01 -0.118197      0.118197       1057.63       1057.75    
  24  0.278968      -1.27666      -1.63744       1.63744       1057.48       1059.12    
  25  0.103449E-02  -6.87384      -8.81637       8.81637       1057.18       1066.00    
  26  0.771333     -0.259634     -0.333006      0.333006       1056.35       1056.68    
  27  0.716983     -0.332703     -0.426723      0.426723       1061.41       1061.84    
  28  0.811579     -0.208773     -0.267772      0.267772       1062.09       1062.36    
  29  0.224231      -1.49508      -1.91758       1.91758       1062.65       1064.56    
  30  0.660210E-01  -2.71778      -3.48582       3.48582       1062.30       1065.79    
  31  0.524436     -0.645431     -0.827828      0.827828       1066.59       1067.42    
  32  0.289628      -1.23916      -1.58934       1.58934       1067.62       1069.21    
  33  0.578267     -0.547720     -0.702504      0.702504       1067.62       1068.33    
  34  0.377293     -0.974732      -1.25019       1.25019       1066.36       1067.61    
  35  0.709164     -0.343668     -0.440787      0.440787       1067.28       1067.72    
  36  0.524809     -0.644721     -0.826917      0.826917       1068.71       1069.53    
  37  0.223509      -1.49830      -1.92172       1.92172       1068.79       1070.71    
  38  0.934100     -0.681715E-01 -0.874365E-01  0.874365E-01   1070.64       1070.72    
  39  0.973288     -0.270756E-01 -0.347270E-01  0.347270E-01   1065.60       1065.63    
  40  0.876726     -0.131561     -0.168740      0.168740       1071.52       1071.69    
  41  0.284953      -1.25543      -1.61021       1.61021       1073.06       1074.67    
  42  0.803469     -0.218817     -0.280654      0.280654       1071.37       1071.65    
  43  0.394988     -0.928900      -1.19140       1.19140       1073.61       1074.80    
  44  0.554814     -0.589122     -0.755606      0.755606       1073.62       1074.38    
  45  0.973148     -0.272194E-01 -0.349115E-01  0.349115E-01   1074.35       1074.39    
  46  0.569309     -0.563333     -0.722528      0.722528       1075.40       1076.12    
  47  0.967634     -0.329011E-01 -0.421988E-01  0.421988E-01   1076.01       1076.05    
  48  0.427466     -0.849882      -1.09006       1.09006       1075.47       1076.56    
  49  0.552310     -0.593645     -0.761407      0.761407       1022.43       1023.19    
loop,thermsimp(1:2)       54   2.32709       1.82594    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    504       1038.62         67.98          1.12         39.02          2.31          0.05        110.48
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1038.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       54
neval is:      503
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       55
neval is:      503


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      503     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.509602     -0.674124     -0.864630      0.864630       972.502       973.367    
   2  0.495514     -0.702160     -0.900588      0.900588       1004.51       1005.41    
   3  0.837782     -0.176998     -0.227016      0.227016       1014.24       1014.46    
   4  0.535509     -0.624537     -0.801029      0.801029       1021.37       1022.17    
   5  0.341674      -1.07390      -1.37738       1.37738       1022.43       1023.81    
   6  0.843270     -0.170469     -0.218642      0.218642       1023.20       1023.42    
   7  0.847493     -0.165473     -0.212235      0.212235       1024.28       1024.49    
   8  0.967616     -0.329200E-01 -0.422231E-01  0.422231E-01   1033.29       1033.33    
   9  0.837601     -0.177213     -0.227293      0.227293       1033.31       1033.54    
  10  0.796927E-01  -2.52958      -3.24443       3.24443       1035.62       1038.86    
  11  0.291170E-01  -3.53643      -4.53582       4.53582       1036.39       1040.92    
  12  0.128543      -2.05149      -2.63123       2.63123       1034.48       1037.11    
  13  0.195374      -1.63284      -2.09428       2.09428       1037.83       1039.93    
  14  0.711258     -0.340719     -0.437006      0.437006       1041.59       1042.02    
  15  0.738303     -0.303400     -0.389140      0.389140       1042.61       1043.00    
  16  0.513942     -0.665644     -0.853753      0.853753       1045.14       1046.00    
  17  0.717790     -0.331579     -0.425282      0.425282       1045.75       1046.18    
  18  0.709757     -0.342833     -0.439717      0.439717       1049.25       1049.69    
  19  0.836075     -0.179037     -0.229632      0.229632       1051.84       1052.07    
  20  0.885785     -0.121280     -0.155554      0.155554       1052.93       1053.09    
  21  0.374692     -0.981651      -1.25906       1.25906       1055.64       1056.90    
  22  0.233066      -1.45643      -1.86802       1.86802       1055.53       1057.40    
  23  0.475141     -0.744144     -0.954437      0.954437       1056.35       1057.30    
  24  0.567952     -0.565719     -0.725589      0.725589       1056.96       1057.69    
  25  0.928125     -0.745889E-01 -0.956675E-01  0.956675E-01   1057.63       1057.73    
  26  0.744574     -0.294943     -0.378292      0.378292       1057.48       1057.86    
  27  0.630340     -0.461496     -0.591913      0.591913       1061.41       1062.01    
  28  0.174068      -1.74831      -2.24238       2.24238       1062.09       1064.34    
  29  0.793145     -0.231750     -0.297241      0.297241       1062.65       1062.94    
  30  0.901240     -0.103984     -0.133369      0.133369       1065.60       1065.73    
  31  0.293792      -1.22488      -1.57103       1.57103       1062.30       1063.87    
  32  0.837829     -0.176941     -0.226944      0.226944       1057.18       1057.41    
  33  0.453305     -0.791191      -1.01478       1.01478       1066.59       1067.61    
  34  0.231101      -1.46490      -1.87888       1.87888       1066.36       1068.24    
  35  0.906016     -0.986982E-01 -0.126590      0.126590       1067.28       1067.40    
  36  0.251205      -1.38148      -1.77189       1.77189       1067.62       1069.39    
  37  0.518565     -0.656689     -0.842268      0.842268       1067.62       1068.46    
  38  0.737118     -0.305007     -0.391201      0.391201       1068.71       1069.10    
  39  0.229948      -1.46990      -1.88529       1.88529       1068.79       1070.68    
  40  0.221845      -1.50578      -1.93130       1.93130       1070.64       1072.57    
  41  0.511130     -0.671131     -0.860790      0.860790       1071.37       1072.23    
  42  0.137034      -1.98753      -2.54919       2.54919       1071.52       1074.07    
  43  0.870855     -0.138280     -0.177357      0.177357       1073.62       1073.80    
  44  0.528174     -0.638329     -0.818719      0.818719       1074.35       1075.17    
  45  0.152525      -1.88043      -2.41183       2.41183       1073.06       1075.47    
  46  0.339795E-01  -3.38200      -4.33774       4.33774       1073.61       1077.95    
  47  0.989348     -0.107091E-01 -0.137355E-01  0.137355E-01   1076.01       1076.02    
  48  0.951612     -0.495981E-01 -0.636144E-01  0.636144E-01   1075.40       1075.46    
  49  0.819787     -0.198711     -0.254866      0.254866       1038.62       1038.87    
loop,thermsimp(1:2)       55  0.864630      0.900588    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    505       1040.61         68.05          1.12         38.91          2.47          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1040.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       55
neval is:      504
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       56
neval is:      504


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      504     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810055     -0.210654     -0.270184      0.270184       972.502       972.772    
   2  0.944369     -0.572379E-01 -0.734131E-01  0.734131E-01   1004.51       1004.58    
   3  0.256748      -1.35966      -1.74390       1.74390       1014.24       1015.98    
   4  0.857555     -0.153670     -0.197097      0.197097       1021.37       1021.57    
   5  0.301135      -1.20020      -1.53937       1.53937       1023.20       1024.74    
   6  0.765466     -0.267271     -0.342800      0.342800       1022.43       1022.77    
   7  0.595420     -0.518488     -0.665011      0.665011       1024.28       1024.94    
   8  0.184967      -1.68758      -2.16448       2.16448       1033.29       1035.45    
   9  0.451762     -0.794599      -1.01915       1.01915       1033.31       1034.33    
  10  0.214230E-01  -3.84329      -4.92939       4.92939       1034.48       1039.41    
  11  0.133176      -2.01609      -2.58582       2.58582       1035.62       1038.21    
  12  0.167638      -1.78595      -2.29065       2.29065       1038.62       1040.91    
  13  0.900249     -0.105084     -0.134780      0.134780       1037.83       1037.97    
  14  0.542907     -0.610818     -0.783433      0.783433       1036.39       1037.17    
  15  0.911342E-01  -2.39542      -3.07236       3.07236       1041.59       1044.66    
  16  0.664024     -0.409437     -0.525142      0.525142       1042.61       1043.13    
  17  0.976823     -0.234502E-01 -0.300771E-01  0.300771E-01   1045.14       1045.17    
  18  0.293738      -1.22507      -1.57126       1.57126       1045.75       1047.32    
  19  0.938951     -0.629922E-01 -0.807936E-01  0.807936E-01   1049.25       1049.33    
  20  0.393580     -0.932470      -1.19598       1.19598       1051.84       1053.04    
  21  0.303574      -1.19213      -1.52902       1.52902       1052.93       1054.46    
  22  0.346544      -1.05975      -1.35923       1.35923       1055.64       1057.00    
  23  0.118838      -2.13000      -2.73193       2.73193       1056.35       1059.08    
  24  0.384663E-01  -3.25797      -4.17867       4.17867       1055.53       1059.71    
  25  0.624565     -0.470700     -0.603718      0.603718       1057.18       1057.79    
  26  0.225711      -1.48850      -1.90914       1.90914       1056.96       1058.87    
  27  0.269639      -1.31067      -1.68106       1.68106       1057.63       1059.31    
  28  0.886893     -0.120031     -0.153952      0.153952       1057.48       1057.64    
  29  0.184969      -1.68757      -2.16447       2.16447       1061.41       1063.58    
  30  0.302378E-01  -3.49866      -4.48737       4.48737       1062.65       1067.13    
  31  0.233638      -1.45398      -1.86487       1.86487       1062.30       1064.17    
  32  0.494824     -0.703553     -0.902374      0.902374       1062.09       1063.00    
  33  0.833664     -0.181924     -0.233335      0.233335       1065.60       1065.83    
  34  0.659846     -0.415748     -0.533237      0.533237       1067.28       1067.81    
  35  0.761908     -0.271930     -0.348776      0.348776       1066.59       1066.94    
  36  0.691542E-01  -2.67142      -3.42635       3.42635       1066.36       1069.78    
  37  0.756803     -0.278653     -0.357399      0.357399       1067.62       1067.97    
  38  0.915830     -0.879244E-01 -0.112772      0.112772       1068.71       1068.82    
  39  0.358938      -1.02461      -1.31416       1.31416       1067.62       1068.94    
  40  0.712535     -0.338927     -0.434706      0.434706       1068.79       1069.23    
  41  0.756738     -0.278739     -0.357509      0.357509       1071.37       1071.73    
  42  0.295390E-02  -5.82463      -7.47065       7.47065       1070.64       1078.11    
  43  0.908633     -0.958136E-01 -0.122890      0.122890       1073.62       1073.75    
  44  0.979116     -0.211054E-01 -0.270698E-01  0.270698E-01   1071.52       1071.55    
  45  0.420519     -0.866265      -1.11107       1.11107       1074.35       1075.46    
  46  0.982205     -0.179549E-01 -0.230288E-01  0.230288E-01   1075.40       1075.42    
  47  0.851251     -0.161049     -0.206560      0.206560       1073.06       1073.27    
  48  0.594735     -0.519639     -0.666487      0.666487       1076.01       1076.67    
  49  0.957893     -0.430197E-01 -0.551769E-01  0.551769E-01   1040.61       1040.67    
loop,thermsimp(1:2)       56  0.270184      0.734131E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    506       1021.42         68.00          1.11         39.04          2.40          0.05        110.59
Just calling func    0   0        110.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1021.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       56
neval is:      505
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       57
neval is:      505


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      505     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357102      -1.02973      -1.32073       1.32073       972.502       973.823    
   2  0.625087     -0.469865     -0.602647      0.602647       1004.51       1005.11    
   3  0.526320E-01  -2.94443      -3.77652       3.77652       1014.24       1018.01    
   4  0.385670     -0.952774      -1.22203       1.22203       1021.37       1022.59    
   5  0.532637     -0.629916     -0.807928      0.807928       1022.43       1023.24    
   6  0.804876E-01  -2.51965      -3.23170       3.23170       1023.20       1026.43    
   7  0.622772     -0.473574     -0.607405      0.607405       1024.28       1024.89    
   8  0.102026      -2.28252      -2.92756       2.92756       1033.31       1036.24    
   9  0.418336     -0.871471      -1.11775       1.11775       1033.29       1034.41    
  10  0.578766     -0.546857     -0.701396      0.701396       1036.39       1037.09    
  11  0.465316     -0.765038     -0.981235      0.981235       1037.83       1038.81    
  12  0.166433      -1.79317      -2.29991       2.29991       1035.62       1037.92    
  13  0.290530      -1.23605      -1.58535       1.58535       1034.48       1036.07    
  14  0.991156     -0.888373E-02 -0.113942E-01  0.113942E-01   1040.61       1040.62    
  15  0.747098     -0.291559     -0.373952      0.373952       1038.62       1038.99    
  16  0.117051      -2.14514      -2.75135       2.75135       1042.61       1045.36    
  17  0.281481      -1.26769      -1.62593       1.62593       1041.59       1043.21    
  18  0.694526     -0.364526     -0.467540      0.467540       1045.14       1045.61    
  19  0.397704     -0.922047      -1.18261       1.18261       1045.75       1046.94    
  20  0.604235     -0.503792     -0.646162      0.646162       1049.25       1049.89    
  21  0.910420     -0.938492E-01 -0.120371      0.120371       1051.84       1051.96    
  22  0.496596     -0.699978     -0.897790      0.897790       1052.93       1053.83    
  23  0.605982     -0.500905     -0.642459      0.642459       1055.64       1056.28    
  24  0.372826     -0.986642      -1.26546       1.26546       1057.48       1058.75    
  25  0.839451     -0.175007     -0.224463      0.224463       1057.18       1057.41    
  26  0.523045E-01  -2.95067      -3.78452       3.78452       1056.96       1060.75    
  27  0.792630     -0.232398     -0.298073      0.298073       1056.35       1056.65    
  28  0.726993     -0.318838     -0.408940      0.408940       1057.63       1058.04    
  29  0.254118      -1.36996      -1.75710       1.75710       1055.53       1057.29    
  30  0.175759      -1.73864      -2.22997       2.22997       1062.09       1064.32    
  31  0.228322      -1.47700      -1.89440       1.89440       1061.41       1063.31    
  32  0.360945      -1.01903      -1.30700       1.30700       1062.30       1063.61    
  33  0.445035     -0.809602      -1.03839       1.03839       1065.60       1066.64    
  34  0.347058      -1.05826      -1.35732       1.35732       1066.59       1067.95    
  35  0.659666     -0.416022     -0.533588      0.533588       1062.65       1063.18    
  36  0.838841     -0.175734     -0.225395      0.225395       1067.28       1067.50    
  37  0.618959     -0.479716     -0.615282      0.615282       1067.62       1068.23    
  38  0.156886      -1.85224      -2.37567       2.37567       1068.71       1071.08    
  39  0.594357     -0.520275     -0.667303      0.667303       1067.62       1068.29    
  40  0.747079     -0.291585     -0.373986      0.373986       1068.79       1069.17    
  41  0.650924     -0.429362     -0.550698      0.550698       1066.36       1066.91    
  42  0.154177      -1.86965      -2.39801       2.39801       1071.52       1073.92    
  43  0.304320      -1.18968      -1.52587       1.52587       1071.37       1072.89    
  44  0.653765     -0.425007     -0.545112      0.545112       1073.06       1073.60    
  45  0.497625     -0.697908     -0.895134      0.895134       1073.62       1074.52    
  46  0.298681E-01  -3.51097      -4.50315       4.50315       1075.40       1079.90    
  47  0.430468     -0.842882      -1.08108       1.08108       1074.35       1075.43    
  48  0.380011     -0.967555      -1.24098       1.24098       1076.01       1077.25    
  49  0.716593     -0.333247     -0.427421      0.427421       1021.42       1021.85    
loop,thermsimp(1:2)       57   1.32073      0.602647    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    507       1004.16         68.01          1.12         39.00          2.32          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1004.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       57
neval is:      506
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       58
neval is:      506


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      506     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303389      -1.19274      -1.52980       1.52980       972.502       974.032    
   2  0.644709     -0.438956     -0.563003      0.563003       1004.51       1005.07    
   3  0.490084     -0.713178     -0.914720      0.914720       1014.24       1015.15    
   4  0.579401     -0.545760     -0.699990      0.699990       1021.42       1022.12    
   5  0.217372      -1.52614      -1.95743       1.95743       1021.37       1023.33    
   6  0.670771     -0.399327     -0.512176      0.512176       1022.43       1022.94    
   7  0.794394     -0.230176     -0.295223      0.295223       1024.28       1024.57    
   8  0.700220     -0.356360     -0.457067      0.457067       1023.20       1023.65    
   9  0.151193      -1.88920      -2.42308       2.42308       1033.29       1035.71    
  10  0.423588     -0.858994      -1.10174       1.10174       1034.48       1035.58    
  11  0.358369      -1.02619      -1.31619       1.31619       1033.31       1034.63    
  12  0.949750     -0.515563E-01 -0.661259E-01  0.661259E-01   1036.39       1036.45    
  13  0.245844      -1.40306      -1.79956       1.79956       1035.62       1037.42    
  14  0.775721     -0.253963     -0.325732      0.325732       1037.83       1038.16    
  15  0.103980      -2.26356      -2.90323       2.90323       1038.62       1041.52    
  16  0.282805E-01  -3.56558      -4.57320       4.57320       1040.61       1045.19    
  17  0.737879     -0.303975     -0.389877      0.389877       1041.59       1041.98    
  18  0.125115E-01  -4.38111      -5.61920       5.61920       1042.61       1048.23    
  19  0.788906     -0.237108     -0.304114      0.304114       1045.14       1045.45    
  20  0.941148     -0.606551E-01 -0.777960E-01  0.777960E-01   1045.75       1045.83    
  21  0.243470E-01  -3.71535      -4.76529       4.76529       1049.25       1054.01    
  22  0.350536      -1.04829      -1.34453       1.34453       1051.84       1053.19    
  23  0.178398      -1.72374      -2.21086       2.21086       1052.93       1055.14    
  24  0.600163     -0.510554     -0.654834      0.654834       1055.64       1056.29    
  25  0.835028     -0.180290     -0.231240      0.231240       1056.35       1056.58    
  26  0.344087      -1.06686      -1.36835       1.36835       1055.53       1056.90    
  27  0.754072     -0.282268     -0.362036      0.362036       1057.18       1057.55    
  28  0.138425      -1.97742      -2.53624       2.53624       1057.63       1060.17    
  29  0.759097     -0.275625     -0.353516      0.353516       1057.48       1057.84    
  30  0.967383     -0.331612E-01 -0.425325E-01  0.425325E-01   1056.96       1057.01    
  31  0.746015     -0.293010     -0.375814      0.375814       1062.65       1063.02    
  32  0.461640     -0.772969     -0.991408      0.991408       1061.41       1062.40    
  33  0.727095     -0.318698     -0.408761      0.408761       1062.30       1062.71    
  34  0.875405     -0.133069     -0.170673      0.170673       1062.09       1062.27    
  35  0.915573E-01  -2.39079      -3.06642       3.06642       1065.60       1068.67    
  36  0.471693     -0.751427     -0.963778      0.963778       1066.36       1067.32    
  37  0.142837      -1.94605      -2.49600       2.49600       1067.28       1069.77    
  38  0.882395     -0.125116     -0.160473      0.160473       1066.59       1066.75    
  39  0.299360      -1.20611      -1.54695       1.54695       1067.62       1069.16    
  40  0.846797     -0.166294     -0.213288      0.213288       1067.62       1067.84    
  41  0.619412     -0.478984     -0.614343      0.614343       1068.79       1069.41    
  42  0.862563     -0.147847     -0.189628      0.189628       1068.71       1068.89    
  43  0.507188     -0.678874     -0.870722      0.870722       1071.37       1072.24    
  44  0.309829      -1.17174      -1.50286       1.50286       1073.06       1074.56    
  45  0.531290     -0.632447     -0.811174      0.811174       1071.52       1072.33    
  46  0.460187E-01  -3.07871      -3.94874       3.94874       1073.62       1077.57    
  47  0.435359     -0.831585      -1.06659       1.06659       1074.35       1075.42    
  48  0.903617     -0.101349     -0.129990      0.129990       1076.01       1076.14    
  49  0.737071E-01  -2.60766      -3.34457       3.34457       1004.16       1007.51    
loop,thermsimp(1:2)       58   1.52980      0.563003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    508       1077.99         67.98          1.12         39.50          2.03          0.05        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    509       1042.64         68.00          1.12         39.11          2.35          0.05        110.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1042.64
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       58
neval is:      508
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       59
neval is:      508


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      508     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.773269     -0.257128     -0.329792      0.329792       972.502       972.832    
   2  0.583921     -0.537989     -0.690023      0.690023       1004.51       1005.20    
   3  0.656701E-01  -2.72311      -3.49265       3.49265       1004.16       1007.65    
   4  0.894191E-01  -2.41442      -3.09673       3.09673       1014.24       1017.33    
   5  0.354705      -1.03647      -1.32937       1.32937       1021.42       1022.75    
   6  0.526699     -0.641127     -0.822307      0.822307       1022.43       1023.25    
   7  0.769224     -0.262373     -0.336518      0.336518       1021.37       1021.71    
   8  0.729715     -0.315102     -0.404148      0.404148       1023.20       1023.60    
   9  0.978924E-01  -2.32389      -2.98061       2.98061       1024.28       1027.26    
  10  0.338047      -1.08457      -1.39107       1.39107       1033.31       1034.70    
  11  0.328790      -1.11233      -1.42668       1.42668       1034.48       1035.91    
  12  0.902094     -0.103037     -0.132155      0.132155       1033.29       1033.42    
  13  0.528650     -0.637429     -0.817564      0.817564       1036.39       1037.20    
  14  0.706617     -0.347267     -0.445403      0.445403       1035.62       1036.07    
  15  0.999709     -0.291154E-03 -0.373433E-03  0.373433E-03   1037.83       1037.83    
  16  0.547958     -0.601557     -0.771555      0.771555       1038.62       1039.39    
  17  0.561992     -0.576268     -0.739119      0.739119       1041.59       1042.33    
  18  0.978975     -0.212488E-01 -0.272536E-01  0.272536E-01   1040.61       1040.64    
  19  0.497838     -0.697481     -0.894587      0.894587       1045.14       1046.04    
  20  0.899264     -0.106179     -0.136184      0.136184       1045.75       1045.89    
  21  0.279408      -1.27508      -1.63542       1.63542       1042.61       1044.24    
  22  0.632548     -0.458000     -0.587429      0.587429       1051.84       1052.43    
  23  0.282789      -1.26305      -1.61999       1.61999       1049.25       1050.87    
  24  0.518456     -0.656900     -0.842537      0.842537       1052.93       1053.78    
  25  0.130585      -2.03573      -2.61103       2.61103       1055.64       1058.25    
  26  0.767980E-01  -2.56658      -3.29188       3.29188       1056.35       1059.64    
  27  0.814279     -0.205452     -0.263513      0.263513       1055.53       1055.79    
  28  0.889639E-01  -2.41952      -3.10327       3.10327       1056.96       1060.07    
  29  0.470746     -0.753437     -0.966355      0.966355       1057.18       1058.15    
  30  0.604709     -0.503008     -0.645156      0.645156       1057.48       1058.13    
  31  0.960406     -0.403992E-01 -0.518159E-01  0.518159E-01   1057.63       1057.68    
  32  0.225544      -1.48924      -1.91009       1.91009       1062.09       1064.00    
  33  0.662278     -0.412070     -0.528520      0.528520       1061.41       1061.94    
  34  0.826290     -0.190809     -0.244731      0.244731       1062.30       1062.55    
  35  0.556070     -0.586861     -0.752706      0.752706       1062.65       1063.40    
  36  0.284946      -1.25545      -1.61024       1.61024       1066.59       1068.20    
  37  0.606321     -0.500346     -0.641743      0.641743       1066.36       1067.00    
  38  0.672946     -0.396090     -0.508024      0.508024       1067.62       1068.13    
  39  0.310037      -1.17106      -1.50200       1.50200       1065.60       1067.10    
  40  0.422732     -0.861016      -1.10434       1.10434       1068.71       1069.81    
  41  0.251543      -1.38014      -1.77017       1.77017       1067.62       1069.39    
  42  0.925797     -0.771000E-01 -0.988882E-01  0.988882E-01   1068.79       1068.89    
  43  0.156113      -1.85718      -2.38201       2.38201       1067.28       1069.66    
  44  0.457425     -0.782143      -1.00317       1.00317       1071.37       1072.37    
  45  0.921892     -0.813271E-01 -0.104310      0.104310       1071.52       1071.62    
  46  0.993514     -0.650683E-02 -0.834563E-02  0.834563E-02   1073.06       1073.07    
  47  0.856821     -0.154526     -0.198195      0.198195       1074.35       1074.55    
  48  0.232993E-01  -3.75933      -4.82171       4.82171       1076.01       1080.83    
  49  0.871002     -0.138111     -0.177140      0.177140       1042.64       1042.82    
loop,thermsimp(1:2)       59  0.329792      0.690023    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    510       1050.53         67.99          1.12         39.08          2.45          0.04        110.68
Just calling func    0   0        110.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1050.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       59
neval is:      509
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       60
neval is:      509


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      509     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.730807E-01  -2.61619      -3.35552       3.35552       972.502       975.857    
   2  0.219182      -1.51785      -1.94679       1.94679       1004.51       1006.46    
   3  0.209155E-01  -3.86726      -4.96014       4.96014       1004.16       1009.12    
   4  0.323746      -1.12780      -1.44651       1.44651       1014.24       1015.68    
   5  0.994656     -0.535866E-02 -0.687300E-02  0.687300E-02   1021.37       1021.38    
   6  0.508924E-01  -2.97804      -3.81962       3.81962       1021.42       1025.24    
   7  0.713947     -0.336946     -0.432166      0.432166       1022.43       1022.86    
   8  0.622965     -0.473265     -0.607008      0.607008       1023.20       1023.80    
   9  0.788250E-01  -2.54053      -3.25847       3.25847       1024.28       1027.54    
  10  0.207195      -1.57410      -2.01893       2.01893       1033.29       1035.31    
  11  0.865974     -0.143900     -0.184566      0.184566       1033.31       1033.50    
  12  0.228122      -1.47788      -1.89552       1.89552       1034.48       1036.38    
  13  0.120045E-01  -4.42248      -5.67225       5.67225       1035.62       1041.29    
  14  0.592208     -0.523897     -0.671949      0.671949       1036.39       1037.06    
  15  0.265409      -1.32648      -1.70134       1.70134       1037.83       1039.53    
  16  0.306881      -1.18130      -1.51513       1.51513       1038.62       1040.13    
  17  0.462477     -0.771159     -0.989086      0.989086       1040.61       1041.60    
  18  0.265825      -1.32492      -1.69933       1.69933       1041.59       1043.29    
  19  0.307042      -1.18077      -1.51445       1.51445       1042.64       1044.16    
  20  0.867187     -0.142500     -0.182770      0.182770       1042.61       1042.79    
  21  0.465988     -0.763595     -0.979384      0.979384       1045.75       1046.73    
  22  0.262575      -1.33722      -1.71511       1.71511       1045.14       1046.86    
  23  0.589218E-01  -2.83154      -3.63173       3.63173       1049.25       1052.88    
  24  0.483442     -0.726824     -0.932222      0.932222       1051.84       1052.77    
  25  0.777544     -0.251616     -0.322721      0.322721       1052.93       1053.26    
  26  0.329140      -1.11127      -1.42532       1.42532       1055.53       1056.95    
  27  0.640347     -0.445745     -0.571712      0.571712       1057.63       1058.20    
  28  0.790527E-01  -2.53764      -3.25477       3.25477       1057.48       1060.74    
  29  0.725884     -0.320364     -0.410898      0.410898       1057.18       1057.59    
  30  0.531752E-02  -5.23675      -6.71663       6.71663       1055.64       1062.35    
  31  0.185759      -1.68331      -2.15900       2.15900       1056.35       1058.51    
  32  0.812644     -0.207462     -0.266090      0.266090       1056.96       1057.23    
  33  0.548277E-01  -2.90356      -3.72410       3.72410       1061.41       1065.14    
  34  0.149717      -1.89901      -2.43566       2.43566       1062.30       1064.74    
  35  0.433157     -0.836655      -1.07309       1.07309       1062.65       1063.72    
  36  0.663287     -0.410547     -0.526567      0.526567       1062.09       1062.62    
  37  0.934606     -0.676305E-01 -0.867427E-01  0.867427E-01   1066.36       1066.44    
  38  0.671729     -0.397900     -0.510345      0.510345       1065.60       1066.11    
  39  0.940476     -0.613688E-01 -0.787114E-01  0.787114E-01   1067.62       1067.70    
  40  0.934041     -0.682349E-01 -0.875178E-01  0.875178E-01   1066.59       1066.68    
  41  0.334529E-01  -3.39762      -4.35777       4.35777       1068.79       1073.15    
  42  0.161087      -1.82581      -2.34178       2.34178       1067.62       1069.96    
  43  0.994006     -0.601223E-02 -0.771127E-02  0.771127E-02   1067.28       1067.28    
  44  0.105992      -2.24439      -2.87865       2.87865       1068.71       1071.58    
  45  0.597688     -0.514686     -0.660134      0.660134       1071.52       1072.18    
  46  0.804207     -0.217899     -0.279476      0.279476       1071.37       1071.65    
  47  0.767793     -0.264235     -0.338907      0.338907       1073.06       1073.40    
  48  0.727706     -0.317859     -0.407684      0.407684       1074.35       1074.76    
  49  0.228570      -1.47591      -1.89300       1.89300       1050.53       1052.43    
loop,thermsimp(1:2)       60   3.35552       1.94679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    511       1031.33         68.02          1.12         38.95          2.41          0.05        110.54
Just calling func    0   0        110.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1031.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       60
neval is:      510
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       61
neval is:      510


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      510     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.503884     -0.685409     -0.879103      0.879103       972.502       973.381    
   2  0.474612     -0.745258     -0.955865      0.955865       1004.51       1005.47    
   3  0.414821     -0.879908      -1.12857       1.12857       1004.16       1005.29    
   4  0.982760     -0.173898E-01 -0.223041E-01  0.223041E-01   1014.24       1014.26    
   5  0.874713     -0.133859     -0.171687      0.171687       1021.37       1021.54    
   6  0.322023      -1.13313      -1.45335       1.45335       1022.43       1023.88    
   7  0.906223     -0.984698E-01 -0.126297      0.126297       1023.20       1023.32    
   8  0.964294E-01  -2.33894      -2.99992       2.99992       1021.42       1024.42    
   9  0.219924      -1.51447      -1.94246       1.94246       1024.28       1026.22    
  10  0.689937     -0.371154     -0.476041      0.476041       1033.31       1033.79    
  11  0.377351     -0.974580      -1.24999       1.24999       1033.29       1034.54    
  12  0.143361      -1.94239      -2.49130       2.49130       1034.48       1036.97    
  13  0.351457      -1.04567      -1.34117       1.34117       1036.39       1037.73    
  14  0.578548     -0.547234     -0.701881      0.701881       1037.83       1038.53    
  15  0.738307     -0.303396     -0.389134      0.389134       1038.62       1039.01    
  16  0.840053     -0.174290     -0.223544      0.223544       1035.62       1035.84    
  17  0.808638     -0.212404     -0.272429      0.272429       1040.61       1040.88    
  18  0.432153     -0.838975      -1.07607       1.07607       1042.61       1043.68    
  19  0.436699     -0.828511      -1.06264       1.06264       1041.59       1042.65    
  20  0.537601     -0.620638     -0.796028      0.796028       1042.64       1043.44    
  21  0.422421     -0.861753      -1.10528       1.10528       1045.75       1046.86    
  22  0.508276     -0.676731     -0.867972      0.867972       1045.14       1046.01    
  23  0.991946E-01  -2.31067      -2.96366       2.96366       1050.53       1053.50    
  24  0.980348     -0.198479E-01 -0.254569E-01  0.254569E-01   1051.84       1051.87    
  25  0.365342      -1.00692      -1.29147       1.29147       1049.25       1050.54    
  26  0.847362     -0.165627     -0.212433      0.212433       1052.93       1053.15    
  27  0.399616     -0.917252      -1.17646       1.17646       1055.53       1056.70    
  28  0.301169      -1.20008      -1.53922       1.53922       1056.96       1058.50    
  29  0.578136E-01  -2.85053      -3.65608       3.65608       1057.18       1060.84    
  30  0.698848     -0.358321     -0.459582      0.459582       1057.63       1058.09    
  31  0.140298      -1.96399      -2.51901       2.51901       1056.35       1058.87    
  32  0.459777     -0.777014     -0.996596      0.996596       1057.48       1058.48    
  33  0.320027      -1.13935      -1.46133       1.46133       1055.64       1057.10    
  34  0.926096     -0.767769E-01 -0.984737E-01  0.984737E-01   1062.09       1062.19    
  35  0.867604     -0.142020     -0.182155      0.182155       1062.65       1062.83    
  36  0.415103     -0.879228      -1.12769       1.12769       1062.30       1063.43    
  37  0.723575     -0.323550     -0.414985      0.414985       1061.41       1061.83    
  38  0.211927      -1.55151      -1.98997       1.98997       1065.60       1067.59    
  39  0.517051     -0.659615     -0.846019      0.846019       1066.36       1067.20    
  40  0.561737     -0.576722     -0.739702      0.739702       1066.59       1067.33    
  41  0.395502     -0.927600      -1.18974       1.18974       1067.28       1068.47    
  42  0.707371     -0.346200     -0.444035      0.444035       1067.62       1068.07    
  43  0.820713     -0.197581     -0.253417      0.253417       1067.62       1067.87    
  44  0.344210      -1.06650      -1.36789       1.36789       1068.71       1070.07    
  45  0.201407      -1.60243      -2.05527       2.05527       1071.37       1073.42    
  46  0.647374     -0.434831     -0.557713      0.557713       1071.52       1072.08    
  47  0.814997     -0.204571     -0.262382      0.262382       1068.79       1069.05    
  48  0.865122     -0.144885     -0.185829      0.185829       1073.06       1073.24    
  49  0.200168      -1.60860      -2.06319       2.06319       1031.33       1033.39    
loop,thermsimp(1:2)       61  0.879103      0.955865    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    512       1051.92         68.03          1.12         39.21          2.31          0.05        110.71
Just calling func    0   0        110.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1051.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       61
neval is:      511
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       62
neval is:      511


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      511     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204360      -1.58787      -2.03660       2.03660       972.502       974.539    
   2  0.640108     -0.446118     -0.572190      0.572190       1004.16       1004.73    
   3  0.558996     -0.581613     -0.745975      0.745975       1004.51       1005.26    
   4  0.257135E-01  -3.66074      -4.69525       4.69525       1014.24       1018.93    
   5  0.469438     -0.756218     -0.969923      0.969923       1021.37       1022.34    
   6  0.423692     -0.858750      -1.10143       1.10143       1023.20       1024.30    
   7  0.535392     -0.624755     -0.801309      0.801309       1022.43       1023.23    
   8  0.698158     -0.359310     -0.460850      0.460850       1021.42       1021.88    
   9  0.602945     -0.505929     -0.648903      0.648903       1024.28       1024.93    
  10  0.591720     -0.524721     -0.673006      0.673006       1031.33       1032.00    
  11  0.540188     -0.615838     -0.789872      0.789872       1033.31       1034.10    
  12  0.679863     -0.385864     -0.494908      0.494908       1033.29       1033.78    
  13  0.383622     -0.958098      -1.22885       1.22885       1035.62       1036.85    
  14  0.179391E-01  -4.02077      -5.15703       5.15703       1034.48       1039.64    
  15  0.717361     -0.332176     -0.426048      0.426048       1036.39       1036.81    
  16  0.466215     -0.763109     -0.978761      0.978761       1037.83       1038.81    
  17  0.747848     -0.290555     -0.372665      0.372665       1038.62       1038.99    
  18  0.936882     -0.651983E-01 -0.836231E-01  0.836231E-01   1040.61       1040.70    
  19  0.788433     -0.237708     -0.304884      0.304884       1041.59       1041.89    
  20  0.786017     -0.240777     -0.308820      0.308820       1042.64       1042.95    
  21  0.184175      -1.69187      -2.16999       2.16999       1042.61       1044.78    
  22  0.969595     -0.308767E-01 -0.396023E-01  0.396023E-01   1045.14       1045.18    
  23  0.825641     -0.191595     -0.245739      0.245739       1045.75       1046.00    
  24  0.883569     -0.123786     -0.158767      0.158767       1049.25       1049.41    
  25  0.841619     -0.172428     -0.221156      0.221156       1051.84       1052.06    
  26  0.322497E-01  -3.43425      -4.40475       4.40475       1052.93       1057.34    
  27  0.132649      -2.02005      -2.59090       2.59090       1050.53       1053.13    
  28  0.491221     -0.710862     -0.911749      0.911749       1055.53       1056.44    
  29  0.632420     -0.458201     -0.587687      0.587687       1055.64       1056.22    
  30  0.265525      -1.32605      -1.70078       1.70078       1057.63       1059.33    
  31  0.184834      -1.68830      -2.16540       2.16540       1057.48       1059.65    
  32  0.269238      -1.31216      -1.68297       1.68297       1056.96       1058.65    
  33  0.208384      -1.56837      -2.01159       2.01159       1056.35       1058.36    
  34  0.407962     -0.896581      -1.14995       1.14995       1057.18       1058.33    
  35  0.347530      -1.05690      -1.35558       1.35558       1061.41       1062.77    
  36  0.689396     -0.371940     -0.477049      0.477049       1062.09       1062.57    
  37  0.412012     -0.886702      -1.13728       1.13728       1062.65       1063.78    
  38  0.378218     -0.972283      -1.24705       1.24705       1062.30       1063.55    
  39  0.639680E-01  -2.74937      -3.52634       3.52634       1066.36       1069.88    
  40  0.636471     -0.451817     -0.579499      0.579499       1066.59       1067.17    
  41  0.872343     -0.136572     -0.175167      0.175167       1065.60       1065.77    
  42  0.746553     -0.292289     -0.374888      0.374888       1067.62       1067.99    
  43  0.203490      -1.59214      -2.04207       2.04207       1067.62       1069.66    
  44  0.773091E-01  -2.55994      -3.28337       3.28337       1067.28       1070.56    
  45  0.474017     -0.746511     -0.957473      0.957473       1068.79       1069.75    
  46  0.288305      -1.24374      -1.59521       1.59521       1068.71       1070.30    
  47  0.168705      -1.77960      -2.28251       2.28251       1071.52       1073.80    
  48  0.479332     -0.735363     -0.943174      0.943174       1073.06       1074.00    
  49  0.741336     -0.299301     -0.383882      0.383882       1051.92       1052.31    
loop,thermsimp(1:2)       62   2.03660      0.572190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    513       1080.60         68.00          1.13         39.52          1.76          0.05        110.46
Just calling func    0   0        110.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    514       1013.30         68.00          1.12         39.07          2.48          0.04        110.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1013.30
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       62
neval is:      513
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       63
neval is:      513


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      513     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.359888      -1.02196      -1.31077       1.31077       972.502       973.813    
   2  0.252814      -1.37510      -1.76370       1.76370       1004.16       1005.93    
   3  0.429720     -0.844620      -1.08331       1.08331       1004.51       1005.59    
   4  0.202421      -1.59741      -2.04883       2.04883       1014.24       1016.28    
   5  0.861440E-01  -2.45173      -3.14459       3.14459       1021.42       1024.57    
   6  0.696882     -0.361139     -0.463195      0.463195       1021.37       1021.83    
   7  0.220975E-01  -3.81229      -4.88963       4.88963       1022.43       1027.32    
   8  0.293461      -1.22601      -1.57248       1.57248       1023.20       1024.77    
   9  0.526792     -0.640949     -0.822079      0.822079       1024.28       1025.10    
  10  0.839148     -0.175368     -0.224926      0.224926       1031.33       1031.56    
  11  0.483333     -0.727050     -0.932511      0.932511       1033.29       1034.22    
  12  0.326445      -1.11950      -1.43586       1.43586       1033.31       1034.75    
  13  0.110460      -2.20310      -2.82569       2.82569       1036.39       1039.21    
  14  0.770850     -0.260262     -0.333811      0.333811       1035.62       1035.95    
  15  0.926935E-01  -2.37846      -3.05060       3.05060       1037.83       1040.88    
  16  0.920668E-01  -2.38524      -3.05930       3.05930       1038.62       1041.68    
  17  0.401229     -0.913222      -1.17130       1.17130       1034.48       1035.65    
  18  0.637670     -0.449935     -0.577085      0.577085       1040.61       1041.19    
  19  0.345198      -1.06364      -1.36422       1.36422       1041.59       1042.95    
  20  0.142179      -1.95067      -2.50192       2.50192       1042.64       1045.14    
  21  0.983116     -0.170286E-01 -0.218408E-01  0.218408E-01   1042.61       1042.63    
  22  0.474945E-01  -3.04714      -3.90825       3.90825       1045.14       1049.05    
  23  0.817094     -0.202001     -0.259086      0.259086       1045.75       1046.01    
  24  0.961224     -0.395473E-01 -0.507233E-01  0.507233E-01   1049.25       1049.30    
  25  0.819312     -0.199290     -0.255609      0.255609       1051.84       1052.10    
  26  0.238772      -1.43225      -1.83699       1.83699       1051.92       1053.76    
  27  0.580305     -0.544202     -0.697991      0.697991       1050.53       1051.23    
  28  0.923913     -0.791370E-01 -0.101501      0.101501       1055.64       1055.74    
  29  0.469468     -0.756154     -0.969841      0.969841       1055.53       1056.50    
  30  0.462512     -0.771083     -0.988988      0.988988       1052.93       1053.92    
  31  0.955909     -0.450924E-01 -0.578354E-01  0.578354E-01   1057.18       1057.24    
  32  0.594936     -0.519301     -0.666054      0.666054       1056.35       1057.02    
  33  0.652134     -0.427505     -0.548317      0.548317       1056.96       1057.51    
  34  0.624086     -0.471467     -0.604702      0.604702       1057.63       1058.24    
  35  0.748640     -0.289497     -0.371308      0.371308       1057.48       1057.85    
  36  0.795096     -0.229292     -0.294089      0.294089       1062.09       1062.39    
  37  0.385421     -0.953419      -1.22285       1.22285       1061.41       1062.64    
  38  0.677787     -0.388922     -0.498830      0.498830       1062.30       1062.80    
  39  0.608302     -0.497083     -0.637557      0.637557       1062.65       1063.28    
  40  0.902741E-01  -2.40491      -3.08452       3.08452       1065.60       1068.68    
  41  0.926351E-01  -2.37909      -3.05141       3.05141       1066.59       1069.64    
  42  0.811925     -0.208347     -0.267226      0.267226       1067.62       1067.88    
  43  0.634969E-01  -2.75676      -3.53582       3.53582       1067.62       1071.16    
  44  0.767042     -0.265214     -0.340163      0.340163       1068.79       1069.13    
  45  0.953427     -0.476919E-01 -0.611695E-01  0.611695E-01   1066.36       1066.42    
  46  0.228194      -1.47756      -1.89511       1.89511       1068.71       1070.60    
  47  0.367126      -1.00205      -1.28522       1.28522       1067.28       1068.56    
  48  0.174219      -1.74744      -2.24126       2.24126       1071.52       1073.76    
  49  0.793132     -0.231765     -0.297262      0.297262       1013.30       1013.60    
loop,thermsimp(1:2)       63   1.31077       1.76370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    515       1062.02         67.99          1.10         38.97          2.47          0.05        110.58
Just calling func    0   0        110.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1062.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       63
neval is:      514
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       64
neval is:      514


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      514     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656018     -0.421567     -0.540701      0.540701       972.502       973.043    
   2  0.651642     -0.428259     -0.549284      0.549284       1004.51       1005.06    
   3  0.266376      -1.32284      -1.69668       1.69668       1004.16       1005.86    
   4  0.808838     -0.212157     -0.272112      0.272112       1013.30       1013.57    
   5  0.811894E-01  -2.51097      -3.22056       3.22056       1014.24       1017.46    
   6  0.449417     -0.799804      -1.02583       1.02583       1021.37       1022.40    
   7  0.234855      -1.44879      -1.85821       1.85821       1021.42       1023.28    
   8  0.433035     -0.836936      -1.07345       1.07345       1023.20       1024.27    
   9  0.726199     -0.319932     -0.410343      0.410343       1024.28       1024.69    
  10  0.390994     -0.939064      -1.20444       1.20444       1022.43       1023.63    
  11  0.459239     -0.778184     -0.998096      0.998096       1031.33       1032.33    
  12  0.278552      -1.27815      -1.63935       1.63935       1033.29       1034.93    
  13  0.820296     -0.198091     -0.254070      0.254070       1033.31       1033.57    
  14  0.794139     -0.230496     -0.295634      0.295634       1034.48       1034.78    
  15  0.742125     -0.298238     -0.382519      0.382519       1035.62       1036.00    
  16  0.318316      -1.14471      -1.46820       1.46820       1036.39       1037.85    
  17  0.483336     -0.727042     -0.932502      0.932502       1037.83       1038.76    
  18  0.186388      -1.67993      -2.15467       2.15467       1040.61       1042.77    
  19  0.113071      -2.17974      -2.79573       2.79573       1038.62       1041.41    
  20  0.374576     -0.981961      -1.25946       1.25946       1042.61       1043.87    
  21  0.879539E-01  -2.43094      -3.11792       3.11792       1041.59       1044.70    
  22  0.958734E-01  -2.34473      -3.00734       3.00734       1042.64       1045.65    
  23  0.811501     -0.208869     -0.267895      0.267895       1045.75       1046.02    
  24  0.940113     -0.617549E-01 -0.792067E-01  0.792067E-01   1045.14       1045.22    
  25  0.222957      -1.50078      -1.92489       1.92489       1049.25       1051.17    
  26  0.951243     -0.499860E-01 -0.641119E-01  0.641119E-01   1050.53       1050.60    
  27  0.279608      -1.27437      -1.63450       1.63450       1051.84       1053.48    
  28  0.382624     -0.960703      -1.23219       1.23219       1051.92       1053.15    
  29  0.545629     -0.605817     -0.777018      0.777018       1052.93       1053.71    
  30  0.523797E-01  -2.94924      -3.78268       3.78268       1055.64       1059.42    
  31  0.530247     -0.634412     -0.813694      0.813694       1055.53       1056.34    
  32  0.526385     -0.641722     -0.823071      0.823071       1056.35       1057.17    
  33  0.178459      -1.72339      -2.21042       2.21042       1057.18       1059.39    
  34  0.562233E-01  -2.87842      -3.69186       3.69186       1056.96       1060.66    
  35  0.292522      -1.22922      -1.57659       1.57659       1057.48       1059.06    
  36  0.450852     -0.796617      -1.02174       1.02174       1057.63       1058.65    
  37  0.975302     -0.250082E-01 -0.320754E-01  0.320754E-01   1062.09       1062.13    
  38  0.487739     -0.717975     -0.920872      0.920872       1061.41       1062.33    
  39  0.831838     -0.184118     -0.236149      0.236149       1062.30       1062.54    
  40  0.689417E-02  -4.97708      -6.38359       6.38359       1062.65       1069.03    
  41  0.195505      -1.63217      -2.09341       2.09341       1066.36       1068.45    
  42  0.237087      -1.43933      -1.84608       1.84608       1067.62       1069.46    
  43  0.707314     -0.346281     -0.444139      0.444139       1067.28       1067.72    
  44  0.209034      -1.56526      -2.00760       2.00760       1065.60       1067.61    
  45  0.942427     -0.592970E-01 -0.760542E-01  0.760542E-01   1068.79       1068.87    
  46  0.966526     -0.340475E-01 -0.436692E-01  0.436692E-01   1066.59       1066.63    
  47  0.227628      -1.48004      -1.89830       1.89830       1068.71       1070.60    
  48  0.964171     -0.364869E-01 -0.467980E-01  0.467980E-01   1067.62       1067.67    
  49  0.281986      -1.26590      -1.62364       1.62364       1062.02       1063.64    
loop,thermsimp(1:2)       64  0.540701      0.549284    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    516       1151.92         67.93          1.12         39.34          2.22          0.05        110.67
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    517       1055.54         68.04          1.12         38.95          2.55          0.05        110.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1055.54
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       64
neval is:      516
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       65
neval is:      516


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      516     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.449236     -0.800206      -1.02634       1.02634       972.502       973.528    
   2  0.310419      -1.16983      -1.50042       1.50042       1004.51       1006.01    
   3  0.227366      -1.48119      -1.89977       1.89977       1004.16       1006.06    
   4  0.684616     -0.378897     -0.485972      0.485972       1013.30       1013.79    
   5  0.227787      -1.47935      -1.89740       1.89740       1014.24       1016.13    
   6  0.827181     -0.189731     -0.243349      0.243349       1021.37       1021.61    
   7  0.705517     -0.348824     -0.447400      0.447400       1021.42       1021.87    
   8  0.599762     -0.511222     -0.655692      0.655692       1022.43       1023.09    
   9  0.825855     -0.191336     -0.245406      0.245406       1023.20       1023.44    
  10  0.676626     -0.390637     -0.501029      0.501029       1024.28       1024.78    
  11  0.678999     -0.387136     -0.496539      0.496539       1031.33       1031.83    
  12  0.380320     -0.966743      -1.23994       1.23994       1033.31       1034.55    
  13  0.334600      -1.09482      -1.40421       1.40421       1034.48       1035.89    
  14  0.524567     -0.645182     -0.827508      0.827508       1033.29       1034.12    
  15  0.311581      -1.16610      -1.49563       1.49563       1035.62       1037.12    
  16  0.559614     -0.580507     -0.744557      0.744557       1036.39       1037.13    
  17  0.583971     -0.537905     -0.689915      0.689915       1037.83       1038.52    
  18  0.746782     -0.291982     -0.374496      0.374496       1038.62       1038.99    
  19  0.876935     -0.131323     -0.168434      0.168434       1040.61       1040.78    
  20  0.108448      -2.22149      -2.84927       2.84927       1042.61       1045.46    
  21  0.186267      -1.68057      -2.15550       2.15550       1041.59       1043.74    
  22  0.780304     -0.248071     -0.318175      0.318175       1045.14       1045.46    
  23  0.591117E-01  -2.82833      -3.62760       3.62760       1042.64       1046.27    
  24  0.709173     -0.343655     -0.440771      0.440771       1045.75       1046.19    
  25  0.496508     -0.700155     -0.898016      0.898016       1050.53       1051.43    
  26  0.451882     -0.794333      -1.01881       1.01881       1049.25       1050.27    
  27  0.464580     -0.766622     -0.983267      0.983267       1051.92       1052.91    
  28  0.706830     -0.346965     -0.445016      0.445016       1051.84       1052.29    
  29  0.466402     -0.762707     -0.978245      0.978245       1052.93       1053.91    
  30  0.354610      -1.03674      -1.32972       1.32972       1055.53       1056.86    
  31  0.494939     -0.703320     -0.902076      0.902076       1056.35       1057.25    
  32  0.252591      -1.37599      -1.76483       1.76483       1057.63       1059.40    
  33  0.772377E-01  -2.56087      -3.28456       3.28456       1057.48       1060.77    
  34  0.716943     -0.332759     -0.426795      0.426795       1057.18       1057.61    
  35  0.433397     -0.836101      -1.07238       1.07238       1055.64       1056.71    
  36  0.954232     -0.468487E-01 -0.600880E-01  0.600880E-01   1056.96       1057.02    
  37  0.594219     -0.520508     -0.667602      0.667602       1062.09       1062.76    
  38  0.649168     -0.432064     -0.554163      0.554163       1061.41       1061.97    
  39  0.966593     -0.339782E-01 -0.435803E-01  0.435803E-01   1062.30       1062.34    
  40  0.893838     -0.112231     -0.143947      0.143947       1062.02       1062.16    
  41  0.102670      -2.27623      -2.91949       2.91949       1066.59       1069.51    
  42  0.485643     -0.722282     -0.926396      0.926396       1065.60       1066.53    
  43  0.631066     -0.460346     -0.590438      0.590438       1067.62       1068.21    
  44  0.558145     -0.583137     -0.747929      0.747929       1067.28       1068.02    
  45  0.112479      -2.18499      -2.80246       2.80246       1066.36       1069.16    
  46  0.696163     -0.362172     -0.464521      0.464521       1068.79       1069.26    
  47  0.970461     -0.299844E-01 -0.384579E-01  0.384579E-01   1062.65       1062.69    
  48  0.935509     -0.666646E-01 -0.855037E-01  0.855037E-01   1067.62       1067.70    
  49  0.105907      -2.24519      -2.87967       2.87967       1055.54       1058.42    
loop,thermsimp(1:2)       65   1.02634       1.50042    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    518        976.69         68.00          1.11         38.99          2.55          0.04        110.69
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    976.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       65
neval is:      517
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       66
neval is:      517


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      517     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.160251      -1.83101      -2.34845       2.34845       972.502       974.850    
   2  0.271444      -1.30400      -1.67251       1.67251       1004.51       1006.18    
   3  0.328460      -1.11334      -1.42797       1.42797       1004.16       1005.59    
   4  0.359497      -1.02305      -1.31216       1.31216       1013.30       1014.61    
   5  0.569481     -0.563031     -0.722141      0.722141       1014.24       1014.96    
   6  0.822561     -0.195333     -0.250533      0.250533       1021.37       1021.62    
   7  0.787532     -0.238851     -0.306349      0.306349       1021.42       1021.73    
   8  0.678676     -0.387611     -0.497149      0.497149       1022.43       1022.93    
   9  0.432296     -0.838645      -1.07564       1.07564       1023.20       1024.27    
  10  0.830507     -0.185719     -0.238203      0.238203       1024.28       1024.52    
  11  0.519228     -0.655412     -0.840629      0.840629       1031.33       1032.17    
  12  0.990765     -0.927743E-02 -0.118992E-01  0.118992E-01   1033.29       1033.30    
  13  0.315797      -1.15266      -1.47839       1.47839       1033.31       1034.79    
  14  0.487636     -0.718187     -0.921144      0.921144       1034.48       1035.40    
  15  0.491546     -0.710199     -0.910899      0.910899       1035.62       1036.53    
  16  0.309182      -1.17382      -1.50554       1.50554       1036.39       1037.89    
  17  0.673357     -0.395480     -0.507241      0.507241       1037.83       1038.34    
  18  0.357111      -1.02971      -1.32070       1.32070       1038.62       1039.94    
  19  0.494563     -0.704080     -0.903050      0.903050       1040.61       1041.52    
  20  0.542632E-01  -2.91391      -3.73737       3.73737       1041.59       1045.32    
  21  0.329687      -1.10961      -1.42318       1.42318       1042.61       1044.03    
  22  0.592540     -0.523336     -0.671229      0.671229       1045.14       1045.81    
  23  0.816102     -0.203216     -0.260644      0.260644       1045.75       1046.01    
  24  0.451260     -0.795712      -1.02058       1.02058       1042.64       1043.66    
  25  0.150730      -1.89227      -2.42702       2.42702       1049.25       1051.67    
  26  0.390605     -0.940059      -1.20572       1.20572       1050.53       1051.74    
  27  0.628912E-02  -5.06893      -6.50140       6.50140       1051.84       1058.34    
  28  0.420626E-01  -3.16860      -4.06403       4.06403       1051.92       1055.99    
  29  0.796695     -0.227283     -0.291512      0.291512       1052.93       1053.22    
  30  0.554426     -0.589821     -0.756503      0.756503       1055.64       1056.39    
  31  0.113643      -2.17469      -2.78925       2.78925       1055.53       1058.32    
  32  0.313056      -1.16137      -1.48957       1.48957       1056.96       1058.45    
  33  0.317586      -1.14701      -1.47115       1.47115       1056.35       1057.82    
  34  0.407628     -0.897401      -1.15100       1.15100       1057.18       1058.33    
  35  0.770018     -0.261341     -0.335195      0.335195       1055.54       1055.87    
  36  0.961013     -0.397670E-01 -0.510050E-01  0.510050E-01   1057.63       1057.68    
  37  0.102682      -2.27612      -2.91935       2.91935       1057.48       1060.40    
  38  0.576551     -0.550691     -0.706314      0.706314       1061.41       1062.12    
  39  0.659001     -0.417031     -0.534882      0.534882       1062.02       1062.55    
  40  0.999976     -0.238737E-04 -0.306203E-04  0.306203E-04   1062.30       1062.30    
  41  0.688762     -0.372860     -0.478229      0.478229       1062.65       1063.13    
  42  0.133754      -2.01175      -2.58027       2.58027       1062.09       1064.67    
  43  0.783076E-01  -2.54711      -3.26691       3.26691       1065.60       1068.87    
  44  0.148174      -1.90937      -2.44895       2.44895       1067.62       1070.06    
  45  0.620807     -0.476736     -0.611459      0.611459       1067.28       1067.89    
  46  0.624214     -0.471263     -0.604440      0.604440       1067.62       1068.23    
  47  0.291277      -1.23348      -1.58206       1.58206       1066.36       1067.94    
  48  0.724530     -0.322232     -0.413293      0.413293       1068.79       1069.21    
  49  0.775292     -0.254516     -0.326441      0.326441       976.693       977.019    
loop,thermsimp(1:2)       66   2.34845       1.67251    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    519       1112.22         67.97          1.11         39.00          2.43          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    520       1029.77         68.01          1.11         38.93          2.68          0.04        110.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1029.77
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       66
neval is:      519
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       67
neval is:      519


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      519     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.246614      -1.39993      -1.79555       1.79555       972.502       974.297    
   2  0.222392      -1.50331      -1.92815       1.92815       976.693       978.621    
   3  0.636829E-01  -2.75384      -3.53206       3.53206       1004.16       1007.69    
   4  0.563528E-02  -5.17871      -6.64219       6.64219       1004.51       1011.15    
   5  0.809646     -0.211159     -0.270831      0.270831       1013.30       1013.57    
   6  0.296073      -1.21715      -1.56111       1.56111       1014.24       1015.80    
   7  0.696966     -0.361019     -0.463041      0.463041       1021.37       1021.83    
   8  0.897494     -0.108148     -0.138711      0.138711       1021.42       1021.56    
   9  0.337316      -1.08673      -1.39384       1.39384       1022.43       1023.82    
  10  0.521529     -0.650990     -0.834957      0.834957       1023.20       1024.03    
  11  0.133965      -2.01018      -2.57825       2.57825       1024.28       1026.86    
  12  0.794471     -0.230078     -0.295098      0.295098       1031.33       1031.63    
  13  0.653467     -0.425463     -0.545697      0.545697       1033.29       1033.83    
  14  0.180331      -1.71296      -2.19704       2.19704       1033.31       1035.51    
  15  0.848505     -0.164279     -0.210704      0.210704       1034.48       1034.69    
  16  0.306805      -1.18154      -1.51544       1.51544       1035.62       1037.14    
  17  0.417487     -0.873501      -1.12035       1.12035       1036.39       1037.51    
  18  0.113311      -2.17762      -2.79300       2.79300       1037.83       1040.63    
  19  0.132249      -2.02307      -2.59478       2.59478       1038.62       1041.21    
  20  0.985322     -0.147866E-01 -0.189652E-01  0.189652E-01   1040.61       1040.63    
  21  0.139740      -1.96797      -2.52412       2.52412       1042.64       1045.17    
  22  0.573592E-01  -2.85842      -3.66620       3.66620       1042.61       1046.27    
  23  0.206872      -1.57566      -2.02093       2.02093       1041.59       1043.61    
  24  0.464758     -0.766239     -0.982776      0.982776       1045.14       1046.12    
  25  0.668431     -0.402822     -0.516658      0.516658       1045.75       1046.27    
  26  0.725707     -0.320609     -0.411212      0.411212       1049.25       1049.66    
  27  0.657825     -0.418817     -0.537173      0.537173       1050.53       1051.07    
  28  0.713934     -0.336965     -0.432191      0.432191       1052.93       1053.37    
  29  0.259471      -1.34911      -1.73036       1.73036       1055.54       1057.27    
  30  0.722420     -0.325149     -0.417035      0.417035       1051.92       1052.34    
  31  0.954397     -0.466754E-01 -0.598658E-01  0.598658E-01   1055.64       1055.70    
  32  0.398452     -0.920167      -1.18020       1.18020       1057.63       1058.81    
  33  0.277582      -1.28164      -1.64383       1.64383       1056.35       1057.99    
  34  0.786454     -0.240222     -0.308107      0.308107       1055.53       1055.84    
  35  0.719056     -0.329816     -0.423020      0.423020       1057.18       1057.61    
  36  0.154415      -1.86811      -2.39603       2.39603       1051.84       1054.24    
  37  0.605564     -0.501595     -0.643344      0.643344       1056.96       1057.61    
  38  0.599867     -0.511048     -0.655468      0.655468       1057.48       1058.14    
  39  0.892194     -0.114071     -0.146307      0.146307       1061.41       1061.56    
  40  0.282356      -1.26459      -1.62195       1.62195       1062.30       1063.92    
  41  0.921800     -0.814269E-01 -0.104438      0.104438       1062.02       1062.12    
  42  0.845499     -0.167828     -0.215256      0.215256       1062.65       1062.86    
  43  0.814039     -0.205747     -0.263890      0.263890       1062.09       1062.36    
  44  0.689812E-01  -2.67392      -3.42956       3.42956       1067.28       1070.71    
  45  0.973179     -0.271869E-01 -0.348699E-01  0.348699E-01   1066.36       1066.39    
  46  0.372858     -0.986559      -1.26536       1.26536       1067.62       1068.89    
  47  0.389153E-01  -3.24637      -4.16378       4.16378       1065.60       1069.76    
  48  0.738416     -0.303249     -0.388945      0.388945       1068.79       1069.18    
  49  0.731822     -0.312218     -0.400450      0.400450       1029.77       1030.17    
loop,thermsimp(1:2)       67   1.79555       1.92815    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    521       1064.32         67.94          1.12         39.05          2.51          0.05        110.68
Just calling func    0   0        110.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  520    1064.3        2.804     -3.294      4.444     -102.6     0.9603E-01
                     -0.1087E-01 0.8138     -99.70      4.868      1.081    

                       3.163     -2.147      1.981      7059.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.611      0.000      0.000      7000.      230.8    

                      -1.325     -6.164     -6.667     -7.293      8.960    

                      -4.926     -3.949      5414.      0.000      8584.    



                       3118.      6445.      6893.     -338.7      4252.    

                       4657.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.935     -1.645     -2.185     -2.239    -0.3807    

                     -0.3252      9.600      8.439    -0.1607E+05 -5.024    

                     -0.3301     -2.371      8.985      9.142    -0.1969E+05



                      -6.000     0.4130    -0.9837E-01  8.981      8.975    

                     -0.1944E+05 -6.000     -1.081    -0.7941      9.649    

                       9.412    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1064.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       67
neval is:      520
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       68
neval is:      520


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      520     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781127     -0.247017     -0.316823      0.316823       972.502       972.819    
   2  0.210197      -1.55971      -2.00048       2.00048       976.693       978.693    
   3  0.316586      -1.15016      -1.47519       1.47519       1004.16       1005.64    
   4  0.985905     -0.141949E-01 -0.182063E-01  0.182063E-01   1004.51       1004.53    
   5  0.157090      -1.85094      -2.37401       2.37401       1013.30       1015.67    
   6  0.384296     -0.956343      -1.22660       1.22660       1014.24       1015.46    
   7  0.159116      -1.83812      -2.35757       2.35757       1021.42       1023.78    
   8  0.414679     -0.880251      -1.12901       1.12901       1021.37       1022.50    
   9  0.229147      -1.47339      -1.88977       1.88977       1022.43       1024.32    
  10  0.392836     -0.934364      -1.19841       1.19841       1023.20       1024.39    
  11  0.133074      -2.01685      -2.58680       2.58680       1024.28       1026.86    
  12  0.866316     -0.143505     -0.184059      0.184059       1029.77       1029.95    
  13  0.712954     -0.338338     -0.433951      0.433951       1031.33       1031.76    
  14  0.389295     -0.943419      -1.21003       1.21003       1033.29       1034.50    
  15  0.169549      -1.77461      -2.27611       2.27611       1034.48       1036.76    
  16  0.979568     -0.206437E-01 -0.264775E-01  0.264775E-01   1033.31       1033.34    
  17  0.559945     -0.579918     -0.743800      0.743800       1035.62       1036.36    
  18  0.703450     -0.351758     -0.451164      0.451164       1036.39       1036.84    
  19  0.611891     -0.491201     -0.630013      0.630013       1037.83       1038.46    
  20  0.429121E-01  -3.14860      -4.03839       4.03839       1040.61       1044.65    
  21  0.497716     -0.697725     -0.894900      0.894900       1038.62       1039.51    
  22  0.120267      -2.11804      -2.71659       2.71659       1041.59       1044.30    
  23  0.241742E-01  -3.72247      -4.77442       4.77442       1042.64       1047.42    
  24  0.202821      -1.59543      -2.04629       2.04629       1045.14       1047.19    
  25  0.254092      -1.37006      -1.75723       1.75723       1045.75       1047.51    
  26  0.997757     -0.224588E-02 -0.288056E-02  0.288056E-02   1042.61       1042.61    
  27  0.807277     -0.214089     -0.274590      0.274590       1049.25       1049.52    
  28  0.169491E-01  -4.07754      -5.22984       5.22984       1050.53       1055.76    
  29  0.273726      -1.29563      -1.66177       1.66177       1051.92       1053.58    
  30  0.116242      -2.15208      -2.76025       2.76025       1052.93       1055.69    
  31  0.843500     -0.170196     -0.218292      0.218292       1051.84       1052.06    
  32  0.465860     -0.763871     -0.979738      0.979738       1055.64       1056.62    
  33  0.541417     -0.613566     -0.786958      0.786958       1055.53       1056.32    
  34  0.940194     -0.616693E-01 -0.790968E-01  0.790968E-01   1055.54       1055.62    
  35  0.591702     -0.524751     -0.673044      0.673044       1057.18       1057.86    
  36  0.646583     -0.436054     -0.559281      0.559281       1056.96       1057.52    
  37  0.522045     -0.650001     -0.833688      0.833688       1056.35       1057.18    
  38  0.424245E-01  -3.16003      -4.05304       4.05304       1057.48       1061.53    
  39  0.632893     -0.457454     -0.586729      0.586729       1057.63       1058.22    
  40  0.977803     -0.224473E-01 -0.287908E-01  0.287908E-01   1061.41       1061.44    
  41  0.391721     -0.937207      -1.20206       1.20206       1062.02       1063.22    
  42  0.289382      -1.24001      -1.59043       1.59043       1062.09       1063.68    
  43  0.735319     -0.307450     -0.394335      0.394335       1062.65       1063.04    
  44  0.177717      -1.72756      -2.21576       2.21576       1062.30       1064.52    
  45  0.888204     -0.118553     -0.152056      0.152056       1066.36       1066.51    
  46  0.518932     -0.655983     -0.841362      0.841362       1067.62       1068.46    
  47  0.496360     -0.700454     -0.898400      0.898400       1068.79       1069.69    
  48  0.670508E-01  -2.70230      -3.46597       3.46597       1065.60       1069.06    
  49  0.151912      -1.88445      -2.41699       2.41699       1064.32       1066.74    
loop,thermsimp(1:2)       68  0.316823       2.00048    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    522       1017.93         69.14          1.17         39.50          0.75          0.05        110.61
Just calling func    0   0        110.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1017.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       68
neval is:      521
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       69
neval is:      521


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      521     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.111181      -2.19660      -2.81735       2.81735       972.502       975.319    
   2  0.829330     -0.187137     -0.240021      0.240021       976.693       976.933    
   3  0.118774      -2.13054      -2.73262       2.73262       1004.51       1007.24    
   4  0.543420     -0.609872     -0.782220      0.782220       1004.16       1004.94    
   5  0.102381      -2.27906      -2.92311       2.92311       1014.24       1017.16    
   6  0.832082     -0.183824     -0.235772      0.235772       1013.30       1013.54    
   7  0.470441     -0.754085     -0.967187      0.967187       1021.37       1022.34    
   8  0.799667     -0.223560     -0.286737      0.286737       1021.42       1021.71    
   9  0.683218     -0.380942     -0.488594      0.488594       1022.43       1022.92    
  10  0.740638E-01  -2.60283      -3.33838       3.33838       1023.20       1026.53    
  11  0.470545     -0.753865     -0.966904      0.966904       1024.28       1025.24    
  12  0.839797     -0.174595     -0.223935      0.223935       1029.77       1029.99    
  13  0.122313      -2.10117      -2.69495       2.69495       1031.33       1034.03    
  14  0.611876     -0.491226     -0.630045      0.630045       1033.31       1033.94    
  15  0.917967     -0.855935E-01 -0.109782      0.109782       1033.29       1033.40    
  16  0.715763     -0.334406     -0.428908      0.428908       1035.62       1036.05    
  17  0.565347     -0.570315     -0.731484      0.731484       1034.48       1035.21    
  18  0.546858E-01  -2.90615      -3.72742       3.72742       1036.39       1040.11    
  19  0.513887E-01  -2.96834      -3.80718       3.80718       1037.83       1041.64    
  20  0.256175      -1.36189      -1.74676       1.74676       1038.62       1040.36    
  21  0.926792     -0.760260E-01 -0.975106E-01  0.975106E-01   1042.61       1042.71    
  22  0.344933E-01  -3.36699      -4.31849       4.31849       1041.59       1045.91    
  23  0.380822     -0.965422      -1.23825       1.23825       1040.61       1041.85    
  24  0.526217E-01  -2.94463      -3.77677       3.77677       1045.14       1048.92    
  25  0.555100     -0.588607     -0.754945      0.754945       1042.64       1043.40    
  26  0.119966E-01  -4.42313      -5.67309       5.67309       1045.75       1051.43    
  27  0.879474     -0.128432     -0.164726      0.164726       1049.25       1049.41    
  28  0.811597E-01  -2.51134      -3.22103       3.22103       1051.84       1055.06    
  29  0.997767     -0.223503E-02 -0.286664E-02  0.286664E-02   1051.92       1051.93    
  30  0.993862E-02  -4.61133      -5.91447       5.91447       1055.54       1061.45    
  31  0.530479     -0.633975     -0.813135      0.813135       1052.93       1053.75    
  32  0.539465     -0.617177     -0.791589      0.791589       1050.53       1051.33    
  33  0.839844     -0.174539     -0.223864      0.223864       1055.53       1055.75    
  34  0.627950     -0.465295     -0.596785      0.596785       1055.64       1056.23    
  35  0.457282     -0.782454      -1.00357       1.00357       1056.35       1057.35    
  36  0.699989E-01  -2.65928      -3.41078       3.41078       1056.96       1060.37    
  37  0.382999     -0.959724      -1.23094       1.23094       1057.18       1058.41    
  38  0.717438E-01  -2.63465      -3.37920       3.37920       1057.63       1061.01    
  39  0.955914     -0.450875E-01 -0.578291E-01  0.578291E-01   1061.41       1061.47    
  40  0.813202     -0.206775     -0.265209      0.265209       1057.48       1057.75    
  41  0.963426     -0.372592E-01 -0.477886E-01  0.477886E-01   1062.65       1062.70    
  42  0.325896      -1.12118      -1.43802       1.43802       1062.02       1063.46    
  43  0.734415     -0.308681     -0.395914      0.395914       1062.09       1062.49    
  44  0.810117E-01  -2.51316      -3.22337       3.22337       1062.30       1065.52    
  45  0.742469     -0.297774     -0.381923      0.381923       1066.36       1066.74    
  46  0.205496      -1.58233      -2.02949       2.02949       1064.32       1066.35    
  47  0.399443     -0.917684      -1.17702       1.17702       1067.62       1068.80    
  48  0.551542     -0.595037     -0.763193      0.763193       1065.60       1066.36    
  49  0.681679     -0.383196     -0.491486      0.491486       1017.93       1018.42    
loop,thermsimp(1:2)       69   2.81735      0.240021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    523       1024.70        120.55          2.33         43.34          3.26          0.01        169.48
Just calling func    0   0        169.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1024.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       69
neval is:      522
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       70
neval is:      522


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      522     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167708      -1.78553      -2.29012       2.29012       972.502       974.792    
   2  0.421272     -0.864477      -1.10877       1.10877       976.693       977.802    
   3  0.619565     -0.478737     -0.614027      0.614027       1004.16       1004.78    
   4  0.615544     -0.485248     -0.622378      0.622378       1004.51       1005.13    
   5  0.586901     -0.532899     -0.683494      0.683494       1013.30       1013.98    
   6  0.389106     -0.943902      -1.21065       1.21065       1014.24       1015.45    
   7  0.837804     -0.176971     -0.226983      0.226983       1017.93       1018.15    
   8  0.451508     -0.795162      -1.01987       1.01987       1021.42       1022.44    
   9  0.594869     -0.519415     -0.666200      0.666200       1021.37       1022.04    
  10  0.330017      -1.10861      -1.42190       1.42190       1022.43       1023.85    
  11  0.963797E-01  -2.33946      -3.00058       3.00058       1024.28       1027.28    
  12  0.439638     -0.821804      -1.05404       1.05404       1023.20       1024.25    
  13  0.949050     -0.522941E-01 -0.670723E-01  0.670723E-01   1029.77       1029.84    
  14  0.735941E-01  -2.60919      -3.34654       3.34654       1033.29       1036.64    
  15  0.946030     -0.554812E-01 -0.711600E-01  0.711600E-01   1033.31       1033.38    
  16  0.583930     -0.537974     -0.690004      0.690004       1031.33       1032.02    
  17  0.695404     -0.363263     -0.465919      0.465919       1034.48       1034.95    
  18  0.579599     -0.545419     -0.699553      0.699553       1035.62       1036.32    
  19  0.596639     -0.516444     -0.662389      0.662389       1036.39       1037.05    
  20  0.799584     -0.223664     -0.286871      0.286871       1038.62       1038.90    
  21  0.399753     -0.916909      -1.17602       1.17602       1037.83       1039.01    
  22  0.535145     -0.625217     -0.801901      0.801901       1040.61       1041.41    
  23  0.900623     -0.104668     -0.134247      0.134247       1042.61       1042.74    
  24  0.673666     -0.395021     -0.506653      0.506653       1042.64       1043.15    
  25  0.666487E-02  -5.01091      -6.42697       6.42697       1041.59       1048.01    
  26  0.526178     -0.642116     -0.823575      0.823575       1045.14       1045.97    
  27  0.697873     -0.359718     -0.461373      0.461373       1049.25       1049.71    
  28  0.879348     -0.128574     -0.164909      0.164909       1050.53       1050.70    
  29  0.794906     -0.229532     -0.294397      0.294397       1045.75       1046.05    
  30  0.694593     -0.364429     -0.467416      0.467416       1051.92       1052.39    
  31  0.141271      -1.95707      -2.51014       2.51014       1052.93       1055.44    
  32  0.620681     -0.476938     -0.611719      0.611719       1051.84       1052.45    
  33  0.861234     -0.149389     -0.191605      0.191605       1055.53       1055.72    
  34  0.898528     -0.106997     -0.137234      0.137234       1055.64       1055.77    
  35  0.365546      -1.00636      -1.29076       1.29076       1056.35       1057.64    
  36  0.827839E-02  -4.79411      -6.14890       6.14890       1057.48       1063.63    
  37  0.136982      -1.98790      -2.54968       2.54968       1057.18       1059.73    
  38  0.584658     -0.536728     -0.688405      0.688405       1056.96       1057.65    
  39  0.240003      -1.42711      -1.83040       1.83040       1057.63       1059.46    
  40  0.213010      -1.54642      -1.98343       1.98343       1055.54       1057.52    
  41  0.549516     -0.598717     -0.767912      0.767912       1061.41       1062.18    
  42  0.446074     -0.807270      -1.03540       1.03540       1062.09       1063.13    
  43  0.904132     -0.100780     -0.129260      0.129260       1062.65       1062.78    
  44  0.224414      -1.49426      -1.91654       1.91654       1062.02       1063.93    
  45  0.212059      -1.55089      -1.98917       1.98917       1062.30       1064.29    
  46  0.287860      -1.24528      -1.59719       1.59719       1064.32       1065.92    
  47  0.253179      -1.37366      -1.76185       1.76185       1065.60       1067.36    
  48  0.299183      -1.20670      -1.54771       1.54771       1066.36       1067.91    
  49  0.588624     -0.529968     -0.679735      0.679735       1024.70       1025.38    
loop,thermsimp(1:2)       70   2.29012       1.10877    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    524       1027.67        148.87          2.23         45.24          3.21          0.01        199.56
Just calling func    0   0        199.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1027.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       70
neval is:      523
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       71
neval is:      523


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      523     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.528905     -0.636946     -0.816945      0.816945       972.502       973.319    
   2  0.508207     -0.676867     -0.868147      0.868147       976.693       977.561    
   3  0.287229      -1.24748      -1.60001       1.60001       1004.16       1005.76    
   4  0.994131E-01  -2.30847      -2.96084       2.96084       1004.51       1007.47    
   5  0.812726     -0.207361     -0.265960      0.265960       1013.30       1013.57    
   6  0.869681E-02  -4.74480      -6.08566       6.08566       1014.24       1020.32    
   7  0.961516     -0.392441E-01 -0.503344E-01  0.503344E-01   1017.93       1017.98    
   8  0.367391      -1.00133      -1.28430       1.28430       1021.37       1022.65    
   9  0.342699      -1.07090      -1.37353       1.37353       1021.42       1022.80    
  10  0.942788     -0.589141E-01 -0.755630E-01  0.755630E-01   1022.43       1022.51    
  11  0.742531     -0.297691     -0.381817      0.381817       1023.20       1023.58    
  12  0.340374      -1.07771      -1.38227       1.38227       1024.70       1026.08    
  13  0.128035      -2.05545      -2.63632       2.63632       1024.28       1026.91    
  14  0.142536      -1.94816      -2.49870       2.49870       1029.77       1032.27    
  15  0.838352E-01  -2.47890      -3.17943       3.17943       1031.33       1034.51    
  16  0.405589     -0.902414      -1.15743       1.15743       1033.31       1034.47    
  17  0.494103     -0.705010     -0.904244      0.904244       1034.48       1035.39    
  18  0.786238     -0.240496     -0.308459      0.308459       1035.62       1035.93    
  19  0.856564     -0.154826     -0.198580      0.198580       1033.29       1033.49    
  20  0.260891E-01  -3.64624      -4.67665       4.67665       1036.39       1041.06    
  21  0.407681     -0.897270      -1.15083       1.15083       1038.62       1039.77    
  22  0.430267     -0.843350      -1.08168       1.08168       1037.83       1038.91    
  23  0.301108E-01  -3.50287      -4.49277       4.49277       1040.61       1045.11    
  24  0.779749     -0.248783     -0.319089      0.319089       1042.61       1042.93    
  25  0.954215     -0.468659E-01 -0.601101E-01  0.601101E-01   1042.64       1042.70    
  26  0.984312     -0.158128E-01 -0.202814E-01  0.202814E-01   1045.14       1045.16    
  27  0.117669      -2.13988      -2.74460       2.74460       1045.75       1048.50    
  28  0.320114      -1.13908      -1.46098       1.46098       1041.59       1043.05    
  29  0.373457     -0.984951      -1.26330       1.26330       1049.25       1050.51    
  30  0.457977     -0.780936      -1.00163       1.00163       1050.53       1051.54    
  31  0.609107     -0.495761     -0.635861      0.635861       1051.92       1052.56    
  32  0.756927     -0.278488     -0.357188      0.357188       1051.84       1052.20    
  33  0.520199     -0.653544     -0.838234      0.838234       1052.93       1053.77    
  34  0.712303     -0.339251     -0.435123      0.435123       1055.53       1055.96    
  35  0.469115E-01  -3.05949      -3.92409       3.92409       1055.64       1059.56    
  36  0.126886      -2.06447      -2.64788       2.64788       1055.54       1058.19    
  37  0.883620     -0.123728     -0.158693      0.158693       1056.35       1056.51    
  38  0.650707     -0.429696     -0.551127      0.551127       1056.96       1057.51    
  39  0.884167     -0.123109     -0.157900      0.157900       1057.63       1057.79    
  40  0.490587     -0.712153     -0.913405      0.913405       1057.18       1058.10    
  41  0.861941E-01  -2.45115      -3.14384       3.14384       1061.41       1064.56    
  42  0.356193E-01  -3.33487      -4.27729       4.27729       1062.65       1066.92    
  43  0.217167      -1.52709      -1.95864       1.95864       1062.09       1064.05    
  44  0.997682     -0.232020E-02 -0.297588E-02  0.297588E-02   1057.48       1057.48    
  45  0.361776      -1.01673      -1.30405       1.30405       1062.02       1063.32    
  46  0.405918     -0.901604      -1.15639       1.15639       1062.30       1063.46    
  47  0.360865      -1.01925      -1.30729       1.30729       1064.32       1065.63    
  48  0.432750     -0.837595      -1.07430       1.07430       1065.60       1066.67    
  49  0.378091     -0.972621      -1.24748       1.24748       1027.67       1028.92    
loop,thermsimp(1:2)       71  0.816945      0.868147    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    525       1117.74        149.19          2.20         42.61          4.88          0.04        198.91
Just calling func    0   0        198.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    526       1023.31        150.46          2.21         39.02          0.53          0.06        192.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1023.31
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       71
neval is:      525
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       72
neval is:      525


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      525     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.119135      -2.12750      -2.72872       2.72872       972.502       975.231    
   2  0.356644E-01  -3.33360      -4.27567       4.27567       976.693       980.969    
   3  0.385557     -0.953066      -1.22240       1.22240       1004.16       1005.38    
   4  0.802494     -0.220031     -0.282211      0.282211       1004.51       1004.79    
   5  0.487333     -0.718807     -0.921939      0.921939       1013.30       1014.22    
   6  0.935886     -0.662613E-01 -0.849865E-01  0.849865E-01   1017.93       1018.01    
   7  0.217380      -1.52611      -1.95738       1.95738       1014.24       1016.19    
   8  0.197993      -1.61952      -2.07720       2.07720       1022.43       1024.51    
   9  0.756521     -0.279024     -0.357876      0.357876       1021.37       1021.73    
  10  0.315359      -1.15404      -1.48017       1.48017       1021.42       1022.90    
  11  0.508617     -0.676059     -0.867111      0.867111       1023.20       1024.06    
  12  0.836037     -0.179083     -0.229691      0.229691       1024.70       1024.93    
  13  0.226984      -1.48288      -1.90193       1.90193       1024.28       1026.18    
  14  0.777911     -0.251144     -0.322116      0.322116       1027.67       1028.00    
  15  0.253888      -1.37086      -1.75826       1.75826       1029.77       1031.53    
  16  0.283509      -1.26051      -1.61673       1.61673       1033.29       1034.91    
  17  0.194443      -1.63761      -2.10040       2.10040       1033.31       1035.41    
  18  0.294262      -1.22328      -1.56898       1.56898       1031.33       1032.90    
  19  0.252723      -1.37546      -1.76416       1.76416       1034.48       1036.25    
  20  0.800298     -0.222771     -0.285726      0.285726       1035.62       1035.91    
  21  0.665950     -0.406541     -0.521428      0.521428       1037.83       1038.35    
  22  0.596297     -0.517016     -0.663123      0.663123       1038.62       1039.28    
  23  0.325633      -1.12198      -1.43905       1.43905       1036.39       1037.82    
  24  0.169967      -1.77215      -2.27295       2.27295       1042.64       1044.92    
  25  0.586498     -0.533587     -0.684377      0.684377       1042.61       1043.29    
  26  0.681283     -0.383778     -0.492232      0.492232       1041.59       1042.08    
  27  0.391354     -0.938144      -1.20326       1.20326       1040.61       1041.82    
  28  0.642255     -0.442769     -0.567895      0.567895       1045.14       1045.71    
  29  0.296551      -1.21554      -1.55904       1.55904       1045.75       1047.31    
  30  0.587799     -0.531370     -0.681533      0.681533       1049.25       1049.93    
  31  0.779511     -0.249088     -0.319479      0.319479       1050.53       1050.85    
  32  0.260161      -1.34645      -1.72696       1.72696       1051.84       1053.57    
  33  0.865672E-01  -2.44683      -3.13830       3.13830       1051.92       1055.06    
  34  0.781480     -0.246566     -0.316245      0.316245       1052.93       1053.25    
  35  0.410356     -0.890731      -1.14245       1.14245       1055.53       1056.67    
  36  0.636523     -0.451735     -0.579394      0.579394       1056.35       1056.93    
  37  0.683625     -0.380346     -0.487831      0.487831       1057.48       1057.97    
  38  0.275474      -1.28926      -1.65360       1.65360       1056.96       1058.62    
  39  0.140744      -1.96081      -2.51493       2.51493       1057.63       1060.15    
  40  0.883526     -0.123834     -0.158830      0.158830       1057.18       1057.34    
  41  0.840910     -0.173271     -0.222237      0.222237       1055.54       1055.76    
  42  0.101444      -2.28825      -2.93490       2.93490       1055.64       1058.57    
  43  0.684539     -0.379010     -0.486117      0.486117       1062.02       1062.50    
  44  0.554854     -0.589050     -0.755513      0.755513       1062.30       1063.06    
  45  0.309360      -1.17325      -1.50481       1.50481       1062.09       1063.60    
  46  0.849273     -0.163375     -0.209544      0.209544       1061.41       1061.62    
  47  0.802218     -0.220375     -0.282652      0.282652       1064.32       1064.60    
  48  0.959306     -0.415447E-01 -0.532851E-01  0.532851E-01   1065.60       1065.65    
  49  0.120712      -2.11435      -2.71186       2.71186       1023.31       1026.03    
loop,thermsimp(1:2)       72   2.72872       4.27567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    527       1015.62         68.45          1.17         39.14          1.66          0.05        110.46
Just calling func    0   0        110.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1015.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       72
neval is:      526
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       73
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      526     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.932767     -0.696000E-01 -0.892688E-01  0.892688E-01   972.502       972.591    
   2  0.859249     -0.151696     -0.194565      0.194565       976.693       976.888    
   3  0.910034     -0.942738E-01 -0.120915      0.120915       1004.51       1004.63    
   4  0.384393     -0.956091      -1.22628       1.22628       1004.16       1005.39    
   5  0.119510      -2.12436      -2.72470       2.72470       1013.30       1016.03    
   6  0.121244      -2.10995      -2.70622       2.70622       1014.24       1016.94    
   7  0.615238     -0.485746     -0.623016      0.623016       1017.93       1018.55    
   8  0.907745     -0.967914E-01 -0.124144      0.124144       1021.37       1021.49    
   9  0.962607     -0.381097E-01 -0.488794E-01  0.488794E-01   1021.42       1021.47    
  10  0.350443      -1.04856      -1.34488       1.34488       1023.20       1024.54    
  11  0.557880     -0.583611     -0.748537      0.748537       1022.43       1023.18    
  12  0.142107      -1.95117      -2.50257       2.50257       1024.70       1027.20    
  13  0.389427E-01  -3.24566      -4.16288       4.16288       1023.31       1027.48    
  14  0.131049      -2.03218      -2.60647       2.60647       1024.28       1026.88    
  15  0.371577     -0.990000      -1.26977       1.26977       1027.67       1028.94    
  16  0.895439     -0.110441     -0.141651      0.141651       1029.77       1029.91    
  17  0.247354      -1.39693      -1.79170       1.79170       1031.33       1033.12    
  18  0.775792     -0.253871     -0.325614      0.325614       1033.29       1033.61    
  19  0.474553     -0.745382     -0.956024      0.956024       1033.31       1034.27    
  20  0.327165E-01  -3.41987      -4.38632       4.38632       1035.62       1040.01    
  21  0.221985      -1.50515      -1.93050       1.93050       1034.48       1036.41    
  22  0.313046      -1.16141      -1.48961       1.48961       1036.39       1037.88    
  23  0.310849      -1.16845      -1.49865       1.49865       1037.83       1039.33    
  24  0.113534      -2.17566      -2.79049       2.79049       1038.62       1041.41    
  25  0.281587      -1.26731      -1.62545       1.62545       1040.61       1042.24    
  26  0.857968     -0.153188     -0.196479      0.196479       1041.59       1041.78    
  27  0.204505      -1.58716      -2.03569       2.03569       1042.61       1044.64    
  28  0.949492E-01  -2.35441      -3.01976       3.01976       1042.64       1045.66    
  29  0.269431      -1.31144      -1.68205       1.68205       1045.14       1046.82    
  30  0.766714     -0.265641     -0.340711      0.340711       1045.75       1046.09    
  31  0.362836      -1.01380      -1.30030       1.30030       1049.25       1050.55    
  32  0.123320      -2.09297      -2.68444       2.68444       1050.53       1053.22    
  33  0.875338     -0.133145     -0.170772      0.170772       1052.93       1053.10    
  34  0.112353      -2.18611      -2.80390       2.80390       1051.84       1054.64    
  35  0.294836      -1.22133      -1.56648       1.56648       1051.92       1053.49    
  36  0.391779     -0.937058      -1.20187       1.20187       1055.54       1056.74    
  37  0.216596      -1.52972      -1.96202       1.96202       1055.53       1057.49    
  38  0.751464     -0.285732     -0.366479      0.366479       1056.35       1056.72    
  39  0.849688     -0.162886     -0.208918      0.208918       1057.18       1057.39    
  40  0.930900     -0.716037E-01 -0.918387E-01  0.918387E-01   1057.48       1057.57    
  41  0.676689     -0.390543     -0.500909      0.500909       1055.64       1056.14    
  42  0.248359      -1.39288      -1.78650       1.78650       1056.96       1058.75    
  43  0.838769     -0.175820     -0.225506      0.225506       1057.63       1057.86    
  44  0.996033     -0.397499E-02 -0.509831E-02  0.509831E-02   1061.41       1061.42    
  45  0.107095      -2.23404      -2.86538       2.86538       1062.02       1064.88    
  46  0.378538E-01  -3.27402      -4.19925       4.19925       1062.30       1066.50    
  47  0.436068     -0.829956      -1.06450       1.06450       1062.09       1063.16    
  48  0.340356      -1.07776      -1.38234       1.38234       1064.32       1065.70    
  49  0.357541      -1.02851      -1.31916       1.31916       1015.62       1016.94    
loop,thermsimp(1:2)       73  0.892688E-01  0.194565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528       1088.69         68.37          1.13         39.69          1.48          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    529       1024.61         74.85          2.18         44.72          3.91          0.04        125.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1024.61
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       73
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       74
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      528     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.746957     -0.291748     -0.374195      0.374195       972.502       972.876    
   2  0.654041     -0.424585     -0.544571      0.544571       976.693       977.238    
   3  0.971777     -0.286291E-01 -0.367196E-01  0.367196E-01   1004.51       1004.55    
   4  0.305505      -1.18579      -1.52089       1.52089       1004.16       1005.68    
   5  0.652699     -0.426639     -0.547205      0.547205       1013.30       1013.85    
   6  0.625493     -0.469214     -0.601813      0.601813       1015.62       1016.22    
   7  0.413572     -0.882923      -1.13243       1.13243       1014.24       1015.37    
   8  0.919900     -0.834904E-01 -0.107085      0.107085       1017.93       1018.03    
   9  0.956938     -0.440172E-01 -0.564563E-01  0.564563E-01   1021.42       1021.48    
  10  0.953948     -0.471465E-01 -0.604699E-01  0.604699E-01   1021.37       1021.43    
  11  0.603540     -0.504943     -0.647638      0.647638       1022.43       1023.08    
  12  0.833847     -0.181706     -0.233055      0.233055       1023.20       1023.43    
  13  0.306025      -1.18409      -1.51871       1.51871       1024.28       1025.80    
  14  0.630307     -0.461548     -0.591980      0.591980       1024.70       1025.29    
  15  0.488765     -0.715874     -0.918178      0.918178       1023.31       1024.23    
  16  0.386761     -0.949949      -1.21840       1.21840       1027.67       1028.89    
  17  0.306484      -1.18259      -1.51679       1.51679       1029.77       1031.29    
  18  0.558986E-01  -2.88422      -3.69929       3.69929       1031.33       1035.03    
  19  0.884149     -0.123129     -0.157925      0.157925       1033.29       1033.45    
  20  0.485541E-01  -3.02508      -3.87995       3.87995       1033.31       1037.19    
  21  0.824960E-01  -2.49501      -3.20009       3.20009       1034.48       1037.68    
  22  0.956776E-01  -2.34677      -3.00996       3.00996       1036.39       1039.40    
  23  0.219396      -1.51688      -1.94554       1.94554       1037.83       1039.78    
  24  0.499160     -0.694829     -0.891185      0.891185       1035.62       1036.51    
  25  0.632589E-01  -2.76052      -3.54063       3.54063       1038.62       1042.16    
  26  0.223085E-02  -6.10537      -7.83073       7.83073       1041.59       1049.42    
  27  0.189513E-01  -3.96588      -5.08663       5.08663       1040.61       1045.70    
  28  0.274706      -1.29206      -1.65719       1.65719       1042.61       1044.27    
  29  0.929636     -0.729622E-01 -0.935811E-01  0.935811E-01   1042.64       1042.74    
  30  0.404044     -0.906231      -1.16233       1.16233       1045.75       1046.91    
  31  0.745735     -0.293386     -0.376295      0.376295       1045.14       1045.52    
  32  0.761075     -0.273024     -0.350180      0.350180       1049.25       1049.60    
  33  0.786218     -0.240522     -0.308492      0.308492       1052.93       1053.24    
  34  0.831915     -0.184025     -0.236030      0.236030       1050.53       1050.77    
  35  0.316296      -1.15108      -1.47637       1.47637       1051.92       1053.40    
  36  0.387398     -0.948303      -1.21629       1.21629       1051.84       1053.06    
  37  0.102790      -2.27507      -2.91800       2.91800       1055.64       1058.55    
  38  0.826482     -0.190577     -0.244434      0.244434       1056.35       1056.59    
  39  0.179051      -1.72009      -2.20618       2.20618       1055.54       1057.75    
  40  0.269596      -1.31083      -1.68127       1.68127       1057.18       1058.86    
  41  0.402112     -0.911024      -1.16848       1.16848       1055.53       1056.70    
  42  0.303901      -1.19105      -1.52764       1.52764       1057.48       1059.01    
  43  0.339545E-02  -5.68532      -7.29197       7.29197       1057.63       1064.92    
  44  0.856288     -0.155148     -0.198992      0.198992       1056.96       1057.16    
  45  0.203947      -1.58989      -2.03919       2.03919       1061.41       1063.45    
  46  0.490420     -0.712493     -0.913842      0.913842       1062.09       1063.01    
  47  0.616264     -0.484080     -0.620880      0.620880       1062.02       1062.64    
  48  0.923522     -0.795603E-01 -0.102044      0.102044       1064.32       1064.42    
  49  0.674972     -0.393084     -0.504169      0.504169       1024.61       1025.12    
loop,thermsimp(1:2)       74  0.374195      0.544571    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530        992.43        146.81          2.61         67.72          1.10          0.03        218.27
Just calling func    0   0        218.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    992.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       74
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       75
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      529
neval,tstepnext:      529     529

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.511930     -0.669567     -0.858785      0.858785       972.502       973.361    
   2  0.609789     -0.494643     -0.634427      0.634427       976.693       977.327    
   3  0.483436     -0.726837     -0.932239      0.932239       1004.51       1005.44    
   4  0.471953     -0.750876     -0.963072      0.963072       1004.16       1005.12    
   5  0.212248      -1.55000      -1.98802       1.98802       1013.30       1015.29    
   6  0.526853     -0.640834     -0.821932      0.821932       1014.24       1015.06    
   7  0.478704     -0.736672     -0.944853      0.944853       1015.62       1016.57    
   8  0.256402      -1.36101      -1.74563       1.74563       1017.93       1019.67    
   9  0.581510     -0.542127     -0.695330      0.695330       1021.37       1022.07    
  10  0.226705E-01  -3.78669      -4.85680       4.85680       1021.42       1026.28    
  11  0.939800     -0.620879E-01 -0.796337E-01  0.796337E-01   1022.43       1022.51    
  12  0.601944     -0.507591     -0.651034      0.651034       1023.20       1023.85    
  13  0.319261      -1.14175      -1.46440       1.46440       1023.31       1024.78    
  14  0.112679      -2.18321      -2.80018       2.80018       1024.61       1027.41    
  15  0.141653      -1.95437      -2.50667       2.50667       1024.70       1027.20    
  16  0.612134     -0.490804     -0.629503      0.629503       1024.28       1024.91    
  17  0.394615     -0.929844      -1.19262       1.19262       1027.67       1028.87    
  18  0.760698     -0.273519     -0.350814      0.350814       1029.77       1030.12    
  19  0.748600     -0.289551     -0.371377      0.371377       1033.29       1033.66    
  20  0.232640      -1.45826      -1.87036       1.87036       1031.33       1033.20    
  21  0.625025     -0.469964     -0.602774      0.602774       1035.62       1036.22    
  22  0.426265     -0.852693      -1.09366       1.09366       1033.31       1034.40    
  23  0.431979E-01  -3.14196      -4.02987       4.02987       1034.48       1038.51    
  24  0.148327      -1.90834      -2.44762       2.44762       1036.39       1038.83    
  25  0.161110      -1.82567      -2.34159       2.34159       1037.83       1040.17    
  26  0.321554      -1.13459      -1.45522       1.45522       1038.62       1040.07    
  27  0.210550      -1.55803      -1.99833       1.99833       1042.64       1044.64    
  28  0.386620     -0.950312      -1.21887       1.21887       1042.61       1043.83    
  29  0.818259     -0.200576     -0.257259      0.257259       1045.14       1045.40    
  30  0.524059     -0.646151     -0.828752      0.828752       1040.61       1041.44    
  31  0.239556      -1.42897      -1.83279       1.83279       1045.75       1047.59    
  32  0.585073     -0.536019     -0.687496      0.687496       1041.59       1042.27    
  33  0.935766     -0.663902E-01 -0.851519E-01  0.851519E-01   1049.25       1049.33    
  34  0.757466     -0.277777     -0.356275      0.356275       1050.53       1050.89    
  35  0.274990      -1.29102      -1.65586       1.65586       1051.84       1053.50    
  36  0.588752     -0.529750     -0.679456      0.679456       1052.93       1053.61    
  37  0.393180     -0.933487      -1.19729       1.19729       1051.92       1053.12    
  38  0.708359     -0.344805     -0.442245      0.442245       1056.35       1056.79    
  39  0.337627      -1.08581      -1.39266       1.39266       1055.53       1056.92    
  40  0.759039     -0.275703     -0.353615      0.353615       1056.96       1057.32    
  41  0.313517      -1.15990      -1.48769       1.48769       1055.54       1057.03    
  42  0.369505     -0.995591      -1.27694       1.27694       1055.64       1056.91    
  43  0.790633     -0.234921     -0.301309      0.301309       1057.18       1057.48    
  44  0.618594     -0.480307     -0.616040      0.616040       1057.48       1058.10    
  45  0.488377     -0.716667     -0.919195      0.919195       1062.02       1062.94    
  46  0.691968E-01  -2.67080      -3.42556       3.42556       1062.09       1065.52    
  47  0.404618     -0.904811      -1.16051       1.16051       1061.41       1062.57    
  48  0.532827     -0.629558     -0.807469      0.807469       1064.32       1065.13    
  49  0.475267E-01  -3.04646      -3.90738       3.90738       992.426       996.334    
loop,thermsimp(1:2)       75  0.858785      0.634427    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531        999.01        140.78          2.34         81.33          4.18          0.01        228.64
Just calling func    0   0        228.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    999.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.28260               529
loop is:       75
neval is:      530
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:    1.28260               529
loop is:       76
neval is:      530


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.641298               577

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      530     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.336332      -1.08966     -0.698795      0.698795       972.502       973.201    
   2  0.220852      -1.51026     -0.968530      0.968530       976.693       977.662    
   3  0.719571     -0.329100     -0.211051      0.211051       992.426       992.637    
   4  0.699273     -0.357714     -0.229401      0.229401       1004.16       1004.39    
   5  0.541485     -0.613439     -0.393397      0.393397       1004.51       1004.90    
   6  0.162303      -1.81829      -1.16607       1.16607       1014.24       1015.40    
   7  0.164668      -1.80382      -1.15679       1.15679       1013.30       1014.46    
   8  0.664364     -0.408925     -0.262243      0.262243       1015.62       1015.88    
   9  0.490353     -0.712630     -0.457008      0.457008       1017.93       1018.38    
  10  0.913814     -0.901279E-01 -0.577989E-01  0.577989E-01   1021.37       1021.43    
  11  0.606542     -0.499981     -0.320637      0.320637       1022.43       1022.75    
  12  0.147772      -1.91209      -1.22622       1.22622       1023.20       1024.42    
  13  0.775686E-01  -2.55659      -1.63954       1.63954       1023.31       1024.95    
  14  0.846735     -0.166367     -0.106691      0.106691       1024.28       1024.38    
  15  0.952438E-01  -2.35132      -1.50789       1.50789       1021.42       1022.93    
  16  0.916680     -0.869967E-01 -0.557908E-01  0.557908E-01   1024.70       1024.75    
  17  0.215671      -1.53400     -0.983752      0.983752       1024.61       1025.60    
  18  0.753021     -0.283662     -0.181912      0.181912       1027.67       1027.86    
  19  0.449396     -0.799851     -0.512943      0.512943       1029.77       1030.28    
  20  0.153398      -1.87472      -1.20226       1.20226       1031.33       1032.53    
  21  0.160505      -1.82943      -1.17321       1.17321       1033.29       1034.46    
  22  0.668243     -0.403104     -0.258510      0.258510       1033.31       1033.57    
  23  0.859835     -0.151015     -0.968455E-01  0.968455E-01   1035.62       1035.72    
  24  0.456000     -0.785262     -0.503587      0.503587       1034.48       1034.99    
  25  0.869813     -0.139477     -0.894463E-01  0.894463E-01   1036.39       1036.48    
  26  0.637861E-01  -2.75222      -1.76499       1.76499       1038.62       1040.38    
  27  0.944309E-01  -2.35989      -1.51339       1.51339       1037.83       1039.35    
  28  0.588326     -0.530475     -0.340193      0.340193       1040.61       1040.95    
  29  0.416163     -0.876677     -0.562212      0.562212       1041.59       1042.15    
  30  0.759461     -0.275147     -0.176451      0.176451       1042.61       1042.78    
  31  0.447564E-01  -3.10652      -1.99221       1.99221       1042.64       1044.63    
  32  0.440894E-01  -3.12153      -2.00183       2.00183       1045.14       1047.14    
  33  0.792544E-01  -2.53509      -1.62575       1.62575       1045.75       1047.38    
  34  0.179814      -1.71583      -1.10036       1.10036       1049.25       1050.35    
  35  0.903214     -0.101795     -0.652812E-01  0.652812E-01   1050.53       1050.60    
  36  0.575073     -0.553258     -0.354803      0.354803       1051.92       1052.28    
  37  0.180531E-01  -4.01444      -2.57445       2.57445       1051.84       1054.42    
  38  0.932690     -0.696826E-01 -0.446873E-01  0.446873E-01   1052.93       1052.98    
  39  0.285585      -1.25321     -0.803685      0.803685       1056.35       1057.15    
  40  0.980009     -0.201934E-01 -0.129500E-01  0.129500E-01   1055.64       1055.65    
  41  0.218165      -1.52250     -0.976378      0.976378       1055.53       1056.50    
  42  0.501677     -0.689800     -0.442367      0.442367       1055.54       1055.98    
  43  0.758756     -0.276074     -0.177046      0.177046       1056.96       1057.14    
  44  0.219902      -1.51457     -0.971294      0.971294       1057.18       1058.15    
  45  0.370710     -0.992336     -0.636384      0.636384       1057.48       1058.12    
  46  0.583403E-01  -2.84146      -1.82222       1.82222       1061.41       1063.24    
  47  0.270440      -1.30771     -0.838629      0.838629       1062.02       1062.86    
  48  0.912263     -0.918267E-01 -0.588883E-01  0.588883E-01   1064.32       1064.38    
  49  0.585451     -0.535373     -0.343334      0.343334       999.006       999.349    
loop,thermsimp(1:2)       76  0.698795      0.968530    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    532       1049.81        142.79          2.37         64.90          2.37          0.04        212.47
Just calling func    0   0        212.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1049.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       76
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       77
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      531     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.505925     -0.681366     -0.436959      0.436959       972.502       972.939    
   2  0.773295     -0.257094     -0.164874      0.164874       976.693       976.858    
   3  0.581901     -0.541455     -0.347234      0.347234       992.426       992.774    
   4  0.194400      -1.63784      -1.05034       1.05034       999.006       1000.06    
   5  0.398816     -0.919256     -0.589517      0.589517       1004.16       1004.75    
   6  0.137118      -1.98691      -1.27420       1.27420       1004.51       1005.78    
   7  0.905215     -0.995823E-01 -0.638619E-01  0.638619E-01   1013.30       1013.36    
   8  0.982121     -0.180403E-01 -0.115692E-01  0.115692E-01   1014.24       1014.25    
   9  0.922685     -0.804679E-01 -0.516039E-01  0.516039E-01   1015.62       1015.67    
  10  0.988731     -0.113329E-01 -0.726777E-02  0.726777E-02   1017.93       1017.93    
  11  0.212640      -1.54816     -0.992829      0.992829       1021.37       1022.36    
  12  0.120183      -2.11874      -1.35874       1.35874       1022.43       1023.79    
  13  0.730692     -0.313764     -0.201216      0.201216       1021.42       1021.62    
  14  0.135653      -1.99765      -1.28109       1.28109       1024.28       1025.56    
  15  0.507160     -0.678930     -0.435396      0.435396       1023.20       1023.63    
  16  0.564627E-01  -2.87417      -1.84320       1.84320       1024.70       1026.54    
  17  0.592778     -0.522935     -0.335357      0.335357       1023.31       1023.65    
  18  0.116234      -2.15215      -1.38017       1.38017       1024.61       1025.99    
  19  0.387572     -0.947854     -0.607857      0.607857       1027.67       1028.28    
  20  0.556396     -0.586275     -0.375977      0.375977       1029.77       1030.15    
  21  0.641282     -0.444286     -0.284920      0.284920       1031.33       1031.62    
  22  0.730394     -0.314171     -0.201478      0.201478       1033.31       1033.51    
  23  0.359178      -1.02394     -0.656649      0.656649       1033.29       1033.95    
  24  0.354988      -1.03567     -0.664173      0.664173       1034.48       1035.15    
  25  0.839223     -0.175278     -0.112406      0.112406       1035.62       1035.73    
  26  0.712648     -0.338768     -0.217251      0.217251       1036.39       1036.60    
  27  0.588783     -0.529697     -0.339694      0.339694       1037.83       1038.17    
  28  0.374152     -0.983093     -0.630456      0.630456       1038.62       1039.25    
  29  0.233762      -1.45345     -0.932095      0.932095       1040.61       1041.54    
  30  0.984655     -0.154644E-01 -0.991728E-02  0.991728E-02   1041.59       1041.60    
  31  0.438134     -0.825230     -0.529218      0.529218       1042.61       1043.14    
  32  0.142901      -1.94560      -1.24771       1.24771       1042.64       1043.89    
  33  0.300631      -1.20187     -0.770759      0.770759       1045.14       1045.91    
  34  0.278172      -1.27952     -0.820552      0.820552       1045.75       1046.57    
  35  0.231731E-01  -3.76477      -2.41434       2.41434       1049.25       1051.66    
  36  0.667030     -0.404920     -0.259675      0.259675       1050.53       1050.79    
  37  0.500789     -0.691570     -0.443503      0.443503       1051.92       1052.37    
  38  0.172207      -1.75906      -1.12808       1.12808       1052.93       1054.06    
  39  0.649294     -0.431869     -0.276957      0.276957       1051.84       1052.12    
  40  0.233896      -1.45288     -0.931728      0.931728       1055.64       1056.57    
  41  0.755972E-01  -2.58234      -1.65605       1.65605       1055.54       1057.20    
  42  0.238716      -1.43248     -0.918647      0.918647       1055.53       1056.45    
  43  0.866657     -0.143112     -0.917777E-01  0.917777E-01   1056.96       1057.05    
  44  0.329018      -1.11164     -0.712895      0.712895       1056.35       1057.06    
  45  0.632540     -0.458012     -0.293723      0.293723       1057.48       1057.78    
  46  0.881194     -0.126478     -0.811101E-01  0.811101E-01   1057.18       1057.26    
  47  0.245586      -1.40411     -0.900451      0.900451       1062.02       1062.92    
  48  0.630420     -0.461369     -0.295875      0.295875       1061.41       1061.71    
  49  0.694888E-01  -2.66659      -1.71008       1.71008       1049.81       1051.52    
loop,thermsimp(1:2)       77  0.436959      0.164874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533       1060.34        149.43          2.47         43.43          0.83          0.04        196.20
Just calling func    0   0        196.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1060.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       77
neval is:      532
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       78
neval is:      532


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      532     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615712     -0.484976     -0.311014      0.311014       972.502       972.813    
   2  0.608770     -0.496315     -0.318286      0.318286       976.693       977.011    
   3  0.439107     -0.823013     -0.527797      0.527797       992.426       992.954    
   4  0.570159     -0.561840     -0.360307      0.360307       999.006       999.366    
   5  0.606274     -0.500423     -0.320920      0.320920       1004.16       1004.48    
   6  0.547020     -0.603270     -0.386876      0.386876       1004.51       1004.90    
   7  0.358083      -1.02699     -0.658607      0.658607       1013.30       1013.96    
   8  0.940331     -0.615229E-01 -0.394545E-01  0.394545E-01   1014.24       1014.27    
   9  0.943671     -0.579779E-01 -0.371811E-01  0.371811E-01   1015.62       1015.66    
  10  0.171731      -1.76183      -1.12986       1.12986       1017.93       1019.06    
  11  0.532211     -0.630716     -0.404477      0.404477       1021.42       1021.83    
  12  0.765418     -0.267334     -0.171441      0.171441       1021.37       1021.54    
  13  0.311828      -1.16530     -0.747306      0.747306       1023.20       1023.94    
  14  0.261486E-01  -3.64396      -2.33687       2.33687       1023.31       1025.65    
  15  0.843185     -0.170569     -0.109386      0.109386       1022.43       1022.54    
  16  0.516529     -0.660624     -0.423657      0.423657       1024.28       1024.70    
  17  0.304705      -1.18841     -0.762125      0.762125       1024.61       1025.37    
  18  0.404835     -0.904276     -0.579911      0.579911       1024.70       1025.28    
  19  0.867431     -0.142219     -0.912048E-01  0.912048E-01   1027.67       1027.76    
  20  0.759709     -0.274820     -0.176242      0.176242       1029.77       1029.95    
  21  0.212666      -1.54803     -0.992751      0.992751       1031.33       1032.32    
  22  0.240785      -1.42385     -0.913113      0.913113       1033.31       1034.22    
  23  0.158914      -1.83939      -1.17960       1.17960       1033.29       1034.47    
  24  0.287395      -1.24690     -0.799634      0.799634       1034.48       1035.28    
  25  0.199444      -1.61222      -1.03391       1.03391       1035.62       1036.65    
  26  0.191103      -1.65494      -1.06131       1.06131       1036.39       1037.45    
  27  0.434861     -0.832728     -0.534027      0.534027       1037.83       1038.37    
  28  0.462012     -0.772165     -0.495188      0.495188       1038.62       1039.11    
  29  0.371240     -0.990906     -0.635466      0.635466       1040.61       1041.25    
  30  0.627905E-01  -2.76795      -1.77508       1.77508       1041.59       1043.36    
  31  0.190204      -1.65966      -1.06434       1.06434       1042.61       1043.67    
  32  0.555493     -0.587899     -0.377018      0.377018       1042.64       1043.02    
  33  0.600887     -0.509349     -0.326644      0.326644       1045.14       1045.47    
  34  0.967556     -0.329823E-01 -0.211515E-01  0.211515E-01   1045.75       1045.77    
  35  0.867632E-01  -2.44457      -1.56770       1.56770       1050.53       1052.10    
  36  0.474058     -0.746426     -0.478682      0.478682       1049.81       1050.29    
  37  0.651683     -0.428196     -0.274602      0.274602       1049.25       1049.52    
  38  0.407603E-01  -3.20005      -2.05219       2.05219       1051.84       1053.89    
  39  0.364804      -1.00840     -0.646682      0.646682       1051.92       1052.57    
  40  0.410442     -0.890522     -0.571090      0.571090       1052.93       1053.50    
  41  0.986426     -0.136665E-01 -0.876432E-02  0.876432E-02   1055.53       1055.54    
  42  0.376358     -0.977215     -0.626687      0.626687       1055.64       1056.26    
  43  0.402247     -0.910690     -0.584024      0.584024       1056.96       1057.55    
  44  0.599266E-01  -2.81463      -1.80502       1.80502       1056.35       1058.15    
  45  0.673875     -0.394710     -0.253127      0.253127       1055.54       1055.79    
  46  0.611535     -0.491783     -0.315380      0.315380       1057.18       1057.50    
  47  0.413668     -0.882691     -0.566069      0.566069       1057.48       1058.05    
  48  0.323223      -1.12941     -0.724290      0.724290       1061.41       1062.14    
  49  0.709046     -0.343835     -0.220501      0.220501       1060.34       1060.56    
loop,thermsimp(1:2)       78  0.311014      0.318286    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    534       1049.32        150.43          2.22         43.43          3.46          0.01        199.56
Just calling func    0   0        199.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1049.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       78
neval is:      533
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       79
neval is:      533


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      533     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.510545     -0.672277     -0.431130      0.431130       972.502       972.933    
   2  0.927112     -0.756809E-01 -0.485340E-01  0.485340E-01   976.693       976.742    
   3  0.467337     -0.760706     -0.487839      0.487839       992.426       992.914    
   4  0.225547      -1.48922     -0.955037      0.955037       999.006       999.961    
   5  0.192832      -1.64594      -1.05554       1.05554       1004.16       1005.22    
   6  0.934230E-01  -2.37062      -1.52027       1.52027       1004.51       1006.03    
   7  0.467289     -0.760807     -0.487904      0.487904       1013.30       1013.79    
   8  0.886536     -0.120434     -0.772341E-01  0.772341E-01   1014.24       1014.31    
   9  0.953799     -0.473020E-01 -0.303347E-01  0.303347E-01   1015.62       1015.65    
  10  0.633851     -0.455942     -0.292395      0.292395       1017.93       1018.22    
  11  0.522436     -0.649253     -0.416365      0.416365       1021.37       1021.79    
  12  0.187329      -1.67489      -1.07411       1.07411       1021.42       1022.50    
  13  0.695945     -0.362484     -0.232461      0.232461       1022.43       1022.66    
  14  0.404239E-01  -3.20833      -2.05750       2.05750       1023.20       1025.25    
  15  0.287167      -1.24769     -0.800143      0.800143       1024.28       1025.08    
  16  0.614603     -0.486778     -0.312170      0.312170       1024.70       1025.01    
  17  0.460653     -0.775111     -0.497077      0.497077       1024.61       1025.11    
  18  0.350751      -1.04768     -0.671875      0.671875       1023.31       1023.99    
  19  0.163729      -1.80955      -1.16046       1.16046       1027.67       1028.83    
  20  0.545787     -0.605527     -0.388324      0.388324       1029.77       1030.16    
  21  0.205010      -1.58470      -1.01626       1.01626       1031.33       1032.35    
  22  0.508519     -0.676253     -0.433680      0.433680       1033.31       1033.74    
  23  0.295500      -1.21909     -0.781798      0.781798       1033.29       1034.07    
  24  0.120014      -2.12015      -1.35965       1.35965       1034.48       1035.84    
  25  0.463398     -0.769169     -0.493267      0.493267       1035.62       1036.11    
  26  0.588243     -0.530615     -0.340283      0.340283       1036.39       1036.73    
  27  0.135702      -1.99729      -1.28086       1.28086       1037.83       1039.11    
  28  0.413033     -0.884228     -0.567054      0.567054       1038.62       1039.18    
  29  0.480310     -0.733324     -0.470279      0.470279       1040.61       1041.08    
  30  0.641314     -0.444235     -0.284887      0.284887       1042.64       1042.93    
  31  0.608411     -0.496904     -0.318664      0.318664       1041.59       1041.91    
  32  0.589143     -0.529087     -0.339302      0.339302       1042.61       1042.95    
  33  0.800252     -0.222828     -0.142899      0.142899       1045.14       1045.28    
  34  0.895932     -0.109890     -0.704724E-01  0.704724E-01   1045.75       1045.82    
  35  0.846855     -0.166226     -0.106600      0.106600       1049.25       1049.35    
  36  0.607984     -0.497607     -0.319115      0.319115       1049.81       1050.13    
  37  0.731192     -0.313079     -0.200777      0.200777       1050.53       1050.74    
  38  0.851371E-01  -2.46349      -1.57983       1.57983       1051.92       1053.50    
  39  0.518206     -0.657383     -0.421578      0.421578       1052.93       1053.35    
  40  0.384086     -0.956888     -0.613651      0.613651       1051.84       1052.45    
  41  0.714323     -0.336419     -0.215745      0.215745       1055.53       1055.74    
  42  0.316613E-01  -3.45266      -2.21418       2.21418       1055.54       1057.75    
  43  0.232480      -1.45895     -0.935624      0.935624       1055.64       1056.57    
  44  0.934462     -0.677839E-01 -0.434697E-01  0.434697E-01   1057.18       1057.23    
  45  0.518190     -0.657412     -0.421597      0.421597       1056.96       1057.38    
  46  0.346606      -1.05957     -0.679498      0.679498       1057.48       1058.16    
  47  0.376439     -0.977000     -0.626548      0.626548       1056.35       1056.98    
  48  0.421667     -0.863540     -0.553787      0.553787       1060.34       1060.89    
  49  0.234370      -1.45085     -0.930430      0.930430       1049.32       1050.25    
loop,thermsimp(1:2)       79  0.431130      0.485340E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    535       1058.24        150.24          2.17         44.80          1.80          0.01        199.01
Just calling func    0   0        199.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1058.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       79
neval is:      534
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       80
neval is:      534


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      534     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991376     -0.866144E-02 -0.555457E-02  0.555457E-02   972.502       972.507    
   2  0.246824      -1.39908     -0.897228      0.897228       976.693       977.590    
   3  0.152648E-01  -4.18220      -2.68204       2.68204       992.426       995.108    
   4  0.506776     -0.679686     -0.435881      0.435881       999.006       999.442    
   5  0.205418      -1.58271      -1.01499       1.01499       1004.16       1005.18    
   6  0.174325      -1.74683      -1.12024       1.12024       1004.51       1005.63    
   7  0.891529     -0.114818     -0.736325E-01  0.736325E-01   1013.30       1013.37    
   8  0.528013     -0.638634     -0.409555      0.409555       1014.24       1014.64    
   9  0.231752      -1.46209     -0.937635      0.937635       1015.62       1016.56    
  10  0.492267     -0.708734     -0.454510      0.454510       1017.93       1018.38    
  11  0.690810     -0.369890     -0.237210      0.237210       1021.37       1021.61    
  12  0.515480     -0.662656     -0.424960      0.424960       1021.42       1021.85    
  13  0.652859     -0.426394     -0.273446      0.273446       1022.43       1022.70    
  14  0.881600     -0.126017     -0.808146E-01  0.808146E-01   1023.31       1023.39    
  15  0.454378     -0.788826     -0.505873      0.505873       1024.70       1025.20    
  16  0.584999     -0.536146     -0.343829      0.343829       1024.28       1024.62    
  17  0.226560      -1.48474     -0.952164      0.952164       1024.61       1025.56    
  18  0.294490      -1.22251     -0.783994      0.783994       1023.20       1023.98    
  19  0.378124     -0.972534     -0.623684      0.623684       1027.67       1028.30    
  20  0.326705      -1.11870     -0.717419      0.717419       1029.77       1030.49    
  21  0.493173     -0.706894     -0.453330      0.453330       1031.33       1031.78    
  22  0.627298     -0.466334     -0.299059      0.299059       1033.31       1033.61    
  23  0.214037      -1.54161     -0.988630      0.988630       1033.29       1034.28    
  24  0.201105      -1.60393      -1.02860       1.02860       1034.48       1035.51    
  25  0.748135     -0.290171     -0.186086      0.186086       1035.62       1035.81    
  26  0.574579     -0.554117     -0.355354      0.355354       1036.39       1036.74    
  27  0.219115      -1.51816     -0.973592      0.973592       1037.83       1038.81    
  28  0.626396     -0.467772     -0.299981      0.299981       1038.62       1038.92    
  29  0.131641      -2.02768      -1.30035       1.30035       1040.61       1041.91    
  30  0.300803      -1.20130     -0.770391      0.770391       1041.59       1042.36    
  31  0.678310E-01  -2.69074      -1.72556       1.72556       1042.64       1044.37    
  32  0.437773     -0.826054     -0.529747      0.529747       1042.61       1043.14    
  33  0.111240      -2.19607      -1.40833       1.40833       1045.14       1046.55    
  34  0.294543      -1.22233     -0.783878      0.783878       1045.75       1046.54    
  35  0.667937     -0.403562     -0.258803      0.258803       1049.25       1049.51    
  36  0.259880E-02  -5.95270      -3.81746       3.81746       1049.81       1053.62    
  37  0.364211      -1.01002     -0.647726      0.647726       1049.32       1049.97    
  38  0.647412     -0.434772     -0.278819      0.278819       1050.53       1050.81    
  39  0.525532     -0.643344     -0.412576      0.412576       1051.84       1052.25    
  40  0.515304     -0.662999     -0.425180      0.425180       1052.93       1053.36    
  41  0.512641     -0.668179     -0.428502      0.428502       1051.92       1052.35    
  42  0.718730     -0.330269     -0.211801      0.211801       1055.53       1055.74    
  43  0.342537      -1.07137     -0.687071      0.687071       1055.64       1056.32    
  44  0.605061     -0.502425     -0.322204      0.322204       1056.35       1056.67    
  45  0.477073     -0.740085     -0.474615      0.474615       1057.18       1057.66    
  46  0.880102     -0.127717     -0.819050E-01  0.819050E-01   1056.96       1057.05    
  47  0.599854     -0.511069     -0.327747      0.327747       1055.54       1055.87    
  48  0.959034     -0.418288E-01 -0.268247E-01  0.268247E-01   1057.48       1057.51    
  49  0.943378     -0.582885E-01 -0.373803E-01  0.373803E-01   1058.24       1058.28    
loop,thermsimp(1:2)       80  0.555457E-02  0.897228    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    536       1060.34        149.96          2.49         51.54          0.86          0.01        204.86
Just calling func    0   0        204.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    537       1021.66        145.76          2.61         74.61          0.13          0.06        223.16
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1021.66
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       80
neval is:      536
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       81
neval is:      536


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      536     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.134349      -2.00731      -1.28729       1.28729       972.502       973.789    
   2  0.685292     -0.377910     -0.242353      0.242353       976.693       976.935    
   3  0.584918     -0.536283     -0.343917      0.343917       992.426       992.770    
   4  0.941562     -0.602154E-01 -0.386161E-01  0.386161E-01   999.006       999.045    
   5  0.908944     -0.954720E-01 -0.612260E-01  0.612260E-01   1004.16       1004.22    
   6  0.800674     -0.222301     -0.142561      0.142561       1004.51       1004.65    
   7  0.175493      -1.74016      -1.11596       1.11596       1013.30       1014.42    
   8  0.472619     -0.749465     -0.480631      0.480631       1014.24       1014.72    
   9  0.514210     -0.665123     -0.426542      0.426542       1015.62       1016.05    
  10  0.700467     -0.356008     -0.228307      0.228307       1017.93       1018.16    
  11  0.467839E-01  -3.06222      -1.96379       1.96379       1021.37       1023.33    
  12  0.343683      -1.06804     -0.684929      0.684929       1021.42       1022.11    
  13  0.104347      -2.26004      -1.44936       1.44936       1022.43       1023.88    
  14  0.380751E-01  -3.26820      -2.09589       2.09589       1023.31       1025.41    
  15  0.726541     -0.319460     -0.204869      0.204869       1023.20       1023.40    
  16  0.734053     -0.309174     -0.198272      0.198272       1024.28       1024.48    
  17  0.698798     -0.358393     -0.229837      0.229837       1024.70       1024.93    
  18  0.212173      -1.55035     -0.994238      0.994238       1024.61       1025.61    
  19  0.392816     -0.934414     -0.599238      0.599238       1027.67       1028.27    
  20  0.650539     -0.429954     -0.275729      0.275729       1029.77       1030.05    
  21  0.763821     -0.269421     -0.172779      0.172779       1031.33       1031.50    
  22  0.293396      -1.22623     -0.786380      0.786380       1033.31       1034.10    
  23  0.610078     -0.494168     -0.316909      0.316909       1033.29       1033.61    
  24  0.177884      -1.72662      -1.10728       1.10728       1034.48       1035.59    
  25  0.349013E-01  -3.35523      -2.15170       2.15170       1035.62       1037.77    
  26  0.659473     -0.416315     -0.266982      0.266982       1036.39       1036.65    
  27  0.557938     -0.583508     -0.374203      0.374203       1037.83       1038.21    
  28  0.922572     -0.805898E-01 -0.516821E-01  0.516821E-01   1038.62       1038.67    
  29  0.294142E-02  -5.82886      -3.73804       3.73804       1040.61       1044.35    
  30  0.303995      -1.19075     -0.763623      0.763623       1041.59       1042.35    
  31  0.625271     -0.469570     -0.301134      0.301134       1042.61       1042.91    
  32  0.670921     -0.399104     -0.255944      0.255944       1042.64       1042.90    
  33  0.126430      -2.06807      -1.32625       1.32625       1045.75       1047.08    
  34  0.303607      -1.19202     -0.764442      0.764442       1045.14       1045.91    
  35  0.434425     -0.833732     -0.534671      0.534671       1049.25       1049.78    
  36  0.480124     -0.733711     -0.470528      0.470528       1049.32       1049.79    
  37  0.112109E-01  -4.49087      -2.87999       2.87999       1050.53       1053.41    
  38  0.960450     -0.403534E-01 -0.258786E-01  0.258786E-01   1051.84       1051.87    
  39  0.940218     -0.616432E-01 -0.395317E-01  0.395317E-01   1051.92       1051.96    
  40  0.601341     -0.508594     -0.326160      0.326160       1052.93       1053.26    
  41  0.210085      -1.56025      -1.00058       1.00058       1049.81       1050.81    
  42  0.521166     -0.651687     -0.417926      0.417926       1055.53       1055.95    
  43  0.433438E-01  -3.13859      -2.01277       2.01277       1055.54       1057.55    
  44  0.560153     -0.579545     -0.371661      0.371661       1055.64       1056.01    
  45  0.713172     -0.338033     -0.216780      0.216780       1056.35       1056.57    
  46  0.867260     -0.142416     -0.913312E-01  0.913312E-01   1056.96       1057.05    
  47  0.309232      -1.17366     -0.752667      0.752667       1057.48       1058.23    
  48  0.920406     -0.829408E-01 -0.531898E-01  0.531898E-01   1057.18       1057.24    
  49  0.845355     -0.167998     -0.107737      0.107737       1021.66       1021.77    
loop,thermsimp(1:2)       81   1.28729      0.242353    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    538       1061.64         68.20          1.20         39.66          1.54          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    539       1015.36         68.25          1.20         39.46          1.69          0.05        110.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1015.36
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       81
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       82
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      538     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.702867     -0.352587     -0.226113      0.226113       972.502       972.728    
   2  0.422976     -0.860439     -0.551798      0.551798       976.693       977.245    
   3  0.903225     -0.101784     -0.652738E-01  0.652738E-01   992.426       992.492    
   4  0.936849     -0.652336E-01 -0.418342E-01  0.418342E-01   999.006       999.048    
   5  0.471010     -0.752876     -0.482818      0.482818       1004.16       1004.64    
   6  0.384331     -0.956250     -0.613242      0.613242       1004.51       1005.12    
   7  0.577507E-01  -2.85162      -1.82874       1.82874       1013.30       1015.13    
   8  0.693261     -0.366348     -0.234938      0.234938       1014.24       1014.47    
   9  0.768783     -0.262946     -0.168627      0.168627       1015.62       1015.79    
  10  0.308251      -1.17684     -0.754705      0.754705       1017.93       1018.68    
  11  0.557927     -0.583527     -0.374215      0.374215       1021.66       1022.04    
  12  0.747869     -0.290527     -0.186315      0.186315       1021.42       1021.61    
  13  0.941485     -0.602971E-01 -0.386684E-01  0.386684E-01   1021.37       1021.41    
  14  0.794412     -0.230153     -0.147596      0.147596       1023.20       1023.34    
  15  0.988325     -0.117439E-01 -0.753132E-02  0.753132E-02   1022.43       1022.44    
  16  0.345869      -1.06170     -0.680863      0.680863       1024.28       1024.96    
  17  0.427196     -0.850512     -0.545432      0.545432       1024.70       1025.24    
  18  0.721031     -0.327073     -0.209751      0.209751       1023.31       1023.52    
  19  0.781930     -0.245990     -0.157753      0.157753       1024.61       1024.77    
  20  0.662273     -0.412077     -0.264264      0.264264       1027.67       1027.94    
  21  0.648735     -0.432732     -0.277510      0.277510       1029.77       1030.05    
  22  0.809207     -0.211701     -0.135763      0.135763       1031.33       1031.47    
  23  0.302641      -1.19521     -0.766485      0.766485       1033.29       1034.06    
  24  0.371680     -0.989721     -0.634707      0.634707       1033.31       1033.95    
  25  0.620259     -0.477618     -0.306296      0.306296       1034.48       1034.79    
  26  0.974235     -0.261022E-01 -0.167393E-01  0.167393E-01   1036.39       1036.40    
  27  0.712459E-02  -4.94420      -3.17071       3.17071       1035.62       1038.79    
  28  0.488918     -0.715561     -0.458888      0.458888       1037.83       1038.29    
  29  0.659052     -0.416953     -0.267392      0.267392       1038.62       1038.88    
  30  0.658839     -0.417277     -0.267599      0.267599       1041.59       1041.85    
  31  0.736037     -0.306475     -0.196542      0.196542       1042.64       1042.84    
  32  0.200345      -1.60772      -1.03103       1.03103       1042.61       1043.64    
  33  0.810438     -0.210180     -0.134788      0.134788       1040.61       1040.75    
  34  0.821394     -0.196753     -0.126177      0.126177       1045.14       1045.27    
  35  0.580945     -0.543099     -0.348288      0.348288       1045.75       1046.10    
  36  0.108476      -2.22123      -1.42447       1.42447       1049.25       1050.67    
  37  0.151575      -1.88668      -1.20992       1.20992       1049.32       1050.53    
  38  0.411626     -0.887639     -0.569241      0.569241       1049.81       1050.38    
  39  0.678060     -0.388519     -0.249157      0.249157       1051.84       1052.09    
  40  0.759194     -0.275498     -0.176676      0.176676       1051.92       1052.10    
  41  0.707880     -0.345480     -0.221556      0.221556       1052.93       1053.15    
  42  0.125397      -2.07627      -1.33151       1.33151       1050.53       1051.87    
  43  0.205629      -1.58168      -1.01433       1.01433       1055.53       1056.54    
  44  0.796527E-01  -2.53008      -1.62254       1.62254       1055.64       1057.26    
  45  0.682792E-01  -2.68415      -1.72134       1.72134       1056.35       1058.07    
  46  0.474112     -0.746311     -0.478608      0.478608       1056.96       1057.44    
  47  0.879135E-01  -2.43140      -1.55925       1.55925       1057.18       1058.74    
  48  0.304024      -1.19065     -0.763560      0.763560       1055.54       1056.30    
  49  0.984028     -0.161013E-01 -0.103258E-01  0.103258E-01   1015.36       1015.37    
loop,thermsimp(1:2)       82  0.226113      0.551798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540        998.17         68.20          1.19         39.86          1.25          0.05        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    998.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       82
neval is:      539
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       83
neval is:      539


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      539     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.520948     -0.652104     -0.418193      0.418193       972.502       972.920    
   2  0.586198E-01  -2.83668      -1.81916       1.81916       976.693       978.512    
   3  0.896605     -0.109139     -0.699909E-01  0.699909E-01   992.426       992.496    
   4  0.762138     -0.271628     -0.174194      0.174194       999.006       999.180    
   5  0.171948      -1.76056      -1.12905       1.12905       1004.16       1005.29    
   6  0.202536      -1.59684      -1.02405       1.02405       1004.51       1005.53    
   7  0.199213      -1.61338      -1.03466       1.03466       1014.24       1015.27    
   8  0.499958     -0.693232     -0.444569      0.444569       1013.30       1013.75    
   9  0.824768     -0.192653     -0.123548      0.123548       1015.36       1015.48    
  10  0.535147E-03  -7.53297      -4.83088       4.83088       1015.62       1020.45    
  11  0.463898     -0.768090     -0.492575      0.492575       1017.93       1018.42    
  12  0.618612     -0.480276     -0.308000      0.308000       1021.37       1021.68    
  13  0.403198     -0.908328     -0.582509      0.582509       1021.42       1022.01    
  14  0.427447     -0.849926     -0.545056      0.545056       1021.66       1022.21    
  15  0.360324      -1.02075     -0.654606      0.654606       1022.43       1023.09    
  16  0.457831     -0.781256     -0.501018      0.501018       1023.20       1023.70    
  17  0.736107     -0.306380     -0.196481      0.196481       1023.31       1023.51    
  18  0.271700      -1.30306     -0.835648      0.835648       1024.61       1025.45    
  19  0.525057     -0.644249     -0.413156      0.413156       1024.28       1024.69    
  20  0.629954     -0.462108     -0.296349      0.296349       1024.70       1024.99    
  21  0.324235      -1.12629     -0.722286      0.722286       1027.67       1028.40    
  22  0.651642     -0.428259     -0.274642      0.274642       1029.77       1030.04    
  23  0.291657      -1.23218     -0.790194      0.790194       1031.33       1032.12    
  24  0.751170E-01  -2.58871      -1.66013       1.66013       1033.31       1034.97    
  25  0.345031E-01  -3.36670      -2.15906       2.15906       1033.29       1035.45    
  26  0.629053     -0.463539     -0.297267      0.297267       1034.48       1034.78    
  27  0.643775     -0.440407     -0.282432      0.282432       1036.39       1036.67    
  28  0.875209     -0.133292     -0.854801E-01  0.854801E-01   1037.83       1037.92    
  29  0.412365     -0.885846     -0.568092      0.568092       1035.62       1036.19    
  30  0.325292      -1.12303     -0.720199      0.720199       1038.62       1039.34    
  31  0.202127      -1.59886      -1.02535       1.02535       1040.61       1041.64    
  32  0.377590     -0.973947     -0.624591      0.624591       1041.59       1042.21    
  33  0.313324      -1.16052     -0.744238      0.744238       1042.64       1043.39    
  34  0.893688     -0.112398     -0.720809E-01  0.720809E-01   1042.61       1042.68    
  35  0.284382      -1.25744     -0.806393      0.806393       1045.14       1045.95    
  36  0.394897     -0.929130     -0.595849      0.595849       1045.75       1046.35    
  37  0.809369     -0.211500     -0.135635      0.135635       1049.81       1049.94    
  38  0.452950     -0.791973     -0.507891      0.507891       1049.32       1049.83    
  39  0.333822E-01  -3.39973      -2.18024       2.18024       1049.25       1051.43    
  40  0.457672     -0.781603     -0.501240      0.501240       1050.53       1051.04    
  41  0.200835      -1.60527      -1.02946       1.02946       1051.84       1052.87    
  42  0.788085     -0.238149     -0.152725      0.152725       1051.92       1052.08    
  43  0.267461      -1.31878     -0.845732      0.845732       1052.93       1053.78    
  44  0.838327E-01  -2.47893      -1.58973       1.58973       1055.54       1057.13    
  45  0.114811      -2.16447      -1.38807       1.38807       1055.53       1056.92    
  46  0.734500     -0.308565     -0.197882      0.197882       1055.64       1055.83    
  47  0.266306      -1.32311     -0.848507      0.848507       1056.96       1057.81    
  48  0.271562      -1.30357     -0.835974      0.835974       1056.35       1057.19    
  49  0.220656      -1.51115     -0.969098      0.969098       998.173       999.142    
loop,thermsimp(1:2)       83  0.418193       1.81916    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    541       1015.05         68.15          1.18         39.18          1.93          0.05        110.48
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    1015.0        3.021     -3.330      4.675     -102.6     0.2606    
                      0.5079E-01 0.8428     -99.70      4.877      1.475    

                       3.304     -1.912      1.974      7228.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.698      0.000      0.000      7000.      73.00    

                      -1.299     -6.679     -7.505     -7.201      9.439    

                      -5.177     -3.949      4912.      0.000      8201.    



                       3187.      6184.      7302.      3337.      3689.    

                       4465.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -1.997     -1.654     -2.180     -2.254    -0.3807    

                     -0.3252      9.590      8.514    -0.1601E+05 -5.070    

                     -0.4295     -2.298      8.982      9.107    -0.1969E+05



                      -6.000     0.3085    -0.7249E-02  8.946      8.969    

                     -0.1944E+05 -6.000     -1.130    -0.7342      9.678    

                       9.637    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1015.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       83
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       84
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      540     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.893893     -0.112169     -0.719341E-01  0.719341E-01   972.502       972.574    
   2  0.449777E-02  -5.40417      -3.46569       3.46569       976.693       980.159    
   3  0.858632     -0.152415     -0.977436E-01  0.977436E-01   992.426       992.524    
   4  0.963644     -0.370333E-01 -0.237494E-01  0.237494E-01   998.173       998.197    
   5  0.531068E-01  -2.93545      -1.88250       1.88250       999.006       1000.89    
   6  0.925973E-01  -2.37949      -1.52597       1.52597       1004.16       1005.69    
   7  0.722108     -0.325581     -0.208794      0.208794       1004.51       1004.72    
   8  0.850421     -0.162023     -0.103905      0.103905       1013.30       1013.40    
   9  0.120217      -2.11845      -1.35856       1.35856       1014.24       1015.59    
  10  0.171502      -1.76316      -1.13071       1.13071       1015.36       1016.49    
  11  0.357210E-01  -3.33202      -2.13682       2.13682       1017.93       1020.06    
  12  0.835487     -0.179740     -0.115267      0.115267       1015.62       1015.74    
  13  0.385387     -0.953509     -0.611483      0.611483       1021.37       1021.98    
  14  0.508033E-01  -2.97979      -1.91094       1.91094       1021.42       1023.33    
  15  0.564067     -0.572582     -0.367196      0.367196       1021.66       1022.03    
  16  0.377544     -0.974068     -0.624668      0.624668       1022.43       1023.06    
  17  0.125319      -2.07690      -1.33191       1.33191       1023.31       1024.65    
  18  0.531473     -0.632103     -0.405367      0.405367       1023.20       1023.60    
  19  0.180119      -1.71414      -1.09927       1.09927       1024.28       1025.38    
  20  0.986987     -0.130985E-01 -0.840003E-02  0.840003E-02   1024.70       1024.71    
  21  0.596455     -0.516751     -0.331391      0.331391       1024.61       1024.94    
  22  0.494563     -0.704082     -0.451526      0.451526       1027.67       1028.13    
  23  0.444417     -0.810992     -0.520088      0.520088       1029.77       1030.29    
  24  0.550139E-01  -2.90017      -1.85987       1.85987       1031.33       1033.19    
  25  0.869957     -0.139311     -0.893401E-01  0.893401E-01   1034.48       1034.57    
  26  0.477553E-01  -3.04167      -1.95062       1.95062       1033.31       1035.26    
  27  0.644663     -0.439027     -0.281547      0.281547       1033.29       1033.57    
  28  0.683369     -0.380720     -0.244155      0.244155       1035.62       1035.86    
  29  0.683015E-01  -2.68382      -1.72113       1.72113       1036.39       1038.11    
  30  0.258830      -1.35159     -0.866769      0.866769       1037.83       1038.70    
  31  0.769852     -0.261557     -0.167736      0.167736       1038.62       1038.78    
  32  0.297261      -1.21314     -0.777987      0.777987       1040.61       1041.39    
  33  0.126947      -2.06399      -1.32363       1.32363       1041.59       1042.91    
  34  0.115273      -2.16045      -1.38549       1.38549       1042.61       1043.99    
  35  0.242767      -1.41565     -0.907856      0.907856       1042.64       1043.55    
  36  0.921294     -0.819762E-01 -0.525712E-01  0.525712E-01   1045.14       1045.19    
  37  0.779425     -0.249198     -0.159811      0.159811       1045.75       1045.91    
  38  0.708349     -0.344818     -0.221131      0.221131       1049.32       1049.54    
  39  0.389965E-02  -5.54687      -3.55720       3.55720       1049.81       1053.36    
  40  0.667528E-01  -2.70676      -1.73584       1.73584       1050.53       1052.27    
  41  0.932233     -0.701723E-01 -0.450014E-01  0.450014E-01   1049.25       1049.29    
  42  0.942886     -0.588098E-01 -0.377146E-01  0.377146E-01   1051.92       1051.96    
  43  0.808172     -0.212981     -0.136584      0.136584       1051.84       1051.98    
  44  0.516476     -0.660727     -0.423723      0.423723       1052.93       1053.36    
  45  0.480451E-01  -3.03562      -1.94673       1.94673       1055.64       1057.58    
  46  0.816298     -0.202976     -0.130168      0.130168       1055.53       1055.66    
  47  0.621145     -0.476190     -0.305380      0.305380       1055.54       1055.84    
  48  0.412639E-01  -3.18777      -2.04431       2.04431       1056.35       1058.39    
  49  0.218113      -1.52274     -0.976532      0.976532       1015.05       1016.02    
loop,thermsimp(1:2)       84  0.719341E-01   3.46569    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542       1011.05         68.18          1.18         39.81          1.49          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1011.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       84
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       85
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      541     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.575707E-01  -2.85474      -1.83074       1.83074       972.502       974.333    
   2  0.547225     -0.602896     -0.386636      0.386636       976.693       977.080    
   3  0.212697      -1.54789     -0.992657      0.992657       992.426       993.419    
   4  0.956818     -0.441425E-01 -0.283085E-01  0.283085E-01   998.173       998.202    
   5  0.757198     -0.278130     -0.178365      0.178365       999.006       999.184    
   6  0.201641      -1.60127      -1.02689       1.02689       1004.51       1005.54    
   7  0.911096     -0.931071E-01 -0.597094E-01  0.597094E-01   1004.16       1004.22    
   8  0.840070     -0.174270     -0.111759      0.111759       1013.30       1013.41    
   9  0.298673      -1.20841     -0.774949      0.774949       1014.24       1015.01    
  10  0.776101     -0.253472     -0.162551      0.162551       1015.62       1015.78    
  11  0.972960     -0.274124E-01 -0.175795E-01  0.175795E-01   1015.05       1015.06    
  12  0.865710     -0.144206     -0.924789E-01  0.924789E-01   1015.36       1015.45    
  13  0.406784     -0.899474     -0.576831      0.576831       1017.93       1018.50    
  14  0.414931     -0.879642     -0.564113      0.564113       1021.37       1021.93    
  15  0.553080     -0.592253     -0.379811      0.379811       1021.66       1022.04    
  16  0.490176E-01  -3.01558      -1.93388       1.93388       1022.43       1024.36    
  17  0.871168     -0.137920     -0.884481E-01  0.884481E-01   1021.42       1021.51    
  18  0.213158      -1.54572     -0.991268      0.991268       1023.20       1024.19    
  19  0.657461     -0.419370     -0.268941      0.268941       1023.31       1023.58    
  20  0.881582     -0.126037     -0.808273E-01  0.808273E-01   1024.70       1024.78    
  21  0.210682      -1.55741     -0.998762      0.998762       1024.61       1025.61    
  22  0.427808     -0.849082     -0.544515      0.544515       1024.28       1024.82    
  23  0.422466     -0.861646     -0.552572      0.552572       1027.67       1028.23    
  24  0.413551     -0.882975     -0.566250      0.566250       1029.77       1030.34    
  25  0.317700      -1.14665     -0.735343      0.735343       1031.33       1032.07    
  26  0.532496     -0.630180     -0.404134      0.404134       1033.29       1033.69    
  27  0.684730     -0.378731     -0.242879      0.242879       1034.48       1034.73    
  28  0.972229     -0.281634E-01 -0.180612E-01  0.180612E-01   1033.31       1033.33    
  29  0.205216E-01  -3.88628      -2.49226       2.49226       1035.62       1038.11    
  30  0.524838     -0.644665     -0.413423      0.413423       1036.39       1036.80    
  31  0.622030     -0.474767     -0.304467      0.304467       1037.83       1038.14    
  32  0.359188      -1.02391     -0.656632      0.656632       1038.62       1039.27    
  33  0.461058     -0.774231     -0.496513      0.496513       1040.61       1041.11    
  34  0.146175      -1.92295      -1.23318       1.23318       1041.59       1042.82    
  35  0.628136     -0.464999     -0.298203      0.298203       1042.64       1042.94    
  36  0.341100      -1.07558     -0.689767      0.689767       1042.61       1043.30    
  37  0.945077     -0.564892E-01 -0.362264E-01  0.362264E-01   1045.14       1045.18    
  38  0.714798     -0.335755     -0.215319      0.215319       1045.75       1045.97    
  39  0.707440     -0.346103     -0.221955      0.221955       1049.25       1049.47    
  40  0.580656     -0.543597     -0.348608      0.348608       1049.32       1049.67    
  41  0.934154     -0.681138E-01 -0.436813E-01  0.436813E-01   1051.92       1051.97    
  42  0.539188     -0.617691     -0.396124      0.396124       1051.84       1052.24    
  43  0.414040     -0.881794     -0.565493      0.565493       1050.53       1051.10    
  44  0.210311      -1.55917     -0.999893      0.999893       1052.93       1053.93    
  45  0.621317     -0.475914     -0.305203      0.305203       1049.81       1050.11    
  46  0.421498     -0.863939     -0.554043      0.554043       1055.53       1056.08    
  47  0.782308     -0.245507     -0.157443      0.157443       1055.54       1055.70    
  48  0.447350     -0.804415     -0.515870      0.515870       1055.64       1056.15    
  49  0.411867     -0.887055     -0.568867      0.568867       1011.05       1011.62    
loop,thermsimp(1:2)       85   1.83074      0.386636    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543       1013.68         68.21          1.18         39.31          1.65          0.05        110.39
Just calling func    0   0        110.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1013.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       85
neval is:      542
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       86
neval is:      542


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      542     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.179202      -1.71924      -1.10254       1.10254       972.502       973.604    
   2  0.434719     -0.833055     -0.534237      0.534237       976.693       977.227    
   3  0.148849E-01  -4.20741      -2.69820       2.69820       992.426       995.125    
   4  0.777205     -0.252051     -0.161640      0.161640       998.173       998.335    
   5  0.442102     -0.816214     -0.523436      0.523436       999.006       999.530    
   6  0.559809     -0.580160     -0.372056      0.372056       1004.16       1004.53    
   7  0.322524      -1.13158     -0.725679      0.725679       1004.51       1005.24    
   8  0.998399     -0.160201E-02 -0.102736E-02  0.102736E-02   1011.05       1011.05    
   9  0.143471      -1.94162      -1.24516       1.24516       1013.30       1014.55    
  10  0.732549     -0.311226     -0.199588      0.199588       1014.24       1014.44    
  11  0.148655      -1.90613      -1.22240       1.22240       1015.05       1016.27    
  12  0.402906     -0.909053     -0.582974      0.582974       1015.36       1015.94    
  13  0.295223      -1.22003     -0.782400      0.782400       1015.62       1016.40    
  14  0.738533E-01  -2.60567      -1.67101       1.67101       1017.93       1019.60    
  15  0.950370     -0.509035E-01 -0.326443E-01  0.326443E-01   1021.42       1021.46    
  16  0.718427     -0.330691     -0.212071      0.212071       1021.37       1021.58    
  17  0.452192     -0.793647     -0.508965      0.508965       1021.66       1022.17    
  18  0.424315     -0.857279     -0.549771      0.549771       1023.31       1023.86    
  19  0.469595     -0.755886     -0.484748      0.484748       1023.20       1023.68    
  20  0.483044     -0.727648     -0.466639      0.466639       1022.43       1022.90    
  21  0.292578      -1.22903     -0.788172      0.788172       1024.70       1025.48    
  22  0.579738     -0.545180     -0.349623      0.349623       1024.28       1024.63    
  23  0.321991E-01  -3.43582      -2.20338       2.20338       1024.61       1026.82    
  24  0.243506E-02  -6.01778      -3.85919       3.85919       1027.67       1031.53    
  25  0.809756     -0.211022     -0.135328      0.135328       1029.77       1029.91    
  26  0.476084     -0.742162     -0.475947      0.475947       1031.33       1031.81    
  27  0.916004     -0.877344E-01 -0.562639E-01  0.562639E-01   1033.31       1033.37    
  28  0.561190     -0.577697     -0.370476      0.370476       1033.29       1033.66    
  29  0.479252     -0.735530     -0.471694      0.471694       1034.48       1034.95    
  30  0.482145     -0.729510     -0.467833      0.467833       1036.39       1036.85    
  31  0.550054     -0.597740     -0.383329      0.383329       1035.62       1036.00    
  32  0.496162     -0.700853     -0.449456      0.449456       1037.83       1038.28    
  33  0.582975     -0.539611     -0.346052      0.346052       1038.62       1038.96    
  34  0.931450     -0.710128E-01 -0.455404E-01  0.455404E-01   1040.61       1040.66    
  35  0.364021      -1.01054     -0.648059      0.648059       1041.59       1042.23    
  36  0.474472     -0.745552     -0.478121      0.478121       1042.64       1043.12    
  37  0.672689E-01  -2.69906      -1.73090       1.73090       1042.61       1044.34    
  38  0.596292     -0.517025     -0.331568      0.331568       1045.14       1045.47    
  39  0.287102      -1.24792     -0.800288      0.800288       1045.75       1046.55    
  40  0.374382E-01  -3.28506      -2.10671       2.10671       1049.25       1051.35    
  41  0.838459     -0.176190     -0.112990      0.112990       1049.32       1049.44    
  42  0.238822      -1.43203     -0.918361      0.918361       1049.81       1050.73    
  43  0.888107     -0.118664     -0.760987E-01  0.760987E-01   1050.53       1050.61    
  44  0.353443      -1.04003     -0.666971      0.666971       1051.92       1052.59    
  45  0.364093      -1.01035     -0.647934      0.647934       1051.84       1052.49    
  46  0.859786E-01  -2.45366      -1.57353       1.57353       1052.93       1054.51    
  47  0.342460      -1.07160     -0.687215      0.687215       1055.54       1056.23    
  48  0.721815     -0.325987     -0.209055      0.209055       1055.53       1055.74    
  49  0.144463      -1.93473      -1.24074       1.24074       1013.68       1014.92    
loop,thermsimp(1:2)       86   1.10254      0.534237    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    544        997.34         68.22          1.18         39.57          1.83          0.05        110.86
Just calling func    0   0        110.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    997.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       86
neval is:      543
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       87
neval is:      543


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      543     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.502606E-01  -2.99053      -1.91782       1.91782       972.502       974.420    
   2  0.285235      -1.25444     -0.804472      0.804472       976.693       977.497    
   3  0.898947     -0.106531     -0.683180E-01  0.683180E-01   992.426       992.495    
   4  0.105388      -2.25010      -1.44299       1.44299       998.173       999.616    
   5  0.676414     -0.390950     -0.250716      0.250716       999.006       999.257    
   6  0.600928     -0.509281     -0.326601      0.326601       1004.16       1004.49    
   7  0.769049     -0.262601     -0.168406      0.168406       1004.51       1004.68    
   8  0.622361     -0.474236     -0.304127      0.304127       1011.05       1011.36    
   9  0.909864     -0.944600E-01 -0.605770E-01  0.605770E-01   1014.24       1014.30    
  10  0.215912      -1.53288     -0.983035      0.983035       1013.30       1014.28    
  11  0.258627      -1.35237     -0.867273      0.867273       1013.68       1014.55    
  12  0.510704     -0.671965     -0.430930      0.430930       1015.36       1015.79    
  13  0.320972      -1.13640     -0.728773      0.728773       1015.05       1015.78    
  14  0.485973     -0.721603     -0.462762      0.462762       1015.62       1016.08    
  15  0.884896     -0.122285     -0.784212E-01  0.784212E-01   1017.93       1018.01    
  16  0.490908     -0.711498     -0.456283      0.456283       1021.42       1021.88    
  17  0.190229      -1.65952      -1.06425       1.06425       1021.37       1022.43    
  18  0.987714     -0.123618E-01 -0.792759E-02  0.792759E-02   1021.66       1021.67    
  19  0.718170     -0.331048     -0.212301      0.212301       1022.43       1022.64    
  20  0.558733     -0.582083     -0.373289      0.373289       1023.20       1023.57    
  21  0.590643     -0.526544     -0.337672      0.337672       1023.31       1023.65    
  22  0.120670      -2.11469      -1.35615       1.35615       1024.28       1025.63    
  23  0.190504      -1.65808      -1.06333       1.06333       1024.70       1025.76    
  24  0.613661     -0.488312     -0.313154      0.313154       1024.61       1024.93    
  25  0.960930     -0.398536E-01 -0.255581E-01  0.255581E-01   1029.77       1029.80    
  26  0.701205     -0.354955     -0.227632      0.227632       1027.67       1027.90    
  27  0.123384      -2.09246      -1.34189       1.34189       1031.33       1032.67    
  28  0.652608     -0.426778     -0.273692      0.273692       1033.31       1033.58    
  29  0.548476     -0.600611     -0.385171      0.385171       1033.29       1033.67    
  30  0.487098     -0.719290     -0.461279      0.461279       1034.48       1034.94    
  31  0.667043     -0.404901     -0.259662      0.259662       1035.62       1035.88    
  32  0.974809E-01  -2.32810      -1.49301       1.49301       1036.39       1037.88    
  33  0.895030     -0.110898     -0.711187E-01  0.711187E-01   1037.83       1037.90    
  34  0.210832      -1.55670     -0.998306      0.998306       1038.62       1039.62    
  35  0.888984     -0.117676     -0.754654E-01  0.754654E-01   1040.61       1040.69    
  36  0.680293     -0.385232     -0.247048      0.247048       1041.59       1041.83    
  37  0.349585E-01  -3.35359      -2.15065       2.15065       1042.64       1044.79    
  38  0.621053     -0.476339     -0.305475      0.305475       1042.61       1042.91    
  39  0.846666     -0.166448     -0.106743      0.106743       1045.14       1045.25    
  40  0.659412     -0.416407     -0.267041      0.267041       1045.75       1046.02    
  41  0.972304     -0.280869E-01 -0.180121E-01  0.180121E-01   1049.32       1049.34    
  42  0.773179     -0.257245     -0.164971      0.164971       1050.53       1050.70    
  43  0.857609     -0.153608     -0.985082E-01  0.985082E-01   1049.81       1049.91    
  44  0.383977     -0.957173     -0.613834      0.613834       1049.25       1049.86    
  45  0.195841      -1.63045      -1.04561       1.04561       1051.84       1052.89    
  46  0.196970      -1.62470      -1.04192       1.04192       1051.92       1052.96    
  47  0.413388     -0.883368     -0.566503      0.566503       1052.93       1053.50    
  48  0.799982     -0.223166     -0.143116      0.143116       1055.53       1055.67    
  49  0.464582     -0.766618     -0.491631      0.491631       997.343       997.834    
loop,thermsimp(1:2)       87   1.91782      0.804472    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    545        998.05         68.16          1.19         39.38          1.71          0.05        110.50
Just calling func    0   0        110.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    998.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       87
neval is:      544
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       88
neval is:      544


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      544     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.767074     -0.265173     -0.170055      0.170055       972.502       972.672    
   2  0.512248     -0.668947     -0.428994      0.428994       976.693       977.122    
   3  0.767240     -0.264956     -0.169916      0.169916       992.426       992.596    
   4  0.464956     -0.765812     -0.491114      0.491114       997.343       997.834    
   5  0.983629     -0.165063E-01 -0.105855E-01  0.105855E-01   999.006       999.017    
   6  0.156815      -1.85269      -1.18813       1.18813       998.173       999.361    
   7  0.818959     -0.199721     -0.128081      0.128081       1004.16       1004.29    
   8  0.961778     -0.389717E-01 -0.249925E-01  0.249925E-01   1004.51       1004.53    
   9  0.856770     -0.154586     -0.991358E-01  0.991358E-01   1011.05       1011.15    
  10  0.749453     -0.288411     -0.184958      0.184958       1013.30       1013.49    
  11  0.673264     -0.395617     -0.253709      0.253709       1014.24       1014.49    
  12  0.161656      -1.82229      -1.16863       1.16863       1013.68       1014.85    
  13  0.437846     -0.825888     -0.529641      0.529641       1015.05       1015.58    
  14  0.242228      -1.41788     -0.909282      0.909282       1015.36       1016.27    
  15  0.625343E-02  -5.07463      -3.25435       3.25435       1015.62       1018.87    
  16  0.411775     -0.887278     -0.569010      0.569010       1017.93       1018.50    
  17  0.507509     -0.678240     -0.434954      0.434954       1021.66       1022.10    
  18  0.800068     -0.223059     -0.143047      0.143047       1021.42       1021.57    
  19  0.886259     -0.120746     -0.774342E-01  0.774342E-01   1021.37       1021.45    
  20  0.721068     -0.327022     -0.209719      0.209719       1022.43       1022.64    
  21  0.225378      -1.48998     -0.955520      0.955520       1023.20       1024.15    
  22  0.398911     -0.919018     -0.589365      0.589365       1023.31       1023.90    
  23  0.120611      -2.11518      -1.35646       1.35646       1024.61       1025.97    
  24  0.980926     -0.192586E-01 -0.123505E-01  0.123505E-01   1024.28       1024.29    
  25  0.870721E-01  -2.44102      -1.56542       1.56542       1024.70       1026.26    
  26  0.606754     -0.499631     -0.320413      0.320413       1027.67       1027.99    
  27  0.380845     -0.965362     -0.619085      0.619085       1029.77       1030.39    
  28  0.555905     -0.587158     -0.376543      0.376543       1031.33       1031.71    
  29  0.929645     -0.729523E-01 -0.467842E-01  0.467842E-01   1033.31       1033.36    
  30  0.951863     -0.493341E-01 -0.316379E-01  0.316379E-01   1033.29       1033.32    
  31  0.949657     -0.516542E-01 -0.331257E-01  0.331257E-01   1034.48       1034.52    
  32  0.236452      -1.44201     -0.924759      0.924759       1035.62       1036.54    
  33  0.784149     -0.243156     -0.155936      0.155936       1036.39       1036.54    
  34  0.546554     -0.604122     -0.387423      0.387423       1037.83       1038.22    
  35  0.148665      -1.90606      -1.22235       1.22235       1038.62       1039.84    
  36  0.272424E-01  -3.60298      -2.31058       2.31058       1040.61       1042.92    
  37  0.456056     -0.785139     -0.503508      0.503508       1041.59       1042.09    
  38  0.617178     -0.482598     -0.309489      0.309489       1042.61       1042.92    
  39  0.528306     -0.638080     -0.409199      0.409199       1042.64       1043.05    
  40  0.815104     -0.204439     -0.131106      0.131106       1045.14       1045.27    
  41  0.710496     -0.341792     -0.219190      0.219190       1045.75       1045.97    
  42  0.105433      -2.24968      -1.44272       1.44272       1049.32       1050.77    
  43  0.126238      -2.06959      -1.32722       1.32722       1049.25       1050.57    
  44  0.370061     -0.994088     -0.637507      0.637507       1049.81       1050.44    
  45  0.781016     -0.247160     -0.158503      0.158503       1050.53       1050.69    
  46  0.137461      -1.98442      -1.27260       1.27260       1051.84       1053.11    
  47  0.290033      -1.23776     -0.793773      0.793773       1051.92       1052.72    
  48  0.803761     -0.218453     -0.140094      0.140094       1052.93       1053.07    
  49  0.824761     -0.192662     -0.123554      0.123554       998.046       998.169    
loop,thermsimp(1:2)       88  0.170055      0.428994    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    546        987.49         68.14          1.17         39.45          1.86          0.05        110.66
Just calling func    0   0        110.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    987.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       88
neval is:      545
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       89
neval is:      545


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      545     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.901217     -0.104009     -0.667007E-01  0.667007E-01   972.502       972.569    
   2  0.870730     -0.138423     -0.887705E-01  0.887705E-01   976.693       976.782    
   3  0.125018      -2.07930      -1.33345       1.33345       992.426       993.760    
   4  0.514655     -0.664259     -0.425988      0.425988       997.343       997.769    
   5  0.498350     -0.696452     -0.446634      0.446634       998.046       998.492    
   6  0.988962     -0.110996E-01 -0.711816E-02  0.711816E-02   999.006       999.013    
   7  0.968877     -0.316173E-01 -0.202761E-01  0.202761E-01   998.173       998.194    
   8  0.616308     -0.484009     -0.310394      0.310394       1004.16       1004.47    
   9  0.251943      -1.37855     -0.884064      0.884064       1004.51       1005.39    
  10  0.886282     -0.120720     -0.774177E-01  0.774177E-01   1011.05       1011.13    
  11  0.129840      -2.04145      -1.30918       1.30918       1013.30       1014.61    
  12  0.398910     -0.919020     -0.589366      0.589366       1014.24       1014.82    
  13  0.631703     -0.459336     -0.294572      0.294572       1013.68       1013.98    
  14  0.757509     -0.277719     -0.178101      0.178101       1015.05       1015.22    
  15  0.543387     -0.609934     -0.391150      0.391150       1015.36       1015.75    
  16  0.125147      -2.07827      -1.33279       1.33279       1017.93       1019.26    
  17  0.509786     -0.673763     -0.432083      0.432083       1015.62       1016.05    
  18  0.884788     -0.122407     -0.784992E-01  0.784992E-01   1021.37       1021.45    
  19  0.921722     -0.815120E-01 -0.522735E-01  0.522735E-01   1021.42       1021.47    
  20  0.295106      -1.22042     -0.782653      0.782653       1021.66       1022.45    
  21  0.117633      -2.14019      -1.37250       1.37250       1022.43       1023.80    
  22  0.605858E-01  -2.80369      -1.79800       1.79800       1023.31       1025.11    
  23  0.705425     -0.348955     -0.223784      0.223784       1023.20       1023.42    
  24  0.417003     -0.874662     -0.560919      0.560919       1024.28       1024.84    
  25  0.715906     -0.334207     -0.214326      0.214326       1024.61       1024.83    
  26  0.673178     -0.395745     -0.253791      0.253791       1024.70       1024.95    
  27  0.957380     -0.435549E-01 -0.279317E-01  0.279317E-01   1027.67       1027.70    
  28  0.778777E-02  -4.85520      -3.11363       3.11363       1029.77       1032.88    
  29  0.508093     -0.677092     -0.434218      0.434218       1031.33       1031.76    
  30  0.375640     -0.979124     -0.627911      0.627911       1033.29       1033.92    
  31  0.577780     -0.548562     -0.351792      0.351792       1033.31       1033.66    
  32  0.637145     -0.450758     -0.289070      0.289070       1034.48       1034.77    
  33  0.130165      -2.03895      -1.30758       1.30758       1036.39       1037.69    
  34  0.966900     -0.336599E-01 -0.215860E-01  0.215860E-01   1035.62       1035.64    
  35  0.723182     -0.324094     -0.207841      0.207841       1037.83       1038.04    
  36  0.957210     -0.437323E-01 -0.280454E-01  0.280454E-01   1038.62       1038.64    
  37  0.604209E-01  -2.80642      -1.79975       1.79975       1041.59       1043.39    
  38  0.864435     -0.145679     -0.934238E-01  0.934238E-01   1042.61       1042.70    
  39  0.513375E-01  -2.96933      -1.90423       1.90423       1040.61       1042.52    
  40  0.363115      -1.01304     -0.649658      0.649658       1042.64       1043.29    
  41  0.536475     -0.622735     -0.399359      0.399359       1045.14       1045.54    
  42  0.614334     -0.487217     -0.312451      0.312451       1045.75       1046.06    
  43  0.533092     -0.629062     -0.403416      0.403416       1049.81       1050.21    
  44  0.332736      -1.10040     -0.705687      0.705687       1049.25       1049.95    
  45  0.267946      -1.31697     -0.844571      0.844571       1050.53       1051.38    
  46  0.731956     -0.312035     -0.200108      0.200108       1049.32       1049.52    
  47  0.427062     -0.850826     -0.545633      0.545633       1051.92       1052.47    
  48  0.770519E-01  -2.56328      -1.64382       1.64382       1052.93       1054.58    
  49  0.816063     -0.203263     -0.130352      0.130352       987.486       987.616    
loop,thermsimp(1:2)       89  0.667007E-01  0.887705E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    547       1015.25         68.18          1.18         39.34          1.83          0.05        110.57
Just calling func    0   0        110.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1015.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       89
neval is:      546
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       90
neval is:      546


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      546     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.928852     -0.738060E-01 -0.473317E-01  0.473317E-01   972.502       972.549    
   2  0.508940     -0.675426     -0.433150      0.433150       976.693       977.126    
   3  0.940252     -0.616068E-01 -0.395084E-01  0.395084E-01   987.486       987.525    
   4  0.710865     -0.341273     -0.218858      0.218858       992.426       992.645    
   5  0.614152     -0.487512     -0.312641      0.312641       997.343       997.655    
   6  0.724657     -0.322056     -0.206534      0.206534       998.173       998.380    
   7  0.182188      -1.70272      -1.09195       1.09195       998.046       999.138    
   8  0.906182     -0.985149E-01 -0.631774E-01  0.631774E-01   999.006       999.069    
   9  0.334328      -1.09563     -0.702628      0.702628       1004.16       1004.86    
  10  0.512297     -0.668851     -0.428933      0.428933       1004.51       1004.94    
  11  0.273582      -1.29616     -0.831222      0.831222       1011.05       1011.88    
  12  0.311137E-01  -3.47011      -2.22537       2.22537       1013.68       1015.91    
  13  0.685551E-01  -2.68012      -1.71875       1.71875       1013.30       1015.02    
  14  0.950796     -0.504555E-01 -0.323570E-01  0.323570E-01   1014.24       1014.27    
  15  0.573751     -0.555559     -0.356279      0.356279       1015.05       1015.40    
  16  0.516007     -0.661634     -0.424305      0.424305       1015.36       1015.78    
  17  0.424420     -0.857031     -0.549613      0.549613       1015.62       1016.17    
  18  0.919683     -0.837264E-01 -0.536936E-01  0.536936E-01   1017.93       1017.98    
  19  0.709651     -0.342982     -0.219954      0.219954       1021.37       1021.59    
  20  0.912426     -0.916488E-01 -0.587742E-01  0.587742E-01   1021.42       1021.48    
  21  0.259155      -1.35033     -0.865964      0.865964       1021.66       1022.53    
  22  0.728446     -0.316842     -0.203190      0.203190       1023.20       1023.40    
  23  0.690066     -0.370969     -0.237902      0.237902       1022.43       1022.67    
  24  0.369187     -0.996453     -0.639024      0.639024       1024.61       1025.25    
  25  0.610133     -0.494078     -0.316851      0.316851       1024.28       1024.59    
  26  0.941293     -0.605009E-01 -0.387991E-01  0.387991E-01   1024.70       1024.74    
  27  0.415734     -0.877710     -0.562874      0.562874       1023.31       1023.88    
  28  0.464429     -0.766947     -0.491842      0.491842       1027.67       1028.17    
  29  0.158276      -1.84342      -1.18218       1.18218       1031.33       1032.51    
  30  0.281104      -1.26903     -0.813827      0.813827       1029.77       1030.58    
  31  0.782514     -0.245243     -0.157274      0.157274       1033.31       1033.47    
  32  0.830267     -0.186008     -0.119286      0.119286       1033.29       1033.41    
  33  0.381082     -0.964741     -0.618687      0.618687       1034.48       1035.10    
  34  0.127611E-01  -4.36136      -2.79693       2.79693       1035.62       1038.42    
  35  0.867941     -0.141631     -0.908278E-01  0.908278E-01   1036.39       1036.48    
  36  0.891309     -0.115064     -0.737907E-01  0.737907E-01   1037.83       1037.91    
  37  0.191171      -1.65459      -1.06109       1.06109       1038.62       1039.68    
  38  0.210638      -1.55761     -0.998895      0.998895       1040.61       1041.61    
  39  0.755578     -0.280272     -0.179738      0.179738       1042.61       1042.79    
  40  0.710194     -0.342217     -0.219463      0.219463       1042.64       1042.86    
  41  0.529730     -0.635388     -0.407473      0.407473       1041.59       1041.99    
  42  0.422358     -0.861901     -0.552736      0.552736       1045.14       1045.69    
  43  0.358413      -1.02607     -0.658016      0.658016       1045.75       1046.41    
  44  0.357432      -1.02881     -0.659774      0.659774       1049.32       1049.98    
  45  0.755103     -0.280901     -0.180141      0.180141       1049.25       1049.43    
  46  0.215841      -1.53321     -0.983247      0.983247       1049.81       1050.79    
  47  0.981396     -0.187792E-01 -0.120431E-01  0.120431E-01   1050.53       1050.55    
  48  0.854335     -0.157432     -0.100961      0.100961       1051.92       1052.02    
  49  0.606247     -0.500467     -0.320949      0.320949       1015.25       1015.57    
loop,thermsimp(1:2)       90  0.473317E-01  0.433150    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    548       1073.59         68.20          1.18         39.23          1.96          0.04        110.62
Just calling func    0   0        110.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    549       1008.91         68.14          1.18         39.32          1.79          0.04        110.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1008.91
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       90
neval is:      548
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       91
neval is:      548


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      548     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842868     -0.170945     -0.109627      0.109627       972.502       972.612    
   2  0.313135      -1.16112     -0.744624      0.744624       976.693       977.438    
   3  0.236181      -1.44316     -0.925495      0.925495       987.486       988.411    
   4  0.794354     -0.230226     -0.147644      0.147644       992.426       992.574    
   5  0.969276     -0.312054E-01 -0.200120E-01  0.200120E-01   997.343       997.363    
   6  0.440894     -0.818950     -0.525191      0.525191       998.173       998.698    
   7  0.491848     -0.709587     -0.455057      0.455057       999.006       999.461    
   8  0.869297     -0.140071     -0.898270E-01  0.898270E-01   998.046       998.136    
   9  0.375745     -0.978845     -0.627732      0.627732       1004.16       1004.79    
  10  0.652322E-01  -2.72980      -1.75062       1.75062       1004.51       1006.26    
  11  0.150961E-02  -6.49591      -4.16581       4.16581       1011.05       1015.22    
  12  0.846773     -0.166322     -0.106662      0.106662       1014.24       1014.34    
  13  0.722269     -0.325357     -0.208651      0.208651       1013.30       1013.51    
  14  0.170946      -1.76641      -1.13279       1.13279       1015.05       1016.18    
  15  0.630379     -0.461434     -0.295917      0.295917       1015.25       1015.54    
  16  0.376027     -0.978094     -0.627250      0.627250       1015.36       1015.98    
  17  0.256826      -1.35936     -0.871754      0.871754       1013.68       1014.55    
  18  0.919921     -0.834680E-01 -0.535279E-01  0.535279E-01   1015.62       1015.67    
  19  0.981950     -0.182148E-01 -0.116811E-01  0.116811E-01   1017.93       1017.94    
  20  0.312944E-01  -3.46431      -2.22166       2.22166       1021.42       1023.64    
  21  0.418844     -0.870256     -0.558094      0.558094       1021.37       1021.93    
  22  0.128679      -2.05044      -1.31494       1.31494       1021.66       1022.98    
  23  0.934274     -0.679857E-01 -0.435991E-01  0.435991E-01   1022.43       1022.47    
  24  0.287461      -1.24667     -0.799485      0.799485       1023.20       1024.00    
  25  0.558824     -0.581920     -0.373184      0.373184       1023.31       1023.69    
  26  0.850269E-01  -2.46479      -1.58066       1.58066       1024.28       1025.86    
  27  0.892707     -0.113497     -0.727851E-01  0.727851E-01   1024.70       1024.77    
  28  0.534546     -0.626337     -0.401669      0.401669       1024.61       1025.01    
  29  0.258618      -1.35240     -0.867294      0.867294       1027.67       1028.54    
  30  0.601184E-01  -2.81144      -1.80297       1.80297       1029.77       1031.57    
  31  0.243435      -1.41290     -0.906093      0.906093       1031.33       1032.24    
  32  0.682755     -0.381620     -0.244732      0.244732       1033.29       1033.53    
  33  0.213921      -1.54215     -0.988978      0.988978       1033.31       1034.30    
  34  0.986880     -0.132065E-01 -0.846932E-02  0.846932E-02   1034.48       1034.49    
  35  0.311026      -1.16788     -0.748958      0.748958       1036.39       1037.13    
  36  0.872580     -0.136301     -0.874094E-01  0.874094E-01   1037.83       1037.92    
  37  0.827055     -0.189883     -0.121772      0.121772       1035.62       1035.74    
  38  0.732511     -0.311277     -0.199622      0.199622       1038.62       1038.82    
  39  0.444172     -0.811544     -0.520442      0.520442       1040.61       1041.13    
  40  0.598416     -0.513469     -0.329287      0.329287       1041.59       1041.92    
  41  0.764808E-02  -4.87330      -3.12524       3.12524       1042.61       1045.73    
  42  0.195752      -1.63091      -1.04590       1.04590       1042.64       1043.69    
  43  0.392872E-01  -3.23686      -2.07579       2.07579       1045.14       1047.22    
  44  0.322998      -1.13011     -0.724738      0.724738       1045.75       1046.48    
  45  0.513949     -0.665632     -0.426868      0.426868       1049.25       1049.67    
  46  0.985493     -0.146134E-01 -0.937153E-02  0.937153E-02   1049.32       1049.33    
  47  0.439234     -0.822723     -0.527611      0.527611       1050.53       1051.06    
  48  0.789282     -0.236631     -0.151751      0.151751       1049.81       1049.96    
  49  0.504514     -0.684161     -0.438751      0.438751       1008.91       1009.35    
loop,thermsimp(1:2)       91  0.109627      0.744624    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    550       1045.12         68.19          1.17         39.37          1.93          0.05        110.70
Just calling func    0   0        110.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1045.12
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       91
neval is:      549
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       92
neval is:      549


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      549     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.913048     -0.909670E-01 -0.583370E-01  0.583370E-01   972.502       972.560    
   2  0.505284     -0.682636     -0.437773      0.437773       976.693       977.131    
   3  0.926395     -0.764551E-01 -0.490305E-01  0.490305E-01   987.486       987.535    
   4  0.930518     -0.720134E-01 -0.461821E-01  0.461821E-01   992.426       992.473    
   5  0.963069E-01  -2.34021      -1.50078       1.50078       997.343       998.844    
   6  0.586674     -0.533285     -0.341995      0.341995       998.046       998.388    
   7  0.117585E-01  -4.44318      -2.84940       2.84940       998.173       1001.02    
   8  0.252495E-01  -3.67895      -2.35930       2.35930       999.006       1001.37    
   9  0.766058     -0.266498     -0.170905      0.170905       1004.16       1004.33    
  10  0.576712     -0.550412     -0.352978      0.352978       1004.51       1004.86    
  11  0.421744     -0.863356     -0.553669      0.553669       1008.91       1009.47    
  12  0.772961     -0.257527     -0.165152      0.165152       1013.30       1013.47    
  13  0.694637     -0.364366     -0.233667      0.233667       1014.24       1014.47    
  14  0.868616     -0.140855     -0.903298E-01  0.903298E-01   1013.68       1013.77    
  15  0.642700     -0.442077     -0.283503      0.283503       1011.05       1011.34    
  16  0.907966     -0.965488E-01 -0.619166E-01  0.619166E-01   1015.25       1015.31    
  17  0.361258      -1.01816     -0.652946      0.652946       1015.62       1016.27    
  18  0.737492     -0.304500     -0.195275      0.195275       1015.36       1015.55    
  19  0.569143     -0.563623     -0.361451      0.361451       1015.05       1015.41    
  20  0.653498     -0.425416     -0.272818      0.272818       1017.93       1018.20    
  21  0.439431     -0.822276     -0.527324      0.527324       1021.37       1021.90    
  22  0.960173     -0.406417E-01 -0.260635E-01  0.260635E-01   1022.43       1022.46    
  23  0.144588      -1.93387      -1.24018       1.24018       1021.66       1022.90    
  24  0.805223     -0.216636     -0.138928      0.138928       1021.42       1021.56    
  25  0.598341     -0.513594     -0.329367      0.329367       1023.31       1023.64    
  26  0.101946E-01  -4.58590      -2.94093       2.94093       1023.20       1026.14    
  27  0.741489     -0.299095     -0.191809      0.191809       1024.70       1024.89    
  28  0.375027     -0.980758     -0.628958      0.628958       1024.61       1025.24    
  29  0.179335      -1.71850      -1.10207       1.10207       1024.28       1025.38    
  30  0.458337     -0.780151     -0.500309      0.500309       1027.67       1028.17    
  31  0.203650E-01  -3.89394      -2.49717       2.49717       1029.77       1032.27    
  32  0.667878     -0.403649     -0.258860      0.258860       1031.33       1031.59    
  33  0.146377      -1.92157      -1.23230       1.23230       1033.29       1034.52    
  34  0.738730     -0.302822     -0.194199      0.194199       1033.31       1033.51    
  35  0.844664     -0.168817     -0.108262      0.108262       1034.48       1034.59    
  36  0.718984E-01  -2.63250      -1.68822       1.68822       1035.62       1037.31    
  37  0.330498      -1.10716     -0.710017      0.710017       1036.39       1037.10    
  38  0.138575      -1.97634      -1.26742       1.26742       1037.83       1039.10    
  39  0.172894      -1.75508      -1.12553       1.12553       1038.62       1039.74    
  40  0.924043E-01  -2.38158      -1.52730       1.52730       1040.61       1042.14    
  41  0.526670     -0.641181     -0.411188      0.411188       1041.59       1042.00    
  42  0.302159E-01  -3.49939      -2.24415       2.24415       1042.64       1044.89    
  43  0.544902     -0.607149     -0.389364      0.389364       1042.61       1043.00    
  44  0.564354     -0.572073     -0.366869      0.366869       1045.75       1046.12    
  45  0.397409     -0.922789     -0.591783      0.591783       1045.14       1045.73    
  46  0.480967     -0.731957     -0.469403      0.469403       1049.32       1049.79    
  47  0.529552     -0.635723     -0.407688      0.407688       1049.25       1049.66    
  48  0.534607     -0.626224     -0.401596      0.401596       1049.81       1050.21    
  49  0.456559     -0.784036     -0.502801      0.502801       1045.12       1045.62    
loop,thermsimp(1:2)       92  0.583370E-01  0.437773    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    551       1032.86         68.22          1.19         39.46          1.90          0.05        110.81
Just calling func    0   0        110.81


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1032.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       92
neval is:      550
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       93
neval is:      550


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      550     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102463E-01  -4.58084      -2.93769       2.93769       972.502       975.440    
   2  0.753706     -0.282753     -0.181329      0.181329       976.693       976.874    
   3  0.767008     -0.265259     -0.170110      0.170110       987.486       987.656    
   4  0.943573     -0.580814E-01 -0.372475E-01  0.372475E-01   992.426       992.464    
   5  0.993643     -0.637734E-02 -0.408978E-02  0.408978E-02   998.046       998.050    
   6  0.526910     -0.640725     -0.410896      0.410896       997.343       997.754    
   7  0.753268     -0.283334     -0.181701      0.181701       998.173       998.355    
   8  0.369006     -0.996943     -0.639338      0.639338       999.006       999.645    
   9  0.686485     -0.376171     -0.241238      0.241238       1004.16       1004.40    
  10  0.930727     -0.717894E-01 -0.460384E-01  0.460384E-01   1004.51       1004.56    
  11  0.204995      -1.58477      -1.01631       1.01631       1008.91       1009.93    
  12  0.569575     -0.562865     -0.360964      0.360964       1011.05       1011.41    
  13  0.501966E-01  -2.99181      -1.91864       1.91864       1013.30       1015.22    
  14  0.116223      -2.15224      -1.38023       1.38023       1013.68       1015.06    
  15  0.538418     -0.619120     -0.397041      0.397041       1014.24       1014.63    
  16  0.984413E-01  -2.31829      -1.48672       1.48672       1015.25       1016.73    
  17  0.438168     -0.825152     -0.529169      0.529169       1015.05       1015.58    
  18  0.781950     -0.245964     -0.157736      0.157736       1015.36       1015.51    
  19  0.911246     -0.929419E-01 -0.596035E-01  0.596035E-01   1015.62       1015.68    
  20  0.274630E-01  -3.59492      -2.30541       2.30541       1017.93       1020.23    
  21  0.881407     -0.126236     -0.809551E-01  0.809551E-01   1021.42       1021.50    
  22  0.356494      -1.03144     -0.661459      0.661459       1021.37       1022.03    
  23  0.992151     -0.787984E-02 -0.505333E-02  0.505333E-02   1022.43       1022.44    
  24  0.364821E-02  -5.61352      -3.59994       3.59994       1021.66       1025.26    
  25  0.503648     -0.685877     -0.439852      0.439852       1023.31       1023.75    
  26  0.506600     -0.680033     -0.436104      0.436104       1024.70       1025.13    
  27  0.389073     -0.943988     -0.605378      0.605378       1024.61       1025.22    
  28  0.449798     -0.798958     -0.512370      0.512370       1024.28       1024.79    
  29  0.207641      -1.57194      -1.00809       1.00809       1023.20       1024.20    
  30  0.755722     -0.280082     -0.179616      0.179616       1027.67       1027.85    
  31  0.553095     -0.592225     -0.379793      0.379793       1031.33       1031.71    
  32  0.568900     -0.564051     -0.361725      0.361725       1029.77       1030.13    
  33  0.292942      -1.22778     -0.787374      0.787374       1033.31       1034.10    
  34  0.779378     -0.249259     -0.159849      0.159849       1033.29       1033.45    
  35  0.792637     -0.232390     -0.149031      0.149031       1034.48       1034.63    
  36  0.438721     -0.823891     -0.528360      0.528360       1036.39       1036.91    
  37  0.114070      -2.17094      -1.39222       1.39222       1035.62       1037.01    
  38  0.230909E-01  -3.76832      -2.41662       2.41662       1037.83       1040.25    
  39  0.684062     -0.379707     -0.243505      0.243505       1038.62       1038.86    
  40  0.347140      -1.05803     -0.678511      0.678511       1041.59       1042.27    
  41  0.242983      -1.41477     -0.907286      0.907286       1040.61       1041.52    
  42  0.399395     -0.917805     -0.588587      0.588587       1042.61       1043.20    
  43  0.433633     -0.835556     -0.535840      0.535840       1042.64       1043.18    
  44  0.365355      -1.00689     -0.645714      0.645714       1045.12       1045.77    
  45  0.342387E-01  -3.37440      -2.16400       2.16400       1045.14       1047.31    
  46  0.357807      -1.02776     -0.659103      0.659103       1045.75       1046.41    
  47  0.591697     -0.524760     -0.336528      0.336528       1049.25       1049.58    
  48  0.595013     -0.519172     -0.332944      0.332944       1049.32       1049.66    
  49  0.697530     -0.360209     -0.231002      0.231002       1032.86       1033.10    
loop,thermsimp(1:2)       93   2.93769      0.181329    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    552       1039.87         68.19          1.18         39.57          1.66          0.05        110.64
Just calling func    0   0        110.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1039.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       93
neval is:      551
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       94
neval is:      551


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      551     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.278113      -1.27973     -0.820687      0.820687       972.502       973.323    
   2  0.105819      -2.24603      -1.44037       1.44037       976.693       978.133    
   3  0.784836     -0.242281     -0.155374      0.155374       987.486       987.641    
   4  0.469761E-01  -3.05812      -1.96117       1.96117       992.426       994.388    
   5  0.265063      -1.32779     -0.851507      0.851507       997.343       998.194    
   6  0.327447      -1.11643     -0.715963      0.715963       998.046       998.762    
   7  0.804058     -0.218084     -0.139857      0.139857       998.173       998.313    
   8  0.954396     -0.466766E-01 -0.299336E-01  0.299336E-01   999.006       999.036    
   9  0.100632E-01  -4.59887      -2.94925       2.94925       1004.16       1007.11    
  10  0.237471      -1.43771     -0.922002      0.922002       1004.51       1005.43    
  11  0.579583     -0.545447     -0.349794      0.349794       1008.91       1009.26    
  12  0.419975     -0.867559     -0.556364      0.556364       1011.05       1011.61    
  13  0.580276     -0.544251     -0.349027      0.349027       1014.24       1014.58    
  14  0.154112      -1.87008      -1.19928       1.19928       1013.68       1014.88    
  15  0.135095      -2.00178      -1.28373       1.28373       1013.30       1014.58    
  16  0.442223     -0.815942     -0.523262      0.523262       1015.36       1015.88    
  17  0.242536      -1.41661     -0.908467      0.908467       1015.05       1015.96    
  18  0.597344     -0.515263     -0.330437      0.330437       1015.62       1015.95    
  19  0.601435     -0.508436     -0.326059      0.326059       1015.25       1015.57    
  20  0.170269      -1.77038      -1.13534       1.13534       1017.93       1019.06    
  21  0.250605      -1.38388     -0.887477      0.887477       1021.42       1022.31    
  22  0.716593     -0.333247     -0.213711      0.213711       1021.37       1021.58    
  23  0.736735     -0.305527     -0.195934      0.195934       1022.43       1022.63    
  24  0.651359     -0.428695     -0.274921      0.274921       1023.31       1023.59    
  25  0.964381E-01  -2.33885      -1.49990       1.49990       1023.20       1024.70    
  26  0.733745     -0.309594     -0.198542      0.198542       1024.28       1024.48    
  27  0.333334      -1.09861     -0.704537      0.704537       1024.70       1025.40    
  28  0.824354     -0.193156     -0.123870      0.123870       1024.61       1024.74    
  29  0.916372E-01  -2.38992      -1.53265       1.53265       1021.66       1023.20    
  30  0.608783     -0.496293     -0.318272      0.318272       1027.67       1027.99    
  31  0.144761      -1.93267      -1.23942       1.23942       1029.77       1031.01    
  32  0.389419     -0.943098     -0.604807      0.604807       1031.33       1031.94    
  33  0.439521E-01  -3.12466      -2.00384       2.00384       1032.86       1034.87    
  34  0.622697     -0.473695     -0.303780      0.303780       1033.29       1033.59    
  35  0.740851E-01  -2.60254      -1.66901       1.66901       1033.31       1034.98    
  36  0.539428     -0.617245     -0.395838      0.395838       1034.48       1034.88    
  37  0.741888     -0.298557     -0.191464      0.191464       1036.39       1036.58    
  38  0.781370     -0.246706     -0.158212      0.158212       1035.62       1035.78    
  39  0.709063     -0.343811     -0.220485      0.220485       1038.62       1038.84    
  40  0.242883      -1.41517     -0.907549      0.907549       1037.83       1038.74    
  41  0.404042     -0.906236     -0.581168      0.581168       1040.61       1041.19    
  42  0.390112E-01  -3.24391      -2.08031       2.08031       1041.59       1043.67    
  43  0.537404     -0.621005     -0.398250      0.398250       1042.64       1043.04    
  44  0.428550     -0.847349     -0.543403      0.543403       1042.61       1043.15    
  45  0.459616E-01  -3.07995      -1.97517       1.97517       1045.12       1047.09    
  46  0.725190     -0.321321     -0.206063      0.206063       1045.75       1045.96    
  47  0.371324     -0.990681     -0.635322      0.635322       1045.14       1045.78    
  48  0.486512     -0.720495     -0.462052      0.462052       1049.25       1049.71    
  49  0.960155     -0.406605E-01 -0.260755E-01  0.260755E-01   1039.87       1039.89    
loop,thermsimp(1:2)       94  0.820687       1.44037    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    553        991.02         68.18          1.19         39.33          1.95          0.05        110.70
Just calling func    0   0        110.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    991.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       94
neval is:      552
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       95
neval is:      552


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      552     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.805332     -0.216500     -0.138841      0.138841       972.502       972.641    
   2  0.744990     -0.294384     -0.188788      0.188788       976.693       976.882    
   3  0.786459     -0.240215     -0.154049      0.154049       987.486       987.640    
   4  0.668108     -0.403306     -0.258639      0.258639       992.426       992.685    
   5  0.495643     -0.701900     -0.450127      0.450127       997.343       997.793    
   6  0.837031     -0.177895     -0.114084      0.114084       998.173       998.287    
   7  0.112578      -2.18411      -1.40066       1.40066       998.046       999.447    
   8  0.660529     -0.414714     -0.265955      0.265955       999.006       999.272    
   9  0.266723      -1.32154     -0.847503      0.847503       1004.51       1005.36    
  10  0.681783     -0.383043     -0.245645      0.245645       1004.16       1004.41    
  11  0.472812E-01  -3.05164      -1.95701       1.95701       1008.91       1010.87    
  12  0.338573      -1.08302     -0.694536      0.694536       1011.05       1011.75    
  13  0.372164     -0.988420     -0.633872      0.633872       1014.24       1014.87    
  14  0.512145     -0.669148     -0.429123      0.429123       1013.30       1013.73    
  15  0.387258     -0.948664     -0.608377      0.608377       1013.68       1014.29    
  16  0.803761     -0.218453     -0.140094      0.140094       1015.25       1015.39    
  17  0.411757     -0.887323     -0.569038      0.569038       1015.36       1015.93    
  18  0.928175     -0.745351E-01 -0.477993E-01  0.477993E-01   1015.62       1015.67    
  19  0.248722      -1.39142     -0.892314      0.892314       1015.05       1015.94    
  20  0.222423E-01  -3.80576      -2.44063       2.44063       1017.93       1020.37    
  21  0.128148      -2.05457      -1.31759       1.31759       1021.37       1022.69    
  22  0.490302     -0.712733     -0.457074      0.457074       1021.42       1021.88    
  23  0.188538      -1.66845      -1.06998       1.06998       1022.43       1023.50    
  24  0.485097     -0.723407     -0.463920      0.463920       1021.66       1022.13    
  25  0.339189      -1.08120     -0.693370      0.693370       1023.31       1024.01    
  26  0.893268     -0.112869     -0.723824E-01  0.723824E-01   1024.28       1024.35    
  27  0.429532     -0.845058     -0.541934      0.541934       1023.20       1023.74    
  28  0.750309     -0.287270     -0.184226      0.184226       1024.61       1024.80    
  29  0.432319     -0.838592     -0.537787      0.537787       1024.70       1025.23    
  30  0.780758     -0.247490     -0.158715      0.158715       1027.67       1027.83    
  31  0.627108     -0.466636     -0.299253      0.299253       1029.77       1030.07    
  32  0.901394E-01  -2.40640      -1.54322       1.54322       1031.33       1032.87    
  33  0.625431     -0.469315     -0.300971      0.300971       1033.29       1033.59    
  34  0.766266     -0.266226     -0.170730      0.170730       1032.86       1033.04    
  35  0.329075      -1.11147     -0.712783      0.712783       1034.48       1035.20    
  36  0.953769     -0.473337E-01 -0.303550E-01  0.303550E-01   1033.31       1033.34    
  37  0.828723     -0.187869     -0.120480      0.120480       1035.62       1035.74    
  38  0.249659      -1.38766     -0.889905      0.889905       1036.39       1037.28    
  39  0.693613     -0.365841     -0.234613      0.234613       1037.83       1038.07    
  40  0.952982     -0.481588E-01 -0.308841E-01  0.308841E-01   1038.62       1038.65    
  41  0.455394     -0.786593     -0.504441      0.504441       1039.87       1040.37    
  42  0.125074      -2.07885      -1.33316       1.33316       1040.61       1041.95    
  43  0.346798      -1.05901     -0.679144      0.679144       1042.64       1043.32    
  44  0.565323     -0.570359     -0.365770      0.365770       1042.61       1042.97    
  45  0.383874     -0.957441     -0.614005      0.614005       1041.59       1042.20    
  46  0.175157      -1.74207      -1.11719       1.11719       1045.14       1046.26    
  47  0.954539     -0.465264E-01 -0.298373E-01  0.298373E-01   1045.75       1045.78    
  48  0.803383     -0.218924     -0.140395      0.140395       1045.12       1045.26    
  49  0.224660E-01  -3.79575      -2.43421       2.43421       991.024       993.458    
loop,thermsimp(1:2)       95  0.138841      0.188788    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    554       1104.84         68.22          1.20         39.30          1.68          0.05        110.45
Just calling func    0   0        110.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    555       1033.93         68.22          1.19         39.75          1.36          0.04        110.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1033.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       95
neval is:      554
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   17.8918    

hmean,hstd :    1019.84       17.8918    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    1019.84       17.8918    
h(1),h(best1),h(np1) :    972.502       972.502       1033.93    
htherm(1),htherm(best1),htherm(np1) :    972.641       972.641       1046.26    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        1
neval is:      554


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      554     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.802768     -0.219690     -0.140887      0.140887       972.502       972.643    
   2  0.731694E-01  -2.61498      -1.67698       1.67698       976.693       978.370    
   3  0.462049E-01  -3.07467      -1.97178       1.97178       987.486       989.458    
   4  0.852437E-01  -2.46224      -1.57903       1.57903       992.426       994.005    
   5  0.309350      -1.17328     -0.752423      0.752423       991.024       991.776    
   6  0.177885      -1.72662      -1.10728       1.10728       997.343       998.450    
   7  0.848955     -0.163749     -0.105012      0.105012       998.173       998.278    
   8  0.278645      -1.27782     -0.819462      0.819462       999.006       999.826    
   9  0.229974      -1.46979     -0.942573      0.942573       998.046       998.988    
  10  0.931679     -0.707665E-01 -0.453825E-01  0.453825E-01   1004.16       1004.21    
  11  0.694841     -0.364072     -0.233479      0.233479       1004.51       1004.74    
  12  0.479970     -0.734032     -0.470734      0.470734       1008.91       1009.38    
  13  0.433304     -0.836317     -0.536329      0.536329       1011.05       1011.59    
  14  0.246726      -1.39948     -0.897482      0.897482       1013.30       1014.20    
  15  0.656908     -0.420211     -0.269481      0.269481       1013.68       1013.95    
  16  0.602622     -0.506465     -0.324795      0.324795       1014.24       1014.56    
  17  0.765164     -0.267665     -0.171653      0.171653       1015.25       1015.42    
  18  0.834323     -0.181134     -0.116161      0.116161       1015.62       1015.74    
  19  0.227960      -1.47858     -0.948214      0.948214       1015.36       1016.30    
  20  0.631177     -0.460169     -0.295106      0.295106       1015.05       1015.34    
  21  0.935854     -0.662962E-01 -0.425156E-01  0.425156E-01   1017.93       1017.97    
  22  0.326102      -1.12055     -0.718604      0.718604       1021.42       1022.14    
  23  0.687967     -0.374015     -0.239855      0.239855       1021.66       1021.90    
  24  0.967305     -0.332415E-01 -0.213177E-01  0.213177E-01   1021.37       1021.39    
  25  0.489938     -0.713477     -0.457551      0.457551       1022.43       1022.89    
  26  0.943695     -0.579520E-01 -0.371645E-01  0.371645E-01   1023.20       1023.23    
  27  0.780166     -0.248249     -0.159201      0.159201       1023.31       1023.47    
  28  0.236342      -1.44248     -0.925057      0.925057       1024.28       1025.20    
  29  0.604509     -0.503339     -0.322790      0.322790       1024.61       1024.94    
  30  0.156612      -1.85399      -1.18896       1.18896       1024.70       1025.89    
  31  0.966488     -0.340862E-01 -0.218594E-01  0.218594E-01   1027.67       1027.70    
  32  0.899194     -0.106257     -0.681424E-01  0.681424E-01   1029.77       1029.84    
  33  0.194333      -1.63818      -1.05056       1.05056       1031.33       1032.38    
  34  0.655048E-01  -2.72563      -1.74794       1.74794       1032.86       1034.61    
  35  0.889981     -0.116555     -0.747467E-01  0.747467E-01   1033.31       1033.39    
  36  0.352816      -1.04181     -0.668110      0.668110       1033.29       1033.96    
  37  0.222094      -1.50465     -0.964932      0.964932       1034.48       1035.45    
  38  0.699872     -0.356858     -0.228852      0.228852       1035.62       1035.85    
  39  0.851958     -0.160218     -0.102748      0.102748       1036.39       1036.49    
  40  0.136105      -1.99433      -1.27896       1.27896       1037.83       1039.11    
  41  0.327541      -1.11614     -0.715779      0.715779       1038.62       1039.33    
  42  0.959788     -0.410425E-01 -0.263205E-01  0.263205E-01   1039.87       1039.89    
  43  0.876412     -0.131919     -0.845994E-01  0.845994E-01   1040.61       1040.70    
  44  0.757321     -0.277967     -0.178260      0.178260       1041.59       1041.76    
  45  0.436588E-01  -3.13135      -2.00813       2.00813       1042.61       1044.62    
  46  0.569534     -0.562936     -0.361010      0.361010       1042.64       1043.00    
  47  0.155536      -1.86088      -1.19338       1.19338       1045.12       1046.31    
  48  0.297807      -1.21131     -0.776810      0.776810       1045.75       1046.53    
  49  0.515551     -0.662520     -0.424873      0.424873       1033.93       1034.36    
loop,thermsimp(1:2)        1  0.140887       1.67698    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    556        979.00         68.21          1.19         39.31          1.62          0.04        110.38
Just calling func    0   0        110.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    979.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        1
neval is:      555
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        2
neval is:      555


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      555     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.802451     -0.220085     -0.141140      0.141140       972.502       972.643    
   2  0.718433     -0.330683     -0.212066      0.212066       976.693       976.905    
   3  0.857385     -0.153868     -0.986752E-01  0.986752E-01   987.486       987.585    
   4  0.444765     -0.810210     -0.519586      0.519586       991.024       991.543    
   5  0.416407E-01  -3.17868      -2.03848       2.03848       992.426       994.465    
   6  0.519548     -0.654796     -0.419920      0.419920       998.173       998.593    
   7  0.981198     -0.189814E-01 -0.121727E-01  0.121727E-01   997.343       997.355    
   8  0.175263      -1.74146      -1.11680       1.11680       998.046       999.163    
   9  0.500419     -0.692310     -0.443977      0.443977       999.006       999.450    
  10  0.668341     -0.402956     -0.258415      0.258415       1004.16       1004.42    
  11  0.461446     -0.773390     -0.495973      0.495973       1004.51       1005.01    
  12  0.751439     -0.285766     -0.183261      0.183261       1008.91       1009.10    
  13  0.244166      -1.40991     -0.904172      0.904172       1011.05       1011.96    
  14  0.164219      -1.80655      -1.15854       1.15854       1013.68       1014.84    
  15  0.180335      -1.71294      -1.09851       1.09851       1013.30       1014.40    
  16  0.131675      -2.02742      -1.30018       1.30018       1014.24       1015.54    
  17  0.456922     -0.783244     -0.502293      0.502293       1015.05       1015.55    
  18  0.963428     -0.372575E-01 -0.238932E-01  0.238932E-01   1015.25       1015.27    
  19  0.954771     -0.462836E-01 -0.296816E-01  0.296816E-01   1015.62       1015.65    
  20  0.304950      -1.18761     -0.761611      0.761611       1015.36       1016.12    
  21  0.217958      -1.52345     -0.976989      0.976989       1017.93       1018.90    
  22  0.358862      -1.02482     -0.657214      0.657214       1021.37       1022.03    
  23  0.688607     -0.373084     -0.239258      0.239258       1021.66       1021.90    
  24  0.557241     -0.584757     -0.375004      0.375004       1021.42       1021.80    
  25  0.601810     -0.507814     -0.325660      0.325660       1022.43       1022.76    
  26  0.731036     -0.313292     -0.200914      0.200914       1023.20       1023.40    
  27  0.422983     -0.860424     -0.551788      0.551788       1023.31       1023.87    
  28  0.803815     -0.218386     -0.140051      0.140051       1024.61       1024.75    
  29  0.880168     -0.127643     -0.818572E-01  0.818572E-01   1024.28       1024.36    
  30  0.886853     -0.120076     -0.770045E-01  0.770045E-01   1024.70       1024.77    
  31  0.900302     -0.105025     -0.673526E-01  0.673526E-01   1027.67       1027.74    
  32  0.863614     -0.146629     -0.940329E-01  0.940329E-01   1029.77       1029.86    
  33  0.914915     -0.889243E-01 -0.570270E-01  0.570270E-01   1031.33       1031.39    
  34  0.595862     -0.517745     -0.332029      0.332029       1033.31       1033.64    
  35  0.453884     -0.789914     -0.506571      0.506571       1033.29       1033.80    
  36  0.927195     -0.755913E-01 -0.484766E-01  0.484766E-01   1033.93       1033.98    
  37  0.691102     -0.369468     -0.236939      0.236939       1032.86       1033.10    
  38  0.383191     -0.959222     -0.615147      0.615147       1034.48       1035.10    
  39  0.535640     -0.624293     -0.400358      0.400358       1035.62       1036.02    
  40  0.611513     -0.491819     -0.315403      0.315403       1036.39       1036.70    
  41  0.896746     -0.108982     -0.698902E-01  0.698902E-01   1037.83       1037.90    
  42  0.398472     -0.920117     -0.590070      0.590070       1038.62       1039.21    
  43  0.165068      -1.80140      -1.15523       1.15523       1039.87       1041.02    
  44  0.886961     -0.119954     -0.769264E-01  0.769264E-01   1040.61       1040.69    
  45  0.590956     -0.526014     -0.337332      0.337332       1041.59       1041.92    
  46  0.625802     -0.468721     -0.300590      0.300590       1042.64       1042.94    
  47  0.607481     -0.498435     -0.319646      0.319646       1042.61       1042.93    
  48  0.888325     -0.118417     -0.759407E-01  0.759407E-01   1045.12       1045.20    
  49  0.632927E-01  -2.75998      -1.76997       1.76997       979.000       980.770    
loop,thermsimp(1:2)        2  0.141140      0.212066    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    557       1063.23         68.16          1.19         39.48          1.47          0.05        110.35
Just calling func    0   0        110.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    558       1008.83         68.21          1.18         39.31          1.70          0.05        110.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3   1008.83
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        2
neval is:      557
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        3
neval is:      557


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      557     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.467669     -0.759994     -0.487383      0.487383       972.502       972.989    
   2  0.853545     -0.158357     -0.101554      0.101554       976.693       976.795    
   3  0.153556      -1.87369      -1.20160       1.20160       979.000       980.202    
   4  0.642080     -0.443042     -0.284122      0.284122       987.486       987.770    
   5  0.617478     -0.482112     -0.309178      0.309178       991.024       991.333    
   6  0.820964     -0.197276     -0.126513      0.126513       992.426       992.553    
   7  0.978949     -0.212757E-01 -0.136441E-01  0.136441E-01   997.343       997.356    
   8  0.558433     -0.582620     -0.373633      0.373633       998.173       998.547    
   9  0.775343     -0.254450     -0.163178      0.163178       998.046       998.209    
  10  0.334915      -1.09388     -0.701503      0.701503       999.006       999.708    
  11  0.637732     -0.449837     -0.288480      0.288480       1004.16       1004.45    
  12  0.504336     -0.684512     -0.438977      0.438977       1004.51       1004.95    
  13  0.534498     -0.626428     -0.401727      0.401727       1008.91       1009.31    
  14  0.180769      -1.71053      -1.09696       1.09696       1011.05       1012.15    
  15  0.129624      -2.04312      -1.31025       1.31025       1013.30       1014.61    
  16  0.107570      -2.22961      -1.42985       1.42985       1013.68       1015.11    
  17  0.879162     -0.128786     -0.825905E-01  0.825905E-01   1015.25       1015.33    
  18  0.214012      -1.54172     -0.988704      0.988704       1014.24       1015.22    
  19  0.579258     -0.546008     -0.350154      0.350154       1015.05       1015.40    
  20  0.818416     -0.200384     -0.128506      0.128506       1015.62       1015.75    
  21  0.947684     -0.537344E-01 -0.344598E-01  0.344598E-01   1015.36       1015.39    
  22  0.401789     -0.911828     -0.584753      0.584753       1017.93       1018.51    
  23  0.215109      -1.53661     -0.985424      0.985424       1021.42       1022.41    
  24  0.745539     -0.293648     -0.188316      0.188316       1021.66       1021.85    
  25  0.324985      -1.12398     -0.720803      0.720803       1021.37       1022.09    
  26  0.699300     -0.357676     -0.229377      0.229377       1022.43       1022.66    
  27  0.715353     -0.334980     -0.214822      0.214822       1023.20       1023.41    
  28  0.871028     -0.138081     -0.885509E-01  0.885509E-01   1023.31       1023.40    
  29  0.784379     -0.242863     -0.155748      0.155748       1024.28       1024.43    
  30  0.193036      -1.64488      -1.05486       1.05486       1024.61       1025.67    
  31  0.314779      -1.15588     -0.741266      0.741266       1024.70       1025.44    
  32  0.648871     -0.432522     -0.277375      0.277375       1027.67       1027.95    
  33  0.393419     -0.932880     -0.598254      0.598254       1029.77       1030.37    
  34  0.983792     -0.163408E-01 -0.104794E-01  0.104794E-01   1031.33       1031.34    
  35  0.441430     -0.817737     -0.524413      0.524413       1032.86       1033.39    
  36  0.760295     -0.274048     -0.175747      0.175747       1033.31       1033.49    
  37  0.748636     -0.289502     -0.185657      0.185657       1033.29       1033.47    
  38  0.855510     -0.156057     -0.100079      0.100079       1033.93       1034.03    
  39  0.567750     -0.566074     -0.363022      0.363022       1034.48       1034.85    
  40  0.397011     -0.923792     -0.592426      0.592426       1035.62       1036.21    
  41  0.693152     -0.366506     -0.235039      0.235039       1036.39       1036.62    
  42  0.495774     -0.701635     -0.449957      0.449957       1037.83       1038.28    
  43  0.630547     -0.461167     -0.295746      0.295746       1038.62       1038.91    
  44  0.982933     -0.172143E-01 -0.110395E-01  0.110395E-01   1040.61       1040.62    
  45  0.122534E-01  -4.40195      -2.82296       2.82296       1039.87       1042.69    
  46  0.300895      -1.20099     -0.770196      0.770196       1041.59       1042.36    
  47  0.786090E-01  -2.54327      -1.63099       1.63099       1042.61       1044.24    
  48  0.872264     -0.136663     -0.876418E-01  0.876418E-01   1042.64       1042.73    
  49  0.509685E-01  -2.97655      -1.90885       1.90885       1008.83       1010.74    
loop,thermsimp(1:2)        3  0.487383      0.101554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    559       1015.25         68.16          1.19         39.71          1.39          0.05        110.49
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1015.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        3
neval is:      558
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        4
neval is:      558


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      558     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.418793     -0.870378     -0.558172      0.558172       972.502       973.060    
   2  0.684501     -0.379065     -0.243094      0.243094       976.693       976.936    
   3  0.212628      -1.54821     -0.992865      0.992865       979.000       979.993    
   4  0.474693     -0.745087     -0.477823      0.477823       987.486       987.964    
   5  0.522176     -0.649750     -0.416683      0.416683       991.024       991.440    
   6  0.916681     -0.869959E-01 -0.557903E-01  0.557903E-01   992.426       992.482    
   7  0.408166     -0.896081     -0.574655      0.574655       997.343       997.917    
   8  0.335644      -1.09171     -0.700109      0.700109       998.046       998.746    
   9  0.349107      -1.05238     -0.674888      0.674888       998.173       998.848    
  10  0.154230      -1.86931      -1.19879       1.19879       999.006       1000.20    
  11  0.879226     -0.128714     -0.825438E-01  0.825438E-01   1004.16       1004.24    
  12  0.253515      -1.37233     -0.880074      0.880074       1004.51       1005.39    
  13  0.504135     -0.684911     -0.439232      0.439232       1008.91       1009.35    
  14  0.240849E-01  -3.72617      -2.38959       2.38959       1008.83       1011.22    
  15  0.553262E-01  -2.89451      -1.85624       1.85624       1011.05       1012.91    
  16  0.407479     -0.897766     -0.575736      0.575736       1013.30       1013.88    
  17  0.350366      -1.04878     -0.672579      0.672579       1013.68       1014.36    
  18  0.400921E-01  -3.21658      -2.06279       2.06279       1014.24       1016.30    
  19  0.444404     -0.811022     -0.520107      0.520107       1015.25       1015.77    
  20  0.316181      -1.15144     -0.738417      0.738417       1015.36       1016.09    
  21  0.171126      -1.76535      -1.13212       1.13212       1015.05       1016.18    
  22  0.964342     -0.363093E-01 -0.232851E-01  0.232851E-01   1015.62       1015.64    
  23  0.931242     -0.712363E-01 -0.456837E-01  0.456837E-01   1017.93       1017.97    
  24  0.588521     -0.530143     -0.339980      0.339980       1021.66       1022.00    
  25  0.881551     -0.126072     -0.808498E-01  0.808498E-01   1021.37       1021.45    
  26  0.889944     -0.116597     -0.747734E-01  0.747734E-01   1021.42       1021.50    
  27  0.136121      -1.99421      -1.27888       1.27888       1022.43       1023.71    
  28  0.101016      -2.29247      -1.47016       1.47016       1023.31       1024.78    
  29  0.228282      -1.47717     -0.947309      0.947309       1023.20       1024.14    
  30  0.283576      -1.26027     -0.808212      0.808212       1024.28       1025.09    
  31  0.577286     -0.549417     -0.352340      0.352340       1024.70       1025.05    
  32  0.317989      -1.14574     -0.734760      0.734760       1024.61       1025.35    
  33  0.946994     -0.544625E-01 -0.349267E-01  0.349267E-01   1027.67       1027.71    
  34  0.645644     -0.437508     -0.280573      0.280573       1029.77       1030.05    
  35  0.511068     -0.671253     -0.430473      0.430473       1031.33       1031.76    
  36  0.395608     -0.927332     -0.594697      0.594697       1032.86       1033.46    
  37  0.165947      -1.79609      -1.15183       1.15183       1033.29       1034.44    
  38  0.350924E-01  -3.34977      -2.14820       2.14820       1033.31       1035.46    
  39  0.398866     -0.919131     -0.589437      0.589437       1033.93       1034.52    
  40  0.317193      -1.14824     -0.736367      0.736367       1034.48       1035.22    
  41  0.505992     -0.681235     -0.436875      0.436875       1035.62       1036.06    
  42  0.220544      -1.51166     -0.969425      0.969425       1036.39       1037.36    
  43  0.165038      -1.80158      -1.15535       1.15535       1037.83       1038.99    
  44  0.184146      -1.69203      -1.08509       1.08509       1038.62       1039.70    
  45  0.765338     -0.267437     -0.171507      0.171507       1040.61       1040.78    
  46  0.234016      -1.45237     -0.931400      0.931400       1041.59       1042.52    
  47  0.328816      -1.11226     -0.713289      0.713289       1039.87       1040.58    
  48  0.152735      -1.87905      -1.20503       1.20503       1042.64       1043.85    
  49  0.807730     -0.213527     -0.136934      0.136934       1015.25       1015.39    
loop,thermsimp(1:2)        4  0.558172      0.243094    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    560       1004.22         68.18          1.19         39.29          1.77          0.05        110.49
Just calling func    0   0        110.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1004.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        4
neval is:      559
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        5
neval is:      559


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      559     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.160888      -1.82705      -1.17168       1.17168       972.502       973.674    
   2  0.385795     -0.952448     -0.610803      0.610803       976.693       977.304    
   3  0.574083     -0.554982     -0.355909      0.355909       979.000       979.356    
   4  0.529385     -0.636039     -0.407891      0.407891       987.486       987.894    
   5  0.116755      -2.14768      -1.37730       1.37730       991.024       992.401    
   6  0.992957     -0.706775E-02 -0.453253E-02  0.453253E-02   992.426       992.431    
   7  0.825100     -0.192251     -0.123290      0.123290       997.343       997.466    
   8  0.800059     -0.223069     -0.143054      0.143054       998.046       998.189    
   9  0.702734     -0.352778     -0.226236      0.226236       998.173       998.399    
  10  0.847561     -0.165392     -0.106066      0.106066       999.006       999.112    
  11  0.413599     -0.882858     -0.566175      0.566175       1004.16       1004.73    
  12  0.136101      -1.99436      -1.27898       1.27898       1004.51       1005.79    
  13  0.269726      -1.31035     -0.840325      0.840325       1008.91       1009.75    
  14  0.950958     -0.502852E-01 -0.322478E-01  0.322478E-01   1008.83       1008.86    
  15  0.742742     -0.297407     -0.190726      0.190726       1011.05       1011.24    
  16  0.952480     -0.486863E-01 -0.312224E-01  0.312224E-01   1013.30       1013.33    
  17  0.342981      -1.07008     -0.686241      0.686241       1013.68       1014.37    
  18  0.679592     -0.386263     -0.247710      0.247710       1015.25       1015.50    
  19  0.329468      -1.11028     -0.712019      0.712019       1015.62       1016.33    
  20  0.989630     -0.104243E-01 -0.668507E-02  0.668507E-02   1015.25       1015.25    
  21  0.485041     -0.723521     -0.463993      0.463993       1015.36       1015.82    
  22  0.284528E-01  -3.55951      -2.28271       2.28271       1015.05       1017.33    
  23  0.390460E-01  -3.24301      -2.07974       2.07974       1014.24       1016.32    
  24  0.412704     -0.885024     -0.567565      0.567565       1017.93       1018.50    
  25  0.937384     -0.646625E-01 -0.414679E-01  0.414679E-01   1021.37       1021.41    
  26  0.932822     -0.695406E-01 -0.445963E-01  0.445963E-01   1021.42       1021.47    
  27  0.148603      -1.90647      -1.22262       1.22262       1021.66       1022.89    
  28  0.328089      -1.11447     -0.714708      0.714708       1022.43       1023.15    
  29  0.368187     -0.999165     -0.640763      0.640763       1023.20       1023.84    
  30  0.487216     -0.719048     -0.461124      0.461124       1023.31       1023.77    
  31  0.614590     -0.486800     -0.312184      0.312184       1024.70       1025.01    
  32  0.385101     -0.954249     -0.611958      0.611958       1024.28       1024.89    
  33  0.864436     -0.145678     -0.934228E-01  0.934228E-01   1024.61       1024.71    
  34  0.386990     -0.949357     -0.608821      0.608821       1027.67       1028.28    
  35  0.815129     -0.204408     -0.131087      0.131087       1029.77       1029.90    
  36  0.126331      -2.06885      -1.32675       1.32675       1031.33       1032.66    
  37  0.503373     -0.686423     -0.440202      0.440202       1032.86       1033.30    
  38  0.350899      -1.04726     -0.671604      0.671604       1033.29       1033.96    
  39  0.131971      -2.02518      -1.29874       1.29874       1033.93       1035.23    
  40  0.862043     -0.148450     -0.952007E-01  0.952007E-01   1034.48       1034.58    
  41  0.682350     -0.382213     -0.245113      0.245113       1033.31       1033.56    
  42  0.785571     -0.241344     -0.154774      0.154774       1035.62       1035.77    
  43  0.420949     -0.865243     -0.554879      0.554879       1036.39       1036.94    
  44  0.696119     -0.362235     -0.232301      0.232301       1037.83       1038.06    
  45  0.340425      -1.07756     -0.691038      0.691038       1038.62       1039.31    
  46  0.618862     -0.479873     -0.307742      0.307742       1039.87       1040.17    
  47  0.206296      -1.57844      -1.01225       1.01225       1040.61       1041.62    
  48  0.482253     -0.729286     -0.467690      0.467690       1041.59       1042.05    
  49  0.961232     -0.395398E-01 -0.253568E-01  0.253568E-01   1004.22       1004.24    
loop,thermsimp(1:2)        5   1.17168      0.610803    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    561        979.35         68.16          1.17         39.43          1.75          0.05        110.56
Just calling func    0   0        110.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  560    979.35        2.898     -3.437      4.389     -102.6     0.3276    
                      0.6022E-01 0.8527     -99.70      5.030      1.409    

                       2.258     -1.715      2.005      7274.      7000.    

                      -1.954      0.000      0.000      0.000     -1.221    



                      -2.751      0.000      0.000      7000.      66.22    

                      -1.319     -6.319     -7.342     -7.531      8.884    

                      -4.893     -3.949      4694.      0.000      7750.    



                       3301.      6103.      7544.      3171.      3850.    

                       4468.     0.6120E-01 0.1164     0.5922E-01 0.2107    

                     -0.2486     0.2185     0.1739     0.2270     0.1296    



                      -1.031     -1.126      0.000     0.5988E-01 0.4693E-01

                      0.1081     0.1523    -0.7116     0.2207     0.2800    

                      0.1076     0.1622    -0.5019     -1.460      7000.    



                      -2.017     -1.685     -2.160     -2.238    -0.3807    

                     -0.3252      9.559      8.488    -0.1591E+05 -5.073    

                     -0.4246     -2.412      8.944      9.169    -0.1969E+05



                      -6.000     0.3832    -0.3656E-02  8.963      8.964    

                     -0.1944E+05 -6.000     -1.091    -0.7822      9.710    

                       9.436    -0.1891E+05 -6.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    979.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        5
neval is:      560
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        6
neval is:      560


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      560     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.319342      -1.14149     -0.732037      0.732037       972.502       973.234    
   2  0.519780     -0.654349     -0.419633      0.419633       976.693       977.113    
   3  0.849362     -0.163270     -0.104705      0.104705       979.000       979.105    
   4  0.435853     -0.830450     -0.532566      0.532566       987.486       988.018    
   5  0.553987     -0.590614     -0.378760      0.378760       991.024       991.402    
   6  0.444415     -0.810996     -0.520090      0.520090       992.426       992.946    
   7  0.148099      -1.90988      -1.22480       1.22480       997.343       998.568    
   8  0.485754     -0.722053     -0.463051      0.463051       998.046       998.509    
   9  0.705694     -0.348574     -0.223540      0.223540       998.173       998.397    
  10  0.506918     -0.679405     -0.435701      0.435701       999.006       999.442    
  11  0.972544     -0.278397E-01 -0.178536E-01  0.178536E-01   1004.22       1004.23    
  12  0.674190     -0.394243     -0.252827      0.252827       1004.16       1004.41    
  13  0.869777     -0.139519     -0.894731E-01  0.894731E-01   1004.51       1004.60    
  14  0.139493      -1.96974      -1.26319       1.26319       1008.83       1010.09    
  15  0.652784E-01  -2.72909      -1.75016       1.75016       1008.91       1010.66    
  16  0.777312     -0.251913     -0.161551      0.161551       1011.05       1011.21    
  17  0.361251      -1.01818     -0.652958      0.652958       1013.30       1013.95    
  18  0.748539     -0.289631     -0.185740      0.185740       1013.68       1013.87    
  19  0.729911E-01  -2.61742      -1.67855       1.67855       1015.25       1016.92    
  20  0.702321     -0.353365     -0.226613      0.226613       1015.25       1015.48    
  21  0.135132      -2.00150      -1.28356       1.28356       1015.36       1016.64    
  22  0.349199E-01  -3.35470      -2.15136       2.15136       1014.24       1016.39    
  23  0.648468     -0.433143     -0.277774      0.277774       1015.62       1015.90    
  24  0.602366     -0.506890     -0.325067      0.325067       1015.05       1015.37    
  25  0.794071     -0.230583     -0.147872      0.147872       1017.93       1018.08    
  26  0.204699      -1.58621      -1.01724       1.01724       1021.37       1022.39    
  27  0.429905     -0.844192     -0.541379      0.541379       1021.42       1021.96    
  28  0.464603     -0.766572     -0.491601      0.491601       1021.66       1022.15    
  29  0.230633E-01  -3.76951      -2.41738       2.41738       1022.43       1024.85    
  30  0.792818     -0.232162     -0.148885      0.148885       1023.31       1023.46    
  31  0.490012E-01  -3.01591      -1.93410       1.93410       1023.20       1025.13    
  32  0.137743      -1.98236      -1.27129       1.27129       1024.61       1025.88    
  33  0.794240     -0.230370     -0.147736      0.147736       1024.28       1024.43    
  34  0.352245      -1.04343     -0.669148      0.669148       1024.70       1025.37    
  35  0.265950      -1.32445     -0.849365      0.849365       1027.67       1028.52    
  36  0.322067      -1.13299     -0.726587      0.726587       1029.77       1030.50    
  37  0.226878      -1.48334     -0.951265      0.951265       1031.33       1032.28    
  38  0.767081     -0.265163     -0.170049      0.170049       1032.86       1033.03    
  39  0.729310     -0.315657     -0.202430      0.202430       1033.31       1033.51    
  40  0.835071     -0.180238     -0.115586      0.115586       1033.29       1033.40    
  41  0.926208     -0.766560E-01 -0.491593E-01  0.491593E-01   1034.48       1034.53    
  42  0.350408      -1.04866     -0.672502      0.672502       1033.93       1034.61    
  43  0.665315     -0.407495     -0.261326      0.261326       1035.62       1035.88    
  44  0.576307     -0.551115     -0.353429      0.353429       1036.39       1036.74    
  45  0.266516      -1.32232     -0.848002      0.848002       1037.83       1038.68    
  46  0.976995E-01  -2.32586      -1.49157       1.49157       1038.62       1040.11    
  47  0.364290      -1.00980     -0.647586      0.647586       1039.87       1040.51    
  48  0.725035     -0.321536     -0.206200      0.206200       1040.61       1040.82    
  49  0.586247     -0.534014     -0.342462      0.342462       979.350       979.692    
loop,thermsimp(1:2)        6  0.732037      0.419633    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    562       1030.70         68.17          1.19         39.31          2.01          0.05        110.73
Just calling func    0   0        110.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1030.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        6
neval is:      561
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        7
neval is:      561


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      561     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.498514     -0.696123     -0.446422      0.446422       972.502       972.948    
   2  0.994034     -0.598428E-02 -0.383771E-02  0.383771E-02   976.693       976.697    
   3  0.533427     -0.628434     -0.403014      0.403014       979.000       979.403    
   4  0.815383     -0.204098     -0.130888      0.130888       979.350       979.481    
   5  0.422638     -0.861239     -0.552311      0.552311       987.486       988.038    
   6  0.814548E-01  -2.50771      -1.60819       1.60819       991.024       992.632    
   7  0.930968     -0.715309E-01 -0.458726E-01  0.458726E-01   992.426       992.472    
   8  0.414595     -0.880454     -0.564633      0.564633       998.173       998.738    
   9  0.227405      -1.48102     -0.949776      0.949776       998.046       998.996    
  10  0.955550E-01  -2.34805      -1.50580       1.50580       997.343       998.849    
  11  0.496436     -0.700300     -0.449101      0.449101       999.006       999.455    
  12  0.212702      -1.54786     -0.992643      0.992643       1004.22       1005.21    
  13  0.467420     -0.760526     -0.487724      0.487724       1004.16       1004.65    
  14  0.361867      -1.01648     -0.651865      0.651865       1004.51       1005.16    
  15  0.805792     -0.215930     -0.138475      0.138475       1008.83       1008.97    
  16  0.618253     -0.480857     -0.308373      0.308373       1008.91       1009.22    
  17  0.216227      -1.53143     -0.982101      0.982101       1011.05       1012.03    
  18  0.957404     -0.435299E-01 -0.279157E-01  0.279157E-01   1013.68       1013.71    
  19  0.877320     -0.130884     -0.839356E-01  0.839356E-01   1013.30       1013.38    
  20  0.591871     -0.524466     -0.336339      0.336339       1015.05       1015.38    
  21  0.165399      -1.79939      -1.15395       1.15395       1015.25       1016.40    
  22  0.529387     -0.636035     -0.407888      0.407888       1015.62       1016.03    
  23  0.308990      -1.17445     -0.753171      0.753171       1014.24       1014.99    
  24  0.329749      -1.10942     -0.711471      0.711471       1015.36       1016.07    
  25  0.330974      -1.10572     -0.709093      0.709093       1015.25       1015.95    
  26  0.710511     -0.341771     -0.219177      0.219177       1017.93       1018.15    
  27  0.562565     -0.575248     -0.368906      0.368906       1021.42       1021.79    
  28  0.681192     -0.383911     -0.246202      0.246202       1021.66       1021.91    
  29  0.147638      -1.91299      -1.22680       1.22680       1021.37       1022.60    
  30  0.237501E-01  -3.74017      -2.39856       2.39856       1023.31       1025.71    
  31  0.948896     -0.524560E-01 -0.336400E-01  0.336400E-01   1024.28       1024.31    
  32  0.128502      -2.05181      -1.31582       1.31582       1022.43       1023.75    
  33  0.758876     -0.275917     -0.176945      0.176945       1023.20       1023.37    
  34  0.572943     -0.556970     -0.357184      0.357184       1024.70       1025.05    
  35  0.136273      -1.99309      -1.27817       1.27817       1024.61       1025.89    
  36  0.501767     -0.689620     -0.442252      0.442252       1027.67       1028.12    
  37  0.177599      -1.72823      -1.10831       1.10831       1029.77       1030.88    
  38  0.963106     -0.375922E-01 -0.241078E-01  0.241078E-01   1031.33       1031.35    
  39  0.643235     -0.441245     -0.282969      0.282969       1032.86       1033.15    
  40  0.878937     -0.129042     -0.827544E-01  0.827544E-01   1033.29       1033.37    
  41  0.730170     -0.314478     -0.201674      0.201674       1033.31       1033.51    
  42  0.417466     -0.873552     -0.560207      0.560207       1034.48       1035.04    
  43  0.826544     -0.190503     -0.122169      0.122169       1033.93       1034.06    
  44  0.309806      -1.17181     -0.751479      0.751479       1035.62       1036.37    
  45  0.342828      -1.07053     -0.686526      0.686526       1036.39       1037.07    
  46  0.913671     -0.902844E-01 -0.578992E-01  0.578992E-01   1037.83       1037.89    
  47  0.893616     -0.112479     -0.721328E-01  0.721328E-01   1038.62       1038.69    
  48  0.159213E-01  -4.14010      -2.65504       2.65504       1039.87       1042.52    
  49  0.662810     -0.411267     -0.263745      0.263745       1030.70       1030.97    
loop,thermsimp(1:2)        7  0.446422      0.383771E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    563       1044.18         68.13          1.18         39.29          2.10          0.04        110.74
Just calling func    0   0        110.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    564        993.42         68.14          1.18         39.25          2.16          0.05        110.77
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    993.42
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        7
neval is:      563
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        8
neval is:      563


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      563     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.655811     -0.421882     -0.270552      0.270552       972.502       972.772    
   2  0.170036      -1.77174      -1.13622       1.13622       976.693       977.829    
   3  0.827792     -0.188993     -0.121201      0.121201       979.000       979.121    
   4  0.207153      -1.57430      -1.00960       1.00960       979.350       980.360    
   5  0.203093      -1.59409      -1.02229       1.02229       987.486       988.508    
   6  0.477125     -0.739976     -0.474545      0.474545       992.426       992.901    
   7  0.158958      -1.83912      -1.17942       1.17942       991.024       992.203    
   8  0.864768     -0.145294     -0.931766E-01  0.931766E-01   998.173       998.266    
   9  0.144163      -1.93681      -1.24208       1.24208       997.343       998.585    
  10  0.845306     -0.168056     -0.107774      0.107774       998.046       998.154    
  11  0.872563     -0.136320     -0.874217E-01  0.874217E-01   999.006       999.093    
  12  0.730661     -0.313805     -0.201243      0.201243       1004.16       1004.36    
  13  0.699987     -0.356693     -0.228747      0.228747       1004.51       1004.74    
  14  0.406785     -0.899471     -0.576829      0.576829       1004.22       1004.79    
  15  0.426944     -0.851102     -0.545810      0.545810       1008.83       1009.37    
  16  0.378211     -0.972302     -0.623536      0.623536       1008.91       1009.54    
  17  0.248926      -1.39060     -0.891789      0.891789       1011.05       1011.94    
  18  0.545776     -0.605546     -0.388336      0.388336       1013.30       1013.69    
  19  0.234631      -1.44974     -0.929716      0.929716       1013.68       1014.61    
  20  0.562830     -0.574778     -0.368604      0.368604       1014.24       1014.60    
  21  0.461290     -0.773728     -0.496190      0.496190       1015.05       1015.54    
  22  0.198905      -1.61493      -1.03565       1.03565       1015.25       1016.28    
  23  0.970552     -0.298900E-01 -0.191684E-01  0.191684E-01   1015.62       1015.64    
  24  0.765063     -0.267798     -0.171738      0.171738       1015.36       1015.53    
  25  0.765092     -0.267759     -0.171713      0.171713       1015.25       1015.42    
  26  0.552634     -0.593059     -0.380328      0.380328       1017.93       1018.31    
  27  0.499844     -0.693459     -0.444714      0.444714       1021.42       1021.87    
  28  0.538549     -0.618877     -0.396885      0.396885       1021.66       1022.06    
  29  0.272839      -1.29888     -0.832966      0.832966       1021.37       1022.20    
  30  0.519799     -0.654313     -0.419610      0.419610       1023.20       1023.62    
  31  0.234113      -1.45195     -0.931134      0.931134       1022.43       1023.36    
  32  0.165221      -1.80047      -1.15464       1.15464       1024.28       1025.43    
  33  0.439081     -0.823072     -0.527835      0.527835       1024.70       1025.22    
  34  0.556464     -0.586153     -0.375899      0.375899       1023.31       1023.69    
  35  0.538293     -0.619352     -0.397190      0.397190       1024.61       1025.01    
  36  0.804136E-01  -2.52057      -1.61644       1.61644       1027.67       1029.29    
  37  0.992474     -0.755422E-02 -0.484451E-02  0.484451E-02   1029.77       1029.78    
  38  0.465384     -0.764893     -0.490525      0.490525       1030.70       1031.19    
  39  0.162064      -1.81977      -1.16701       1.16701       1031.33       1032.50    
  40  0.232578      -1.45853     -0.935354      0.935354       1032.86       1033.80    
  41  0.894204     -0.111821     -0.717107E-01  0.717107E-01   1033.29       1033.36    
  42  0.669878     -0.400659     -0.256942      0.256942       1033.31       1033.57    
  43  0.669920     -0.400598     -0.256903      0.256903       1033.93       1034.19    
  44  0.839554     -0.174884     -0.112153      0.112153       1034.48       1034.60    
  45  0.417147     -0.874317     -0.560698      0.560698       1035.62       1036.18    
  46  0.907881     -0.966420E-01 -0.619764E-01  0.619764E-01   1036.39       1036.45    
  47  0.830844     -0.185313     -0.118841      0.118841       1037.83       1037.95    
  48  0.954023     -0.470672E-01 -0.301841E-01  0.301841E-01   1038.62       1038.65    
  49  0.118851      -2.12988      -1.36589       1.36589       993.422       994.788    
loop,thermsimp(1:2)        8  0.270552       1.13622    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    565       1025.08         68.14          1.18         39.38          1.67          0.05        110.42
Just calling func    0   0        110.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1025.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        8
neval is:      564
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:        9
neval is:      564


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      564     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.594554E-01  -2.82253      -1.81008       1.81008       972.502       974.312    
   2  0.873079     -0.135729     -0.870429E-01  0.870429E-01   976.693       976.780    
   3  0.469124     -0.756889     -0.485392      0.485392       979.000       979.486    
   4  0.949964     -0.513308E-01 -0.329183E-01  0.329183E-01   979.350       979.383    
   5  0.349597      -1.05098     -0.673989      0.673989       987.486       988.160    
   6  0.895827     -0.110008     -0.705482E-01  0.705482E-01   991.024       991.094    
   7  0.975440E-01  -2.32745      -1.49259       1.49259       992.426       993.919    
   8  0.599340     -0.511926     -0.328297      0.328297       993.422       993.750    
   9  0.187990      -1.67136      -1.07184       1.07184       998.046       999.118    
  10  0.916669     -0.870091E-01 -0.557988E-01  0.557988E-01   998.173       998.229    
  11  0.510577     -0.672214     -0.431090      0.431090       997.343       997.774    
  12  0.297437      -1.21255     -0.777607      0.777607       999.006       999.784    
  13  0.312450      -1.16331     -0.746028      0.746028       1004.16       1004.91    
  14  0.328249      -1.11398     -0.714396      0.714396       1004.51       1005.22    
  15  0.382740     -0.960401     -0.615903      0.615903       1004.22       1004.83    
  16  0.971661     -0.287487E-01 -0.184365E-01  0.184365E-01   1008.83       1008.85    
  17  0.630321     -0.461526     -0.295976      0.295976       1008.91       1009.21    
  18  0.594925     -0.519319     -0.333039      0.333039       1011.05       1011.38    
  19  0.212318      -1.54967     -0.993800      0.993800       1013.30       1014.29    
  20  0.170623      -1.76830      -1.13401       1.13401       1014.24       1015.37    
  21  0.573104E-02  -5.16186      -3.31029       3.31029       1013.68       1016.99    
  22  0.891694     -0.114632     -0.735132E-01  0.735132E-01   1015.25       1015.32    
  23  0.170489      -1.76909      -1.13451       1.13451       1015.36       1016.49    
  24  0.781222     -0.246896     -0.158334      0.158334       1015.05       1015.21    
  25  0.417007     -0.874652     -0.560913      0.560913       1015.62       1016.18    
  26  0.250044      -1.38612     -0.888916      0.888916       1015.25       1016.13    
  27  0.198353      -1.61771      -1.03743       1.03743       1017.93       1018.97    
  28  0.292770      -1.22837     -0.787749      0.787749       1021.42       1022.21    
  29  0.459054     -0.778587     -0.499307      0.499307       1021.66       1022.16    
  30  0.533690     -0.627940     -0.402697      0.402697       1021.37       1021.77    
  31  0.269817      -1.31001     -0.840108      0.840108       1022.43       1023.27    
  32  0.227086      -1.48243     -0.950677      0.950677       1023.20       1024.15    
  33  0.596603     -0.516504     -0.331233      0.331233       1023.31       1023.64    
  34  0.595170     -0.518907     -0.332774      0.332774       1024.61       1024.95    
  35  0.184520      -1.69000      -1.08379       1.08379       1024.70       1025.78    
  36  0.445979     -0.807483     -0.517837      0.517837       1024.28       1024.80    
  37  0.979277E-01  -2.32353      -1.49007       1.49007       1027.67       1029.16    
  38  0.406589E-01  -3.20254      -2.05378       2.05378       1029.77       1031.82    
  39  0.414762     -0.880052     -0.564376      0.564376       1030.70       1031.27    
  40  0.309816      -1.17178     -0.751459      0.751459       1031.33       1032.08    
  41  0.623061     -0.473111     -0.303405      0.303405       1033.29       1033.59    
  42  0.472641     -0.749420     -0.480602      0.480602       1033.31       1033.79    
  43  0.609211     -0.495591     -0.317821      0.317821       1032.86       1033.18    
  44  0.723486     -0.323674     -0.207572      0.207572       1033.93       1034.14    
  45  0.412059     -0.886590     -0.568568      0.568568       1034.48       1035.05    
  46  0.854244     -0.157538     -0.101029      0.101029       1035.62       1035.72    
  47  0.423586     -0.858998     -0.550874      0.550874       1036.39       1036.94    
  48  0.251855E-01  -3.68149      -2.36093       2.36093       1037.83       1040.19    
  49  0.941281     -0.605130E-01 -0.388069E-01  0.388069E-01   1025.08       1025.12    
loop,thermsimp(1:2)        9   1.81008      0.870429E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    566        993.49         68.21          1.18         39.40          1.71          0.04        110.55
Just calling func    0   0        110.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    993.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:        9
neval is:      565
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       10
neval is:      565


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      565     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.827663     -0.189149     -0.121301      0.121301       972.502       972.623    
   2  0.452148     -0.793745     -0.509027      0.509027       976.693       977.202    
   3  0.342564      -1.07130     -0.687021      0.687021       979.350       980.037    
   4  0.499587     -0.693973     -0.445043      0.445043       979.000       979.445    
   5  0.403117     -0.908528     -0.582638      0.582638       987.486       988.068    
   6  0.984989     -0.151245E-01 -0.969930E-02  0.969930E-02   991.024       991.033    
   7  0.203293      -1.59311      -1.02166       1.02166       993.422       994.444    
   8  0.492929     -0.707391     -0.453649      0.453649       992.426       992.880    
   9  0.937961     -0.640474E-01 -0.410735E-01  0.410735E-01   997.343       997.384    
  10  0.534766     -0.625926     -0.401405      0.401405       998.173       998.575    
  11  0.782383     -0.245411     -0.157382      0.157382       998.046       998.203    
  12  0.718051     -0.331215     -0.212408      0.212408       999.006       999.218    
  13  0.997839E-01  -2.30475      -1.47803       1.47803       1004.22       1005.69    
  14  0.320108E-02  -5.74427      -3.68379       3.68379       1004.16       1007.85    
  15  0.378149     -0.972466     -0.623641      0.623641       1004.51       1005.13    
  16  0.511000     -0.671385     -0.430558      0.430558       1008.83       1009.26    
  17  0.499288     -0.694572     -0.445428      0.445428       1008.91       1009.36    
  18  0.263320      -1.33438     -0.855738      0.855738       1011.05       1011.91    
  19  0.218681      -1.52014     -0.974865      0.974865       1013.30       1014.28    
  20  0.989299     -0.107588E-01 -0.689958E-02  0.689958E-02   1015.05       1015.05    
  21  0.544363     -0.608138     -0.389998      0.389998       1015.25       1015.64    
  22  0.232624      -1.45833     -0.935226      0.935226       1014.24       1015.17    
  23  0.807472     -0.213847     -0.137140      0.137140       1015.25       1015.38    
  24  0.747936     -0.290438     -0.186257      0.186257       1015.62       1015.81    
  25  0.973052     -0.273177E-01 -0.175188E-01  0.175188E-01   1015.36       1015.37    
  26  0.803642     -0.218602     -0.140189      0.140189       1013.68       1013.82    
  27  0.807046     -0.214375     -0.137478      0.137478       1017.93       1018.07    
  28  0.729796     -0.314990     -0.202002      0.202002       1021.37       1021.57    
  29  0.804480     -0.217560     -0.139521      0.139521       1021.66       1021.80    
  30  0.539208     -0.617653     -0.396100      0.396100       1021.42       1021.82    
  31  0.787640E-01  -2.54130      -1.62973       1.62973       1022.43       1024.06    
  32  0.808263     -0.212867     -0.136511      0.136511       1023.31       1023.45    
  33  0.302610E-01  -3.49790      -2.24319       2.24319       1023.20       1025.44    
  34  0.785467     -0.241477     -0.154859      0.154859       1024.28       1024.43    
  35  0.608883     -0.496129     -0.318167      0.318167       1024.61       1024.93    
  36  0.783079     -0.244522     -0.156811      0.156811       1025.08       1025.24    
  37  0.279094      -1.27621     -0.818430      0.818430       1024.70       1025.52    
  38  0.898865     -0.106623     -0.683769E-01  0.683769E-01   1027.67       1027.74    
  39  0.975405     -0.249023E-01 -0.159698E-01  0.159698E-01   1030.70       1030.72    
  40  0.118083      -2.13637      -1.37005       1.37005       1029.77       1031.14    
  41  0.575516     -0.552488     -0.354310      0.354310       1031.33       1031.69    
  42  0.959765E-01  -2.34365      -1.50298       1.50298       1032.86       1034.37    
  43  0.584404     -0.537162     -0.344481      0.344481       1033.29       1033.63    
  44  0.706616     -0.347267     -0.222702      0.222702       1033.31       1033.53    
  45  0.391448     -0.937903     -0.601475      0.601475       1033.93       1034.54    
  46  0.885154     -0.121993     -0.782341E-01  0.782341E-01   1034.48       1034.56    
  47  0.167335      -1.78776      -1.14649       1.14649       1035.62       1036.77    
  48  0.605294     -0.502041     -0.321958      0.321958       1036.39       1036.71    
  49  0.391980     -0.936546     -0.600605      0.600605       993.487       994.088    
loop,thermsimp(1:2)       10  0.121301      0.509027    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    567        973.37         68.17          1.18         39.39          1.62          0.05        110.41
Just calling func    0   0        110.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    568       1192.97         68.14          1.18         39.41          1.64          0.05        110.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    973.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       10
neval is:      567
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       11
neval is:      567


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      567     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.955582E-01  -2.34802      -1.50578       1.50578       972.502       974.008    
   2  0.122967      -2.09584      -1.34406       1.34406       976.693       978.037    
   3  0.876420     -0.131909     -0.845932E-01  0.845932E-01   979.000       979.085    
   4  0.591835     -0.524527     -0.336378      0.336378       979.350       979.686    
   5  0.641939     -0.443261     -0.284263      0.284263       987.486       987.770    
   6  0.786504     -0.240157     -0.154012      0.154012       991.024       991.178    
   7  0.492484E-02  -5.31346      -3.40752       3.40752       992.426       995.834    
   8  0.914068     -0.898504E-01 -0.576209E-01  0.576209E-01   993.487       993.545    
   9  0.736673     -0.305611     -0.195988      0.195988       993.422       993.618    
  10  0.523044     -0.648089     -0.415618      0.415618       997.343       997.758    
  11  0.119978      -2.12045      -1.35984       1.35984       998.046       999.406    
  12  0.381227     -0.964359     -0.618442      0.618442       998.173       998.792    
  13  0.500246     -0.692656     -0.444199      0.444199       999.006       999.450    
  14  0.836521     -0.178503     -0.114474      0.114474       1004.51       1004.62    
  15  0.812280     -0.207910     -0.133332      0.133332       1004.22       1004.35    
  16  0.403870E-01  -3.20925      -2.05809       2.05809       1004.16       1006.22    
  17  0.501799E-01  -2.99214      -1.91885       1.91885       1008.83       1010.75    
  18  0.632858     -0.457509     -0.293400      0.293400       1008.91       1009.21    
  19  0.400572     -0.914862     -0.586699      0.586699       1011.05       1011.64    
  20  0.824187     -0.193358     -0.124000      0.124000       1013.68       1013.81    
  21  0.671246     -0.398620     -0.255634      0.255634       1013.30       1013.56    
  22  0.498354     -0.696444     -0.446629      0.446629       1015.05       1015.49    
  23  0.117273E-01  -4.44584      -2.85111       2.85111       1014.24       1017.09    
  24  0.890372     -0.116116     -0.744647E-01  0.744647E-01   1015.36       1015.43    
  25  0.215534      -1.53464     -0.984161      0.984161       1015.25       1016.23    
  26  0.588967     -0.529385     -0.339494      0.339494       1015.25       1015.59    
  27  0.429469     -0.845206     -0.542029      0.542029       1015.62       1016.16    
  28  0.238775      -1.43223     -0.918488      0.918488       1017.93       1018.85    
  29  0.682393     -0.382149     -0.245071      0.245071       1021.37       1021.62    
  30  0.346635      -1.05948     -0.679445      0.679445       1021.66       1022.34    
  31  0.861347     -0.149257     -0.957186E-01  0.957186E-01   1021.42       1021.52    
  32  0.185394E-01  -3.98786      -2.55741       2.55741       1023.31       1025.87    
  33  0.487094     -0.719297     -0.461284      0.461284       1022.43       1022.89    
  34  0.981226     -0.189524E-01 -0.121542E-01  0.121542E-01   1024.28       1024.29    
  35  0.250296      -1.38511     -0.888270      0.888270       1024.61       1025.50    
  36  0.587049     -0.532647     -0.341586      0.341586       1025.08       1025.42    
  37  0.724372     -0.322450     -0.206787      0.206787       1023.20       1023.40    
  38  0.292752      -1.22843     -0.787790      0.787790       1024.70       1025.48    
  39  0.555671     -0.587578     -0.376813      0.376813       1027.67       1028.05    
  40  0.785129     -0.241908     -0.155135      0.155135       1030.70       1030.86    
  41  0.389537     -0.942796     -0.604613      0.604613       1029.77       1030.37    
  42  0.573933     -0.555243     -0.356076      0.356076       1031.33       1031.69    
  43  0.373262     -0.985474     -0.631983      0.631983       1033.31       1033.94    
  44  0.592183     -0.523940     -0.336002      0.336002       1033.29       1033.62    
  45  0.512864     -0.667744     -0.428223      0.428223       1032.86       1033.29    
  46  0.333672      -1.09760     -0.703888      0.703888       1033.93       1034.64    
  47  0.597892E-01  -2.81693      -1.80649       1.80649       1034.48       1036.29    
  48  0.439231     -0.822731     -0.527616      0.527616       1036.39       1036.91    
  49  0.412917     -0.884508     -0.567233      0.567233       973.368       973.935    
loop,thermsimp(1:2)       11   1.50578       1.34406    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    569        972.56         68.18          1.18         39.58          1.48          0.05        110.47
Just calling func    0   0        110.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    570        995.98         68.27          1.17         39.40          1.66          0.05        110.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    972.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       11
neval is:      569
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       12
neval is:      569


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      569     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396560     -0.924928     -0.593155      0.593155       973.368       973.961    
   2  0.703865     -0.351168     -0.225204      0.225204       972.502       972.727    
   3  0.844348     -0.169190     -0.108502      0.108502       976.693       976.801    
   4  0.960610     -0.401869E-01 -0.257718E-01  0.257718E-01   979.000       979.026    
   5  0.168853      -1.77873      -1.14070       1.14070       979.350       980.491    
   6  0.833655     -0.181936     -0.116675      0.116675       987.486       987.603    
   7  0.789704     -0.236097     -0.151409      0.151409       991.024       991.175    
   8  0.153789      -1.87217      -1.20062       1.20062       993.487       994.688    
   9  0.314090      -1.15808     -0.742672      0.742672       993.422       994.165    
  10  0.487878     -0.717690     -0.460254      0.460254       992.426       992.887    
  11  0.732287     -0.311583     -0.199818      0.199818       997.343       997.543    
  12  0.461391     -0.773509     -0.496050      0.496050       998.173       998.669    
  13  0.403850     -0.906711     -0.581472      0.581472       998.046       998.627    
  14  0.216009      -1.53243     -0.982747      0.982747       999.006       999.989    
  15  0.809376     -0.211492     -0.135629      0.135629       1004.22       1004.35    
  16  0.367688      -1.00052     -0.641631      0.641631       1004.51       1005.15    
  17  0.302386      -1.19605     -0.767025      0.767025       1004.16       1004.93    
  18  0.641584     -0.443815     -0.284618      0.284618       1008.91       1009.20    
  19  0.993092     -0.693165E-02 -0.444526E-02  0.444526E-02   1008.83       1008.83    
  20  0.549268     -0.599169     -0.384246      0.384246       1011.05       1011.44    
  21  0.403196     -0.908332     -0.582512      0.582512       1013.30       1013.88    
  22  0.595071     -0.519074     -0.332881      0.332881       1013.68       1014.02    
  23  0.462782     -0.770499     -0.494120      0.494120       1015.36       1015.85    
  24  0.913792     -0.901518E-01 -0.578142E-01  0.578142E-01   1015.05       1015.10    
  25  0.366232      -1.00449     -0.644177      0.644177       1015.25       1015.89    
  26  0.705585     -0.348728     -0.223638      0.223638       1015.62       1015.84    
  27  0.945043E-02  -4.66169      -2.98954       2.98954       1015.25       1018.24    
  28  0.200819      -1.60535      -1.02951       1.02951       1014.24       1015.26    
  29  0.232883      -1.45722     -0.934512      0.934512       1017.93       1018.86    
  30  0.283818      -1.25942     -0.807665      0.807665       1021.42       1022.23    
  31  0.223854      -1.49676     -0.959871      0.959871       1021.37       1022.33    
  32  0.108771      -2.21851      -1.42273       1.42273       1021.66       1023.09    
  33  0.410706     -0.889879     -0.570678      0.570678       1022.43       1023.00    
  34  0.283322      -1.26117     -0.808788      0.808788       1023.20       1024.01    
  35  0.104435      -2.25919      -1.44882       1.44882       1024.28       1025.73    
  36  0.558117     -0.583186     -0.373996      0.373996       1025.08       1025.45    
  37  0.581118     -0.542801     -0.348097      0.348097       1024.70       1025.04    
  38  0.580011     -0.544708     -0.349321      0.349321       1024.61       1024.96    
  39  0.604547     -0.503275     -0.322749      0.322749       1023.31       1023.64    
  40  0.443327     -0.813447     -0.521662      0.521662       1027.67       1028.20    
  41  0.844118     -0.169463     -0.108676      0.108676       1029.77       1029.88    
  42  0.119401      -2.12527      -1.36293       1.36293       1030.70       1032.07    
  43  0.216902      -1.52831     -0.980101      0.980101       1031.33       1032.31    
  44  0.287442      -1.24673     -0.799528      0.799528       1032.86       1033.66    
  45  0.559105     -0.581418     -0.372862      0.372862       1033.29       1033.66    
  46  0.729498     -0.315399     -0.202265      0.202265       1033.31       1033.51    
  47  0.737495     -0.304496     -0.195272      0.195272       1033.93       1034.13    
  48  0.450081     -0.798327     -0.511966      0.511966       1034.48       1034.99    
  49  0.550480E-01  -2.89955      -1.85948       1.85948       972.557       974.417    
loop,thermsimp(1:2)       12  0.593155      0.225204    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    571        971.22         68.18          1.20         39.64          1.46          0.06        110.53
Just calling func    0   0        110.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    572       1015.03         68.26          1.19         39.23          1.84          0.05        110.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    971.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       12
neval is:      571
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       13
neval is:      571


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      571     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.111913      -2.19003      -1.40446       1.40446       972.502       973.906    
   2  0.516622     -0.660444     -0.423542      0.423542       973.368       973.792    
   3  0.555949E-02  -5.19225      -3.32978       3.32978       972.557       975.887    
   4  0.266506      -1.32236     -0.848027      0.848027       976.693       977.541    
   5  0.211734      -1.55243     -0.995568      0.995568       979.000       979.996    
   6  0.102202      -2.28080      -1.46267       1.46267       979.350       980.813    
   7  0.442793     -0.814653     -0.522436      0.522436       987.486       988.008    
   8  0.711542     -0.340321     -0.218248      0.218248       991.024       991.242    
   9  0.798402     -0.225143     -0.144384      0.144384       992.426       992.571    
  10  0.812098     -0.208134     -0.133476      0.133476       993.422       993.556    
  11  0.343327      -1.06907     -0.685593      0.685593       993.487       994.173    
  12  0.545340     -0.606346     -0.388849      0.388849       997.343       997.732    
  13  0.806270E-01  -2.51792      -1.61474       1.61474       998.046       999.661    
  14  0.715732     -0.334450     -0.214482      0.214482       998.173       998.388    
  15  0.566885     -0.567600     -0.364001      0.364001       999.006       999.370    
  16  0.393822     -0.931856     -0.597598      0.597598       1004.22       1004.81    
  17  0.904317E-01  -2.40316      -1.54114       1.54114       1004.16       1005.70    
  18  0.201517      -1.60188      -1.02728       1.02728       1004.51       1005.54    
  19  0.692973E-01  -2.66935      -1.71185       1.71185       1008.83       1010.54    
  20  0.919351E-01  -2.38667      -1.53057       1.53057       1008.91       1010.44    
  21  0.938091     -0.639078E-01 -0.409840E-01  0.409840E-01   1011.05       1011.09    
  22  0.749244     -0.288691     -0.185137      0.185137       1013.30       1013.49    
  23  0.734981     -0.307911     -0.197463      0.197463       1013.68       1013.88    
  24  0.492232     -0.708804     -0.454555      0.454555       1015.05       1015.50    
  25  0.313923      -1.15861     -0.743013      0.743013       1014.24       1014.98    
  26  0.684031     -0.379752     -0.243535      0.243535       1015.62       1015.86    
  27  0.828023     -0.188714     -0.121022      0.121022       1015.36       1015.48    
  28  0.192782      -1.64619      -1.05570       1.05570       1015.25       1016.31    
  29  0.559672E-01  -2.88299      -1.84886       1.84886       1015.25       1017.09    
  30  0.464743     -0.766271     -0.491408      0.491408       1017.93       1018.42    
  31  0.999430     -0.569738E-03 -0.365372E-03  0.365372E-03   1021.42       1021.42    
  32  0.845532     -0.167789     -0.107603      0.107603       1021.37       1021.48    
  33  0.972267     -0.281252E-01 -0.180367E-01  0.180367E-01   1022.43       1022.45    
  34  0.656486     -0.420854     -0.269893      0.269893       1021.66       1021.93    
  35  0.702465     -0.353159     -0.226480      0.226480       1023.31       1023.54    
  36  0.420530     -0.866239     -0.555518      0.555518       1023.20       1023.75    
  37  0.455258     -0.786891     -0.504632      0.504632       1024.61       1025.12    
  38  0.217358      -1.52621     -0.978756      0.978756       1024.70       1025.68    
  39  0.571489     -0.559510     -0.358813      0.358813       1025.08       1025.44    
  40  0.366699      -1.00321     -0.643359      0.643359       1024.28       1024.92    
  41  0.610783     -0.493014     -0.316169      0.316169       1027.67       1027.99    
  42  0.134725      -2.00452      -1.28550       1.28550       1029.77       1031.06    
  43  0.803161     -0.219200     -0.140573      0.140573       1030.70       1030.84    
  44  0.483529     -0.726644     -0.465996      0.465996       1031.33       1031.80    
  45  0.468984     -0.757186     -0.485582      0.485582       1033.31       1033.80    
  46  0.368550     -0.998178     -0.640130      0.640130       1033.29       1033.93    
  47  0.835957     -0.179179     -0.114907      0.114907       1032.86       1032.98    
  48  0.572594     -0.557578     -0.357574      0.357574       1033.93       1034.29    
  49  0.176215      -1.73605      -1.11333       1.11333       971.219       972.332    
loop,thermsimp(1:2)       13   1.40446      0.423542    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    573        984.00         68.18          1.18         39.32          1.83          0.05        110.56
Just calling func    0   0        110.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    984.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       13
neval is:      572
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       14
neval is:      572


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      572     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.664309     -0.409008     -0.262296      0.262296       971.219       971.481    
   2  0.303551      -1.19221     -0.764560      0.764560       973.368       974.133    
   3  0.848899     -0.163815     -0.105054      0.105054       972.502       972.607    
   4  0.263470      -1.33382     -0.855374      0.855374       972.557       973.413    
   5  0.990138     -0.991125E-02 -0.635607E-02  0.635607E-02   976.693       976.699    
   6  0.685234     -0.377995     -0.242407      0.242407       979.000       979.243    
   7  0.448908     -0.800937     -0.513640      0.513640       979.350       979.864    
   8  0.216869      -1.52846     -0.980201      0.980201       987.486       988.466    
   9  0.878080     -0.130018     -0.833801E-01  0.833801E-01   991.024       991.107    
  10  0.255262      -1.36547     -0.875671      0.875671       992.426       993.302    
  11  0.907613     -0.969375E-01 -0.621658E-01  0.621658E-01   993.422       993.484    
  12  0.256320      -1.36133     -0.873018      0.873018       993.487       994.360    
  13  0.443010     -0.814164     -0.522122      0.522122       997.343       997.865    
  14  0.213756      -1.54292     -0.989471      0.989471       998.173       999.163    
  15  0.757045     -0.278332     -0.178494      0.178494       999.006       999.185    
  16  0.981457     -0.187170E-01 -0.120032E-01  0.120032E-01   998.046       998.058    
  17  0.289564      -1.23938     -0.794812      0.794812       1004.22       1005.01    
  18  0.687754     -0.374325     -0.240054      0.240054       1004.51       1004.75    
  19  0.541687     -0.613066     -0.393158      0.393158       1004.16       1004.55    
  20  0.535198     -0.625119     -0.400888      0.400888       1008.91       1009.31    
  21  0.452776     -0.792358     -0.508138      0.508138       1008.83       1009.34    
  22  0.320381      -1.13824     -0.729955      0.729955       1011.05       1011.78    
  23  0.849196     -0.163465     -0.104830      0.104830       1013.30       1013.41    
  24  0.348740      -1.05343     -0.675562      0.675562       1013.68       1014.36    
  25  0.303440      -1.19257     -0.764794      0.764794       1014.24       1015.00    
  26  0.776848     -0.252511     -0.161935      0.161935       1015.36       1015.52    
  27  0.345847      -1.06176     -0.680903      0.680903       1015.05       1015.73    
  28  0.835828E-01  -2.48192      -1.59165       1.59165       1015.62       1017.21    
  29  0.855947     -0.155547     -0.997521E-01  0.997521E-01   1015.25       1015.35    
  30  0.633563     -0.456395     -0.292685      0.292685       1015.25       1015.54    
  31  0.632570     -0.457965     -0.293692      0.293692       1017.93       1018.22    
  32  0.747835     -0.290573     -0.186344      0.186344       1021.42       1021.61    
  33  0.634083     -0.455576     -0.292160      0.292160       1021.37       1021.66    
  34  0.449530     -0.799553     -0.512752      0.512752       1021.66       1022.18    
  35  0.660356     -0.414976     -0.266124      0.266124       1022.43       1022.70    
  36  0.963301     -0.373894E-01 -0.239778E-01  0.239778E-01   1023.31       1023.34    
  37  0.737146     -0.304969     -0.195576      0.195576       1023.20       1023.39    
  38  0.856727     -0.154637     -0.991681E-01  0.991681E-01   1024.28       1024.38    
  39  0.873237     -0.135549     -0.869272E-01  0.869272E-01   1024.61       1024.70    
  40  0.377220     -0.974928     -0.625220      0.625220       1025.08       1025.70    
  41  0.928026     -0.746954E-01 -0.479020E-01  0.479020E-01   1024.70       1024.74    
  42  0.255806      -1.36334     -0.874305      0.874305       1027.67       1028.55    
  43  0.873571     -0.135166     -0.866818E-01  0.866818E-01   1030.70       1030.79    
  44  0.570864     -0.560604     -0.359515      0.359515       1029.77       1030.13    
  45  0.201702      -1.60097      -1.02670       1.02670       1031.33       1032.36    
  46  0.685272     -0.377939     -0.242372      0.242372       1032.86       1033.11    
  47  0.548426     -0.600703     -0.385230      0.385230       1033.31       1033.70    
  48  0.775838     -0.253811     -0.162769      0.162769       1033.29       1033.45    
  49  0.109543      -2.21144      -1.41819       1.41819       984.003       985.421    
loop,thermsimp(1:2)       14  0.262296      0.764560    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    574       1013.75         68.15          1.16         39.41          1.86          0.05        110.62
Just calling func    0   0        110.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1013.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       14
neval is:      573
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       15
neval is:      573


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      573     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.463412     -0.769138     -0.493247      0.493247       971.219       971.712    
   2  0.160227      -1.83116      -1.17432       1.17432       972.502       973.676    
   3  0.853894     -0.157949     -0.101292      0.101292       972.557       972.659    
   4  0.103803      -2.26526      -1.45271       1.45271       973.368       974.821    
   5  0.456048     -0.785158     -0.503520      0.503520       976.693       977.196    
   6  0.113319      -2.17755      -1.39646       1.39646       979.000       980.397    
   7  0.275426      -1.28944     -0.826913      0.826913       979.350       980.177    
   8  0.428725     -0.846939     -0.543141      0.543141       984.003       984.546    
   9  0.448371E-01  -3.10472      -1.99105       1.99105       987.486       989.477    
  10  0.473359     -0.747902     -0.479628      0.479628       991.024       991.503    
  11  0.414774     -0.880022     -0.564356      0.564356       992.426       992.991    
  12  0.210192      -1.55974      -1.00026       1.00026       993.422       994.422    
  13  0.533901E-02  -5.23271      -3.35573       3.35573       993.487       996.843    
  14  0.681826     -0.382981     -0.245605      0.245605       997.343       997.588    
  15  0.534912     -0.625652     -0.401230      0.401230       998.046       998.447    
  16  0.243296      -1.41348     -0.906460      0.906460       998.173       999.080    
  17  0.235331      -1.44676     -0.927805      0.927805       999.006       999.934    
  18  0.904269     -0.100628     -0.645325E-01  0.645325E-01   1004.16       1004.23    
  19  0.712453     -0.339041     -0.217426      0.217426       1004.51       1004.73    
  20  0.279222      -1.27575     -0.818134      0.818134       1004.22       1005.03    
  21  0.425401     -0.854723     -0.548133      0.548133       1008.91       1009.46    
  22  0.149240      -1.90220      -1.21988       1.21988       1008.83       1010.05    
  23  0.914715     -0.891432E-01 -0.571674E-01  0.571674E-01   1011.05       1011.11    
  24  0.773633     -0.256658     -0.164594      0.164594       1013.30       1013.47    
  25  0.626954     -0.466882     -0.299411      0.299411       1013.68       1013.98    
  26  0.956871     -0.440872E-01 -0.282730E-01  0.282730E-01   1014.24       1014.26    
  27  0.862288     -0.148166     -0.950188E-01  0.950188E-01   1015.25       1015.34    
  28  0.850831E-01  -2.46413      -1.58024       1.58024       1015.36       1016.94    
  29  0.886610     -0.120350     -0.771801E-01  0.771801E-01   1015.25       1015.32    
  30  0.248521      -1.39223     -0.892832      0.892832       1015.05       1015.94    
  31  0.215024      -1.53701     -0.985679      0.985679       1015.62       1016.61    
  32  0.479227     -0.735582     -0.471727      0.471727       1017.93       1018.40    
  33  0.716971     -0.332720     -0.213373      0.213373       1021.42       1021.64    
  34  0.920863     -0.824436E-01 -0.528709E-01  0.528709E-01   1021.37       1021.42    
  35  0.572449     -0.557832     -0.357736      0.357736       1021.66       1022.02    
  36  0.998388     -0.161336E-02 -0.103465E-02  0.103465E-02   1022.43       1022.43    
  37  0.282500E-01  -3.56666      -2.28729       2.28729       1023.31       1025.60    
  38  0.237268      -1.43857     -0.922550      0.922550       1023.20       1024.12    
  39  0.374866     -0.981187     -0.629234      0.629234       1024.28       1024.91    
  40  0.244183      -1.40984     -0.904125      0.904125       1024.61       1025.52    
  41  0.684922E-01  -2.68104      -1.71934       1.71934       1024.70       1026.42    
  42  0.237540      -1.43742     -0.921813      0.921813       1025.08       1026.00    
  43  0.475630     -0.743116     -0.476559      0.476559       1027.67       1028.15    
  44  0.892348     -0.113899     -0.730431E-01  0.730431E-01   1029.77       1029.84    
  45  0.483065     -0.727605     -0.466612      0.466612       1030.70       1031.17    
  46  0.625966E-01  -2.77104      -1.77707       1.77707       1031.33       1033.11    
  47  0.940050     -0.618222E-01 -0.396465E-01  0.396465E-01   1032.86       1032.90    
  48  0.990581     -0.946392E-02 -0.606920E-02  0.606920E-02   1033.29       1033.29    
  49  0.688873     -0.372698     -0.239011      0.239011       1013.75       1013.99    
loop,thermsimp(1:2)       15  0.493247       1.17432    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    575       1062.36         68.16          1.17         39.62          1.74          0.05        110.75
Just calling func    0   0        110.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    576        997.18         68.15          1.20         39.40          1.72          0.05        110.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    997.18
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       15
neval is:      575
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       16
neval is:      575


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      575     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.974349     -0.259858E-01 -0.166646E-01  0.166646E-01   971.219       971.235    
   2  0.537427     -0.620963     -0.398222      0.398222       972.557       972.956    
   3  0.840974     -0.173194     -0.111069      0.111069       972.502       972.613    
   4  0.123023      -2.09539      -1.34377       1.34377       973.368       974.712    
   5  0.327258      -1.11701     -0.716334      0.716334       976.693       977.409    
   6  0.672878     -0.396192     -0.254077      0.254077       979.350       979.604    
   7  0.397133     -0.923484     -0.592229      0.592229       979.000       979.592    
   8  0.514185     -0.665171     -0.426573      0.426573       984.003       984.429    
   9  0.400519     -0.914994     -0.586784      0.586784       987.486       988.073    
  10  0.497566     -0.698028     -0.447644      0.447644       991.024       991.471    
  11  0.430242     -0.843407     -0.540875      0.540875       992.426       992.967    
  12  0.145298      -1.92897      -1.23705       1.23705       993.422       994.659    
  13  0.109553      -2.21135      -1.41814       1.41814       993.487       994.906    
  14  0.661891     -0.412654     -0.264634      0.264634       997.343       997.607    
  15  0.229062      -1.47376     -0.945122      0.945122       998.046       998.991    
  16  0.456047     -0.785159     -0.503521      0.503521       998.173       998.677    
  17  0.725894     -0.320351     -0.205441      0.205441       999.006       999.212    
  18  0.174422      -1.74628      -1.11989       1.11989       1004.16       1005.28    
  19  0.576349     -0.551042     -0.353382      0.353382       1004.51       1004.86    
  20  0.774951     -0.254955     -0.163502      0.163502       1004.22       1004.38    
  21  0.611117     -0.492466     -0.315818      0.315818       1008.91       1009.23    
  22  0.251934      -1.37859     -0.884085      0.884085       1008.83       1009.71    
  23  0.977095     -0.231713E-01 -0.148597E-01  0.148597E-01   1011.05       1011.07    
  24  0.343910      -1.06738     -0.684506      0.684506       1013.30       1013.99    
  25  0.475522     -0.743343     -0.476704      0.476704       1013.68       1014.16    
  26  0.411924     -0.886917     -0.568778      0.568778       1013.75       1014.32    
  27  0.989443     -0.106132E-01 -0.680622E-02  0.680622E-02   1014.24       1014.24    
  28  0.413642     -0.882754     -0.566109      0.566109       1015.25       1015.81    
  29  0.125928      -2.07205      -1.32880       1.32880       1015.25       1016.58    
  30  0.440364     -0.820153     -0.525963      0.525963       1015.05       1015.57    
  31  0.760094E-01  -2.57690      -1.65256       1.65256       1015.62       1017.27    
  32  0.341708      -1.07380     -0.688625      0.688625       1015.36       1016.05    
  33  0.697564     -0.360161     -0.230970      0.230970       1017.93       1018.16    
  34  0.836961     -0.177977     -0.114137      0.114137       1021.37       1021.48    
  35  0.892232     -0.114029     -0.731264E-01  0.731264E-01   1021.42       1021.50    
  36  0.834474     -0.180954     -0.116045      0.116045       1021.66       1021.78    
  37  0.708844E-01  -2.64670      -1.69733       1.69733       1022.43       1024.13    
  38  0.949900     -0.513984E-01 -0.329617E-01  0.329617E-01   1023.20       1023.23    
  39  0.592293     -0.523755     -0.335883      0.335883       1024.28       1024.61    
  40  0.291167E-01  -3.53644      -2.26792       2.26792       1024.61       1026.88    
  41  0.684028     -0.379756     -0.243537      0.243537       1023.31       1023.56    
  42  0.322601      -1.13134     -0.725525      0.725525       1025.08       1025.81    
  43  0.438170     -0.825148     -0.529166      0.529166       1024.70       1025.23    
  44  0.263213      -1.33479     -0.856001      0.856001       1027.67       1028.53    
  45  0.306329E-01  -3.48568      -2.23536       2.23536       1029.77       1032.01    
  46  0.796142     -0.227978     -0.146202      0.146202       1030.70       1030.85    
  47  0.712770     -0.338597     -0.217142      0.217142       1032.86       1033.08    
  48  0.317947      -1.14587     -0.734844      0.734844       1031.33       1032.07    
  49  0.563880     -0.572913     -0.367408      0.367408       997.181       997.549    
loop,thermsimp(1:2)       16  0.166646E-01  0.398222    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    577       1044.39         69.46          1.58         49.67          2.81          0.04        123.55
Just calling func    0   0        123.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    578        982.49        146.80          2.48         80.46          2.50          0.04        232.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    982.49
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       16
neval is:      577
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       17
neval is:      577


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      577
neval,tstepnext:      577     577

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.740835     -0.299977     -0.192375      0.192375       971.219       971.411    
   2  0.330237      -1.10794     -0.710522      0.710522       972.502       973.212    
   3  0.886061     -0.120969     -0.775775E-01  0.775775E-01   972.557       972.635    
   4  0.335719      -1.09148     -0.699964      0.699964       973.368       974.068    
   5  0.575309     -0.552848     -0.354541      0.354541       976.693       977.048    
   6  0.357330      -1.02910     -0.659958      0.659958       979.000       979.660    
   7  0.355027      -1.03556     -0.664104      0.664104       979.350       980.014    
   8  0.882432     -0.125074     -0.802097E-01  0.802097E-01   984.003       984.083    
   9  0.770492     -0.260726     -0.167203      0.167203       987.486       987.653    
  10  0.247427      -1.39664     -0.895662      0.895662       991.024       991.919    
  11  0.967943     -0.325825E-01 -0.208951E-01  0.208951E-01   992.426       992.447    
  12  0.907360     -0.972155E-01 -0.623441E-01  0.623441E-01   993.422       993.484    
  13  0.161302      -1.82448      -1.17004       1.17004       993.487       994.657    
  14  0.436841     -0.828186     -0.531114      0.531114       997.181       997.712    
  15  0.823741E-01  -2.49648      -1.60099       1.60099       997.343       998.944    
  16  0.320341      -1.13837     -0.730035      0.730035       998.173       998.903    
  17  0.936587     -0.655126E-01 -0.420131E-01  0.420131E-01   998.046       998.088    
  18  0.350648      -1.04797     -0.672063      0.672063       999.006       999.678    
  19  0.533554     -0.628195     -0.402860      0.402860       1004.22       1004.62    
  20  0.818401     -0.200403     -0.128518      0.128518       1004.51       1004.64    
  21  0.359842      -1.02209     -0.655465      0.655465       1004.16       1004.82    
  22  0.495380     -0.702431     -0.450468      0.450468       1008.91       1009.36    
  23  0.430170     -0.843576     -0.540984      0.540984       1008.83       1009.37    
  24  0.366248      -1.00445     -0.644149      0.644149       1011.05       1011.70    
  25  0.799599E-01  -2.52623      -1.62007       1.62007       1013.30       1014.92    
  26  0.802285     -0.220291     -0.141272      0.141272       1013.68       1013.82    
  27  0.930981     -0.715161E-01 -0.458631E-01  0.458631E-01   1014.24       1014.28    
  28  0.109437      -2.21241      -1.41881       1.41881       1013.75       1015.17    
  29  0.984872     -0.152438E-01 -0.977584E-02  0.977584E-02   1015.05       1015.06    
  30  0.394281     -0.930691     -0.596850      0.596850       1015.25       1015.84    
  31  0.214905      -1.53756     -0.986036      0.986036       1015.36       1016.34    
  32  0.921897     -0.813213E-01 -0.521512E-01  0.521512E-01   1015.25       1015.30    
  33  0.514744     -0.664086     -0.425877      0.425877       1015.62       1016.05    
  34  0.391713     -0.937225     -0.601041      0.601041       1017.93       1018.53    
  35  0.713974     -0.336909     -0.216059      0.216059       1021.37       1021.59    
  36  0.955151     -0.458855E-01 -0.294263E-01  0.294263E-01   1021.42       1021.45    
  37  0.643489     -0.440850     -0.282717      0.282717       1021.66       1021.95    
  38  0.634404     -0.455070     -0.291835      0.291835       1023.20       1023.49    
  39  0.485027     -0.723551     -0.464012      0.464012       1023.31       1023.78    
  40  0.349648      -1.05083     -0.673895      0.673895       1022.43       1023.10    
  41  0.714288     -0.336469     -0.215777      0.215777       1024.28       1024.49    
  42  0.954308     -0.467689E-01 -0.299928E-01  0.299928E-01   1024.70       1024.73    
  43  0.752784     -0.283976     -0.182114      0.182114       1025.08       1025.26    
  44  0.982824     -0.173253E-01 -0.111107E-01  0.111107E-01   1024.61       1024.62    
  45  0.731112     -0.313188     -0.200847      0.200847       1027.67       1027.87    
  46  0.303560      -1.19218     -0.764541      0.764541       1030.70       1031.47    
  47  0.879114     -0.128841     -0.826254E-01  0.826254E-01   1029.77       1029.85    
  48  0.138245E-01  -4.28131      -2.74560       2.74560       1031.33       1034.08    
  49  0.271068      -1.30539     -0.837143      0.837143       982.485       983.322    
loop,thermsimp(1:2)       17  0.192375      0.710522    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    579       1007.31        146.55          2.50         81.07          1.30          0.08        231.50
Just calling func    0   0        231.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1007.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.641298               577
loop is:       17
neval is:      578
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.641298               577
loop is:       18
neval is:      578


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.320649               625

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      625
neval,tstepnext:      578     625

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.363478      -1.01204     -0.324509      0.324509       971.219       971.543    
   2  0.809154E-01  -2.51435     -0.806225      0.806225       972.557       973.364    
   3  0.763561     -0.269763     -0.864992E-01  0.864992E-01   972.502       972.588    
   4  0.866950     -0.142774     -0.457805E-01  0.457805E-01   973.368       973.414    
   5  0.578875     -0.546668     -0.175289      0.175289       976.693       976.868    
   6  0.831003     -0.185121     -0.593590E-01  0.593590E-01   979.000       979.060    
   7  0.954184     -0.468983E-01 -0.150379E-01  0.150379E-01   979.350       979.365    
   8  0.196935      -1.62488     -0.521018      0.521018       982.485       983.006    
   9  0.421233     -0.864570     -0.277224      0.277224       984.003       984.280    
  10  0.200644      -1.60622     -0.515034      0.515034       987.486       988.001    
  11  0.407128     -0.898628     -0.288144      0.288144       991.024       991.312    
  12  0.148412      -1.90776     -0.611722      0.611722       992.426       993.038    
  13  0.921822     -0.814037E-01 -0.261020E-01  0.261020E-01   993.422       993.448    
  14  0.604105     -0.504006     -0.161609      0.161609       993.487       993.649    
  15  0.959577     -0.412623E-01 -0.132307E-01  0.132307E-01   997.181       997.194    
  16  0.231726      -1.46220     -0.468853      0.468853       998.046       998.515    
  17  0.472647     -0.749407     -0.240297      0.240297       998.173       998.414    
  18  0.600210E-01  -2.81306     -0.902006      0.902006       997.343       998.245    
  19  0.946738     -0.547325E-01 -0.175499E-01  0.175499E-01   999.006       999.024    
  20  0.391391     -0.938048     -0.300784      0.300784       1004.22       1004.52    
  21  0.293959      -1.22432     -0.392576      0.392576       1004.51       1004.90    
  22  0.675724     -0.391970     -0.125685      0.125685       1004.16       1004.29    
  23  0.764024E-01  -2.57174     -0.824626      0.824626       1008.91       1009.74    
  24  0.735327     -0.307440     -0.985802E-01  0.985802E-01   1008.83       1008.93    
  25  0.431323     -0.840899     -0.269633      0.269633       1011.05       1011.32    
  26  0.133115      -2.01654     -0.646603      0.646603       1013.68       1014.33    
  27  0.137777      -1.98212     -0.635565      0.635565       1014.24       1014.87    
  28  0.299340      -1.20618     -0.386759      0.386759       1013.30       1013.69    
  29  0.256698      -1.35985     -0.436036      0.436036       1015.05       1015.48    
  30  0.519007     -0.655838     -0.210294      0.210294       1013.75       1013.96    
  31  0.933835     -0.684557E-01 -0.219503E-01  0.219503E-01   1015.25       1015.27    
  32  0.806528     -0.215016     -0.689448E-01  0.689448E-01   1015.25       1015.31    
  33  0.328929E-02  -5.71708      -1.83318       1.83318       1015.62       1017.45    
  34  0.202432      -1.59735     -0.512189      0.512189       1015.36       1015.87    
  35  0.750909E-02  -4.89164      -1.56850       1.56850       1017.93       1019.50    
  36  0.299056      -1.20712     -0.387064      0.387064       1021.42       1021.81    
  37  0.345570      -1.06256     -0.340709      0.340709       1021.37       1021.71    
  38  0.168612      -1.78015     -0.570805      0.570805       1021.66       1022.23    
  39  0.203332      -1.59291     -0.510766      0.510766       1022.43       1022.94    
  40  0.355905      -1.03309     -0.331260      0.331260       1023.20       1023.53    
  41  0.537935     -0.620017     -0.198808      0.198808       1023.31       1023.51    
  42  0.953898     -0.471987E-01 -0.151342E-01  0.151342E-01   1024.28       1024.29    
  43  0.466491     -0.762517     -0.244500      0.244500       1024.61       1024.86    
  44  0.534147     -0.627085     -0.201074      0.201074       1024.70       1024.90    
  45  0.966359     -0.342197E-01 -0.109725E-01  0.109725E-01   1025.08       1025.09    
  46  0.578379     -0.547526     -0.175564      0.175564       1027.67       1027.85    
  47  0.952054     -0.491330E-01 -0.157545E-01  0.157545E-01   1029.77       1029.79    
  48  0.135497      -1.99880     -0.640915      0.640915       1030.70       1031.35    
  49  0.897031     -0.108665     -0.348433E-01  0.348433E-01   1007.31       1007.35    
loop,thermsimp(1:2)       18  0.324509      0.806225    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    580        993.64        148.74          2.22         47.11          7.33          0.07        205.46
Just calling func    0   0        205.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    993.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.320649               625
loop is:       18
neval is:      579
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    656.689      0.500000    
T0,tstep,tfreq (these do not change):             48
current SAtemp,tstepnext are:   0.320649               625
loop is:       19
neval is:      579


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      625
neval,tstepnext:      579     625

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.299290      -1.20634     -0.386812      0.386812       971.219       971.606    
   2  0.658625     -0.417601     -0.133904      0.133904       972.502       972.636    
   3  0.867325     -0.142342     -0.456419E-01  0.456419E-01   972.557       972.603    
   4  0.675695     -0.392013     -0.125699      0.125699       973.368       973.494    
   5  0.662632     -0.411535     -0.131958      0.131958       976.693       976.825    
   6  0.994511     -0.550396E-02 -0.176484E-02  0.176484E-02   979.000       979.002    
   7  0.890571     -0.115892     -0.371607E-01  0.371607E-01   979.350       979.387    
   8  0.817840     -0.201088     -0.644787E-01  0.644787E-01   982.485       982.550    
   9  0.710520     -0.341758     -0.109584      0.109584       984.003       984.112    
  10  0.454451     -0.788666     -0.252885      0.252885       987.486       987.739    
  11  0.536210     -0.623230     -0.199838      0.199838       991.024       991.223    
  12  0.944367E-01  -2.35983     -0.756676      0.756676       992.426       993.183    
  13  0.331729      -1.10344     -0.353816      0.353816       993.422       993.776    
  14  0.636976     -0.451023     -0.144620      0.144620       993.487       993.632    
  15  0.126603      -2.06670     -0.662686      0.662686       997.181       997.844    
  16  0.525444     -0.643511     -0.206341      0.206341       997.343       997.549    
  17  0.462202     -0.771754     -0.247462      0.247462       998.173       998.421    
  18  0.728322E-01  -2.61960     -0.839972      0.839972       998.046       998.886    
  19  0.555156     -0.588506     -0.188704      0.188704       999.006       999.195    
  20  0.763927     -0.269283     -0.863453E-01  0.863453E-01   1004.16       1004.25    
  21  0.934944     -0.672689E-01 -0.215697E-01  0.215697E-01   1004.22       1004.24    
  22  0.908013     -0.964969E-01 -0.309416E-01  0.309416E-01   1004.51       1004.54    
  23  0.430048     -0.843859     -0.270583      0.270583       1007.31       1007.58    
  24  0.537979     -0.619936     -0.198782      0.198782       1008.83       1009.03    
  25  0.335733      -1.09144     -0.349969      0.349969       1008.91       1009.26    
  26  0.226590      -1.48461     -0.476040      0.476040       1011.05       1011.53    
  27  0.693228E-01  -2.66898     -0.855806      0.855806       1013.30       1014.16    
  28  0.709866     -0.342679     -0.109880      0.109880       1013.75       1013.86    
  29  0.822308     -0.195640     -0.627318E-01  0.627318E-01   1013.68       1013.75    
  30  0.609920     -0.494427     -0.158538      0.158538       1014.24       1014.39    
  31  0.943229     -0.584467E-01 -0.187409E-01  0.187409E-01   1015.25       1015.27    
  32  0.788153     -0.238063     -0.763348E-01  0.763348E-01   1015.25       1015.32    
  33  0.665360     -0.407426     -0.130641      0.130641       1015.05       1015.18    
  34  0.552169     -0.593902     -0.190434      0.190434       1015.36       1015.55    
  35  0.889868     -0.116682     -0.374139E-01  0.374139E-01   1015.62       1015.66    
  36  0.656811     -0.420359     -0.134788      0.134788       1017.93       1018.06    
  37  0.868225     -0.141305     -0.453092E-01  0.453092E-01   1021.37       1021.42    
