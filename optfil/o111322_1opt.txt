nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    95.4076      0.500000    
Tfreq:   78
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    95.4076      0.500000    
Tfreq:   78
 Estimating   78 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        318.03         92.22          1.14         39.88          1.01          0.04        134.29
iter,obj,time:      3        325.87         87.52          1.15         40.06          1.06          0.05        129.84
iter,obj,time:      4        317.71         87.43          1.14         39.97          0.91          0.05        129.51
iter,obj,time:      5        332.75         87.33          1.11         39.85          1.26          0.05        129.59
iter,obj,time:      6        319.72         87.36          1.12         39.78          1.56          0.05        129.86
iter,obj,time:      7        332.46         87.30          1.12         39.81          1.25          0.05        129.53
iter,obj,time:      8       1924.53         87.59          1.19         39.95          0.59          0.04        129.37
iter,obj,time:      9        322.68         87.38          1.15         40.04          1.10          0.05        129.71
iter,obj,time:     10        329.96         87.36          1.14         40.02          1.03          0.05        129.60
iter,obj,time:     11        300.44         87.64          1.19         40.08          0.43          0.04        129.39
iter,obj,time:     12        320.09         87.50          1.14         40.04          0.88          0.05        129.61
iter,obj,time:     13        964.14         88.00          1.24         39.81          0.61          0.05        129.71
iter,obj,time:     14        310.89         87.43          1.16         39.96          1.00          0.05        129.59
iter,obj,time:     15        558.18         87.22          1.16         40.30          0.63          0.05        129.37
iter,obj,time:     16        315.77         87.41          1.13         39.96          0.96          0.05        129.52
iter,obj,time:     17        487.96         87.33          1.15         40.09          1.10          0.05        129.71
iter,obj,time:     18        361.18         87.35          1.14         39.90          1.09          0.05        129.54
iter,obj,time:     19        308.95         87.44          1.14         40.04          0.76          0.05        129.43
iter,obj,time:     20        414.70         87.33          1.14         39.99          1.21          0.04        129.71
iter,obj,time:     21        318.26         87.43          1.14         39.95          1.19          0.05        129.76
iter,obj,time:     22        318.01         87.52          1.15         40.12          0.62          0.05        129.46
iter,obj,time:     23        317.89         87.34          1.13         39.95          1.17          0.05        129.64
iter,obj,time:     24        318.05         87.52          1.14         40.13          0.94          0.04        129.78
iter,obj,time:     25        318.38         87.41          1.14         40.07          0.84          0.05        129.52
iter,obj,time:     26        318.03         87.50          1.14         40.07          0.93          0.05        129.69
iter,obj,time:     27        319.16         87.41          1.14         40.07          0.60          0.05        129.28
iter,obj,time:     28        319.48         87.35          1.12         40.00          1.07          0.05        129.60
iter,obj,time:     29        325.26         87.51          1.14         40.03          0.66          0.05        129.40
iter,obj,time:     30        344.82         87.53          1.14         39.98          1.02          0.05        129.72
iter,obj,time:     31        327.49         87.57          1.15         40.29          0.59          0.05        129.66
iter,obj,time:     32        333.84         87.53          1.13         40.10          0.89          0.05        129.70
iter,obj,time:     33        411.20         87.51          1.15         40.44          0.42          0.05        129.56
iter,obj,time:     34        314.97         87.61          1.14         40.02          1.42          0.05        130.24
iter,obj,time:     35        320.54         87.43          1.14         40.53          0.46          0.05        129.62
iter,obj,time:     36        319.81         87.55          1.14         40.07          0.68          0.04        129.49
iter,obj,time:     37        315.54         87.53          1.15         40.55          0.20          0.05        129.48
iter,obj,time:     38        326.47         87.45          1.13         40.10          0.84          0.05        129.57
iter,obj,time:     39        319.36         87.49          1.15         40.06          0.87          0.05        129.62
iter,obj,time:     40        319.31         87.52          1.14         40.02          1.18          0.05        129.92
iter,obj,time:     41        321.00         87.32          1.14         39.99          0.86          0.05        129.37
iter,obj,time:     42        317.09         87.48          1.14         40.05          0.83          0.05        129.54
iter,obj,time:     43        315.86         87.50          1.15         40.05          0.74          0.05        129.48
iter,obj,time:     44        317.92         87.58          1.14         40.07          0.61          0.05        129.45
iter,obj,time:     45        311.88         87.40          1.12         39.97          1.12          0.05        129.66
iter,obj,time:     46        312.76         87.33          1.11         39.93          1.12          0.05        129.54
iter,obj,time:     47        317.90         87.44          1.15         40.05          0.84          0.05        129.53
iter,obj,time:     48        316.95         87.46          1.15         40.50          0.62          0.05        129.78
iter,obj,time:     49        317.74         87.27          1.12         39.88          1.07          0.05        129.39
iter,obj,time:     50        322.41         87.27          1.11         40.21          0.83          0.05        129.48
iter,obj,time:     51        317.51         87.25          1.11         39.74          1.41          0.04        129.55
iter,obj,time:     52        313.81         87.47          1.14         40.31          0.61          0.05        129.58
iter,obj,time:     53        313.36         87.26          1.12         39.91          1.19          0.05        129.54
iter,obj,time:     54        317.93         87.42          1.15         40.02          0.83          0.05        129.46
iter,obj,time:     55        310.97         87.38          1.14         40.04          0.91          0.05        129.52
iter,obj,time:     56        321.38         87.47          1.13         40.17          0.75          0.05        129.57
iter,obj,time:     57        314.94         87.45          1.17         40.06          0.84          0.05        129.57
iter,obj,time:     58        495.15         87.53          1.17         40.40          0.36          0.05        129.52
iter,obj,time:     59        354.39         87.22          1.14         39.98          1.08          0.05        129.47
iter,obj,time:     60        318.03         87.40          1.15         40.10          0.74          0.05        129.44
iter,obj,time:     61        318.03         87.32          1.13         40.38          0.58          0.05        129.46
iter,obj,time:     62        319.17         87.48          1.16         40.08          0.85          0.05        129.62
iter,obj,time:     63        314.06         87.38          1.14         40.01          0.97          0.05        129.55
iter,obj,time:     64        305.15         87.35          1.14         40.05          0.92          0.05        129.51
iter,obj,time:     65        313.76         87.41          1.16         39.84          1.18          0.04        129.63
iter,obj,time:     66        323.79         87.25          1.11         39.71          1.55          0.05        129.67
iter,obj,time:     67        319.59         87.42          1.13         40.02          1.05          0.04        129.65
iter,obj,time:     68        317.67         87.39          1.13         40.01          0.94          0.05        129.51
iter,obj,time:     69        316.94         87.51          1.15         40.17          0.55          0.05        129.43
iter,obj,time:     70        317.37         87.36          1.13         40.07          1.07          0.05        129.68
iter,obj,time:     71        323.29         87.35          1.12         39.96          1.04          0.05        129.51
iter,obj,time:     72        318.54         87.35          1.11         40.07          0.94          0.04        129.51
iter,obj,time:     73        318.94         87.27          1.12         39.97          1.25          0.05        129.67
iter,obj,time:     74        312.13         87.30          1.12         39.96          1.11          0.04        129.52
iter,obj,time:     75        313.15         87.32          1.12         40.13          1.08          0.05        129.71
iter,obj,time:     76        325.72         87.49          1.13         39.95          0.91          0.05        129.54
iter,obj,time:     77        320.59         87.46          1.12         39.90          1.12          0.05        129.66
iter,obj,time:     78        318.67         87.34          1.13         39.99          0.99          0.05        129.50
iter,obj,time:     79        319.27         87.51          1.16         40.61          0.38          0.05        129.70
iter,obj,time:     80        319.05         87.38          1.14         39.89          1.14          0.05        129.60

    1    318.03        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    2    325.87      -0.2103     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    3    317.71        1.790     -3.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    4    332.75        1.790     -1.112      4.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    5    319.72        1.790     -1.112      6.124     -102.6     -1.370    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    6    332.46        1.790     -1.112      6.124     -102.6     0.6298    
                      -2.078      3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    7    1924.5        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  1.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    8    322.68        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      2.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

    9    329.96        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085    -0.9188    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   10    300.44        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                     -0.3457E-01 -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   11    320.09        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -3.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   12    964.14        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194     0.4277    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   13    310.89        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.2700E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   14    558.18        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -1.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   15    315.77        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                     -0.2218      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   16    487.96        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.7723E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   17    361.18        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.5976E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   18    308.95        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -7458.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   19    414.70        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.1653E+06
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   20    318.26        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                       0.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   21    318.01        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -4.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   22    317.89        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -2.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   23    318.05        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -5.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   24    318.38        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      4.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   25    318.03        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -11.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   26    319.16        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -1.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   27    319.48        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      9245.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   28    325.26        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000     0.1616E+05

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   29    344.82        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                      0.1994E+05  5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   30    327.49        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.     0.2639E+05  3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   31    333.84        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.     0.1960E+05  7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   32    411.20        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.     0.3643E+05  2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   33    314.97        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.     0.1332E+05
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   34    320.54        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                      0.1281E+05 0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   35    319.81        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.3582    -0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   36    315.54        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01 0.2436      0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   37    326.47        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.2000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   38    319.36        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                      0.1870    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   39    319.31        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130     0.1319    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   40    321.00        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681     0.2278    -0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   41    317.09        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01 0.9794E-01-0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   42    315.86        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021     0.2659    

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   43    317.92        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.012    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   44    311.88        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512     0.4028      0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   45    312.76        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000     0.2664    -0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   46    317.90        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01 0.2807    
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   47    316.95        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.3269    -0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   48    317.74        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01 0.2655    -0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   49    322.41        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.6012E-01-0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   50    317.51        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601     0.1409    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   51    313.81        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                      0.2456    -0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   52    313.36        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01 0.2227    -0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   53    317.93        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01 0.1920    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   54    310.97        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.7040E-01  0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   55    321.38        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                     -0.9493     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   56    314.94        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949    -0.6411      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   57    495.15        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      0.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   58    354.39        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      0.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   59    318.03        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      1.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   60    318.03        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       1.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   61    319.17        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.505      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   62    314.06        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.424    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   63    305.15        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1500E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   64    313.76        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -4.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   65    323.79        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                      0.4213    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   66    319.59        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787     0.2521      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   67    317.67        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.698      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   68    316.94        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.848    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   69    317.37        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -4.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   70    323.29        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000      1.069    -0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   71    318.54        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01 0.4796      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   72    318.94        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      9.053      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   73    312.13        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.328    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   74    313.15        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -4.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   75    325.72        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000     0.3096    -0.2373      10.12    
                       8.459    -0.1000E+05 -2.000    

   76    320.59        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904     0.7627      10.12    
                       8.459    -0.1000E+05 -2.000    

   77    318.67        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.42    
                       8.459    -0.1000E+05 -2.000    

   78    319.27        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.759    -0.1000E+05 -2.000    

   79    319.05        1.790     -1.112      6.124     -102.6     0.6298    
                     -0.7827E-01  3.856     -99.70      4.085      1.081    
                       1.965     -1.194      1.428    -0.1800E+05 -2.500    
                      -1.222      0.000      0.000      0.000     -1.221    

                      -2.500     0.5148E+05 0.3984E+05 -3729.    -0.8266E+05
                      -2.000     -6.523     -4.447     -7.411      2.884    
                      -13.88     -2.943      1849.      0.000      3231.    

                       3987.      5278.      3920.      7286.      2665.    
                       2562.     0.5816E-01-0.5642E-01  0.000    -0.5000    
                     -0.1130    -0.1681    -0.7224E-01-0.2021    -0.3408E-01

                      -1.512    -0.9723E-01  0.000    -0.3362E-01-0.1933E-01
                      0.8541E-01 0.2689E-01-0.3448E-01-0.3601    -0.1591    
                     -0.5435E-01-0.7728E-01-0.1080    -0.3704      0.000    

                      -1.949     -1.641      1.000      1.000      0.000    
                       0.000      9.205      9.124    -0.1000E+05 -2.000    
                     -0.5787    -0.7479      9.398      8.548    -0.1000E+05

                      -2.000     0.6883E-01-0.5204      8.753      9.028    
                     -0.1000E+05 -2.000    -0.6904    -0.2373      10.12    
                       8.459    -0.1000E+05 -4.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          79          79

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        1
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       79     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -140.813       140.813       318.025       458.839    
   2  0.709707     -0.342904      -32.7156       32.7156       325.871       358.587    
   3  0.151889      -1.88460      -179.805       179.805       317.711       497.516    
   4  0.456170E-01  -3.08747      -294.568       294.568       332.752       627.321    
   5  0.882557     -0.124932      -11.9194       11.9194       319.716       331.635    
   6  0.711292     -0.340672      -32.5027       32.5027       332.461       364.964    
   7  0.241669      -1.42019      -135.497       135.497       1924.53       2060.03    
   8  0.682871     -0.381450      -36.3932       36.3932       322.677       359.070    
   9  0.500657     -0.691834      -66.0062       66.0062       329.961       395.968    
  10  0.494633     -0.703939      -67.1611       67.1611       300.437       367.598    
  11  0.437126     -0.827535      -78.9531       78.9531       320.091       399.044    
  12  0.462981     -0.770069      -73.4704       73.4704       964.139       1037.61    
  13  0.988878     -0.111840E-01  -1.06704       1.06704       310.888       311.955    
  14  0.878158     -0.129929      -12.3962       12.3962       558.181       570.578    
  15  0.825605     -0.191638      -18.2838       18.2838       315.769       334.053    
  16  0.966665     -0.339033E-01  -3.23463       3.23463       487.955       491.190    
  17  0.340930      -1.07608      -102.666       102.666       361.180       463.845    
  18  0.288920      -1.24161      -118.459       118.459       308.952       427.411    
  19  0.442843     -0.814539      -77.7132       77.7132       414.704       492.417    
  20  0.878635     -0.129386      -12.3444       12.3444       318.256       330.600    
  21  0.198777E-01  -3.91816      -373.822       373.822       318.008       691.830    
  22  0.315829      -1.15255      -109.962       109.962       317.888       427.850    
  23  0.208690      -1.56690      -149.495       149.495       318.052       467.547    
  24  0.849393     -0.163234      -15.5737       15.5737       318.381       333.955    
  25  0.945818     -0.557056E-01  -5.31473       5.31473       318.025       323.340    
  26  0.567839     -0.565917      -53.9928       53.9928       319.165       373.158    
  27  0.718388     -0.330745      -31.5556       31.5556       319.482       351.037    
  28  0.115406      -2.15930      -206.013       206.013       325.264       531.277    
  29  0.659869E-01  -2.71830      -259.346       259.346       344.821       604.167    
  30  0.171393      -1.76380      -168.280       168.280       327.487       495.767    
  31  0.161953      -1.82045      -173.685       173.685       333.837       507.522    
  32  0.455406     -0.786566      -75.0443       75.0443       411.198       486.242    
  33  0.788693     -0.237378      -22.6476       22.6476       314.971       337.618    
  34  0.157754      -1.84672      -176.191       176.191       320.536       496.727    
  35  0.126279      -2.06926      -197.423       197.423       319.806       517.229    
  36  0.646962     -0.435467      -41.5469       41.5469       315.543       357.090    
  37  0.730769     -0.313658      -29.9253       29.9253       326.468       356.394    
  38  0.443446E-01  -3.11577      -297.268       297.268       319.358       616.626    
  39  0.219048      -1.51847      -144.873       144.873       319.305       464.178    
  40  0.311223E-01  -3.46983      -331.048       331.048       321.000       652.048    
  41  0.864417     -0.145700      -13.9009       13.9009       317.094       330.995    
  42  0.372606     -0.987233      -94.1895       94.1895       315.864       410.054    
  43  0.599250E-01  -2.81466      -268.540       268.540       317.923       586.463    
  44  0.250528      -1.38418      -132.061       132.061       311.882       443.943    
  45  0.404968E-01  -3.20653      -305.927       305.927       312.764       618.691    
  46  0.792822     -0.232156      -22.1494       22.1494       317.896       340.045    
  47  0.826691     -0.190324      -18.1583       18.1583       316.952       335.110    
  48  0.258424      -1.35316      -129.101       129.101       317.736       446.837    
  49  0.713620     -0.337405      -32.1910       32.1910       322.405       354.596    
  50  0.936186     -0.659413E-01  -6.29129       6.29129       317.507       323.799    
  51  0.655367E-01  -2.72514      -259.999       259.999       313.807       573.806    
  52  0.178790      -1.72154      -164.248       164.248       313.360       477.608    
  53  0.110644E-01  -4.50403      -429.718       429.718       317.931       747.650    
  54  0.459577     -0.777448      -74.1744       74.1744       310.973       385.148    
  55  0.210706      -1.55729      -148.578       148.578       321.375       469.953    
  56  0.667378     -0.404399      -38.5827       38.5827       314.940       353.523    
  57  0.787749     -0.238575      -22.7619       22.7619       495.150       517.911    
  58  0.774339E-01  -2.55833      -244.084       244.084       354.393       598.477    
  59  0.154999      -1.86434      -177.872       177.872       318.025       495.897    
  60  0.510712     -0.671950      -64.1091       64.1091       318.025       382.134    
  61  0.628107     -0.465044      -44.3687       44.3687       319.172       363.541    
  62  0.850273     -0.162197      -15.4749       15.4749       314.057       329.532    
  63  0.355976      -1.03289      -98.5456       98.5456       305.147       403.692    
  64  0.531318     -0.632394      -60.3351       60.3351       313.757       374.092    
  65  0.404575     -0.904917      -86.3360       86.3360       323.786       410.122    
  66  0.240103      -1.42669      -136.117       136.117       319.594       455.711    
  67  0.288602      -1.24271      -118.564       118.564       317.674       436.238    
  68  0.870493     -0.138695      -13.2326       13.2326       316.943       330.176    
  69  0.453038     -0.791780      -75.5417       75.5417       317.372       392.914    
  70  0.259221      -1.35008      -128.807       128.807       323.295       452.102    
  71  0.201751      -1.60072      -152.721       152.721       318.545       471.265    
  72  0.390245     -0.940979      -89.7765       89.7765       318.942       408.718    
  73  0.311089      -1.16768      -111.405       111.405       312.134       423.539    
  74  0.618900     -0.479811      -45.7776       45.7776       313.152       358.930    
  75  0.891204     -0.115182      -10.9892       10.9892       325.716       336.705    
  76  0.876712     -0.131577      -12.5534       12.5534       320.591       333.145    
  77  0.409798     -0.892090      -85.1121       85.1121       318.671       403.783    
  78  0.337394      -1.08651      -103.661       103.661       319.266       422.927    
  79  0.810099     -0.210599      -20.0927       20.0927       319.053       339.146    
loop,thermsimp(1:2)        1   140.813       32.7156    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81        276.17         87.40          1.15         40.24          0.83          0.05        129.67
Just calling func    0   0        129.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82        281.45         87.39          1.14         40.57          0.52          0.05        129.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    276.17        1.738     -1.164      6.073     -102.6     0.5786    
                     -0.1296      5.856     -99.70      4.034      1.030    
                       1.914     -1.245      1.402    -0.1823E+05 -2.474    
                      -1.196      0.000      0.000      0.000     -1.221    

                      -2.500     0.5214E+05 0.4035E+05 -3825.    -0.8478E+05
                      -1.949     -6.471     -4.395     -7.359      2.935    
                      -13.83     -2.917      2039.      0.000      3562.    

                       4396.      5819.      4322.      8033.      2938.    
                       2825.     0.6585E-01-0.4873E-01  0.000    -0.4923    
                     -0.1053    -0.1604    -0.6455E-01-0.1944    -0.2639E-01

                      -1.499    -0.8441E-01  0.000    -0.2593E-01-0.1164E-01
                      0.8541E-01 0.3458E-01-0.2679E-01-0.3524    -0.1514    
                     -0.4666E-01-0.6959E-01-0.1004    -0.3627      0.000    

                      -1.924     -1.615     0.9744     0.9744     0.2564E-01
                      0.2564E-01  9.213      9.132    -0.1013E+05 -2.051    
                     -0.5531    -0.7222      9.405      8.555    -0.1000E+05

                      -2.051     0.9447E-01-0.4948      8.760      9.035    
                     -0.1000E+05 -2.051    -0.6648    -0.2116      10.12    
                       8.467    -0.1000E+05 -2.051    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    276.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        1
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        2
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       81     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -99.4188       99.4188       310.888       410.307    
   2  0.440787     -0.819193      -78.1572       78.1572       318.025       396.182    
   3  0.685789     -0.377185      -35.9863       35.9863       317.507       353.494    
   4  0.673104     -0.395856      -37.7677       37.7677       314.057       351.824    
   5  0.655536     -0.422301      -40.2907       40.2907       316.943       357.234    
   6  0.422838     -0.860766      -82.1236       82.1236       318.256       400.379    
   7  0.300870      -1.20108      -114.592       114.592       317.094       431.686    
   8  0.776987     -0.252331      -24.0743       24.0743       319.716       343.790    
   9  0.170551      -1.76872      -168.749       168.749       320.591       489.340    
  10  0.587497     -0.531884      -50.7458       50.7458       318.381       369.127    
  11  0.250425      -1.38459      -132.101       132.101       315.769       447.870    
  12  0.776362E-01  -2.55572      -243.835       243.835       316.952       560.787    
  13  0.766647     -0.265729      -25.3526       25.3526       325.716       351.068    
  14  0.480193     -0.733568      -69.9879       69.9879       314.971       384.958    
  15  0.434643     -0.833231      -79.4965       79.4965       319.053       398.549    
  16  0.815924E-01  -2.50602      -239.093       239.093       317.896       556.989    
  17  0.724257E-01  -2.62519      -250.463       250.463       319.482       569.945    
  18  0.573795     -0.555483      -52.9973       52.9973       314.940       367.937    
  19  0.196096      -1.62915      -155.433       155.433       322.405       477.838    
  20  0.240673      -1.42432      -135.890       135.890       326.468       462.359    
  21  0.194228      -1.63872      -156.347       156.347       315.543       471.890    
  22  0.236387      -1.44229      -137.605       137.605       325.871       463.476    
  23  0.261662      -1.34070      -127.913       127.913       313.152       441.065    
  24  0.146321      -1.92195      -183.369       183.369       322.677       506.045    
  25  0.169637      -1.77410      -169.262       169.262       319.172       488.434    
  26  0.886717     -0.120229      -11.4708       11.4708       332.461       343.932    
  27  0.253412      -1.37274      -130.970       130.970       300.437       431.407    
  28  0.470820     -0.753279      -71.8685       71.8685       319.165       391.033    
  29  0.329871      -1.10905      -105.812       105.812       313.757       419.569    
  30  0.726784     -0.319126      -30.4470       30.4470       318.025       348.472    
  31  0.612351     -0.490450      -46.7927       46.7927       310.973       357.766    
  32  0.146573      -1.92023      -183.205       183.205       317.372       500.577    
  33  0.812633     -0.207476      -19.7947       19.7947       329.961       349.756    
  34  0.486789     -0.719925      -68.6863       68.6863       320.091       388.777    
  35  0.653508     -0.425400      -40.5864       40.5864       305.147       345.733    
  36  0.180127      -1.71409      -163.538       163.538       318.671       482.208    
  37  0.155218      -1.86292      -177.737       177.737       318.942       496.679    
  38  0.830615     -0.185589      -17.7066       17.7066       315.864       333.571    
  39  0.728345     -0.316980      -30.2423       30.2423       323.786       354.028    
  40  0.262318      -1.33820      -127.674       127.674       319.266       446.941    
  41  0.234222      -1.45148      -138.483       138.483       312.134       450.616    
  42  0.250201      -1.38549      -132.186       132.186       308.952       441.138    
  43  0.898433     -0.107103      -10.2185       10.2185       317.888       328.106    
  44  0.580277     -0.544250      -51.9256       51.9256       317.674       369.600    
  45  0.823617     -0.194050      -18.5138       18.5138       311.882       330.396    
  46  0.820676     -0.197627      -18.8551       18.8551       317.736       336.591    
  47  0.502494     -0.688171      -65.6567       65.6567       323.295       388.951    
  48  0.751016     -0.286329      -27.3179       27.3179       319.594       346.912    
  49  0.360461      -1.02037      -97.3511       97.3511       318.025       415.376    
  50  0.948712     -0.526497E-01  -5.02318       5.02318       361.180       366.203    
  51  0.452918     -0.792045      -75.5671       75.5671       319.305       394.872    
  52  0.182886      -1.69889      -162.087       162.087       318.052       480.140    
  53  0.986780     -0.133085E-01  -1.26973       1.26973       321.375       322.645    
  54  0.720276     -0.328121      -31.3052       31.3052       318.545       349.850    
  55  0.999574     -0.426396E-03 -0.406814E-01  0.406814E-01   313.360       313.400    
  56  0.573447     -0.556089      -53.0551       53.0551       411.198       464.253    
  57  0.441160E-01  -3.12093      -297.761       297.761       487.955       785.716    
  58  0.596470     -0.516726      -49.2995       49.2995       414.704       464.004    
  59  0.561679E-01  -2.87941      -274.717       274.717       327.487       602.205    
  60  0.664610     -0.408554      -38.9792       38.9792       318.025       357.004    
  61  0.875363     -0.133117      -12.7003       12.7003       320.536       333.236    
  62  0.969943     -0.305184E-01  -2.91168       2.91168       317.711       320.622    
  63  0.692714     -0.367138      -35.0277       35.0277       333.837       368.865    
  64  0.107969      -2.22591      -212.369       212.369       319.806       532.175    
  65  0.530030     -0.634822      -60.5668       60.5668       495.150       555.716    
  66  0.246082      -1.40209      -133.770       133.770       325.264       459.034    
  67  0.561065     -0.577919      -55.1378       55.1378       558.181       613.319    
  68  0.888085     -0.118688      -11.3237       11.3237       313.807       325.131    
  69  0.180192      -1.71373      -163.503       163.503       317.923       481.427    
  70  0.259121      -1.35046      -128.844       128.844       354.393       483.237    
  71  0.728967     -0.316127      -30.1609       30.1609       344.821       374.982    
  72  0.546722     -0.603814      -57.6084       57.6084       319.358       376.966    
  73  0.334936      -1.09382      -104.358       104.358       312.764       417.122    
  74  0.681788     -0.383037      -36.5446       36.5446       332.752       369.297    
  75  0.367328      -1.00150      -95.5507       95.5507       321.000       416.551    
  76  0.310586      -1.16929      -111.559       111.559       318.008       429.568    
  77  0.964734     -0.359024E-01  -3.42536       3.42536       317.931       321.357    
  78  0.249240      -1.38934      -132.553       132.553       964.139       1096.69    
  79  0.328926      -1.11192      -106.086       106.086       276.173       382.259    
loop,thermsimp(1:2)        2   99.4188       78.1572    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        469.16         87.35          1.11         39.81          1.37          0.05        129.68
Just calling func    0   0        129.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84        930.96         87.35          1.11         39.88          1.26          0.05        129.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    469.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        2
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        3
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       83     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -170.245       170.245       313.360       483.605    
   2  0.274399      -1.29317      -123.378       123.378       317.711       441.089    
   3  0.597410E-01  -2.81774      -268.833       268.833       317.931       586.765    
   4  0.283115E-01  -3.56449      -340.079       340.079       321.375       661.454    
   5  0.901069     -0.104174      -9.93898       9.93898       313.807       323.746    
   6  0.717939     -0.331371      -31.6153       31.6153       317.888       349.503    
   7  0.294866      -1.22123      -116.515       116.515       311.882       428.397    
   8  0.935651     -0.665127E-01  -6.34582       6.34582       320.536       326.882    
   9  0.314362      -1.15721      -110.407       110.407       315.864       426.271    
  10  0.807729     -0.213529      -20.3723       20.3723       317.736       338.108    
  11  0.757191     -0.278140      -26.5366       26.5366       319.716       346.253    
  12  0.508654     -0.675987      -64.4943       64.4943       332.461       396.956    
  13  0.722060     -0.325647      -31.0691       31.0691       305.147       336.216    
  14  0.424032     -0.857947      -81.8546       81.8546       319.594       401.449    
  15  0.786154     -0.240602      -22.9553       22.9553       318.025       340.980    
  16  0.399894     -0.916557      -87.4464       87.4464       329.961       417.408    
  17  0.757416     -0.277843      -26.5083       26.5083       318.545       345.053    
  18  0.637270     -0.450563      -42.9871       42.9871       325.716       368.703    
  19  0.586055     -0.534342      -50.9802       50.9802       314.057       365.037    
  20  0.821724     -0.196351      -18.7334       18.7334       317.507       336.241    
  21  0.921558     -0.816897E-01  -7.79381       7.79381       323.786       331.580    
  22  0.985596     -0.145083E-01  -1.38421       1.38421       318.025       319.409    
  23  0.257194      -1.35793      -129.556       129.556       316.943       446.499    
  24  0.921438E-01  -2.38440      -227.490       227.490       310.973       538.463    
  25  0.114653      -2.16584      -206.638       206.638       361.180       567.817    
  26  0.379827     -0.968040      -92.3584       92.3584       314.940       407.298    
  27  0.541451     -0.613503      -58.5328       58.5328       333.837       392.370    
  28  0.544274     -0.608302      -58.0366       58.0366       318.381       376.418    
  29  0.934365     -0.678883E-01  -6.47706       6.47706       332.752       339.229    
  30  0.266419E-01  -3.62527      -345.878       345.878       317.674       663.552    
  31  0.919572     -0.838466E-01  -7.99960       7.99960       344.821       352.820    
  32  0.864639     -0.145444      -13.8764       13.8764       319.358       333.234    
  33  0.341156      -1.07542      -102.603       102.603       276.173       378.776    
  34  0.803175     -0.219182      -20.9117       20.9117       314.971       335.882    
  35  0.699424     -0.357498      -34.1080       34.1080       320.091       354.199    
  36  0.223868E-01  -3.79928      -362.480       362.480       323.295       685.775    
  37  0.605689     -0.501389      -47.8363       47.8363       319.165       367.001    
  38  0.312349      -1.16363      -111.019       111.019       319.305       430.324    
  39  0.437501     -0.826675      -78.8711       78.8711       318.025       396.896    
  40  0.303330      -1.19293      -113.815       113.815       319.053       432.868    
  41  0.129735      -2.04226      -194.847       194.847       318.256       513.103    
  42  0.954352     -0.467224E-01  -4.45767       4.45767       310.888       315.346    
  43  0.519807     -0.654297      -62.4249       62.4249       318.025       380.450    
  44  0.950560     -0.507036E-01  -4.83750       4.83750       321.000       325.838    
  45  0.443941     -0.812064      -77.4770       77.4770       312.764       390.241    
  46  0.911446     -0.927229E-01  -8.84647       8.84647       313.757       322.604    
  47  0.782475     -0.245293      -23.4028       23.4028       318.008       341.411    
  48  0.412534     -0.885438      -84.4774       84.4774       300.437       384.914    
  49  0.843850     -0.169780      -16.1983       16.1983       317.094       333.292    
  50  0.149432      -1.90091      -181.362       181.362       313.152       494.514    
  51  0.292747      -1.22845      -117.203       117.203       308.952       426.155    
  52  0.579908E-02  -5.15006      -491.354       491.354       319.266       810.621    
  53  0.164431      -1.80526      -172.236       172.236       315.769       488.005    
  54  0.963795     -0.368765E-01  -3.51830       3.51830       312.134       315.652    
  55  0.536638     -0.622432      -59.3847       59.3847       325.264       384.648    
  56  0.231620      -1.46266      -139.549       139.549       326.468       466.017    
  57  0.452632E-01  -3.09526      -295.311       295.311       325.871       621.182    
  58  0.241294      -1.42174      -135.645       135.645       414.704       550.349    
  59  0.757653     -0.277529      -26.4784       26.4784       411.198       437.676    
  60  0.504715     -0.683762      -65.2360       65.2360       315.543       380.779    
  61  0.878562     -0.129469      -12.3523       12.3523       322.405       334.758    
  62  0.874452     -0.134158      -12.7997       12.7997       318.052       330.852    
  63  0.370953     -0.991680      -94.6137       94.6137       317.923       412.537    
  64  0.757717     -0.277446      -26.4704       26.4704       318.671       345.141    
  65  0.642844     -0.441853      -42.1561       42.1561       354.393       396.549    
  66  0.616137     -0.484286      -46.2046       46.2046       319.172       365.377    
  67  0.551578     -0.594972      -56.7648       56.7648       320.591       377.356    
  68  0.483778E-01  -3.02871      -288.962       288.962       318.942       607.904    
  69  0.839664     -0.174753      -16.6728       16.6728       317.372       334.045    
  70  0.334065      -1.09642      -104.607       104.607       322.677       427.283    
  71  0.995512     -0.449855E-02 -0.429195      0.429195       319.806       320.236    
  72  0.214896      -1.53760      -146.699       146.699       495.150       641.848    
  73  0.541100     -0.614151      -58.5947       58.5947       317.896       376.490    
  74  0.380397     -0.966540      -92.2153       92.2153       316.952       409.167    
  75  0.854752E-01  -2.45953      -234.658       234.658       319.482       554.139    
  76  0.749036     -0.288968      -27.5698       27.5698       327.487       355.057    
  77  0.461657     -0.772934      -73.7437       73.7437       558.181       631.925    
  78  0.116336      -2.15127      -205.248       205.248       487.955       693.203    
  79  0.492714     -0.707826      -67.5320       67.5320       469.164       536.696    
loop,thermsimp(1:2)        3   170.245       123.378    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        290.93         87.42          1.11         39.87          1.27          0.05        129.72
Just calling func    0   0        129.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        294.72         87.39          1.12         40.12          0.95          0.05        129.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    290.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        3
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        4
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       85     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -11.8460       11.8460       310.888       322.734    
   2  0.114178      -2.16999      -207.034       207.034       312.134       519.167    
   3  0.217017      -1.52778      -145.762       145.762       318.025       463.787    
   4  0.138317      -1.97821      -188.736       188.736       319.806       508.542    
   5  0.832728     -0.183048      -17.4642       17.4642       313.757       331.221    
   6  0.390825     -0.939496      -89.6350       89.6350       313.807       403.442    
   7  0.283633      -1.26007      -120.221       120.221       321.000       441.221    
   8  0.725809     -0.320468      -30.5751       30.5751       320.536       351.111    
   9  0.506121     -0.680979      -64.9706       64.9706       318.052       383.023    
  10  0.216234      -1.53139      -146.106       146.106       323.786       469.893    
  11  0.637942     -0.449509      -42.8865       42.8865       319.358       362.245    
  12  0.536707     -0.622302      -59.3724       59.3724       317.094       376.466    
  13  0.231844      -1.46169      -139.456       139.456       317.372       456.829    
  14  0.491379     -0.710540      -67.7909       67.7909       322.405       390.196    
  15  0.825774     -0.191434      -18.2643       18.2643       314.971       333.235    
  16  0.671593     -0.398102      -37.9820       37.9820       305.147       343.129    
  17  0.549103     -0.599470      -57.1939       57.1939       317.507       374.701    
  18  0.659287     -0.416597      -39.7465       39.7465       317.736       357.483    
  19  0.205012      -1.58469      -151.191       151.191       332.752       483.943    
  20  0.400541E-02  -5.52011      -526.660       526.660       318.025       844.685    
  21  0.750831     -0.286575      -27.3414       27.3414       318.008       345.350    
  22  0.619921     -0.478162      -45.6203       45.6203       318.545       364.165    
  23  0.435226     -0.831889      -79.3685       79.3685       318.671       398.039    
  24  0.460974     -0.774414      -73.8850       73.8850       319.716       393.601    
  25  0.891582E-01  -2.41734      -230.633       230.633       317.888       548.520    
  26  0.589618E-01  -2.83087      -270.086       270.086       344.821       614.907    
  27  0.541391     -0.613613      -58.5433       58.5433       320.091       378.634    
  28  0.545108E-01  -2.90936      -277.574       277.574       327.487       605.062    
  29  0.744722     -0.294744      -28.1208       28.1208       314.057       342.178    
  30  0.712477     -0.339008      -32.3439       32.3439       319.172       351.516    
  31  0.563836     -0.572992      -54.6677       54.6677       319.165       373.833    
  32  0.161455      -1.82353      -173.978       173.978       325.716       499.694    
  33  0.640738     -0.445135      -42.4693       42.4693       318.381       360.850    
  34  0.157494      -1.84837      -176.348       176.348       317.896       494.244    
  35  0.695323     -0.363378      -34.6690       34.6690       320.591       355.260    
  36  0.792798     -0.232186      -22.1523       22.1523       276.173       298.325    
  37  0.940634     -0.612017E-01  -5.83910       5.83910       318.025       323.864    
  38  0.750008     -0.287672      -27.4461       27.4461       315.543       342.989    
  39  0.298939E-01  -3.51010      -334.890       334.890       325.264       660.154    
  40  0.633510     -0.456480      -43.5516       43.5516       300.437       343.988    
  41  0.465723     -0.764164      -72.9070       72.9070       312.764       385.671    
  42  0.916259     -0.874560E-01  -8.34396       8.34396       333.837       342.181    
  43  0.451376     -0.795456      -75.8925       75.8925       354.393       430.286    
  44  0.414090     -0.881672      -84.1182       84.1182       318.025       402.143    
  45  0.273092      -1.29795      -123.834       123.834       332.461       456.295    
  46  0.361379      -1.01783      -97.1084       97.1084       319.594       416.702    
  47  0.548848     -0.599934      -57.2382       57.2382       314.940       372.178    
  48  0.832309     -0.183552      -17.5123       17.5123       316.952       334.464    
  49  0.673017     -0.395985      -37.7799       37.7799       317.923       355.703    
  50  0.692516     -0.367425      -35.0551       35.0551       329.961       365.017    
  51  0.354468E-01  -3.33972      -318.635       318.635       308.952       627.587    
  52  0.987850     -0.122240E-01  -1.16626       1.16626       315.864       317.031    
  53  0.659676     -0.416007      -39.6902       39.6902       322.677       362.367    
  54  0.276145      -1.28683      -122.773       122.773       311.882       434.655    
  55  0.426927     -0.851141      -81.2053       81.2053       319.305       400.510    
  56  0.221817      -1.50590      -143.674       143.674       319.053       462.727    
  57  0.911956     -0.921634E-01  -8.79309       8.79309       411.198       419.991    
  58  0.791973     -0.233228      -22.2517       22.2517       317.711       339.962    
  59  0.805447     -0.216358      -20.6422       20.6422       316.943       337.585    
  60  0.887840     -0.118963      -11.3500       11.3500       326.468       337.818    
  61  0.978176     -0.220657E-01  -2.10523       2.10523       313.360       315.465    
  62  0.539899     -0.616372      -58.8066       58.8066       315.769       374.576    
  63  0.313742      -1.15918      -110.595       110.595       313.152       423.747    
  64  0.355768      -1.03348      -98.6014       98.6014       318.256       416.857    
  65  0.413366     -0.883423      -84.2852       84.2852       469.164       553.449    
  66  0.352288      -1.04331      -99.5392       99.5392       310.973       410.512    
  67  0.269512      -1.31114      -125.093       125.093       414.704       539.797    
  68  0.841976E-01  -2.47459      -236.094       236.094       319.482       555.576    
  69  0.964450     -0.361976E-01  -3.45352       3.45352       361.180       364.633    
  70  0.554883     -0.588998      -56.1948       56.1948       317.931       374.126    
  71  0.192411      -1.64812      -157.243       157.243       318.942       476.185    
  72  0.834093     -0.181411      -17.3079       17.3079       325.871       343.179    
  73  0.606638     -0.499823      -47.6869       47.6869       558.181       605.868    
  74  0.181851E-01  -4.00716      -382.313       382.313       495.150       877.462    
  75  0.963499     -0.371840E-01  -3.54764       3.54764       321.375       324.923    
  76  0.178061      -1.72563      -164.638       164.638       317.674       482.312    
  77  0.186011      -1.68195      -160.471       160.471       323.295       483.765    
  78  0.144531      -1.93426      -184.543       184.543       487.955       672.499    
  79  0.315860      -1.15246      -109.953       109.953       290.928       400.881    
loop,thermsimp(1:2)        4   11.8460       207.034    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        419.58         87.46          1.13         40.05          1.00          0.05        129.70
Just calling func    0   0        129.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    419.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        4
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        5
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       86     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -3.08432       3.08432       276.173       279.257    
   2  0.384676     -0.955353      -91.1479       91.1479       313.360       404.508    
   3  0.472770     -0.749146      -71.4742       71.4742       315.864       387.339    
   4  0.131186      -2.03114      -193.786       193.786       310.888       504.674    
   5  0.387497     -0.948046      -90.4508       90.4508       318.025       408.476    
   6  0.474858     -0.744739      -71.0537       71.0537       321.375       392.429    
   7  0.654056     -0.424563      -40.5065       40.5065       313.757       354.264    
   8  0.375266     -0.980119      -93.5107       93.5107       314.971       408.481    
   9  0.605577     -0.501574      -47.8539       47.8539       316.952       364.806    
  10  0.485605     -0.722360      -68.9186       68.9186       316.943       385.862    
  11  0.503843     -0.685490      -65.4010       65.4010       326.468       391.869    
  12  0.374521     -0.982108      -93.7005       93.7005       317.711       411.411    
  13  0.955542E-01  -2.34806      -224.023       224.023       314.057       538.080    
  14  0.902567     -0.102512      -9.78043       9.78043       333.837       343.618    
  15  0.347215      -1.05781      -100.923       100.923       315.543       416.466    
  16  0.893138     -0.113014      -10.7824       10.7824       305.147       315.929    
  17  0.561145     -0.577776      -55.1241       55.1241       325.871       380.995    
  18  0.667287     -0.404536      -38.5958       38.5958       300.437       339.033    
  19  0.601102     -0.508991      -48.5616       48.5616       318.008       366.570    
  20  0.569928     -0.562245      -53.6424       53.6424       320.536       374.178    
  21  0.655926     -0.421708      -40.2341       40.2341       319.172       359.406    
  22  0.355892      -1.03313      -98.5681       98.5681       320.591       419.159    
  23  0.208013      -1.57015      -149.804       149.804       317.923       467.728    
  24  0.879772     -0.128093      -12.2210       12.2210       317.736       329.957    
  25  0.114206E-01  -4.47233      -426.694       426.694       318.381       745.075    
  26  0.950245     -0.510357E-01  -4.86919       4.86919       319.358       324.227    
  27  0.321268      -1.13548      -108.333       108.333       322.677       431.010    
  28  0.379005     -0.970207      -92.5651       92.5651       318.545       411.110    
  29  0.117960      -2.13741      -203.925       203.925       361.180       565.105    
  30  0.822558     -0.195337      -18.6366       18.6366       329.961       348.598    
  31  0.671085     -0.398860      -38.0543       38.0543       314.940       352.994    
  32  0.220279      -1.51286      -144.338       144.338       319.165       463.503    
  33  0.836335     -0.178727      -17.0519       17.0519       317.931       334.983    
  34  0.982442E-01  -2.32030      -221.374       221.374       315.769       537.143    
  35  0.912526     -0.915389E-01  -8.73350       8.73350       317.507       326.241    
  36  0.758802     -0.276015      -26.3339       26.3339       317.094       343.428    
  37  0.562651     -0.575096      -54.8685       54.8685       320.091       374.960    
  38  0.248142      -1.39375      -132.975       132.975       318.052       451.027    
  39  0.864881     -0.145163      -13.8497       13.8497       312.764       326.614    
  40  0.495151     -0.702893      -67.0613       67.0613       322.405       389.467    
  41  0.112352E-01  -4.48870      -428.256       428.256       319.716       747.972    
  42  0.745500     -0.293700      -28.0212       28.0212       318.671       346.692    
  43  0.405071     -0.903693      -86.2191       86.2191       319.305       405.524    
  44  0.617259     -0.482466      -46.0309       46.0309       290.928       336.959    
  45  0.992755     -0.727089E-02 -0.693698      0.693698       318.025       318.719    
  46  0.888739     -0.117952      -11.2535       11.2535       313.807       325.061    
  47  0.976701     -0.235748E-01  -2.24921       2.24921       310.973       313.222    
  48  0.461976     -0.772242      -73.6777       73.6777       319.594       393.272    
  49  0.150581      -1.89325      -180.630       180.630       318.256       498.886    
  50  0.726286E-01  -2.62240      -250.196       250.196       411.198       661.394    
  51  0.280837      -1.26998      -121.166       121.166       313.152       434.318    
  52  0.727959     -0.317510      -30.2928       30.2928       354.393       384.686    
  53  0.565225     -0.570532      -54.4330       54.4330       311.882       366.315    
  54  0.884775     -0.122422      -11.6800       11.6800       321.000       332.680    
  55  0.289837      -1.23844      -118.156       118.156       332.461       450.618    
  56  0.282389      -1.26447      -120.640       120.640       317.372       438.012    
  57  0.737455     -0.304550      -29.0564       29.0564       319.053       348.109    
  58  0.436668E-02  -5.43375      -518.421       518.421       318.025       836.446    
  59  0.809492     -0.211348      -20.1642       20.1642       323.786       343.950    
  60  0.957786E-01  -2.34572      -223.799       223.799       318.942       542.741    
  61  0.335750      -1.09139      -104.127       104.127       317.674       421.801    
  62  0.687327     -0.374945      -35.7726       35.7726       323.295       359.067    
  63  0.340103      -1.07851      -102.898       102.898       332.752       435.650    
  64  0.902520     -0.102564      -9.78538       9.78538       317.896       327.681    
  65  0.872595     -0.136284      -13.0025       13.0025       325.716       338.718    
  66  0.773535     -0.256784      -24.4992       24.4992       319.806       344.305    
  67  0.627340     -0.466267      -44.4854       44.4854       312.134       356.619    
  68  0.918418     -0.851028E-01  -8.11945       8.11945       414.704       422.823    
  69  0.347451      -1.05713      -100.858       100.858       317.888       418.746    
  70  0.962049     -0.386898E-01  -3.69130       3.69130       469.164       472.855    
  71  0.716962     -0.332732      -31.7452       31.7452       319.482       351.227    
  72  0.423789     -0.858520      -81.9093       81.9093       327.487       409.396    
  73  0.899832E-01  -2.40813      -229.754       229.754       558.181       787.935    
  74  0.770387     -0.260863      -24.8883       24.8883       344.821       369.709    
  75  0.746172     -0.292799      -27.9352       27.9352       308.952       336.887    
  76  0.696546     -0.361622      -34.5015       34.5015       325.264       359.765    
  77  0.486248     -0.721037      -68.7923       68.7923       487.955       556.748    
  78  0.797666     -0.226066      -21.5684       21.5684       318.025       339.594    
  79  0.196384      -1.62769      -155.293       155.293       419.579       574.873    
loop,thermsimp(1:2)        5   3.08432       91.1479    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88        287.00         87.38          1.12         40.00          1.18          0.05        129.73
Just calling func    0   0        129.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89        272.21         87.46          1.13         40.20          0.81          0.05        129.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    272.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        5
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        6
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       88     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -20.5491       20.5491       276.173       296.722    
   2  0.337878      -1.08507      -103.524       103.524       310.973       414.497    
   3  0.930612     -0.719127E-01  -6.86101       6.86101       305.147       312.008    
   4  0.843645     -0.170024      -16.2216       16.2216       318.025       334.247    
   5  0.757799     -0.277337      -26.4600       26.4600       319.358       345.818    
   6  0.627925     -0.465335      -44.3965       44.3965       313.807       358.203    
   7  0.412314     -0.885971      -84.5283       84.5283       317.507       402.036    
   8  0.282274      -1.26488      -120.679       120.679       312.764       433.443    
   9  0.426609E-01  -3.15447      -300.961       300.961       317.896       618.856    
  10  0.484876     -0.723862      -69.0619       69.0619       317.736       386.798    
  11  0.372210     -0.988296      -94.2909       94.2909       321.000       415.291    
  12  0.740507     -0.300421      -28.6624       28.6624       317.931       346.594    
  13  0.361519      -1.01744      -97.0716       97.0716       308.952       406.024    
  14  0.421034     -0.865042      -82.5315       82.5315       290.928       373.459    
  15  0.780595     -0.247699      -23.6324       23.6324       325.716       349.348    
  16  0.758410     -0.276531      -26.3831       26.3831       300.437       326.820    
  17  0.522921E-01  -2.95091      -281.539       281.539       318.025       599.564    
  18  0.609673     -0.494833      -47.2108       47.2108       317.094       364.305    
  19  0.204029      -1.58949      -151.649       151.649       333.837       485.487    
  20  0.516385     -0.660902      -63.0550       63.0550       323.786       386.841    
  21  0.323918      -1.12726      -107.549       107.549       319.806       427.356    
  22  0.671820     -0.397765      -37.9498       37.9498       318.671       356.620    
  23  0.850344     -0.162114      -15.4669       15.4669       319.053       334.520    
  24  0.515631     -0.662364      -63.1945       63.1945       329.961       393.156    
  25  0.919408     -0.840249E-01  -8.01661       8.01661       319.482       327.498    
  26  0.516519     -0.660643      -63.0303       63.0303       314.940       377.970    
  27  0.986900     -0.131869E-01  -1.25813       1.25813       313.757       315.015    
  28  0.127351      -2.06081      -196.617       196.617       312.134       508.750    
  29  0.775028E-01  -2.55744      -243.999       243.999       323.295       567.294    
  30  0.778307     -0.250634      -23.9124       23.9124       319.172       343.085    
  31  0.548570     -0.600441      -57.2866       57.2866       325.264       382.550    
  32  0.191672      -1.65197      -157.610       157.610       316.952       474.562    
  33  0.593733     -0.521326      -49.7384       49.7384       311.882       361.620    
  34  0.612853     -0.489631      -46.7145       46.7145       318.008       364.723    
  35  0.872749     -0.136107      -12.9856       12.9856       344.821       357.806    
  36  0.291105E-01  -3.53666      -337.424       337.424       320.536       657.960    
  37  0.310804      -1.16859      -111.493       111.493       320.091       431.584    
  38  0.238051      -1.43527      -136.936       136.936       325.871       462.807    
  39  0.600295     -0.510334      -48.6897       48.6897       354.393       403.083    
  40  0.856575     -0.154813      -14.7703       14.7703       316.943       331.714    
  41  0.127990      -2.05580      -196.139       196.139       315.864       512.004    
  42  0.390396E-01  -3.24318      -309.424       309.424       322.405       631.829    
  43  0.469298E-01  -3.05910      -291.862       291.862       326.468       618.330    
  44  0.170208      -1.77073      -168.941       168.941       321.375       490.316    
  45  0.457801     -0.781320      -74.5438       74.5438       319.594       394.138    
  46  0.451589     -0.794982      -75.8473       75.8473       313.360       389.207    
  47  0.601844     -0.507757      -48.4438       48.4438       319.305       367.749    
  48  0.923684     -0.793857E-01  -7.57400       7.57400       318.025       325.599    
  49  0.113154      -2.17901      -207.894       207.894       314.971       522.864    
  50  0.652894     -0.426340      -40.6761       40.6761       327.487       368.163    
  51  0.600010     -0.510809      -48.7350       48.7350       318.545       367.280    
  52  0.768679     -0.263082      -25.1000       25.1000       317.711       342.811    
  53  0.999310     -0.690144E-03 -0.658450E-01  0.658450E-01   315.543       315.609    
  54  0.798907     -0.224511      -21.4200       21.4200       317.888       339.308    
  55  0.246243      -1.40144      -133.708       133.708       320.591       454.299    
  56  0.798424     -0.225115      -21.4777       21.4777       317.674       339.152    
  57  0.120926      -2.11257      -201.555       201.555       414.704       616.259    
  58  0.771675     -0.259192      -24.7289       24.7289       322.677       347.405    
  59  0.670629     -0.399540      -38.1191       38.1191       313.152       351.271    
  60  0.127505      -2.05960      -196.501       196.501       332.752       529.253    
  61  0.375387     -0.979799      -93.4802       93.4802       317.372       410.853    
  62  0.572534E-01  -2.86027      -272.891       272.891       332.461       605.353    
  63  0.358654      -1.02540      -97.8306       97.8306       318.052       415.883    
  64  0.903087     -0.101937      -9.72555       9.72555       319.165       328.890    
  65  0.112925      -2.18103      -208.087       208.087       317.923       526.010    
  66  0.727950     -0.317523      -30.2941       30.2941       469.164       499.458    
  67  0.703618E-01  -2.65411      -253.222       253.222       318.256       571.477    
  68  0.461106     -0.774128      -73.8576       73.8576       310.888       384.746    
  69  0.546854     -0.603573      -57.5854       57.5854       315.769       373.355    
  70  0.264522      -1.32983      -126.876       126.876       314.057       440.933    
  71  0.562280     -0.575755      -54.9314       54.9314       318.942       373.873    
  72  0.745931     -0.293123      -27.9661       27.9661       487.955       515.921    
  73  0.753398E-01  -2.58575      -246.700       246.700       361.180       607.879    
  74  0.150464E-01  -4.19662      -400.389       400.389       419.579       819.968    
  75  0.237963      -1.43564      -136.971       136.971       411.198       548.169    
  76  0.310733      -1.16882      -111.514       111.514       318.381       429.895    
  77  0.871120     -0.137975      -13.1639       13.1639       319.716       332.880    
  78  0.610203     -0.493964      -47.1279       47.1279       558.181       605.309    
  79  0.600732     -0.509607      -48.6203       48.6203       272.208       320.828    
loop,thermsimp(1:2)        6   20.5491       103.524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90        501.43         87.20          1.12         39.82          1.67          0.05        129.86
Just calling func    0   0        129.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91       1062.89         87.00          1.17         40.10          0.53          0.05        128.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    501.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        6
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        7
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       90     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -204.124       204.124       276.173       480.297    
   2  0.421875     -0.863045      -82.3411       82.3411       305.147       387.488    
   3  0.700103     -0.356528      -34.0155       34.0155       313.757       347.773    
   4  0.209367      -1.56367      -149.186       149.186       315.543       464.729    
   5  0.117251      -2.14344      -204.500       204.500       272.208       476.708    
   6  0.898330     -0.107218      -10.2294       10.2294       318.025       328.255    
   7  0.209806      -1.56157      -148.986       148.986       300.437       449.423    
   8  0.917155     -0.864790E-01  -8.25075       8.25075       319.482       327.732    
   9  0.120514E-01  -4.41857      -421.565       421.565       319.165       740.730    
  10  0.189983      -1.66082      -158.455       158.455       316.943       475.398    
  11  0.257131      -1.35817      -129.579       129.579       319.716       449.295    
  12  0.913158E-01  -2.39343      -228.351       228.351       318.025       546.377    
  13  0.336531      -1.08906      -103.905       103.905       319.053       422.958    
  14  0.318351      -1.14460      -109.204       109.204       317.674       426.878    
  15  0.919606     -0.838101E-01  -7.99611       7.99611       317.888       325.884    
  16  0.719771E-01  -2.63141      -251.056       251.056       317.711       568.767    
  17  0.788730E-01  -2.53992      -242.327       242.327       319.172       561.500    
  18  0.905929     -0.987941E-01  -9.42570       9.42570       319.358       328.784    
  19  0.665501     -0.407215      -38.8514       38.8514       317.931       356.783    
  20  0.812159     -0.208059      -19.8504       19.8504       322.677       342.527    
  21  0.412726E-01  -3.18756      -304.117       304.117       325.716       629.833    
  22  0.256064      -1.36233      -129.976       129.976       313.152       443.128    
  23  0.277519      -1.28187      -122.300       122.300       318.671       440.970    
  24  0.279550      -1.27457      -121.604       121.604       344.821       466.425    
  25  0.857884     -0.153286      -14.6247       14.6247       313.807       328.432    
  26  0.205158      -1.58398      -151.123       151.123       311.882       463.005    
  27  0.482085     -0.729635      -69.6127       69.6127       317.094       386.707    
  28  0.494966E-01  -3.00585      -286.781       286.781       318.008       604.789    
  29  0.338791      -1.08237      -103.267       103.267       318.545       421.811    
  30  0.249491E-01  -3.69092      -352.141       352.141       319.305       671.446    
  31  0.480710     -0.732491      -69.8852       69.8852       327.487       397.372    
  32  0.908951E-01  -2.39805      -228.792       228.792       315.769       544.561    
  33  0.283223      -1.26152      -120.359       120.359       290.928       411.286    
  34  0.277734      -1.28109      -122.226       122.226       318.942       441.168    
  35  0.504407     -0.684372      -65.2943       65.2943       314.940       380.234    
  36  0.251881      -1.37880      -131.548       131.548       325.264       456.811    
  37  0.568193     -0.565294      -53.9333       53.9333       310.888       364.822    
  38  0.186135      -1.68128      -160.407       160.407       317.736       478.143    
  39  0.964582     -0.360604E-01  -3.44044       3.44044       323.786       327.227    
  40  0.493045     -0.707155      -67.4679       67.4679       313.360       380.828    
  41  0.477950     -0.738248      -70.4345       70.4345       329.961       400.396    
  42  0.114879      -2.16388      -206.450       206.450       319.594       526.044    
  43  0.324003      -1.12700      -107.524       107.524       317.507       425.032    
  44  0.720573     -0.327708      -31.2658       31.2658       354.393       385.659    
  45  0.934913     -0.673019E-01  -6.42111       6.42111       308.952       315.373    
  46  0.516467     -0.660745      -63.0400       63.0400       317.372       380.412    
  47  0.351513      -1.04551      -99.7493       99.7493       310.973       410.722    
  48  0.310221      -1.17047      -111.672       111.672       321.000       432.672    
  49  0.467571     -0.760204      -72.5292       72.5292       318.052       390.582    
  50  0.700644     -0.355756      -33.9418       33.9418       319.806       353.748    
  51  0.608579E-01  -2.79921      -267.066       267.066       318.381       585.447    
  52  0.360106      -1.02136      -97.4452       97.4452       320.091       417.536    
  53  0.355744      -1.03354      -98.6080       98.6080       312.764       411.372    
  54  0.356778      -1.03064      -98.3309       98.3309       314.057       412.388    
  55  0.209214      -1.56440      -149.255       149.255       320.591       469.847    
  56  0.513034     -0.667413      -63.6763       63.6763       325.871       389.547    
  57  0.131750      -2.02685      -193.377       193.377       316.952       510.328    
  58  0.860948     -0.149721      -14.2845       14.2845       333.837       348.122    
  59  0.245301      -1.40527      -134.073       134.073       321.375       455.448    
  60  0.411604     -0.887695      -84.6928       84.6928       469.164       553.856    
  61  0.444838     -0.810046      -77.2845       77.2845       312.134       389.418    
  62  0.173997      -1.74872      -166.841       166.841       315.864       482.705    
  63  0.616177     -0.484222      -46.1984       46.1984       487.955       534.154    
  64  0.794601     -0.229915      -21.9356       21.9356       314.971       336.906    
  65  0.926158     -0.767101E-01  -7.31872       7.31872       317.923       325.242    
  66  0.614053     -0.487673      -46.5277       46.5277       332.752       379.280    
  67  0.228742      -1.47516      -140.741       140.741       411.198       551.939    
  68  0.162916      -1.81452      -173.119       173.119       323.295       496.414    
  69  0.437909     -0.825744      -78.7822       78.7822       318.256       397.038    
  70  0.966188     -0.343970E-01  -3.28173       3.28173       318.025       321.307    
  71  0.756703     -0.278785      -26.5982       26.5982       558.181       584.779    
  72  0.537306     -0.621187      -59.2659       59.2659       332.461       391.727    
  73  0.544827     -0.607287      -57.9397       57.9397       361.180       419.119    
  74  0.452750     -0.792414      -75.6023       75.6023       414.704       490.306    
  75  0.951192E-01  -2.35262      -224.458       224.458       326.468       550.926    
  76  0.970150     -0.303043E-01  -2.89126       2.89126       317.896       320.787    
  77  0.645255     -0.438110      -41.7990       41.7990       322.405       364.204    
  78  0.442258     -0.815862      -77.8394       77.8394       320.536       398.375    
  79  0.571943     -0.558716      -53.3058       53.3058       501.425       554.731    
loop,thermsimp(1:2)        7   204.124       82.3411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92        288.95         87.36          1.14         40.12          0.82          0.05        129.50
Just calling func    0   0        129.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93        294.14         87.23          1.11         39.79          1.45          0.05        129.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    288.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        7
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        8
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       92     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -68.5664       68.5664       308.952       377.518    
   2  0.568497     -0.564760      -53.8824       53.8824       317.896       371.778    
   3  0.632037E-01  -2.76139      -263.458       263.458       318.025       581.483    
   4  0.184325      -1.69105      -161.339       161.339       317.923       479.263    
   5  0.949772     -0.515332E-01  -4.91665       4.91665       317.888       322.804    
   6  0.512179     -0.669081      -63.8354       63.8354       323.786       387.621    
   7  0.573767     -0.555532      -53.0019       53.0019       319.482       372.484    
   8  0.590189     -0.527312      -50.3096       50.3096       318.025       368.335    
   9  0.323917      -1.12727      -107.550       107.550       313.807       421.357    
  10  0.246420E-01  -3.70330      -353.323       353.323       319.358       672.681    
  11  0.923153E-01  -2.38255      -227.313       227.313       314.971       542.283    
  12  0.236043      -1.44374      -137.744       137.744       322.677       460.420    
  13  0.885388     -0.121730      -11.6139       11.6139       313.757       325.371    
  14  0.617726     -0.481710      -45.9588       45.9588       333.837       379.796    
  15  0.349992      -1.04985      -100.163       100.163       319.806       419.970    
  16  0.892028     -0.114257      -10.9010       10.9010       317.931       328.832    
  17  0.382423     -0.961227      -91.7083       91.7083       322.405       414.114    
  18  0.850527     -0.161899      -15.4464       15.4464       310.888       326.335    
  19  0.653461     -0.425472      -40.5932       40.5932       332.752       373.345    
  20  0.413959     -0.881988      -84.1483       84.1483       314.940       399.088    
  21  0.807813     -0.213424      -20.3623       20.3623       317.372       337.735    
  22  0.348045      -1.05542      -100.695       100.695       313.360       414.055    
  23  0.435267     -0.831795      -79.3595       79.3595       354.393       433.753    
  24  0.434284     -0.834056      -79.5752       79.5752       317.094       396.669    
  25  0.983564     -0.165728E-01  -1.58117       1.58117       305.147       306.728    
  26  0.545923     -0.605277      -57.7480       57.7480       312.134       369.882    
  27  0.227140      -1.48219      -141.412       141.412       325.871       467.283    
  28  0.965085     -0.355395E-01  -3.39074       3.39074       318.052       321.443    
  29  0.183882      -1.69346      -161.569       161.569       332.461       494.030    
  30  0.187300E-02  -6.28022      -599.180       599.180       318.256       917.436    
  31  0.428736     -0.846914      -80.8020       80.8020       327.487       408.289    
  32  0.459764     -0.777041      -74.1356       74.1356       320.536       394.671    
  33  0.914786     -0.890649E-01  -8.49746       8.49746       329.961       338.459    
  34  0.872236     -0.136696      -13.0418       13.0418       310.973       324.015    
  35  0.789367     -0.236524      -22.5662       22.5662       290.928       313.494    
  36  0.619233E-01  -2.78186      -265.410       265.410       312.764       578.174    
  37  0.138004E-01  -4.28306      -408.636       408.636       314.057       722.693    
  38  0.287035      -1.24815      -119.083       119.083       320.091       439.174    
  39  0.138758E-01  -4.27761      -408.116       408.116       361.180       769.296    
  40  0.593330     -0.522005      -49.8032       49.8032       318.545       368.348    
  41  0.399445     -0.917679      -87.5535       87.5535       319.053       406.606    
  42  0.982947     -0.172001E-01  -1.64102       1.64102       317.507       319.148    
  43  0.259534      -1.34887      -128.692       128.692       317.674       446.366    
  44  0.816592E-01  -2.50520      -239.015       239.015       321.000       560.015    
  45  0.166083      -1.79527      -171.282       171.282       318.671       489.953    
  46  0.967370     -0.331741E-01  -3.16506       3.16506       318.942       322.107    
  47  0.371024     -0.991488      -94.5954       94.5954       313.152       407.748    
  48  0.941964     -0.597885E-01  -5.70428       5.70428       319.716       325.420    
  49  0.130219      -2.03854      -194.492       194.492       300.437       494.928    
  50  0.599455     -0.511734      -48.8233       48.8233       321.375       370.198    
  51  0.519323     -0.655230      -62.5139       62.5139       325.264       387.778    
  52  0.829175     -0.187324      -17.8722       17.8722       311.882       329.754    
  53  0.341525      -1.07433      -102.500       102.500       315.543       418.043    
  54  0.686480     -0.376178      -35.8902       35.8902       344.821       380.711    
  55  0.273157      -1.29771      -123.811       123.811       320.591       444.402    
  56  0.472999     -0.748662      -71.4280       71.4280       316.943       388.371    
  57  0.591611     -0.524905      -50.0799       50.0799       272.208       322.288    
  58  0.253673      -1.37171      -130.871       130.871       317.736       448.608    
  59  0.522398     -0.649326      -61.9506       61.9506       276.173       338.123    
  60  0.927744     -0.749995E-01  -7.15552       7.15552       315.864       323.020    
  61  0.470581     -0.753787      -71.9170       71.9170       414.704       486.621    
  62  0.365015      -1.00782      -96.1533       96.1533       323.295       419.448    
  63  0.732288     -0.311582      -29.7273       29.7273       316.952       346.679    
  64  0.536772E-01  -2.92477      -279.045       279.045       319.594       598.639    
  65  0.725826     -0.320444      -30.5728       30.5728       487.955       518.528    
  66  0.806822     -0.214652      -20.4794       20.4794       315.769       336.249    
  67  0.104580E-01  -4.56039      -435.096       435.096       318.025       753.121    
  68  0.818881     -0.199816      -19.0640       19.0640       326.468       345.532    
  69  0.330445      -1.10732      -105.646       105.646       411.198       516.844    
  70  0.316989      -1.14889      -109.613       109.613       469.164       578.776    
  71  0.776875     -0.252476      -24.0881       24.0881       501.425       525.513    
  72  0.782540     -0.245210      -23.3949       23.3949       319.172       342.567    
  73  0.972988     -0.273831E-01  -2.61255       2.61255       317.711       320.323    
  74  0.567786E-01  -2.86860      -273.686       273.686       558.181       831.867    
  75  0.111463      -2.19406      -209.330       209.330       318.381       527.711    
  76  0.109413      -2.21263      -211.101       211.101       318.008       529.110    
  77  0.900240     -0.105094      -10.0268       10.0268       325.716       335.743    
  78  0.153236      -1.87578      -178.963       178.963       319.305       498.268    
  79  0.967387     -0.331562E-01  -3.16335       3.16335       288.946       292.109    
loop,thermsimp(1:2)        8   68.5664       53.8824    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        290.27         87.45          1.13         39.98          1.06          0.05        129.67
Just calling func    0   0        129.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95        300.01         87.29          1.13         40.02          1.25          0.05        129.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    290.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        8
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:        9
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       94     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -232.066       232.066       288.946       521.012    
   2  0.192227      -1.64908      -157.335       157.335       305.147       462.481    
   3  0.872733     -0.136126      -12.9875       12.9875       290.928       303.915    
   4  0.444113     -0.811675      -77.4399       77.4399       317.507       394.947    
   5  0.194382      -1.63793      -156.271       156.271       317.711       473.982    
   6  0.358074      -1.02702      -97.9852       97.9852       318.052       416.038    
   7  0.461693     -0.772855      -73.7362       73.7362       318.942       392.678    
   8  0.180202      -1.71368      -163.498       163.498       272.208       435.706    
   9  0.944954     -0.566187E-01  -5.40186       5.40186       317.888       323.289    
  10  0.738770     -0.302769      -28.8864       28.8864       315.864       344.751    
  11  0.822491E-01  -2.49800      -238.328       238.328       310.973       549.301    
  12  0.313602      -1.15963      -110.637       110.637       313.757       424.395    
  13  0.978185     -0.220567E-01  -2.10438       2.10438       319.716       321.820    
  14  0.540591E-01  -2.91768      -278.369       278.369       310.888       589.257    
  15  0.872885     -0.135951      -12.9708       12.9708       317.931       330.902    
  16  0.209079      -1.56504      -149.317       149.317       311.882       461.199    
  17  0.789205E-01  -2.53931      -242.270       242.270       325.716       567.986    
  18  0.746404     -0.292489      -27.9056       27.9056       315.769       343.675    
  19  0.110219      -2.20529      -210.401       210.401       317.372       527.774    
  20  0.656016     -0.421570      -40.2209       40.2209       276.173       316.394    
  21  0.665675     -0.406953      -38.8264       38.8264       329.961       368.788    
  22  0.563292     -0.573957      -54.7598       54.7598       319.172       373.932    
  23  0.615044     -0.486062      -46.3739       46.3739       326.468       372.842    
  24  0.128081      -2.05509      -196.071       196.071       316.952       513.023    
  25  0.459916     -0.776711      -74.1041       74.1041       318.025       392.129    
  26  0.433297     -0.836332      -79.7924       79.7924       318.545       398.337    
  27  0.225675      -1.48866      -142.029       142.029       312.134       454.163    
  28  0.808805     -0.212197      -20.2452       20.2452       321.375       341.620    
  29  0.578238     -0.547770      -52.2613       52.2613       317.896       370.157    
  30  0.569572     -0.562871      -53.7021       53.7021       319.482       373.184    
  31  0.291272      -1.23350      -117.685       117.685       332.752       450.437    
  32  0.144426      -1.93499      -184.612       184.612       308.952       493.564    
  33  0.908321     -0.961572E-01  -9.17412       9.17412       333.837       343.011    
  34  0.593166     -0.522281      -49.8296       49.8296       344.821       394.650    
  35  0.327630      -1.11587      -106.463       106.463       323.786       430.249    
  36  0.823214E-01  -2.49712      -238.245       238.245       325.264       563.508    
  37  0.742531     -0.297691      -28.4020       28.4020       316.943       345.345    
  38  0.476201E-01  -3.04450      -290.468       290.468       320.536       611.004    
  39  0.183829      -1.69375      -161.597       161.597       317.094       478.691    
  40  0.417257     -0.874053      -83.3912       83.3912       314.940       398.331    
  41  0.647723E-01  -2.73688      -261.119       261.119       319.053       580.172    
  42  0.123950E-01  -4.39046      -418.883       418.883       313.152       732.035    
  43  0.281372E-01  -3.57066      -340.668       340.668       327.487       668.155    
  44  0.883044     -0.124380      -11.8668       11.8668       313.360       325.227    
  45  0.445413     -0.808754      -77.1612       77.1612       322.405       399.566    
  46  0.418101     -0.872031      -83.1983       83.1983       315.543       398.742    
  47  0.301534      -1.19887      -114.382       114.382       323.295       437.676    
  48  0.674500     -0.393783      -37.5699       37.5699       319.806       357.376    
  49  0.732783     -0.310905      -29.6627       29.6627       313.807       343.470    
  50  0.970355     -0.300929E-01  -2.87109       2.87109       354.393       357.264    
  51  0.981589     -0.185824E-01  -1.77290       1.77290       320.091       321.864    
  52  0.677253     -0.389711      -37.1813       37.1813       320.591       357.772    
  53  0.800731     -0.222230      -21.2024       21.2024       317.674       338.877    
  54  0.529544     -0.635738      -60.6542       60.6542       317.736       378.390    
  55  0.814619     -0.205035      -19.5618       19.5618       322.677       342.238    
  56  0.909218     -0.951702E-01  -9.07995       9.07995       325.871       334.951    
  57  0.269472      -1.31129      -125.107       125.107       317.923       443.031    
  58  0.166504      -1.79274      -171.041       171.041       414.704       585.745    
  59  0.328775      -1.11238      -106.130       106.130       318.671       424.800    
  60  0.333602      -1.09781      -104.739       104.739       332.461       437.200    
  61  0.213893      -1.54228      -147.145       147.145       300.437       447.582    
  62  0.401720     -0.911999      -87.0116       87.0116       319.305       406.317    
  63  0.453769     -0.790168      -75.3880       75.3880       411.198       486.586    
  64  0.649690E-01  -2.73384      -260.829       260.829       487.955       748.785    
  65  0.510128     -0.673093      -64.2182       64.2182       501.425       565.643    
  66  0.430053     -0.843847      -80.5094       80.5094       318.381       398.890    
  67  0.528469E-01  -2.94036      -280.532       280.532       318.008       598.540    
  68  0.887506     -0.119339      -11.3859       11.3859       314.971       326.356    
  69  0.499442     -0.694264      -66.2380       66.2380       321.000       387.238    
  70  0.432451     -0.838287      -79.9789       79.9789       312.764       392.743    
  71  0.637121     -0.450796      -43.0093       43.0093       469.164       512.173    
  72  0.523182     -0.647826      -61.8075       61.8075       318.025       379.833    
  73  0.221333      -1.50809      -143.883       143.883       319.594       463.477    
  74  0.597769     -0.514551      -49.0920       49.0920       319.358       368.450    
  75  0.886305     -0.120694      -11.5151       11.5151       314.057       325.572    
  76  0.306306      -1.18317      -112.884       112.884       318.025       430.909    
  77  0.341612      -1.07408      -102.475       102.475       361.180       463.655    
  78  0.388979     -0.944230      -90.0866       90.0866       558.181       648.268    
  79  0.274361      -1.29331      -123.391       123.391       290.274       413.666    
loop,thermsimp(1:2)        9   232.066       157.335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96        568.24         87.52          1.13         40.36          0.62          0.04        129.67
Just calling func    0   0        129.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    568.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:        9
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       10
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       95     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -46.8775       46.8775       290.928       337.805    
   2  0.877337     -0.130865      -12.4855       12.4855       276.173       288.658    
   3  0.821280     -0.196891      -18.7849       18.7849       319.716       338.501    
   4  0.989636     -0.104181E-01 -0.993966      0.993966       320.091       321.085    
   5  0.492813     -0.707625      -67.5128       67.5128       317.888       385.400    
   6  0.904083     -0.100835      -9.62038       9.62038       313.360       322.980    
   7  0.490620     -0.712086      -67.9384       67.9384       314.057       381.995    
   8  0.572439     -0.557850      -53.2231       53.2231       314.971       368.194    
   9  0.588753     -0.529749      -50.5421       50.5421       317.931       368.473    
  10  0.341799      -1.07353      -102.423       102.423       325.871       428.294    
  11  0.449605     -0.799385      -76.2674       76.2674       317.674       393.942    
  12  0.740720     -0.300132      -28.6349       28.6349       321.375       350.010    
  13  0.173164E-01  -4.05610      -386.983       386.983       322.677       709.659    
  14  0.828389     -0.188272      -17.9626       17.9626       333.837       351.800    
  15  0.110451      -2.20318      -210.200       210.200       313.807       524.007    
  16  0.646816     -0.435693      -41.5684       41.5684       315.769       357.338    
  17  0.857676     -0.153529      -14.6478       14.6478       315.864       330.512    
  18  0.691202E-02  -4.97449      -474.604       474.604       316.943       791.547    
  19  0.530885     -0.633210      -60.4130       60.4130       354.393       414.806    
  20  0.742957     -0.297117      -28.3472       28.3472       319.806       348.154    
  21  0.883526E-01  -2.42642      -231.499       231.499       320.591       552.090    
  22  0.599138     -0.512263      -48.8737       48.8737       319.358       368.232    
  23  0.476407     -0.741482      -70.7430       70.7430       329.961       400.704    
  24  0.509994E-01  -2.97594      -283.927       283.927       317.896       601.823    
  25  0.669768     -0.400824      -38.2417       38.2417       326.468       364.710    
  26  0.874430     -0.134183      -12.8020       12.8020       319.482       332.284    
  27  0.830739     -0.185440      -17.6923       17.6923       319.172       336.865    
  28  0.166673      -1.79172      -170.944       170.944       317.736       488.680    
  29  0.578742     -0.546898      -52.1782       52.1782       318.025       370.203    
  30  0.433531     -0.835791      -79.7408       79.7408       321.000       400.741    
  31  0.979127     -0.210935E-01  -2.01248       2.01248       318.025       320.038    
  32  0.310252      -1.17037      -111.662       111.662       318.942       430.604    
  33  0.686879     -0.375597      -35.8348       35.8348       312.764       348.599    
  34  0.243104      -1.41427      -134.932       134.932       344.821       479.753    
  35  0.459407     -0.777818      -74.2097       74.2097       317.507       391.717    
  36  0.332163      -1.10213      -105.151       105.151       314.940       420.092    
  37  0.512243     -0.668956      -63.8235       63.8235       318.545       382.368    
  38  0.323240      -1.12936      -107.750       107.750       315.543       423.293    
  39  0.667455     -0.404284      -38.5717       38.5717       318.381       356.953    
  40  0.460037     -0.776449      -74.0791       74.0791       322.405       396.484    
  41  0.227415      -1.48098      -141.296       141.296       319.305       460.601    
  42  0.636494     -0.451780      -43.1032       43.1032       290.274       333.377    
  43  0.432078     -0.839149      -80.0611       80.0611       318.052       398.114    
  44  0.609015     -0.495913      -47.3138       47.3138       313.757       361.071    
  45  0.427755     -0.849205      -81.0205       81.0205       318.671       399.691    
  46  0.496712     -0.699745      -66.7610       66.7610       323.786       390.547    
  47  0.295308      -1.21974      -116.372       116.372       318.025       434.397    
  48  0.928979     -0.736692E-01  -7.02860       7.02860       272.208       279.236    
  49  0.245696E-01  -3.70625      -353.604       353.604       332.461       686.065    
  50  0.833617E-01  -2.48457      -237.046       237.046       323.295       560.341    
  51  0.499690     -0.693767      -66.1906       66.1906       317.923       384.114    
  52  0.320552      -1.13771      -108.546       108.546       300.437       408.983    
  53  0.151030E-01  -4.19286      -400.030       400.030       332.752       732.783    
  54  0.551054     -0.595922      -56.8554       56.8554       312.134       368.989    
  55  0.786630     -0.239997      -22.8975       22.8975       311.882       334.779    
  56  0.793760E-01  -2.53356      -241.721       241.721       305.147       546.868    
  57  0.456771     -0.783574      -74.7589       74.7589       319.594       394.353    
  58  0.613263     -0.488962      -46.6506       46.6506       361.180       407.830    
  59  0.407581     -0.897515      -85.6297       85.6297       317.711       403.340    
  60  0.214329      -1.54024      -146.951       146.951       317.094       464.045    
  61  0.543052     -0.610551      -58.2512       58.2512       411.198       469.449    
  62  0.861407     -0.149188      -14.2337       14.2337       308.952       323.186    
  63  0.727563     -0.318055      -30.3448       30.3448       469.164       499.509    
  64  0.954867     -0.461830E-01  -4.40620       4.40620       316.952       321.358    
  65  0.209413      -1.56345      -149.165       149.165       288.946       438.110    
  66  0.218233E-02  -6.12736      -584.597       584.597       317.372       901.969    
  67  0.990675     -0.936839E-02 -0.893815      0.893815       310.973       311.867    
  68  0.874543     -0.134054      -12.7897       12.7897       325.264       338.053    
  69  0.276161      -1.28677      -122.768       122.768       501.425       624.193    
  70  0.319398      -1.14132      -108.890       108.890       325.716       434.606    
  71  0.160691      -1.82827      -174.431       174.431       319.053       493.484    
  72  0.612149     -0.490779      -46.8240       46.8240       414.704       461.528    
  73  0.832427     -0.183410      -17.4987       17.4987       310.888       328.387    
  74  0.985697     -0.144064E-01  -1.37448       1.37448       318.008       319.383    
  75  0.607085     -0.499087      -47.6167       47.6167       320.536       368.152    
  76  0.612015     -0.490999      -46.8450       46.8450       558.181       605.026    
  77  0.413704     -0.882605      -84.2071       84.2071       327.487       411.694    
  78  0.909905     -0.944149E-01  -9.00789       9.00789       313.152       322.160    
  79  0.841355     -0.172741      -16.4808       16.4808       568.245       584.725    
loop,thermsimp(1:2)       10   46.8775       12.4855    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        283.57         87.34          1.12         39.66          1.49          0.05        129.66
Just calling func    0   0        129.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98        269.95         87.31          1.11         39.62          1.76          0.05        129.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    269.95
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       10
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       11
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       97     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -98.3306       98.3306       272.208       370.538    
   2  0.318207      -1.14505      -109.247       109.247       276.173       385.420    
   3  0.410972E-01  -3.19181      -304.523       304.523       310.973       615.496    
   4  0.217948      -1.52350      -145.353       145.353       318.008       463.361    
   5  0.460755     -0.774888      -73.9302       73.9302       318.025       391.955    
   6  0.694214     -0.364975      -34.8214       34.8214       320.091       354.912    
   7  0.237764      -1.43648      -137.051       137.051       316.952       454.002    
   8  0.635477     -0.453379      -43.2558       43.2558       313.152       356.408    
   9  0.882831E-01  -2.42721      -231.574       231.574       313.360       544.934    
  10  0.889613     -0.116969      -11.1597       11.1597       308.952       320.112    
  11  0.236395      -1.44225      -137.602       137.602       310.888       448.490    
  12  0.785560     -0.241359      -23.0274       23.0274       315.864       338.892    
  13  0.253594      -1.37202      -130.901       130.901       319.482       450.383    
  14  0.767743     -0.264300      -25.2163       25.2163       290.274       315.490    
  15  0.425111     -0.855405      -81.6121       81.6121       311.882       393.494    
  16  0.334680E-01  -3.39717      -324.115       324.115       319.172       643.288    
  17  0.737903     -0.303943      -28.9984       28.9984       290.928       319.926    
  18  0.530906     -0.633170      -60.4092       60.4092       325.264       385.673    
  19  0.811772     -0.208536      -19.8959       19.8959       319.716       339.612    
  20  0.781494     -0.246548      -23.5226       23.5226       319.806       343.329    
  21  0.668871     -0.402164      -38.3695       38.3695       312.764       351.133    
  22  0.609633     -0.494898      -47.2170       47.2170       321.375       368.592    
  23  0.732795E-01  -2.61347      -249.345       249.345       333.837       583.182    
  24  0.999755     -0.244962E-03 -0.233712E-01  0.233712E-01   318.381       318.404    
  25  0.556911     -0.585350      -55.8469       55.8469       315.769       371.616    
  26  0.381942     -0.962485      -91.8284       91.8284       313.757       405.586    
  27  0.230973      -1.46546      -139.816       139.816       326.468       466.284    
  28  0.791084     -0.234351      -22.3589       22.3589       320.536       342.895    
  29  0.122039      -2.10341      -200.681       200.681       314.971       515.652    
  30  0.411383     -0.888231      -84.7439       84.7439       319.358       404.102    
  31  0.753656     -0.282819      -26.9831       26.9831       317.931       344.914    
  32  0.846821     -0.166266      -15.8631       15.8631       312.134       327.997    
  33  0.577745     -0.548622      -52.3427       52.3427       318.025       370.368    
  34  0.859903     -0.150936      -14.4004       14.4004       314.057       328.457    
  35  0.915816     -0.879395E-01  -8.39009       8.39009       318.545       326.935    
  36  0.220499      -1.51186      -144.243       144.243       317.923       462.166    
  37  0.539962     -0.616256      -58.7955       58.7955       317.888       376.683    
  38  0.810725     -0.209827      -20.0190       20.0190       323.786       343.805    
  39  0.901567     -0.103621      -9.88620       9.88620       317.507       327.394    
  40  0.196148      -1.62888      -155.408       155.408       317.674       473.082    
  41  0.413437     -0.883250      -84.2687       84.2687       319.594       403.863    
  42  0.192892      -1.64562      -157.005       157.005       322.405       479.410    
  43  0.194290      -1.63840      -156.316       156.316       318.052       474.368    
  44  0.988313     -0.117563E-01  -1.12164       1.12164       318.671       319.792    
  45  0.917980     -0.855792E-01  -8.16490       8.16490       329.961       338.126    
  46  0.136083      -1.99449      -190.289       190.289       321.000       511.289    
  47  0.847126     -0.165905      -15.8286       15.8286       317.711       333.539    
  48  0.513003     -0.667474      -63.6820       63.6820       361.180       424.862    
  49  0.562161     -0.575967      -54.9516       54.9516       300.437       355.388    
  50  0.926079     -0.767957E-01  -7.32689       7.32689       327.487       334.814    
  51  0.890313     -0.116182      -11.0846       11.0846       354.393       365.478    
  52  0.857665     -0.153542      -14.6490       14.6490       314.940       329.589    
  53  0.599877     -0.511031      -48.7562       48.7562       315.543       364.300    
  54  0.835330     -0.179929      -17.1665       17.1665       325.871       343.038    
  55  0.323336      -1.12906      -107.721       107.721       318.942       426.663    
  56  0.305042      -1.18731      -113.278       113.278       318.025       431.303    
  57  0.980883     -0.193016E-01  -1.84152       1.84152       325.716       327.557    
  58  0.129682      -2.04267      -194.886       194.886       288.946       483.832    
  59  0.738352     -0.303335      -28.9404       28.9404       319.305       348.245    
  60  0.383117     -0.959416      -91.5355       91.5355       414.704       506.239    
  61  0.524900     -0.644547      -61.4947       61.4947       317.094       378.589    
  62  0.594829     -0.519481      -49.5624       49.5624       411.198       460.760    
  63  0.596925     -0.515963      -49.2268       49.2268       344.821       394.048    
  64  0.462523     -0.771060      -73.5649       73.5649       317.736       391.301    
  65  0.837977     -0.176764      -16.8647       16.8647       319.053       335.918    
  66  0.380204     -0.967046      -92.2635       92.2635       469.164       561.427    
  67  0.135974E-01  -4.29788      -410.050       410.050       313.807       723.857    
  68  0.816466     -0.202771      -19.3458       19.3458       305.147       324.493    
  69  0.877970     -0.130143      -12.4166       12.4166       320.591       333.008    
  70  0.468378     -0.758480      -72.3648       72.3648       323.295       395.659    
  71  0.238817E-01  -3.73464      -356.313       356.313       568.245       924.558    
  72  0.517025     -0.659665      -62.9370       62.9370       317.896       380.833    
  73  0.583879     -0.538062      -51.3352       51.3352       558.181       609.517    
  74  0.987129E-03  -6.92071      -660.288       660.288       501.425       1161.71    
  75  0.605732     -0.501317      -47.8295       47.8295       332.461       380.291    
  76  0.141001      -1.95899      -186.902       186.902       322.677       509.579    
  77  0.333264      -1.09882      -104.836       104.836       332.752       437.588    
  78  0.384574     -0.955619      -91.1733       91.1733       316.943       408.116    
  79  0.897742     -0.107873      -10.2919       10.2919       269.945       280.237    
loop,thermsimp(1:2)       11   98.3306       109.247    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99        431.82         87.50          1.13         40.06          1.01          0.05        129.74
Just calling func    0   0        129.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    431.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       11
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       12
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       98     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -245.894       245.894       269.945       515.839    
   2  0.804470     -0.217571      -20.7579       20.7579       290.274       311.032    
   3  0.984017     -0.161120E-01  -1.53721       1.53721       318.381       319.918    
   4  0.587639     -0.531643      -50.7227       50.7227       318.671       369.393    
   5  0.523810     -0.646626      -61.6930       61.6930       290.928       352.621    
   6  0.930607     -0.719181E-01  -6.86153       6.86153       308.952       315.814    
   7  0.360114E-01  -3.32392      -317.127       317.127       305.147       622.274    
   8  0.963815     -0.368556E-01  -3.51630       3.51630       318.545       322.061    
   9  0.201264E-01  -3.90572      -372.635       372.635       317.507       690.143    
  10  0.954897     -0.461522E-01  -4.40327       4.40327       325.716       330.119    
  11  0.374160     -0.983071      -93.7924       93.7924       312.134       405.926    
  12  0.174967      -1.74316      -166.310       166.310       314.057       480.367    
  13  0.381618     -0.963335      -91.9094       91.9094       314.940       406.849    
  14  0.191097      -1.65498      -157.897       157.897       320.591       478.488    
  15  0.425287     -0.854991      -81.5726       81.5726       317.711       399.283    
  16  0.426180     -0.852893      -81.3725       81.3725       327.487       408.860    
  17  0.615671     -0.485042      -46.2767       46.2767       319.053       365.330    
  18  0.787264     -0.239192      -22.8207       22.8207       329.961       352.782    
  19  0.812636     -0.207472      -19.7944       19.7944       315.864       335.659    
  20  0.917241E-01  -2.38897      -227.926       227.926       319.716       547.642    
  21  0.671310     -0.398525      -38.0223       38.0223       320.536       358.558    
  22  0.548174     -0.601162      -57.3554       57.3554       325.871       383.227    
  23  0.134851      -2.00359      -191.157       191.157       319.806       510.964    
  24  0.373236     -0.985545      -94.0285       94.0285       323.786       417.815    
  25  0.578774     -0.546843      -52.1730       52.1730       317.931       370.104    
  26  0.910021     -0.942872E-01  -8.99571       8.99571       319.305       328.301    
  27  0.192323      -1.64858      -157.287       157.287       312.764       470.051    
  28  0.366342      -1.00419      -95.8071       95.8071       320.091       415.898    
  29  0.686994     -0.375430      -35.8189       35.8189       300.437       336.256    
  30  0.486551     -0.720414      -68.7330       68.7330       313.152       381.885    
  31  0.256801      -1.35945      -129.702       129.702       315.543       445.245    
  32  0.284977      -1.25535      -119.770       119.770       354.393       474.163    
  33  0.903072     -0.101953      -9.72704       9.72704       321.375       331.102    
  34  0.226450      -1.48523      -141.702       141.702       318.025       459.727    
  35  0.446078     -0.807261      -77.0188       77.0188       272.208       349.226    
  36  0.152634      -1.87971      -179.339       179.339       315.769       495.108    
  37  0.511955     -0.669518      -63.8771       63.8771       317.888       381.765    
  38  0.513138     -0.667210      -63.6568       63.6568       317.094       380.751    
  39  0.637309     -0.450501      -42.9812       42.9812       332.461       375.442    
  40  0.861477     -0.149107      -14.2259       14.2259       317.896       332.122    
  41  0.817364     -0.201671      -19.2409       19.2409       276.173       295.414    
  42  0.793820     -0.230898      -22.0294       22.0294       325.264       347.293    
  43  0.253309      -1.37315      -131.008       131.008       317.736       448.745    
  44  0.702532     -0.353065      -33.6850       33.6850       318.025       351.710    
  45  0.822324     -0.195620      -18.6636       18.6636       311.882       330.546    
  46  0.720485     -0.327831      -31.2775       31.2775       344.821       376.098    
  47  0.881589     -0.126029      -12.0242       12.0242       323.295       335.319    
  48  0.584479     -0.537035      -51.2372       51.2372       319.594       370.831    
  49  0.697197     -0.360688      -34.4123       34.4123       319.358       353.770    
  50  0.320931      -1.13653      -108.434       108.434       313.757       422.191    
  51  0.780071     -0.248371      -23.6964       23.6964       316.943       340.640    
  52  0.318322E-01  -3.44728      -328.896       328.896       361.180       690.076    
  53  0.693387     -0.366167      -34.9351       34.9351       318.942       353.877    
  54  0.332128      -1.10223      -105.161       105.161       318.025       423.187    
  55  0.891883E-01  -2.41701      -230.601       230.601       332.752       563.353    
  56  0.960735     -0.400567E-01  -3.82172       3.82172       310.888       314.710    
  57  0.726634     -0.319332      -30.4667       30.4667       319.482       349.948    
  58  0.867850     -0.141737      -13.5228       13.5228       316.952       330.475    
  59  0.960075     -0.407444E-01  -3.88732       3.88732       411.198       415.085    
  60  0.303374E-01  -3.49537      -333.485       333.485       317.923       651.409    
  61  0.159557      -1.83535      -175.106       175.106       318.008       493.115    
  62  0.487506     -0.718453      -68.5458       68.5458       326.468       395.014    
  63  0.978612E-01  -2.32420      -221.747       221.747       317.674       539.421    
  64  0.405010     -0.903843      -86.2335       86.2335       318.052       404.286    
  65  0.199088      -1.61401      -153.988       153.988       322.405       476.394    
  66  0.621424     -0.475741      -45.3893       45.3893       288.946       334.335    
  67  0.630612     -0.461065      -43.9891       43.9891       414.704       458.693    
  68  0.842429     -0.171466      -16.3592       16.3592       322.677       339.036    
  69  0.887493     -0.119355      -11.3874       11.3874       321.000       332.388    
  70  0.813538     -0.206363      -19.6886       19.6886       314.971       334.659    
  71  0.901945     -0.103202      -9.84625       9.84625       313.360       323.206    
  72  0.789044E-01  -2.53952      -242.289       242.289       469.164       711.453    
  73  0.325005      -1.12391      -107.230       107.230       333.837       441.067    
  74  0.701704     -0.354243      -33.7975       33.7975       558.181       591.979    
  75  0.797802     -0.225895      -21.5521       21.5521       310.973       332.525    
  76  0.707467     -0.346064      -33.0171       33.0171       319.172       352.189    
  77  0.143667      -1.94025      -185.115       185.115       313.807       498.922    
  78  0.462723     -0.770628      -73.5237       73.5237       568.245       641.768    
  79  0.345279E-01  -3.36599      -321.141       321.141       431.818       752.959    
loop,thermsimp(1:2)       12   245.894       20.7579    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100        501.43         87.30          1.13         40.20          0.92          0.05        129.60
Just calling func    0   0        129.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    501.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       12
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       13
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       99     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -13.0199       13.0199       276.173       289.193    
   2  0.311340      -1.16687      -111.328       111.328       290.274       401.602    
   3  0.293828      -1.22476      -116.851       116.851       310.888       427.740    
   4  0.586668     -0.533296      -50.8805       50.8805       308.952       359.832    
   5  0.360311      -1.02079      -97.3909       97.3909       318.381       415.772    
   6  0.315643      -1.15314      -110.018       110.018       318.545       428.563    
   7  0.481464     -0.730923      -69.7356       69.7356       313.360       383.095    
   8  0.720279     -0.328116      -31.3048       31.3048       319.305       350.610    
   9  0.551471     -0.595166      -56.7833       56.7833       325.716       382.499    
  10  0.524434     -0.645435      -61.5794       61.5794       316.952       378.531    
  11  0.781600     -0.246412      -23.5096       23.5096       311.882       335.391    
  12  0.353648      -1.03945      -99.1716       99.1716       321.375       420.547    
  13  0.451044     -0.796190      -75.9626       75.9626       317.896       393.858    
  14  0.325353      -1.12284      -107.128       107.128       321.000       428.128    
  15  0.312157      -1.16425      -111.078       111.078       310.973       422.051    
  16  0.432418     -0.838362      -79.9861       79.9861       288.946       368.932    
  17  0.296543      -1.21556      -115.974       115.974       314.971       430.944    
  18  0.705416     -0.348967      -33.2941       33.2941       323.295       356.589    
  19  0.146505      -1.92069      -183.249       183.249       315.864       499.113    
  20  0.471608     -0.751607      -71.7090       71.7090       300.437       372.146    
  21  0.633095     -0.457134      -43.6141       43.6141       322.677       366.291    
  22  0.754855     -0.281230      -26.8315       26.8315       316.943       343.775    
  23  0.444501E-01  -3.11339      -297.041       297.041       325.264       622.304    
  24  0.160973      -1.82652      -174.264       174.264       272.208       446.471    
  25  0.943694     -0.579536E-01  -5.52921       5.52921       319.482       325.011    
  26  0.187304      -1.67502      -159.810       159.810       318.025       477.835    
  27  0.840922     -0.173257      -16.5300       16.5300       319.172       335.702    
  28  0.888648     -0.118054      -11.2632       11.2632       290.928       302.191    
  29  0.920614E-01  -2.38530      -227.576       227.576       329.961       557.537    
  30  0.906493     -0.981722E-01  -9.36637       9.36637       319.358       328.724    
  31  0.221761      -1.50616      -143.699       143.699       318.942       462.641    
  32  0.248725      -1.39141      -132.751       132.751       320.536       453.286    
  33  0.315928      -1.15224      -109.933       109.933       319.053       428.986    
  34  0.949967     -0.513283E-01  -4.89711       4.89711       318.671       323.568    
  35  0.802748     -0.219715      -20.9624       20.9624       317.931       338.894    
  36  0.558987     -0.581628      -55.4917       55.4917       319.594       375.086    
  37  0.638133     -0.449209      -42.8579       42.8579       332.461       375.319    
  38  0.637852     -0.449648      -42.8998       42.8998       344.821       387.721    
  39  0.382908     -0.959961      -91.5875       91.5875       317.094       408.681    
  40  0.982834     -0.173149E-01  -1.65198       1.65198       317.888       319.540    
  41  0.497022     -0.699120      -66.7013       66.7013       313.152       379.853    
  42  0.263620      -1.33325      -127.202       127.202       325.871       453.073    
  43  0.296939      -1.21423      -115.847       115.847       326.468       442.315    
  44  0.784161     -0.243141      -23.1975       23.1975       317.711       340.908    
  45  0.545321     -0.606380      -57.8532       57.8532       318.052       375.906    
  46  0.770080     -0.261260      -24.9262       24.9262       312.134       337.060    
  47  0.358755      -1.02511      -97.8037       97.8037       314.940       412.744    
  48  0.325126      -1.12354      -107.194       107.194       327.487       434.682    
  49  0.599396     -0.511832      -48.8327       48.8327       411.198       460.031    
  50  0.323708      -1.12791      -107.612       107.612       320.091       427.703    
  51  0.329142      -1.11127      -106.023       106.023       323.786       429.809    
  52  0.685661     -0.377371      -36.0041       36.0041       313.757       349.761    
  53  0.360361      -1.02065      -97.3775       97.3775       318.025       415.403    
  54  0.665281     -0.407545      -38.8829       38.8829       333.837       372.720    
  55  0.983321     -0.168196E-01  -1.60472       1.60472       315.543       317.148    
  56  0.644247     -0.439672      -41.9481       41.9481       317.736       359.684    
  57  0.735645     -0.307008      -29.2909       29.2909       414.704       443.995    
  58  0.680276     -0.385257      -36.7564       36.7564       318.025       354.782    
  59  0.864073     -0.146098      -13.9388       13.9388       312.764       326.703    
  60  0.788785     -0.237262      -22.6366       22.6366       354.393       377.030    
  61  0.429383     -0.845405      -80.6581       80.6581       322.405       403.063    
  62  0.798857     -0.224573      -21.4260       21.4260       320.591       342.017    
  63  0.946983     -0.544737E-01  -5.19720       5.19720       314.057       319.254    
  64  0.229664      -1.47114      -140.358       140.358       318.008       458.366    
  65  0.655912     -0.421729      -40.2361       40.2361       315.769       356.005    
  66  0.236982      -1.43977      -137.365       137.365       313.807       451.172    
  67  0.588628     -0.529960      -50.5622       50.5622       319.806       370.369    
  68  0.430113     -0.843707      -80.4960       80.4960       269.945       350.441    
  69  0.384455     -0.955929      -91.2028       91.2028       317.674       408.877    
  70  0.162044E-01  -4.12247      -393.315       393.315       319.716       713.031    
  71  0.769503     -0.262010      -24.9977       24.9977       332.752       357.750    
  72  0.220892      -1.51008      -144.073       144.073       558.181       702.254    
  73  0.978294E-01  -2.32453      -221.778       221.778       305.147       526.925    
  74  0.310072      -1.17095      -111.718       111.718       568.245       679.962    
  75  0.871728E-01  -2.43986      -232.781       232.781       317.923       550.705    
  76  0.750011     -0.287667      -27.4456       27.4456       361.180       388.625    
  77  0.638844     -0.448095      -42.7517       42.7517       317.507       360.259    
  78  0.620339     -0.477489      -45.5561       45.5561       469.164       514.720    
  79  0.634192     -0.455404      -43.4490       43.4490       501.425       544.874    
loop,thermsimp(1:2)       13   13.0199       111.328    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101        294.01         87.31          1.12         40.18          0.85          0.05        129.50
Just calling func    0   0        129.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    102        335.66         87.44          1.11         39.92          1.05          0.05        129.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    294.01        1.724     -1.179      6.058     -102.6      2.615    
                     -0.1444      3.920     -99.70      4.019      1.015    
                       1.899     -1.260      1.458    -0.1830E+05 -2.467    
                      -1.189      0.000      0.000      0.000     -1.221    

                      -2.500     0.5093E+05 0.4050E+05 -3852.    -0.8539E+05
                      -2.046     -6.456     -4.380     -7.345      2.950    
                      -13.82     -2.968      2094.      0.000      3658.    

                       4514.      5976.      4439.      8250.      3018.    
                       2901.     0.6808E-01-0.4650E-01  0.000    -0.4901    
                     -0.1031    -0.1582    -0.6232E-01-0.1921    -0.2416E-01

                      -1.495    -0.8069E-01  0.000    -0.2370E-01-0.9409E-02
                      0.8541E-01 0.3681E-01-0.2456E-01-0.3502    -0.1492    
                     -0.4443E-01-0.6736E-01-0.9812E-01-0.3605      0.000    

                      -1.916     -1.608     0.9700     0.9669    -0.8777E-01
                      0.3307E-01  9.215      9.134    -0.1017E+05 -2.066    
                     -0.5457    -0.7148      9.408      8.558    -0.1000E+05

                      -1.858     0.1019    -0.4873      8.763      9.038    
                     -0.1000E+05 -2.066    -0.6573    -0.2042      10.13    
                       8.451    -0.1000E+05 -2.066    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    294.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       13
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       14
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      101     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -101.645       101.645       276.173       377.818    
   2  0.267720      -1.31781      -125.729       125.729       290.928       416.657    
   3  0.279825      -1.27359      -121.510       121.510       315.543       437.054    
   4  0.281095      -1.26906      -121.078       121.078       314.057       435.135    
   5  0.245867      -1.40297      -133.854       133.854       317.888       451.741    
   6  0.914239     -0.896636E-01  -8.55458       8.55458       318.671       327.225    
   7  0.180116      -1.71415      -163.543       163.543       319.482       483.025    
   8  0.567917     -0.565780      -53.9797       53.9797       312.764       366.744    
   9  0.431941     -0.839465      -80.0913       80.0913       319.358       399.449    
  10  0.877920     -0.130199      -12.4220       12.4220       311.882       324.304    
  11  0.280355      -1.27170      -121.330       121.330       319.172       440.502    
  12  0.486947     -0.719601      -68.6553       68.6553       312.134       380.789    
  13  0.216546      -1.52995      -145.969       145.969       317.931       463.900    
  14  0.483718E-02  -5.33142      -508.658       508.658       317.711       826.369    
  15  0.785152E-03  -7.14963      -682.129       682.129       320.591       1002.72    
  16  0.300781      -1.20137      -114.620       114.620       316.943       431.563    
  17  0.869691     -0.139618      -13.3206       13.3206       313.757       327.078    
  18  0.694261E-01  -2.66749      -254.499       254.499       269.945       524.444    
  19  0.635475     -0.453382      -43.2561       43.2561       319.305       362.561    
  20  0.894977     -0.110958      -10.5862       10.5862       318.025       328.611    
  21  0.442267     -0.815841      -77.8374       77.8374       315.769       393.607    
  22  0.283362      -1.26103      -120.312       120.312       323.295       443.606    
  23  0.518611     -0.656601      -62.6447       62.6447       332.752       395.397    
  24  0.858122E-01  -2.45559      -234.282       234.282       317.736       552.018    
  25  0.461153     -0.774026      -73.8480       73.8480       308.952       382.800    
  26  0.180026      -1.71465      -163.591       163.591       317.507       481.098    
  27  0.446938E-01  -3.10792      -296.519       296.519       322.677       619.196    
  28  0.152352      -1.88156      -179.515       179.515       288.946       468.461    
  29  0.163937E-01  -4.11086      -392.207       392.207       319.806       712.013    
  30  0.721347     -0.326635      -31.1635       31.1635       300.437       331.600    
  31  0.813323     -0.206626      -19.7137       19.7137       333.837       353.551    
  32  0.569343     -0.563273      -53.7405       53.7405       319.594       373.334    
  33  0.275899      -1.28772      -122.858       122.858       332.461       455.319    
  34  0.933187     -0.691492E-01  -6.59736       6.59736       318.052       324.650    
  35  0.716570     -0.333279      -31.7973       31.7973       354.393       386.191    
  36  0.405413     -0.902848      -86.1385       86.1385       316.952       403.090    
  37  0.907528     -0.970314E-01  -9.25753       9.25753       313.152       322.410    
  38  0.554651     -0.589416      -56.2347       56.2347       325.716       381.951    
  39  0.419962     -0.867592      -82.7748       82.7748       313.360       396.135    
  40  0.824173     -0.193375      -18.4494       18.4494       344.821       363.270    
  41  0.865647     -0.144278      -13.7653       13.7653       361.180       374.945    
  42  0.300944      -1.20083      -114.568       114.568       317.896       432.464    
  43  0.339688      -1.07973      -103.014       103.014       290.274       393.288    
  44  0.217032      -1.52771      -145.755       145.755       322.405       468.161    
  45  0.792618E-01  -2.53500      -241.858       241.858       317.094       558.952    
  46  0.997677     -0.232582E-02 -0.221901      0.221901       317.674       317.896    
  47  0.174239      -1.74733      -166.708       166.708       314.940       481.648    
  48  0.834084     -0.181422      -17.3090       17.3090       318.025       335.334    
  49  0.324404      -1.12577      -107.407       107.407       318.381       425.788    
  50  0.927598     -0.751564E-01  -7.17049       7.17049       321.375       328.546    
  51  0.981384     -0.187911E-01  -1.79282       1.79282       310.973       312.766    
  52  0.849105     -0.163572      -15.6060       15.6060       320.091       335.697    
  53  0.148698      -1.90584      -181.832       181.832       310.888       492.720    
  54  0.389930     -0.941789      -89.8538       89.8538       321.000       410.854    
  55  0.183568      -1.69517      -161.732       161.732       318.545       480.277    
  56  0.661220     -0.413669      -39.4671       39.4671       319.053       358.520    
  57  0.242183      -1.41806      -135.294       135.294       323.786       459.080    
  58  0.182262      -1.70231      -162.413       162.413       314.971       477.384    
  59  0.299801      -1.20464      -114.931       114.931       327.487       442.419    
  60  0.950117     -0.511698E-01  -4.88198       4.88198       326.468       331.350    
  61  0.184593      -1.68960      -161.201       161.201       414.704       575.905    
  62  0.730970     -0.313382      -29.8990       29.8990       272.208       302.107    
  63  0.753232E-01  -2.58597      -246.721       246.721       313.807       560.528    
  64  0.501460     -0.690231      -65.8532       65.8532       325.871       391.724    
  65  0.513248E-01  -2.96958      -283.320       283.320       320.536       603.856    
  66  0.931416     -0.710492E-01  -6.77863       6.77863       318.008       324.787    
  67  0.637420E-01  -2.75291      -262.649       262.649       411.198       673.847    
  68  0.322234E-01  -3.43506      -327.731       327.731       318.942       646.673    
  69  0.791156     -0.234260      -22.3502       22.3502       318.025       340.375    
  70  0.606746     -0.499645      -47.6699       47.6699       315.864       363.534    
  71  0.115774      -2.15611      -205.710       205.710       469.164       674.873    
  72  0.574132     -0.554896      -52.9413       52.9413       305.147       358.088    
  73  0.877193     -0.131028      -12.5011       12.5011       501.425       513.926    
  74  0.113746      -2.17379      -207.396       207.396       317.923       525.320    
  75  0.259994E-01  -3.64968      -348.207       348.207       329.961       678.169    
  76  0.213303      -1.54504      -147.409       147.409       325.264       472.672    
  77  0.444263E-01  -3.11392      -297.092       297.092       568.245       865.336    
  78  0.833204     -0.182477      -17.4097       17.4097       558.181       575.591    
  79  0.882578     -0.124908      -11.9172       11.9172       294.012       305.929    
loop,thermsimp(1:2)       14   101.645       125.729    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103        282.49         87.28          1.11         39.57          1.48          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104        278.83         87.45          1.16         40.28          0.68          0.05        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    278.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       14
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       15
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      103     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -140.239       140.239       272.208       412.447    
   2  0.322822      -1.13066      -107.873       107.873       294.012       401.885    
   3  0.327586      -1.11601      -106.475       106.475       310.973       417.448    
   4  0.799078     -0.224296      -21.3996       21.3996       317.674       339.074    
   5  0.698072     -0.359433      -34.2926       34.2926       313.152       347.445    
   6  0.733871     -0.309421      -29.5211       29.5211       311.882       341.403    
   7  0.823872     -0.193740      -18.4843       18.4843       318.052       336.537    
   8  0.800045     -0.223087      -21.2842       21.2842       318.008       339.293    
   9  0.162010      -1.82010      -173.651       173.651       313.757       487.408    
  10  0.113138      -2.17915      -207.907       207.907       318.671       526.578    
  11  0.973966     -0.263784E-01  -2.51670       2.51670       321.375       323.892    
  12  0.998107     -0.189521E-02 -0.180817      0.180817       318.025       318.206    
  13  0.631351     -0.459893      -43.8773       43.8773       326.468       370.346    
  14  0.698229     -0.359208      -34.2712       34.2712       300.437       334.708    
  15  0.359252      -1.02373      -97.6716       97.6716       318.025       415.697    
  16  0.936266     -0.658562E-01  -6.28317       6.28317       320.091       326.374    
  17  0.843107     -0.170662      -16.2824       16.2824       318.025       334.308    
  18  0.181284      -1.70769      -162.927       162.927       333.837       496.764    
  19  0.354246      -1.03777      -99.0106       99.0106       305.147       404.157    
  20  0.981540     -0.186324E-01  -1.77767       1.77767       319.053       320.831    
  21  0.582284E-01  -2.84338      -271.280       271.280       319.305       590.585    
  22  0.935088     -0.671143E-01  -6.40321       6.40321       344.821       351.224    
  23  0.682144     -0.382515      -36.4948       36.4948       315.864       352.359    
  24  0.441439     -0.817715      -78.0162       78.0162       312.764       390.780    
  25  0.325829      -1.12138      -106.988       106.988       319.594       426.582    
  26  0.956968E-01  -2.34657      -223.881       223.881       361.180       585.060    
  27  0.465124E-01  -3.06804      -292.714       292.714       276.173       568.887    
  28  0.645503     -0.437726      -41.7624       41.7624       312.134       353.896    
  29  0.184751      -1.68875      -161.119       161.119       325.716       486.835    
  30  0.676303     -0.391115      -37.3153       37.3153       308.952       346.267    
  31  0.408248     -0.895880      -85.4738       85.4738       354.393       439.867    
  32  0.215511      -1.53474      -146.426       146.426       325.871       472.297    
  33  0.762109     -0.271666      -25.9190       25.9190       290.274       316.193    
  34  0.445022     -0.809632      -77.2450       77.2450       315.769       393.014    
  35  0.667113     -0.404797      -38.6206       38.6206       332.752       371.373    
  36  0.995785     -0.422376E-02 -0.402979      0.402979       313.360       313.763    
  37  0.278840      -1.27712      -121.847       121.847       319.358       441.205    
  38  0.624255     -0.471196      -44.9557       44.9557       316.952       361.907    
  39  0.368212     -0.999097      -95.3214       95.3214       321.000       416.322    
  40  0.330266      -1.10786      -105.698       105.698       290.928       396.626    
  41  0.969155     -0.313304E-01  -2.98916       2.98916       318.381       321.370    
  42  0.686816     -0.375688      -35.8435       35.8435       316.943       352.787    
  43  0.201053      -1.60419      -153.051       153.051       317.896       470.947    
  44  0.481166     -0.731544      -69.7948       69.7948       314.057       383.852    
  45  0.992829     -0.719725E-02 -0.686672      0.686672       315.543       316.230    
  46  0.665697     -0.406921      -38.8233       38.8233       319.172       357.996    
  47  0.991934E-02  -4.61327      -440.141       440.141       327.487       767.628    
  48  0.211644      -1.55285      -148.154       148.154       323.295       471.448    
  49  0.908243E-01  -2.39883      -228.866       228.866       317.888       546.754    
  50  0.643762     -0.440426      -42.0200       42.0200       332.461       374.481    
  51  0.568794E-01  -2.86682      -273.516       273.516       323.786       597.303    
  52  0.159466      -1.83592      -175.161       175.161       317.931       493.092    
  53  0.918851     -0.846310E-01  -8.07443       8.07443       322.405       330.480    
  54  0.865178     -0.144820      -13.8169       13.8169       288.946       302.763    
  55  0.826009     -0.191150      -18.2372       18.2372       325.264       343.501    
  56  0.665816E-02  -5.01191      -478.174       478.174       314.971       793.145    
  57  0.998155     -0.184716E-02 -0.176233      0.176233       318.545       318.721    
  58  0.875957E-01  -2.43502      -232.320       232.320       317.507       549.827    
  59  0.546955     -0.603388      -57.5678       57.5678       314.940       372.508    
  60  0.953933     -0.471617E-01  -4.49959       4.49959       319.482       323.981    
  61  0.131488      -2.02884      -193.567       193.567       310.888       504.455    
  62  0.415197     -0.879003      -83.8635       83.8635       501.425       585.289    
  63  0.543800E-02  -5.21434      -497.488       497.488       269.945       767.433    
  64  0.821907     -0.196128      -18.7121       18.7121       317.923       336.636    
  65  0.590302     -0.527122      -50.2914       50.2914       317.736       368.028    
  66  0.380117     -0.967276      -92.2855       92.2855       317.094       409.379    
  67  0.640684     -0.445218      -42.4772       42.4772       313.807       356.284    
  68  0.268290      -1.31569      -125.526       125.526       558.181       683.708    
  69  0.625870     -0.468612      -44.7091       44.7091       414.704       459.413    
  70  0.937362     -0.646862E-01  -6.17156       6.17156       320.536       326.707    
  71  0.246375      -1.40090      -133.656       133.656       322.677       456.333    
  72  0.163534      -1.81073      -172.758       172.758       318.942       491.699    
  73  0.231078      -1.46500      -139.772       139.772       411.198       550.970    
  74  0.812335     -0.207842      -19.8297       19.8297       469.164       488.993    
  75  0.955269     -0.457625E-01  -4.36609       4.36609       329.961       334.328    
  76  0.126538      -2.06721      -197.228       197.228       319.806       517.034    
  77  0.273907      -1.29497      -123.550       123.550       317.711       441.260    
  78  0.583291     -0.539069      -51.4312       51.4312       568.245       619.676    
  79  0.186464      -1.67951      -160.238       160.238       278.834       439.072    
loop,thermsimp(1:2)       15   140.239       107.873    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        284.32         87.34          1.11         39.73          1.31          0.05        129.54
Just calling func    0   0        129.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106        328.85         87.68          1.15         40.07          0.59          0.05        129.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    284.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       15
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       16
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      105     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -55.6938       55.6938       288.946       344.639    
   2  0.850944     -0.161409      -15.3996       15.3996       313.360       328.759    
   3  0.343999      -1.06712      -101.811       101.811       290.274       392.085    
   4  0.481777E-02  -5.33544      -509.042       509.042       315.543       824.585    
   5  0.146991      -1.91738      -182.933       182.933       318.025       500.958    
   6  0.545677     -0.605728      -57.7910       57.7910       318.545       376.336    
   7  0.761940     -0.271888      -25.9402       25.9402       319.053       344.993    
   8  0.944477     -0.571238E-01  -5.45004       5.45004       318.381       323.831    
   9  0.965249     -0.353688E-01  -3.37445       3.37445       321.375       324.749    
  10  0.634176     -0.455429      -43.4514       43.4514       319.482       362.933    
  11  0.793205     -0.231673      -22.1034       22.1034       320.091       342.194    
  12  0.743605     -0.296246      -28.2641       28.2641       320.536       348.800    
  13  0.983069E-01  -2.31966      -221.313       221.313       322.405       543.718    
  14  0.618437     -0.480560      -45.8490       45.8490       318.025       363.874    
  15  0.429182     -0.845875      -80.7028       80.7028       329.961       410.664    
  16  0.771528     -0.259382      -24.7470       24.7470       300.437       325.184    
  17  0.218286      -1.52195      -145.205       145.205       318.052       463.258    
  18  0.556408     -0.586254      -55.9330       55.9330       317.923       373.857    
  19  0.526292     -0.641899      -61.2421       61.2421       317.674       378.916    
  20  0.665532     -0.407169      -38.8470       38.8470       318.008       356.855    
  21  0.261756      -1.34034      -127.879       127.879       311.882       439.761    
  22  0.975508     -0.247971E-01  -2.36583       2.36583       325.264       327.630    
  23  0.257613      -1.35630      -129.401       129.401       308.952       438.353    
  24  0.981555E-01  -2.32120      -221.460       221.460       313.152       534.612    
  25  0.955054     -0.459870E-01  -4.38751       4.38751       344.821       349.208    
  26  0.887906     -0.118890      -11.3430       11.3430       315.864       327.207    
  27  0.407043     -0.898837      -85.7558       85.7558       316.943       402.699    
  28  0.876870     -0.131396      -12.5362       12.5362       312.134       324.670    
  29  0.957152     -0.437935E-01  -4.17823       4.17823       313.807       317.985    
  30  0.827730     -0.189068      -18.0385       18.0385       319.172       337.211    
  31  0.289027      -1.24124      -118.423       118.423       316.952       435.375    
  32  0.125230      -2.07760      -198.219       198.219       317.736       515.955    
  33  0.242443      -1.41699      -135.191       135.191       326.468       461.660    
  34  0.654103     -0.424490      -40.4996       40.4996       332.752       373.252    
  35  0.811871     -0.208414      -19.8842       19.8842       314.940       334.824    
  36  0.145201E-01  -4.23222      -403.786       403.786       332.461       736.247    
  37  0.344449      -1.06581      -101.686       101.686       314.057       415.743    
  38  0.265532      -1.32602      -126.512       126.512       312.764       439.276    
  39  0.811851     -0.208438      -19.8866       19.8866       315.769       335.656    
  40  0.983290E-01  -2.31944      -221.292       221.292       290.928       512.219    
  41  0.347314      -1.05753      -100.896       100.896       294.012       394.908    
  42  0.923773     -0.792888E-01  -7.56475       7.56475       305.147       312.712    
  43  0.690375     -0.370520      -35.3504       35.3504       317.094       352.444    
  44  0.227523      -1.48051      -141.251       141.251       272.208       413.459    
  45  0.652275     -0.427289      -40.7666       40.7666       318.025       358.792    
  46  0.669640     -0.401014      -38.2598       38.2598       321.000       359.260    
  47  0.288804      -1.24201      -118.497       118.497       310.973       429.470    
  48  0.404648     -0.904738      -86.3188       86.3188       319.594       405.913    
  49  0.371042     -0.991440      -94.5908       94.5908       278.834       373.424    
  50  0.308424      -1.17628      -112.226       112.226       354.393       466.619    
  51  0.911221     -0.929703E-01  -8.87007       8.87007       319.358       328.228    
  52  0.615436     -0.485425      -46.3132       46.3132       317.711       364.024    
  53  0.780328     -0.248041      -23.6649       23.6649       322.677       346.341    
  54  0.127539      -2.05933      -196.476       196.476       414.704       611.180    
  55  0.709081     -0.343786      -32.7998       32.7998       317.896       350.696    
  56  0.974925     -0.253942E-01  -2.42280       2.42280       323.295       325.717    
  57  0.834943     -0.180392      -17.2107       17.2107       325.871       343.082    
  58  0.696274     -0.362013      -34.5387       34.5387       325.716       360.255    
  59  0.623965     -0.471660      -45.0000       45.0000       313.757       358.757    
  60  0.620467     -0.477282      -45.5363       45.5363       469.164       514.700    
  61  0.983840E-01  -2.31888      -221.238       221.238       318.942       540.180    
  62  0.452904     -0.792074      -75.5699       75.5699       317.931       393.501    
  63  0.731276     -0.312965      -29.8592       29.8592       333.837       363.696    
  64  0.136630      -1.99048      -189.906       189.906       310.888       500.795    
  65  0.819737     -0.198772      -18.9643       18.9643       319.806       338.771    
  66  0.415452     -0.878387      -83.8048       83.8048       318.671       402.475    
  67  0.931580     -0.708731E-01  -6.76183       6.76183       317.888       324.649    
  68  0.763119     -0.270341      -25.7926       25.7926       317.507       343.300    
  69  0.214680      -1.53861      -146.795       146.795       411.198       557.993    
  70  0.548736     -0.600138      -57.2577       57.2577       276.173       333.431    
  71  0.981486     -0.186872E-01  -1.78290       1.78290       361.180       362.962    
  72  0.475333     -0.743740      -70.9584       70.9584       501.425       572.384    
  73  0.484810     -0.723998      -69.0749       69.0749       319.305       388.380    
  74  0.433802     -0.835166      -79.6812       79.6812       323.786       403.467    
  75  0.642789     -0.441939      -42.1643       42.1643       568.245       610.409    
  76  0.255584      -1.36420      -130.155       130.155       558.181       688.337    
  77  0.190283      -1.65924      -158.304       158.304       269.945       428.249    
  78  0.255288      -1.36536      -130.266       130.266       327.487       457.753    
  79  0.992726     -0.730106E-02 -0.696576      0.696576       284.323       285.020    
loop,thermsimp(1:2)       16   55.6938       15.3996    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        291.06         87.34          1.12         40.11          1.00          0.05        129.62
Just calling func    0   0        129.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        475.00         87.28          1.14         39.98          1.05          0.05        129.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    291.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       16
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       17
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      107     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -28.7546       28.7546       284.323       313.078    
   2  0.527958     -0.638738      -60.9404       60.9404       305.147       366.087    
   3  0.326119      -1.12049      -106.903       106.903       313.807       420.710    
   4  0.647061     -0.435314      -41.5323       41.5323       318.381       359.913    
   5  0.419805     -0.867966      -82.8105       82.8105       317.888       400.698    
   6  0.218417      -1.52135      -145.148       145.148       312.134       457.282    
   7  0.168864      -1.77866      -169.698       169.698       321.375       491.073    
   8  0.761417     -0.272575      -26.0057       26.0057       300.437       326.442    
   9  0.383989     -0.957143      -91.3186       91.3186       323.295       414.613    
  10  0.104774      -2.25595      -215.235       215.235       315.864       531.099    
  11  0.167912      -1.78432      -170.237       170.237       325.264       495.501    
  12  0.997930     -0.207190E-02 -0.197675      0.197675       319.358       319.556    
  13  0.493294     -0.706650      -67.4198       67.4198       313.360       380.780    
  14  0.483048     -0.727639      -69.4223       69.4223       276.173       345.595    
  15  0.715967     -0.334121      -31.8777       31.8777       314.940       346.818    
  16  0.595423E-01  -2.82107      -269.151       269.151       315.769       584.920    
  17  0.636569     -0.451662      -43.0919       43.0919       319.172       362.264    
  18  0.482980     -0.727779      -69.4356       69.4356       319.806       389.242    
  19  0.500121     -0.692905      -66.1084       66.1084       320.091       386.199    
  20  0.426980     -0.851018      -81.1935       81.1935       325.871       407.065    
  21  0.546576     -0.604082      -57.6340       57.6340       317.507       375.141    
  22  0.142720      -1.94687      -185.746       185.746       288.946       474.692    
  23  0.473622     -0.747346      -71.3024       71.3024       319.053       390.355    
  24  0.892718E-01  -2.41607      -230.511       230.511       322.677       553.188    
  25  0.660659     -0.414518      -39.5481       39.5481       320.536       360.084    
  26  0.328755      -1.11244      -106.136       106.136       344.821       450.956    
  27  0.544150     -0.608530      -58.0584       58.0584       317.896       375.954    
  28  0.199068      -1.61411      -153.998       153.998       317.094       471.092    
  29  0.685070     -0.378234      -36.0864       36.0864       318.008       354.095    
  30  0.500258     -0.692632      -66.0823       66.0823       313.757       379.840    
  31  0.130607      -2.03556      -194.208       194.208       318.025       512.233    
  32  0.982013E-01  -2.32074      -221.416       221.416       321.000       542.416    
  33  0.581494E-01  -2.84474      -271.410       271.410       325.716       597.125    
  34  0.841391     -0.172699      -16.4768       16.4768       319.482       335.958    
  35  0.838937E-01  -2.47820      -236.439       236.439       361.180       597.619    
  36  0.729848     -0.314919      -30.0457       30.0457       333.837       363.883    
  37  0.748292     -0.289962      -27.6646       27.6646       318.025       345.690    
  38  0.229216      -1.47309      -140.544       140.544       317.711       458.254    
  39  0.710713     -0.341487      -32.5804       32.5804       332.752       365.333    
  40  0.511506     -0.670395      -63.9608       63.9608       278.834       342.794    
  41  0.106756      -2.23721      -213.446       213.446       317.923       531.370    
  42  0.583466     -0.538770      -51.4027       51.4027       318.545       369.947    
  43  0.993140E-01  -2.30947      -220.341       220.341       317.674       538.015    
  44  0.461224     -0.773871      -73.8331       73.8331       319.305       393.138    
  45  0.574465     -0.554316      -52.8859       52.8859       290.274       343.160    
  46  0.715977     -0.334107      -31.8764       31.8764       317.931       349.808    
  47  0.877584     -0.130583      -12.4586       12.4586       294.012       306.471    
  48  0.492354     -0.708558      -67.6018       67.6018       318.671       386.272    
  49  0.874926     -0.133616      -12.7480       12.7480       316.943       329.691    
  50  0.800367     -0.222685      -21.2458       21.2458       323.786       345.032    
  51  0.507308     -0.678636      -64.7470       64.7470       319.594       384.341    
  52  0.727831     -0.317686      -30.3096       30.3096       329.961       360.271    
  53  0.899777E-01  -2.40819      -229.760       229.760       272.208       501.968    
  54  0.392780     -0.934505      -89.1589       89.1589       314.057       403.216    
  55  0.585301     -0.535629      -51.1030       51.1030       269.945       321.048    
  56  0.522884     -0.648395      -61.8618       61.8618       310.973       372.835    
  57  0.559213     -0.581225      -55.4532       55.4532       316.952       372.405    
  58  0.116989      -2.14568      -204.714       204.714       308.952       513.666    
  59  0.411020     -0.889113      -84.8281       84.8281       312.764       397.592    
  60  0.484202     -0.725253      -69.1946       69.1946       311.882       381.076    
  61  0.771761     -0.259080      -24.7182       24.7182       327.487       352.205    
  62  0.908486     -0.959755E-01  -9.15678       9.15678       326.468       335.625    
  63  0.340814      -1.07642      -102.698       102.698       318.052       420.751    
  64  0.519873     -0.654172      -62.4129       62.4129       354.393       416.806    
  65  0.516320     -0.661029      -63.0672       63.0672       310.888       373.955    
  66  0.495555     -0.702076      -66.9834       66.9834       318.025       385.009    
  67  0.291626      -1.23228      -117.569       117.569       290.928       408.497    
  68  0.492590     -0.708077      -67.5559       67.5559       469.164       536.720    
  69  0.545663E-01  -2.90834      -277.478       277.478       317.736       595.214    
  70  0.200869      -1.60510      -153.139       153.139       313.152       466.291    
  71  0.434763     -0.832954      -79.4701       79.4701       318.942       398.412    
  72  0.241886E-01  -3.72187      -355.095       355.095       322.405       677.500    
  73  0.846355     -0.166816      -15.9155       15.9155       411.198       427.114    
  74  0.598037     -0.514102      -49.0492       49.0492       501.425       550.474    
  75  0.780316     -0.248056      -23.6664       23.6664       568.245       591.911    
  76  0.242603      -1.41633      -135.129       135.129       414.704       549.833    
  77  0.483498     -0.726708      -69.3334       69.3334       558.181       627.515    
  78  0.719876     -0.328676      -31.3581       31.3581       332.461       363.819    
  79  0.223210      -1.49964      -143.077       143.077       291.059       434.136    
loop,thermsimp(1:2)       17   28.7546       60.9404    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        278.57         87.48          1.12         39.97          1.20          0.05        129.82
Just calling func    0   0        129.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        340.14         87.34          1.12         40.12          0.89          0.05        129.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    278.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       17
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       18
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      109     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -91.5994       91.5994       294.012       385.611    
   2  0.293468      -1.22599      -116.969       116.969       284.323       401.292    
   3  0.954036     -0.470539E-01  -4.48929       4.48929       319.358       323.847    
   4  0.452934     -0.792010      -75.5637       75.5637       269.945       345.509    
   5  0.251692      -1.37955      -131.619       131.619       300.437       432.056    
   6  0.881081     -0.126605      -12.0791       12.0791       316.943       329.022    
   7  0.855311     -0.156290      -14.9112       14.9112       326.468       341.380    
   8  0.576474     -0.550824      -52.5528       52.5528       319.482       372.034    
   9  0.433835     -0.835090      -79.6739       79.6739       278.834       358.508    
  10  0.298626      -1.20856      -115.306       115.306       290.274       405.580    
  11  0.269991      -1.30937      -124.923       124.923       323.786       448.710    
  12  0.884826     -0.122364      -11.6745       11.6745       276.173       287.847    
  13  0.664124     -0.409287      -39.0490       39.0490       318.025       357.074    
  14  0.580836     -0.543287      -51.8337       51.8337       314.940       366.774    
  15  0.285501      -1.25351      -119.594       119.594       317.931       437.526    
  16  0.690757     -0.369967      -35.2977       35.2977       327.487       362.785    
  17  0.578320     -0.547628      -52.2479       52.2479       318.008       370.256    
  18  0.563230     -0.574067      -54.7703       54.7703       318.381       373.151    
  19  0.681565     -0.383363      -36.5758       36.5758       320.536       357.111    
  20  0.453362     -0.791065      -75.4735       75.4735       329.961       405.435    
  21  0.645457     -0.437797      -41.7692       41.7692       319.172       360.942    
  22  0.982222E-01  -2.32052      -221.395       221.395       332.461       553.857    
  23  0.843064     -0.170712      -16.2873       16.2873       333.837       350.124    
  24  0.505683     -0.681845      -65.0532       65.0532       332.752       397.805    
  25  0.350376      -1.04875      -100.059       100.059       305.147       405.205    
  26  0.367167      -1.00194      -95.5926       95.5926       318.545       414.137    
  27  0.268175      -1.31611      -125.567       125.567       316.952       442.519    
  28  0.989085E-01  -2.31356      -220.731       220.731       310.973       531.704    
  29  0.349392      -1.05156      -100.327       100.327       310.888       411.215    
  30  0.945468     -0.560755E-01  -5.35002       5.35002       317.507       322.857    
  31  0.305400      -1.18613      -113.166       113.166       317.896       431.062    
  32  0.942706     -0.590006E-01  -5.62911       5.62911       313.757       319.386    
  33  0.778346     -0.250584      -23.9076       23.9076       313.360       337.267    
  34  0.256449      -1.36083      -129.833       129.833       311.882       441.715    
  35  0.338120      -1.08436      -103.456       103.456       319.594       423.050    
  36  0.644609     -0.439112      -41.8946       41.8946       318.025       359.920    
  37  0.420837     -0.865509      -82.5761       82.5761       320.091       402.667    
  38  0.793406     -0.231421      -22.0793       22.0793       318.671       340.750    
  39  0.685561     -0.377517      -36.0180       36.0180       319.806       355.824    
  40  0.278740      -1.27748      -121.881       121.881       319.053       440.934    
  41  0.414078     -0.881700      -84.1209       84.1209       319.305       403.426    
  42  0.999720     -0.280334E-03 -0.267460E-01  0.267460E-01   312.764       312.791    
  43  0.714259     -0.336509      -32.1055       32.1055       318.942       351.047    
  44  0.713371     -0.337753      -32.2242       32.2242       317.888       350.112    
  45  0.451360     -0.795490      -75.8958       75.8958       314.057       389.953    
  46  0.887280     -0.119595      -11.4103       11.4103       325.871       337.281    
  47  0.234319      -1.45107      -138.443       138.443       290.928       429.371    
  48  0.277567E-01  -3.58428      -341.967       341.967       323.295       665.262    
  49  0.582411     -0.540579      -51.5753       51.5753       354.393       405.969    
  50  0.969019     -0.314707E-01  -3.00254       3.00254       313.807       316.810    
  51  0.441889     -0.816696      -77.9189       77.9189       318.052       395.971    
  52  0.150247      -1.89548      -180.843       180.843       411.198       592.041    
  53  0.901555E-01  -2.40622      -229.572       229.572       291.059       520.630    
  54  0.274120      -1.29419      -123.476       123.476       344.821       468.296    
  55  0.166801      -1.79095      -170.870       170.870       312.134       483.004    
  56  0.783053     -0.244555      -23.3324       23.3324       317.711       341.043    
  57  0.541655     -0.613126      -58.4968       58.4968       313.152       371.649    
  58  0.113786      -2.17344      -207.362       207.362       317.094       524.456    
  59  0.794080     -0.230571      -21.9982       21.9982       288.946       310.944    
  60  0.266758      -1.32141      -126.073       126.073       321.375       447.448    
  61  0.637690     -0.449903      -42.9241       42.9241       325.264       368.188    
  62  0.912681     -0.913685E-01  -8.71724       8.71724       272.208       280.925    
  63  0.303728      -1.19162      -113.690       113.690       318.025       431.715    
  64  0.318303      -1.14475      -109.218       109.218       308.952       418.170    
  65  0.255833      -1.36323      -130.062       130.062       315.864       445.927    
  66  0.988998     -0.110626E-01  -1.05546       1.05546       317.923       318.979    
  67  0.335641      -1.09171      -104.158       104.158       469.164       573.321    
  68  0.575346     -0.552784      -52.7398       52.7398       317.674       370.414    
  69  0.439298E-01  -3.12516      -298.164       298.164       321.000       619.164    
  70  0.179935      -1.71516      -163.639       163.639       414.704       578.343    
  71  0.939813     -0.620740E-01  -5.92232       5.92232       501.425       507.347    
  72  0.787717     -0.238616      -22.7657       22.7657       322.677       345.442    
  73  0.622521     -0.473978      -45.2210       45.2210       315.769       360.990    
  74  0.544172     -0.608491      -58.0546       58.0546       568.245       626.299    
  75  0.688511     -0.373223      -35.6083       35.6083       317.736       353.344    
  76  0.771411     -0.259534      -24.7615       24.7615       325.716       350.477    
  77  0.814829     -0.204777      -19.5373       19.5373       361.180       380.717    
  78  0.726465     -0.319564      -30.4889       30.4889       558.181       588.670    
  79  0.484661     -0.724306      -69.1043       69.1043       278.568       347.672    
loop,thermsimp(1:2)       18   91.5994       116.969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        282.96         87.32          1.15         40.07          1.01          0.05        129.59
Just calling func    0   0        129.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        289.41         87.41          1.18         39.94          1.03          0.05        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       18
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       19
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      111     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -99.3488       99.3488       272.208       371.557    
   2  0.270835E-01  -3.60883      -344.310       344.310       276.173       620.483    
   3  0.923755     -0.793087E-01  -7.56665       7.56665       288.946       296.512    
   4  0.535520     -0.624517      -59.5836       59.5836       312.764       372.348    
   5  0.629344     -0.463078      -44.1811       44.1811       313.807       357.988    
   6  0.572648E-01  -2.86007      -272.872       272.872       317.923       590.796    
   7  0.353113E-01  -3.34355      -319.000       319.000       313.757       632.758    
   8  0.580838     -0.543283      -51.8333       51.8333       317.507       369.341    
   9  0.370403     -0.993164      -94.7553       94.7553       319.358       414.113    
  10  0.443010     -0.814162      -77.6772       77.6772       316.943       394.620    
  11  0.188704      -1.66757      -159.099       159.099       313.360       472.459    
  12  0.177608      -1.72818      -164.881       164.881       325.871       490.752    
  13  0.694998     -0.363847      -34.7137       34.7137       318.671       353.384    
  14  0.160742      -1.82796      -174.401       174.401       317.711       492.111    
  15  0.290050      -1.23770      -118.086       118.086       326.468       444.554    
  16  0.441138E-01  -3.12098      -297.765       297.765       322.677       620.442    
  17  0.372461     -0.987622      -94.2266       94.2266       269.945       364.172    
  18  0.652779     -0.426517      -40.6929       40.6929       278.568       319.261    
  19  0.998108     -0.189387E-02 -0.180690      0.180690       317.888       318.068    
  20  0.741140     -0.299566      -28.5809       28.5809       333.837       362.418    
  21  0.623042     -0.473141      -45.1413       45.1413       325.716       370.857    
  22  0.504617     -0.683955      -65.2545       65.2545       318.942       384.196    
  23  0.872499     -0.136394      -13.0130       13.0130       317.736       330.749    
  24  0.142620      -1.94757      -185.813       185.813       319.806       505.619    
  25  0.580285     -0.544236      -51.9242       51.9242       318.025       369.949    
  26  0.860063E-01  -2.45334      -234.067       234.067       320.536       554.602    
  27  0.401846     -0.911687      -86.9818       86.9818       278.834       365.815    
  28  0.161242      -1.82485      -174.105       174.105       318.025       492.130    
  29  0.550753     -0.596469      -56.9077       56.9077       319.172       376.080    
  30  0.815012     -0.204553      -19.5159       19.5159       315.769       335.285    
  31  0.438663     -0.824024      -78.6181       78.6181       327.487       406.105    
  32  0.542283     -0.611968      -58.3863       58.3863       314.940       373.326    
  33  0.943132E-01  -2.36113      -225.270       225.270       325.264       550.534    
  34  0.236587      -1.44144      -137.524       137.524       318.008       455.533    
  35  0.283068      -1.26207      -120.411       120.411       317.674       438.085    
  36  0.973178     -0.271886E-01  -2.59400       2.59400       313.152       315.746    
  37  0.596723     -0.516302      -49.2591       49.2591       319.482       368.741    
  38  0.595114     -0.519003      -49.5168       49.5168       318.381       367.898    
  39  0.948736     -0.526250E-01  -5.02082       5.02082       361.180       366.200    
  40  0.216072E-01  -3.83473      -365.862       365.862       294.012       659.874    
  41  0.440213     -0.820496      -78.2815       78.2815       314.057       392.338    
  42  0.905197     -0.996023E-01  -9.50281       9.50281       318.052       327.555    
  43  0.158396      -1.84266      -175.804       175.804       332.752       508.556    
  44  0.287789      -1.24553      -118.833       118.833       284.323       403.156    
  45  0.238244      -1.43446      -136.858       136.858       320.091       456.950    
  46  0.363881      -1.01093      -96.4501       96.4501       319.305       415.755    
  47  0.828805     -0.187771      -17.9148       17.9148       305.147       323.062    
  48  0.587140     -0.532492      -50.8038       50.8038       329.961       380.765    
  49  0.141687      -1.95414      -186.440       186.440       290.274       476.714    
  50  0.879115     -0.128839      -12.2922       12.2922       354.393       366.686    
  51  0.742190     -0.298150      -28.4458       28.4458       310.888       339.334    
  52  0.218958      -1.51887      -144.912       144.912       318.545       463.457    
  53  0.333192      -1.09904      -104.856       104.856       308.952       413.808    
  54  0.356774      -1.03065      -98.3321       98.3321       319.594       417.926    
  55  0.739597     -0.301650      -28.7797       28.7797       290.928       319.707    
  56  0.224658E-01  -3.79576      -362.144       362.144       317.896       680.040    
  57  0.338214      -1.08408      -103.429       103.429       318.025       421.454    
  58  0.227014      -1.48275      -141.465       141.465       300.437       441.902    
  59  0.289792E-01  -3.54118      -337.855       337.855       317.931       655.786    
  60  0.871226     -0.137854      -13.1523       13.1523       319.053       332.205    
  61  0.159622      -1.83495      -175.068       175.068       311.882       486.950    
  62  0.581826     -0.541584      -51.6712       51.6712       316.952       368.623    
  63  0.733467E-02  -4.91514      -468.942       468.942       315.864       784.806    
  64  0.646078     -0.436835      -41.6774       41.6774       321.375       363.052    
  65  0.976710     -0.235653E-01  -2.24830       2.24830       323.786       326.034    
  66  0.390127     -0.941284      -89.8056       89.8056       344.821       434.626    
  67  0.394291     -0.930666      -88.7926       88.7926       312.134       400.926    
  68  0.796004     -0.228151      -21.7673       21.7673       501.425       523.192    
  69  0.393786     -0.931948      -88.9149       88.9149       291.059       379.973    
  70  0.672353     -0.396971      -37.8741       37.8741       317.094       354.968    
  71  0.856786E-01  -2.45715      -234.431       234.431       310.973       545.404    
  72  0.769351     -0.262207      -25.0166       25.0166       332.461       357.478    
  73  0.161441E-01  -4.12620      -393.671       393.671       469.164       862.834    
  74  0.126673      -2.06615      -197.126       197.126       414.704       611.830    
  75  0.594452E-01  -2.82270      -269.307       269.307       558.181       827.488    
  76  0.865232     -0.144757      -13.8109       13.8109       411.198       425.009    
  77  0.980529     -0.196631E-01  -1.87601       1.87601       321.000       322.876    
  78  0.862745     -0.147636      -14.0856       14.0856       568.245       582.330    
  79  0.587821     -0.531332      -50.6931       50.6931       282.959       333.652    
loop,thermsimp(1:2)       19   99.3488       344.310    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        932.29         87.89          1.23         40.06          0.29          0.05        129.52
Just calling func    0   0        129.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    932.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       19
neval is:      112
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       20
neval is:      112


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      112     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -59.7216       59.7216       288.946       348.667    
   2  0.288348      -1.24359      -118.648       118.648       313.152       431.800    
   3  0.910112E-01  -2.39677      -228.670       228.670       317.888       546.558    
   4  0.213812      -1.54266      -147.181       147.181       278.568       425.749    
   5  0.575222     -0.552999      -52.7603       52.7603       290.928       343.688    
   6  0.855707     -0.155827      -14.8671       14.8671       321.000       335.867    
   7  0.818692     -0.200047      -19.0860       19.0860       305.147       324.233    
   8  0.309911      -1.17147      -111.767       111.767       323.786       435.553    
   9  0.773438     -0.256910      -24.5111       24.5111       318.052       342.564    
  10  0.440502E-01  -3.12243      -297.903       297.903       317.736       615.639    
  11  0.211655      -1.55280      -148.149       148.149       319.053       467.202    
  12  0.713577     -0.337465      -32.1967       32.1967       282.959       315.156    
  13  0.927405     -0.753650E-01  -7.19039       7.19039       315.769       322.960    
  14  0.360229      -1.02101      -97.4124       97.4124       310.888       408.301    
  15  0.911872     -0.922553E-01  -8.80185       8.80185       318.671       327.473    
  16  0.800691     -0.222280      -21.2072       21.2072       317.094       338.301    
  17  0.169830      -1.77296      -169.154       169.154       332.461       501.615    
  18  0.581014     -0.542980      -51.8044       51.8044       313.807       365.611    
  19  0.869395     -0.139958      -13.3530       13.3530       333.837       347.190    
  20  0.773880     -0.256338      -24.4566       24.4566       321.375       345.832    
  21  0.496085     -0.701008      -66.8815       66.8815       269.945       336.827    
  22  0.530037     -0.634809      -60.5655       60.5655       278.834       339.399    
  23  0.239414      -1.42956      -136.391       136.391       361.180       497.571    
  24  0.595728     -0.517972      -49.4184       49.4184       354.393       403.812    
  25  0.170793      -1.76730      -168.614       168.614       318.381       486.995    
  26  0.983027     -0.171183E-01  -1.63321       1.63321       316.952       318.585    
  27  0.608714     -0.496407      -47.3609       47.3609       319.482       366.843    
  28  0.518727     -0.656378      -62.6234       62.6234       317.507       380.131    
  29  0.887918     -0.118876      -11.3417       11.3417       318.025       329.367    
  30  0.140498      -1.96256      -187.243       187.243       325.716       512.959    
  31  0.256308      -1.36138      -129.885       129.885       272.208       402.093    
  32  0.887238     -0.119642      -11.4147       11.4147       312.764       324.179    
  33  0.306042      -1.18403      -112.966       112.966       314.940       427.906    
  34  0.993873     -0.614632E-02 -0.586405      0.586405       319.172       319.759    
  35  0.275412E-01  -3.59207      -342.711       342.711       291.059       633.769    
  36  0.698960     -0.358161      -34.1713       34.1713       329.961       364.133    
  37  0.268424      -1.31519      -125.479       125.479       318.942       444.421    
  38  0.580935E-01  -2.84570      -271.501       271.501       314.057       585.558    
  39  0.242705      -1.41591      -135.088       135.088       316.943       452.032    
  40  0.443517     -0.813019      -77.5682       77.5682       312.134       389.702    
  41  0.904179     -0.100728      -9.61019       9.61019       284.323       293.934    
  42  0.454025     -0.789603      -75.3341       75.3341       327.487       402.821    
  43  0.592994     -0.522572      -49.8573       49.8573       308.952       358.809    
  44  0.401796     -0.911812      -86.9937       86.9937       319.358       406.352    
  45  0.130776      -2.03427      -194.085       194.085       319.305       513.390    
  46  0.709753     -0.342839      -32.7094       32.7094       319.594       352.303    
  47  0.388071     -0.946568      -90.3097       90.3097       318.025       408.335    
  48  0.362521      -1.01467      -96.8073       96.8073       411.198       508.005    
  49  0.285379      -1.25394      -119.635       119.635       344.821       464.456    
  50  0.286508      -1.24999      -119.258       119.258       317.674       436.933    
  51  0.951542     -0.496714E-01  -4.73903       4.73903       300.437       305.176    
  52  0.122933      -2.09612      -199.986       199.986       326.468       526.454    
  53  0.210928      -1.55624      -148.477       148.477       318.008       466.485    
  54  0.860093     -0.150715      -14.3793       14.3793       320.091       334.470    
  55  0.997563     -0.243951E-02 -0.232748      0.232748       318.545       318.777    
  56  0.750720     -0.286722      -27.3554       27.3554       313.360       340.715    
  57  0.667101     -0.404814      -38.6223       38.6223       290.274       328.896    
  58  0.508750E-01  -2.97838      -284.160       284.160       311.882       596.042    
  59  0.552474     -0.593349      -56.6100       56.6100       325.871       382.481    
  60  0.514478     -0.664602      -63.4081       63.4081       317.711       381.119    
  61  0.539834     -0.616494      -58.8182       58.8182       318.025       376.843    
  62  0.610888     -0.492841      -47.0208       47.0208       319.806       366.827    
  63  0.328075      -1.11451      -106.333       106.333       332.752       439.085    
  64  0.894692     -0.111276      -10.6166       10.6166       501.425       512.042    
  65  0.810283     -0.210372      -20.0711       20.0711       310.973       331.044    
  66  0.691642     -0.368687      -35.1755       35.1755       325.264       360.439    
  67  0.896896     -0.108815      -10.3818       10.3818       320.536       330.917    
  68  0.742287     -0.298020      -28.4334       28.4334       568.245       596.678    
  69  0.974450     -0.258821E-01  -2.46935       2.46935       317.923       320.393    
  70  0.339669      -1.07978      -103.019       103.019       414.704       517.723    
  71  0.854515     -0.157221      -15.0001       15.0001       322.677       337.677    
  72  0.153353      -1.87501      -178.890       178.890       276.173       455.063    
  73  0.883349     -0.124034      -11.8338       11.8338       313.757       325.591    
  74  0.716255     -0.333718      -31.8393       31.8393       317.931       349.771    
  75  0.645043     -0.438438      -41.8303       41.8303       294.012       335.842    
  76  0.630111     -0.461860      -44.0649       44.0649       317.896       361.961    
  77  0.511014     -0.671358      -64.0527       64.0527       315.864       379.917    
  78  0.130062      -2.03974      -194.607       194.607       558.181       752.788    
  79  0.671069     -0.398883      -38.0564       38.0564       932.287       970.344    
loop,thermsimp(1:2)       20   59.7216       118.648    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    114        469.16         87.37          1.12         39.93          1.14          0.05        129.62
Just calling func    0   0        129.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    469.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       20
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       21
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      113     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -115.692       115.692       284.323       400.015    
   2  0.663536     -0.410173      -39.1336       39.1336       300.437       339.570    
   3  0.263982      -1.33188      -127.071       127.071       282.959       410.030    
   4  0.792402     -0.232686      -22.2000       22.2000       316.952       339.152    
   5  0.624731     -0.470434      -44.8829       44.8829       318.545       363.427    
   6  0.170977      -1.76622      -168.511       168.511       319.172       487.684    
   7  0.362487      -1.01477      -96.8165       96.8165       317.923       414.740    
   8  0.659245     -0.416659      -39.7525       39.7525       315.769       355.522    
   9  0.746481E-03  -7.20014      -686.948       686.948       312.764       999.712    
  10  0.690046     -0.370998      -35.3960       35.3960       305.147       340.543    
  11  0.905636     -0.991173E-01  -9.45654       9.45654       313.757       323.214    
  12  0.317643      -1.14683      -109.416       109.416       318.671       428.087    
  13  0.321948      -1.13336      -108.132       108.132       290.274       398.406    
  14  0.293974      -1.22426      -116.804       116.804       318.025       434.829    
  15  0.679275     -0.386729      -36.8968       36.8968       320.536       357.433    
  16  0.180340      -1.71291      -163.425       163.425       310.973       474.398    
  17  0.539600     -0.616927      -58.8595       58.8595       320.091       378.951    
  18  0.260315      -1.34586      -128.405       128.405       294.012       422.417    
  19  0.256777      -1.35955      -129.711       129.711       321.000       450.711    
  20  0.518851     -0.656138      -62.6005       62.6005       269.945       332.546    
  21  0.485887     -0.721780      -68.8633       68.8633       322.677       391.540    
  22  0.562814     -0.574805      -54.8408       54.8408       317.094       371.935    
  23  0.906369     -0.983082E-01  -9.37935       9.37935       278.834       288.213    
  24  0.332143      -1.10219      -105.157       105.157       313.360       418.517    
  25  0.912001E-01  -2.39470      -228.472       228.472       318.052       546.525    
  26  0.302569      -1.19545      -114.055       114.055       290.928       404.982    
  27  0.362040      -1.01600      -96.9341       96.9341       321.375       418.309    
  28  0.630870     -0.460656      -43.9500       43.9500       333.837       377.787    
  29  0.685312     -0.377881      -36.0527       36.0527       288.946       324.998    
  30  0.329910      -1.10894      -105.801       105.801       317.931       423.732    
  31  0.906630E-01  -2.40061      -229.036       229.036       319.594       548.630    
  32  0.339749      -1.07955      -102.997       102.997       308.952       411.949    
  33  0.783039     -0.244573      -23.3341       23.3341       325.264       348.598    
  34  0.322673      -1.13112      -107.917       107.917       317.896       425.813    
  35  0.255311      -1.36527      -130.257       130.257       329.961       460.219    
  36  0.645921     -0.437078      -41.7005       41.7005       313.807       355.508    
  37  0.240122      -1.42661      -136.109       136.109       319.806       455.915    
  38  0.224638      -1.49326      -142.469       142.469       319.482       461.950    
  39  0.682659     -0.381760      -36.4228       36.4228       318.025       354.448    
  40  0.533856     -0.627629      -59.8805       59.8805       315.864       375.745    
  41  0.439620E-02  -5.42701      -517.778       517.778       317.507       835.285    
  42  0.409891     -0.891863      -85.0904       85.0904       317.711       402.801    
  43  0.379406     -0.969149      -92.4641       92.4641       325.871       418.335    
  44  0.982111     -0.180514E-01  -1.72224       1.72224       312.134       313.856    
  45  0.243530      -1.41251      -134.764       134.764       272.208       406.972    
  46  0.709323     -0.343445      -32.7672       32.7672       327.487       360.254    
  47  0.212014      -1.55110      -147.987       147.987       354.393       502.380    
  48  0.530919     -0.633146      -60.4069       60.4069       319.358       379.765    
  49  0.439600     -0.821890      -78.4145       78.4145       310.888       389.303    
  50  0.304385      -1.18946      -113.484       113.484       318.025       431.509    
  51  0.850253     -0.162221      -15.4771       15.4771       278.568       294.045    
  52  0.686564     -0.376055      -35.8785       35.8785       314.940       350.819    
  53  0.894299     -0.111715      -10.6584       10.6584       313.152       323.811    
  54  0.724097E-02  -4.92800      -470.168       470.168       323.786       793.955    
  55  0.666382     -0.405892      -38.7251       38.7251       317.674       356.399    
  56  0.216072      -1.53214      -146.178       146.178       332.752       478.930    
  57  0.481454     -0.730944      -69.7375       69.7375       318.942       388.679    
  58  0.107413      -2.23107      -212.861       212.861       316.943       529.804    
  59  0.943557     -0.580990E-01  -5.54308       5.54308       276.173       281.716    
  60  0.259811      -1.34780      -128.590       128.590       344.821       473.411    
  61  0.526852     -0.640836      -61.1406       61.1406       318.008       379.149    
  62  0.306319E-01  -3.48571      -332.563       332.563       319.053       651.616    
  63  0.180513      -1.71195      -163.333       163.333       318.381       481.714    
  64  0.901495     -0.103701      -9.89385       9.89385       361.180       371.073    
  65  0.274530      -1.29269      -123.333       123.333       332.461       455.794    
  66  0.773836     -0.256395      -24.4620       24.4620       411.198       435.660    
  67  0.158774      -1.84027      -175.576       175.576       501.425       677.001    
  68  0.514226     -0.665093      -63.4549       63.4549       325.716       389.171    
  69  0.312978      -1.16162      -110.828       110.828       319.305       430.133    
  70  0.917534     -0.860656E-01  -8.21131       8.21131       414.704       422.915    
  71  0.548182     -0.601148      -57.3541       57.3541       326.468       383.822    
  72  0.131177      -2.03121      -193.792       193.792       317.888       511.680    
  73  0.407078     -0.898750      -85.7475       85.7475       314.057       399.804    
  74  0.793948     -0.230737      -22.0141       22.0141       311.882       333.896    
  75  0.817497     -0.201509      -19.2254       19.2254       568.245       587.470    
  76  0.948163     -0.532294E-01  -5.07848       5.07848       317.736       322.815    
  77  0.578937E-01  -2.84915      -271.830       271.830       291.059       562.889    
  78  0.701887     -0.353983      -33.7727       33.7727       558.181       591.954    
  79  0.934701     -0.675283E-01  -6.44271       6.44271       469.164       475.606    
loop,thermsimp(1:2)       21   115.692       39.1336    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        277.89         87.32          1.12         39.85          1.16          0.05        129.51
Just calling func    0   0        129.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116        308.91         87.30          1.12         39.91          1.23          0.05        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       21
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       22
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      115     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -91.3975       91.3975       276.173       367.570    
   2  0.741480     -0.299107      -28.5370       28.5370       278.834       307.371    
   3  0.138898      -1.97401      -188.336       188.336       278.568       466.903    
   4  0.751974E-01  -2.58764      -246.880       246.880       312.134       559.014    
   5  0.824485     -0.192996      -18.4133       18.4133       317.736       336.149    
   6  0.982900     -0.172482E-01  -1.64561       1.64561       313.757       315.403    
   7  0.693409     -0.366136      -34.9321       34.9321       313.152       348.084    
   8  0.941572     -0.602045E-01  -5.74396       5.74396       288.946       294.690    
   9  0.812713     -0.207378      -19.7854       19.7854       269.945       289.730    
  10  0.879507     -0.128393      -12.2497       12.2497       311.882       324.132    
  11  0.418958     -0.869984      -83.0030       83.0030       316.952       399.955    
  12  0.314952      -1.15533      -110.228       110.228       300.437       410.664    
  13  0.812426     -0.207731      -19.8191       19.8191       305.147       324.966    
  14  0.213788      -1.54277      -147.192       147.192       325.264       472.456    
  15  0.521629     -0.650798      -62.0910       62.0910       314.940       377.031    
  16  0.287143      -1.24777      -119.047       119.047       318.025       437.072    
  17  0.518340     -0.657125      -62.6947       62.6947       313.807       376.502    
  18  0.712802E-02  -4.94372      -471.668       471.668       315.769       787.438    
  19  0.579935     -0.544838      -51.9817       51.9817       317.674       369.656    
  20  0.508101E-02  -5.28224      -503.966       503.966       320.536       824.502    
  21  0.984466     -0.156557E-01  -1.49368       1.49368       327.487       328.981    
  22  0.394325     -0.930579      -88.7842       88.7842       318.545       407.329    
  23  0.837309     -0.177562      -16.9408       16.9408       361.180       378.120    
  24  0.683519     -0.380501      -36.3027       36.3027       317.094       353.397    
  25  0.892337     -0.113912      -10.8680       10.8680       315.864       326.732    
  26  0.297675      -1.21175      -115.610       115.610       333.837       449.448    
  27  0.566054     -0.569065      -54.2931       54.2931       320.091       374.384    
  28  0.325499E-01  -3.42498      -326.769       326.769       318.008       644.777    
  29  0.721169     -0.326882      -31.1870       31.1870       319.358       350.545    
  30  0.370449     -0.993040      -94.7435       94.7435       326.468       421.212    
  31  0.398952     -0.918913      -87.6713       87.6713       318.942       406.613    
  32  0.942469     -0.592518E-01  -5.65307       5.65307       325.716       331.369    
  33  0.379045     -0.970101      -92.5550       92.5550       310.888       403.443    
  34  0.218373      -1.52155      -145.167       145.167       322.677       467.844    
  35  0.413944     -0.882024      -84.1517       84.1517       290.274       374.426    
  36  0.452532     -0.792896      -75.6483       75.6483       314.057       389.705    
  37  0.938896     -0.630505E-01  -6.01549       6.01549       284.323       290.339    
  38  0.389299     -0.943409      -90.0083       90.0083       317.711       407.719    
  39  0.943794     -0.578471E-01  -5.51905       5.51905       290.928       296.447    
  40  0.706887     -0.346884      -33.0954       33.0954       272.208       305.303    
  41  0.274873      -1.29145      -123.214       123.214       282.959       406.173    
  42  0.343864      -1.06751      -101.848       101.848       308.952       410.800    
  43  0.869527E-01  -2.44239      -233.023       233.023       317.923       550.946    
  44  0.859615     -0.151271      -14.4324       14.4324       321.375       335.807    
  45  0.264079      -1.33151      -127.036       127.036       325.871       452.907    
  46  0.494871     -0.703457      -67.1151       67.1151       313.360       380.475    
  47  0.112943      -2.18087      -208.072       208.072       294.012       502.084    
  48  0.358273      -1.02646      -97.9321       97.9321       414.704       512.636    
  49  0.215257      -1.53592      -146.538       146.538       317.931       464.470    
  50  0.441681     -0.817166      -77.9638       77.9638       317.896       395.860    
  51  0.888276     -0.118473      -11.3032       11.3032       318.671       329.974    
  52  0.780286     -0.248095      -23.6701       23.6701       319.305       342.975    
  53  0.488747     -0.715911      -68.3033       68.3033       318.025       386.328    
  54  0.683795     -0.380097      -36.2642       36.2642       318.025       354.289    
  55  0.466986     -0.761456      -72.6486       72.6486       411.198       483.847    
  56  0.900497     -0.104809      -9.99954       9.99954       321.000       331.000    
  57  0.876058     -0.132323      -12.6246       12.6246       332.461       345.086    
  58  0.413808     -0.882354      -84.1832       84.1832       319.806       403.990    
  59  0.268165      -1.31615      -125.571       125.571       329.961       455.532    
  60  0.637465     -0.450255      -42.9578       42.9578       319.482       362.439    
  61  0.476344     -0.741616      -70.7557       70.7557       344.821       415.577    
  62  0.878474     -0.129569      -12.3619       12.3619       310.973       323.335    
  63  0.185973      -1.68216      -160.490       160.490       469.164       629.654    
  64  0.802667E-03  -7.12757      -680.024       680.024       332.752       1012.78    
  65  0.480758     -0.732390      -69.8756       69.8756       318.381       388.257    
  66  0.789279     -0.236635      -22.5767       22.5767       319.172       341.749    
  67  0.174217      -1.74745      -166.720       166.720       354.393       521.114    
  68  0.825561     -0.191692      -18.2888       18.2888       317.888       336.176    
  69  0.532291     -0.630566      -60.1607       60.1607       316.943       377.104    
  70  0.118632E-01  -4.43431      -423.067       423.067       318.052       741.119    
  71  0.214857      -1.53778      -146.716       146.716       319.594       466.310    
  72  0.111318      -2.19536      -209.454       209.454       291.059       500.513    
  73  0.823034     -0.194758      -18.5814       18.5814       568.245       586.826    
  74  0.697593     -0.360119      -34.3581       34.3581       558.181       592.539    
  75  0.588207     -0.530676      -50.6305       50.6305       319.053       369.683    
  76  0.384970     -0.954591      -91.0751       91.0751       501.425       592.500    
  77  0.768352     -0.263507      -25.1405       25.1405       323.786       348.927    
  78  0.990092     -0.995757E-02 -0.950028      0.950028       317.507       318.457    
  79  0.550430     -0.597056      -56.9636       56.9636       277.887       334.851    
loop,thermsimp(1:2)       22   91.3975       28.5370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117        283.39         87.28          1.12         39.77          1.41          0.05        129.62
Just calling func    0   0        129.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118        286.30         87.29          1.12         39.86          1.48          0.05        129.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    283.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       22
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       23
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      117     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -106.455       106.455       269.945       376.400    
   2  0.736029     -0.306486      -29.2411       29.2411       284.323       313.564    
   3  0.608436     -0.496864      -47.4046       47.4046       288.946       336.350    
   4  0.584882     -0.536346      -51.1715       51.1715       290.928       342.099    
   5  0.617514     -0.482053      -45.9915       45.9915       272.208       318.199    
   6  0.376473     -0.976909      -93.2045       93.2045       278.834       372.038    
   7  0.535145     -0.625218      -59.6505       59.6505       313.757       373.408    
   8  0.341783      -1.07358      -102.428       102.428       317.507       419.935    
   9  0.804208E-01  -2.52048      -240.473       240.473       310.973       551.446    
  10  0.660499     -0.414760      -39.5712       39.5712       311.882       351.453    
  11  0.739860E-01  -2.60388      -248.430       248.430       305.147       553.577    
  12  0.203251      -1.59331      -152.014       152.014       315.864       467.878    
  13  0.637025     -0.450946      -43.0237       43.0237       327.487       370.511    
  14  0.687460     -0.374752      -35.7541       35.7541       318.671       354.425    
  15  0.663581     -0.410105      -39.1271       39.1271       321.000       360.127    
  16  0.579690     -0.545263      -52.0222       52.0222       325.716       377.738    
  17  0.775653     -0.254050      -24.2383       24.2383       277.887       302.126    
  18  0.284124      -1.25834      -120.055       120.055       321.375       441.431    
  19  0.317710      -1.14662      -109.396       109.396       317.736       427.132    
  20  0.958871     -0.419990E-01  -4.00703       4.00703       317.888       321.895    
  21  0.582932     -0.539685      -51.4900       51.4900       319.172       370.662    
  22  0.905476     -0.992942E-01  -9.47342       9.47342       319.305       328.778    
  23  0.225214      -1.49070      -142.224       142.224       332.461       474.686    
  24  0.618260     -0.480846      -45.8763       45.8763       313.152       359.028    
  25  0.608706     -0.496420      -47.3622       47.3622       323.786       371.148    
  26  0.651052     -0.429165      -40.9456       40.9456       319.358       360.304    
  27  0.138439E-02  -6.58249      -628.020       628.020       317.094       945.114    
  28  0.157375      -1.84913      -176.420       176.420       318.025       494.446    
  29  0.168063      -1.78342      -170.151       170.151       319.482       489.633    
  30  0.924354     -0.786598E-01  -7.50474       7.50474       276.173       283.678    
  31  0.985585     -0.145204E-01  -1.38536       1.38536       317.674       319.060    
  32  0.540844E-01  -2.91721      -278.324       278.324       319.053       597.377    
  33  0.535345     -0.624843      -59.6148       59.6148       320.091       379.706    
  34  0.736351     -0.306048      -29.1993       29.1993       290.274       319.473    
  35  0.283062E-01  -3.56467      -340.097       340.097       313.807       653.904    
  36  0.690743     -0.369987      -35.2995       35.2995       314.940       350.240    
  37  0.260994      -1.34326      -128.157       128.157       316.943       445.100    
  38  0.243637      -1.41208      -134.723       134.723       361.180       495.902    
  39  0.850226     -0.162253      -15.4802       15.4802       313.360       328.840    
  40  0.589307     -0.528809      -50.4523       50.4523       318.025       368.478    
  41  0.515087     -0.663420      -63.2953       63.2953       318.381       381.676    
  42  0.348855      -1.05310      -100.474       100.474       314.057       414.531    
  43  0.791407     -0.233943      -22.3199       22.3199       317.896       340.216    
  44  0.370775     -0.992160      -94.6595       94.6595       316.952       411.611    
  45  0.676021     -0.391531      -37.3551       37.3551       310.888       348.243    
  46  0.125601      -2.07465      -197.937       197.937       319.806       517.743    
  47  0.582904     -0.539733      -51.4946       51.4946       282.959       334.454    
  48  0.818994     -0.199679      -19.0509       19.0509       318.942       337.993    
  49  0.291406      -1.23304      -117.641       117.641       318.545       436.186    
  50  0.887104     -0.119794      -11.4292       11.4292       317.711       329.140    
  51  0.666242     -0.406102      -38.7452       38.7452       300.437       339.182    
  52  0.931047     -0.714460E-01  -6.81649       6.81649       308.952       315.768    
  53  0.169651      -1.77401      -169.254       169.254       344.821       514.075    
  54  0.228429      -1.47653      -140.872       140.872       326.468       467.340    
  55  0.453181     -0.791463      -75.5116       75.5116       318.025       393.537    
  56  0.376518     -0.976789      -93.1930       93.1930       333.837       427.030    
  57  0.551543     -0.595035      -56.7708       56.7708       325.871       382.642    
  58  0.837469     -0.177371      -16.9226       16.9226       329.961       346.884    
  59  0.436148     -0.829773      -79.1666       79.1666       317.931       397.098    
  60  0.245765      -1.40338      -133.893       133.893       319.594       453.487    
  61  0.727782     -0.317754      -30.3161       30.3161       278.568       308.884    
  62  0.677441     -0.389433      -37.1548       37.1548       322.677       359.831    
  63  0.835222     -0.180057      -17.1788       17.1788       325.264       342.443    
  64  0.964839     -0.357941E-01  -3.41503       3.41503       411.198       414.613    
  65  0.799790     -0.223406      -21.3146       21.3146       291.059       312.373    
  66  0.274169      -1.29401      -123.458       123.458       294.012       417.470    
  67  0.342685      -1.07094      -102.176       102.176       414.704       516.880    
  68  0.688325     -0.373494      -35.6342       35.6342       354.393       390.027    
  69  0.683936     -0.379890      -36.2444       36.2444       317.923       354.168    
  70  0.779136     -0.249570      -23.8109       23.8109       312.134       335.944    
  71  0.806749     -0.214742      -20.4881       20.4881       568.245       588.733    
  72  0.645551     -0.437652      -41.7553       41.7553       501.425       543.180    
  73  0.403078     -0.908624      -86.6896       86.6896       558.181       644.871    
  74  0.663948     -0.409551      -39.0743       39.0743       469.164       508.238    
  75  0.410392     -0.890644      -84.9741       84.9741       318.008       402.983    
  76  0.483021     -0.727696      -69.4276       69.4276       318.052       387.480    
  77  0.174230      -1.74738      -166.713       166.713       315.769       482.482    
  78  0.414733E-01  -3.18271      -303.654       303.654       320.536       624.190    
  79  0.517990     -0.657799      -62.7590       62.7590       283.393       346.152    
loop,thermsimp(1:2)       23   106.455       29.2411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119        287.14         87.29          1.14         40.16          0.82          0.05        129.46
Just calling func    0   0        129.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120        575.58         87.28          1.11         39.62          1.48          0.05        129.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    287.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       23
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       24
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      119     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -117.610       117.610       276.173       393.782    
   2  0.991852     -0.818183E-02 -0.780608      0.780608       277.887       278.668    
   3  0.317368      -1.14769      -109.499       109.499       278.568       388.066    
   4  0.737330     -0.304720      -29.0726       29.0726       291.059       320.131    
   5  0.834641     -0.180753      -17.2452       17.2452       284.323       301.569    
   6  0.464401     -0.767007      -73.1783       73.1783       308.952       382.130    
   7  0.592116     -0.524053      -49.9986       49.9986       272.208       322.206    
   8  0.464372     -0.767069      -73.1841       73.1841       317.674       390.858    
   9  0.636055E-01  -2.75505      -262.853       262.853       290.274       553.127    
  10  0.712927     -0.338376      -32.2836       32.2836       317.888       350.171    
  11  0.265597      -1.32578      -126.489       126.489       319.305       445.794    
  12  0.152318      -1.88178      -179.536       179.536       313.360       492.896    
  13  0.629580     -0.462703      -44.1453       44.1453       317.711       361.856    
  14  0.849464     -0.163150      -15.5657       15.5657       282.959       298.525    
  15  0.487816     -0.717817      -68.4852       68.4852       312.134       380.619    
  16  0.374667     -0.981718      -93.6633       93.6633       288.946       382.609    
  17  0.657383     -0.419488      -40.0223       40.0223       318.942       358.964    
  18  0.846901     -0.166172      -15.8540       15.8540       300.437       316.291    
  19  0.201185      -1.60353      -152.989       152.989       317.896       470.885    
  20  0.771980     -0.258797      -24.6912       24.6912       290.928       315.619    
  21  0.507739     -0.677788      -64.6661       64.6661       325.264       389.930    
  22  0.280262      -1.27203      -121.361       121.361       283.393       404.755    
  23  0.285359      -1.25401      -119.642       119.642       329.961       449.603    
  24  0.246191      -1.40165      -133.728       133.728       310.888       444.616    
  25  0.559989E-01  -2.88242      -275.005       275.005       314.940       589.945    
  26  0.330462      -1.10726      -105.641       105.641       311.882       417.523    
  27  0.899405     -0.106022      -10.1153       10.1153       317.923       328.039    
  28  0.637003     -0.450981      -43.0270       43.0270       318.671       361.698    
  29  0.699726E-01  -2.65965      -253.751       253.751       313.152       566.903    
  30  0.677191     -0.389802      -37.1900       37.1900       322.677       359.867    
  31  0.649507     -0.431542      -41.1724       41.1724       321.000       362.173    
  32  0.527986     -0.638685      -60.9354       60.9354       319.358       380.293    
  33  0.374870E-01  -3.28376      -313.296       313.296       318.025       631.321    
  34  0.448697     -0.801407      -76.4603       76.4603       327.487       403.947    
  35  0.809612     -0.211200      -20.1501       20.1501       319.172       339.322    
  36  0.836235     -0.178846      -17.0632       17.0632       323.786       340.849    
  37  0.198161      -1.61867      -154.434       154.434       278.834       433.267    
  38  0.222702      -1.50192      -143.294       143.294       313.757       457.052    
  39  0.888863     -0.117812      -11.2401       11.2401       269.945       281.185    
  40  0.868267     -0.141256      -13.4769       13.4769       325.716       339.193    
  41  0.164066      -1.80749      -172.448       172.448       320.091       492.539    
  42  0.163797      -1.80912      -172.604       172.604       318.381       490.985    
  43  0.883498     -0.123867      -11.8178       11.8178       325.871       337.689    
  44  0.749983     -0.287705      -27.4492       27.4492       318.052       345.502    
  45  0.666691     -0.405428      -38.6809       38.6809       354.393       393.074    
  46  0.978530     -0.217038E-01  -2.07070       2.07070       318.025       320.096    
  47  0.442024     -0.816391      -77.8899       77.8899       317.931       395.821    
  48  0.228080      -1.47806      -141.018       141.018       318.008       459.026    
  49  0.226174      -1.48645      -141.818       141.818       316.952       458.770    
  50  0.388394     -0.945736      -90.2304       90.2304       314.057       404.287    
  51  0.257425      -1.35703      -129.470       129.470       411.198       540.669    
  52  0.707288     -0.346317      -33.0413       33.0413       294.012       327.053    
  53  0.518387     -0.657032      -62.6858       62.6858       317.507       380.193    
  54  0.628700     -0.464102      -44.2788       44.2788       333.837       378.116    
  55  0.981249     -0.189295E-01  -1.80602       1.80602       317.736       319.542    
  56  0.928260     -0.744431E-01  -7.10244       7.10244       318.545       325.647    
  57  0.752004E-02  -4.89018      -466.560       466.560       321.375       787.935    
  58  0.930611     -0.719140E-01  -6.86114       6.86114       316.943       323.804    
  59  0.552686     -0.592965      -56.5733       56.5733       319.594       376.167    
  60  0.695877     -0.362583      -34.5931       34.5931       326.468       361.061    
  61  0.432533     -0.838096      -79.9607       79.9607       315.864       395.825    
  62  0.127859      -2.05683      -196.237       196.237       332.461       528.698    
  63  0.304427      -1.18932      -113.471       113.471       315.769       429.240    
  64  0.938376     -0.636043E-01  -6.06833       6.06833       319.482       325.550    
  65  0.958131     -0.427711E-01  -4.08068       4.08068       318.025       322.106    
  66  0.177025      -1.73147      -165.195       165.195       361.180       526.375    
  67  0.352264      -1.04338      -99.5459       99.5459       469.164       568.710    
  68  0.915612     -0.881621E-01  -8.41133       8.41133       344.821       353.232    
  69  0.891986     -0.114305      -10.9055       10.9055       414.704       425.610    
  70  0.754865     -0.281216      -26.8301       26.8301       319.806       346.636    
  71  0.616120     -0.484313      -46.2072       46.2072       501.425       547.632    
  72  0.873159     -0.135638      -12.9409       12.9409       310.973       323.914    
  73  0.437761     -0.826082      -78.8144       78.8144       305.147       383.961    
  74  0.627710     -0.465677      -44.4291       44.4291       568.245       612.674    
  75  0.174492      -1.74588      -166.570       166.570       319.053       485.623    
  76  0.181620      -1.70584      -162.750       162.750       320.536       483.286    
  77  0.514409     -0.664737      -63.4209       63.4209       558.181       621.602    
  78  0.496451     -0.700270      -66.8110       66.8110       313.807       380.618    
  79  0.109177      -2.21478      -211.307       211.307       287.140       498.447    
loop,thermsimp(1:2)       24   117.610      0.780608    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121        282.66         87.42          1.14         40.05          1.04          0.05        129.71
Just calling func    0   0        129.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122        282.81         87.29          1.13         39.96          0.96          0.05        129.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    282.66        1.705     -1.198      6.146     -102.6     0.6751    
                     -0.1634      3.939     -99.70      4.000     0.9960    
                       1.880     -1.279      1.467    -0.1838E+05 -2.457    
                      -1.179      0.000      0.000      0.000     -1.221    

                      -2.500     0.5077E+05 0.4069E+05 -3888.    -0.8617E+05
                      -2.059     -6.437     -4.361     -7.326      2.969    
                      -13.80     -2.975      2164.      0.000      3781.    

                       4666.      6177.      4588.      8527.      2474.    
                       2998.     0.7093E-01-0.6133E-01  0.000    -0.4872    
                     -0.1003    -0.1553    -0.5947E-01-0.2049    -0.2131E-01

                      -1.491    -0.7594E-01  0.000    -0.3724E-01-0.6558E-02
                      0.8541E-01 0.3966E-01-0.2171E-01-0.3646    -0.1463    
                     -0.4158E-01-0.6451E-01-0.9527E-01-0.3576      0.000    

                      -2.932     -1.598     0.9614     0.9574    -0.1130    
                      0.4257E-01  9.218      9.137    -0.1021E+05 -2.085    
                     -0.5361    -0.7053      9.411      8.561    -0.1000E+05

                      -1.818     0.5536E-01-0.4778      8.765      9.041    
                     -0.1000E+05 -2.085    -0.6478    -0.3187      10.13    
                       8.448    -0.1000E+05 -2.085    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.66
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       24
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       25
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      121     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -183.643       183.643       277.887       461.530    
   2  0.438196     -0.825090      -78.7198       78.7198       269.945       348.665    
   3  0.637359     -0.450422      -42.9737       42.9737       282.959       325.933    
   4  0.122813      -2.09709      -200.078       200.078       284.323       484.402    
   5  0.926899     -0.759107E-01  -7.24245       7.24245       290.928       298.170    
   6  0.456580     -0.783992      -74.7988       74.7988       300.437       375.236    
   7  0.988763     -0.113008E-01  -1.07819       1.07819       317.736       318.814    
   8  0.499609     -0.693930      -66.2062       66.2062       318.025       384.231    
   9  0.432617     -0.837902      -79.9422       79.9422       291.059       371.001    
  10  0.403570     -0.907406      -86.5734       86.5734       318.025       404.599    
  11  0.435824     -0.830517      -79.2376       79.2376       272.208       351.445    
  12  0.504807     -0.683579      -65.2186       65.2186       316.943       382.162    
  13  0.778763     -0.250048      -23.8565       23.8565       310.973       334.830    
  14  0.429140     -0.845972      -80.7121       80.7121       319.482       400.194    
  15  0.597763     -0.514562      -49.0931       49.0931       318.545       367.638    
  16  0.425932     -0.853476      -81.4280       81.4280       294.012       375.440    
  17  0.825778     -0.191430      -18.2639       18.2639       317.923       336.187    
  18  0.448772     -0.801241      -76.4444       76.4444       325.871       402.316    
  19  0.701335     -0.354770      -33.8477       33.8477       325.716       359.564    
  20  0.425857     -0.853651      -81.4448       81.4448       319.172       400.617    
  21  0.800815     -0.222126      -21.1925       21.1925       323.786       344.979    
  22  0.724239     -0.322634      -30.7817       30.7817       318.052       348.834    
  23  0.312194      -1.16413      -111.067       111.067       319.806       430.873    
  24  0.796592     -0.227412      -21.6969       21.6969       317.888       339.584    
  25  0.164146      -1.80700      -172.402       172.402       344.821       517.222    
  26  0.503041     -0.687083      -65.5529       65.5529       318.942       384.495    
  27  0.640838     -0.444978      -42.4543       42.4543       322.677       365.131    
  28  0.327752      -1.11550      -106.427       106.427       326.468       432.895    
  29  0.720325     -0.328053      -31.2988       31.2988       318.671       349.969    
  30  0.447570     -0.803922      -76.7002       76.7002       317.711       394.411    
  31  0.377461     -0.974289      -92.9545       92.9545       321.000       413.955    
  32  0.951264     -0.499633E-01  -4.76688       4.76688       319.594       324.361    
  33  0.610405     -0.493632      -47.0963       47.0963       333.837       380.933    
  34  0.564697     -0.571466      -54.5222       54.5222       317.507       372.030    
  35  0.993998     -0.601974E-02 -0.574329      0.574329       319.358       319.932    
  36  0.908032     -0.964757E-01  -9.20451       9.20451       313.807       323.011    
  37  0.731210     -0.313055      -29.8678       29.8678       312.134       342.001    
  38  0.818812     -0.199901      -19.0721       19.0721       308.952       328.024    
  39  0.423172     -0.859976      -82.0482       82.0482       288.946       370.994    
  40  0.554414     -0.589843      -56.2755       56.2755       305.147       361.422    
  41  0.244903E-01  -3.70948      -353.912       353.912       278.568       632.480    
  42  0.337898      -1.08501      -103.518       103.518       325.264       428.782    
  43  0.634521E-01  -2.75747      -263.083       263.083       317.674       580.758    
  44  0.824978     -0.192398      -18.3562       18.3562       354.393       372.750    
  45  0.954123     -0.469622E-01  -4.48055       4.48055       276.173       280.653    
  46  0.807852     -0.213376      -20.3577       20.3577       317.931       338.289    
  47  0.335430      -1.09234      -104.218       104.218       315.864       420.082    
  48  0.266194      -1.32353      -126.275       126.275       327.487       453.762    
  49  0.797818     -0.225874      -21.5501       21.5501       314.057       335.607    
  50  0.710601     -0.341644      -32.5954       32.5954       283.393       315.989    
  51  0.469059     -0.757026      -72.2260       72.2260       311.882       384.108    
  52  0.256457E-01  -3.66338      -349.514       349.514       414.704       764.218    
  53  0.620630     -0.477020      -45.5113       45.5113       315.769       361.281    
  54  0.600237     -0.510431      -48.6990       48.6990       278.834       327.533    
  55  0.959467     -0.413769E-01  -3.94767       3.94767       310.888       314.836    
  56  0.541492     -0.613428      -58.5257       58.5257       319.305       377.831    
  57  0.577789     -0.548547      -52.3355       52.3355       329.961       382.297    
  58  0.701570     -0.354435      -33.8157       33.8157       313.757       347.573    
  59  0.274557E-01  -3.59518      -343.007       343.007       316.952       659.959    
  60  0.584746     -0.536578      -51.1936       51.1936       318.008       369.202    
  61  0.131184      -2.03115      -193.787       193.787       317.896       511.683    
  62  0.986883     -0.132037E-01  -1.25973       1.25973       320.536       321.795    
  63  0.257198      -1.35791      -129.555       129.555       319.053       448.608    
  64  0.831173     -0.184917      -17.6425       17.6425       318.381       336.024    
  65  0.332503      -1.10111      -105.054       105.054       320.091       425.145    
  66  0.123451      -2.09191      -199.584       199.584       313.360       512.944    
  67  0.545729     -0.605633      -57.7820       57.7820       287.140       344.922    
  68  0.194995      -1.63478      -155.970       155.970       361.180       517.150    
  69  0.811658     -0.208676      -19.9093       19.9093       332.461       352.371    
  70  0.610911     -0.492804      -47.0172       47.0172       411.198       458.215    
  71  0.482852     -0.728044      -69.4609       69.4609       501.425       570.886    
  72  0.487726     -0.718001      -68.5027       68.5027       290.274       358.777    
  73  0.650526     -0.429973      -41.0227       41.0227       313.152       354.175    
  74  0.710826     -0.341328      -32.5653       32.5653       469.164       501.729    
  75  0.840473     -0.173791      -16.5810       16.5810       314.940       331.521    
  76  0.705857     -0.348343      -33.2346       33.2346       568.245       601.479    
  77  0.890032     -0.116498      -11.1148       11.1148       558.181       569.296    
  78  0.980994     -0.191887E-01  -1.83075       1.83075       318.025       319.856    
  79  0.633321     -0.456778      -43.5801       43.5801       282.662       326.242    
loop,thermsimp(1:2)       25   183.643       78.7198    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123       1028.32         87.45          1.12         39.95          1.13          0.05        129.69
Just calling func    0   0        129.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124        529.95         87.39          1.11         39.60          1.69          0.05        129.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    529.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       25
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       26
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      123     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -23.5777       23.5777       276.173       299.750    
   2  0.928800     -0.738619E-01  -7.04699       7.04699       290.928       297.975    
   3  0.727994     -0.317462      -30.2883       30.2883       310.888       341.177    
   4  0.109723E-01  -4.51238      -430.515       430.515       283.393       713.909    
   5  0.160096      -1.83198      -174.785       174.785       317.736       492.521    
   6  0.497079     -0.699006      -66.6905       66.6905       318.025       384.716    
   7  0.789473     -0.236389      -22.5533       22.5533       319.358       341.911    
   8  0.763780     -0.269476      -25.7100       25.7100       320.536       346.246    
   9  0.217288      -1.52653      -145.643       145.643       313.807       459.450    
  10  0.867642     -0.141976      -13.5456       13.5456       319.594       333.140    
  11  0.740966     -0.299800      -28.6032       28.6032       282.959       311.562    
  12  0.999757     -0.242662E-03 -0.231518E-01  0.231518E-01   282.662       282.685    
  13  0.587476     -0.531920      -50.7491       50.7491       278.834       329.583    
  14  0.703619     -0.351518      -33.5375       33.5375       308.952       342.489    
  15  0.740946     -0.299828      -28.6058       28.6058       314.940       343.546    
  16  0.335927      -1.09086      -104.076       104.076       310.973       415.049    
  17  0.736553     -0.305774      -29.1731       29.1731       314.057       343.230    
  18  0.597397     -0.515174      -49.1515       49.1515       318.381       367.533    
  19  0.126601      -2.06672      -197.181       197.181       317.923       515.104    
  20  0.990194     -0.985477E-02 -0.940219      0.940219       317.931       318.872    
  21  0.716453     -0.333443      -31.8130       31.8130       317.888       349.701    
  22  0.279233E-01  -3.57829      -341.396       341.396       312.134       653.530    
  23  0.413932     -0.882054      -84.1546       84.1546       287.140       371.295    
  24  0.109516      -2.21168      -211.011       211.011       323.786       534.797    
  25  0.440749     -0.819279      -78.1654       78.1654       313.757       391.923    
  26  0.412115     -0.886453      -84.5743       84.5743       269.945       354.519    
  27  0.146963      -1.91758      -182.951       182.951       318.052       501.004    
  28  0.345919      -1.06155      -101.280       101.280       318.671       419.951    
  29  0.343614      -1.06824      -101.918       101.918       272.208       374.125    
  30  0.600334E-01  -2.81285      -268.368       268.368       332.461       600.829    
  31  0.751538     -0.285634      -27.2516       27.2516       313.152       340.404    
  32  0.878119     -0.129973      -12.4004       12.4004       290.274       302.674    
  33  0.544046     -0.608721      -58.0766       58.0766       325.716       383.792    
  34  0.931023     -0.714714E-01  -6.81891       6.81891       315.769       322.588    
  35  0.131968      -2.02520      -193.219       193.219       305.147       498.366    
  36  0.826694E-01  -2.49291      -237.842       237.842       322.677       560.519    
  37  0.174702E-02  -6.34984      -605.823       605.823       318.545       924.368    
  38  0.233470      -1.45470      -138.790       138.790       318.008       456.798    
  39  0.232927      -1.45703      -139.012       139.012       288.946       427.957    
  40  0.958279     -0.426163E-01  -4.06592       4.06592       291.059       295.124    
  41  0.820100     -0.198330      -18.9221       18.9221       317.507       336.429    
  42  0.305797      -1.18483      -113.042       113.042       354.393       467.435    
  43  0.260853      -1.34380      -128.209       128.209       300.437       428.645    
  44  0.960408     -0.403967E-01  -3.85415       3.85415       294.012       297.866    
  45  0.318957      -1.14270      -109.022       109.022       319.305       428.327    
  46  0.146887      -1.91809      -183.001       183.001       333.837       516.838    
  47  0.787623     -0.238735      -22.7772       22.7772       316.943       339.720    
  48  0.452412     -0.793163      -75.6737       75.6737       329.961       405.635    
  49  0.218339      -1.52170      -145.182       145.182       311.882       457.064    
  50  0.177672      -1.72782      -164.847       164.847       318.025       482.872    
  51  0.928922     -0.737304E-01  -7.03444       7.03444       318.942       325.976    
  52  0.341447      -1.07456      -102.521       102.521       317.711       420.232    
  53  0.462674     -0.770732      -73.5337       73.5337       319.482       393.015    
  54  0.125513      -2.07534      -198.003       198.003       319.172       517.176    
  55  0.354899      -1.03592      -98.8347       98.8347       325.871       424.706    
  56  0.341830      -1.07344      -102.415       102.415       318.025       420.440    
  57  0.604983     -0.502555      -47.9475       47.9475       321.000       368.948    
  58  0.223932      -1.49641      -142.769       142.769       315.864       458.633    
  59  0.146473      -1.92091      -183.269       183.269       320.091       503.360    
  60  0.997224     -0.277992E-02 -0.265225      0.265225       325.264       325.529    
  61  0.430465     -0.842888      -80.4179       80.4179       319.806       400.224    
  62  0.712472     -0.339015      -32.3446       32.3446       326.468       358.813    
  63  0.303370      -1.19280      -113.802       113.802       319.053       432.855    
  64  0.676458E-01  -2.69347      -256.977       256.977       327.487       584.465    
  65  0.226497      -1.48502      -141.682       141.682       411.198       552.881    
  66  0.590955     -0.526015      -50.1858       50.1858       277.887       328.073    
  67  0.914813     -0.890359E-01  -8.49470       8.49470       284.323       292.818    
  68  0.157483      -1.84844      -176.355       176.355       469.164       645.519    
  69  0.117954E-01  -4.44005      -423.614       423.614       317.896       741.510    
  70  0.589104     -0.529153      -50.4852       50.4852       313.360       363.845    
  71  0.826668     -0.190352      -18.1610       18.1610       361.180       379.341    
  72  0.535992     -0.623635      -59.4995       59.4995       344.821       404.320    
  73  0.460564     -0.775304      -73.9698       73.9698       558.181       632.151    
  74  0.142631E-01  -4.25008      -405.489       405.489       501.425       906.915    
  75  0.599401E-01  -2.81441      -268.516       268.516       317.674       586.190    
  76  0.427239     -0.850412      -81.1357       81.1357       568.245       649.380    
  77  0.181411      -1.70699      -162.860       162.860       278.568       441.427    
  78  0.693634E-01  -2.66840      -254.585       254.585       316.952       571.537    
  79  0.893045     -0.113118      -10.7923       10.7923       529.949       540.741    
loop,thermsimp(1:2)       26   23.5777       7.04699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        279.24         87.27          1.14         40.01          1.08          0.05        129.55
Just calling func    0   0        129.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126        275.74         87.38          1.17         40.09          0.84          0.05        129.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    275.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       26
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       27
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      125     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -19.1074       19.1074       282.662       301.769    
   2  0.309452      -1.17295      -111.909       111.909       284.323       396.232    
   3  0.303638      -1.19192      -113.718       113.718       291.059       404.777    
   4  0.754457     -0.281757      -26.8817       26.8817       294.012       320.894    
   5  0.623133     -0.472996      -45.1274       45.1274       290.928       336.055    
   6  0.989422E-01  -2.31322      -220.699       220.699       276.173       496.871    
   7  0.695126     -0.363662      -34.6961       34.6961       290.274       324.970    
   8  0.832210E-01  -2.48626      -237.208       237.208       282.959       520.167    
   9  0.869521     -0.139813      -13.3392       13.3392       317.931       331.271    
  10  0.488136     -0.717160      -68.4225       68.4225       315.769       384.192    
  11  0.579877     -0.544940      -51.9914       51.9914       325.264       377.255    
  12  0.480435     -0.733064      -69.9398       69.9398       318.942       388.882    
  13  0.792626     -0.232404      -22.1731       22.1731       277.887       300.061    
  14  0.870230     -0.138998      -13.2614       13.2614       278.834       292.095    
  15  0.886361     -0.120631      -11.5091       11.5091       319.594       331.103    
  16  0.358181      -1.02672      -97.9566       97.9566       317.507       415.464    
  17  0.560125     -0.579594      -55.2977       55.2977       316.943       372.241    
  18  0.546151     -0.604859      -57.7081       57.7081       313.152       370.860    
  19  0.732086     -0.311858      -29.7536       29.7536       310.888       340.642    
  20  0.590102     -0.527460      -50.3237       50.3237       319.358       369.682    
  21  0.867355     -0.142307      -13.5772       13.5772       308.952       322.529    
  22  0.749758     -0.288005      -27.4779       27.4779       314.057       341.535    
  23  0.721970     -0.325772      -31.0811       31.0811       314.940       346.021    
  24  0.596865     -0.516065      -49.2365       49.2365       320.536       369.772    
  25  0.878161     -0.129925      -12.3958       12.3958       317.888       330.283    
  26  0.558752E-01  -2.88463      -275.216       275.216       269.945       545.161    
  27  0.555543     -0.587810      -56.0815       56.0815       326.468       382.550    
  28  0.597562     -0.514897      -49.1250       49.1250       313.360       362.485    
  29  0.995329     -0.468202E-02 -0.446700      0.446700       318.381       318.828    
  30  0.206787      -1.57606      -150.368       150.368       321.000       471.369    
  31  0.645457     -0.437797      -41.7692       41.7692       287.140       328.909    
  32  0.871352     -0.137710      -13.1385       13.1385       272.208       285.346    
  33  0.701360     -0.354733      -33.8442       33.8442       361.180       395.024    
  34  0.936151     -0.659784E-01  -6.29484       6.29484       325.716       332.011    
  35  0.590091     -0.527478      -50.3254       50.3254       318.025       368.351    
  36  0.750433     -0.287105      -27.3920       27.3920       313.757       341.149    
  37  0.326255      -1.12007      -106.864       106.864       319.482       426.345    
  38  0.873133     -0.135668      -12.9437       12.9437       319.806       332.750    
  39  0.621627     -0.475415      -45.3582       45.3582       344.821       390.179    
  40  0.153041      -1.87705      -179.085       179.085       329.961       509.046    
  41  0.196696      -1.62610      -155.142       155.142       310.973       466.115    
  42  0.365028      -1.00778      -96.1499       96.1499       318.671       414.821    
  43  0.398429     -0.920226      -87.7965       87.7965       317.711       405.507    
  44  0.549691     -0.598399      -57.0918       57.0918       318.025       375.117    
  45  0.994179     -0.583795E-02 -0.556985      0.556985       325.871       326.428    
  46  0.147335E-01  -4.21763      -402.394       402.394       288.946       691.340    
  47  0.224737      -1.49282      -142.427       142.427       319.305       461.732    
  48  0.182172      -1.70281      -162.461       162.461       300.437       462.897    
  49  0.230919      -1.46569      -139.838       139.838       319.053       458.891    
  50  0.491818     -0.709647      -67.7057       67.7057       278.568       346.273    
  51  0.370754     -0.992217      -94.6650       94.6650       318.008       412.673    
  52  0.785622     -0.241279      -23.0199       23.0199       311.882       334.902    
  53  0.476284     -0.741742      -70.7678       70.7678       315.864       386.632    
  54  0.958799     -0.420736E-01  -4.01414       4.01414       313.807       317.821    
  55  0.305133      -1.18701      -113.249       113.249       354.393       467.643    
  56  0.270329      -1.30812      -124.804       124.804       318.025       442.829    
  57  0.130426      -2.03695      -194.340       194.340       317.736       512.076    
  58  0.222171      -1.50431      -143.522       143.522       305.147       448.669    
  59  0.233872      -1.45298      -138.625       138.625       318.052       456.678    
  60  0.916355E-02  -4.69252      -447.702       447.702       320.091       767.793    
  61  0.400634     -0.914708      -87.2700       87.2700       317.923       405.194    
  62  0.354647E-01  -3.33922      -318.587       318.587       333.837       652.424    
  63  0.453450     -0.790870      -75.4549       75.4549       319.172       394.627    
  64  0.411527     -0.887880      -84.7105       84.7105       323.786       408.497    
  65  0.607753     -0.497987      -47.5117       47.5117       529.949       577.461    
  66  0.157481      -1.84845      -176.356       176.356       411.198       587.554    
  67  0.260711E-01  -3.64693      -347.944       347.944       322.677       670.621    
  68  0.183987      -1.69289      -161.515       161.515       316.952       478.466    
  69  0.704951     -0.349627      -33.3571       33.3571       327.487       360.844    
  70  0.337767      -1.08540      -103.555       103.555       317.674       421.230    
  71  0.718219     -0.330981      -31.5781       31.5781       332.461       364.039    
  72  0.102024      -2.28254      -217.772       217.772       558.181       775.953    
  73  0.357156      -1.02958      -98.2299       98.2299       469.164       567.394    
  74  0.290676      -1.23555      -117.881       117.881       568.245       686.125    
  75  0.384145E-01  -3.25932      -310.964       310.964       312.134       623.097    
  76  0.566931     -0.567518      -54.1455       54.1455       283.393       337.539    
  77  0.929116     -0.735219E-01  -7.01455       7.01455       317.896       324.910    
  78  0.771831     -0.258990      -24.7096       24.7096       501.425       526.135    
  79  0.546802     -0.603668      -57.5945       57.5945       275.738       333.333    
loop,thermsimp(1:2)       27   19.1074       111.909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127       1217.22         87.87          1.18         40.02          0.75          0.05        129.87
Just calling func    0   0        129.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128        507.19         87.43          1.10         39.63          1.34          0.05        129.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    507.19
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       27
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       28
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      127     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -20.2627       20.2627       272.208       292.470    
   2  0.162004E-01  -4.12272      -393.339       393.339       278.834       672.172    
   3  0.446841E-01  -3.10814      -296.540       296.540       277.887       574.427    
   4  0.757954     -0.277132      -26.4405       26.4405       282.662       309.102    
   5  0.525315     -0.643757      -61.4193       61.4193       313.807       375.226    
   6  0.229940      -1.46994      -140.243       140.243       318.381       458.624    
   7  0.273310E-01  -3.59973      -343.442       343.442       294.012       637.454    
   8  0.228047      -1.47820      -141.032       141.032       308.952       449.984    
   9  0.963384E-01  -2.33989      -223.243       223.243       317.896       541.139    
  10  0.495504     -0.702179      -66.9932       66.9932       290.274       357.267    
  11  0.930436     -0.721018E-01  -6.87905       6.87905       325.871       332.750    
  12  0.138744      -1.97513      -188.442       188.442       287.140       475.582    
  13  0.676381     -0.390999      -37.3043       37.3043       317.888       355.192    
  14  0.763696     -0.269586      -25.7205       25.7205       319.594       345.314    
  15  0.282468      -1.26419      -120.613       120.613       317.931       438.545    
  16  0.359172      -1.02395      -97.6928       97.6928       325.716       423.409    
  17  0.392258     -0.935834      -89.2857       89.2857       319.806       409.092    
  18  0.524686     -0.644955      -61.5335       61.5335       275.738       337.272    
  19  0.850465     -0.161972      -15.4534       15.4534       311.882       327.335    
  20  0.227056      -1.48256      -141.447       141.447       290.928       432.375    
  21  0.942039     -0.597082E-01  -5.69661       5.69661       283.393       289.090    
  22  0.807336     -0.214016      -20.4187       20.4187       310.888       331.307    
  23  0.345853      -1.06174      -101.298       101.298       313.757       415.055    
  24  0.762940     -0.270575      -25.8149       25.8149       314.057       339.872    
  25  0.589959     -0.527702      -50.3467       50.3467       314.940       365.287    
  26  0.563539     -0.573518      -54.7180       54.7180       278.568       333.286    
  27  0.812044     -0.208201      -19.8640       19.8640       327.487       347.351    
  28  0.735850     -0.306729      -29.2643       29.2643       313.360       342.624    
  29  0.396292     -0.925605      -88.3097       88.3097       332.461       420.771    
  30  0.623568     -0.472298      -45.0608       45.0608       318.025       363.086    
  31  0.925937     -0.769486E-01  -7.34148       7.34148       319.358       326.699    
  32  0.880074     -0.127749      -12.1883       12.1883       320.536       332.724    
  33  0.379958     -0.967693      -92.3253       92.3253       313.152       405.477    
  34  0.842940E-01  -2.47344      -235.985       235.985       316.943       552.928    
  35  0.199092      -1.61399      -153.987       153.987       318.025       472.012    
  36  0.625899     -0.468566      -44.7047       44.7047       325.264       369.968    
  37  0.888337     -0.118405      -11.2967       11.2967       326.468       337.765    
  38  0.959633     -0.412048E-01  -3.93125       3.93125       315.769       319.700    
  39  0.289813      -1.23852      -118.164       118.164       315.864       434.028    
  40  0.889440     -0.117163      -11.1783       11.1783       318.942       330.120    
  41  0.797260     -0.226575      -21.6169       21.6169       344.821       366.438    
  42  0.451097     -0.796073      -75.9514       75.9514       319.172       395.124    
  43  0.609578     -0.494989      -47.2257       47.2257       361.180       408.405    
  44  0.910850     -0.933770E-01  -8.90887       8.90887       284.323       293.232    
  45  0.448191     -0.802536      -76.5680       76.5680       291.059       367.627    
  46  0.831229     -0.184850      -17.6360       17.6360       317.923       335.560    
  47  0.246260      -1.40137      -133.701       133.701       317.711       451.412    
  48  0.280480      -1.27125      -121.287       121.287       323.786       445.073    
  49  0.161513      -1.82317      -173.944       173.944       318.008       491.952    
  50  0.337020      -1.08761      -103.767       103.767       318.671       422.437    
  51  0.160136      -1.83173      -174.761       174.761       317.507       492.268    
  52  0.268039      -1.31662      -125.616       125.616       317.674       443.290    
  53  0.907744     -0.967928E-01  -9.23476       9.23476       319.482       328.716    
  54  0.237998      -1.43549      -136.957       136.957       318.025       454.982    
  55  0.932063     -0.703547E-01  -6.71237       6.71237       305.147       311.859    
  56  0.304233      -1.18996      -113.531       113.531       318.052       431.584    
  57  0.471578     -0.751672      -71.7152       71.7152       319.053       390.768    
  58  0.985625     -0.144798E-01  -1.38148       1.38148       319.305       320.687    
  59  0.576194     -0.551311      -52.5992       52.5992       300.437       353.036    
  60  0.561463     -0.577209      -55.0701       55.0701       310.973       366.043    
  61  0.762775     -0.270792      -25.8356       25.8356       354.393       380.229    
  62  0.728042     -0.317397      -30.2820       30.2820       321.000       351.282    
  63  0.246589      -1.40003      -133.574       133.574       316.952       450.525    
  64  0.128678      -2.05044      -195.628       195.628       276.173       471.800    
  65  0.646131     -0.436753      -41.6696       41.6696       329.961       371.631    
  66  0.520849E-01  -2.95488      -281.918       281.918       317.736       599.654    
  67  0.103665      -2.26659      -216.250       216.250       282.959       499.209    
  68  0.209683      -1.56216      -149.042       149.042       501.425       650.467    
  69  0.401865     -0.911640      -86.9774       86.9774       269.945       356.922    
  70  0.111589      -2.19294      -209.223       209.223       469.164       678.386    
  71  0.683688     -0.380253      -36.2790       36.2790       529.949       566.228    
  72  0.912223     -0.918706E-01  -8.76515       8.76515       411.198       419.963    
  73  0.651148E-01  -2.73160      -260.616       260.616       312.134       572.749    
  74  0.647173E-01  -2.73773      -261.200       261.200       333.837       595.037    
  75  0.356220      -1.03221      -98.4802       98.4802       322.677       421.157    
  76  0.918597     -0.849076E-01  -8.10082       8.10082       568.245       576.345    
  77  0.340721      -1.07669      -102.725       102.725       288.946       391.670    
  78  0.797278     -0.226552      -21.6148       21.6148       320.091       341.706    
  79  0.447966     -0.803038      -76.6159       76.6159       507.193       583.809    
loop,thermsimp(1:2)       28   20.2627       393.339    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129       1003.65         88.09          1.27         39.81          0.35          0.05        129.57
Just calling func    0   0        129.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130        541.22         87.33          1.13         39.98          1.23          0.05        129.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    541.22
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       28
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       29
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      129     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -205.618       205.618       283.393       489.011    
   2  0.685048     -0.378267      -36.0895       36.0895       272.208       308.297    
   3  0.739526     -0.301746      -28.7888       28.7888       284.323       313.112    
   4  0.161448      -1.82357      -173.982       173.982       282.662       456.644    
   5  0.819608     -0.198929      -18.9793       18.9793       305.147       324.126    
   6  0.750679     -0.286777      -27.3607       27.3607       315.769       343.130    
   7  0.797409     -0.226388      -21.5991       21.5991       319.305       340.904    
   8  0.193123      -1.64443      -156.891       156.891       319.358       476.249    
   9  0.189346E-01  -3.96676      -378.459       378.459       311.882       690.341    
  10  0.715264     -0.335103      -31.9714       31.9714       319.482       351.453    
  11  0.384856     -0.954886      -91.1033       91.1033       318.942       410.045    
  12  0.268023      -1.31668      -125.622       125.622       310.888       436.510    
  13  0.777164     -0.252104      -24.0526       24.0526       320.536       344.588    
  14  0.707495E-01  -2.64861      -252.697       252.697       325.871       578.569    
  15  0.233610      -1.45410      -138.732       138.732       278.568       417.300    
  16  0.193057      -1.64477      -156.924       156.924       317.923       474.847    
  17  0.486879     -0.719739      -68.6686       68.6686       275.738       344.407    
  18  0.735370     -0.307381      -29.3265       29.3265       326.468       355.795    
  19  0.147509      -1.91387      -182.597       182.597       314.057       496.654    
  20  0.739111     -0.302308      -28.8424       28.8424       320.091       348.933    
  21  0.886241     -0.120766      -11.5220       11.5220       313.360       324.882    
  22  0.158672      -1.84092      -175.637       175.637       319.594       495.231    
  23  0.143658      -1.94032      -185.121       185.121       327.487       512.609    
  24  0.637431E-02  -5.05548      -482.331       482.331       321.000       803.331    
  25  0.753372     -0.283196      -27.0191       27.0191       300.437       327.456    
  26  0.555831     -0.587292      -56.0321       56.0321       317.888       373.920    
  27  0.280013      -1.27292      -121.446       121.446       269.945       391.391    
  28  0.811304     -0.209112      -19.9509       19.9509       290.274       310.225    
  29  0.972296E-02  -4.63327      -442.049       442.049       318.025       760.074    
  30  0.713459     -0.337631      -32.2125       32.2125       314.940       347.153    
  31  0.194621      -1.63670      -156.153       156.153       310.973       467.127    
  32  0.492587     -0.708083      -67.5565       67.5565       344.821       412.377    
  33  0.759094E-01  -2.57821      -245.981       245.981       291.059       537.040    
  34  0.494544     -0.704119      -67.1783       67.1783       325.264       392.442    
  35  0.297023      -1.21395      -115.820       115.820       329.961       445.781    
  36  0.429878E-01  -3.14684      -300.232       300.232       313.807       614.039    
  37  0.490931     -0.711452      -67.8779       67.8779       354.393       422.271    
  38  0.534417     -0.626578      -59.7803       59.7803       319.053       378.833    
  39  0.254967      -1.36662      -130.386       130.386       288.946       419.331    
  40  0.995945     -0.406335E-02 -0.387674      0.387674       319.172       319.560    
  41  0.428814E-01  -3.14932      -300.469       300.469       313.152       613.621    
  42  0.332915      -1.09987      -104.936       104.936       361.180       466.115    
  43  0.657266     -0.419666      -40.0393       40.0393       319.806       359.846    
  44  0.301071      -1.20041      -114.528       114.528       313.757       428.285    
  45  0.998178     -0.182349E-02 -0.173975      0.173975       411.198       411.372    
  46  0.533372     -0.628536      -59.9670       59.9670       332.461       392.428    
  47  0.244746      -1.40753      -134.289       134.289       322.677       456.966    
  48  0.345321      -1.06328      -101.445       101.445       318.671       420.116    
  49  0.339541      -1.08016      -103.056       103.056       325.716       428.771    
  50  0.456434     -0.784311      -74.8292       74.8292       318.052       392.882    
  51  0.510210     -0.672933      -64.2029       64.2029       290.928       355.130    
  52  0.678441     -0.387958      -37.0142       37.0142       315.864       352.879    
  53  0.802552     -0.219958      -20.9857       20.9857       317.931       338.917    
  54  0.542503     -0.611562      -58.3477       58.3477       317.674       376.022    
  55  0.887113     -0.119783      -11.4282       11.4282       323.786       335.214    
  56  0.631934     -0.458971      -43.7893       43.7893       308.952       352.741    
  57  0.776760     -0.252624      -24.1023       24.1023       316.952       341.054    
  58  0.764990     -0.267893      -25.5590       25.5590       317.711       343.270    
  59  0.329328      -1.11070      -105.969       105.969       318.025       423.994    
  60  0.304425      -1.18933      -113.471       113.471       318.381       431.852    
  61  0.992863     -0.716266E-02 -0.683372      0.683372       276.173       276.856    
  62  0.545111     -0.606767      -57.8901       57.8901       318.025       375.915    
  63  0.215175      -1.53630      -146.575       146.575       287.140       433.715    
  64  0.486479     -0.720562      -68.7471       68.7471       318.008       386.755    
  65  0.323711      -1.12790      -107.611       107.611       317.507       425.118    
  66  0.339000      -1.08176      -103.208       103.208       282.959       386.167    
  67  0.494013     -0.705193      -67.2807       67.2807       317.896       385.177    
  68  0.496084     -0.701011      -66.8817       66.8817       316.943       383.825    
  69  0.736144     -0.306329      -29.2261       29.2261       529.949       559.175    
  70  0.106083E-01  -4.54612      -433.734       433.734       312.134       745.868    
  71  0.106417      -2.24039      -213.750       213.750       277.887       491.637    
  72  0.378322     -0.972010      -92.7371       92.7371       568.245       660.982    
  73  0.180300      -1.71314      -163.446       163.446       507.193       670.639    
  74  0.761678     -0.272232      -25.9730       25.9730       333.837       359.810    
  75  0.926997     -0.758048E-01  -7.23235       7.23235       317.736       324.969    
  76  0.412888     -0.884578      -84.3954       84.3954       294.012       378.407    
  77  0.980018     -0.201847E-01  -1.92577       1.92577       501.425       503.351    
  78  0.571816     -0.558938      -53.3270       53.3270       278.834       332.161    
  79  0.875059     -0.133464      -12.7335       12.7335       541.219       553.953    
loop,thermsimp(1:2)       29   205.618       36.0895    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131        280.25         87.48          1.14         40.21          0.60          0.05        129.47
Just calling func    0   0        129.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132        262.09         87.36          1.11         39.77          1.33          0.04        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    262.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       29
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       30
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      131     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -307.970       307.970       276.173       584.143    
   2  0.712690     -0.338709      -32.3154       32.3154       272.208       304.523    
   3  0.284498      -1.25703      -119.930       119.930       290.274       410.204    
   4  0.132414      -2.02182      -192.897       192.897       284.323       477.221    
   5  0.868558     -0.140920      -13.4449       13.4449       319.172       332.617    
   6  0.695240     -0.363498      -34.6804       34.6804       305.147       339.827    
   7  0.777362     -0.251849      -24.0283       24.0283       313.360       337.388    
   8  0.302494      -1.19569      -114.078       114.078       317.736       431.814    
   9  0.710188     -0.342225      -32.6509       32.6509       300.437       333.088    
  10  0.884530     -0.122698      -11.7063       11.7063       278.834       290.540    
  11  0.146421E-01  -4.22386      -402.988       402.988       323.786       726.774    
  12  0.834801     -0.180562      -17.2269       17.2269       317.931       335.158    
  13  0.414011     -0.881863      -84.1364       84.1364       319.305       403.441    
  14  0.655777     -0.421935      -40.2558       40.2558       316.952       357.208    
  15  0.530106     -0.634679      -60.5532       60.5532       315.769       376.322    
  16  0.325231      -1.12322      -107.164       107.164       317.711       424.874    
  17  0.293550      -1.22571      -116.942       116.942       275.738       392.680    
  18  0.194161      -1.63907      -156.380       156.380       320.536       476.915    
  19  0.589029E-01  -2.83186      -270.181       270.181       314.940       585.121    
  20  0.385142     -0.954143      -91.0325       91.0325       320.091       411.124    
  21  0.287461      -1.24667      -118.942       118.942       319.482       438.423    
  22  0.528518     -0.637678      -60.8393       60.8393       308.952       369.791    
  23  0.517042     -0.659630      -62.9337       62.9337       315.864       378.798    
  24  0.453375     -0.791035      -75.4707       75.4707       290.928       366.398    
  25  0.695596     -0.362986      -34.6316       34.6316       326.468       361.100    
  26  0.645178     -0.438228      -41.8103       41.8103       333.837       375.647    
  27  0.696076     -0.362297      -34.5659       34.5659       319.806       354.372    
  28  0.483522     -0.726659      -69.3287       69.3287       317.888       387.216    
  29  0.155396E-01  -4.16436      -397.312       397.312       318.025       715.337    
  30  0.883154     -0.124256      -11.8550       11.8550       317.674       329.529    
  31  0.525944     -0.642561      -61.3052       61.3052       294.012       355.317    
  32  0.746799     -0.291959      -27.8551       27.8551       319.053       346.908    
  33  0.458658     -0.779449      -74.3654       74.3654       316.943       391.309    
  34  0.614284     -0.487298      -46.4919       46.4919       317.896       364.388    
  35  0.581412     -0.542295      -51.7391       51.7391       282.959       334.698    
  36  0.820935     -0.197312      -18.8250       18.8250       318.008       336.833    
  37  0.852366     -0.159739      -15.2403       15.2403       269.945       285.185    
  38  0.527059     -0.640443      -61.1031       61.1031       332.461       393.564    
  39  0.376404     -0.977092      -93.2219       93.2219       325.264       418.486    
  40  0.729525E-01  -2.61795      -249.772       249.772       318.052       567.824    
  41  0.342258      -1.07219      -102.295       102.295       318.942       421.237    
  42  0.955065     -0.459761E-01  -4.38646       4.38646       411.198       415.585    
  43  0.508654E-01  -2.97857      -284.178       284.178       344.821       628.999    
  44  0.471716     -0.751379      -71.6872       71.6872       278.568       350.255    
  45  0.137118      -1.98691      -189.567       189.567       288.946       478.512    
  46  0.844826     -0.168625      -16.0881       16.0881       318.671       334.759    
  47  0.841708     -0.172322      -16.4408       16.4408       354.393       370.834    
  48  0.360396E-01  -3.32314      -317.052       317.052       318.025       635.078    
  49  0.953282     -0.478444E-01  -4.56471       4.56471       317.507       322.072    
  50  0.503408     -0.686355      -65.4834       65.4834       313.757       379.241    
  51  0.593854     -0.521122      -49.7190       49.7190       325.716       375.435    
  52  0.524910     -0.644528      -61.4928       61.4928       318.381       379.874    
  53  0.730244     -0.314377      -29.9939       29.9939       287.140       317.134    
  54  0.828919     -0.187632      -17.9015       17.9015       310.888       328.790    
  55  0.151629      -1.88632      -179.969       179.969       329.961       509.930    
  56  0.431672     -0.840089      -80.1508       80.1508       282.662       362.812    
  57  0.449333     -0.799990      -76.3251       76.3251       322.677       399.002    
  58  0.116759      -2.14764      -204.901       204.901       361.180       566.081    
  59  0.578588     -0.547165      -52.2037       52.2037       310.973       363.177    
  60  0.119282      -2.12627      -202.862       202.862       317.923       520.786    
  61  0.643272E-01  -2.74377      -261.777       261.777       319.358       581.135    
  62  0.906211     -0.984834E-01  -9.39606       9.39606       283.393       292.789    
  63  0.811859     -0.208429      -19.8857       19.8857       277.887       297.773    
  64  0.119821      -2.12175      -202.431       202.431       319.594       522.025    
  65  0.827508     -0.189336      -18.0641       18.0641       314.057       332.121    
  66  0.597713     -0.514645      -49.1010       49.1010       501.425       550.526    
  67  0.408976     -0.894099      -85.3038       85.3038       327.487       412.791    
  68  0.889044     -0.117608      -11.2207       11.2207       291.059       302.279    
  69  0.623536     -0.472349      -45.0657       45.0657       541.219       586.285    
  70  0.477389     -0.739423      -70.5466       70.5466       529.949       600.496    
  71  0.313804      -1.15899      -110.576       110.576       325.871       436.447    
  72  0.814527     -0.205148      -19.5727       19.5727       313.152       332.725    
  73  0.133792      -2.01147      -191.910       191.910       313.807       505.716    
  74  0.533947     -0.627458      -59.8643       59.8643       568.245       628.109    
  75  0.625219     -0.469653      -44.8085       44.8085       507.193       552.002    
  76  0.694055     -0.365204      -34.8432       34.8432       311.882       346.725    
  77  0.261673      -1.34066      -127.909       127.909       312.134       440.043    
  78  0.175693      -1.73902      -165.915       165.915       318.025       483.940    
  79  0.950460     -0.508096E-01  -4.84762       4.84762       262.089       266.936    
loop,thermsimp(1:2)       30   307.970       32.3154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133        281.67         87.46          1.14         40.00          0.70          0.05        129.34
Just calling func    0   0        129.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    134        257.93         87.61          1.16         40.21          0.61          0.05        129.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    257.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       30
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       31
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      133     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -132.806       132.806       262.089       394.895    
   2  0.247647      -1.39575      -133.165       133.165       269.945       403.110    
   3  0.396263     -0.925678      -88.3167       88.3167       278.834       367.150    
   4  0.386461     -0.950723      -90.7062       90.7062       283.393       374.099    
   5  0.729285     -0.315691      -30.1193       30.1193       277.887       308.007    
   6  0.665866     -0.406667      -38.7991       38.7991       291.059       329.858    
   7  0.385122     -0.954194      -91.0373       91.0373       272.208       363.245    
   8  0.625701     -0.468883      -44.7349       44.7349       287.140       331.875    
   9  0.392668     -0.934792      -89.1862       89.1862       317.507       406.694    
  10  0.698356     -0.359026      -34.2538       34.2538       310.888       345.142    
  11  0.537534E-01  -2.92335      -278.910       278.910       317.674       596.584    
  12  0.289307      -1.24027      -118.331       118.331       314.057       432.388    
  13  0.138460E-01  -4.27976      -408.321       408.321       319.172       727.494    
  14  0.824110     -0.193451      -18.4567       18.4567       313.152       331.609    
  15  0.560983     -0.578065      -55.1517       55.1517       300.437       355.589    
  16  0.116087E-01  -4.45600      -425.136       425.136       282.959       708.095    
  17  0.218033      -1.52311      -145.316       145.316       318.671       463.987    
  18  0.893705E-01  -2.41497      -230.406       230.406       317.931       548.337    
  19  0.304886      -1.18782      -113.327       113.327       318.008       431.335    
  20  0.179833      -1.71573      -163.694       163.694       313.360       477.053    
  21  0.867378     -0.142281      -13.5747       13.5747       305.147       318.721    
  22  0.243287      -1.41351      -134.860       134.860       311.882       446.742    
  23  0.772489     -0.258138      -24.6283       24.6283       319.053       343.681    
  24  0.321011      -1.13628      -108.410       108.410       278.568       386.977    
  25  0.499417     -0.694314      -66.2428       66.2428       319.806       386.049    
  26  0.396806     -0.924307      -88.1859       88.1859       294.012       382.198    
  27  0.580203E-01  -2.84696      -271.622       271.622       316.952       588.574    
  28  0.854206     -0.157583      -15.0346       15.0346       326.468       341.503    
  29  0.914649     -0.892145E-01  -8.51174       8.51174       282.662       291.173    
  30  0.167601      -1.78617      -170.414       170.414       310.973       481.387    
  31  0.350137      -1.04943      -100.124       100.124       317.896       418.019    
  32  0.522932     -0.648304      -61.8531       61.8531       290.928       352.781    
  33  0.538779     -0.618450      -59.0048       59.0048       308.952       367.957    
  34  0.693066     -0.366629      -34.9792       34.9792       354.393       389.373    
  35  0.361961      -1.01622      -96.9549       96.9549       325.716       422.671    
  36  0.310665      -1.16904      -111.535       111.535       333.837       445.372    
  37  0.818669     -0.200076      -19.0888       19.0888       315.769       334.858    
  38  0.582861     -0.539807      -51.5016       51.5016       315.864       367.366    
  39  0.401728     -0.911979      -87.0097       87.0097       313.757       400.767    
  40  0.171089      -1.76557      -168.449       168.449       318.381       486.830    
  41  0.980174     -0.200248E-01  -1.91052       1.91052       317.888       319.798    
  42  0.495496     -0.702196      -66.9948       66.9948       316.943       383.938    
  43  0.436683     -0.828549      -79.0498       79.0498       275.738       354.788    
  44  0.910411     -0.938588E-01  -8.95484       8.95484       332.461       341.416    
  45  0.649932     -0.430887      -41.1099       41.1099       322.677       363.786    
  46  0.755226     -0.280738      -26.7845       26.7845       319.305       346.090    
  47  0.927352     -0.754221E-01  -7.19584       7.19584       290.274       297.470    
  48  0.848028     -0.164842      -15.7272       15.7272       320.091       335.818    
  49  0.146193      -1.92283      -183.453       183.453       327.487       510.940    
  50  0.571278     -0.559879      -53.4167       53.4167       411.198       464.615    
  51  0.244418      -1.40888      -134.418       134.418       325.264       459.681    
  52  0.979014     -0.212091E-01  -2.02350       2.02350       318.942       320.965    
  53  0.235747      -1.44500      -137.864       137.864       317.711       455.574    
  54  0.486927     -0.719642      -68.6593       68.6593       317.736       386.395    
  55  0.694010     -0.365269      -34.8494       34.8494       325.871       360.721    
  56  0.392305     -0.935716      -89.2744       89.2744       319.482       408.756    
  57  0.334373      -1.09550      -104.519       104.519       312.134       416.652    
  58  0.526166     -0.642138      -61.2648       61.2648       320.536       381.801    
  59  0.701539     -0.354479      -33.8199       33.8199       284.323       318.143    
  60  0.447845     -0.803307      -76.6416       76.6416       288.946       365.587    
  61  0.927856     -0.748784E-01  -7.14397       7.14397       318.025       325.169    
  62  0.453274     -0.791258      -75.4920       75.4920       313.807       389.299    
  63  0.291736      -1.23190      -117.533       117.533       329.961       447.494    
  64  0.497643E-02  -5.30304      -505.950       505.950       317.923       823.874    
  65  0.972200E-01  -2.33078      -222.374       222.374       319.594       541.968    
  66  0.821987     -0.196031      -18.7028       18.7028       501.425       520.128    
  67  0.652134     -0.427506      -40.7873       40.7873       507.193       547.980    
  68  0.774447     -0.255606      -24.3868       24.3868       361.180       385.566    
  69  0.103131      -2.27176      -216.743       216.743       318.052       534.795    
  70  0.767617E-01  -2.56705      -244.916       244.916       319.358       564.274    
  71  0.965592     -0.350134E-01  -3.34054       3.34054       276.173       279.513    
  72  0.631959     -0.458930      -43.7854       43.7854       314.940       358.726    
  73  0.276224      -1.28654      -122.746       122.746       541.219       663.965    
  74  0.386375     -0.950946      -90.7274       90.7274       529.949       620.676    
  75  0.105407      -2.24993      -214.660       214.660       568.245       782.905    
  76  0.734908     -0.308009      -29.3864       29.3864       344.821       374.207    
  77  0.617511     -0.482058      -45.9920       45.9920       318.025       364.017    
  78  0.478012     -0.738120      -70.4223       70.4223       318.025       388.447    
  79  0.641395     -0.444109      -42.3714       42.3714       257.925       300.297    
loop,thermsimp(1:2)       31   132.806       133.165    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135        280.53         87.30          1.11         40.02          1.07          0.05        129.55
Just calling func    0   0        129.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136        256.75         87.48          1.13         40.04          0.69          0.05        129.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    256.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       31
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       32
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      135     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.375677      0.375677       276.173       276.548    
   2  0.758684E-02  -4.88134      -465.717       465.717       282.662       748.378    
   3  0.404439     -0.905254      -86.3681       86.3681       290.274       376.642    
   4  0.947917E-01  -2.35607      -224.787       224.787       257.925       482.713    
   5  0.834417     -0.181022      -17.2709       17.2709       277.887       295.158    
   6  0.891274     -0.115104      -10.9818       10.9818       284.323       295.305    
   7  0.744451     -0.295108      -28.1556       28.1556       305.147       333.302    
   8  0.559638     -0.580466      -55.3808       55.3808       317.888       373.268    
   9  0.821724     -0.196351      -18.7333       18.7333       318.942       337.675    
  10  0.847292     -0.165710      -15.8099       15.8099       318.025       333.835    
  11  0.661676     -0.412979      -39.4013       39.4013       291.059       330.460    
  12  0.993427     -0.659478E-02 -0.629192      0.629192       313.152       313.781    
  13  0.425996     -0.853326      -81.4138       81.4138       287.140       368.554    
  14  0.673132     -0.395813      -37.7636       37.7636       315.769       353.533    
  15  0.234810      -1.44898      -138.243       138.243       320.091       458.335    
  16  0.122926      -2.09617      -199.991       199.991       332.461       532.452    
  17  0.523553     -0.647118      -61.7399       61.7399       326.468       388.208    
  18  0.959317     -0.415333E-01  -3.96259       3.96259       319.053       323.016    
  19  0.321726      -1.13406      -108.197       108.197       310.888       419.086    
  20  0.493112     -0.707018      -67.4549       67.4549       319.305       386.760    
  21  0.416134     -0.876748      -83.6484       83.6484       290.928       374.576    
  22  0.409432     -0.892985      -85.1975       85.1975       275.738       360.936    
  23  0.657956     -0.418617      -39.9392       39.9392       300.437       340.376    
  24  0.904324     -0.100567      -9.59489       9.59489       314.940       324.535    
  25  0.714426     -0.336276      -32.0833       32.0833       325.871       357.954    
  26  0.150521      -1.89365      -180.669       180.669       272.208       452.876    
  27  0.758740     -0.276096      -26.3416       26.3416       322.677       349.018    
  28  0.359105      -1.02414      -97.7107       97.7107       318.025       415.736    
  29  0.666937     -0.405060      -38.6458       38.6458       288.946       327.591    
  30  0.343213      -1.06940      -102.029       102.029       278.834       380.863    
  31  0.484849     -0.723918      -69.0673       69.0673       315.864       384.932    
  32  0.874661     -0.133919      -12.7769       12.7769       308.952       321.729    
  33  0.994710     -0.530415E-02 -0.506056      0.506056       283.393       283.899    
  34  0.821923     -0.196109      -18.7103       18.7103       344.821       363.531    
  35  0.954096E-02  -4.65216      -443.851       443.851       320.536       764.387    
  36  0.240030      -1.42699      -136.146       136.146       294.012       430.158    
  37  0.279003      -1.27653      -121.791       121.791       316.943       438.734    
  38  0.553830     -0.590898      -56.3761       56.3761       361.180       417.556    
  39  0.400809     -0.914271      -87.2284       87.2284       319.806       407.035    
  40  0.146125      -1.92330      -183.497       183.497       317.736       501.233    
  41  0.811879     -0.208403      -19.8833       19.8833       278.568       298.451    
  42  0.349149      -1.05226      -100.393       100.393       318.025       418.418    
  43  0.897422     -0.108229      -10.3259       10.3259       313.807       324.133    
  44  0.114492      -2.16725      -206.772       206.772       354.393       561.165    
  45  0.831901E-01  -2.48663      -237.243       237.243       262.089       499.332    
  46  0.721169     -0.326882      -31.1870       31.1870       313.757       344.944    
  47  0.801724     -0.220991      -21.0842       21.0842       269.945       291.029    
  48  0.466569     -0.762349      -72.7339       72.7339       317.507       390.241    
  49  0.103404      -2.26911      -216.490       216.490       319.482       535.972    
  50  0.417206     -0.874175      -83.4029       83.4029       312.134       395.536    
  51  0.267666      -1.31802      -125.749       125.749       317.896       443.644    
  52  0.670232     -0.400131      -38.1755       38.1755       325.716       363.891    
  53  0.161265      -1.82470      -174.091       174.091       318.008       492.099    
  54  0.414706     -0.880185      -83.9763       83.9763       314.057       398.033    
  55  0.501015     -0.691119      -65.9380       65.9380       333.837       399.775    
  56  0.516090     -0.661474      -63.1096       63.1096       311.882       374.992    
  57  0.424740     -0.856278      -81.6954       81.6954       329.961       411.657    
  58  0.303796      -1.19140      -113.668       113.668       317.711       431.379    
  59  0.803455     -0.218834      -20.8784       20.8784       325.264       346.142    
  60  0.416256     -0.876456      -83.6205       83.6205       318.671       402.291    
  61  0.760689     -0.273531      -26.0969       26.0969       411.198       437.295    
  62  0.995587     -0.442238E-02 -0.421929      0.421929       313.360       313.782    
  63  0.961804     -0.389449E-01  -3.71564       3.71564       310.973       314.689    
  64  0.321618      -1.13439      -108.230       108.230       318.381       426.611    
  65  0.850055     -0.162454      -15.4994       15.4994       327.487       342.987    
  66  0.408700     -0.894773      -85.3681       85.3681       501.425       586.793    
  67  0.204039E-01  -3.89203      -371.329       371.329       318.052       689.381    
  68  0.195538      -1.63200      -155.705       155.705       319.594       475.299    
  69  0.577737     -0.548636      -52.3440       52.3440       507.193       559.537    
  70  0.958394     -0.424960E-01  -4.05444       4.05444       317.931       321.986    
  71  0.570540     -0.561172      -53.5400       53.5400       319.358       372.898    
  72  0.509347     -0.674626      -64.3644       64.3644       316.952       381.316    
  73  0.805802     -0.215917      -20.6001       20.6001       317.674       338.275    
  74  0.188251      -1.66998      -159.329       159.329       529.949       689.278    
  75  0.113356      -2.17722      -207.723       207.723       541.219       748.942    
  76  0.113861      -2.17278      -207.299       207.299       282.959       490.258    
  77  0.645839     -0.437206      -41.7127       41.7127       319.172       360.885    
  78  0.398897     -0.919052      -87.6845       87.6845       568.245       655.929    
  79  0.402340     -0.910458      -86.8646       86.8646       256.750       343.615    
loop,thermsimp(1:2)       32  0.375677       465.717    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137        281.54         87.37          1.12         39.91          1.27          0.05        129.71
Just calling func    0   0        129.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138        312.52         87.59          1.15         40.22          0.82          0.05        129.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    281.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       32
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       33
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      137     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -75.0056       75.0056       276.173       351.178    
   2  0.588265E-01  -2.83316      -270.305       270.305       283.393       553.698    
   3  0.787103E-01  -2.54198      -242.524       242.524       269.945       512.469    
   4  0.597713     -0.514644      -49.1009       49.1009       277.887       326.988    
   5  0.110741      -2.20056      -209.950       209.950       284.323       494.274    
   6  0.677861     -0.388813      -37.0957       37.0957       278.568       315.663    
   7  0.307724      -1.17855      -112.443       112.443       313.152       425.595    
   8  0.550587     -0.596770      -56.9364       56.9364       313.360       370.296    
   9  0.601295     -0.508669      -48.5309       48.5309       310.973       359.504    
  10  0.487121     -0.719243      -68.6212       68.6212       308.952       377.573    
  11  0.146295      -1.92213      -183.385       183.385       317.931       501.317    
  12  0.714050     -0.336802      -32.1334       32.1334       319.053       351.186    
  13  0.723089     -0.324223      -30.9333       30.9333       313.807       344.740    
  14  0.805432     -0.216376      -20.6439       20.6439       314.940       335.584    
  15  0.123280      -2.09329      -199.716       199.716       288.946       488.662    
  16  0.853039     -0.158950      -15.1651       15.1651       291.059       306.224    
  17  0.288289      -1.24379      -118.667       118.667       305.147       423.814    
  18  0.705126     -0.349379      -33.3334       33.3334       318.025       351.359    
  19  0.772420     -0.258227      -24.6368       24.6368       318.942       343.579    
  20  0.962845     -0.378631E-01  -3.61243       3.61243       317.674       321.287    
  21  0.245802      -1.40323      -133.878       133.878       300.437       434.315    
  22  0.752702     -0.284087      -27.1040       27.1040       327.487       354.591    
  23  0.729896     -0.314853      -30.0393       30.0393       256.750       286.789    
  24  0.869278     -0.140092      -13.3659       13.3659       313.757       327.123    
  25  0.597817E-01  -2.81706      -268.768       268.768       325.264       594.032    
  26  0.984108     -0.160195E-01  -1.52838       1.52838       322.677       324.205    
  27  0.278288      -1.27910      -122.036       122.036       315.769       437.805    
  28  0.588278     -0.530555      -50.6190       50.6190       325.871       376.490    
  29  0.807614     -0.213671      -20.3858       20.3858       319.172       339.558    
  30  0.428679     -0.847047      -80.8147       80.8147       275.738       356.553    
  31  0.452991     -0.791883      -75.5516       75.5516       344.821       420.372    
  32  0.678742     -0.387514      -36.9718       36.9718       325.716       362.688    
  33  0.504500     -0.684188      -65.2767       65.2767       287.140       352.417    
  34  0.894800     -0.111155      -10.6050       10.6050       319.358       329.963    
  35  0.854311     -0.157461      -15.0229       15.0229       317.888       332.911    
  36  0.756230     -0.279410      -26.6578       26.6578       290.928       317.585    
  37  0.744369     -0.295219      -28.1661       28.1661       311.882       340.048    
  38  0.435758     -0.830668      -79.2520       79.2520       290.274       369.526    
  39  0.677387     -0.389513      -37.1625       37.1625       278.834       315.996    
  40  0.504989     -0.683219      -65.1842       65.1842       316.952       382.136    
  41  0.325676      -1.12185      -107.033       107.033       315.864       422.898    
  42  0.147207      -1.91591      -182.793       182.793       319.305       502.098    
  43  0.432041     -0.839234      -80.0693       80.0693       326.468       406.538    
  44  0.615972     -0.484555      -46.2302       46.2302       317.507       363.738    
  45  0.150867      -1.89136      -180.450       180.450       312.134       492.583    
  46  0.464307     -0.767210      -73.1976       73.1976       314.057       387.254    
  47  0.379753     -0.968234      -92.3768       92.3768       333.837       426.214    
  48  0.886192     -0.120822      -11.5273       11.5273       318.671       330.198    
  49  0.231751E-01  -3.76468      -359.179       359.179       319.806       678.985    
  50  0.257662      -1.35611      -129.383       129.383       329.961       459.344    
  51  0.470381E-01  -3.05680      -291.642       291.642       318.025       609.667    
  52  0.972366     -0.280233E-01  -2.67364       2.67364       361.180       363.853    
  53  0.242054      -1.41860      -135.345       135.345       318.025       453.370    
  54  0.660577     -0.414642      -39.5600       39.5600       310.888       350.448    
  55  0.234396      -1.45074      -138.412       138.412       318.381       456.793    
  56  0.891547     -0.114797      -10.9525       10.9525       294.012       304.965    
  57  0.408879E-01  -3.19692      -305.010       305.010       317.711       622.721    
  58  0.577007     -0.549901      -52.4647       52.4647       411.198       463.663    
  59  0.851462     -0.160801      -15.3416       15.3416       316.943       332.285    
  60  0.733240     -0.310283      -29.6033       29.6033       317.896       347.499    
  61  0.219002E-01  -3.82126      -364.577       364.577       272.208       636.785    
  62  0.293643      -1.22539      -116.912       116.912       320.091       437.003    
  63  0.552105     -0.594017      -56.6737       56.6737       319.594       376.268    
  64  0.638007E-01  -2.75199      -262.561       262.561       257.925       520.486    
  65  0.332554      -1.10095      -105.039       105.039       282.959       387.998    
  66  0.365239      -1.00720      -96.0949       96.0949       318.008       414.103    
  67  0.160984      -1.82645      -174.257       174.257       262.089       436.346    
  68  0.149423      -1.90098      -181.367       181.367       317.736       499.104    
  69  0.142989      -1.94499      -185.567       185.567       332.461       518.028    
  70  0.516056     -0.661540      -63.1159       63.1159       319.482       382.597    
  71  0.719056E-01  -2.63240      -251.151       251.151       507.193       758.344    
  72  0.968385     -0.321257E-01  -3.06504       3.06504       354.393       357.458    
  73  0.888186     -0.118574      -11.3128       11.3128       501.425       512.738    
  74  0.626022E-01  -2.77095      -264.370       264.370       568.245       832.615    
  75  0.597532     -0.514948      -49.1299       49.1299       529.949       579.079    
  76  0.915473     -0.883142E-01  -8.42584       8.42584       318.052       326.478    
  77  0.894301E-01  -2.41430      -230.342       230.342       282.662       513.004    
  78  0.245546      -1.40427      -133.978       133.978       541.219       675.197    
  79  0.637211     -0.450654      -42.9958       42.9958       281.545       324.541    
loop,thermsimp(1:2)       33   75.0056       270.305    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139        472.27         87.25          1.13         39.80          1.34          0.05        129.56
Just calling func    0   0        129.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    472.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       33
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       34
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      138     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -223.420       223.420       256.750       480.171    
   2  0.298819      -1.20792      -115.245       115.245       294.012       409.257    
   3  0.706385     -0.347595      -33.1632       33.1632       291.059       324.222    
   4  0.958764     -0.421100E-01  -4.01761       4.01761       278.568       282.585    
   5  0.306496      -1.18255      -112.824       112.824       278.834       391.658    
   6  0.905447     -0.993270E-01  -9.47654       9.47654       290.928       300.404    
   7  0.234113      -1.45195      -138.527       138.527       317.674       456.201    
   8  0.704141     -0.350777      -33.4668       33.4668       322.677       356.143    
   9  0.908200     -0.962902E-01  -9.18681       9.18681       281.545       290.732    
  10  0.656383     -0.421011      -40.1676       40.1676       318.052       358.220    
  11  0.967894     -0.326327E-01  -3.11341       3.11341       277.887       281.001    
  12  0.754670     -0.281475      -26.8548       26.8548       313.757       340.612    
  13  0.488960     -0.715475      -68.2617       68.2617       319.358       387.620    
  14  0.451577     -0.795009      -75.8498       75.8498       318.671       394.521    
  15  0.387599E-01  -3.25037      -310.110       310.110       316.943       627.053    
  16  0.210942E-02  -6.16134      -587.838       587.838       317.888       905.726    
  17  0.656530     -0.420787      -40.1462       40.1462       314.940       355.086    
  18  0.181246      -1.70790      -162.947       162.947       319.172       482.119    
  19  0.758879     -0.275913      -26.3242       26.3242       311.882       338.206    
  20  0.392052     -0.936362      -89.3360       89.3360       318.942       408.278    
  21  0.406710     -0.899654      -85.8338       85.8338       313.807       399.641    
  22  0.830107     -0.186201      -17.7649       17.7649       317.896       335.661    
  23  0.311833      -1.16529      -111.177       111.177       310.888       422.066    
  24  0.945407     -0.561396E-01  -5.35615       5.35615       276.173       281.529    
  25  0.303319      -1.19297      -113.818       113.818       319.053       432.871    
  26  0.284230      -1.25797      -120.020       120.020       318.025       438.045    
  27  0.292492      -1.22932      -117.286       117.286       287.140       404.426    
  28  0.401496     -0.912557      -87.0648       87.0648       327.487       414.552    
  29  0.379648     -0.968510      -92.4032       92.4032       275.738       368.142    
  30  0.723496E-01  -2.62625      -250.564       250.564       354.393       604.957    
  31  0.940338     -0.615157E-01  -5.86907       5.86907       310.973       316.842    
  32  0.766237     -0.266264      -25.4036       25.4036       325.716       351.119    
  33  0.984920     -0.151946E-01  -1.44968       1.44968       317.507       318.957    
  34  0.552546     -0.593218      -56.5975       56.5975       361.180       417.777    
  35  0.735557     -0.307128      -29.3023       29.3023       290.274       319.576    
  36  0.142195      -1.95056      -186.098       186.098       313.360       499.458    
  37  0.304783      -1.18816      -113.359       113.359       319.594       432.953    
  38  0.868582     -0.140894      -13.4423       13.4423       325.871       339.313    
  39  0.382741     -0.960397      -91.6291       91.6291       308.952       400.581    
  40  0.273812      -1.29531      -123.583       123.583       316.952       440.534    
  41  0.601920     -0.507631      -48.4319       48.4319       319.482       367.913    
  42  0.827744     -0.189051      -18.0369       18.0369       314.057       332.094    
  43  0.881186E-01  -2.42907      -231.752       231.752       282.959       514.711    
  44  0.386744     -0.949994      -90.6366       90.6366       326.468       417.105    
  45  0.852312     -0.159803      -15.2464       15.2464       318.008       333.255    
  46  0.830189     -0.186102      -17.7556       17.7556       344.821       362.576    
  47  0.216531      -1.53002      -145.976       145.976       315.864       461.840    
  48  0.835540     -0.179677      -17.1426       17.1426       305.147       322.289    
  49  0.962152     -0.385824E-01  -3.68106       3.68106       313.152       316.833    
  50  0.866477     -0.143320      -13.6738       13.6738       333.837       347.511    
  51  0.640111     -0.446114      -42.5626       42.5626       300.437       342.999    
  52  0.103467      -2.26850      -216.432       216.432       262.089       478.521    
  53  0.746080     -0.292923      -27.9470       27.9470       320.091       348.038    
  54  0.154266      -1.86908      -178.324       178.324       315.769       494.093    
  55  0.479981     -0.734008      -70.0299       70.0299       318.025       388.055    
  56  0.641740     -0.443572      -42.3201       42.3201       318.381       360.701    
  57  0.282342      -1.26463      -120.656       120.656       329.961       450.617    
  58  0.691857     -0.368376      -35.1459       35.1459       411.198       446.344    
  59  0.774818     -0.255127      -24.3411       24.3411       288.946       313.287    
  60  0.950647     -0.506124E-01  -4.82881       4.82881       312.134       316.962    
  61  0.946272E-01  -2.35781      -224.953       224.953       284.323       509.276    
  62  0.936976     -0.650979E-01  -6.21083       6.21083       317.736       323.947    
  63  0.339755      -1.07953      -102.995       102.995       317.931       420.927    
  64  0.781991     -0.245913      -23.4619       23.4619       319.305       342.767    
  65  0.524538     -0.645237      -61.5605       61.5605       269.945       331.506    
  66  0.740186     -0.300853      -28.7037       28.7037       501.425       530.129    
  67  0.713516     -0.337550      -32.2048       32.2048       282.662       314.866    
  68  0.760009     -0.274425      -26.1822       26.1822       332.461       358.644    
  69  0.813040     -0.206975      -19.7469       19.7469       257.925       277.672    
  70  0.177817E-01  -4.02959      -384.453       384.453       283.393       667.846    
  71  0.585717     -0.534918      -51.0352       51.0352       529.949       580.984    
  72  0.151688      -1.88593      -179.932       179.932       325.264       505.196    
  73  0.870493     -0.138695      -13.2326       13.2326       318.025       331.258    
  74  0.226172      -1.48646      -141.819       141.819       317.711       459.530    
  75  0.555889E-01  -2.88977      -275.706       275.706       272.208       547.914    
  76  0.975493E-01  -2.32740      -222.051       222.051       541.219       763.270    
  77  0.549899     -0.598021      -57.0557       57.0557       319.806       376.862    
  78  0.721706     -0.326137      -31.1160       31.1160       507.193       538.309    
  79  0.446260     -0.806855      -76.9800       76.9800       472.270       549.250    
loop,thermsimp(1:2)       34   223.420       115.245    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140        281.64         87.45          1.16         40.61          0.38          0.05        129.65
Just calling func    0   0        129.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141        270.04         87.37          1.14         40.14          0.70          0.05        129.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    270.04        1.563     -1.339      6.196     -102.6     0.7675    
                     -0.3045      4.077     -99.70      3.859     0.8549    
                       1.739     -1.420      1.440    -0.1902E+05 -2.484    
                      -1.109      0.000      0.000      0.000     -1.221    

                      -2.500     0.5209E+05 0.4210E+05 -4151.    -0.8341E+05
                      -2.165     -6.296     -10.32     -7.185      3.110    
                      -13.66     -3.031      2686.      0.000      4693.    

                       5791.      7666.      5694.     0.1058E+05  2072.    
                       2629.     0.9209E-01-0.7184E-01  0.000    -0.4661    
                     -0.7909E-01-0.1342    -0.1108    -0.2116    -0.1446E-03

                      -1.565    -0.4067E-01  0.000    -0.4543E-01 0.1460E-01
                      0.8541E-01 0.6082E-01-0.5433E-03-0.3743    -0.1252    
                     -0.2042E-01-0.4335E-01-0.7411E-01-0.3365      0.000    

                      -1.978     -1.528     0.8977     0.8869    -0.3094    
                      0.1131      9.239      9.158    -0.1057E+05 -2.226    
                     -0.6954    -0.6347      9.432      8.582    -0.1000E+05

                      -1.480     0.2556E-01-0.6711      8.787      9.062    
                     -0.1000E+05 -2.226    -0.5773    -0.4702      10.15    
                       8.428    -0.1000E+05 -2.226    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    270.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       34
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       35
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      140     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -100.681       100.681       257.925       358.607    
   2  0.175000      -1.74297      -166.293       166.293       277.887       444.180    
   3  0.131587      -2.02809      -193.495       193.495       276.173       469.668    
   4  0.301717      -1.19826      -114.323       114.323       278.568       392.891    
   5  0.166877      -1.79050      -170.827       170.827       281.545       452.372    
   6  0.481073     -0.731736      -69.8131       69.8131       290.928       360.741    
   7  0.706381     -0.347600      -33.1637       33.1637       288.946       322.109    
   8  0.702617     -0.352943      -33.6734       33.6734       282.662       316.335    
   9  0.552795     -0.592767      -56.5545       56.5545       313.152       369.707    
  10  0.495420     -0.702349      -67.0094       67.0094       310.973       377.983    
  11  0.479343     -0.735339      -70.1569       70.1569       312.134       382.290    
  12  0.462659     -0.770765      -73.5368       73.5368       317.507       391.044    
  13  0.631315E-01  -2.76253      -263.567       263.567       290.274       553.841    
  14  0.785681     -0.241205      -23.0128       23.0128       305.147       328.160    
  15  0.767932     -0.264055      -25.1928       25.1928       317.736       342.929    
  16  0.262689E-01  -3.63937      -347.223       347.223       291.059       638.282    
  17  0.871353     -0.137708      -13.1384       13.1384       318.025       331.164    
  18  0.618350     -0.480701      -45.8625       45.8625       269.945       315.808    
  19  0.196090      -1.62918      -155.436       155.436       314.057       469.493    
  20  0.925050     -0.779078E-01  -7.43300       7.43300       318.008       325.441    
  21  0.903269     -0.101735      -9.70630       9.70630       317.896       327.602    
  22  0.958828     -0.420436E-01  -4.01127       4.01127       311.882       315.893    
  23  0.969274     -0.312081E-01  -2.97749       2.97749       325.871       328.849    
  24  0.313932      -1.15858      -110.537       110.537       313.757       424.294    
  25  0.106324      -2.24126      -213.833       213.833       319.305       533.139    
  26  0.718705     -0.330304      -31.5135       31.5135       300.437       331.950    
  27  0.751116     -0.286195      -27.3051       27.3051       333.837       361.142    
  28  0.996391     -0.361592E-02 -0.344986      0.344986       320.091       320.436    
  29  0.313387      -1.16032      -110.703       110.703       325.716       436.419    
  30  0.305057      -1.18726      -113.273       113.273       314.940       428.213    
  31  0.408833     -0.894447      -85.3370       85.3370       322.677       408.014    
  32  0.589856     -0.527877      -50.3635       50.3635       318.052       368.416    
  33  0.808683     -0.212349      -20.2597       20.2597       332.461       352.721    
  34  0.481635     -0.730569      -69.7018       69.7018       318.381       388.083    
  35  0.677481     -0.389374      -37.1492       37.1492       344.821       381.970    
  36  0.673605     -0.395111      -37.6965       37.6965       319.482       357.178    
  37  0.409374E-01  -3.19571      -304.895       304.895       275.738       580.633    
  38  0.362144      -1.01571      -96.9068       96.9068       319.806       416.713    
  39  0.364718E-01  -3.31122      -315.915       315.915       319.358       635.273    
  40  0.280272      -1.27199      -121.358       121.358       318.025       439.383    
  41  0.532528     -0.630120      -60.1182       60.1182       278.834       338.952    
  42  0.901591     -0.103595      -9.88372       9.88372       318.671       328.554    
  43  0.262858      -1.33614      -127.478       127.478       313.807       441.285    
  44  0.168755      -1.77931      -169.760       169.760       308.952       478.712    
  45  0.504619     -0.683952      -65.2542       65.2542       287.140       352.394    
  46  0.900650     -0.104639      -9.98332       9.98332       318.942       328.925    
  47  0.438495     -0.824406      -78.6545       78.6545       294.012       372.667    
  48  0.984597     -0.155233E-01  -1.48104       1.48104       327.487       328.968    
  49  0.469739     -0.755579      -72.0879       72.0879       326.468       398.556    
  50  0.252111      -1.37789      -131.461       131.461       361.180       492.640    
  51  0.764692     -0.268282      -25.5962       25.5962       317.931       343.528    
  52  0.848445     -0.164351      -15.6803       15.6803       310.888       326.569    
  53  0.705739     -0.348509      -33.2504       33.2504       319.053       352.303    
  54  0.449895     -0.798741      -76.2060       76.2060       319.594       395.800    
  55  0.742135     -0.298224      -28.4529       28.4529       318.025       346.478    
  56  0.305311      -1.18642      -113.194       113.194       316.952       430.146    
  57  0.798408     -0.225136      -21.4797       21.4797       411.198       432.678    
  58  0.807590     -0.213700      -20.3886       20.3886       329.961       350.350    
  59  0.768432     -0.263404      -25.1307       25.1307       317.674       342.805    
  60  0.895397     -0.110488      -10.5414       10.5414       317.711       328.252    
  61  0.585964     -0.534497      -50.9951       50.9951       315.864       366.859    
  62  0.785258     -0.241743      -23.0641       23.0641       262.089       285.153    
  63  0.311021      -1.16790      -111.426       111.426       256.750       368.176    
  64  0.803571     -0.218690      -20.8647       20.8647       319.172       340.037    
  65  0.879509     -0.128391      -12.2495       12.2495       315.769       328.019    
  66  0.605375     -0.501907      -47.8857       47.8857       313.360       361.246    
  67  0.774979     -0.254920      -24.3213       24.3213       325.264       349.585    
  68  0.621445     -0.475708      -45.3861       45.3861       284.323       329.709    
  69  0.755932     -0.279804      -26.6954       26.6954       282.959       309.654    
  70  0.211323E-01  -3.85695      -367.982       367.982       501.425       869.408    
  71  0.616355     -0.483932      -46.1708       46.1708       507.193       553.364    
  72  0.102593      -2.27699      -217.242       217.242       272.208       489.450    
  73  0.728301     -0.317041      -30.2481       30.2481       472.270       502.518    
  74  0.243662      -1.41197      -134.713       134.713       529.949       664.662    
  75  0.530372     -0.634177      -60.5053       60.5053       354.393       414.899    
  76  0.886974     -0.119940      -11.4432       11.4432       316.943       328.386    
  77  0.839168     -0.175345      -16.7292       16.7292       283.393       300.122    
  78  0.637690     -0.449903      -42.9242       42.9242       541.219       584.143    
  79  0.976854     -0.234180E-01  -2.23426       2.23426       270.037       272.271    
loop,thermsimp(1:2)       35   100.681       166.293    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142        440.36         87.39          1.16         40.13          0.85          0.05        129.59
Just calling func    0   0        129.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    440.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       35
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       36
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      141     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -246.131       246.131       270.037       516.167    
   2  0.962370     -0.383559E-01  -3.65944       3.65944       262.089       265.748    
   3  0.356737      -1.03076      -98.3419       98.3419       283.393       381.735    
   4  0.884319     -0.122937      -11.7291       11.7291       282.959       294.688    
   5  0.919725E-01  -2.38627      -227.668       227.668       269.945       497.613    
   6  0.900184     -0.105156      -10.0327       10.0327       311.882       321.915    
   7  0.390055     -0.941468      -89.8231       89.8231       282.662       372.485    
   8  0.263976      -1.33190      -127.073       127.073       320.091       447.164    
   9  0.898455     -0.107078      -10.2161       10.2161       288.946       299.162    
  10  0.697674E-01  -2.66259      -254.031       254.031       318.008       572.039    
  11  0.888938     -0.117727      -11.2321       11.2321       310.888       322.120    
  12  0.824147     -0.193406      -18.4524       18.4524       317.896       336.348    
  13  0.941109     -0.606968E-01  -5.79094       5.79094       315.769       321.560    
  14  0.885654     -0.121429      -11.5852       11.5852       305.147       316.732    
  15  0.798208     -0.225386      -21.5035       21.5035       317.711       339.214    
  16  0.365331      -1.00695      -96.0709       96.0709       316.943       413.014    
  17  0.519490     -0.654907      -62.4831       62.4831       318.671       381.154    
  18  0.922741     -0.804065E-01  -7.67139       7.67139       325.871       333.543    
  19  0.877443     -0.130744      -12.4739       12.4739       318.942       331.416    
  20  0.584844     -0.536410      -51.1776       51.1776       327.487       378.665    
  21  0.671390     -0.398406      -38.0109       38.0109       284.323       322.334    
  22  0.203335      -1.59290      -151.975       151.975       318.025       470.000    
  23  0.330236E-01  -3.41053      -325.391       325.391       300.437       625.827    
  24  0.879725     -0.128146      -12.2261       12.2261       278.834       291.060    
  25  0.833976     -0.181550      -17.3213       17.3213       319.172       336.494    
  26  0.901698     -0.103475      -9.87232       9.87232       317.674       327.547    
  27  0.692847     -0.366946      -35.0094       35.0094       317.736       352.746    
  28  0.550572     -0.596797      -56.9389       56.9389       317.931       374.870    
  29  0.158383E-01  -4.14532      -395.495       395.495       318.025       713.520    
  30  0.503246     -0.686677      -65.5142       65.5142       325.264       390.778    
  31  0.648812     -0.432612      -41.2745       41.2745       329.961       371.236    
  32  0.306980      -1.18097      -112.674       112.674       319.053       431.727    
  33  0.205188      -1.58383      -151.109       151.109       287.140       438.249    
  34  0.265146      -1.32748      -126.651       126.651       332.461       459.112    
  35  0.272730E-01  -3.60186      -343.645       343.645       319.482       663.126    
  36  0.262990E-01  -3.63823      -347.114       347.114       257.925       605.040    
  37  0.492753     -0.707748      -67.5245       67.5245       290.928       358.452    
  38  0.255065      -1.36624      -130.349       130.349       333.837       464.186    
  39  0.623259     -0.472794      -45.1081       45.1081       313.360       358.468    
  40  0.949296     -0.520343E-01  -4.96447       4.96447       315.864       320.829    
  41  0.982394     -0.177630E-01  -1.69472       1.69472       256.750       258.445    
  42  0.566450     -0.568366      -54.2264       54.2264       318.052       372.279    
  43  0.557613     -0.584090      -55.7266       55.7266       313.152       368.879    
  44  0.900731     -0.104549      -9.97475       9.97475       294.012       303.987    
  45  0.671339     -0.398481      -38.0181       38.0181       310.973       348.991    
  46  0.650454     -0.430084      -41.0333       41.0333       344.821       385.854    
  47  0.749315     -0.288595      -27.5342       27.5342       312.134       339.668    
  48  0.667497     -0.404220      -38.5656       38.5656       318.381       356.947    
  49  0.132870      -2.01838      -192.569       192.569       317.507       510.077    
  50  0.964787     -0.358480E-01  -3.42017       3.42017       278.568       281.988    
  51  0.835780     -0.179390      -17.1151       17.1151       319.594       336.709    
  52  0.601609     -0.508148      -48.4811       48.4811       326.468       374.949    
  53  0.937321     -0.647298E-01  -6.17571       6.17571       322.677       328.852    
  54  0.467877     -0.759550      -72.4668       72.4668       354.393       426.860    
  55  0.953249     -0.478789E-01  -4.56801       4.56801       319.806       324.374    
  56  0.827724     -0.189076      -18.0393       18.0393       313.757       331.797    
  57  0.624780     -0.470355      -44.8754       44.8754       314.940       359.816    
  58  0.821535     -0.196581      -18.7553       18.7553       316.952       335.707    
  59  0.625285     -0.469548      -44.7984       44.7984       411.198       455.996    
  60  0.581213     -0.542638      -51.7718       51.7718       325.716       377.488    
  61  0.855886E-01  -2.45820      -234.531       234.531       318.025       552.556    
  62  0.262334      -1.33814      -127.668       127.668       313.807       441.475    
  63  0.978265     -0.219749E-01  -2.09657       2.09657       277.887       279.984    
  64  0.600842     -0.509423      -48.6028       48.6028       281.545       330.148    
  65  0.476413     -0.741470      -70.7419       70.7419       314.057       384.799    
  66  0.922813     -0.803282E-01  -7.66392       7.66392       276.173       283.837    
  67  0.468949     -0.757261      -72.2484       72.2484       308.952       381.200    
  68  0.832153E-01  -2.48632      -237.214       237.214       272.208       509.422    
  69  0.927485     -0.752786E-01  -7.18214       7.18214       361.180       368.362    
  70  0.487372     -0.718728      -68.5720       68.5720       472.270       540.842    
  71  0.410125     -0.891292      -85.0360       85.0360       319.305       404.341    
  72  0.961670     -0.390839E-01  -3.72890       3.72890       507.193       510.922    
  73  0.683411     -0.380659      -36.3178       36.3178       290.274       326.592    
  74  0.970618     -0.298221E-01  -2.84526       2.84526       275.738       278.584    
  75  0.181020      -1.70915      -163.066       163.066       541.219       704.285    
  76  0.328837      -1.11219      -106.112       106.112       319.358       425.470    
  77  0.822629     -0.195251      -18.6284       18.6284       291.059       309.687    
  78  0.561435     -0.577260      -55.0750       55.0750       529.949       585.024    
  79  0.111506      -2.19368      -209.293       209.293       440.362       649.655    
loop,thermsimp(1:2)       36   246.131       3.65944    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        277.20         87.31          1.13         40.29          0.68          0.05        129.47
Just calling func    0   0        129.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        255.06         87.48          1.16         40.09          0.68          0.05        129.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    255.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       36
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       37
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      143     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -5.98821       5.98821       256.750       262.738    
   2  0.112532E-01  -4.48710      -428.103       428.103       262.089       690.192    
   3  0.907929     -0.965891E-01  -9.21532       9.21532       275.738       284.954    
   4  0.478640     -0.736807      -70.2969       70.2969       277.887       348.184    
   5  0.737686     -0.304237      -29.0265       29.0265       278.568       307.594    
   6  0.114880      -2.16387      -206.449       206.449       276.173       482.622    
   7  0.309837      -1.17171      -111.790       111.790       278.834       390.624    
   8  0.469091     -0.756958      -72.2195       72.2195       282.959       355.179    
   9  0.721151     -0.326907      -31.1894       31.1894       288.946       320.135    
  10  0.557251     -0.584740      -55.7886       55.7886       294.012       349.801    
  11  0.581534     -0.542085      -51.7190       51.7190       291.059       342.778    
  12  0.501412     -0.690326      -65.8623       65.8623       305.147       371.009    
  13  0.783062     -0.244543      -23.3313       23.3313       315.864       339.196    
  14  0.571322     -0.559803      -53.4094       53.4094       315.769       369.179    
  15  0.902729E-01  -2.40492      -229.447       229.447       311.882       541.329    
  16  0.695403E-01  -2.66585      -254.342       254.342       310.888       565.230    
  17  0.128872      -2.04894      -195.484       195.484       284.323       479.808    
  18  0.940828E-01  -2.36358      -225.503       225.503       319.806       545.310    
  19  0.326350      -1.11979      -106.836       106.836       290.274       397.110    
  20  0.102915      -2.27385      -216.943       216.943       317.674       534.617    
  21  0.324524      -1.12540      -107.371       107.371       322.677       430.048    
  22  0.259454      -1.34918      -128.722       128.722       281.545       410.267    
  23  0.782812     -0.244863      -23.3618       23.3618       318.942       342.304    
  24  0.383591     -0.958178      -91.4175       91.4175       313.757       405.175    
  25  0.626880     -0.466999      -44.5553       44.5553       325.871       370.426    
  26  0.292269      -1.23008      -117.359       117.359       316.952       434.311    
  27  0.448852     -0.801062      -76.4274       76.4274       317.896       394.323    
  28  0.685432     -0.377706      -36.0360       36.0360       319.172       355.208    
  29  0.995399     -0.461118E-02 -0.439941      0.439941       319.594       320.034    
  30  0.163323      -1.81203      -172.881       172.881       317.711       490.592    
  31  0.952940     -0.482038E-01  -4.59900       4.59900       312.134       316.733    
  32  0.861306     -0.149306      -14.2449       14.2449       310.973       325.218    
  33  0.587276     -0.532261      -50.7817       50.7817       317.736       368.518    
  34  0.908704     -0.957357E-01  -9.13391       9.13391       318.381       327.515    
  35  0.585935     -0.534546      -50.9997       50.9997       290.928       341.927    
  36  0.429836     -0.844352      -80.5576       80.5576       313.360       393.917    
  37  0.726203     -0.319926      -30.5234       30.5234       314.940       345.463    
  38  0.151145E-01  -4.19210      -399.958       399.958       361.180       761.137    
  39  0.927869     -0.748646E-01  -7.14265       7.14265       313.152       320.295    
  40  0.961645     -0.391099E-01  -3.73138       3.73138       329.961       333.693    
  41  0.253977      -1.37051      -130.757       130.757       318.052       448.809    
  42  0.768038     -0.263917      -25.1796       25.1796       282.662       307.841    
  43  0.569441E-01  -2.86569      -273.408       273.408       317.931       591.339    
  44  0.103919      -2.26415      -216.017       216.017       326.468       542.485    
  45  0.312226      -1.16403      -111.057       111.057       325.716       436.773    
  46  0.473636E-02  -5.35249      -510.668       510.668       327.487       838.155    
  47  0.192099      -1.64975      -157.398       157.398       318.671       476.069    
  48  0.799429     -0.223858      -21.3577       21.3577       308.952       330.310    
  49  0.164379      -1.80558      -172.266       172.266       283.393       455.659    
  50  0.421896     -0.862996      -82.3364       82.3364       314.057       396.393    
  51  0.361660      -1.01705      -97.0343       97.0343       344.821       441.855    
  52  0.346541      -1.05975      -101.109       101.109       325.264       426.372    
  53  0.728715     -0.316473      -30.1939       30.1939       319.305       349.499    
  54  0.305329      -1.18637      -113.188       113.188       316.943       430.131    
  55  0.547244     -0.602861      -57.5175       57.5175       319.358       376.876    
  56  0.942790     -0.589122E-01  -5.62066       5.62066       354.393       360.014    
  57  0.846801     -0.166290      -15.8653       15.8653       319.053       334.918    
  58  0.961806     -0.389424E-01  -3.71540       3.71540       287.140       290.855    
  59  0.101104      -2.29161      -218.637       218.637       313.807       532.444    
  60  0.181736      -1.70520      -162.689       162.689       320.091       482.780    
  61  0.298004      -1.21065      -115.505       115.505       411.198       526.703    
  62  0.840699E-01  -2.47611      -236.239       236.239       332.461       568.701    
  63  0.796444     -0.227598      -21.7146       21.7146       333.837       355.552    
  64  0.294043      -1.22403      -116.782       116.782       318.025       434.807    
  65  0.156591      -1.85412      -176.897       176.897       269.945       446.842    
  66  0.973381     -0.269794E-01  -2.57404       2.57404       272.208       274.782    
  67  0.515799     -0.662038      -63.1634       63.1634       317.507       380.671    
  68  0.211924      -1.55153      -148.028       148.028       507.193       655.221    
  69  0.830172     -0.186122      -17.7575       17.7575       270.037       287.794    
  70  0.666225     -0.406128      -38.7477       38.7477       472.270       511.018    
  71  0.756659     -0.278843      -26.6037       26.6037       318.025       344.629    
  72  0.799292     -0.224029      -21.3740       21.3740       318.008       339.382    
  73  0.644747     -0.438898      -41.8741       41.8741       529.949       571.823    
  74  0.802537     -0.219977      -20.9874       20.9874       257.925       278.913    
  75  0.205334      -1.58312      -151.042       151.042       300.437       451.478    
  76  0.662653     -0.411503      -39.2605       39.2605       440.362       479.623    
  77  0.463199E-03  -7.67735      -732.478       732.478       319.482       1051.96    
  78  0.927713     -0.750332E-01  -7.15874       7.15874       541.219       548.378    
  79  0.191933      -1.65061      -157.481       157.481       255.057       412.538    
loop,thermsimp(1:2)       37   5.98821       428.103    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        279.87         87.49          1.14         40.00          1.01          0.05        129.68
Just calling func    0   0        129.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146        276.45         87.45          1.14         40.05          0.93          0.05        129.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    276.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       37
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       38
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      145     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -94.4082       94.4082       256.750       351.158    
   2  0.687927     -0.374072      -35.6893       35.6893       272.208       307.897    
   3  0.288957      -1.24148      -118.446       118.446       257.925       376.372    
   4  0.192838      -1.64590      -157.032       157.032       275.738       432.770    
   5  0.369869     -0.994607      -94.8931       94.8931       270.037       364.930    
   6  0.735973     -0.306562      -29.2483       29.2483       287.140       316.388    
   7  0.637144     -0.450760      -43.0059       43.0059       278.568       321.573    
   8  0.703934     -0.351071      -33.4948       33.4948       282.662       316.156    
   9  0.864279     -0.145859      -13.9161       13.9161       312.134       326.050    
  10  0.473452     -0.747705      -71.3367       71.3367       319.594       390.931    
  11  0.242010      -1.41877      -135.362       135.362       288.946       424.307    
  12  0.510769     -0.671838      -64.0984       64.0984       313.152       377.251    
  13  0.829624     -0.186782      -17.8205       17.8205       310.973       328.794    
  14  0.228911      -1.47442      -140.671       140.671       318.381       459.052    
  15  0.310006      -1.17116      -111.738       111.738       308.952       420.690    
  16  0.248341      -1.39295      -132.898       132.898       329.961       462.860    
  17  0.723214     -0.324050      -30.9168       30.9168       319.053       349.970    
  18  0.420900     -0.865360      -82.5619       82.5619       315.864       398.426    
  19  0.133903      -2.01064      -191.830       191.830       318.008       509.838    
  20  0.571916     -0.558763      -53.3103       53.3103       290.928       344.238    
  21  0.609104     -0.495766      -47.2998       47.2998       318.942       366.242    
  22  0.582057     -0.541186      -51.6332       51.6332       291.059       342.692    
  23  0.440731     -0.819321      -78.1695       78.1695       318.025       396.195    
  24  0.211006      -1.55587      -148.442       148.442       314.940       463.382    
  25  0.665769     -0.406813      -38.8130       38.8130       277.887       316.700    
  26  0.766062     -0.266493      -25.4254       25.4254       319.305       344.730    
  27  0.321416E-01  -3.43760      -327.973       327.973       294.012       621.985    
  28  0.165897E-01  -4.09897      -391.073       391.073       282.959       674.032    
  29  0.634553     -0.454835      -43.3947       43.3947       319.172       362.567    
  30  0.981834     -0.183335E-01  -1.74916       1.74916       333.837       335.586    
  31  0.511720     -0.669978      -63.9210       63.9210       354.393       418.314    
  32  0.426358     -0.852477      -81.3327       81.3327       317.736       399.069    
  33  0.500527     -0.692094      -66.0310       66.0310       315.769       381.800    
  34  0.100483      -2.29777      -219.225       219.225       325.871       545.096    
  35  0.837324     -0.177545      -16.9391       16.9391       305.147       322.086    
  36  0.257741      -1.35580      -129.354       129.354       319.358       448.712    
  37  0.437184     -0.827401      -78.9403       78.9403       317.507       396.448    
  38  0.707529     -0.345976      -33.0088       33.0088       278.834       311.842    
  39  0.538379     -0.619193      -59.0757       59.0757       313.360       372.435    
  40  0.611820     -0.491317      -46.8753       46.8753       317.896       364.771    
  41  0.404533     -0.905022      -86.3459       86.3459       314.057       400.403    
  42  0.902499     -0.102588      -9.78769       9.78769       290.274       300.062    
  43  0.704299     -0.350552      -33.4453       33.4453       313.757       347.203    
  44  0.511818     -0.669786      -63.9026       63.9026       281.545       345.448    
  45  0.748131     -0.290178      -27.6852       27.6852       255.057       282.742    
  46  0.296598      -1.21538      -115.956       115.956       325.264       441.220    
  47  0.805122     -0.216762      -20.6807       20.6807       322.677       343.357    
  48  0.525063     -0.644236      -61.4650       61.4650       316.943       378.408    
  49  0.192567      -1.64731      -157.166       157.166       316.952       474.118    
  50  0.991898     -0.813527E-02 -0.776166      0.776166       318.025       318.801    
  51  0.238175      -1.43475      -136.886       136.886       325.716       462.602    
  52  0.627675     -0.465733      -44.4344       44.4344       344.821       389.255    
  53  0.328849      -1.11216      -106.108       106.108       269.945       376.053    
  54  0.697651     -0.360037      -34.3502       34.3502       318.052       352.403    
  55  0.154345      -1.86857      -178.275       178.275       300.437       478.712    
  56  0.196838      -1.62537      -155.073       155.073       283.393       438.466    
  57  0.397903     -0.921546      -87.9225       87.9225       318.671       406.593    
  58  0.746135E-01  -2.59543      -247.624       247.624       440.362       687.986    
  59  0.283843      -1.25934      -120.150       120.150       284.323       404.473    
  60  0.540853E-02  -5.21978      -498.006       498.006       276.173       774.179    
  61  0.534720     -0.626011      -59.7262       59.7262       320.091       379.817    
  62  0.909816     -0.945126E-01  -9.01721       9.01721       317.711       326.728    
  63  0.190142      -1.65998      -158.375       158.375       472.270       630.645    
  64  0.150854      -1.89144      -180.458       180.458       411.198       591.656    
  65  0.385455     -0.953330      -90.9549       90.9549       313.807       404.762    
  66  0.655101     -0.422966      -40.3541       40.3541       317.674       358.029    
  67  0.527025     -0.640508      -61.1093       61.1093       311.882       372.991    
  68  0.110501      -2.20273      -210.157       210.157       326.468       536.626    
  69  0.206094      -1.57942      -150.689       150.689       319.806       470.495    
  70  0.961998     -0.387429E-01  -3.69636       3.69636       541.219       544.916    
  71  0.842154     -0.171793      -16.3903       16.3903       310.888       327.279    
  72  0.178445      -1.72347      -164.432       164.432       332.461       496.894    
  73  0.742172     -0.298174      -28.4481       28.4481       529.949       558.397    
  74  0.985630     -0.144744E-01  -1.38096       1.38096       317.931       319.312    
  75  0.455040     -0.787371      -75.1211       75.1211       507.193       582.314    
  76  0.780136     -0.248287      -23.6885       23.6885       262.089       285.777    
  77  0.290766      -1.23524      -117.851       117.851       361.180       479.030    
  78  0.836925E-01  -2.48061      -236.669       236.669       327.487       564.156    
  79  0.901701     -0.103473      -9.87206       9.87206       276.452       286.324    
loop,thermsimp(1:2)       38   94.4082       35.6893    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147       1744.91         87.46          1.15         39.99          0.80          0.05        129.45
Just calling func    0   0        129.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148        548.33         87.48          1.15         40.24          0.81          0.05        129.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    548.33
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       38
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       39
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      147     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -30.7784       30.7784       255.057       285.835    
   2  0.309663      -1.17227      -111.843       111.843       262.089       373.932    
   3  0.688114     -0.373801      -35.6634       35.6634       276.452       312.116    
   4  0.677876     -0.388791      -37.0936       37.0936       290.274       327.368    
   5  0.283701      -1.25984      -120.198       120.198       272.208       392.406    
   6  0.183733      -1.69427      -161.646       161.646       278.834       440.480    
   7  0.243414      -1.41299      -134.810       134.810       282.662       417.472    
   8  0.785389     -0.241576      -23.0481       23.0481       287.140       310.188    
   9  0.258033      -1.35467      -129.246       129.246       277.887       407.133    
  10  0.137887      -1.98132      -189.033       189.033       318.025       507.058    
  11  0.386520     -0.950573      -90.6918       90.6918       317.931       408.623    
  12  0.882934     -0.124505      -11.8787       11.8787       278.568       290.446    
  13  0.395106     -0.928602      -88.5956       88.5956       305.147       393.742    
  14  0.107633      -2.22903      -212.666       212.666       312.134       524.800    
  15  0.434094     -0.834495      -79.6171       79.6171       317.711       397.328    
  16  0.558484     -0.582529      -55.5777       55.5777       310.888       366.466    
  17  0.102706      -2.27589      -217.137       217.137       310.973       528.110    
  18  0.325804      -1.12146      -106.996       106.996       333.837       440.833    
  19  0.693871     -0.365469      -34.8685       34.8685       291.059       325.927    
  20  0.832622     -0.183176      -17.4764       17.4764       322.677       340.153    
  21  0.691207     -0.369316      -35.2355       35.2355       290.928       326.163    
  22  0.903946     -0.100985      -9.63475       9.63475       319.305       328.940    
  23  0.258785E-01  -3.65434      -348.652       348.652       281.545       630.197    
  24  0.247338      -1.39700      -133.284       133.284       313.757       447.042    
  25  0.861464     -0.149122      -14.2274       14.2274       319.053       333.280    
  26  0.954919     -0.461290E-01  -4.40105       4.40105       256.750       261.151    
  27  0.579638     -0.545352      -52.0307       52.0307       318.052       370.083    
  28  0.537182     -0.621418      -59.2880       59.2880       317.674       376.962    
  29  0.407710     -0.897199      -85.5996       85.5996       319.172       404.772    
  30  0.958466     -0.424211E-01  -4.04729       4.04729       317.896       321.943    
  31  0.884674     -0.122536      -11.6909       11.6909       270.037       281.728    
  32  0.395055     -0.928731      -88.6080       88.6080       318.942       407.550    
  33  0.325425      -1.12262      -107.107       107.107       313.360       420.466    
  34  0.679842     -0.385895      -36.8173       36.8173       311.882       348.699    
  35  0.765292     -0.267498      -25.5213       25.5213       269.945       295.466    
  36  0.217460      -1.52574      -145.567       145.567       257.925       403.493    
  37  0.181189      -1.70822      -162.977       162.977       313.152       476.129    
  38  0.518456     -0.656899      -62.6732       62.6732       316.943       379.616    
  39  0.249864E-01  -3.68942      -351.999       351.999       320.091       672.090    
  40  0.336654      -1.08870      -103.870       103.870       315.769       419.639    
  41  0.873801     -0.134903      -12.8707       12.8707       344.821       357.692    
  42  0.478904     -0.736255      -70.2443       70.2443       319.594       389.838    
  43  0.819950     -0.198512      -18.9396       18.9396       318.025       336.965    
  44  0.966813     -0.337500E-01  -3.22001       3.22001       317.507       320.727    
  45  0.514109     -0.665319      -63.4765       63.4765       315.864       379.341    
  46  0.483734     -0.726221      -69.2869       69.2869       317.736       387.023    
  47  0.227743E-01  -3.78212      -360.843       360.843       314.057       674.900    
  48  0.409495     -0.892830      -85.1827       85.1827       284.323       369.506    
  49  0.198361      -1.61767      -154.338       154.338       313.807       468.145    
  50  0.925767     -0.771331E-01  -7.35908       7.35908       318.671       326.030    
  51  0.842113     -0.171842      -16.3950       16.3950       354.393       370.788    
  52  0.347114E-01  -3.36069      -320.635       320.635       308.952       629.587    
  53  0.215814      -1.53334      -146.292       146.292       288.946       435.238    
  54  0.219309      -1.51727      -144.759       144.759       275.738       420.498    
  55  0.940126     -0.617416E-01  -5.89061       5.89061       283.393       289.284    
  56  0.663408     -0.410365      -39.1520       39.1520       325.264       364.416    
  57  0.630947     -0.460533      -43.9383       43.9383       319.358       363.296    
  58  0.719671     -0.328961      -31.3853       31.3853       318.381       349.766    
  59  0.939094     -0.628392E-01  -5.99533       5.99533       325.716       331.711    
  60  0.901520     -0.103673      -9.89121       9.89121       329.961       339.853    
  61  0.771028     -0.260031      -24.8089       24.8089       314.940       339.749    
  62  0.320616      -1.13751      -108.527       108.527       319.806       428.333    
  63  0.893890     -0.112173      -10.7021       10.7021       316.952       327.654    
  64  0.874332     -0.134295      -12.8127       12.8127       300.437       313.250    
  65  0.363931      -1.01079      -96.4371       96.4371       361.180       457.617    
  66  0.140534      -1.96231      -187.219       187.219       332.461       519.680    
  67  0.432559     -0.838038      -79.9551       79.9551       318.008       397.963    
  68  0.446579     -0.806139      -76.9118       76.9118       326.468       403.380    
  69  0.830196     -0.186093      -17.7547       17.7547       541.219       558.974    
  70  0.324418      -1.12572      -107.402       107.402       325.871       433.274    
  71  0.645984E-01  -2.73957      -261.375       261.375       529.949       791.324    
  72  0.465516     -0.764609      -72.9494       72.9494       327.487       400.437    
  73  0.456901     -0.783288      -74.7316       74.7316       507.193       581.925    
  74  0.263704      -1.33293      -127.172       127.172       411.198       538.370    
  75  0.873440     -0.135316      -12.9102       12.9102       294.012       306.922    
  76  0.295712      -1.21837      -116.242       116.242       472.270       588.512    
  77  0.581464E-01  -2.84479      -271.415       271.415       282.959       554.374    
  78  0.674734     -0.393436      -37.5368       37.5368       440.362       477.899    
  79  0.772649     -0.257931      -24.6085       24.6085       548.325       572.934    
loop,thermsimp(1:2)       39   30.7784       111.843    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149        304.19         87.25          1.12         40.22          1.04          0.05        129.68
Just calling func    0   0        129.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150        470.63         87.47          1.16         40.26          0.31          0.05        129.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    304.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       39
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       40
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      149     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -4.42974       4.42974       256.750       261.180    
   2  0.450411     -0.797594      -76.0965       76.0965       270.037       346.133    
   3  0.691912E-01  -2.67088      -254.822       254.822       255.057       509.879    
   4  0.740935     -0.299842      -28.6072       28.6072       283.393       312.000    
   5  0.452531     -0.792898      -75.6485       75.6485       278.568       354.216    
   6  0.461330     -0.773642      -73.8113       73.8113       269.945       343.756    
   7  0.102999      -2.27303      -216.865       216.865       294.012       510.877    
   8  0.475106     -0.744217      -71.0039       71.0039       287.140       358.144    
   9  0.240275      -1.42597      -136.048       136.048       276.452       412.501    
  10  0.276707E-01  -3.58738      -342.263       342.263       300.437       642.700    
  11  0.132701E-01  -4.32224      -412.374       412.374       317.507       729.882    
  12  0.997219     -0.278509E-02 -0.265718      0.265718       317.896       318.162    
  13  0.563305     -0.573934      -54.7576       54.7576       291.059       345.816    
  14  0.347949      -1.05570      -100.722       100.722       318.671       419.392    
  15  0.546018     -0.605103      -57.7314       57.7314       290.928       348.659    
  16  0.343968      -1.06721      -101.820       101.820       290.274       392.094    
  17  0.945234     -0.563230E-01  -5.37364       5.37364       316.952       322.325    
  18  0.346208      -1.06072      -101.200       101.200       319.305       420.505    
  19  0.406433     -0.900337      -85.8989       85.8989       325.716       411.615    
  20  0.632259     -0.458455      -43.7401       43.7401       319.053       362.793    
  21  0.983930     -0.162002E-01  -1.54562       1.54562       318.025       319.571    
  22  0.200798      -1.60546      -153.173       153.173       314.940       468.113    
  23  0.223962      -1.49628      -142.756       142.756       329.961       472.718    
  24  0.594322     -0.520335      -49.6439       49.6439       322.677       372.320    
  25  0.875298     -0.133191      -12.7074       12.7074       311.882       324.589    
  26  0.327822      -1.11529      -106.407       106.407       318.381       424.788    
  27  0.215105      -1.53663      -146.606       146.606       344.821       491.427    
  28  0.905181     -0.996198E-01  -9.50449       9.50449       319.358       328.862    
  29  0.699086     -0.357981      -34.1541       34.1541       325.264       359.418    
  30  0.747401     -0.291154      -27.7783       27.7783       310.888       338.667    
  31  0.699189     -0.357834      -34.1400       34.1400       284.323       318.463    
  32  0.563488     -0.573610      -54.7267       54.7267       318.052       372.779    
  33  0.155576      -1.86062      -177.518       177.518       354.393       531.911    
  34  0.380593     -0.966025      -92.1661       92.1661       262.089       354.255    
  35  0.626112     -0.468226      -44.6723       44.6723       317.674       362.347    
  36  0.372369     -0.987870      -94.2502       94.2502       315.864       410.115    
  37  0.517531     -0.658686      -62.8437       62.8437       316.943       379.787    
  38  0.673247     -0.395643      -37.7473       37.7473       317.736       355.483    
  39  0.741527     -0.299044      -28.5311       28.5311       319.594       348.125    
  40  0.280982      -1.26947      -121.117       121.117       272.208       393.324    
  41  0.331745      -1.10339      -105.272       105.272       305.147       410.418    
  42  0.712030     -0.339635      -32.4037       32.4037       317.711       350.114    
  43  0.200581      -1.60654      -153.276       153.276       318.008       471.284    
  44  0.989915     -0.101357E-01 -0.967023      0.967023       327.487       328.454    
  45  0.808031     -0.213155      -20.3366       20.3366       326.468       346.805    
  46  0.893446     -0.112670      -10.7496       10.7496       257.925       268.675    
  47  0.364885      -1.00817      -96.1872       96.1872       319.172       415.360    
  48  0.923731     -0.793347E-01  -7.56913       7.56913       277.887       285.457    
  49  0.504880     -0.683434      -65.2047       65.2047       318.942       384.147    
  50  0.724988     -0.321600      -30.6831       30.6831       317.931       348.614    
  51  0.927322     -0.754540E-01  -7.19888       7.19888       282.662       289.861    
  52  0.857721     -0.153476      -14.6428       14.6428       315.769       330.412    
  53  0.943333     -0.583361E-01  -5.56571       5.56571       313.360       318.926    
  54  0.794551     -0.229978      -21.9416       21.9416       275.738       297.680    
  55  0.732400     -0.311429      -29.7127       29.7127       319.806       349.519    
  56  0.143434      -1.94188      -185.270       185.270       325.871       511.141    
  57  0.859384     -0.151540      -14.4580       14.4580       288.946       303.404    
  58  0.677471     -0.389389      -37.1506       37.1506       278.834       315.984    
  59  0.258745      -1.35191      -128.982       128.982       333.837       462.820    
  60  0.380926E-01  -3.26773      -311.767       311.767       313.757       625.524    
  61  0.563373     -0.573814      -54.7462       54.7462       361.180       415.926    
  62  0.985538     -0.145678E-01  -1.38987       1.38987       313.807       315.197    
  63  0.647297     -0.434951      -41.4976       41.4976       313.152       354.650    
  64  0.608092     -0.497430      -47.4585       47.4585       440.362       487.821    
  65  0.944821     -0.567601E-01  -5.41534       5.41534       318.025       323.441    
  66  0.458402E-01  -3.08259      -294.103       294.103       332.461       626.564    
  67  0.573743E-01  -2.85816      -272.690       272.690       312.134       584.823    
  68  0.755011     -0.281022      -26.8117       26.8117       310.973       337.785    
  69  0.199134      -1.61378      -153.967       153.967       411.198       565.165    
  70  0.364851      -1.00827      -96.1962       96.1962       282.959       379.155    
  71  0.868783     -0.140661      -13.4202       13.4202       541.219       554.639    
  72  0.658442     -0.417879      -39.8688       39.8688       548.325       588.194    
  73  0.257054      -1.35847      -129.608       129.608       507.193       636.801    
  74  0.619402     -0.479001      -45.7003       45.7003       472.270       517.971    
  75  0.825535     -0.191724      -18.2919       18.2919       308.952       327.244    
  76  0.987898     -0.121761E-01  -1.16170       1.16170       281.545       282.707    
  77  0.479920     -0.734135      -70.0420       70.0420       320.091       390.133    
  78  0.975367     -0.249414E-01  -2.37960       2.37960       314.057       316.436    
  79  0.572846     -0.557139      -53.1552       53.1552       304.193       357.348    
loop,thermsimp(1:2)       40   4.42974       76.0965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151        277.11         87.46          1.14         40.21          0.51          0.05        129.38
Just calling func    0   0        129.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152        300.15         87.39          1.16         39.88          1.18          0.05        129.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       40
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       41
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      151     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -98.0141       98.0141       256.750       354.764    
   2  0.414955     -0.879585      -83.9191       83.9191       257.925       341.844    
   3  0.407443     -0.897854      -85.6620       85.6620       281.545       367.207    
   4  0.883897     -0.123414      -11.7747       11.7747       277.887       289.662    
   5  0.520045     -0.653840      -62.3813       62.3813       282.662       345.043    
   6  0.634521     -0.454885      -43.3994       43.3994       275.738       319.138    
   7  0.344406      -1.06594      -101.698       101.698       288.946       390.644    
   8  0.545595     -0.605879      -57.8054       57.8054       283.393       341.199    
   9  0.766876     -0.265430      -25.3240       25.3240       313.807       339.131    
  10  0.639043     -0.447783      -42.7219       42.7219       278.834       321.556    
  11  0.850701     -0.161694      -15.4269       15.4269       314.057       329.484    
  12  0.832060     -0.183851      -17.5408       17.5408       317.896       335.437    
  13  0.728209     -0.317167      -30.2601       30.2601       284.323       314.583    
  14  0.531327     -0.632378      -60.3336       60.3336       313.360       373.693    
  15  0.188974E-01  -3.96873      -378.647       378.647       318.025       696.672    
  16  0.246817      -1.39911      -133.485       133.485       316.952       450.437    
  17  0.935336     -0.668496E-01  -6.37795       6.37795       318.025       324.403    
  18  0.730823     -0.313585      -29.9183       29.9183       311.882       341.800    
  19  0.482288     -0.729213      -69.5724       69.5724       308.952       378.524    
  20  0.782974E-04  -9.45500      -902.078       902.078       327.487       1229.57    
  21  0.258744      -1.35192      -128.983       128.983       319.358       448.341    
  22  0.389044     -0.944063      -90.0707       90.0707       315.769       405.840    
  23  0.611459E-01  -2.79449      -266.616       266.616       310.973       577.589    
  24  0.124922      -2.08006      -198.454       198.454       310.888       509.342    
  25  0.253683      -1.37167      -130.868       130.868       269.945       400.813    
  26  0.781437     -0.246621      -23.5295       23.5295       291.059       314.588    
  27  0.835634     -0.179565      -17.1319       17.1319       270.037       287.169    
  28  0.542030     -0.612434      -58.4308       58.4308       326.468       384.899    
  29  0.463443     -0.769071      -73.3752       73.3752       319.594       392.969    
  30  0.120587      -2.11538      -201.823       201.823       317.931       519.755    
  31  0.733316     -0.310178      -29.5933       29.5933       290.928       320.521    
  32  0.955530     -0.454889E-01  -4.33998       4.33998       319.806       324.146    
  33  0.419735     -0.868132      -82.8263       82.8263       317.711       400.537    
  34  0.284829      -1.25587      -119.819       119.819       278.568       398.387    
  35  0.924079     -0.789582E-01  -7.53321       7.53321       262.089       269.622    
  36  0.432674     -0.837770      -79.9296       79.9296       313.152       393.082    
  37  0.155293      -1.86244      -177.691       177.691       317.736       495.427    
  38  0.634342     -0.455168      -43.4264       43.4264       304.193       347.619    
  39  0.935635     -0.665293E-01  -6.34740       6.34740       287.140       293.487    
  40  0.931832     -0.706024E-01  -6.73600       6.73600       325.264       332.000    
  41  0.875970     -0.132424      -12.6342       12.6342       317.674       330.309    
  42  0.273544      -1.29629      -123.676       123.676       319.053       442.729    
  43  0.799596     -0.223649      -21.3378       21.3378       322.677       344.014    
  44  0.772883     -0.257628      -24.5796       24.5796       318.052       342.632    
  45  0.274276      -1.29362      -123.421       123.421       282.959       406.380    
  46  0.116034      -2.15387      -205.496       205.496       316.943       522.439    
  47  0.700214     -0.356369      -34.0003       34.0003       318.942       352.942    
  48  0.704184E-01  -2.65330      -253.145       253.145       320.091       573.236    
  49  0.699980E-01  -2.65929      -253.716       253.716       290.274       543.990    
  50  0.186964      -1.67684      -159.983       159.983       272.208       432.191    
  51  0.342641      -1.07107      -102.188       102.188       315.864       418.053    
  52  0.989806     -0.102462E-01 -0.977561      0.977561       305.147       306.124    
  53  0.216227      -1.53143      -146.110       146.110       325.716       471.826    
  54  0.233793      -1.45332      -138.658       138.658       276.452       415.110    
  55  0.404477     -0.905159      -86.3590       86.3590       319.172       405.531    
  56  0.164502      -1.80483      -172.194       172.194       361.180       533.374    
  57  0.561765E-01  -2.87926      -274.703       274.703       318.671       593.373    
  58  0.169196E-01  -4.07928      -389.194       389.194       319.305       708.499    
  59  0.486948     -0.719597      -68.6550       68.6550       318.381       387.036    
  60  0.640730     -0.445148      -42.4705       42.4705       333.837       376.308    
  61  0.940004     -0.618708E-01  -5.90294       5.90294       314.940       320.843    
  62  0.216981      -1.52795      -145.778       145.778       318.008       463.786    
  63  0.131817      -2.02634      -193.329       193.329       329.961       523.290    
  64  0.996981     -0.302401E-02 -0.288513      0.288513       440.362       440.651    
  65  0.534925     -0.625629      -59.6897       59.6897       344.821       404.511    
  66  0.151104      -1.88978      -180.300       180.300       255.057       435.357    
  67  0.228761      -1.47508      -140.734       140.734       294.012       434.746    
  68  0.187751      -1.67264      -159.583       159.583       325.871       485.454    
  69  0.417030     -0.874597      -83.4431       83.4431       472.270       555.713    
  70  0.239615      -1.42872      -136.311       136.311       354.393       490.704    
  71  0.937866E-02  -4.66932      -445.488       445.488       541.219       986.707    
  72  0.929880     -0.727002E-01  -6.93614       6.93614       411.198       418.134    
  73  0.463017     -0.769992      -73.4631       73.4631       312.134       385.597    
  74  0.570687     -0.560915      -53.5155       53.5155       548.325       601.841    
  75  0.631316     -0.459949      -43.8826       43.8826       313.757       357.640    
  76  0.436766     -0.828358      -79.0316       79.0316       332.461       411.493    
  77  0.517542     -0.658664      -62.8415       62.8415       507.193       570.035    
  78  0.838655     -0.175956      -16.7875       16.7875       300.437       317.224    
  79  0.534516     -0.626393      -59.7627       59.7627       277.109       336.871    
loop,thermsimp(1:2)       41   98.0141       83.9191    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        297.42         87.34          1.13         40.38          0.70          0.05        129.59
Just calling func    0   0        129.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        347.32         87.42          1.14         40.07          0.74          0.05        129.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    297.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       41
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       42
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      153     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -275.103       275.103       262.089       537.192    
   2  0.688513     -0.373221      -35.6081       35.6081       270.037       305.645    
   3  0.530653     -0.633647      -60.4547       60.4547       277.887       338.342    
   4  0.542886     -0.610856      -58.2803       58.2803       287.140       345.420    
   5  0.603382     -0.505205      -48.2003       48.2003       305.147       353.347    
   6  0.478412     -0.737283      -70.3424       70.3424       284.323       354.666    
   7  0.809657     -0.211144      -20.1448       20.1448       291.059       311.203    
   8  0.764585     -0.268422      -25.6095       25.6095       300.437       326.046    
   9  0.228600      -1.47578      -140.801       140.801       275.738       416.539    
  10  0.495526     -0.702136      -66.9890       66.9890       290.928       357.917    
  11  0.368264     -0.998954      -95.3078       95.3078       314.940       410.248    
  12  0.407647     -0.897355      -85.6144       85.6144       278.834       364.448    
  13  0.316165      -1.15149      -109.861       109.861       319.806       429.667    
  14  0.458518     -0.779756      -74.3946       74.3946       318.025       392.420    
  15  0.643610     -0.440663      -42.0426       42.0426       314.057       356.099    
  16  0.316553E-01  -3.45285      -329.428       329.428       317.674       647.102    
  17  0.570171     -0.561819      -53.6018       53.6018       325.264       378.866    
  18  0.448642E-01  -3.10412      -296.156       296.156       317.896       614.052    
  19  0.128957      -2.04828      -195.421       195.421       277.109       472.530    
  20  0.159422      -1.83620      -175.188       175.188       313.807       488.995    
  21  0.154083      -1.87026      -178.437       178.437       283.393       461.830    
  22  0.696997     -0.360974      -34.4396       34.4396       311.882       346.322    
  23  0.579421     -0.545727      -52.0665       52.0665       257.925       309.992    
  24  0.528206     -0.638269      -60.8957       60.8957       318.052       378.948    
  25  0.322914      -1.13037      -107.846       107.846       322.677       430.522    
  26  0.369562     -0.995437      -94.9722       94.9722       282.662       377.634    
  27  0.134248      -2.00806      -191.585       191.585       304.193       495.777    
  28  0.950150     -0.511358E-01  -4.87874       4.87874       318.942       323.821    
  29  0.138040      -1.98021      -188.927       188.927       256.750       445.677    
  30  0.316838      -1.14936      -109.658       109.658       313.757       423.415    
  31  0.151783      -1.88530      -179.872       179.872       281.545       461.417    
  32  0.338674      -1.08272      -103.299       103.299       313.360       416.659    
  33  0.814165     -0.205592      -19.6151       19.6151       333.837       353.452    
  34  0.578183     -0.547865      -52.2704       52.2704       308.952       361.222    
  35  0.208707      -1.56682      -149.487       149.487       326.468       475.955    
  36  0.540561     -0.615147      -58.6897       58.6897       312.134       370.823    
  37  0.910129     -0.941686E-01  -8.98440       8.98440       318.381       327.365    
  38  0.907740     -0.967972E-01  -9.23518       9.23518       288.946       298.181    
  39  0.549661     -0.598453      -57.0970       57.0970       319.594       376.691    
  40  0.193889      -1.64047      -156.513       156.513       313.152       469.665    
  41  0.807651     -0.213625      -20.3815       20.3815       278.568       298.949    
  42  0.613777     -0.488124      -46.5707       46.5707       317.711       364.281    
  43  0.664452     -0.408793      -39.0019       39.0019       269.945       308.947    
  44  0.584630     -0.536776      -51.2124       51.2124       344.821       396.033    
  45  0.618915     -0.479787      -45.7753       45.7753       319.172       364.948    
  46  0.542097     -0.612311      -58.4191       58.4191       315.769       374.188    
  47  0.133641      -2.01260      -192.017       192.017       282.959       474.976    
  48  0.479627     -0.734747      -70.1004       70.1004       332.461       402.562    
  49  0.225939      -1.48749      -141.918       141.918       276.452       418.370    
  50  0.324869      -1.12433      -107.270       107.270       315.864       423.134    
  51  0.669051     -0.401895      -38.3439       38.3439       411.198       449.542    
  52  0.602039     -0.507434      -48.4130       48.4130       272.208       320.621    
  53  0.143076      -1.94438      -185.509       185.509       294.012       479.521    
  54  0.897604     -0.108026      -10.3065       10.3065       255.057       265.364    
  55  0.165810      -1.79691      -171.439       171.439       440.362       611.801    
  56  0.468567     -0.758077      -72.3263       72.3263       319.053       391.379    
  57  0.641740     -0.443572      -42.3201       42.3201       319.358       361.678    
  58  0.904980     -0.998426E-01  -9.52574       9.52574       316.952       326.478    
  59  0.674132     -0.394330      -37.6220       37.6220       318.008       355.630    
  60  0.756363     -0.279234      -26.6410       26.6410       325.716       352.357    
  61  0.113892      -2.17251      -207.274       207.274       325.871       533.145    
  62  0.835916     -0.179227      -17.0996       17.0996       354.393       371.493    
  63  0.284183      -1.25814      -120.036       120.036       317.736       437.772    
  64  0.276674      -1.28492      -122.591       122.591       310.888       433.479    
  65  0.686678     -0.375890      -35.8627       35.8627       317.931       353.794    
  66  0.567044     -0.567318      -54.1264       54.1264       316.943       371.070    
  67  0.416554     -0.875738      -83.5520       83.5520       329.961       413.513    
  68  0.810149     -0.210537      -20.0868       20.0868       361.180       381.266    
  69  0.979175     -0.210445E-01  -2.00781       2.00781       290.274       292.282    
  70  0.334686      -1.09456      -104.430       104.430       472.270       576.700    
  71  0.331108      -1.10531      -105.455       105.455       507.193       612.648    
  72  0.734322     -0.308808      -29.4626       29.4626       320.091       349.554    
  73  0.958186E-01  -2.34530      -223.759       223.759       310.973       534.732    
  74  0.473076     -0.748500      -71.4125       71.4125       318.671       390.083    
  75  0.683967     -0.379846      -36.2401       36.2401       548.325       584.566    
  76  0.188645      -1.66789      -159.129       159.129       318.025       477.154    
  77  0.275449      -1.28935      -123.014       123.014       319.305       442.319    
  78  0.606250     -0.500462      -47.7479       47.7479       541.219       588.967    
  79  0.597631     -0.514782      -49.1141       49.1141       297.424       346.538    
loop,thermsimp(1:2)       42   275.103       35.6081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        271.79         87.54          1.16         40.16          0.54          0.05        129.45
Just calling func    0   0        129.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156        255.80         87.39          1.15         40.25          0.76          0.05        129.60
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    255.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       42
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       43
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      155     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -22.6588       22.6588       255.057       277.716    
   2  0.796559     -0.227454      -21.7008       21.7008       290.274       311.975    
   3  0.784232     -0.243051      -23.1889       23.1889       288.946       312.135    
   4  0.503549     -0.686074      -65.4566       65.4566       278.568       344.024    
   5  0.468337     -0.758566      -72.3729       72.3729       270.037       342.410    
   6  0.198518      -1.61688      -154.262       154.262       269.945       424.207    
   7  0.857529     -0.153700      -14.6641       14.6641       257.925       272.590    
   8  0.845427     -0.167913      -16.0202       16.0202       291.059       307.079    
   9  0.710919     -0.341197      -32.5528       32.5528       272.208       304.760    
  10  0.934107     -0.681640E-01  -6.50336       6.50336       318.942       325.445    
  11  0.565087     -0.570775      -54.4563       54.4563       300.437       354.893    
  12  0.147377      -1.91476      -182.683       182.683       316.952       499.634    
  13  0.471965     -0.750851      -71.6369       71.6369       318.381       390.018    
  14  0.287319      -1.24716      -118.989       118.989       277.887       396.876    
  15  0.526906     -0.640733      -61.1308       61.1308       287.140       348.271    
  16  0.176999      -1.73161      -165.209       165.209       311.882       477.091    
  17  0.868579     -0.140897      -13.4426       13.4426       297.424       310.866    
  18  0.621282     -0.475971      -45.4112       45.4112       320.091       365.502    
  19  0.181881      -1.70440      -162.613       162.613       325.716       488.329    
  20  0.565209     -0.570560      -54.4358       54.4358       305.147       359.583    
  21  0.927617     -0.751364E-01  -7.16858       7.16858       333.837       341.006    
  22  0.296120      -1.21699      -116.110       116.110       317.931       434.041    
  23  0.152389      -1.88132      -179.492       179.492       284.323       463.815    
  24  0.508731     -0.675835      -64.4798       64.4798       318.008       382.488    
  25  0.389654     -0.942496      -89.9212       89.9212       314.057       403.978    
  26  0.770754     -0.260386      -24.8428       24.8428       290.928       315.770    
  27  0.144347      -1.93554      -184.665       184.665       308.952       493.617    
  28  0.690124     -0.370884      -35.3852       35.3852       319.358       354.743    
  29  0.882429     -0.125077      -11.9333       11.9333       317.711       329.644    
  30  0.781105     -0.247045      -23.5700       23.5700       278.834       302.404    
  31  0.331946      -1.10278      -105.214       105.214       319.172       424.386    
  32  0.157011      -1.85144      -176.641       176.641       312.134       488.775    
  33  0.734200     -0.308973      -29.4784       29.4784       316.943       346.422    
  34  0.563390     -0.573784      -54.7433       54.7433       354.393       409.137    
  35  0.349498      -1.05126      -100.298       100.298       315.769       416.067    
  36  0.256822      -1.35937      -129.694       129.694       319.594       449.288    
  37  0.563556     -0.573488      -54.7151       54.7151       282.662       337.377    
  38  0.945419E-01  -2.35871      -225.039       225.039       325.264       550.303    
  39  0.571450     -0.559577      -53.3879       53.3879       318.052       371.440    
  40  0.583029E-01  -2.84210      -271.158       271.158       361.180       632.338    
  41  0.428808     -0.846746      -80.7860       80.7860       318.671       399.457    
  42  0.628450     -0.464499      -44.3167       44.3167       319.053       363.370    
  43  0.152789      -1.87869      -179.242       179.242       318.025       497.267    
  44  0.787004E-01  -2.54211      -242.536       242.536       344.821       587.357    
  45  0.170927E-01  -4.06911      -388.223       388.223       332.461       720.685    
  46  0.531078     -0.632847      -60.3784       60.3784       314.940       375.318    
  47  0.206082E-01  -3.88206      -370.378       370.378       329.961       700.340    
  48  0.909565     -0.947891E-01  -9.04359       9.04359       275.738       284.782    
  49  0.456291     -0.784625      -74.8591       74.8591       313.360       388.219    
  50  0.997425E-02  -4.60775      -439.614       439.614       276.452       716.066    
  51  0.251070      -1.38202      -131.855       131.855       315.864       447.720    
  52  0.548517     -0.600536      -57.2957       57.2957       313.757       371.053    
  53  0.210242      -1.55950      -148.788       148.788       319.806       468.594    
  54  0.848361     -0.164449      -15.6897       15.6897       322.677       338.366    
  55  0.160491E-01  -4.13210      -394.234       394.234       310.888       705.122    
  56  0.407967     -0.896570      -85.5396       85.5396       317.736       403.276    
  57  0.859929     -0.150905      -14.3975       14.3975       319.305       333.703    
  58  0.406052     -0.901274      -85.9884       85.9884       256.750       342.738    
  59  0.743169     -0.296832      -28.3200       28.3200       411.198       439.518    
  60  0.434823     -0.832817      -79.4570       79.4570       281.545       361.002    
  61  0.559897     -0.580003      -55.3366       55.3366       283.393       338.730    
  62  0.277128      -1.28328      -122.434       122.434       313.152       435.586    
  63  0.839691     -0.174721      -16.6697       16.6697       277.109       293.779    
  64  0.641867     -0.443375      -42.3013       42.3013       282.959       325.260    
  65  0.309074      -1.17417      -112.025       112.025       326.468       438.493    
  66  0.552351     -0.593572      -56.6312       56.6312       318.025       374.656    
  67  0.764824     -0.268109      -25.5797       25.5797       294.012       319.592    
  68  0.857070     -0.154235      -14.7152       14.7152       313.807       328.522    
  69  0.650112     -0.430610      -41.0834       41.0834       304.193       345.276    
  70  0.128926      -2.04851      -195.444       195.444       325.871       521.315    
  71  0.370422     -0.993113      -94.7505       94.7505       310.973       405.724    
  72  0.795676     -0.228564      -21.8067       21.8067       262.089       283.895    
  73  0.365230      -1.00723      -96.0972       96.0972       472.270       568.367    
  74  0.610005     -0.494288      -47.1588       47.1588       548.325       595.484    
  75  0.425864E-01  -3.15622      -301.127       301.127       541.219       842.346    
  76  0.994108     -0.590907E-02 -0.563770      0.563770       440.362       440.926    
  77  0.978719     -0.215110E-01  -2.05232       2.05232       507.193       509.245    
  78  0.332589      -1.10085      -105.029       105.029       317.896       422.925    
  79  0.995688     -0.432150E-02 -0.412304      0.412304       255.802       256.214    
loop,thermsimp(1:2)       43   22.6588       21.7008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        381.60         87.33          1.11         39.78          1.23          0.05        129.50
Just calling func    0   0        129.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    381.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       43
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       44
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      156     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -215.041       215.041       255.802       470.843    
   2  0.780131E-01  -2.55088      -243.373       243.373       257.925       501.298    
   3  0.723689     -0.323394      -30.8542       30.8542       255.057       285.911    
   4  0.439896     -0.821218      -78.3504       78.3504       262.089       340.439    
   5  0.967364     -0.331803E-01  -3.16565       3.16565       275.738       278.904    
   6  0.235884      -1.44441      -137.808       137.808       277.109       414.917    
   7  0.311956      -1.16489      -111.140       111.140       278.834       389.973    
   8  0.600573     -0.509870      -48.6455       48.6455       272.208       320.853    
   9  0.781739     -0.246234      -23.4926       23.4926       291.059       314.551    
  10  0.505036     -0.683126      -65.1753       65.1753       297.424       362.599    
  11  0.896130     -0.109670      -10.4634       10.4634       290.274       300.737    
  12  0.545040     -0.606897      -57.9025       57.9025       288.946       346.848    
  13  0.338019      -1.08465      -103.484       103.484       290.928       394.412    
  14  0.200467      -1.60711      -153.330       153.330       294.012       447.342    
  15  0.548763     -0.600089      -57.2530       57.2530       282.959       340.212    
  16  0.897241     -0.108431      -10.3451       10.3451       318.942       329.287    
  17  0.229905      -1.47009      -140.258       140.258       313.807       454.065    
  18  0.387828     -0.947193      -90.3694       90.3694       317.711       408.080    
  19  0.789400     -0.236482      -22.5622       22.5622       319.305       341.867    
  20  0.495667     -0.701851      -66.9619       66.9619       282.662       349.624    
  21  0.818926     -0.199761      -19.0587       19.0587       322.677       341.735    
  22  0.181319      -1.70750      -162.908       162.908       283.393       446.301    
  23  0.901986     -0.103156      -9.84190       9.84190       333.837       343.679    
  24  0.933790E-01  -2.37109      -226.220       226.220       270.037       496.257    
  25  0.171523      -1.76304      -168.207       168.207       256.750       424.957    
  26  0.648450     -0.433170      -41.3277       41.3277       278.568       319.895    
  27  0.777448     -0.251739      -24.0178       24.0178       304.193       328.211    
  28  0.777670     -0.251453      -23.9905       23.9905       316.943       340.934    
  29  0.972420     -0.279672E-01  -2.66829       2.66829       287.140       289.808    
  30  0.825305     -0.192002      -18.3184       18.3184       319.358       337.676    
  31  0.470649     -0.753642      -71.9031       71.9031       300.437       372.340    
  32  0.263953      -1.33198      -127.081       127.081       305.147       432.228    
  33  0.857551     -0.153675      -14.6618       14.6618       281.545       296.207    
  34  0.950157     -0.511279E-01  -4.87798       4.87798       319.053       323.931    
  35  0.866482     -0.143314      -13.6732       13.6732       320.091       333.764    
  36  0.904889     -0.999433E-01  -9.53535       9.53535       313.757       323.293    
  37  0.297565      -1.21212      -115.646       115.646       318.052       433.698    
  38  0.902696     -0.102369      -9.76680       9.76680       318.025       327.792    
  39  0.800054     -0.223076      -21.2832       21.2832       314.940       336.223    
  40  0.534162     -0.627057      -59.8259       59.8259       318.008       377.834    
  41  0.593018     -0.522530      -49.8533       49.8533       313.360       363.213    
  42  0.682417E-01  -2.68470      -256.141       256.141       318.381       574.522    
  43  0.336048      -1.09050      -104.042       104.042       277.887       381.929    
  44  0.576540     -0.550710      -52.5419       52.5419       318.671       371.213    
  45  0.217955      -1.52347      -145.350       145.350       317.736       463.086    
  46  0.281607      -1.26724      -120.904       120.904       314.057       434.961    
  47  0.306631      -1.18211      -112.782       112.782       310.973       423.755    
  48  0.676335E-01  -2.69365      -256.995       256.995       354.393       611.388    
  49  0.145631      -1.92668      -183.820       183.820       315.769       499.589    
  50  0.820952     -0.197291      -18.8230       18.8230       317.896       336.719    
  51  0.224137      -1.49550      -142.682       142.682       269.945       412.627    
  52  0.738282     -0.303430      -28.9495       28.9495       319.172       348.122    
  53  0.364089      -1.01036      -96.3956       96.3956       317.931       414.327    
  54  0.321068      -1.13610      -108.393       108.393       313.152       421.545    
  55  0.179504      -1.71756      -163.868       163.868       326.468       490.336    
  56  0.808596     -0.212456      -20.2699       20.2699       411.198       431.468    
  57  0.974692     -0.256343E-01  -2.44570       2.44570       440.362       442.808    
  58  0.559434     -0.580830      -55.4155       55.4155       315.864       371.280    
  59  0.443035E-01  -3.11669      -297.356       297.356       319.594       616.950    
  60  0.711672     -0.340139      -32.4518       32.4518       284.323       316.775    
  61  0.578255     -0.547741      -52.2586       52.2586       319.806       372.065    
  62  0.102770      -2.27527      -217.078       217.078       311.882       528.959    
  63  0.813100     -0.206901      -19.7399       19.7399       325.716       345.456    
  64  0.612419     -0.490339      -46.7821       46.7821       312.134       358.916    
  65  0.406120     -0.901107      -85.9724       85.9724       308.952       394.924    
  66  0.255858      -1.36313      -130.053       130.053       318.025       448.078    
  67  0.622680     -0.473723      -45.1967       45.1967       316.952       362.149    
  68  0.428339     -0.847839      -80.8903       80.8903       507.193       588.083    
  69  0.594560     -0.519934      -49.6056       49.6056       325.871       375.477    
  70  0.921341     -0.819246E-01  -7.81623       7.81623       325.264       333.080    
  71  0.152539      -1.88033      -179.398       179.398       472.270       651.668    
  72  0.539176     -0.617712      -58.9344       58.9344       344.821       403.755    
  73  0.179134      -1.71962      -164.065       164.065       548.325       712.390    
  74  0.815719     -0.203686      -19.4331       19.4331       361.180       380.613    
  75  0.909487     -0.948748E-01  -9.05177       9.05177       329.961       339.013    
  76  0.530225     -0.634455      -60.5318       60.5318       310.888       371.420    
  77  0.829116     -0.187396      -17.8790       17.8790       276.452       294.331    
  78  0.861249     -0.149372      -14.2512       14.2512       332.461       346.713    
  79  0.925152     -0.777971E-01  -7.42243       7.42243       381.601       389.023    
loop,thermsimp(1:2)       44   215.041       243.373    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158        269.43         87.42          1.15         40.26          0.68          0.05        129.57
Just calling func    0   0        129.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159        279.45         87.26          1.14         39.97          0.92          0.05        129.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    269.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    95.4076               157
loop is:       44
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    95.4076               157
loop is:       45
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    47.7038               235

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      158     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -6.50018       6.50018       275.738       282.239    
   2  0.990306     -0.974175E-02 -0.464718      0.464718       255.057       255.522    
   3  0.488656     -0.716096      -34.1605       34.1605       287.140       321.300    
   4  0.865115E-01  -2.44748      -116.754       116.754       276.452       393.206    
   5  0.234262      -1.45132      -69.2333       69.2333       281.545       350.778    
   6  0.906541     -0.981186E-01  -4.68063       4.68063       290.274       294.955    
   7  0.680454     -0.384995      -18.3657       18.3657       291.059       309.424    
   8  0.575574     -0.552388      -26.3510       26.3510       284.323       310.674    
   9  0.537443E-02  -5.22610      -249.305       249.305       278.568       527.872    
  10  0.421676     -0.863518      -41.1931       41.1931       272.208       313.401    
  11  0.297588      -1.21204      -57.8191       57.8191       313.757       371.576    
  12  0.119337      -2.12581      -101.409       101.409       319.053       420.462    
  13  0.958276     -0.426192E-01  -2.03310       2.03310       318.025       320.058    
  14  0.115549      -2.15806      -102.947       102.947       304.193       407.140    
  15  0.104220      -2.26125      -107.870       107.870       318.942       426.812    
  16  0.719503     -0.329194      -15.7038       15.7038       325.264       340.967    
  17  0.875656     -0.132782      -6.33419       6.33419       320.091       326.425    
  18  0.578760     -0.546868      -26.0877       26.0877       314.940       341.028    
  19  0.923704     -0.793639E-01  -3.78596       3.78596       317.896       321.682    
  20  0.457980     -0.780930      -37.2533       37.2533       319.358       356.611    
  21  0.783173     -0.244401      -11.6589       11.6589       329.961       341.620    
  22  0.764479     -0.268561      -12.8114       12.8114       282.959       295.770    
  23  0.496891     -0.699384      -33.3633       33.3633       262.089       295.452    
  24  0.554859     -0.589041      -28.0995       28.0995       316.943       345.043    
  25  0.734503E-02  -4.91373      -234.404       234.404       322.677       557.080    
  26  0.117643      -2.14010      -102.091       102.091       319.305       421.396    
  27  0.145440      -1.92799      -91.9725       91.9725       333.837       425.810    
  28  0.375449     -0.979633      -46.7322       46.7322       325.716       372.448    
  29  0.954324E-01  -2.34934      -112.072       112.072       332.461       444.534    
  30  0.449085     -0.800543      -38.1889       38.1889       288.946       327.135    
  31  0.354483      -1.03709      -49.4733       49.4733       319.172       368.646    
  32  0.153971      -1.87099      -89.2533       89.2533       282.662       371.915    
  33  0.871598     -0.137427      -6.55577       6.55577       312.134       318.689    
  34  0.633061     -0.457188      -21.8096       21.8096       316.952       338.761    
  35  0.947022E-01  -2.35702      -112.439       112.439       297.424       409.862    
  36  0.793812     -0.230909      -11.0152       11.0152       313.360       324.375    
  37  0.760585     -0.273667      -13.0550       13.0550       318.671       331.726    
  38  0.124312      -2.08496      -99.4606       99.4606       315.864       415.325    
  39  0.961605E-03  -6.94691      -331.394       331.394       310.888       642.282    
  40  0.672529     -0.396710      -18.9246       18.9246       319.806       338.731    
  41  0.749847E-01  -2.59047      -123.575       123.575       300.437       424.012    
  42  0.982441     -0.177147E-01 -0.845059      0.845059       325.871       326.716    
  43  0.340727      -1.07667      -51.3614       51.3614       318.008       369.370    
  44  0.915043     -0.887846E-01  -4.23536       4.23536       361.180       365.415    
  45  0.150614      -1.89303      -90.3049       90.3049       277.887       368.192    
  46  0.892785     -0.113409      -5.41004       5.41004       381.601       387.011    
  47  0.844073     -0.169516      -8.08654       8.08654       278.834       286.920    
  48  0.469949     -0.755131      -36.0226       36.0226       290.928       326.950    
  49  0.389072     -0.943991      -45.0320       45.0320       308.952       353.984    
  50  0.738049     -0.303745      -14.4898       14.4898       344.821       359.311    
  51  0.250173      -1.38560      -66.0985       66.0985       317.711       383.809    
  52  0.383245     -0.959081      -45.7518       45.7518       269.945       315.697    
  53  0.384434     -0.955983      -45.6040       45.6040       317.931       363.535    
  54  0.479018E-01  -3.03860      -144.953       144.953       277.109       422.062    
  55  0.819285     -0.199323      -9.50848       9.50848       313.152       322.661    
  56  0.568165     -0.565344      -26.9690       26.9690       310.973       337.942    
  57  0.918732     -0.847606E-01  -4.04340       4.04340       256.750       260.794    
  58  0.374258     -0.982809      -46.8837       46.8837       411.198       458.082    
  59  0.966524     -0.340496E-01  -1.62430       1.62430       305.147       306.771    
  60  0.505261     -0.682680      -32.5664       32.5664       318.052       350.619    
  61  0.283819      -1.25942      -60.0790       60.0790       314.057       374.136    
  62  0.448920     -0.800911      -38.2065       38.2065       440.362       478.569    
  63  0.398648     -0.919676      -43.8720       43.8720       283.393       327.265    
  64  0.625742     -0.468817      -22.3644       22.3644       294.012       316.376    
  65  0.924606     -0.783881E-01  -3.73941       3.73941       318.025       321.765    
  66  0.546966     -0.603368      -28.7829       28.7829       313.807       342.590    
  67  0.372518     -0.987471      -47.1061       47.1061       317.736       364.842    
  68  0.167437      -1.78715      -85.2537       85.2537       255.802       341.055    
  69  0.142610      -1.94764      -92.9098       92.9098       326.468       419.378    
  70  0.935319     -0.668675E-01  -3.18983       3.18983       270.037       273.227    
  71  0.100396      -2.29864      -109.654       109.654       315.769       425.423    
  72  0.179415E-01  -4.02064      -191.800       191.800       257.925       449.725    
  73  0.733830     -0.309478      -14.7633       14.7633       311.882       326.645    
  74  0.730276E-01  -2.61692      -124.837       124.837       318.381       443.218    
  75  0.351871      -1.04449      -49.8261       49.8261       507.193       557.019    
  76  0.520741     -0.652502      -31.1268       31.1268       354.393       385.520    
  77  0.307644E-01  -3.48140      -166.076       166.076       319.594       485.670    
  78  0.356758      -1.03070      -49.1681       49.1681       472.270       521.438    
  79  0.888827     -0.117852      -5.62201       5.62201       269.425       275.047    
loop,thermsimp(1:2)       45   6.50018      0.464718    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160        267.81         87.45          1.14         40.21          0.71          0.05        129.57
Just calling func    0   0        129.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161        254.57         87.45          1.13         40.11          0.71          0.05        129.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    254.57        1.487     -1.415      6.220     -102.6     0.8141    
                     -0.3806      4.075     -99.70      3.783     0.7788    
                       1.663     -1.496      1.493      8101.     -2.482    
                      -1.071      0.000      0.000      0.000     -1.221    

                      -2.500     0.5247E+05 0.4285E+05 -4293.    -0.8856E+05
                      -2.221     -6.220     -4.699     -7.108      3.186    
                      -14.09     -3.060      1158.      0.000      5185.    

                       6398.      6044.      6290.     0.1169E+05  1871.    
                       2580.     0.1035    -0.7707E-01  0.000    -0.4547    
                     -0.6768E-01-0.1228    -0.1285    -0.2149     0.1127E-01

                      -1.590    -0.2164E-01  0.000    -0.4945E-01 0.2602E-01
                      0.8541E-01 0.7224E-01 0.1087E-01-0.3791    -0.1491    
                     -0.9005E-02-0.3194E-01-0.6269E-01-0.3251      0.000    

                      -1.987     -1.490     0.9981     0.8488    -0.3991    
                      0.1512      9.250      9.169    -0.1076E+05 -2.302    
                     -0.7499    -0.5967      9.378      8.593    -0.1000E+05

                      -1.304     0.1084E-01-0.7308      8.798      9.073    
                     -0.1000E+05 -2.302    -0.5393    -0.5490      10.16    
                       8.418    -0.1000E+05 -2.302    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    254.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       45
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       46
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      160     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -115.910       115.910       255.057       370.967    
   2  0.312747      -1.16236      -55.4490       55.4490       256.750       312.199    
   3  0.317683      -1.14670      -54.7019       54.7019       270.037       324.739    
   4  0.693053     -0.366649      -17.4905       17.4905       269.425       286.916    
   5  0.361881      -1.01644      -48.4880       48.4880       275.738       324.226    
   6  0.127478      -2.05981      -98.2607       98.2607       278.834       377.094    
   7  0.718706     -0.330302      -15.7567       15.7567       290.274       306.031    
   8  0.609419E-01  -2.79783      -133.467       133.467       262.089       395.556    
   9  0.320798      -1.13695      -54.2366       54.2366       282.959       337.196    
  10  0.343503      -1.06856      -50.9743       50.9743       305.147       356.121    
  11  0.671828     -0.397753      -18.9743       18.9743       291.059       310.033    
  12  0.616702     -0.483369      -23.0585       23.0585       284.323       307.382    
  13  0.806358E-01  -2.51781      -120.109       120.109       272.208       392.317    
  14  0.997284     -0.271972E-02 -0.129741      0.129741       269.945       270.075    
  15  0.554344     -0.589969      -28.1438       28.1438       294.012       322.156    
  16  0.411057     -0.889023      -42.4097       42.4097       312.134       354.543    
  17  0.846258E-01  -2.46952      -117.805       117.805       318.025       435.830    
  18  0.737439     -0.304571      -14.5292       14.5292       287.140       301.669    
  19  0.393790     -0.931939      -44.4570       44.4570       317.896       362.353    
  20  0.965947     -0.346467E-01  -1.65278       1.65278       318.025       319.678    
  21  0.150166      -1.89601      -90.4470       90.4470       313.152       403.599    
  22  0.212005      -1.55114      -73.9955       73.9955       313.360       387.355    
  23  0.615060     -0.486036      -23.1858       23.1858       320.091       343.277    
  24  0.382142     -0.961962      -45.8892       45.8892       311.882       357.771    
  25  0.249044      -1.39013      -66.3143       66.3143       325.871       392.185    
  26  0.245943      -1.40266      -66.9120       66.9120       290.928       357.840    
  27  0.108882      -2.21749      -105.783       105.783       288.946       394.729    
  28  0.199835      -1.61026      -76.8157       76.8157       283.393       360.209    
  29  0.863954     -0.146235      -6.97599       6.97599       318.671       325.647    
  30  0.392842     -0.934347      -44.5719       44.5719       310.973       355.545    
  31  0.770596     -0.260592      -12.4312       12.4312       319.806       332.238    
  32  0.149868      -1.89800      -90.5419       90.5419       316.952       407.494    
  33  0.234154      -1.45178      -69.2552       69.2552       325.264       394.519    
  34  0.611512     -0.491821      -23.4617       23.4617       314.940       338.402    
  35  0.518093E-01  -2.96019      -141.212       141.212       255.802       397.014    
  36  0.567953     -0.565716      -26.9868       26.9868       329.961       356.948    
  37  0.190847      -1.65628      -79.0110       79.0110       313.807       392.818    
  38  0.104561      -2.25798      -107.714       107.714       316.943       424.657    
  39  0.135276      -2.00044      -95.4284       95.4284       318.052       413.481    
  40  0.262364      -1.33802      -63.8288       63.8288       281.545       345.374    
  41  0.463951     -0.767976      -36.6354       36.6354       308.952       345.587    
  42  0.419672     -0.868282      -41.4203       41.4203       319.358       360.778    
  43  0.897011     -0.108687      -5.18477       5.18477       344.821       350.006    
  44  0.818933     -0.199754      -9.52900       9.52900       317.931       327.460    
  45  0.136906      -1.98846      -94.8573       94.8573       317.736       412.593    
  46  0.561722     -0.576748      -27.5130       27.5130       361.180       388.693    
  47  0.991681     -0.835368E-02 -0.398502      0.398502       277.887       278.286    
  48  0.653388     -0.425585      -20.3020       20.3020       319.172       339.474    
  49  0.578557     -0.547219      -26.1044       26.1044       318.008       344.113    
  50  0.784121     -0.243191      -11.6012       11.6012       313.757       325.358    
  51  0.827307     -0.189579      -9.04364       9.04364       282.662       291.705    
  52  0.994261     -0.575522E-02 -0.274546      0.274546       325.716       325.990    
  53  0.274030      -1.29452      -61.7534       61.7534       314.057       375.810    
  54  0.879777     -0.128087      -6.11021       6.11021       317.711       323.821    
  55  0.694576E-01  -2.66704      -127.228       127.228       354.393       481.621    
  56  0.431517E-01  -3.14303      -149.935       149.935       381.601       531.535    
  57  0.620633     -0.477015      -22.7554       22.7554       276.452       299.208    
  58  0.166702      -1.79155      -85.4637       85.4637       304.193       389.656    
  59  0.785136E-01  -2.54448      -121.381       121.381       297.424       418.805    
  60  0.440162     -0.820613      -39.1464       39.1464       315.864       355.011    
  61  0.924092     -0.789432E-01  -3.76589       3.76589       326.468       330.234    
  62  0.957397     -0.435372E-01  -2.07689       2.07689       319.053       321.130    
  63  0.817312     -0.201734      -9.62347       9.62347       319.305       328.929    
  64  0.345978      -1.06138      -50.6318       50.6318       277.109       327.741    
  65  0.814305E-02  -4.81059      -229.483       229.483       300.437       529.920    
  66  0.961102     -0.396751E-01  -1.89265       1.89265       315.769       317.662    
  67  0.918841E-01  -2.38723      -113.880       113.880       333.837       447.717    
  68  0.875898     -0.132506      -6.32102       6.32102       318.942       325.263    
  69  0.884301     -0.122958      -5.86556       5.86556       318.381       324.247    
  70  0.822040E-01  -2.49855      -119.190       119.190       332.461       451.652    
  71  0.674949     -0.393119      -18.7532       18.7532       257.925       276.679    
  72  0.890073     -0.116452      -5.55518       5.55518       411.198       416.753    
  73  0.102417      -2.27870      -108.703       108.703       440.362       549.065    
  74  0.704459     -0.350326      -16.7119       16.7119       319.594       336.306    
  75  0.265524      -1.32605      -63.2576       63.2576       472.270       535.528    
  76  0.127241      -2.06167      -98.3495       98.3495       278.568       376.917    
  77  0.530364     -0.634191      -30.2533       30.2533       507.193       537.446    
  78  0.858080     -0.153058      -7.30146       7.30146       322.677       329.978    
  79  0.726562     -0.319432      -15.2381       15.2381       254.566       269.804    
loop,thermsimp(1:2)       46   115.910       55.4490    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162        461.43         87.19          1.12         40.10          0.91          0.05        129.37
Just calling func    0   0        129.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    461.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       46
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       47
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      161     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -151.329       151.329       254.566       405.895    
   2  0.581082     -0.542864      -25.8967       25.8967       269.945       295.842    
   3  0.690143     -0.370857      -17.6913       17.6913       257.925       275.617    
   4  0.958690     -0.421877E-01  -2.01251       2.01251       277.887       279.900    
   5  0.947492     -0.539367E-01  -2.57299       2.57299       269.425       271.998    
   6  0.253816E-01  -3.67373      -175.251       175.251       282.662       457.913    
   7  0.811950     -0.208316      -9.93746       9.93746       276.452       286.390    
   8  0.448512     -0.801821      -38.2499       38.2499       287.140       325.390    
   9  0.625244     -0.469613      -22.4023       22.4023       290.274       312.676    
  10  0.557627     -0.584065      -27.8621       27.8621       284.323       312.185    
  11  0.762657     -0.270947      -12.9252       12.9252       291.059       303.984    
  12  0.579328     -0.545887      -26.0409       26.0409       256.750       282.791    
  13  0.168395      -1.78144      -84.9816       84.9816       315.769       400.751    
  14  0.993282     -0.674111E-02 -0.321576      0.321576       318.025       318.347    
  15  0.573458     -0.556070      -26.5267       26.5267       319.053       345.580    
  16  0.900456     -0.104854      -5.00191       5.00191       294.012       299.014    
  17  0.961937     -0.388068E-01  -1.85123       1.85123       317.711       319.562    
  18  0.685702     -0.377312      -17.9992       17.9992       275.738       293.738    
  19  0.335644      -1.09171      -52.0785       52.0785       318.381       370.460    
  20  0.726392     -0.319666      -15.2493       15.2493       270.037       285.286    
  21  0.523515     -0.647189      -30.8734       30.8734       318.942       349.815    
  22  0.877914     -0.130206      -6.21134       6.21134       313.757       319.969    
  23  0.893563     -0.112539      -5.36853       5.36853       318.671       324.039    
  24  0.829449     -0.186994      -8.92033       8.92033       325.716       334.636    
  25  0.454457     -0.788653      -37.6217       37.6217       317.931       355.553    
  26  0.261407      -1.34168      -64.0030       64.0030       277.109       341.112    
  27  0.144225      -1.93638      -92.3728       92.3728       319.305       411.678    
  28  0.963744     -0.369299E-01  -1.76169       1.76169       322.677       324.438    
  29  0.267843      -1.31735      -62.8428       62.8428       326.468       389.311    
  30  0.251943E-01  -3.68114      -175.604       175.604       319.806       495.411    
  31  0.321532      -1.13466      -54.1275       54.1275       319.594       373.721    
  32  0.440903     -0.818930      -39.0661       39.0661       282.959       322.025    
  33  0.214416      -1.53984      -73.4561       73.4561       314.940       388.396    
  34  0.212185      -1.55030      -73.9551       73.9551       319.172       393.127    
  35  0.948253E-01  -2.35572      -112.377       112.377       320.091       432.468    
  36  0.507627     -0.678008      -32.3435       32.3435       318.008       350.352    
  37  0.415074     -0.879299      -41.9459       41.9459       281.545       323.491    
  38  0.768069     -0.263876      -12.5879       12.5879       308.952       321.540    
  39  0.462999E-01  -3.07261      -146.575       146.575       344.821       491.396    
  40  0.835390     -0.179856      -8.57983       8.57983       312.134       320.713    
  41  0.678734     -0.387526      -18.4865       18.4865       315.864       334.351    
  42  0.363569      -1.01179      -48.2660       48.2660       310.973       359.239    
  43  0.677161     -0.389846      -18.5971       18.5971       305.147       323.744    
  44  0.506668     -0.679899      -32.4338       32.4338       329.961       362.395    
  45  0.875658     -0.132779      -6.33407       6.33407       311.882       318.216    
  46  0.924863     -0.781102E-01  -3.72615       3.72615       290.928       294.654    
  47  0.794570E-01  -2.53254      -120.812       120.812       283.393       404.205    
  48  0.449212     -0.800261      -38.1755       38.1755       319.358       357.533    
  49  0.658987     -0.417051      -19.8949       19.8949       317.896       337.791    
  50  0.674357     -0.393995      -18.7951       18.7951       255.057       273.852    
  51  0.436334     -0.829348      -39.5630       39.5630       314.057       353.620    
  52  0.331871      -1.10301      -52.6176       52.6176       278.568       331.185    
  53  0.233029      -1.45659      -69.4851       69.4851       278.834       348.319    
  54  0.207666      -1.57183      -74.9820       74.9820       313.360       388.342    
  55  0.801765     -0.220940      -10.5397       10.5397       361.180       371.719    
  56  0.614336E-01  -2.78980      -133.084       133.084       304.193       437.277    
  57  0.167288      -1.78804      -85.2961       85.2961       325.871       411.167    
  58  0.718808     -0.330162      -15.7500       15.7500       272.208       287.958    
  59  0.981938     -0.182272E-01 -0.869507      0.869507       313.807       314.676    
  60  0.759328     -0.275322      -13.1339       13.1339       325.264       338.398    
  61  0.290749      -1.23530      -58.9283       58.9283       288.946       347.874    
  62  0.887200     -0.119685      -5.70943       5.70943       262.089       267.798    
  63  0.186280      -1.68051      -80.1665       80.1665       255.802       335.968    
  64  0.427708     -0.849315      -40.5155       40.5155       313.152       353.668    
  65  0.252777      -1.37525      -65.6045       65.6045       316.952       382.556    
  66  0.648648     -0.432865      -20.6493       20.6493       317.736       338.385    
  67  0.823358     -0.194364      -9.27192       9.27192       318.052       327.324    
  68  0.352572      -1.04250      -49.7312       49.7312       411.198       460.929    
  69  0.217910      -1.52367      -72.6849       72.6849       297.424       370.109    
  70  0.297394      -1.21270      -57.8503       57.8503       316.943       374.794    
  71  0.597449     -0.515086      -24.5715       24.5715       318.025       342.597    
  72  0.327024      -1.11772      -53.3195       53.3195       333.837       387.157    
  73  0.264314      -1.33062      -63.4755       63.4755       332.461       395.937    
  74  0.810025     -0.210691      -10.0507       10.0507       354.393       364.444    
  75  0.454229     -0.789155      -37.6457       37.6457       300.437       338.082    
  76  0.601353     -0.508574      -24.2609       24.2609       381.601       405.861    
  77  0.107316      -2.23198      -106.474       106.474       472.270       578.744    
  78  0.222481      -1.50291      -71.6946       71.6946       507.193       578.888    
  79  0.382722     -0.960445      -45.8169       45.8169       461.431       507.248    
loop,thermsimp(1:2)       47   151.329       25.8967    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163        424.87         87.23          1.14         40.38          0.56          0.05        129.36
Just calling func    0   0        129.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    424.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       47
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       48
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      162     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -27.0824       27.0824       262.089       289.171    
   2  0.216137      -1.53184      -73.0746       73.0746       269.425       342.500    
   3  0.476425     -0.741444      -35.3697       35.3697       255.057       290.427    
   4  0.184047      -1.69256      -80.7417       80.7417       257.925       338.667    
   5  0.722630     -0.324858      -15.4970       15.4970       277.887       293.384    
   6  0.887750     -0.119065      -5.67985       5.67985       256.750       262.430    
   7  0.236344      -1.44247      -68.8112       68.8112       270.037       338.848    
   8  0.798055     -0.225578      -10.7609       10.7609       276.452       287.213    
   9  0.425454     -0.854597      -40.7675       40.7675       272.208       312.975    
  10  0.605701     -0.501368      -23.9172       23.9172       275.738       299.656    
  11  0.742456     -0.297792      -14.2058       14.2058       290.928       305.133    
  12  0.378462E-01  -3.27423      -156.193       156.193       269.945       426.138    
  13  0.341910      -1.07321      -51.1961       51.1961       294.012       345.208    
  14  0.794971E-01  -2.53203      -120.788       120.788       291.059       411.846    
  15  0.586423     -0.533715      -25.4602       25.4602       284.323       309.784    
  16  0.990523     -0.952170E-02 -0.454221      0.454221       290.274       290.728    
  17  0.348475      -1.05419      -50.2887       50.2887       313.807       364.096    
  18  0.998034     -0.196755E-02 -0.938595E-01  0.938595E-01   311.882       311.976    
  19  0.616072     -0.484391      -23.1073       23.1073       318.025       341.132    
  20  0.427239     -0.850411      -40.5678       40.5678       317.711       358.278    
  21  0.598160     -0.513898      -24.5149       24.5149       313.757       338.272    
  22  0.642831     -0.441873      -21.0790       21.0790       312.134       333.213    
  23  0.392766     -0.934541      -44.5811       44.5811       308.952       353.533    
  24  0.738407     -0.303260      -14.4667       14.4667       282.959       297.426    
  25  0.334341      -1.09559      -52.2640       52.2640       281.545       333.809    
  26  0.997912     -0.208996E-02 -0.996988E-01  0.996988E-01   305.147       305.247    
  27  0.492305E-01  -3.01124      -143.648       143.648       318.671       462.318    
  28  0.304734      -1.18832      -56.6871       56.6871       322.677       379.364    
  29  0.159886      -1.83330      -87.4551       87.4551       287.140       374.595    
  30  0.991331     -0.870666E-02 -0.415340      0.415340       318.052       318.468    
  31  0.735164     -0.307662      -14.6767       14.6767       278.568       293.244    
  32  0.279948      -1.27315      -60.7341       60.7341       315.864       376.598    
  33  0.457260     -0.782502      -37.3283       37.3283       325.716       363.044    
  34  0.678170     -0.388358      -18.5261       18.5261       255.802       274.328    
  35  0.689603     -0.371639      -17.7286       17.7286       317.896       335.624    
  36  0.468470     -0.758283      -36.1730       36.1730       300.437       336.610    
  37  0.937429     -0.646141E-01  -3.08234       3.08234       317.736       320.819    
  38  0.115915      -2.15490      -102.797       102.797       325.264       428.061    
  39  0.125789      -2.07315      -98.8969       98.8969       277.109       376.006    
  40  0.137562      -1.98368      -94.6291       94.6291       318.025       412.654    
  41  0.273901      -1.29499      -61.7758       61.7758       319.053       380.829    
  42  0.934963     -0.672484E-01  -3.20800       3.20800       288.946       292.154    
  43  0.450296     -0.797850      -38.0604       38.0604       278.834       316.894    
  44  0.681645     -0.383246      -18.2823       18.2823       318.942       337.224    
  45  0.282914E-01  -3.56520      -170.073       170.073       318.008       488.082    
  46  0.962226     -0.385062E-01  -1.83689       1.83689       314.057       315.894    
  47  0.771412     -0.259533      -12.3807       12.3807       313.152       325.533    
  48  0.778208     -0.250761      -11.9623       11.9623       317.931       329.894    
  49  0.945686     -0.558450E-01  -2.66402       2.66402       319.358       322.022    
  50  0.648669     -0.432833      -20.6478       20.6478       310.973       331.621    
  51  0.214283      -1.54046      -73.4856       73.4856       329.961       403.447    
  52  0.692999     -0.366726      -17.4942       17.4942       354.393       371.888    
  53  0.966323     -0.342573E-01  -1.63420       1.63420       297.424       299.058    
  54  0.975007     -0.253104E-01  -1.20740       1.20740       318.381       319.588    
  55  0.947991E-01  -2.35600      -112.390       112.390       361.180       473.569    
  56  0.195092      -1.63429      -77.9616       77.9616       319.594       397.556    
  57  0.459282     -0.778091      -37.1179       37.1179       316.943       354.061    
  58  0.563954     -0.572782      -27.3239       27.3239       316.952       344.276    
  59  0.482884     -0.727978      -34.7273       34.7273       333.837       368.564    
  60  0.270357      -1.30801      -62.3972       62.3972       313.360       375.757    
  61  0.184282      -1.69129      -80.6807       80.6807       314.940       395.621    
  62  0.486455     -0.720611      -34.3759       34.3759       326.468       360.844    
  63  0.348603      -1.05382      -50.2713       50.2713       319.172       369.444    
  64  0.556175     -0.586673      -27.9865       27.9865       332.461       360.448    
  65  0.125277      -2.07723      -99.0917       99.0917       315.769       414.861    
  66  0.473622     -0.747346      -35.6512       35.6512       283.393       319.044    
  67  0.762738     -0.270841      -12.9201       12.9201       381.601       394.521    
  68  0.898920     -0.106561      -5.08338       5.08338       254.566       259.649    
  69  0.646772E-01  -2.73835      -130.629       130.629       325.871       456.501    
  70  0.303985      -1.19078      -56.8045       56.8045       319.305       376.110    
  71  0.561577     -0.577006      -27.5254       27.5254       320.091       347.616    
  72  0.522748     -0.648656      -30.9433       30.9433       304.193       335.136    
  73  0.916158     -0.875659E-01  -4.17723       4.17723       282.662       286.839    
  74  0.986389     -0.137046E-01 -0.653759      0.653759       411.198       411.852    
  75  0.944439     -0.571647E-01  -2.72697       2.72697       344.821       347.548    
  76  0.398872     -0.919115      -43.8453       43.8453       319.806       363.652    
  77  0.210002E-01  -3.86322      -184.290       184.290       461.431       645.721    
  78  0.419160     -0.869503      -41.4786       41.4786       472.270       513.749    
  79  0.250194      -1.38552      -66.0944       66.0944       424.873       490.968    
loop,thermsimp(1:2)       48   27.0824       73.0746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164        421.75         87.33          1.14         40.43          0.70          0.05        129.65
Just calling func    0   0        129.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    421.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       48
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       49
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      163     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -81.5459       81.5459       254.566       336.112    
   2  0.335083      -1.09338      -52.1582       52.1582       256.750       308.908    
   3  0.585160     -0.535871      -25.5631       25.5631       255.802       281.365    
   4  0.445729     -0.808044      -38.5467       38.5467       282.662       321.208    
   5  0.963605     -0.370741E-01  -1.76857       1.76857       276.452       278.221    
   6  0.538074     -0.619758      -29.5648       29.5648       262.089       291.653    
   7  0.971443     -0.289729E-01  -1.38212       1.38212       255.057       256.439    
   8  0.817136     -0.201950      -9.63377       9.63377       290.274       299.908    
   9  0.216943      -1.52812      -72.8972       72.8972       288.946       361.843    
  10  0.572311     -0.558074      -26.6222       26.6222       278.568       305.190    
  11  0.511761     -0.669897      -31.9566       31.9566       277.887       309.844    
  12  0.331920E-01  -3.40545      -162.453       162.453       282.959       445.412    
  13  0.662680     -0.411462      -19.6283       19.6283       297.424       317.052    
  14  0.578679     -0.547007      -26.0943       26.0943       275.738       301.833    
  15  0.473979     -0.746592      -35.6153       35.6153       290.928       326.543    
  16  0.243750      -1.41161      -67.3392       67.3392       305.147       372.486    
  17  0.784227     -0.243057      -11.5948       11.5948       284.323       295.918    
  18  0.215065      -1.53682      -73.3119       73.3119       311.882       385.194    
  19  0.813272     -0.206689      -9.85986       9.85986       272.208       282.068    
  20  0.877336     -0.130865      -6.24276       6.24276       314.057       320.300    
  21  0.911070     -0.931357E-01  -4.44292       4.44292       278.834       283.277    
  22  0.424500     -0.856844      -40.8747       40.8747       318.052       358.927    
  23  0.122508      -2.09958      -100.158       100.158       283.393       383.551    
  24  0.173199      -1.75331      -83.6397       83.6397       318.381       402.021    
  25  0.243010      -1.41465      -67.4843       67.4843       317.736       385.220    
  26  0.618804     -0.479966      -22.8962       22.8962       319.358       342.254    
  27  0.365303      -1.00703      -48.0390       48.0390       313.152       361.191    
  28  0.178054      -1.72567      -82.3209       82.3209       317.931       400.252    
  29  0.416122     -0.876776      -41.8255       41.8255       310.973       352.799    
  30  0.789287     -0.236625      -11.2879       11.2879       312.134       323.421    
  31  0.786736     -0.239863      -11.4424       11.4424       281.545       292.987    
  32  0.295880      -1.21780      -58.0937       58.0937       304.193       362.286    
  33  0.418649     -0.870722      -41.5367       41.5367       317.896       359.433    
  34  0.706992     -0.346736      -16.5406       16.5406       300.437       316.977    
  35  0.281863      -1.26633      -60.4089       60.4089       318.942       379.351    
  36  0.357290      -1.02921      -49.0971       49.0971       313.757       362.854    
  37  0.174180      -1.74767      -83.3703       83.3703       257.925       341.296    
  38  0.190924      -1.65588      -78.9918       78.9918       270.037       349.029    
  39  0.630369     -0.461449      -22.0129       22.0129       318.025       340.038    
  40  0.252261      -1.37729      -65.7020       65.7020       269.425       335.127    
  41  0.359213      -1.02384      -48.8411       48.8411       316.952       365.793    
  42  0.740344     -0.300640      -14.3417       14.3417       294.012       308.354    
  43  0.283211      -1.26156      -60.1813       60.1813       344.821       405.002    
  44  0.965119     -0.355039E-01  -1.69367       1.69367       320.091       321.785    
  45  0.389600     -0.942634      -44.9672       44.9672       308.952       353.919    
  46  0.598383     -0.513525      -24.4971       24.4971       316.943       341.440    
  47  0.631795     -0.459190      -21.9051       21.9051       317.711       339.616    
  48  0.997460     -0.254363E-02 -0.121341      0.121341       332.461       332.583    
  49  0.192532      -1.64749      -78.5917       78.5917       326.468       405.060    
  50  0.769348     -0.262212      -12.5085       12.5085       325.716       338.224    
  51  0.740745     -0.300099      -14.3159       14.3159       319.806       334.122    
  52  0.590587     -0.526639      -25.1227       25.1227       313.807       338.930    
  53  0.628310E-01  -2.76731      -132.011       132.011       333.837       465.848    
  54  0.515529     -0.662562      -31.6067       31.6067       319.172       350.779    
  55  0.306025      -1.18409      -56.4855       56.4855       354.393       410.879    
  56  0.686790     -0.375726      -17.9236       17.9236       287.140       305.064    
  57  0.357910      -1.02747      -49.0144       49.0144       313.360       362.374    
  58  0.267469      -1.31875      -62.9094       62.9094       277.109       340.018    
  59  0.410193     -0.891128      -42.5101       42.5101       319.305       361.815    
  60  0.490314     -0.712709      -33.9989       33.9989       315.864       349.863    
  61  0.395217     -0.928320      -44.2844       44.2844       322.677       366.961    
  62  0.641491E-01  -2.74655      -131.021       131.021       319.053       450.074    
  63  0.610173     -0.494012      -23.5662       23.5662       381.601       405.167    
  64  0.657523     -0.419276      -20.0010       20.0010       314.940       334.941    
  65  0.172961      -1.75469      -83.7053       83.7053       319.594       403.299    
  66  0.166793      -1.79100      -85.4374       85.4374       329.961       415.399    
  67  0.184181      -1.69184      -80.7070       80.7070       291.059       371.766    
  68  0.728490     -0.316781      -15.1117       15.1117       411.198       426.310    
  69  0.307541      -1.17915      -56.2497       56.2497       318.025       374.275    
  70  0.929000     -0.736468E-01  -3.51323       3.51323       315.769       319.282    
  71  0.111633      -2.19254      -104.593       104.593       269.945       374.538    
  72  0.920233     -0.831286E-01  -3.96555       3.96555       325.264       329.229    
  73  0.808772     -0.212238      -10.1246       10.1246       325.871       335.996    
  74  0.834952     -0.180381      -8.60486       8.60486       318.671       327.276    
  75  0.391863E-01  -3.23943      -154.533       154.533       361.180       515.712    
  76  0.249997      -1.38631      -66.1321       66.1321       318.008       384.141    
  77  0.930119     -0.724423E-01  -3.45577       3.45577       424.873       428.329    
  78  0.242543      -1.41657      -67.5760       67.5760       472.270       539.846    
  79  0.947017     -0.544383E-01  -2.59691       2.59691       421.746       424.343    
loop,thermsimp(1:2)       49   81.5459       52.1582    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165        503.00         87.52          1.14         40.32          0.63          0.05        129.65
Just calling func    0   0        129.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    503.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       49
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       50
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      164     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -164.612       164.612       255.057       419.669    
   2  0.601445     -0.508421      -24.2536       24.2536       276.452       300.706    
   3  0.651191     -0.428952      -20.4626       20.4626       255.802       276.264    
   4  0.187303      -1.67503      -79.9051       79.9051       272.208       352.113    
   5  0.664603     -0.408566      -19.4901       19.4901       278.834       298.324    
   6  0.945236     -0.563208E-01  -2.68671       2.68671       262.089       264.775    
   7  0.865870     -0.144020      -6.87030       6.87030       281.545       288.415    
   8  0.674117     -0.394351      -18.8120       18.8120       284.323       303.135    
   9  0.959689E-01  -2.34373      -111.805       111.805       290.274       402.079    
  10  0.663337     -0.410472      -19.5811       19.5811       275.738       295.319    
  11  0.384854     -0.954891      -45.5519       45.5519       287.140       332.692    
  12  0.892338     -0.113910      -5.43396       5.43396       278.568       284.002    
  13  0.470837     -0.753243      -35.9325       35.9325       294.012       329.945    
  14  0.262618      -1.33706      -63.7826       63.7826       256.750       320.533    
  15  0.877143     -0.131085      -6.25324       6.25324       277.887       284.141    
  16  0.262102      -1.33902      -63.8764       63.8764       300.437       364.313    
  17  0.306130      -1.18375      -56.4692       56.4692       297.424       353.893    
  18  0.251844      -1.37895      -65.7810       65.7810       315.769       381.550    
  19  0.371147     -0.991157      -47.2819       47.2819       314.057       361.339    
  20  0.244393E-01  -3.71156      -177.056       177.056       282.662       459.717    
  21  0.550903     -0.596197      -28.4408       28.4408       320.091       348.532    
  22  0.509078     -0.675154      -32.2074       32.2074       312.134       344.341    
  23  0.741178     -0.299515      -14.2880       14.2880       290.928       305.216    
  24  0.585965     -0.534496      -25.4975       25.4975       318.671       344.168    
  25  0.602491     -0.506683      -24.1707       24.1707       325.264       349.434    
  26  0.532366     -0.630423      -30.0736       30.0736       332.461       362.535    
  27  0.264247      -1.33087      -63.4875       63.4875       319.806       383.294    
  28  0.468512     -0.758194      -36.1687       36.1687       314.940       351.109    
  29  0.338122      -1.08435      -51.7276       51.7276       269.425       321.153    
  30  0.815455     -0.204008      -9.73197       9.73197       325.871       335.603    
  31  0.126007      -2.07142      -98.8145       98.8145       254.566       353.380    
  32  0.391435     -0.937937      -44.7431       44.7431       325.716       370.459    
  33  0.477179     -0.739864      -35.2943       35.2943       313.807       349.101    
  34  0.926058     -0.768180E-01  -3.66451       3.66451       317.711       321.375    
  35  0.305992E-01  -3.48678      -166.333       166.333       277.109       443.441    
  36  0.142122      -1.95107      -93.0734       93.0734       318.025       411.099    
  37  0.934627E-01  -2.37019      -113.067       113.067       257.925       370.993    
  38  0.933240     -0.690924E-01  -3.29597       3.29597       316.943       320.239    
  39  0.551354     -0.595378      -28.4018       28.4018       319.358       347.760    
  40  0.167646      -1.78590      -85.1942       85.1942       270.037       355.231    
  41  0.657770     -0.418900      -19.9831       19.9831       315.864       335.848    
  42  0.937012     -0.650587E-01  -3.10354       3.10354       319.172       322.276    
  43  0.435130     -0.832109      -39.6948       39.6948       310.973       350.668    
  44  0.346278E-01  -3.36310      -160.432       160.432       308.952       469.384    
  45  0.529273     -0.636251      -30.3516       30.3516       318.052       348.404    
  46  0.543808     -0.609159      -29.0592       29.0592       317.896       346.955    
  47  0.476993     -0.740254      -35.3129       35.3129       313.152       348.465    
  48  0.602365     -0.506891      -24.1806       24.1806       319.305       343.486    
  49  0.429141     -0.845970      -40.3560       40.3560       288.946       329.302    
  50  0.161300E-01  -4.12707      -196.877       196.877       304.193       501.070    
  51  0.806405     -0.215169      -10.2644       10.2644       313.360       323.624    
  52  0.577848E-01  -2.85103      -136.005       136.005       313.757       449.762    
  53  0.992308     -0.772154E-02 -0.368347      0.368347       316.952       317.320    
  54  0.130687      -2.03495      -97.0750       97.0750       322.677       419.751    
  55  0.844072     -0.169518      -8.08663       8.08663       291.059       299.145    
  56  0.900890     -0.104372      -4.97896       4.97896       305.147       310.126    
  57  0.886923E-01  -2.42258      -115.566       115.566       318.025       433.591    
  58  0.675479     -0.392334      -18.7158       18.7158       269.945       288.661    
  59  0.486368     -0.720791      -34.3844       34.3844       318.942       353.326    
  60  0.868319E-01  -2.44378      -116.578       116.578       283.393       399.971    
  61  0.536051     -0.623527      -29.7446       29.7446       318.008       347.753    
  62  0.916344     -0.873636E-01  -4.16758       4.16758       311.882       316.049    
  63  0.264660E-01  -3.63190      -173.255       173.255       317.736       490.991    
  64  0.765006     -0.267871      -12.7785       12.7785       317.931       330.710    
  65  0.755495     -0.280383      -13.3753       13.3753       318.381       331.756    
  66  0.149819      -1.89833      -90.5573       90.5573       319.594       410.151    
  67  0.514409     -0.664736      -31.7104       31.7104       344.821       376.531    
  68  0.902494E-01  -2.40518      -114.736       114.736       326.468       441.204    
  69  0.837965     -0.176779      -8.43303       8.43303       381.601       390.034    
  70  0.833448     -0.182184      -8.69087       8.69087       354.393       363.084    
  71  0.830623     -0.185580      -8.85286       8.85286       329.961       338.814    
  72  0.391825     -0.936940      -44.6956       44.6956       421.746       466.441    
  73  0.561993     -0.576266      -27.4901       27.4901       411.198       438.688    
  74  0.106783      -2.23696      -106.711       106.711       424.873       531.585    
  75  0.997923     -0.207917E-02 -0.991843E-01  0.991843E-01   282.959       283.058    
  76  0.645454     -0.437802      -20.8848       20.8848       319.053       339.938    
  77  0.147671      -1.91277      -91.2464       91.2464       333.837       425.084    
  78  0.815877     -0.203491      -9.70730       9.70730       361.180       370.887    
  79  0.626711     -0.467270      -22.2906       22.2906       503.003       525.293    
loop,thermsimp(1:2)       50   164.612       24.2536    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166        529.43         87.41          1.10         39.76          1.37          0.05        129.69
Just calling func    0   0        129.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    529.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       50
neval is:      165
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       51
neval is:      165


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      165     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01  -3.49806       3.49806       262.089       265.587    
   2  0.669511     -0.401208      -19.1391       19.1391       255.802       274.941    
   3  0.863337E-01  -2.44954      -116.852       116.852       282.959       399.811    
   4  0.279945      -1.27316      -60.7347       60.7347       278.568       339.302    
   5  0.832640     -0.183154      -8.73714       8.73714       277.887       286.625    
   6  0.848933     -0.163775      -7.81270       7.81270       281.545       289.358    
   7  0.141794      -1.95338      -93.1838       93.1838       269.945       363.129    
   8  0.208764      -1.56655      -74.7305       74.7305       275.738       350.469    
   9  0.755787     -0.279996      -13.3569       13.3569       278.834       292.191    
  10  0.177416      -1.72926      -82.4922       82.4922       291.059       373.551    
  11  0.405148     -0.903503      -43.1005       43.1005       276.452       319.553    
  12  0.640380     -0.445693      -21.2612       21.2612       284.323       305.585    
  13  0.548060     -0.601370      -28.6876       28.6876       290.928       319.615    
  14  0.773287     -0.257105      -12.2649       12.2649       305.147       317.412    
  15  0.180768      -1.71054      -81.5992       81.5992       311.882       393.481    
  16  0.135846      -1.99624      -95.2280       95.2280       316.952       412.180    
  17  0.601016     -0.509133      -24.2876       24.2876       316.943       341.231    
  18  0.302263      -1.19646      -57.0755       57.0755       256.750       313.826    
  19  0.189428      -1.66374      -79.3669       79.3669       269.425       348.792    
  20  0.737158     -0.304953      -14.5474       14.5474       317.711       332.258    
  21  0.790680     -0.234862      -11.2038       11.2038       319.172       330.376    
  22  0.177192E-01  -4.03310      -192.394       192.394       313.360       505.754    
  23  0.236042      -1.44375      -68.8721       68.8721       288.946       357.818    
  24  0.459229     -0.778206      -37.1234       37.1234       294.012       331.135    
  25  0.586479E-01  -2.83620      -135.298       135.298       317.931       453.229    
  26  0.263766      -1.33269      -63.5744       63.5744       318.381       381.956    
  27  0.942550     -0.591663E-01  -2.82246       2.82246       287.140       289.962    
  28  0.106855      -2.23628      -106.679       106.679       325.871       432.550    
  29  0.710700     -0.341505      -16.2911       16.2911       315.864       332.155    
  30  0.207109E-01  -3.87709      -184.952       184.952       329.961       514.914    
  31  0.901203     -0.104025      -4.96239       4.96239       319.053       324.015    
  32  0.949751     -0.515555E-01  -2.45939       2.45939       319.305       321.764    
  33  0.343487      -1.06861      -50.9766       50.9766       318.671       369.647    
  34  0.875043     -0.133483      -6.36763       6.36763       312.134       318.501    
  35  0.122447E-01  -4.40266      -210.024       210.024       317.896       527.919    
  36  0.820650     -0.197659      -9.42907       9.42907       318.008       327.437    
  37  0.748866     -0.289195      -13.7957       13.7957       319.358       333.154    
  38  0.594525     -0.519992      -24.8056       24.8056       318.052       342.858    
  39  0.927863E-01  -2.37746      -113.414       113.414       313.152       426.566    
  40  0.631335     -0.459918      -21.9398       21.9398       320.091       342.031    
  41  0.282620      -1.26365      -60.2810       60.2810       313.807       374.088    
  42  0.707811     -0.345578      -16.4854       16.4854       325.264       341.749    
  43  0.930463     -0.720730E-01  -3.43816       3.43816       310.973       314.411    
  44  0.988563     -0.115032E-01 -0.548748      0.548748       314.940       315.489    
  45  0.869439     -0.139907      -6.67410       6.67410       272.208       278.882    
  46  0.693921     -0.365397      -17.4308       17.4308       318.942       336.373    
  47  0.731753     -0.312312      -14.8985       14.8985       254.566       269.464    
  48  0.848712     -0.164035      -7.82510       7.82510       297.424       305.249    
  49  0.174447      -1.74613      -83.2972       83.2972       270.037       353.334    
  50  0.313212      -1.16087      -55.3781       55.3781       314.057       369.435    
  51  0.880789     -0.126937      -6.05537       6.05537       332.461       338.517    
  52  0.441967     -0.816520      -38.9511       38.9511       354.393       393.344    
  53  0.624106     -0.471435      -22.4892       22.4892       300.437       322.926    
  54  0.447426     -0.804244      -38.3655       38.3655       325.716       364.081    
  55  0.681696     -0.383171      -18.2787       18.2787       361.180       379.458    
  56  0.336384      -1.08950      -51.9734       51.9734       257.925       309.899    
  57  0.197044      -1.62433      -77.4865       77.4865       344.821       422.307    
  58  0.186834E-01  -3.98012      -189.867       189.867       315.769       505.636    
  59  0.467980     -0.759329      -36.2229       36.2229       319.806       356.029    
  60  0.607270     -0.498782      -23.7938       23.7938       381.601       405.394    
  61  0.299128      -1.20689      -57.5730       57.5730       283.393       340.966    
  62  0.166354      -1.79364      -85.5632       85.5632       290.274       375.837    
  63  0.542834     -0.610952      -29.1447       29.1447       319.594       348.739    
  64  0.811476     -0.208901      -9.96536       9.96536       318.025       327.991    
  65  0.520065     -0.653802      -31.1888       31.1888       255.057       286.246    
  66  0.955839     -0.451662E-01  -2.15460       2.15460       322.677       324.831    
  67  0.729602     -0.315256      -15.0389       15.0389       333.837       348.876    
  68  0.792398     -0.232691      -11.1002       11.1002       318.025       329.125    
  69  0.803787     -0.218421      -10.4195       10.4195       411.198       421.618    
  70  0.812756     -0.207324      -9.89016       9.89016       326.468       336.358    
  71  0.189528      -1.66322      -79.3419       79.3419       277.109       356.451    
  72  0.898459     -0.107074      -5.10783       5.10783       313.757       318.865    
  73  0.676452     -0.390894      -18.6471       18.6471       282.662       301.309    
  74  0.648856     -0.432545      -20.6340       20.6340       421.746       442.380    
  75  0.684885     -0.378505      -18.0561       18.0561       308.952       327.008    
  76  0.590808     -0.526265      -25.1048       25.1048       317.736       342.841    
  77  0.462119     -0.771934      -36.8242       36.8242       304.193       341.017    
  78  0.715436     -0.334863      -15.9742       15.9742       503.003       518.977    
  79  0.828612     -0.188003      -8.96845       8.96845       529.431       538.400    
loop,thermsimp(1:2)       51   3.49806       19.1391    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    167        424.87         87.09          1.12         39.97          1.21          0.05        129.44
Just calling func    0   0        129.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    424.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       51
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       52
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      166     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -19.9641       19.9641       262.089       282.053    
   2  0.385391     -0.953496      -45.4854       45.4854       254.566       300.051    
   3  0.323679      -1.12800      -53.8099       53.8099       255.802       309.612    
   4  0.402516E-01  -3.21260      -153.253       153.253       272.208       425.461    
   5  0.866022     -0.143846      -6.86198       6.86198       255.057       261.919    
   6  0.560147     -0.579555      -27.6470       27.6470       277.887       305.534    
   7  0.389098     -0.943925      -45.0288       45.0288       281.545       326.574    
   8  0.470755     -0.753417      -35.9408       35.9408       287.140       323.081    
   9  0.794299     -0.230295      -10.9859       10.9859       278.834       289.820    
  10  0.897132     -0.108553      -5.17838       5.17838       282.662       287.840    
  11  0.359474      -1.02311      -48.8064       48.8064       297.424       346.230    
  12  0.604694     -0.503032      -23.9965       23.9965       284.323       308.320    
  13  0.101554      -2.28717      -109.106       109.106       257.925       367.032    
  14  0.274480      -1.29288      -61.6750       61.6750       256.750       318.425    
  15  0.916086     -0.876445E-01  -4.18097       4.18097       310.973       315.154    
  16  0.820070E-01  -2.50095      -119.305       119.305       314.940       434.245    
  17  0.975902     -0.243929E-01  -1.16363       1.16363       305.147       306.310    
  18  0.131665      -2.02750      -96.7193       96.7193       312.134       408.853    
  19  0.751313     -0.285933      -13.6401       13.6401       313.757       327.397    
  20  0.775324     -0.254475      -12.1394       12.1394       276.452       288.592    
  21  0.237000      -1.43969      -68.6788       68.6788       290.928       359.606    
  22  0.113641      -2.17471      -103.742       103.742       319.305       423.047    
  23  0.762281     -0.271440      -12.9487       12.9487       300.437       313.385    
  24  0.783730     -0.243690      -11.6249       11.6249       319.053       330.678    
  25  0.492891     -0.707468      -33.7489       33.7489       322.677       356.425    
  26  0.471904     -0.750980      -35.8246       35.8246       308.952       344.777    
  27  0.855781     -0.155740      -7.42940       7.42940       318.008       325.438    
  28  0.636473     -0.451814      -21.5532       21.5532       318.025       339.578    
  29  0.433340     -0.836232      -39.8914       39.8914       318.025       357.917    
  30  0.482236     -0.729321      -34.7914       34.7914       319.172       353.964    
  31  0.855143E-01  -2.45907      -117.307       117.307       294.012       411.319    
  32  0.916579     -0.871071E-01  -4.15534       4.15534       315.864       320.020    
  33  0.232519      -1.45878      -69.5895       69.5895       317.711       387.300    
  34  0.283977      -1.25886      -60.0525       60.0525       319.358       379.410    
  35  0.401228E-01  -3.21581      -153.406       153.406       326.468       479.875    
  36  0.235231      -1.44719      -69.0364       69.0364       318.942       387.978    
  37  0.233426      -1.45489      -69.4037       69.4037       332.461       401.865    
  38  0.903594     -0.101376      -4.83600       4.83600       278.568       283.404    
  39  0.857571     -0.153651      -7.32973       7.32973       283.393       290.723    
  40  0.444085     -0.811739      -38.7230       38.7230       304.193       342.916    
  41  0.151055      -1.89011      -90.1655       90.1655       316.943       407.109    
  42  0.745694     -0.293440      -13.9982       13.9982       325.264       339.262    
  43  0.470647E-01  -3.05623      -145.794       145.794       320.091       465.885    
  44  0.344459      -1.06578      -50.8418       50.8418       317.736       368.578    
  45  0.592738     -0.523004      -24.9492       24.9492       318.052       343.002    
  46  0.754292     -0.281975      -13.4513       13.4513       319.594       333.045    
  47  0.162950      -1.81431      -86.5496       86.5496       269.425       355.975    
  48  0.939100     -0.628333E-01  -2.99739       2.99739       333.837       336.835    
  49  0.966845     -0.337175E-01  -1.60845       1.60845       275.738       277.347    
  50  0.287323      -1.24715      -59.4936       59.4936       270.037       329.530    
  51  0.835081     -0.180227      -8.59749       8.59749       319.806       328.404    
  52  0.836052     -0.179064      -8.54203       8.54203       277.109       285.651    
  53  0.382321     -0.961495      -45.8669       45.8669       288.946       334.813    
  54  0.873869     -0.134824      -6.43163       6.43163       269.945       276.377    
  55  0.169635      -1.77411      -84.6315       84.6315       325.716       410.347    
  56  0.511680     -0.670055      -31.9642       31.9642       314.057       346.021    
  57  0.687848     -0.374188      -17.8502       17.8502       318.671       336.521    
  58  0.659885     -0.415689      -19.8299       19.8299       291.059       310.888    
  59  0.615967     -0.484562      -23.1154       23.1154       313.807       336.922    
  60  0.600029     -0.510778      -24.3660       24.3660       290.274       314.640    
  61  0.166513      -1.79268      -85.5177       85.5177       361.180       446.697    
  62  0.730640     -0.313835      -14.9711       14.9711       318.381       333.352    
  63  0.168194      -1.78264      -85.0386       85.0386       354.393       439.432    
  64  0.562652E-01  -2.87768      -137.276       137.276       311.882       449.158    
  65  0.787921     -0.238357      -11.3705       11.3705       282.959       294.330    
  66  0.937052     -0.650163E-01  -3.10152       3.10152       381.601       384.702    
  67  0.548780     -0.600057      -28.6250       28.6250       316.952       345.577    
  68  0.893892     -0.112170      -5.35093       5.35093       411.198       416.549    
  69  0.192558E-01  -3.94994      -188.427       188.427       344.821       533.248    
  70  0.818438     -0.200358      -9.55783       9.55783       313.152       322.710    
  71  0.621039     -0.476361      -22.7242       22.7242       325.871       348.595    
  72  0.868045     -0.141511      -6.75062       6.75062       421.746       428.496    
  73  0.579309     -0.545920      -26.0424       26.0424       317.931       343.974    
  74  0.646104E-01  -2.73938      -130.679       130.679       315.769       446.448    
  75  0.983794     -0.163390E-01 -0.779431      0.779431       313.360       314.139    
  76  0.810516     -0.210084      -10.0218       10.0218       329.961       339.983    
  77  0.996676     -0.332929E-02 -0.158820      0.158820       503.003       503.162    
  78  0.603772     -0.504559      -24.0694       24.0694       317.896       341.965    
  79  0.233261E-01  -3.75818      -179.279       179.279       424.873       604.153    
loop,thermsimp(1:2)       52   19.9641       45.4854    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168        529.43         87.48          1.11         40.09          0.77          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    529.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       52
neval is:      167
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       53
neval is:      167


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      167     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -25.8419       25.8419       255.057       280.899    
   2  0.307993      -1.17768      -56.1796       56.1796       269.945       326.125    
   3  0.551684     -0.594779      -28.3732       28.3732       275.738       304.112    
   4  0.969976     -0.304835E-01  -1.45418       1.45418       262.089       263.543    
   5  0.401714     -0.912015      -43.5066       43.5066       278.568       322.074    
   6  0.336211      -1.09002      -51.9979       51.9979       277.109       329.107    
   7  0.649191     -0.432028      -20.6093       20.6093       282.662       303.271    
   8  0.426986     -0.851005      -40.5962       40.5962       276.452       317.048    
   9  0.479997     -0.733976      -35.0134       35.0134       278.834       313.847    
  10  0.441527     -0.817516      -38.9986       38.9986       283.393       322.392    
  11  0.218988      -1.51874      -72.4496       72.4496       282.959       355.409    
  12  0.935549     -0.666221E-01  -3.17813       3.17813       254.566       257.744    
  13  0.159996      -1.83261      -87.4224       87.4224       277.887       365.310    
  14  0.486870     -0.719759      -34.3352       34.3352       305.147       339.482    
  15  0.835520     -0.179701      -8.57240       8.57240       284.323       292.896    
  16  0.643759     -0.440431      -21.0102       21.0102       255.802       276.812    
  17  0.177188      -1.73054      -82.5534       82.5534       291.059       373.612    
  18  0.408356     -0.895617      -42.7243       42.7243       300.437       343.161    
  19  0.463768     -0.768371      -36.6542       36.6542       313.360       350.014    
  20  0.616820     -0.483178      -23.0494       23.0494       290.274       313.323    
  21  0.377083     -0.975289      -46.5250       46.5250       310.973       357.498    
  22  0.278016      -1.28008      -61.0645       61.0645       256.750       317.815    
  23  0.746435     -0.292446      -13.9508       13.9508       315.864       329.815    
  24  0.872234     -0.136697      -6.52097       6.52097       313.152       319.673    
  25  0.887073E-01  -2.42241      -115.558       115.558       287.140       402.698    
  26  0.124913      -2.08014      -99.2305       99.2305       318.008       417.239    
  27  0.918160     -0.853835E-01  -4.07311       4.07311       281.545       285.618    
  28  0.924603     -0.783912E-01  -3.73956       3.73956       313.757       317.497    
  29  0.863214     -0.147092      -7.01687       7.01687       319.806       326.823    
  30  0.823499E-02  -4.79936      -228.948       228.948       270.037       498.985    
  31  0.548113     -0.601275      -28.6831       28.6831       319.053       347.736    
  32  0.800553     -0.222452      -10.6118       10.6118       319.594       330.206    
  33  0.180829      -1.71020      -81.5831       81.5831       318.381       399.964    
  34  0.968975E-01  -2.33410      -111.345       111.345       288.946       400.291    
  35  0.749847     -0.287886      -13.7333       13.7333       318.671       332.404    
  36  0.902028     -0.103110      -4.91873       4.91873       333.837       338.756    
  37  0.312083      -1.16449      -55.5504       55.5504       313.807       369.357    
  38  0.472691     -0.749313      -35.7451       35.7451       325.264       361.009    
  39  0.970346     -0.301026E-01  -1.43601       1.43601       318.025       319.461    
  40  0.485853     -0.721850      -34.4350       34.4350       329.961       364.396    
  41  0.604658     -0.503092      -23.9994       23.9994       317.896       341.895    
  42  0.172238      -1.75888      -83.9053       83.9053       304.193       388.098    
  43  0.359079E-01  -3.32680      -158.701       158.701       318.052       476.753    
  44  0.464923     -0.765884      -36.5356       36.5356       317.931       354.467    
  45  0.293512      -1.22584      -58.4770       58.4770       308.952       367.429    
  46  0.572788     -0.557239      -26.5824       26.5824       316.952       343.534    
  47  0.931713     -0.707300E-01  -3.37409       3.37409       314.057       317.431    
  48  0.983012     -0.171340E-01 -0.817358      0.817358       297.424       298.241    
  49  0.572194     -0.558278      -26.6319       26.6319       325.871       352.503    
  50  0.272189      -1.30126      -62.0750       62.0750       319.172       381.247    
  51  0.521081     -0.651849      -31.0957       31.0957       269.425       300.521    
  52  0.560075     -0.579685      -27.6532       27.6532       322.677       350.330    
  53  0.442251     -0.815877      -38.9204       38.9204       318.025       356.946    
  54  0.541873     -0.612723      -29.2292       29.2292       290.928       320.157    
  55  0.619019     -0.479619      -22.8796       22.8796       257.925       280.805    
  56  0.554460     -0.589760      -28.1338       28.1338       317.736       345.870    
  57  0.942853     -0.588454E-01  -2.80715       2.80715       319.358       322.165    
  58  0.289656E-01  -3.54165      -168.950       168.950       381.601       550.550    
  59  0.420166     -0.867105      -41.3642       41.3642       317.711       359.075    
  60  0.304886      -1.18782      -56.6633       56.6633       318.942       375.605    
  61  0.799970     -0.223182      -10.6466       10.6466       332.461       343.108    
  62  0.330194      -1.10808      -52.8594       52.8594       316.943       369.803    
  63  0.193095      -1.64457      -78.4523       78.4523       312.134       390.586    
  64  0.151812      -1.88511      -89.9269       89.9269       325.716       415.643    
  65  0.463265     -0.769456      -36.7059       36.7059       294.012       330.718    
  66  0.468691     -0.757811      -36.1505       36.1505       411.198       447.349    
  67  0.442877     -0.814463      -38.8530       38.8530       319.305       358.158    
  68  0.652140     -0.427496      -20.3932       20.3932       272.208       292.601    
  69  0.258134      -1.35428      -64.6042       64.6042       421.746       486.350    
  70  0.530519E-01  -2.93648      -140.081       140.081       314.940       455.021    
  71  0.479897     -0.734184      -35.0233       35.0233       354.393       389.417    
  72  0.266463      -1.32252      -63.0891       63.0891       315.769       378.858    
  73  0.380965     -0.965047      -46.0364       46.0364       361.180       407.216    
  74  0.429433     -0.845291      -40.3236       40.3236       311.882       352.205    
  75  0.174920      -1.74343      -83.1680       83.1680       320.091       403.259    
  76  0.642197     -0.442860      -21.1261       21.1261       326.468       347.594    
  77  0.953225     -0.479039E-01  -2.28520       2.28520       503.003       505.288    
  78  0.465546     -0.764543      -36.4716       36.4716       344.821       381.292    
  79  0.298625E-01  -3.51115      -167.495       167.495       529.431       696.927    
loop,thermsimp(1:2)       53   25.8419       56.1796    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    169        424.87         87.19          1.15         40.46          0.51          0.05        129.36
Just calling func    0   0        129.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    424.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       53
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       54
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      168     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -27.1539       27.1539       254.566       281.720    
   2  0.698829     -0.358349      -17.0946       17.0946       262.089       279.183    
   3  0.550231     -0.597418      -28.4991       28.4991       255.802       284.301    
   4  0.844966     -0.168459      -8.03612       8.03612       257.925       265.962    
   5  0.139804      -1.96751      -93.8577       93.8577       255.057       348.915    
   6  0.119451      -2.12485      -101.363       101.363       281.545       382.908    
   7  0.474112     -0.746312      -35.6019       35.6019       272.208       307.810    
   8  0.293024      -1.22750      -58.5563       58.5563       284.323       342.880    
   9  0.760137     -0.274256      -13.0830       13.0830       297.424       310.507    
  10  0.216376      -1.53074      -73.0220       73.0220       269.425       342.447    
  11  0.837069     -0.177849      -8.48406       8.48406       282.662       291.146    
  12  0.969258     -0.312245E-01  -1.48953       1.48953       275.738       277.228    
  13  0.335918      -1.09089      -52.0395       52.0395       290.274       342.314    
  14  0.966643     -0.339265E-01  -1.61842       1.61842       278.834       280.452    
  15  0.723887     -0.323119      -15.4140       15.4140       276.452       291.866    
  16  0.459929E-01  -3.07927      -146.893       146.893       314.057       460.949    
  17  0.536724     -0.622271      -29.6847       29.6847       313.757       343.442    
  18  0.432574     -0.838001      -39.9758       39.9758       256.750       296.726    
  19  0.160308      -1.83066      -87.3293       87.3293       318.025       405.354    
  20  0.885158     -0.121989      -5.81933       5.81933       313.152       318.971    
  21  0.753783     -0.282650      -13.4835       13.4835       290.928       304.411    
  22  0.135562      -1.99832      -95.3276       95.3276       278.568       373.895    
  23  0.817964     -0.200937      -9.58544       9.58544       319.358       328.943    
  24  0.286617      -1.24961      -59.6111       59.6111       283.393       343.004    
  25  0.319126      -1.14217      -54.4858       54.4858       269.945       324.431    
  26  0.104479E-01  -4.56135      -217.594       217.594       319.806       537.400    
  27  0.671407     -0.398379      -19.0042       19.0042       277.109       296.113    
  28  0.782955     -0.244680      -11.6722       11.6722       315.864       327.537    
  29  0.186689      -1.67831      -80.0619       80.0619       319.594       399.656    
  30  0.462519     -0.771067      -36.7828       36.7828       294.012       330.795    
  31  0.203171      -1.59371      -76.0258       76.0258       318.671       394.696    
  32  0.851762E-01  -2.46303      -117.496       117.496       333.837       451.333    
  33  0.702824     -0.352649      -16.8227       16.8227       305.147       321.969    
  34  0.747923     -0.290456      -13.8558       13.8558       317.896       331.752    
  35  0.224450      -1.49410      -71.2744       71.2744       332.461       403.736    
  36  0.243563E-02  -6.01755      -287.060       287.060       300.437       587.497    
  37  0.160790      -1.82766      -87.1862       87.1862       316.952       404.138    
  38  0.880431     -0.127343      -6.07475       6.07475       317.736       323.811    
  39  0.507306     -0.678640      -32.3737       32.3737       326.468       358.842    
  40  0.266019      -1.32419      -63.1688       63.1688       319.053       382.222    
  41  0.310751      -1.16876      -55.7544       55.7544       313.360       369.114    
  42  0.945006     -0.565640E-01  -2.69832       2.69832       322.677       325.375    
  43  0.265699E-01  -3.62797      -173.068       173.068       311.882       484.950    
  44  0.652842     -0.426420      -20.3418       20.3418       325.871       346.213    
  45  0.799409     -0.223882      -10.6800       10.6800       317.931       328.611    
  46  0.543529     -0.609672      -29.0837       29.0837       282.959       312.043    
  47  0.361947      -1.01626      -48.4793       48.4793       318.025       366.504    
  48  0.398721     -0.919492      -43.8633       43.8633       310.973       354.836    
  49  0.349489      -1.05128      -50.1501       50.1501       319.305       369.455    
  50  0.948739     -0.526212E-01  -2.51023       2.51023       317.711       320.221    
  51  0.346176      -1.06081      -50.6046       50.6046       325.264       375.868    
  52  0.678244     -0.388248      -18.5209       18.5209       329.961       348.482    
  53  0.858518     -0.152547      -7.27709       7.27709       277.887       285.165    
  54  0.835860E-01  -2.48188      -118.395       118.395       308.952       427.347    
  55  0.762568     -0.271063      -12.9307       12.9307       313.807       326.738    
  56  0.273927      -1.29489      -61.7713       61.7713       316.943       378.714    
  57  0.729557     -0.315318      -15.0419       15.0419       291.059       306.100    
  58  0.320381      -1.13825      -54.2986       54.2986       318.942       373.241    
  59  0.818134     -0.200729      -9.57552       9.57552       315.769       325.345    
  60  0.639548     -0.446993      -21.3233       21.3233       319.172       340.496    
  61  0.976107     -0.241828E-01  -1.15361       1.15361       344.821       345.974    
  62  0.232128      -1.46046      -69.6697       69.6697       304.193       373.862    
  63  0.215412      -1.53520      -73.2351       73.2351       354.393       427.628    
  64  0.770868     -0.260238      -12.4144       12.4144       312.134       324.548    
  65  0.147419E-01  -4.21706      -201.170       201.170       318.381       519.551    
  66  0.102273      -2.28010      -108.770       108.770       288.946       397.715    
  67  0.625951     -0.468483      -22.3484       22.3484       287.140       309.488    
  68  0.176925      -1.73203      -82.6242       82.6242       320.091       402.715    
  69  0.638162E-02  -5.05433      -241.111       241.111       361.180       602.290    
  70  0.301443      -1.19917      -57.2051       57.2051       325.716       382.921    
  71  0.586975     -0.532773      -25.4153       25.4153       318.008       343.424    
  72  0.595449     -0.518439      -24.7315       24.7315       411.198       435.930    
  73  0.189180      -1.66506      -79.4296       79.4296       314.940       394.370    
  74  0.621622     -0.475424      -22.6795       22.6795       318.052       340.732    
  75  0.706686     -0.347169      -16.5613       16.5613       421.746       438.307    
  76  0.284042      -1.25863      -60.0416       60.0416       270.037       330.078    
  77  0.578773     -0.546844      -26.0865       26.0865       503.003       529.089    
  78  0.249713      -1.38744      -66.1863       66.1863       381.601       447.787    
  79  0.563040     -0.574405      -27.4013       27.4013       424.873       452.275    
loop,thermsimp(1:2)       54   27.1539       17.0946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170        484.88         87.37          1.11         40.09          0.86          0.04        129.47
Just calling func    0   0        129.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    484.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       54
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       55
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      169     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -78.1411       78.1411       257.925       336.066    
   2  0.875287     -0.133204      -6.35431       6.35431       275.738       282.093    
   3  0.103612      -2.26710      -108.149       108.149       262.089       370.238    
   4  0.159072      -1.83840      -87.6986       87.6986       278.834       366.532    
   5  0.118738      -2.13084      -101.649       101.649       254.566       356.215    
   6  0.294105      -1.22382      -58.3807       58.3807       255.802       314.182    
   7  0.967643     -0.328919E-01  -1.56907       1.56907       277.887       279.457    
   8  0.675183     -0.392772      -18.7367       18.7367       282.662       301.398    
   9  0.170112      -1.77130      -84.4976       84.4976       276.452       360.950    
  10  0.990992     -0.904902E-02 -0.431672      0.431672       277.109       277.540    
  11  0.198513      -1.61690      -77.1324       77.1324       256.750       333.882    
  12  0.404817E-01  -3.20690      -152.981       152.981       290.928       443.909    
  13  0.834933E-01  -2.48299      -118.448       118.448       291.059       409.506    
  14  0.458935     -0.778848      -37.1540       37.1540       272.208       309.362    
  15  0.929311     -0.733118E-01  -3.49725       3.49725       287.140       290.637    
  16  0.593071     -0.522440      -24.9224       24.9224       297.424       322.346    
  17  0.963359E-01  -2.33991      -111.623       111.623       282.959       394.582    
  18  0.383119E-01  -3.26200      -155.610       155.610       313.152       468.762    
  19  0.841843     -0.172161      -8.21274       8.21274       317.711       325.923    
  20  0.874261     -0.134376      -6.41026       6.41026       305.147       311.557    
  21  0.706443     -0.347513      -16.5777       16.5777       317.736       334.314    
  22  0.423649E-01  -3.16143      -150.812       150.812       269.945       420.757    
  23  0.904835     -0.100003      -4.77052       4.77052       312.134       316.904    
  24  0.728800     -0.316356      -15.0914       15.0914       315.769       330.861    
  25  0.764304     -0.268790      -12.8223       12.8223       322.677       335.499    
  26  0.578519     -0.547284      -26.1075       26.1075       313.807       339.914    
  27  0.321737      -1.13402      -54.0971       54.0971       315.864       369.961    
  28  0.592944     -0.522656      -24.9326       24.9326       317.931       342.864    
  29  0.159596      -1.83511      -87.5418       87.5418       319.358       406.900    
  30  0.797332     -0.226484      -10.8041       10.8041       270.037       280.841    
  31  0.263979      -1.33189      -63.5360       63.5360       294.012       357.548    
  32  0.449355     -0.799942      -38.1603       38.1603       317.896       356.056    
  33  0.859901     -0.150938      -7.20030       7.20030       319.172       326.373    
  34  0.730093     -0.314584      -15.0068       15.0068       318.052       333.059    
  35  0.484666     -0.724295      -34.5516       34.5516       290.274       324.826    
  36  0.180217      -1.71359      -81.7448       81.7448       269.425       351.170    
  37  0.857397     -0.153854      -7.33943       7.33943       284.323       291.663    
  38  0.502370     -0.688418      -32.8402       32.8402       283.393       316.233    
  39  0.245408      -1.40484      -67.0159       67.0159       318.008       385.024    
  40  0.134540      -2.00590      -95.6888       95.6888       313.757       409.446    
  41  0.468137     -0.758995      -36.2069       36.2069       344.821       381.028    
  42  0.864548E-01  -2.44813      -116.785       116.785       325.871       442.656    
  43  0.178791      -1.72154      -82.1239       82.1239       329.961       412.085    
  44  0.690351     -0.370555      -17.6769       17.6769       255.057       272.734    
  45  0.731648     -0.312455      -14.9053       14.9053       310.973       325.878    
  46  0.857623     -0.153591      -7.32686       7.32686       326.468       333.795    
  47  0.754956     -0.281095      -13.4093       13.4093       318.025       331.434    
  48  0.355557      -1.03407      -49.3291       49.3291       313.360       362.689    
  49  0.200964      -1.60463      -76.5470       76.5470       319.305       395.852    
  50  0.243499      -1.41264      -67.3884       67.3884       318.942       386.330    
  51  0.796288     -0.227794      -10.8667       10.8667       304.193       315.059    
  52  0.256937      -1.35892      -64.8258       64.8258       278.568       343.393    
  53  0.591760     -0.524655      -25.0280       25.0280       325.264       350.292    
  54  0.799227     -0.224110      -10.6909       10.6909       316.943       327.634    
  55  0.115295E-01  -4.46285      -212.895       212.895       319.053       531.948    
  56  0.559205     -0.581239      -27.7273       27.7273       281.545       309.272    
  57  0.742198     -0.298139      -14.2224       14.2224       325.716       339.938    
  58  0.543157     -0.610356      -29.1163       29.1163       314.940       344.056    
  59  0.100933      -2.29330      -109.399       109.399       318.671       428.070    
  60  0.201228      -1.60332      -76.4842       76.4842       288.946       365.430    
  61  0.602159E-01  -2.80982      -134.039       134.039       319.594       453.633    
  62  0.107777      -2.22769      -106.269       106.269       320.091       426.360    
  63  0.131787E-01  -4.32915      -206.517       206.517       332.461       538.978    
  64  0.756826     -0.278622      -13.2913       13.2913       316.952       330.243    
  65  0.617120     -0.482691      -23.0262       23.0262       318.025       341.051    
  66  0.885328     -0.121797      -5.81017       5.81017       308.952       314.762    
  67  0.617093     -0.482736      -23.0283       23.0283       354.393       377.422    
  68  0.654899     -0.423274      -20.1918       20.1918       411.198       431.390    
  69  0.847740     -0.165181      -7.87975       7.87975       421.746       429.625    
  70  0.121451E-01  -4.41083      -210.413       210.413       381.601       592.014    
  71  0.861782     -0.148752      -7.09605       7.09605       333.837       340.933    
  72  0.786555     -0.240093      -11.4533       11.4533       424.873       436.327    
  73  0.634771     -0.454491      -21.6810       21.6810       314.057       335.738    
  74  0.808947     -0.212022      -10.1143       10.1143       311.882       321.996    
  75  0.416116     -0.876792      -41.8263       41.8263       318.381       360.207    
  76  0.374969     -0.980911      -46.7932       46.7932       503.003       549.796    
  77  0.368977     -0.997022      -47.5617       47.5617       319.806       367.368    
  78  0.828679     -0.187922      -8.96461       8.96461       300.437       309.401    
  79  0.742187     -0.298154      -14.2231       14.2231       484.876       499.099    
loop,thermsimp(1:2)       55   78.1411       6.35431    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171        550.85         87.32          1.10         39.81          1.36          0.05        129.63
Just calling func    0   0        129.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    550.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       55
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       56
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      170     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -93.3506       93.3506       255.057       348.408    
   2  0.197548      -1.62177      -77.3648       77.3648       277.109       354.474    
   3  0.774000     -0.256183      -12.2209       12.2209       277.887       290.108    
   4  0.170284      -1.77029      -84.4495       84.4495       270.037       354.486    
   5  0.250636      -1.38376      -66.0104       66.0104       275.738       341.749    
   6  0.907951     -0.965652E-01  -4.60652       4.60652       287.140       291.747    
   7  0.611678     -0.491549      -23.4487       23.4487       284.323       307.772    
   8  0.735945E-02  -4.91177      -234.310       234.310       282.662       516.972    
   9  0.309131      -1.17399      -56.0037       56.0037       281.545       337.549    
  10  0.577854     -0.548434      -26.1624       26.1624       272.208       298.370    
  11  0.931529     -0.709274E-01  -3.38351       3.38351       300.437       303.820    
  12  0.665703     -0.406912      -19.4112       19.4112       305.147       324.558    
  13  0.585695     -0.534955      -25.5194       25.5194       255.802       281.321    
  14  0.295001      -1.22078      -58.2356       58.2356       308.952       367.188    
  15  0.317712E-01  -3.44920      -164.540       164.540       304.193       468.733    
  16  0.222963      -1.50075      -71.5915       71.5915       283.393       354.985    
  17  0.325931      -1.12107      -53.4793       53.4793       312.134       365.613    
  18  0.785098     -0.241947      -11.5418       11.5418       311.882       323.424    
  19  0.550467     -0.596988      -28.4786       28.4786       297.424       325.902    
  20  0.780222     -0.248176      -11.8389       11.8389       290.274       302.113    
  21  0.130712      -2.03476      -97.0656       97.0656       310.973       408.039    
  22  0.873397     -0.135365      -6.45741       6.45741       317.711       324.168    
  23  0.366975      -1.00246      -47.8212       47.8212       319.172       366.994    
  24  0.813244     -0.206724      -9.86152       9.86152       316.943       326.805    
  25  0.782660E-01  -2.54764      -121.532       121.532       316.952       438.484    
  26  0.700327     -0.356208      -16.9925       16.9925       315.769       332.762    
  27  0.437766     -0.826071      -39.4067       39.4067       318.025       357.432    
  28  0.508966E-01  -2.97796      -142.060       142.060       318.052       460.112    
  29  0.276850      -1.28428      -61.2649       61.2649       326.468       387.733    
  30  0.792031     -0.233154      -11.1223       11.1223       256.750       267.872    
  31  0.174747      -1.74441      -83.2152       83.2152       317.736       400.951    
  32  0.469718     -0.755623      -36.0461       36.0461       322.677       358.723    
  33  0.252316      -1.37707      -65.6915       65.6915       314.057       379.748    
  34  0.980061     -0.201409E-01 -0.960795      0.960795       257.925       258.886    
  35  0.838300     -0.176379      -8.41396       8.41396       313.807       322.221    
  36  0.369385     -0.995915      -47.5089       47.5089       325.716       373.225    
  37  0.923139     -0.799751E-01  -3.81511       3.81511       333.837       337.652    
  38  0.592446     -0.523496      -24.9727       24.9727       318.025       342.998    
  39  0.348787      -1.05329      -50.2460       50.2460       317.931       368.177    
  40  0.569584     -0.562850      -26.8501       26.8501       278.568       305.418    
  41  0.543034E-01  -2.91317      -138.969       138.969       314.940       453.909    
  42  0.582662     -0.540148      -25.7671       25.7671       325.264       351.031    
  43  0.702825     -0.352648      -16.8226       16.8226       269.425       286.248    
  44  0.941375     -0.604140E-01  -2.88198       2.88198       317.896       320.778    
  45  0.258857      -1.35148      -64.4707       64.4707       254.566       319.037    
  46  0.116535      -2.14956      -102.542       102.542       294.012       396.554    
  47  0.102671      -2.27622      -108.584       108.584       318.381       426.966    
  48  0.172023      -1.76013      -83.9646       83.9646       276.452       360.417    
  49  0.434982E-01  -3.13504      -149.553       149.553       313.360       462.913    
  50  0.852122     -0.160026      -7.63385       7.63385       288.946       296.580    
  51  0.583521     -0.538675      -25.6968       25.6968       278.834       304.530    
  52  0.843374     -0.170345      -8.12609       8.12609       319.806       327.932    
  53  0.194743      -1.63607      -78.0469       78.0469       315.864       393.911    
  54  0.191808      -1.65126      -78.7712       78.7712       262.089       340.860    
  55  0.656555     -0.420749      -20.0713       20.0713       354.393       374.465    
  56  0.468384E-01  -3.06105      -146.024       146.024       344.821       490.844    
  57  0.812217     -0.207988      -9.92179       9.92179       318.008       327.930    
  58  0.852265     -0.159858      -7.62581       7.62581       318.942       326.568    
  59  0.340213      -1.07818      -51.4334       51.4334       282.959       334.392    
  60  0.655911     -0.421730      -20.1181       20.1181       319.305       339.423    
  61  0.329724      -1.10950      -52.9273       52.9273       319.358       372.285    
  62  0.362242      -1.01544      -48.4404       48.4404       313.757       362.198    
  63  0.273539      -1.29631      -61.8389       61.8389       291.059       352.897    
  64  0.524351     -0.645594      -30.7973       30.7973       329.961       360.759    
  65  0.817273     -0.201783      -9.62579       9.62579       269.945       279.571    
  66  0.642237     -0.442797      -21.1231       21.1231       320.091       341.214    
  67  0.276178      -1.28671      -61.3809       61.3809       318.671       380.052    
  68  0.721954     -0.325793      -15.5416       15.5416       421.746       437.287    
  69  0.676913     -0.390212      -18.6146       18.6146       411.198       429.813    
  70  0.148059      -1.91014      -91.1211       91.1211       424.873       515.995    
  71  0.692932     -0.366824      -17.4989       17.4989       325.871       343.370    
  72  0.749770     -0.287989      -13.7382       13.7382       290.928       304.666    
  73  0.513445     -0.666612      -31.7999       31.7999       319.594       351.394    
  74  0.483500E-01  -3.02929      -144.508       144.508       313.152       457.661    
  75  0.647196     -0.435106      -20.7562       20.7562       484.876       505.632    
  76  0.918831     -0.846529E-01  -4.03826       4.03826       319.053       323.091    
  77  0.442595     -0.815100      -38.8833       38.8833       332.461       371.345    
  78  0.887082E-01  -2.42240      -115.558       115.558       503.003       618.560    
  79  0.781747     -0.246224      -11.7458       11.7458       550.850       562.596    
loop,thermsimp(1:2)       56   93.3506       77.3648    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172        496.64         87.25          1.13         40.09          0.87          0.05        129.39
Just calling func    0   0        129.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    496.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       56
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       57
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      171     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -19.6579       19.6579       257.925       277.583    
   2  0.724212     -0.322671      -15.3926       15.3926       256.750       272.143    
   3  0.633711     -0.456163      -21.7607       21.7607       269.945       291.706    
   4  0.448566     -0.801700      -38.2441       38.2441       255.802       294.046    
   5  0.964228     -0.364273E-01  -1.73772       1.73772       269.425       271.163    
   6  0.714306     -0.336444      -16.0497       16.0497       277.887       293.937    
   7  0.528330     -0.638035      -30.4367       30.4367       287.140       317.577    
   8  0.654127     -0.424453      -20.2480       20.2480       288.946       309.194    
   9  0.368899     -0.997232      -47.5717       47.5717       272.208       319.779    
  10  0.227697      -1.47974      -70.5892       70.5892       290.274       360.863    
  11  0.612266     -0.490588      -23.4029       23.4029       300.437       323.840    
  12  0.313777      -1.15907      -55.2922       55.2922       278.834       334.126    
  13  0.258526      -1.35276      -64.5318       64.5318       290.928       355.459    
  14  0.119298      -2.12613      -101.425       101.425       278.568       379.992    
  15  0.213331      -1.54491      -73.6980       73.6980       284.323       358.021    
  16  0.294218      -1.22343      -58.3625       58.3625       254.566       312.928    
  17  0.352988      -1.04132      -49.6750       49.6750       317.896       367.571    
  18  0.348706      -1.05353      -50.2572       50.2572       313.807       364.064    
  19  0.449249     -0.800179      -38.1715       38.1715       319.053       357.224    
  20  0.879121     -0.128833      -6.14582       6.14582       311.882       318.028    
  21  0.464081     -0.767695      -36.6220       36.6220       317.711       354.332    
  22  0.497582     -0.697995      -33.2970       33.2970       305.147       338.444    
  23  0.920207     -0.831566E-01  -3.96688       3.96688       297.424       301.391    
  24  0.811773     -0.208535      -9.94791       9.94791       318.942       328.890    
  25  0.190651      -1.65731      -79.0599       79.0599       316.943       396.003    
  26  0.645174     -0.438235      -20.9055       20.9055       318.008       338.914    
  27  0.668343     -0.402954      -19.2224       19.2224       319.806       339.029    
  28  0.765111     -0.267735      -12.7720       12.7720       315.769       328.541    
  29  0.991779     -0.825499E-02 -0.393794      0.393794       282.959       283.353    
  30  0.136888      -1.98859      -94.8635       94.8635       281.545       376.408    
  31  0.645145E-01  -2.74086      -130.750       130.750       333.837       464.587    
  32  0.408515E-01  -3.19781      -152.548       152.548       319.305       471.853    
  33  0.264109      -1.33140      -63.5126       63.5126       262.089       325.601    
  34  0.382737     -0.960407      -45.8150       45.8150       320.091       365.906    
  35  0.402738E-02  -5.51464      -263.069       263.069       275.738       538.807    
  36  0.318074      -1.14547      -54.6432       54.6432       318.025       372.668    
  37  0.245237      -1.40553      -67.0492       67.0492       325.871       392.920    
  38  0.519766     -0.654377      -31.2163       31.2163       255.057       286.273    
  39  0.255147      -1.36592      -65.1594       65.1594       325.264       390.423    
  40  0.833841     -0.181712      -8.66835       8.66835       319.594       328.262    
  41  0.696242E-01  -2.66464      -127.114       127.114       291.059       418.172    
  42  0.487295     -0.718886      -34.2936       34.2936       277.109       311.402    
  43  0.276229E-01  -3.58911      -171.214       171.214       270.037       441.251    
  44  0.638327     -0.448905      -21.4145       21.4145       283.393       304.808    
  45  0.206684      -1.57657      -75.2081       75.2081       318.025       393.233    
  46  0.736003     -0.306521      -14.6222       14.6222       322.677       337.299    
  47  0.217444E-01  -3.82840      -182.629       182.629       276.452       459.081    
  48  0.956929     -0.440260E-01  -2.10021       2.10021       329.961       332.062    
  49  0.883561     -0.123795      -5.90547       5.90547       313.757       319.663    
  50  0.700901     -0.355388      -16.9534       16.9534       312.134       329.087    
  51  0.201997      -1.59950      -76.3022       76.3022       319.172       395.475    
  52  0.412152     -0.886362      -42.2828       42.2828       308.952       351.235    
  53  0.890450     -0.116029      -5.53502       5.53502       317.931       323.466    
  54  0.417423     -0.873654      -41.6766       41.6766       332.461       374.138    
  55  0.426501     -0.852140      -40.6503       40.6503       319.358       360.008    
  56  0.983871     -0.162605E-01 -0.775686      0.775686       325.716       326.491    
  57  0.384350     -0.956201      -45.6144       45.6144       354.393       400.008    
  58  0.155937      -1.85830      -88.6481       88.6481       314.057       402.705    
  59  0.361264      -1.01815      -48.5695       48.5695       318.671       367.240    
  60  0.538177     -0.619568      -29.5557       29.5557       326.468       356.024    
  61  0.514362E-01  -2.96741      -141.557       141.557       315.864       457.421    
  62  0.994100     -0.591759E-02 -0.282291      0.282291       294.012       294.294    
  63  0.622557     -0.473920      -22.6078       22.6078       317.736       340.344    
  64  0.703606     -0.351537      -16.7697       16.7697       310.973       327.743    
  65  0.151986      -1.88396      -89.8722       89.8722       318.381       408.253    
  66  0.105360      -2.25037      -107.351       107.351       411.198       518.549    
  67  0.572995     -0.556878      -26.5652       26.5652       421.746       448.311    
  68  0.201032      -1.60429      -76.5308       76.5308       316.952       393.483    
  69  0.786519     -0.240139      -11.4555       11.4555       314.940       326.396    
  70  0.251709E-01  -3.68207      -175.648       175.648       313.152       488.801    
  71  0.574605     -0.554072      -26.4313       26.4313       318.052       344.484    
  72  0.842012     -0.171961      -8.20319       8.20319       313.360       321.563    
  73  0.705908E-02  -4.95344      -236.298       236.298       304.193       540.491    
  74  0.322746      -1.13089      -53.9478       53.9478       344.821       398.769    
  75  0.747270E-01  -2.59391      -123.740       123.740       484.876       608.615    
  76  0.356993      -1.03004      -49.1368       49.1368       424.873       474.010    
  77  0.879165     -0.128782      -6.14341       6.14341       282.662       288.805    
  78  0.324892      -1.12426      -53.6315       53.6315       550.850       604.481    
  79  0.327990      -1.11477      -53.1789       53.1789       496.644       549.823    
loop,thermsimp(1:2)       57   19.6579       15.3926    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173        353.46         87.34          1.11         40.09          0.88          0.05        129.47
Just calling func    0   0        129.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    353.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       57
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       58
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      172     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -135.429       135.429       269.425       404.854    
   2  0.104884      -2.25490      -107.567       107.567       256.750       364.318    
   3  0.784254     -0.243023      -11.5931       11.5931       257.925       269.518    
   4  0.813133     -0.206861      -9.86805       9.86805       282.959       292.827    
   5  0.490778     -0.711764      -33.9538       33.9538       255.057       289.011    
   6  0.168573      -1.78039      -84.9311       84.9311       282.662       367.593    
   7  0.450161     -0.798149      -38.0747       38.0747       269.945       308.020    
   8  0.828233     -0.188461      -8.99029       8.99029       277.887       286.878    
   9  0.994731     -0.528342E-02 -0.252039      0.252039       255.802       256.054    
  10  0.813340     -0.206606      -9.85589       9.85589       294.012       303.868    
  11  0.776133     -0.253432      -12.0897       12.0897       297.424       309.513    
  12  0.729556     -0.315319      -15.0419       15.0419       283.393       298.435    
  13  0.530451     -0.634028      -30.2455       30.2455       288.946       319.191    
  14  0.752564E-01  -2.58685      -123.403       123.403       277.109       400.511    
  15  0.918457     -0.850597E-01  -4.05767       4.05767       254.566       258.624    
  16  0.162642      -1.81621      -86.6399       86.6399       287.140       373.780    
  17  0.725851     -0.320411      -15.2848       15.2848       311.882       327.167    
  18  0.322292      -1.13230      -54.0149       54.0149       313.757       367.772    
  19  0.838064     -0.176661      -8.42740       8.42740       272.208       280.635    
  20  0.346062E-01  -3.36372      -160.462       160.462       313.360       473.822    
  21  0.442915     -0.814377      -38.8489       38.8489       317.931       356.780    
  22  0.143708      -1.93997      -92.5440       92.5440       300.437       392.981    
  23  0.940845     -0.609769E-01  -2.90883       2.90883       262.089       264.997    
  24  0.972503     -0.278816E-01  -1.33006       1.33006       314.940       316.270    
  25  0.291831      -1.23158      -58.7511       58.7511       325.716       384.467    
  26  0.211976      -1.55128      -74.0020       74.0020       310.973       384.975    
  27  0.695427     -0.363229      -17.3274       17.3274       319.594       336.921    
  28  0.982540E-01  -2.32020      -110.682       110.682       315.769       426.451    
  29  0.730742     -0.313695      -14.9644       14.9644       318.942       333.906    
  30  0.417794     -0.872766      -41.6342       41.6342       312.134       353.768    
  31  0.868385     -0.141121      -6.73199       6.73199       329.961       336.693    
  32  0.300897      -1.20099      -57.2916       57.2916       278.834       336.125    
  33  0.917219     -0.864093E-01  -4.12205       4.12205       322.677       326.799    
  34  0.304394      -1.18943      -56.7404       56.7404       305.147       361.887    
  35  0.856500     -0.154901      -7.38939       7.38939       318.008       325.398    
  36  0.310652      -1.16908      -55.7696       55.7696       319.806       375.576    
  37  0.846275     -0.166911      -7.96230       7.96230       317.736       325.698    
  38  0.206825      -1.57588      -75.1756       75.1756       318.052       393.228    
  39  0.606376     -0.500256      -23.8641       23.8641       308.952       332.816    
  40  0.840015     -0.174336      -8.31646       8.31646       317.711       326.027    
  41  0.348835      -1.05315      -50.2395       50.2395       290.928       341.167    
  42  0.857325     -0.153939      -7.34346       7.34346       326.468       333.812    
  43  0.308035E-01  -3.48013      -166.015       166.015       319.053       485.068    
  44  0.400632     -0.914711      -43.6352       43.6352       284.323       327.959    
  45  0.242237      -1.41784      -67.6362       67.6362       319.358       386.994    
  46  0.407771     -0.897050      -42.7927       42.7927       290.274       333.067    
  47  0.430691     -0.842364      -40.1839       40.1839       313.807       353.991    
  48  0.415503     -0.878266      -41.8966       41.8966       320.091       361.988    
  49  0.593575     -0.521591      -24.8819       24.8819       318.671       343.553    
  50  0.973620     -0.267342E-01  -1.27532       1.27532       317.896       319.171    
  51  0.510257     -0.672840      -32.0970       32.0970       318.025       350.122    
  52  0.796475     -0.227560      -10.8555       10.8555       332.461       343.317    
  53  0.213576      -1.54376      -73.6433       73.6433       281.545       355.188    
  54  0.865534     -0.144409      -6.88885       6.88885       278.568       285.456    
  55  0.920053     -0.833240E-01  -3.97487       3.97487       325.264       329.239    
  56  0.534624     -0.626192      -29.8717       29.8717       325.871       355.743    
  57  0.963687     -0.369888E-01  -1.76450       1.76450       318.025       319.790    
  58  0.498139     -0.696877      -33.2437       33.2437       316.952       350.195    
  59  0.987058     -0.130264E-01 -0.621409      0.621409       319.172       319.794    
  60  0.488276E-01  -3.01946      -144.040       144.040       316.943       460.983    
  61  0.597381E-01  -2.81779      -134.419       134.419       344.821       479.240    
  62  0.589016     -0.529301      -25.2497       25.2497       354.393       379.643    
  63  0.680503     -0.384923      -18.3623       18.3623       314.057       332.419    
  64  0.793494     -0.231310      -11.0344       11.0344       318.381       329.415    
  65  0.269936E-01  -3.61216      -172.314       172.314       291.059       463.372    
  66  0.392490     -0.935245      -44.6147       44.6147       270.037       314.651    
  67  0.150218      -1.89567      -90.4305       90.4305       421.746       512.176    
  68  0.959939     -0.408856E-01  -1.95040       1.95040       315.864       317.815    
  69  0.559076     -0.581471      -27.7383       27.7383       276.452       304.191    
  70  0.820359     -0.198013      -9.44597       9.44597       333.837       343.283    
  71  0.876568     -0.131741      -6.28453       6.28453       319.305       325.590    
  72  0.338606      -1.08292      -51.6593       51.6593       424.873       476.533    
  73  0.877240     -0.130975      -6.24799       6.24799       313.152       319.400    
  74  0.746045     -0.292970      -13.9758       13.9758       411.198       425.174    
  75  0.933361     -0.689628E-01  -3.28978       3.28978       275.738       279.028    
  76  0.910624     -0.936254E-01  -4.46628       4.46628       304.193       308.659    
  77  0.901644     -0.103536      -4.93904       4.93904       496.644       501.583    
  78  0.596423     -0.516805      -24.6536       24.6536       550.850       575.503    
  79  0.353977      -1.03852      -49.5415       49.5415       353.465       403.006    
loop,thermsimp(1:2)       58   135.429       107.567    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174        396.52         87.43          1.12         40.25          0.64          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    396.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       58
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       59
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      173     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -52.8828       52.8828       255.802       308.685    
   2  0.939148     -0.627826E-01  -2.99497       2.99497       254.566       257.561    
   3  0.130906      -2.03328      -96.9950       96.9950       262.089       359.084    
   4  0.664370     -0.408916      -19.5068       19.5068       257.925       277.432    
   5  0.490908     -0.711498      -33.9412       33.9412       275.738       309.680    
   6  0.711731     -0.340055      -16.2219       16.2219       272.208       288.430    
   7  0.676080     -0.391444      -18.6734       18.6734       278.568       297.241    
   8  0.611139     -0.492432      -23.4908       23.4908       277.887       301.378    
   9  0.614246     -0.487359      -23.2489       23.2489       255.057       278.306    
  10  0.988045     -0.120275E-01 -0.573759      0.573759       282.959       283.533    
  11  0.232883      -1.45722      -69.5148       69.5148       283.393       352.908    
  12  0.450825     -0.796675      -38.0044       38.0044       294.012       332.016    
  13  0.493319     -0.706599      -33.7074       33.7074       276.452       310.160    
  14  0.191184      -1.65452      -78.9269       78.9269       269.945       348.872    
  15  0.894136     -0.111897      -5.33793       5.33793       304.193       309.531    
  16  0.391751     -0.937128      -44.7045       44.7045       297.424       342.128    
  17  0.236278      -1.44275      -68.8245       68.8245       270.037       338.861    
  18  0.496874E-01  -3.00200      -143.207       143.207       314.940       458.147    
  19  0.784524     -0.242678      -11.5767       11.5767       315.864       327.441    
  20  0.292328      -1.22988      -58.6699       58.6699       317.896       376.566    
  21  0.832247E-01  -2.48621      -118.602       118.602       288.946       407.547    
  22  0.423133     -0.860069      -41.0286       41.0286       313.152       354.181    
  23  0.234472      -1.45042      -69.1904       69.1904       318.025       387.216    
  24  0.868463     -0.141031      -6.72769       6.72769       319.172       325.900    
  25  0.122969      -2.09582      -99.9786       99.9786       318.008       417.987    
  26  0.811771     -0.208537      -9.94800       9.94800       319.305       329.253    
  27  0.786834     -0.239738      -11.4364       11.4364       317.736       329.173    
  28  0.163144      -1.81312      -86.4926       86.4926       317.711       404.203    
  29  0.571103     -0.560186      -26.7230       26.7230       322.677       349.400    
  30  0.769982     -0.261388      -12.4692       12.4692       311.882       324.351    
  31  0.471769     -0.751265      -35.8382       35.8382       284.323       320.162    
  32  0.584935     -0.536254      -25.5813       25.5813       325.264       350.845    
  33  0.416140     -0.876734      -41.8235       41.8235       318.381       360.205    
  34  0.106525E-01  -4.54196      -216.669       216.669       314.057       530.726    
  35  0.595424     -0.518482      -24.7335       24.7335       308.952       333.686    
  36  0.302400      -1.19600      -57.0539       57.0539       290.274       347.328    
  37  0.629701     -0.462510      -22.0635       22.0635       326.468       348.532    
  38  0.939026E-01  -2.36550      -112.843       112.843       318.942       431.785    
  39  0.911727     -0.924151E-01  -4.40855       4.40855       278.834       283.242    
  40  0.289502      -1.23959      -59.1333       59.1333       329.961       389.095    
  41  0.326571      -1.11911      -53.3856       53.3856       319.594       372.980    
  42  0.972366     -0.280231E-01  -1.33681       1.33681       290.928       292.264    
  43  0.823413     -0.194297      -9.26870       9.26870       333.837       343.106    
  44  0.790717     -0.234815      -11.2016       11.2016       332.461       343.663    
  45  0.167922      -1.78426      -85.1158       85.1158       318.671       403.786    
  46  0.804665     -0.217329      -10.3674       10.3674       318.025       328.393    
  47  0.154714      -1.86617      -89.0236       89.0236       316.952       405.975    
  48  0.240456      -1.42522      -67.9883       67.9883       312.134       380.122    
  49  0.351787      -1.04473      -49.8376       49.8376       313.807       363.645    
  50  0.666429E-01  -2.70841      -129.201       129.201       281.545       410.746    
  51  0.484113     -0.725437      -34.6061       34.6061       325.871       360.477    
  52  0.298509      -1.20896      -57.6717       57.6717       317.931       375.603    
  53  0.982136     -0.180253E-01 -0.859874      0.859874       305.147       306.007    
  54  0.799723     -0.223490      -10.6613       10.6613       320.091       330.752    
  55  0.559799     -0.580177      -27.6766       27.6766       256.750       284.427    
  56  0.492929     -0.707390      -33.7452       33.7452       282.662       316.407    
  57  0.655290     -0.422678      -20.1633       20.1633       313.757       333.921    
  58  0.426949     -0.851091      -40.6002       40.6002       287.140       327.740    
  59  0.575269     -0.552918      -26.3763       26.3763       319.806       346.183    
  60  0.252283      -1.37721      -65.6979       65.6979       354.393       420.091    
  61  0.628464     -0.464477      -22.1573       22.1573       325.716       347.873    
  62  0.847342E-01  -2.46824      -117.744       117.744       310.973       428.717    
  63  0.701567     -0.354439      -16.9081       16.9081       319.358       336.266    
  64  0.171664      -1.76222      -84.0645       84.0645       300.437       384.501    
  65  0.395346     -0.927995      -44.2689       44.2689       318.052       362.321    
  66  0.397662     -0.922153      -43.9902       43.9902       277.109       321.099    
  67  0.166798      -1.79097      -85.4360       85.4360       353.465       438.901    
  68  0.100957      -2.29306      -109.388       109.388       269.425       378.813    
  69  0.725220     -0.321280      -15.3263       15.3263       411.198       426.524    
  70  0.856561     -0.154829      -7.38594       7.38594       315.769       323.155    
  71  0.421738     -0.863372      -41.1861       41.1861       316.943       358.129    
  72  0.294072      -1.22393      -58.3861       58.3861       291.059       349.445    
  73  0.138461      -1.97717      -94.3184       94.3184       313.360       407.678    
  74  0.245131      -1.40596      -67.0698       67.0698       424.873       491.943    
  75  0.459231     -0.778203      -37.1232       37.1232       344.821       381.944    
  76  0.755534     -0.280330      -13.3728       13.3728       319.053       332.426    
  77  0.887422     -0.119434      -5.69747       5.69747       496.644       502.341    
  78  0.401297     -0.913054      -43.5561       43.5561       421.746       465.302    
  79  0.541207     -0.613953      -29.2879       29.2879       396.518       425.806    
loop,thermsimp(1:2)       59   52.8828       2.99497    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175        277.56         87.41          1.14         40.20          1.12          0.05        129.92
Just calling func    0   0        129.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176        289.78         87.56          1.16         39.94          0.86          0.04        129.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    277.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       59
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       60
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      175     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -56.7809       56.7809       254.566       311.347    
   2  0.843344     -0.170380      -8.12776       8.12776       257.925       266.053    
   3  0.457815     -0.781289      -37.2704       37.2704       255.057       292.327    
   4  0.933709     -0.685899E-01  -3.27200       3.27200       278.834       282.106    
   5  0.887159     -0.119731      -5.71160       5.71160       282.959       288.671    
   6  0.786211     -0.240530      -11.4742       11.4742       256.750       268.224    
   7  0.794803     -0.229661      -10.9557       10.9557       272.208       283.163    
   8  0.573435E-01  -2.85870      -136.371       136.371       290.928       427.298    
   9  0.647106     -0.435245      -20.7628       20.7628       278.568       299.330    
  10  0.110118      -2.20620      -105.244       105.244       277.887       383.132    
  11  0.339548      -1.08014      -51.5267       51.5267       305.147       356.674    
  12  0.635246     -0.453742      -21.6452       21.6452       255.802       277.447    
  13  0.488392     -0.716638      -34.1863       34.1863       304.193       338.379    
  14  0.602571     -0.506549      -24.1643       24.1643       275.738       299.903    
  15  0.710041     -0.342433      -16.3354       16.3354       276.452       292.788    
  16  0.585763     -0.534840      -25.5139       25.5139       282.662       308.176    
  17  0.288010      -1.24476      -59.3797       59.3797       284.323       343.703    
  18  0.455238     -0.786934      -37.5397       37.5397       277.109       314.649    
  19  0.723984     -0.322986      -15.4076       15.4076       315.769       331.177    
  20  0.554067     -0.590470      -28.1677       28.1677       311.882       340.050    
  21  0.646516     -0.436157      -20.8063       20.8063       319.172       339.979    
  22  0.271985      -1.30201      -62.1107       62.1107       315.864       377.975    
  23  0.901636E-02  -4.70871      -224.623       224.623       287.140       511.763    
  24  0.383616     -0.958114      -45.7057       45.7057       318.025       363.731    
  25  0.443516     -0.813022      -38.7842       38.7842       317.736       356.520    
  26  0.223023      -1.50048      -71.5787       71.5787       319.305       390.884    
  27  0.123255      -2.09350      -99.8677       99.8677       320.091       419.959    
  28  0.817485     -0.201523      -9.61341       9.61341       294.012       303.625    
  29  0.333893      -1.09693      -52.3279       52.3279       319.053       371.381    
  30  0.867877     -0.141706      -6.75990       6.75990       308.952       315.712    
  31  0.365747      -1.00581      -47.9811       47.9811       313.757       361.738    
  32  0.429445     -0.845262      -40.3222       40.3222       319.358       359.680    
  33  0.856620     -0.154761      -7.38269       7.38269       270.037       277.419    
  34  0.729532     -0.315352      -15.0435       15.0435       297.424       312.467    
  35  0.315845      -1.15251      -54.9788       54.9788       333.837       388.816    
  36  0.547596     -0.602217      -28.7280       28.7280       332.461       361.189    
  37  0.752130     -0.284846      -13.5883       13.5883       319.806       333.395    
  38  0.806451     -0.215112      -10.2617       10.2617       290.274       300.536    
  39  0.618613     -0.480275      -22.9109       22.9109       325.716       348.627    
  40  0.630350     -0.461480      -22.0143       22.0143       326.468       348.483    
  41  0.251741      -1.37935      -65.8004       65.8004       269.945       335.745    
  42  0.846504     -0.166640      -7.94935       7.94935       322.677       330.626    
  43  0.830791     -0.185377      -8.84316       8.84316       291.059       299.902    
  44  0.566838     -0.567681      -27.0805       27.0805       325.264       352.344    
  45  0.499450E-01  -2.99683      -142.960       142.960       283.393       426.353    
  46  0.976301     -0.239838E-01  -1.14412       1.14412       313.152       314.296    
  47  0.401049     -0.913672      -43.5856       43.5856       316.943       360.529    
  48  0.709931E-01  -2.64517      -126.185       126.185       262.089       388.273    
  49  0.920370E-02  -4.68815      -223.642       223.642       318.381       542.024    
  50  0.379723     -0.968314      -46.1922       46.1922       325.871       372.063    
  51  0.207569      -1.57229      -75.0043       75.0043       318.052       393.057    
  52  0.745673     -0.293468      -13.9995       13.9995       313.807       327.806    
  53  0.915877     -0.878737E-01  -4.19191       4.19191       319.594       323.786    
  54  0.836769     -0.178207      -8.50116       8.50116       317.931       326.433    
  55  0.769684E-01  -2.56436      -122.330       122.330       317.896       440.225    
  56  0.797754     -0.225955      -10.7789       10.7789       269.425       280.204    
  57  0.555189     -0.588446      -28.0711       28.0711       312.134       340.205    
  58  0.134224      -2.00825      -95.8010       95.8010       344.821       440.622    
  59  0.796234     -0.227862      -10.8699       10.8699       300.437       311.307    
  60  0.628721     -0.464068      -22.1378       22.1378       318.025       340.163    
  61  0.460391     -0.775679      -37.0028       37.0028       329.961       366.964    
  62  0.137302      -1.98558      -94.7194       94.7194       318.671       413.390    
  63  0.504249     -0.684686      -32.6621       32.6621       317.711       350.373    
  64  0.548486     -0.600594      -28.6506       28.6506       316.952       345.602    
  65  0.479259     -0.735514      -35.0868       35.0868       288.946       324.032    
  66  0.763784     -0.269471      -12.8548       12.8548       313.360       326.215    
  67  0.896024     -0.109788      -5.23730       5.23730       281.545       286.782    
  68  0.873307     -0.135468      -6.46233       6.46233       318.008       324.471    
  69  0.469885     -0.755268      -36.0291       36.0291       354.393       390.422    
  70  0.705401     -0.348988      -16.6481       16.6481       396.518       413.166    
  71  0.997081     -0.292289E-02 -0.139433      0.139433       411.198       411.337    
  72  0.204925      -1.58511      -75.6158       75.6158       310.973       386.589    
  73  0.676158     -0.391329      -18.6679       18.6679       318.942       337.610    
  74  0.273114      -1.29787      -61.9131       61.9131       353.465       415.378    
  75  0.777566     -0.251587      -12.0016       12.0016       314.940       326.942    
  76  0.329798      -1.10927      -52.9166       52.9166       421.746       474.662    
  77  0.214959      -1.53731      -73.3355       73.3355       424.873       498.209    
  78  0.715546     -0.334709      -15.9669       15.9669       496.644       512.611    
  79  0.790477     -0.235119      -11.2161       11.2161       277.562       288.778    
loop,thermsimp(1:2)       60   56.7809       8.12776    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177        270.95         87.34          1.13         40.04          1.34          0.05        129.89
Just calling func    0   0        129.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    270.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       60
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       61
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      176     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -8.90691       8.90691       257.925       266.832    
   2  0.735850     -0.306729      -14.6321       14.6321       256.750       271.382    
   3  0.828786     -0.187793      -8.95845       8.95845       270.037       278.995    
   4  0.592078     -0.524118      -25.0024       25.0024       255.802       280.804    
   5  0.691797E-01  -2.67105      -127.419       127.419       269.425       396.845    
   6  0.772335     -0.258337      -12.3236       12.3236       278.834       291.157    
   7  0.504563     -0.684063      -32.6324       32.6324       272.208       304.840    
   8  0.700615     -0.355797      -16.9728       16.9728       281.545       298.518    
   9  0.764596     -0.268408      -12.8041       12.8041       282.959       295.763    
  10  0.459614     -0.777368      -37.0834       37.0834       277.562       314.646    
  11  0.931193     -0.712882E-01  -3.40072       3.40072       255.057       258.458    
  12  0.502482E-01  -2.99078      -142.671       142.671       276.452       419.124    
  13  0.498197     -0.696760      -33.2381       33.2381       278.568       311.806    
  14  0.551534E-01  -2.89764      -138.228       138.228       291.059       429.287    
  15  0.172209      -1.75905      -83.9132       83.9132       275.738       359.652    
  16  0.238868E-01  -3.73443      -178.146       178.146       290.274       468.420    
  17  0.699366     -0.357581      -17.0580       17.0580       294.012       311.070    
  18  0.764093     -0.269066      -12.8355       12.8355       282.662       295.497    
  19  0.465633     -0.764357      -36.4627       36.4627       300.437       336.899    
  20  0.209906      -1.56110      -74.4703       74.4703       254.566       329.036    
  21  0.216891      -1.52836      -72.9085       72.9085       297.424       370.332    
  22  0.795854E-01  -2.53092      -120.735       120.735       313.152       433.887    
  23  0.701683     -0.354273      -16.9002       16.9002       277.109       294.009    
  24  0.574425     -0.554385      -26.4463       26.4463       308.952       335.398    
  25  0.674968     -0.393090      -18.7519       18.7519       319.594       338.346    
  26  0.684189     -0.379521      -18.1046       18.1046       288.946       307.050    
  27  0.541862     -0.612745      -29.2302       29.2302       318.008       347.239    
  28  0.668027     -0.403426      -19.2449       19.2449       313.360       332.605    
  29  0.353251      -1.04058      -49.6394       49.6394       317.931       367.571    
  30  0.778708     -0.250119      -11.9316       11.9316       314.940       326.872    
  31  0.829283     -0.187194      -8.92986       8.92986       313.807       322.737    
  32  0.679297     -0.386697      -18.4469       18.4469       322.677       341.123    
  33  0.536301     -0.623060      -29.7223       29.7223       315.769       345.492    
  34  0.247738      -1.39538      -66.5650       66.5650       319.806       386.371    
  35  0.271399      -1.30416      -62.2135       62.2135       269.945       332.159    
  36  0.284124      -1.25835      -60.0279       60.0279       318.942       378.970    
  37  0.664442     -0.408808      -19.5017       19.5017       304.193       323.694    
  38  0.874508     -0.134094      -6.39677       6.39677       319.172       325.569    
  39  0.916444     -0.872538E-01  -4.16234       4.16234       311.882       316.044    
  40  0.295165      -1.22022      -58.2091       58.2091       318.025       376.234    
  41  0.242592      -1.41637      -67.5664       67.5664       312.134       379.700    
  42  0.396124     -0.926028      -44.1751       44.1751       284.323       328.498    
  43  0.509193E-01  -2.97751      -142.039       142.039       316.952       458.990    
  44  0.778911     -0.249858      -11.9192       11.9192       326.468       338.387    
  45  0.351009      -1.04694      -49.9431       49.9431       325.716       375.659    
  46  0.480934     -0.732025      -34.9204       34.9204       317.711       352.631    
  47  0.908579     -0.958731E-01  -4.57351       4.57351       325.264       329.837    
  48  0.898885     -0.106600      -5.08522       5.08522       317.736       322.821    
  49  0.561121     -0.577819      -27.5641       27.5641       305.147       332.711    
  50  0.851109     -0.161215      -7.69058       7.69058       319.358       327.049    
  51  0.975854     -0.244425E-01  -1.16600       1.16600       316.943       318.109    
  52  0.187829      -1.67223      -79.7715       79.7715       332.461       412.233    
  53  0.962131     -0.386049E-01  -1.84160       1.84160       313.757       315.599    
  54  0.823812     -0.193813      -9.24562       9.24562       318.025       327.271    
  55  0.765207     -0.267609      -12.7660       12.7660       329.961       342.727    
  56  0.207984      -1.57030      -74.9090       74.9090       319.053       393.962    
  57  0.675792     -0.391869      -18.6936       18.6936       325.871       344.565    
  58  0.641275     -0.444296      -21.1946       21.1946       315.864       337.059    
  59  0.621346E-01  -2.77845      -132.543       132.543       277.887       410.430    
  60  0.911977E-01  -2.39473      -114.237       114.237       310.973       425.211    
  61  0.697078     -0.360859      -17.2143       17.2143       262.089       279.303    
  62  0.760976     -0.273154      -13.0305       13.0305       333.837       346.868    
  63  0.812117     -0.208111      -9.92768       9.92768       354.393       364.321    
  64  0.654868     -0.423322      -20.1941       20.1941       319.305       339.499    
  65  0.263345E-02  -5.93946      -283.335       283.335       318.052       601.387    
  66  0.180895      -1.70984      -81.5656       81.5656       411.198       492.764    
  67  0.830100     -0.186209      -8.88287       8.88287       396.518       405.401    
  68  0.396842E-01  -3.22680      -153.931       153.931       318.671       472.601    
  69  0.862274     -0.148182      -7.06883       7.06883       353.465       360.534    
  70  0.362095      -1.01585      -48.4598       48.4598       320.091       368.551    
  71  0.156544      -1.85442      -88.4629       88.4629       283.393       371.856    
  72  0.103594      -2.26727      -108.158       108.158       290.928       399.085    
  73  0.147771      -1.91209      -91.2140       91.2140       317.896       409.110    
  74  0.820171     -0.198243      -9.45693       9.45693       344.821       354.278    
  75  0.705290     -0.349146      -16.6556       16.6556       421.746       438.401    
  76  0.967342     -0.332035E-01  -1.58393       1.58393       424.873       426.457    
  77  0.895107     -0.110812      -5.28615       5.28615       287.140       292.426    
  78  0.117086      -2.14485      -102.317       102.317       496.644       598.961    
  79  0.612222     -0.490660      -23.4063       23.4063       270.947       294.353    
loop,thermsimp(1:2)       61   8.90691       14.6321    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178        269.28         87.39          1.13         40.15          0.93          0.05        129.64
Just calling func    0   0        129.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179        270.69         87.50          1.17         40.11          0.84          0.05        129.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    269.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       61
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       62
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      178     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01  -4.11286       4.11286       255.057       259.170    
   2  0.899579E-01  -2.40841      -114.890       114.890       257.925       372.816    
   3  0.997625     -0.237830E-02 -0.113454      0.113454       256.750       256.864    
   4  0.224083      -1.49574      -71.3525       71.3525       270.037       341.389    
   5  0.120769      -2.11388      -100.840       100.840       262.089       362.929    
   6  0.302676E-01  -3.49768      -166.852       166.852       255.802       422.654    
   7  0.315161      -1.15467      -55.0822       55.0822       278.834       333.916    
   8  0.155895      -1.85857      -88.6610       88.6610       287.140       375.801    
   9  0.467639     -0.760060      -36.2577       36.2577       277.109       313.366    
  10  0.277823      -1.28077      -61.0975       61.0975       270.947       332.045    
  11  0.712282     -0.339281      -16.1850       16.1850       282.662       298.847    
  12  0.929560     -0.730437E-01  -3.48446       3.48446       282.959       286.443    
  13  0.499024     -0.695101      -33.1589       33.1589       281.545       314.704    
  14  0.940347     -0.615066E-01  -2.93410       2.93410       272.208       275.142    
  15  0.714006     -0.336864      -16.0697       16.0697       288.946       305.015    
  16  0.162603      -1.81644      -86.6512       86.6512       294.012       380.663    
  17  0.663729     -0.409881      -19.5529       19.5529       278.568       298.120    
  18  0.314148      -1.15789      -55.2358       55.2358       277.562       332.798    
  19  0.497386     -0.698388      -33.3158       33.3158       313.757       347.073    
  20  0.368387     -0.998622      -47.6381       47.6381       311.882       359.520    
  21  0.326342      -1.11981      -53.4191       53.4191       316.943       370.362    
  22  0.442952     -0.814294      -38.8449       38.8449       313.807       352.652    
  23  0.929694     -0.729000E-01  -3.47761       3.47761       317.736       321.214    
  24  0.945450E-01  -2.35868      -112.518       112.518       304.193       416.711    
  25  0.407158     -0.898555      -42.8645       42.8645       319.172       362.037    
  26  0.706679     -0.347179      -16.5618       16.5618       314.940       331.502    
  27  0.657848     -0.418781      -19.9775       19.9775       319.358       339.335    
  28  0.968040     -0.324817E-01  -1.54950       1.54950       318.025       319.575    
  29  0.330387      -1.10749      -52.8314       52.8314       284.323       337.155    
  30  0.756161     -0.279501      -13.3333       13.3333       254.566       267.899    
  31  0.307772      -1.17840      -56.2139       56.2139       325.264       381.478    
  32  0.759008E-01  -2.57833      -122.996       122.996       269.945       392.941    
  33  0.615618E-01  -2.78771      -132.984       132.984       313.360       446.344    
  34  0.545984     -0.605166      -28.8687       28.8687       305.147       334.016    
  35  0.339865      -1.07921      -51.4822       51.4822       308.952       360.434    
  36  0.816477     -0.202757      -9.67228       9.67228       300.437       310.109    
  37  0.932889     -0.694691E-01  -3.31394       3.31394       315.864       319.178    
  38  0.667042     -0.404902      -19.3154       19.3154       319.594       338.909    
  39  0.583049     -0.539484      -25.7354       25.7354       326.468       352.204    
  40  0.210192      -1.55973      -74.4052       74.4052       319.305       393.710    
  41  0.158846      -1.83982      -87.7665       87.7665       322.677       410.443    
  42  0.360401      -1.02054      -48.6835       48.6835       329.961       378.645    
  43  0.508154     -0.676971      -32.2941       32.2941       325.871       358.165    
  44  0.873303     -0.135473      -6.46257       6.46257       315.769       322.232    
  45  0.650524     -0.429977      -20.5115       20.5115       333.837       354.349    
  46  0.805601     -0.216166      -10.3119       10.3119       318.008       328.320    
  47  0.312590E-03  -8.07062      -384.999       384.999       317.711       702.709    
  48  0.892261     -0.113997      -5.43808       5.43808       344.821       350.259    
  49  0.504672     -0.683846      -32.6220       32.6220       275.738       308.360    
  50  0.269834      -1.30995      -62.4894       62.4894       353.465       415.954    
  51  0.752889     -0.283838      -13.5401       13.5401       354.393       367.933    
  52  0.952800     -0.483498E-01  -2.30647       2.30647       317.931       320.238    
  53  0.147189E-01  -4.21863      -201.244       201.244       320.091       521.335    
  54  0.213392      -1.54462      -73.6844       73.6844       297.424       371.108    
  55  0.278061      -1.27992      -61.0568       61.0568       283.393       344.450    
  56  0.668800     -0.402271      -19.1898       19.1898       325.716       344.906    
  57  0.674989     -0.393058      -18.7504       18.7504       318.025       336.776    
  58  0.186370      -1.68002      -80.1433       80.1433       318.942       399.085    
  59  0.133078      -2.01682      -96.2097       96.2097       312.134       408.343    
  60  0.519821     -0.654270      -31.2112       31.2112       319.806       351.017    
  61  0.136847      -1.98889      -94.8776       94.8776       319.053       413.931    
  62  0.604880     -0.502725      -23.9819       23.9819       269.425       293.407    
  63  0.301519      -1.19892      -57.1931       57.1931       290.928       348.121    
  64  0.531506     -0.632040      -30.1507       30.1507       396.518       426.669    
  65  0.554963     -0.588854      -28.0905       28.0905       317.896       345.986    
  66  0.264726      -1.32906      -63.4012       63.4012       277.887       341.289    
  67  0.520437     -0.653087      -31.1547       31.1547       332.461       363.616    
  68  0.457095     -0.782865      -37.3456       37.3456       276.452       313.798    
  69  0.349515      -1.05121      -50.1467       50.1467       310.973       361.120    
  70  0.624446E-01  -2.77348      -132.305       132.305       424.873       557.179    
  71  0.659983     -0.415541      -19.8229       19.8229       291.059       310.881    
  72  0.171300      -1.76434      -84.1656       84.1656       313.152       397.318    
  73  0.458973E-01  -3.08135      -146.992       146.992       421.746       568.738    
  74  0.669804     -0.400770      -19.1183       19.1183       316.952       336.070    
  75  0.664636     -0.408516      -19.4877       19.4877       290.274       309.762    
  76  0.798406     -0.225138      -10.7399       10.7399       318.671       329.411    
  77  0.457212     -0.782608      -37.3333       37.3333       411.198       448.531    
  78  0.807424     -0.213906      -10.2041       10.2041       496.644       506.848    
  79  0.740332     -0.300657      -14.3425       14.3425       269.284       283.627    
loop,thermsimp(1:2)       62   4.11286       114.890    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180        287.54         87.29          1.11         40.37          0.64          0.05        129.45
Just calling func    0   0        129.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181        632.01         87.33          1.12         40.06          0.98          0.05        129.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    632.01        1.446      4.647      6.234     -102.6     0.8406    
                     -0.4217      4.103     -99.70      3.742     0.7377    
                       1.622     -1.537      1.497    -0.1747E+05 -2.423    
                      -1.050      0.000      0.000      0.000     -1.221    

                      -2.500     0.5283E+05 0.4326E+05 -4369.    -0.8945E+05
                      -2.251     -6.179     -4.747     -7.275      3.014    
                      -14.14     -3.076      1017.      0.000      5450.    

                       6726.      6085.      6613.     0.1229E+05  1756.    
                       2541.     0.1097    -0.8007E-01  0.000    -0.4485    
                     -0.6151E-01-0.1166    -0.1389    -0.2168     0.1744E-01

                      -1.604    -0.1136E-01  0.000    -0.5178E-01 0.3219E-01
                      0.8541E-01 0.7841E-01 0.1704E-01-0.3819    -0.1487    
                     -0.2834E-02-0.2576E-01-0.5652E-01-0.3189      0.000    

                      -1.993     -1.469     0.9983     0.8283    -0.4539    
                      0.1717      9.256      9.143    -0.1086E+05 -2.343    
                     -0.7818    -0.5761      9.373      8.599    -0.1000E+05

                      -1.207     0.2365E-02-0.7607      8.804      9.079    
                     -0.1000E+05 -2.343    -0.5187    -0.5927      10.17    
                       8.412    -0.1000E+05 -2.343    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    287.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       62
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       63
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      180     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -23.0204       23.0204       256.750       279.771    
   2  0.828850     -0.187716      -8.95474       8.95474       255.057       264.012    
   3  0.138898      -1.97402      -94.1681       94.1681       254.566       348.734    
   4  0.174947      -1.74327      -83.1607       83.1607       272.208       355.368    
   5  0.452367E-01  -3.09585      -147.684       147.684       269.284       416.968    
   6  0.982229     -0.179305E-01 -0.855351      0.855351       282.959       283.814    
   7  0.855728     -0.155803      -7.43239       7.43239       269.425       276.858    
   8  0.350750      -1.04768      -49.9784       49.9784       278.568       328.546    
   9  0.880054     -0.127772      -6.09521       6.09521       282.662       288.757    
  10  0.106511      -2.23950      -106.833       106.833       288.946       395.778    
  11  0.336060      -1.09047      -52.0194       52.0194       275.738       327.758    
  12  0.904819     -0.100020      -4.77134       4.77134       290.274       295.045    
  13  0.765597     -0.267099      -12.7416       12.7416       300.437       313.178    
  14  0.551789     -0.594589      -28.3641       28.3641       291.059       319.423    
  15  0.832435     -0.183400      -8.74886       8.74886       277.109       285.858    
  16  0.353494      -1.03989      -49.6067       49.6067       276.452       326.059    
  17  0.510104     -0.673140      -32.1113       32.1113       281.545       313.656    
  18  0.523162     -0.647863      -30.9055       30.9055       315.864       346.770    
  19  0.953043     -0.480957E-01  -2.29435       2.29435       318.025       320.320    
  20  0.267001E-01  -3.62309      -172.835       172.835       317.931       490.766    
  21  0.280924      -1.26967      -60.5681       60.5681       317.736       378.304    
  22  0.956868     -0.440901E-01  -2.10327       2.10327       315.769       317.872    
  23  0.779725     -0.248814      -11.8694       11.8694       318.008       329.878    
  24  0.901061     -0.104183      -4.96991       4.96991       318.671       323.641    
  25  0.533391     -0.628501      -29.9819       29.9819       314.940       344.922    
  26  0.642536     -0.442333      -21.1010       21.1010       270.947       292.048    
  27  0.520565E-01  -2.95543      -140.985       140.985       277.562       418.547    
  28  0.330080      -1.10842      -52.8758       52.8758       278.834       331.709    
  29  0.280801      -1.27011      -60.5890       60.5890       305.147       365.736    
  30  0.144013      -1.93785      -92.4428       92.4428       316.952       409.395    
  31  0.201537      -1.60178      -76.4110       76.4110       318.025       394.436    
  32  0.920188     -0.831777E-01  -3.96789       3.96789       284.323       288.291    
  33  0.747222     -0.291393      -13.9005       13.9005       319.594       333.494    
  34  0.697959     -0.359595      -17.1540       17.1540       319.358       336.512    
  35  0.492949     -0.707349      -33.7432       33.7432       277.887       311.631    
  36  0.378001     -0.972857      -46.4090       46.4090       270.037       316.446    
  37  0.936484     -0.656225E-01  -3.13044       3.13044       283.393       286.524    
  38  0.458232     -0.780381      -37.2271       37.2271       325.716       362.943    
  39  0.286796      -1.24898      -59.5813       59.5813       317.896       377.477    
  40  0.524458     -0.645389      -30.7875       30.7875       313.757       344.545    
  41  0.126679      -2.06610      -98.5607       98.5607       290.928       389.488    
  42  0.645270     -0.438086      -20.8983       20.8983       344.821       365.719    
  43  0.996049     -0.395919E-02 -0.188869      0.188869       319.806       319.995    
  44  0.470695     -0.753545      -35.9469       35.9469       326.468       362.415    
  45  0.783048     -0.244561      -11.6665       11.6665       313.807       325.473    
  46  0.682425     -0.382103      -18.2277       18.2277       333.837       352.065    
  47  0.623779     -0.471960      -22.5143       22.5143       325.871       348.385    
  48  0.138146      -1.97945      -94.4271       94.4271       311.882       406.309    
  49  0.317697      -1.14666      -54.6998       54.6998       308.952       363.652    
  50  0.215616      -1.53426      -73.1898       73.1898       310.973       384.163    
  51  0.392653     -0.934829      -44.5949       44.5949       319.172       363.767    
  52  0.311957      -1.16489      -55.5697       55.5697       262.089       317.658    
  53  0.665567     -0.407116      -19.4209       19.4209       332.461       351.882    
  54  0.124333      -2.08479      -99.4524       99.4524       354.393       453.846    
  55  0.175373      -1.74084      -83.0446       83.0446       316.943       399.988    
  56  0.712195E-01  -2.64199      -126.033       126.033       297.424       423.457    
  57  0.626551E-01  -2.77011      -132.145       132.145       257.925       390.070    
  58  0.869671     -0.139640      -6.66136       6.66136       287.140       293.801    
  59  0.112950      -2.18081      -104.033       104.033       329.961       433.994    
  60  0.837299     -0.177574      -8.47093       8.47093       294.012       302.483    
  61  0.380546     -0.966149      -46.0889       46.0889       325.264       371.353    
  62  0.225371      -1.49001      -71.0790       71.0790       269.945       341.024    
  63  0.556139     -0.586737      -27.9896       27.9896       319.305       347.295    
  64  0.909618     -0.947309E-01  -4.51902       4.51902       313.152       317.671    
  65  0.432012     -0.839301      -40.0378       40.0378       318.942       358.980    
  66  0.554192     -0.590244      -28.1568       28.1568       312.134       340.290    
  67  0.264884      -1.32846      -63.3727       63.3727       322.677       386.049    
  68  0.667330     -0.404471      -19.2948       19.2948       319.053       338.348    
  69  0.445504     -0.808549      -38.5708       38.5708       353.465       392.036    
  70  0.194275      -1.63848      -78.1618       78.1618       304.193       382.355    
  71  0.886150     -0.120869      -5.76589       5.76589       255.802       261.568    
  72  0.487114     -0.719257      -34.3113       34.3113       396.518       430.830    
  73  0.195816E-01  -3.93317      -187.627       187.627       313.360       500.987    
  74  0.988505     -0.115613E-01 -0.551518      0.551518       411.198       411.750    
  75  0.632839     -0.457539      -21.8263       21.8263       496.644       518.470    
  76  0.535386     -0.624768      -29.8038       29.8038       320.091       349.895    
  77  0.419089     -0.869672      -41.4866       41.4866       424.873       466.360    
  78  0.778945     -0.249814      -11.9171       11.9171       421.746       433.663    
  79  0.328817      -1.11225      -53.0587       53.0587       287.540       340.599    
loop,thermsimp(1:2)       63   23.0204       8.95474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182        459.44         87.34          1.11         40.02          1.02          0.05        129.55
Just calling func    0   0        129.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    459.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       63
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       64
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      181     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -9.66810       9.66810       255.802       265.470    
   2  0.209930      -1.56098      -74.4647       74.4647       255.057       329.522    
   3  0.710991     -0.341096      -16.2716       16.2716       269.425       285.697    
   4  0.967365     -0.331789E-01  -1.58276       1.58276       256.750       258.333    
   5  0.650635E-01  -2.73239      -130.345       130.345       282.959       413.304    
   6  0.578340     -0.547593      -26.1223       26.1223       277.109       303.231    
   7  0.928890E-01  -2.37635      -113.361       113.361       283.393       396.754    
   8  0.486974     -0.719546      -34.3250       34.3250       284.323       318.648    
   9  0.560625     -0.578703      -27.6063       27.6063       282.662       310.268    
  10  0.552834     -0.592698      -28.2739       28.2739       270.947       299.221    
  11  0.744529E-01  -2.59759      -123.915       123.915       287.140       411.055    
  12  0.937600     -0.644318E-01  -3.07364       3.07364       290.274       293.348    
  13  0.154459      -1.86783      -89.1024       89.1024       294.012       383.114    
  14  0.186893E-02  -6.28239      -299.694       299.694       277.887       577.581    
  15  0.250797      -1.38311      -65.9797       65.9797       300.437       366.416    
  16  0.924847E-01  -2.38071      -113.569       113.569       281.545       395.114    
  17  0.476680     -0.740911      -35.3442       35.3442       270.037       305.381    
  18  0.266527      -1.32228      -63.0776       63.0776       262.089       325.166    
  19  0.369755     -0.994916      -47.4612       47.4612       313.152       360.613    
  20  0.595561     -0.518252      -24.7226       24.7226       315.769       340.492    
  21  0.636070     -0.452447      -21.5835       21.5835       291.059       312.642    
  22  0.447294     -0.804540      -38.3796       38.3796       319.806       358.186    
  23  0.964945     -0.356839E-01  -1.70226       1.70226       318.025       319.727    
  24  0.752421     -0.284460      -13.5698       13.5698       318.671       332.240    
  25  0.705556     -0.348769      -16.6376       16.6376       313.807       330.445    
  26  0.943467     -0.581939E-01  -2.77607       2.77607       276.452       279.228    
  27  0.272564      -1.29988      -62.0092       62.0092       275.738       337.748    
  28  0.215815      -1.53333      -73.1457       73.1457       278.568       351.713    
  29  0.756955     -0.278452      -13.2832       13.2832       318.008       331.292    
  30  0.538381     -0.619189      -29.5377       29.5377       278.834       308.371    
  31  0.182967      -1.69845      -81.0224       81.0224       319.594       400.616    
  32  0.644758     -0.438881      -20.9363       20.9363       319.358       340.294    
  33  0.939477     -0.624320E-01  -2.97824       2.97824       319.053       322.031    
  34  0.663186     -0.410699      -19.5919       19.5919       312.134       331.725    
  35  0.795014     -0.229396      -10.9431       10.9431       287.540       298.483    
  36  0.630792     -0.460779      -21.9809       21.9809       269.945       291.926    
  37  0.151039      -1.89022      -90.1705       90.1705       313.757       403.928    
  38  0.668306     -0.403009      -19.2251       19.2251       314.940       334.165    
  39  0.683820     -0.380061      -18.1304       18.1304       315.864       333.995    
  40  0.122229      -2.10186      -100.267       100.267       319.305       419.572    
  41  0.664453     -0.408791      -19.5009       19.5009       325.871       345.372    
  42  0.548687     -0.600228      -28.6331       28.6331       254.566       283.199    
  43  0.931535     -0.709210E-01  -3.38320       3.38320       320.091       323.474    
  44  0.139742      -1.96796      -93.8791       93.8791       332.461       426.340    
  45  0.429142     -0.845967      -40.3558       40.3558       333.837       374.193    
  46  0.531147     -0.632717      -30.1830       30.1830       272.208       302.391    
  47  0.575558     -0.552416      -26.3523       26.3523       318.942       345.294    
  48  0.336537      -1.08905      -51.9516       51.9516       326.468       378.420    
  49  0.324486      -1.12551      -53.6912       53.6912       325.716       379.407    
  50  0.652768     -0.426534      -20.3473       20.3473       308.952       329.299    
  51  0.537860     -0.620158      -29.5839       29.5839       319.172       348.756    
  52  0.415288     -0.878782      -41.9212       41.9212       344.821       386.742    
  53  0.771827     -0.258995      -12.3551       12.3551       305.147       317.502    
  54  0.537995     -0.619906      -29.5719       29.5719       325.264       354.836    
  55  0.438537     -0.824310      -39.3227       39.3227       317.896       357.219    
  56  0.872114     -0.136835      -6.52753       6.52753       317.736       324.264    
  57  0.974519E-01  -2.32840      -111.073       111.073       304.193       415.266    
  58  0.245035      -1.40635      -67.0884       67.0884       310.973       378.061    
  59  0.285418      -1.25380      -59.8110       59.8110       322.677       382.488    
  60  0.598735     -0.512936      -24.4690       24.4690       290.928       315.397    
  61  0.440039     -0.820892      -39.1596       39.1596       257.925       297.085    
  62  0.115587      -2.15774      -102.932       102.932       353.465       456.397    
  63  0.479716     -0.734560      -35.0413       35.0413       318.025       353.066    
  64  0.423297     -0.859681      -41.0100       41.0100       288.946       329.956    
  65  0.385689E-01  -3.25531      -155.291       155.291       316.943       472.234    
  66  0.504564     -0.684061      -32.6323       32.6323       311.882       344.514    
  67  0.406483     -0.900213      -42.9435       42.9435       316.952       359.895    
  68  0.362573E-01  -3.31712      -158.239       158.239       411.198       569.437    
  69  0.666448E-03  -7.31355      -348.884       348.884       269.284       618.168    
  70  0.428061     -0.848489      -40.4761       40.4761       277.562       318.038    
  71  0.324089      -1.12674      -53.7497       53.7497       297.424       351.173    
  72  0.491354     -0.710591      -33.8979       33.8979       396.518       430.416    
  73  0.610139E-02  -5.09924      -243.253       243.253       421.746       664.999    
  74  0.974548     -0.257817E-01  -1.22989       1.22989       329.961       331.191    
  75  0.196989      -1.62461      -77.4998       77.4998       354.393       431.893    
  76  0.448815     -0.801144      -38.2176       38.2176       424.873       463.091    
  77  0.631924     -0.458986      -21.8954       21.8954       317.931       339.827    
  78  0.259760      -1.34800      -64.3045       64.3045       313.360       377.664    
  79  0.372549     -0.987387      -47.1021       47.1021       459.436       506.538    
loop,thermsimp(1:2)       64   9.66810       74.4647    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183        463.49         87.62          1.17         40.08          0.68          0.05        129.61
Just calling func    0   0        129.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    463.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       64
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       65
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      182     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -47.7502       47.7502       256.750       304.500    
   2  0.298218      -1.20993      -57.7182       57.7182       255.802       313.520    
   3  0.374092     -0.983254      -46.9049       46.9049       276.452       323.357    
   4  0.417366     -0.873791      -41.6831       41.6831       254.566       296.249    
   5  0.299382      -1.20604      -57.5325       57.5325       269.425       326.958    
   6  0.373029     -0.986099      -47.0406       47.0406       269.945       316.986    
   7  0.628224     -0.464858      -22.1755       22.1755       290.274       312.450    
   8  0.111397      -2.19465      -104.693       104.693       257.925       362.619    
   9  0.983555     -0.165818E-01 -0.791013      0.791013       287.540       288.331    
  10  0.394578     -0.929938      -44.3616       44.3616       270.947       315.309    
  11  0.410639     -0.890042      -42.4584       42.4584       272.208       314.666    
  12  0.700680     -0.355705      -16.9684       16.9684       277.109       294.077    
  13  0.223946      -1.49635      -71.3817       71.3817       270.037       341.418    
  14  0.651113E-01  -2.73166      -130.310       130.310       278.834       409.144    
  15  0.704010     -0.350963      -16.7423       16.7423       282.662       299.404    
  16  0.172411      -1.75787      -83.8572       83.8572       291.059       374.916    
  17  0.567412     -0.566670      -27.0323       27.0323       290.928       317.960    
  18  0.186334      -1.68021      -80.1525       80.1525       305.147       385.299    
  19  0.677524     -0.389310      -18.5716       18.5716       277.562       296.134    
  20  0.362270      -1.01537      -48.4368       48.4368       284.323       332.760    
  21  0.603880     -0.504381      -24.0609       24.0609       318.025       342.086    
  22  0.782208     -0.245635      -11.7177       11.7177       319.053       330.771    
  23  0.129808      -2.04170      -97.3968       97.3968       320.091       417.488    
  24  0.284816      -1.25591      -59.9118       59.9118       317.736       377.648    
  25  0.246930      -1.39865      -66.7209       66.7209       262.089       328.809    
  26  0.256917      -1.35900      -64.8295       64.8295       308.952       373.782    
  27  0.240545      -1.42485      -67.9707       67.9707       255.057       323.028    
  28  0.218018      -1.52318      -72.6614       72.6614       288.946       361.607    
  29  0.235583E-01  -3.74828      -178.807       178.807       313.807       492.614    
  30  0.114660      -2.16578      -103.316       103.316       329.961       433.277    
  31  0.119129      -2.12755      -101.492       101.492       318.008       419.501    
  32  0.471707     -0.751398      -35.8445       35.8445       312.134       347.978    
  33  0.607413     -0.498546      -23.7825       23.7825       318.671       342.453    
  34  0.568731     -0.564347      -26.9215       26.9215       315.864       342.786    
  35  0.587492     -0.531893      -25.3733       25.3733       314.940       340.313    
  36  0.411259     -0.888533      -42.3864       42.3864       275.738       318.125    
  37  0.836192     -0.178897      -8.53404       8.53404       317.931       326.465    
  38  0.152977      -1.87747      -89.5622       89.5622       319.358       408.920    
  39  0.941831     -0.599291E-01  -2.85884       2.85884       315.769       318.628    
  40  0.936595     -0.655045E-01  -3.12481       3.12481       311.882       315.007    
  41  0.856621     -0.154759      -7.38260       7.38260       318.942       326.325    
  42  0.484786     -0.724047      -34.5398       34.5398       325.871       360.411    
  43  0.188261      -1.66993      -79.6618       79.6618       319.172       398.834    
  44  0.957606     -0.433189E-01  -2.06648       2.06648       297.424       299.490    
  45  0.234891      -1.44863      -69.1053       69.1053       278.568       347.673    
  46  0.758920     -0.275858      -13.1595       13.1595       318.025       331.185    
  47  0.135340      -1.99997      -95.4060       95.4060       325.264       420.670    
  48  0.779121E-01  -2.55217      -121.748       121.748       317.896       439.644    
  49  0.573767     -0.555531      -26.5009       26.5009       319.806       346.307    
  50  0.982512     -0.176424E-01 -0.841609      0.841609       316.952       317.793    
  51  0.109579      -2.21111      -105.478       105.478       313.152       418.630    
  52  0.714543     -0.336113      -16.0338       16.0338       300.437       316.471    
  53  0.573216     -0.556492      -26.5468       26.5468       333.837       360.384    
  54  0.389116     -0.943877      -45.0265       45.0265       313.360       358.386    
  55  0.149817      -1.89834      -90.5581       90.5581       310.973       401.531    
  56  0.623269     -0.472778      -22.5533       22.5533       326.468       349.022    
  57  0.682320E-02  -4.98743      -237.919       237.919       325.716       563.635    
  58  0.641698     -0.443637      -21.1632       21.1632       322.677       343.840    
  59  0.233363      -1.45516      -69.4167       69.4167       294.012       363.429    
  60  0.881483     -0.126150      -6.01783       6.01783       344.821       350.839    
  61  0.264921      -1.32832      -63.3660       63.3660       281.545       344.911    
  62  0.941652     -0.601200E-01  -2.86795       2.86795       283.393       286.261    
  63  0.179971      -1.71496      -81.8099       81.8099       319.594       401.404    
  64  0.381207E-01  -3.26700      -155.848       155.848       313.757       469.605    
  65  0.998657     -0.134405E-02 -0.641163E-01  0.641163E-01   287.140       287.204    
  66  0.553871     -0.590823      -28.1845       28.1845       282.959       311.144    
  67  0.599651     -0.511408      -24.3961       24.3961       304.193       328.589    
  68  0.834589     -0.180815      -8.62558       8.62558       319.305       327.931    
  69  0.622560     -0.473915      -22.6075       22.6075       332.461       355.069    
  70  0.437672E-03  -7.73404      -368.943       368.943       396.518       765.461    
  71  0.881230     -0.126437      -6.03152       6.03152       354.393       360.425    
  72  0.793726     -0.231017      -11.0204       11.0204       353.465       364.485    
  73  0.499689     -0.693770      -33.0954       33.0954       424.873       457.969    
  74  0.260074      -1.34679      -64.2469       64.2469       316.943       381.190    
  75  0.169454E-01  -4.07776      -194.524       194.524       459.436       653.961    
  76  0.944019     -0.576087E-01  -2.74815       2.74815       411.198       413.946    
  77  0.295576      -1.21883      -58.1428       58.1428       277.887       336.030    
  78  0.622214E-01  -2.77706      -132.476       132.476       269.284       401.760    
  79  0.759525     -0.275062      -13.1215       13.1215       463.490       476.611    
loop,thermsimp(1:2)       65   47.7502       57.7182    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184        525.37         87.64          1.14         40.20          0.59          0.05        129.62
Just calling func    0   0        129.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    525.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       65
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       66
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      183     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -65.1004       65.1004       283.393       348.494    
   2  0.513427E-01  -2.96923      -141.644       141.644       287.140       428.784    
   3  0.288453      -1.24322      -59.3065       59.3065       287.540       346.847    
   4  0.107044      -2.23452      -106.595       106.595       277.109       383.704    
   5  0.756779     -0.278684      -13.2943       13.2943       277.562       290.856    
   6  0.333762      -1.09733      -52.3467       52.3467       254.566       306.913    
   7  0.270335      -1.30809      -62.4010       62.4010       282.662       345.063    
   8  0.666278E-01  -2.70863      -129.212       129.212       297.424       426.636    
   9  0.517510     -0.658727      -31.4237       31.4237       256.750       288.174    
  10  0.719680     -0.328949      -15.6921       15.6921       282.959       298.651    
  11  0.401542     -0.912442      -43.5269       43.5269       290.274       333.801    
  12  0.408125     -0.896181      -42.7512       42.7512       255.802       298.553    
  13  0.481086     -0.731710      -34.9053       34.9053       272.208       307.113    
  14  0.166952E-01  -4.09263      -195.234       195.234       311.882       507.116    
  15  0.913266     -0.907286E-01  -4.32810       4.32810       270.947       275.275    
  16  0.972084     -0.283134E-01  -1.35066       1.35066       300.437       301.787    
  17  0.889421     -0.117184      -5.59013       5.59013       269.945       275.535    
  18  0.171754      -1.76169      -84.0395       84.0395       316.952       400.991    
  19  0.925876     -0.770155E-01  -3.67393       3.67393       290.928       294.601    
  20  0.992897     -0.712866E-02 -0.340064      0.340064       275.738       276.078    
  21  0.118575E-01  -4.43479      -211.556       211.556       315.769       527.326    
  22  0.492413     -0.708438      -33.7952       33.7952       255.057       288.852    
  23  0.952433     -0.487360E-01  -2.32489       2.32489       276.452       278.777    
  24  0.591826     -0.524543      -25.0227       25.0227       318.942       343.965    
  25  0.762199     -0.271548      -12.9538       12.9538       317.931       330.885    
  26  0.613492     -0.488588      -23.3075       23.3075       269.425       292.733    
  27  0.134863      -2.00350      -95.5744       95.5744       319.305       414.880    
  28  0.633670     -0.456227      -21.7637       21.7637       304.193       325.957    
  29  0.829625     -0.186782      -8.91019       8.91019       262.089       270.999    
  30  0.148219      -1.90906      -91.0695       91.0695       319.053       410.123    
  31  0.198093      -1.61902      -77.2333       77.2333       318.025       395.258    
  32  0.321318      -1.13532      -54.1592       54.1592       284.323       338.483    
  33  0.475408     -0.743582      -35.4717       35.4717       277.887       313.359    
  34  0.196520      -1.62699      -77.6137       77.6137       314.940       392.554    
  35  0.637413     -0.450337      -21.4828       21.4828       270.037       291.520    
  36  0.596751     -0.516255      -24.6273       24.6273       318.025       342.652    
  37  0.351361      -1.04594      -49.8954       49.8954       318.671       368.566    
  38  0.111764      -2.19136      -104.536       104.536       315.864       420.401    
  39  0.213579      -1.54375      -73.6427       73.6427       322.677       396.319    
  40  0.799647     -0.223585      -10.6659       10.6659       281.545       292.211    
  41  0.670682     -0.399460      -19.0558       19.0558       319.806       338.862    
  42  0.104235      -2.26111      -107.863       107.863       278.568       386.431    
  43  0.607160E-01  -2.80155      -133.644       133.644       312.134       445.778    
  44  0.462312     -0.771516      -36.8042       36.8042       326.468       363.273    
  45  0.269658      -1.31060      -62.5205       62.5205       344.821       407.341    
  46  0.678606     -0.387714      -18.4954       18.4954       332.461       350.957    
  47  0.669051     -0.401895      -19.1719       19.1719       313.360       332.532    
  48  0.551912     -0.594367      -28.3535       28.3535       333.837       362.191    
  49  0.116070E-01  -4.45614      -212.575       212.575       325.871       538.446    
  50  0.911337     -0.928428E-01  -4.42895       4.42895       354.393       358.822    
  51  0.302404      -1.19599      -57.0532       57.0532       288.946       345.999    
  52  0.527926     -0.638800      -30.4732       30.4732       257.925       288.399    
  53  0.204835      -1.58555      -75.6367       75.6367       294.012       369.649    
  54  0.761388     -0.272612      -13.0046       13.0046       353.465       366.470    
  55  0.189928      -1.66111      -79.2413       79.2413       308.952       388.193    
  56  0.423830     -0.858422      -40.9500       40.9500       291.059       332.009    
  57  0.895148     -0.110767      -5.28399       5.28399       317.736       323.020    
  58  0.109823      -2.20889      -105.372       105.372       316.943       422.315    
  59  0.960076     -0.407431E-01  -1.94360       1.94360       305.147       307.090    
  60  0.694180     -0.365024      -17.4130       17.4130       319.172       336.585    
  61  0.302866      -1.19446      -56.9804       56.9804       319.594       376.574    
  62  0.213503      -1.54410      -73.6595       73.6595       310.973       384.633    
  63  0.949162     -0.521754E-01  -2.48896       2.48896       269.284       271.773    
  64  0.912779     -0.912617E-01  -4.35353       4.35353       319.358       323.712    
  65  0.393978     -0.931461      -44.4342       44.4342       278.834       323.268    
  66  0.957683     -0.432380E-01  -2.06261       2.06261       411.198       413.261    
  67  0.785605     -0.241301      -11.5110       11.5110       320.091       331.602    
  68  0.670559     -0.399644      -19.0645       19.0645       313.152       332.217    
  69  0.793392     -0.231438      -11.0405       11.0405       318.008       329.049    
  70  0.594443     -0.520131      -24.8122       24.8122       325.264       350.076    
  71  0.298128      -1.21023      -57.7326       57.7326       329.961       387.694    
  72  0.233680      -1.45380      -69.3518       69.3518       317.896       387.248    
  73  0.410779     -0.889700      -42.4421       42.4421       424.873       467.316    
  74  0.811201     -0.209240      -9.98152       9.98152       313.757       323.739    
  75  0.737617     -0.304330      -14.5177       14.5177       463.490       478.007    
  76  0.913867     -0.900699E-01  -4.29667       4.29667       313.807       318.104    
  77  0.436432     -0.829123      -39.5523       39.5523       325.716       365.268    
  78  0.583250     -0.539139      -25.7190       25.7190       459.436       485.155    
  79  0.195355      -1.63294      -77.8972       77.8972       525.372       603.269    
loop,thermsimp(1:2)       66   65.1004       141.644    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185        396.52         87.31          1.11         40.12          1.05          0.05        129.65
Just calling func    0   0        129.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    396.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       66
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       67
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      184     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -57.7671       57.7671       262.089       319.856    
   2  0.840396     -0.173882      -8.29481       8.29481       269.284       277.579    
   3  0.165782      -1.79708      -85.7276       85.7276       270.947       356.675    
   4  0.516202E-01  -2.96384      -141.386       141.386       269.945       411.332    
   5  0.163201      -1.81278      -86.4762       86.4762       275.738       362.215    
   6  0.201529      -1.60182      -76.4129       76.4129       276.452       352.865    
   7  0.791805     -0.233441      -11.1360       11.1360       256.750       267.886    
   8  0.306466      -1.18265      -56.4167       56.4167       257.925       314.342    
   9  0.625963     -0.468465      -22.3475       22.3475       255.057       277.405    
  10  0.255827      -1.36325      -65.0324       65.0324       277.562       342.595    
  11  0.275269      -1.29001      -61.5382       61.5382       270.037       331.575    
  12  0.546374     -0.604451      -28.8346       28.8346       281.545       310.380    
  13  0.738275E-01  -2.60602      -124.317       124.317       269.425       393.743    
  14  0.459460     -0.777704      -37.0994       37.0994       290.928       328.027    
  15  0.245891      -1.40287      -66.9220       66.9220       255.802       322.724    
  16  0.818144E-01  -2.50330      -119.417       119.417       282.959       402.376    
  17  0.791963     -0.233241      -11.1265       11.1265       300.437       311.563    
  18  0.652560     -0.426852      -20.3625       20.3625       254.566       274.928    
  19  0.743237     -0.296740      -14.1556       14.1556       305.147       319.302    
  20  0.146095      -1.92350      -91.7582       91.7582       272.208       363.966    
  21  0.747148     -0.291492      -13.9053       13.9053       277.887       291.793    
  22  0.935024E-01  -2.36977      -113.047       113.047       313.807       426.854    
  23  0.924202     -0.788243E-01  -3.76022       3.76022       317.736       321.496    
  24  0.193934      -1.64024      -78.2455       78.2455       278.834       357.079    
  25  0.112499      -2.18481      -104.224       104.224       319.358       423.582    
  26  0.609079     -0.495807      -23.6519       23.6519       313.757       337.409    
  27  0.387822     -0.947210      -45.1855       45.1855       304.193       349.378    
  28  0.151976      -1.88403      -89.8756       89.8756       318.008       407.884    
  29  0.820125     -0.198299      -9.45960       9.45960       317.931       327.391    
  30  0.100865      -2.29397      -109.431       109.431       320.091       429.522    
  31  0.246930      -1.39865      -66.7209       66.7209       291.059       357.779    
  32  0.101973      -2.28305      -108.910       108.910       313.152       422.062    
  33  0.389401     -0.943145      -44.9916       44.9916       313.360       358.351    
  34  0.573635     -0.555762      -26.5119       26.5119       290.274       316.786    
  35  0.730896E-01  -2.61607      -124.796       124.796       319.172       443.969    
  36  0.260104      -1.34667      -64.2413       64.2413       284.323       348.565    
  37  0.562102     -0.576073      -27.4808       27.4808       319.806       347.287    
  38  0.159056      -1.83850      -87.7034       87.7034       318.025       405.729    
  39  0.779134E-02  -4.85474      -231.590       231.590       318.942       550.531    
  40  0.693208     -0.366425      -17.4799       17.4799       282.662       300.142    
  41  0.600279     -0.510361      -24.3462       24.3462       288.946       313.292    
  42  0.419387     -0.868962      -41.4528       41.4528       287.540       328.993    
  43  0.952036     -0.491524E-01  -2.34475       2.34475       283.393       285.738    
  44  0.613955     -0.487834      -23.2715       23.2715       325.264       348.535    
  45  0.842752     -0.171082      -8.16128       8.16128       332.461       340.623    
  46  0.733219     -0.310311      -14.8030       14.8030       354.393       369.196    
  47  0.776088     -0.253489      -12.0924       12.0924       333.837       345.930    
  48  0.965215     -0.354047E-01  -1.68894       1.68894       326.468       328.157    
  49  0.487812     -0.717826      -34.2430       34.2430       325.716       359.959    
  50  0.864492     -0.145613      -6.94628       6.94628       353.465       360.411    
  51  0.334607      -1.09480      -52.2260       52.2260       318.671       370.897    
  52  0.267438      -1.31887      -62.9149       62.9149       294.012       356.927    
  53  0.333561      -1.09793      -52.3754       52.3754       319.594       371.969    
  54  0.593184     -0.522250      -24.9133       24.9133       277.109       302.022    
  55  0.832475     -0.183352      -8.74660       8.74660       310.973       319.720    
  56  0.642050     -0.443089      -21.1370       21.1370       278.568       299.705    
  57  0.799223     -0.224116      -10.6912       10.6912       317.896       328.587    
  58  0.184219      -1.69163      -80.6972       80.6972       329.961       410.659    
  59  0.478229     -0.737666      -35.1895       35.1895       308.952       344.141    
  60  0.604888     -0.502712      -23.9812       23.9812       314.940       338.921    
  61  0.575395     -0.552698      -26.3658       26.3658       318.025       344.391    
  62  0.325892E-01  -3.42377      -163.327       163.327       322.677       486.003    
  63  0.759877     -0.274599      -13.0994       13.0994       316.952       330.051    
  64  0.214378      -1.54002      -73.4646       73.4646       344.821       418.285    
  65  0.668091     -0.403331      -19.2404       19.2404       319.053       338.293    
  66  0.601122     -0.508958      -24.2792       24.2792       411.198       435.477    
  67  0.378138     -0.972496      -46.3917       46.3917       319.305       365.697    
  68  0.849119     -0.163556      -7.80224       7.80224       315.864       323.667    
  69  0.426509     -0.852121      -40.6494       40.6494       316.943       357.593    
  70  0.558114E-01  -2.88578      -137.662       137.662       297.424       435.086    
  71  0.344448      -1.06581      -50.8432       50.8432       287.140       337.983    
  72  0.354132      -1.03809      -49.5206       49.5206       312.134       361.654    
  73  0.387730     -0.947445      -45.1967       45.1967       424.873       470.070    
  74  0.140493      -1.96260      -93.6233       93.6233       463.490       557.113    
  75  0.349783      -1.05044      -50.1100       50.1100       459.436       509.546    
  76  0.416508     -0.875850      -41.7813       41.7813       311.882       353.663    
  77  0.682648     -0.381775      -18.2121       18.2121       315.769       333.981    
  78  0.705637     -0.348654      -16.6321       16.6321       325.871       342.503    
  79  0.422467     -0.861644      -41.1037       41.1037       396.518       437.622    
loop,thermsimp(1:2)       67   57.7671       8.29481    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186        421.75         87.36          1.12         40.01          0.88          0.05        129.42
Just calling func    0   0        129.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    421.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       67
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       68
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      185     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -222.418       222.418       256.750       479.168    
   2  0.714357     -0.336373      -16.0463       16.0463       254.566       270.612    
   3  0.997096     -0.290808E-02 -0.138727      0.138727       255.057       255.196    
   4  0.905437     -0.993373E-01  -4.73876       4.73876       269.284       274.023    
   5  0.307060      -1.18071      -56.3244       56.3244       283.393       339.718    
   6  0.179061      -1.72003      -82.0518       82.0518       277.887       359.939    
   7  0.384312     -0.956301      -45.6192       45.6192       278.568       324.187    
   8  0.901101     -0.104138      -4.96780       4.96780       282.662       287.629    
   9  0.606170     -0.500594      -23.8802       23.8802       277.109       300.989    
  10  0.515234     -0.663133      -31.6340       31.6340       281.545       313.179    
  11  0.639447     -0.447152      -21.3308       21.3308       300.437       321.768    
  12  0.820429     -0.197928      -9.44190       9.44190       288.946       298.388    
  13  0.521739     -0.650587      -31.0355       31.0355       257.925       288.961    
  14  0.767979     -0.263993      -12.5935       12.5935       290.274       302.867    
  15  0.530366     -0.634187      -30.2531       30.2531       305.147       335.400    
  16  0.732471     -0.311332      -14.8517       14.8517       310.973       325.825    
  17  0.440461     -0.819933      -39.1139       39.1139       262.089       301.202    
  18  0.595715     -0.517993      -24.7102       24.7102       317.736       342.446    
  19  0.407958     -0.896592      -42.7708       42.7708       255.802       298.573    
  20  0.544683     -0.607550      -28.9824       28.9824       315.864       344.847    
  21  0.611386E-01  -2.79461      -133.314       133.314       317.931       451.245    
  22  0.135041      -2.00218      -95.5113       95.5113       290.928       386.439    
  23  0.547242     -0.602864      -28.7589       28.7589       326.468       355.227    
  24  0.214436      -1.53975      -73.4517       73.4517       317.896       391.348    
  25  0.340220      -1.07816      -51.4324       51.4324       287.540       338.973    
  26  0.270394      -1.30787      -62.3905       62.3905       316.952       379.342    
  27  0.605229     -0.502149      -23.9544       23.9544       270.037       293.991    
  28  0.630206     -0.461709      -22.0252       22.0252       315.769       337.794    
  29  0.942476     -0.592449E-01  -2.82620       2.82620       313.757       316.584    
  30  0.293125      -1.22716      -58.5401       58.5401       287.140       345.680    
  31  0.526210     -0.642056      -30.6285       30.6285       319.053       349.681    
  32  0.972201     -0.281927E-01  -1.34490       1.34490       314.940       316.285    
  33  0.570000     -0.562119      -26.8152       26.8152       332.461       359.276    
  34  0.752945     -0.283763      -13.5366       13.5366       325.871       339.408    
  35  0.333005      -1.09960      -52.4550       52.4550       277.562       330.017    
  36  0.430444     -0.842939      -40.2114       40.2114       308.952       349.163    
  37  0.106505      -2.23957      -106.836       106.836       318.025       424.861    
  38  0.327953      -1.11488      -53.1842       53.1842       333.837       387.021    
  39  0.586631     -0.533359      -25.4433       25.4433       319.806       345.250    
  40  0.563274     -0.573989      -27.3815       27.3815       325.264       352.645    
  41  0.802100     -0.220522      -10.5197       10.5197       284.323       294.843    
  42  0.594871     -0.519411      -24.7778       24.7778       304.193       328.971    
  43  0.816066     -0.203261      -9.69629       9.69629       276.452       286.149    
  44  0.170795E-01  -4.06987      -194.148       194.148       311.882       506.030    
  45  0.554958     -0.588864      -28.0910       28.0910       270.947       299.038    
  46  0.674023     -0.394492      -18.8187       18.8187       294.012       312.831    
  47  0.371758     -0.989512      -47.2034       47.2034       278.834       326.037    
  48  0.309440      -1.17299      -55.9561       55.9561       316.943       372.899    
  49  0.182337      -1.70190      -81.1870       81.1870       291.059       372.246    
  50  0.443504     -0.813049      -38.7855       38.7855       313.360       352.145    
  51  0.407824     -0.896918      -42.7864       42.7864       325.716       368.502    
  52  0.140254      -1.96430      -93.7044       93.7044       353.465       447.169    
  53  0.801043     -0.221840      -10.5826       10.5826       312.134       322.716    
  54  0.922923     -0.802099E-01  -3.82631       3.82631       275.738       279.565    
  55  0.982391     -0.177663E-01 -0.847518      0.847518       272.208       273.055    
  56  0.830509     -0.185717      -8.85941       8.85941       319.305       328.164    
  57  0.459056     -0.778583      -37.1413       37.1413       354.393       391.535    
  58  0.918078     -0.854734E-01  -4.07740       4.07740       318.671       322.748    
  59  0.858811E-01  -2.45479      -117.103       117.103       319.594       436.697    
  60  0.642813E-01  -2.74449      -130.922       130.922       269.425       400.348    
  61  0.328642      -1.11279      -53.0841       53.0841       282.959       336.043    
  62  0.238578      -1.43306      -68.3623       68.3623       318.025       386.388    
  63  0.183249      -1.69691      -80.9490       80.9490       318.008       398.957    
  64  0.575307     -0.552852      -26.3731       26.3731       329.961       356.335    
  65  0.509614     -0.674103      -32.1572       32.1572       269.945       302.102    
  66  0.528199     -0.638283      -30.4485       30.4485       344.821       375.269    
  67  0.114575      -2.16652      -103.351       103.351       313.152       416.503    
  68  0.227493      -1.48064      -70.6320       70.6320       319.358       389.990    
  69  0.451305     -0.795613      -37.9537       37.9537       313.807       351.761    
  70  0.873604     -0.135128      -6.44610       6.44610       320.091       326.537    
  71  0.457086     -0.782884      -37.3465       37.3465       297.424       334.770    
  72  0.587276     -0.532261      -25.3908       25.3908       411.198       436.589    
  73  0.193860E-01  -3.94320      -188.106       188.106       396.518       584.624    
  74  0.543354     -0.609995      -29.0991       29.0991       319.172       348.271    
  75  0.316881      -1.14923      -54.8225       54.8225       424.873       479.696    
  76  0.913201E-01  -2.39338      -114.173       114.173       322.677       436.850    
  77  0.267724E-01  -3.62039      -172.706       172.706       459.436       632.142    
  78  0.557292     -0.584666      -27.8908       27.8908       318.942       346.833    
  79  0.854272     -0.157506      -7.51361       7.51361       421.746       429.259    
loop,thermsimp(1:2)       68   222.418       16.0463    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187        496.64         87.27          1.11         39.94          1.15          0.05        129.52
Just calling func    0   0        129.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    496.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       68
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       69
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      186     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -31.0988       31.0988       255.057       286.156    
   2  0.554375     -0.589913      -28.1411       28.1411       254.566       282.707    
   3  0.404373     -0.905418      -43.1918       43.1918       272.208       315.400    
   4  0.632877     -0.457478      -21.8235       21.8235       269.284       291.108    
   5  0.395261     -0.928209      -44.2791       44.2791       275.738       320.017    
   6  0.715068     -0.335378      -15.9988       15.9988       276.452       292.451    
   7  0.918313     -0.852174E-01  -4.06519       4.06519       282.662       286.727    
   8  0.529514E-01  -2.93838      -140.172       140.172       257.925       398.097    
   9  0.284219      -1.25801      -60.0118       60.0118       270.037       330.049    
  10  0.809402     -0.211460      -10.0874       10.0874       284.323       294.411    
  11  0.604758     -0.502928      -23.9915       23.9915       288.946       312.937    
  12  0.624772     -0.470369      -22.4384       22.4384       255.802       278.240    
  13  0.622683     -0.473718      -22.5981       22.5981       270.947       293.545    
  14  0.491656     -0.709976      -33.8685       33.8685       277.109       310.977    
  15  0.823484     -0.194211      -9.26459       9.26459       262.089       271.353    
  16  0.185629E-01  -3.98659      -190.175       190.175       269.945       460.120    
  17  0.911253     -0.929346E-01  -4.43333       4.43333       290.274       294.707    
  18  0.825116     -0.192231      -9.17015       9.17015       294.012       303.182    
  19  0.902913     -0.102129      -4.87196       4.87196       281.545       286.417    
  20  0.869925     -0.139348      -6.64744       6.64744       314.940       321.588    
  21  0.135445      -1.99919      -95.3689       95.3689       313.757       409.126    
  22  0.516840     -0.660022      -31.4856       31.4856       300.437       331.922    
  23  0.127583      -2.05899      -98.2216       98.2216       312.134       410.355    
  24  0.237062E-01  -3.74202      -178.508       178.508       318.671       497.179    
  25  0.456233     -0.784753      -37.4357       37.4357       278.568       316.003    
  26  0.547397     -0.602581      -28.7454       28.7454       310.973       339.719    
  27  0.231746E-02  -6.06728      -289.432       289.432       278.834       568.266    
  28  0.467213     -0.760969      -36.3011       36.3011       320.091       356.392    
  29  0.397333     -0.922981      -44.0297       44.0297       319.305       363.335    
  30  0.291343      -1.23325      -58.8308       58.8308       304.193       363.024    
  31  0.964262     -0.363922E-01  -1.73604       1.73604       277.562       279.298    
  32  0.260485      -1.34521      -64.1715       64.1715       297.424       361.595    
  33  0.868574     -0.140902      -6.72158       6.72158       305.147       311.868    
  34  0.832573     -0.183235      -8.74099       8.74099       282.959       291.700    
  35  0.240383      -1.42552      -68.0028       68.0028       315.769       383.772    
  36  0.878342     -0.129719      -6.18808       6.18808       287.540       293.728    
  37  0.168707      -1.77959      -84.8933       84.8933       325.871       410.764    
  38  0.348015      -1.05551      -50.3518       50.3518       283.393       333.745    
  39  0.846224     -0.166971      -7.96517       7.96517       317.736       325.701    
  40  0.842580     -0.171286      -8.17100       8.17100       315.864       324.035    
  41  0.230401      -1.46794      -70.0261       70.0261       319.806       389.832    
  42  0.441962     -0.816531      -38.9516       38.9516       287.140       326.092    
  43  0.772036     -0.258724      -12.3421       12.3421       318.942       331.284    
  44  0.970063     -0.303946E-01  -1.44994       1.44994       319.172       320.622    
  45  0.610535     -0.493419      -23.5380       23.5380       308.952       332.490    
  46  0.548201     -0.601114      -28.6754       28.6754       319.053       347.728    
  47  0.322533      -1.13155      -53.9792       53.9792       313.807       367.786    
  48  0.194318E-01  -3.94084      -187.993       187.993       313.360       501.353    
  49  0.219930      -1.51445      -72.2448       72.2448       325.264       397.508    
  50  0.538995E-01  -2.92063      -139.325       139.325       326.468       465.794    
  51  0.189941      -1.66104      -79.2379       79.2379       329.961       409.199    
  52  0.339787      -1.07944      -51.4933       51.4933       332.461       383.955    
  53  0.783417     -0.244091      -11.6440       11.6440       277.887       289.531    
  54  0.347888      -1.05587      -50.3691       50.3691       325.716       376.085    
  55  0.511342     -0.670716      -31.9957       31.9957       291.059       323.054    
  56  0.656791     -0.420389      -20.0542       20.0542       316.943       336.997    
  57  0.433072E-01  -3.13944      -149.763       149.763       344.821       494.584    
  58  0.940019     -0.618557E-01  -2.95075       2.95075       316.952       319.903    
  59  0.560131     -0.579584      -27.6484       27.6484       318.025       345.674    
  60  0.335604      -1.09182      -52.0842       52.0842       290.928       343.012    
  61  0.677192     -0.389801      -18.5950       18.5950       333.837       352.432    
  62  0.166447      -1.79308      -85.5365       85.5365       319.358       404.895    
  63  0.966787     -0.337766E-01  -1.61127       1.61127       317.896       319.507    
  64  0.501486     -0.690179      -32.9242       32.9242       354.393       387.317    
  65  0.339741      -1.07957      -51.4996       51.4996       318.008       369.508    
  66  0.920721     -0.825986E-01  -3.94027       3.94027       269.425       273.366    
  67  0.215901      -1.53293      -73.1267       73.1267       313.152       386.279    
  68  0.259645      -1.34844      -64.3258       64.3258       318.025       382.351    
  69  0.927059     -0.757381E-01  -3.61300       3.61300       421.746       425.359    
  70  0.766870E-02  -4.87061      -232.346       232.346       411.198       643.544    
  71  0.398597     -0.919805      -43.8782       43.8782       319.594       363.472    
  72  0.870407     -0.138794      -6.62099       6.62099       322.677       329.298    
  73  0.571318     -0.559809      -26.7050       26.7050       353.465       380.170    
  74  0.443420     -0.813239      -38.7946       38.7946       317.931       356.726    
  75  0.796895     -0.227033      -10.8303       10.8303       256.750       267.580    
  76  0.908871     -0.955525E-01  -4.55821       4.55821       424.873       429.432    
  77  0.208307      -1.56874      -74.8350       74.8350       311.882       386.717    
  78  0.525823E-01  -2.94537      -140.505       140.505       396.518       537.024    
  79  0.294206      -1.22348      -58.3645       58.3645       496.644       555.008    
loop,thermsimp(1:2)       69   31.0988       28.1411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188        282.71         87.38          1.12         40.14          0.81          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189        354.35         87.38          1.15         40.00          1.06          0.05        129.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    282.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       69
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       70
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      188     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -67.6480       67.6480       256.750       324.398    
   2  0.384023     -0.957054      -45.6551       45.6551       262.089       307.744    
   3  0.672379     -0.396933      -18.9352       18.9352       269.425       288.361    
   4  0.204591      -1.58674      -75.6936       75.6936       255.802       331.495    
   5  0.145151      -1.92998      -92.0673       92.0673       277.562       369.629    
   6  0.235757      -1.44495      -68.9297       68.9297       254.566       323.496    
   7  0.882595     -0.124889      -5.95768       5.95768       255.057       261.015    
   8  0.215562      -1.53451      -73.2018       73.2018       281.545       354.747    
   9  0.248905      -1.39068      -66.3408       66.3408       282.662       349.002    
  10  0.695481     -0.363152      -17.3237       17.3237       277.887       295.211    
  11  0.515786     -0.662063      -31.5829       31.5829       269.284       300.867    
  12  0.956817     -0.441428E-01  -2.10578       2.10578       282.959       285.065    
  13  0.256477      -1.36072      -64.9112       64.9112       276.452       341.363    
  14  0.870409     -0.138792      -6.62091       6.62091       270.947       277.568    
  15  0.296335      -1.21627      -58.0205       58.0205       287.540       345.561    
  16  0.563087     -0.574322      -27.3973       27.3973       284.323       311.721    
  17  0.860973     -0.149692      -7.14087       7.14087       290.274       297.415    
  18  0.336353      -1.08959      -51.9777       51.9777       294.012       345.990    
  19  0.432238     -0.838780      -40.0130       40.0130       277.109       317.122    
  20  0.411587     -0.887734      -42.3483       42.3483       305.147       347.495    
  21  0.685679     -0.377346      -18.0008       18.0008       288.946       306.946    
  22  0.178038E-01  -4.02835      -192.167       192.167       272.208       464.375    
  23  0.330516      -1.10710      -52.8129       52.8129       278.568       331.380    
  24  0.987115     -0.129685E-01 -0.618645      0.618645       317.896       318.514    
  25  0.702947     -0.352474      -16.8143       16.8143       316.952       333.766    
  26  0.159040      -1.83860      -87.7080       87.7080       275.738       363.446    
  27  0.329714      -1.10953      -52.9288       52.9288       319.172       372.101    
  28  0.542452     -0.611656      -29.1783       29.1783       314.940       344.118    
  29  0.484074     -0.725518      -34.6100       34.6100       291.059       325.669    
  30  0.574330     -0.554551      -26.4542       26.4542       315.864       342.319    
  31  0.987944     -0.121288E-01 -0.578591      0.578591       317.736       318.315    
  32  0.565195E-01  -2.87317      -137.061       137.061       287.140       424.201    
  33  0.662626     -0.411545      -19.6322       19.6322       322.677       342.309    
  34  0.462195     -0.771769      -36.8163       36.8163       270.037       306.853    
  35  0.413957     -0.881994      -42.0744       42.0744       318.942       361.016    
  36  0.627825     -0.465493      -22.2058       22.2058       300.437       322.643    
  37  0.373783E-01  -3.28667      -156.786       156.786       308.952       465.738    
  38  0.318481      -1.14419      -54.5823       54.5823       283.393       337.975    
  39  0.193037      -1.64487      -78.4667       78.4667       316.943       395.410    
  40  0.246573      -1.40010      -66.7900       66.7900       310.973       377.763    
  41  0.913643     -0.903152E-01  -4.30838       4.30838       290.928       295.236    
  42  0.593287     -0.522077      -24.9050       24.9050       318.025       342.930    
  43  0.323913      -1.12728      -53.7755       53.7755       319.053       372.828    
  44  0.270579E-01  -3.60978      -172.200       172.200       333.837       506.037    
  45  0.684823     -0.378595      -18.0604       18.0604       320.091       338.151    
  46  0.279340      -1.27532      -60.8378       60.8378       317.931       378.769    
  47  0.285511      -1.25348      -59.7956       59.7956       297.424       357.219    
  48  0.361874      -1.01646      -48.4889       48.4889       304.193       352.682    
  49  0.779291     -0.249370      -11.8959       11.8959       319.305       331.201    
  50  0.590933     -0.526053      -25.0947       25.0947       319.594       344.689    
  51  0.493821E-01  -3.00817      -143.501       143.501       313.807       457.308    
  52  0.736348     -0.306053      -14.5999       14.5999       318.008       332.608    
  53  0.300670      -1.20174      -57.3276       57.3276       325.716       383.043    
  54  0.329072      -1.11148      -53.0217       53.0217       353.465       406.487    
  55  0.238483      -1.43346      -68.3813       68.3813       318.025       386.406    
  56  0.296796      -1.21471      -57.9462       57.9462       315.769       373.715    
  57  0.878745     -0.129261      -6.16623       6.16623       332.461       338.628    
  58  0.493874     -0.705475      -33.6538       33.6538       313.152       346.806    
  59  0.112522      -2.18461      -104.214       104.214       311.882       416.096    
  60  0.642649     -0.442156      -21.0925       21.0925       354.393       375.486    
  61  0.688378     -0.373417      -17.8134       17.8134       319.806       337.620    
  62  0.879214     -0.128727      -6.14077       6.14077       325.264       331.404    
  63  0.621151E-01  -2.77877      -132.558       132.558       257.925       390.483    
  64  0.270748      -1.30657      -62.3282       62.3282       319.358       381.686    
  65  0.871636     -0.137384      -6.55372       6.55372       313.757       320.311    
  66  0.188105      -1.67075      -79.7012       79.7012       329.961       409.663    
  67  0.394507     -0.930118      -44.3701       44.3701       312.134       356.504    
  68  0.532895     -0.629431      -30.0262       30.0262       325.871       355.897    
  69  0.925318     -0.776179E-01  -3.70266       3.70266       421.746       425.448    
  70  0.306237      -1.18340      -56.4524       56.4524       424.873       481.326    
  71  0.214861E-01  -3.84035      -183.199       183.199       269.945       453.144    
  72  0.995041     -0.497146E-02 -0.237157      0.237157       326.468       326.705    
  73  0.391846     -0.936888      -44.6931       44.6931       344.821       389.514    
  74  0.409622     -0.892520      -42.5766       42.5766       318.671       361.247    
  75  0.470670     -0.753598      -35.9495       35.9495       313.360       349.309    
  76  0.590859E-01  -2.82876      -134.943       134.943       396.518       531.461    
  77  0.970149     -0.303051E-01  -1.44567       1.44567       496.644       498.089    
  78  0.553915     -0.590744      -28.1807       28.1807       278.834       307.014    
  79  0.102192E-01  -4.58348      -218.649       218.649       282.708       501.357    
loop,thermsimp(1:2)       70   67.6480       45.6551    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        524.68         87.50          1.13         40.11          0.86          0.05        129.65
Just calling func    0   0        129.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    524.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       70
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       71
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      189     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -10.0342       10.0342       255.057       265.091    
   2  0.601567     -0.508218      -24.2439       24.2439       270.947       295.191    
   3  0.190401      -1.65862      -79.1226       79.1226       282.959       362.082    
   4  0.827263     -0.189632      -9.04617       9.04617       269.425       278.472    
   5  0.581677     -0.541840      -25.8478       25.8478       277.887       303.735    
   6  0.680336     -0.385169      -18.3740       18.3740       290.928       309.302    
   7  0.641383     -0.444128      -21.1866       21.1866       290.274       311.461    
   8  0.593931     -0.520992      -24.8533       24.8533       269.284       294.138    
   9  0.326400      -1.11963      -53.4107       53.4107       270.037       323.447    
  10  0.964323     -0.363286E-01  -1.73301       1.73301       288.946       290.679    
  11  0.481751     -0.730328      -34.8394       34.8394       278.834       313.673    
  12  0.230624E-01  -3.76955      -179.822       179.822       262.089       441.910    
  13  0.214859      -1.53777      -73.3577       73.3577       284.323       357.681    
  14  0.325804      -1.12146      -53.4978       53.4978       277.109       330.607    
  15  0.668745     -0.402353      -19.1938       19.1938       317.736       336.930    
  16  0.803263     -0.219073      -10.4506       10.4506       317.896       328.346    
  17  0.465531     -0.764577      -36.4732       36.4732       313.757       350.230    
  18  0.589796     -0.527978      -25.1866       25.1866       300.437       325.623    
  19  0.783335     -0.244195      -11.6490       11.6490       254.566       266.215    
  20  0.937099     -0.649659E-01  -3.09912       3.09912       256.750       259.849    
  21  0.504081     -0.685019      -32.6780       32.6780       291.059       323.737    
  22  0.368431E-01  -3.30109      -157.474       157.474       326.468       483.943    
  23  0.462712     -0.770651      -36.7630       36.7630       319.305       356.068    
  24  0.172447      -1.75767      -83.8473       83.8473       278.568       362.415    
  25  0.361979      -1.01617      -48.4752       48.4752       325.264       373.739    
  26  0.616189     -0.484202      -23.0983       23.0983       255.802       278.900    
  27  0.495582     -0.702023      -33.4891       33.4891       318.008       351.498    
  28  0.492859     -0.707532      -33.7520       33.7520       316.952       350.704    
  29  0.189027      -1.66586      -79.4680       79.4680       319.806       399.274    
  30  0.336237      -1.08994      -51.9942       51.9942       283.393       335.387    
  31  0.997382     -0.262184E-02 -0.125071      0.125071       320.091       320.216    
  32  0.629287     -0.463168      -22.0948       22.0948       332.461       354.556    
  33  0.226178      -1.48644      -70.9086       70.9086       276.452       347.361    
  34  0.522315     -0.649483      -30.9828       30.9828       322.677       353.659    
  35  0.238835E-02  -6.03715      -287.995       287.995       315.864       603.859    
  36  0.123092E-01  -4.39741      -209.773       209.773       318.025       527.798    
  37  0.488141     -0.717152      -34.2108       34.2108       314.940       349.151    
  38  0.925188     -0.777584E-01  -3.70937       3.70937       319.594       323.303    
  39  0.676413     -0.390952      -18.6499       18.6499       287.540       306.190    
  40  0.638827     -0.448121      -21.3771       21.3771       294.012       315.389    
  41  0.789998     -0.235725      -11.2450       11.2450       313.152       324.397    
  42  0.453703E-01  -3.09290      -147.543       147.543       305.147       452.690    
  43  0.866893     -0.142840      -6.81402       6.81402       282.662       289.476    
  44  0.122493E-01  -4.40228      -210.006       210.006       313.360       523.365    
  45  0.172311      -1.75846      -83.8850       83.8850       304.193       388.078    
  46  0.899580     -0.105827      -5.04834       5.04834       281.545       286.593    
  47  0.857845     -0.153332      -7.31451       7.31451       325.871       333.186    
  48  0.176813      -1.73266      -82.6545       82.6545       312.134       394.788    
  49  0.795271E-01  -2.53166      -120.770       120.770       297.424       418.193    
  50  0.461368     -0.773559      -36.9017       36.9017       318.942       355.844    
  51  0.727625     -0.317970      -15.1684       15.1684       318.671       333.839    
  52  0.106879      -2.23606      -106.669       106.669       275.738       382.407    
  53  0.169411      -1.77543      -84.6945       84.6945       277.562       362.257    
  54  0.150923      -1.89099      -90.2073       90.2073       319.172       409.380    
  55  0.970144     -0.303104E-01  -1.44592       1.44592       319.053       320.499    
  56  0.819386     -0.199200      -9.50258       9.50258       315.769       325.272    
  57  0.855509     -0.156059      -7.44461       7.44461       354.393       361.838    
  58  0.248182      -1.39359      -66.4796       66.4796       310.973       377.453    
  59  0.632181     -0.458580      -21.8760       21.8760       317.931       339.807    
  60  0.626090     -0.468262      -22.3379       22.3379       319.358       341.696    
  61  0.122722      -2.09783      -100.074       100.074       325.716       425.790    
  62  0.656077     -0.421477      -20.1060       20.1060       318.025       338.131    
  63  0.811645     -0.208692      -9.95540       9.95540       344.821       354.776    
  64  0.241419E-05  -12.9341      -617.008       617.008       257.925       874.933    
  65  0.450747     -0.796849      -38.0127       38.0127       316.943       354.956    
  66  0.299124      -1.20690      -57.5736       57.5736       353.465       411.039    
  67  0.156254      -1.85627      -88.5513       88.5513       329.961       418.513    
  68  0.323711      -1.12790      -53.8052       53.8052       311.882       365.687    
  69  0.447335     -0.804447      -38.3751       38.3751       287.140       325.515    
  70  0.457702     -0.781538      -37.2823       37.2823       421.746       459.028    
  71  0.532478     -0.630214      -30.0636       30.0636       269.945       300.009    
  72  0.847970E-01  -2.46749      -117.709       117.709       313.807       431.516    
  73  0.624219     -0.471254      -22.4806       22.4806       272.208       294.688    
  74  0.753467     -0.283070      -13.5035       13.5035       308.952       322.456    
  75  0.838964     -0.175587      -8.37616       8.37616       424.873       433.250    
  76  0.839674     -0.174741      -8.33582       8.33582       496.644       504.980    
  77  0.776274     -0.253250      -12.0810       12.0810       282.708       294.789    
  78  0.739325     -0.302017      -14.4074       14.4074       333.837       348.245    
  79  0.973277     -0.270868E-01  -1.29214       1.29214       524.684       525.976    
loop,thermsimp(1:2)       71   10.0342       24.2439    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191        368.08         87.24          1.05         39.64          1.63          0.05        129.61
Just calling func    0   0        129.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192        671.79         87.49          1.06         39.96          1.15          0.05        129.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    368.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       71
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       72
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      191     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883      -6.62524       6.62524       256.750       263.375    
   2  0.470451     -0.754063      -35.9717       35.9717       255.057       291.029    
   3  0.615627     -0.485114      -23.1418       23.1418       254.566       277.708    
   4  0.291899      -1.23135      -58.7399       58.7399       269.425       328.165    
   5  0.584822     -0.536448      -25.5906       25.5906       255.802       281.392    
   6  0.681731     -0.383120      -18.2763       18.2763       281.545       299.821    
   7  0.680149     -0.385444      -18.3871       18.3871       282.662       301.049    
   8  0.560478     -0.578966      -27.6189       27.6189       288.946       316.565    
   9  0.392299     -0.935730      -44.6378       44.6378       269.284       313.922    
  10  0.586793     -0.533083      -25.4301       25.4301       272.208       297.638    
  11  0.461418     -0.773452      -36.8966       36.8966       282.708       319.604    
  12  0.142886      -1.94571      -92.8178       92.8178       270.947       363.765    
  13  0.960325     -0.404831E-01  -1.93120       1.93120       269.945       271.876    
  14  0.547176     -0.602984      -28.7646       28.7646       277.887       306.652    
  15  0.817596     -0.201386      -9.60689       9.60689       287.540       297.147    
  16  0.184065      -1.69247      -80.7370       80.7370       290.928       371.665    
  17  0.763954     -0.269247      -12.8441       12.8441       290.274       303.118    
  18  0.740640     -0.300240      -14.3226       14.3226       278.834       293.156    
  19  0.257299      -1.35751      -64.7586       64.7586       294.012       358.771    
  20  0.274950      -1.29117      -61.5936       61.5936       320.091       381.685    
  21  0.850599     -0.161814      -7.71915       7.71915       319.053       326.772    
  22  0.265651      -1.32557      -63.2348       63.2348       308.952       372.187    
  23  0.388810     -0.944665      -45.0641       45.0641       319.594       364.658    
  24  0.921262     -0.820106E-01  -3.91221       3.91221       270.037       273.949    
  25  0.622168     -0.474545      -22.6376       22.6376       291.059       313.696    
  26  0.831499     -0.184526      -8.80256       8.80256       313.152       321.955    
  27  0.777776     -0.251317      -11.9888       11.9888       315.769       327.758    
  28  0.519638     -0.654624      -31.2280       31.2280       287.140       318.368    
  29  0.343480      -1.06863      -50.9775       50.9775       300.437       351.414    
  30  0.379182     -0.969738      -46.2602       46.2602       317.896       364.156    
  31  0.509964     -0.673415      -32.1244       32.1244       277.109       309.233    
  32  0.457294E-01  -3.08501      -147.167       147.167       325.871       473.038    
  33  0.952238     -0.489400E-01  -2.33462       2.33462       318.671       321.005    
  34  0.198116      -1.61890      -77.2277       77.2277       283.393       360.621    
  35  0.863922     -0.146273      -6.97779       6.97779       317.736       324.714    
  36  0.765944     -0.266646      -12.7200       12.7200       318.025       330.745    
  37  0.849389     -0.163238      -7.78709       7.78709       317.931       325.718    
  38  0.488339     -0.716745      -34.1914       34.1914       319.358       353.549    
  39  0.969632     -0.308388E-01  -1.47113       1.47113       276.452       277.923    
  40  0.971690     -0.287184E-01  -1.36997       1.36997       333.837       335.207    
  41  0.690522     -0.370307      -17.6651       17.6651       314.940       332.605    
  42  0.266028      -1.32415      -63.1672       63.1672       313.757       376.924    
  43  0.581296     -0.542495      -25.8791       25.8791       316.952       342.831    
  44  0.636654     -0.451529      -21.5396       21.5396       318.008       339.548    
  45  0.947680     -0.537383E-01  -2.56352       2.56352       322.677       325.240    
  46  0.792806     -0.232176      -11.0757       11.0757       332.461       343.537    
  47  0.420588     -0.866101      -41.3163       41.3163       344.821       386.137    
  48  0.780043     -0.248407      -11.8499       11.8499       316.943       328.793    
  49  0.834700E-01  -2.48327      -118.461       118.461       318.942       437.403    
  50  0.707823     -0.345562      -16.4846       16.4846       319.305       335.790    
  51  0.836500     -0.178529      -8.51652       8.51652       284.323       292.840    
  52  0.111614      -2.19271      -104.600       104.600       354.393       458.994    
  53  0.690314     -0.370608      -17.6794       17.6794       282.959       300.638    
  54  0.200139      -1.60874      -76.7431       76.7431       277.562       354.305    
  55  0.182543E-01  -4.00336      -190.975       190.975       278.568       469.543    
  56  0.248611      -1.39187      -66.3973       66.3973       311.882       378.279    
  57  0.951106     -0.501293E-01  -2.39136       2.39136       325.264       327.655    
  58  0.576942     -0.550013      -26.2377       26.2377       310.973       337.211    
  59  0.335384      -1.09248      -52.1154       52.1154       275.738       327.854    
  60  0.137719E-01  -4.28512      -204.417       204.417       304.193       508.609    
  61  0.839758     -0.174642      -8.33108       8.33108       312.134       320.465    
  62  0.324640      -1.12504      -53.6686       53.6686       319.806       373.475    
  63  0.758550     -0.276346      -13.1828       13.1828       319.172       332.355    
  64  0.704737     -0.349931      -16.6930       16.6930       353.465       370.158    
  65  0.848812     -0.163918      -7.81951       7.81951       297.424       305.243    
  66  0.881053     -0.126637      -6.04106       6.04106       329.961       336.003    
  67  0.191937      -1.65059      -78.7393       78.7393       325.716       404.455    
  68  0.646624     -0.435990      -20.7984       20.7984       313.807       334.605    
  69  0.424145     -0.857680      -40.9146       40.9146       424.873       465.788    
  70  0.760934     -0.273209      -13.0331       13.0331       262.089       275.122    
  71  0.774467     -0.255580      -12.1921       12.1921       305.147       317.339    
  72  0.253405      -1.37276      -65.4861       65.4861       421.746       487.232    
  73  0.251414      -1.38065      -65.8624       65.8624       326.468       392.331    
  74  0.600642     -0.509755      -24.3173       24.3173       496.644       520.961    
  75  0.209781      -1.56169      -74.4985       74.4985       313.360       387.858    
  76  0.371100     -0.991283      -47.2880       47.2880       524.684       571.972    
  77  0.117951      -2.13749      -101.966       101.966       318.025       419.991    
  78  0.775530     -0.254208      -12.1267       12.1267       315.864       327.991    
  79  0.235173      -1.44744      -69.0481       69.0481       368.077       437.125    
loop,thermsimp(1:2)       72   6.62524       35.9717    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193        401.09         87.29          1.10         40.03          1.02          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    401.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       72
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       73
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      192     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -14.2409       14.2409       256.750       270.991    
   2  0.823468     -0.194230      -9.26552       9.26552       269.945       279.211    
   3  0.352913      -1.04153      -49.6851       49.6851       270.037       319.722    
   4  0.268511      -1.31486      -62.7239       62.7239       262.089       324.812    
   5  0.137541      -1.98383      -94.6364       94.6364       254.566       349.202    
   6  0.953738     -0.473661E-01  -2.25954       2.25954       276.452       278.712    
   7  0.366602      -1.00348      -47.8697       47.8697       255.802       303.671    
   8  0.861530     -0.149046      -7.11005       7.11005       255.057       262.167    
   9  0.190086      -1.66028      -79.2015       79.2015       284.323       363.525    
  10  0.931621     -0.708293E-01  -3.37882       3.37882       278.834       282.212    
  11  0.135562      -1.99833      -95.3278       95.3278       287.540       382.868    
  12  0.577052     -0.549824      -26.2287       26.2287       272.208       298.436    
  13  0.937511     -0.645266E-01  -3.07816       3.07816       281.545       284.623    
  14  0.836727     -0.178258      -8.50356       8.50356       282.959       291.463    
  15  0.124731      -2.08159      -99.2998       99.2998       282.662       381.961    
  16  0.830758     -0.185417      -8.84510       8.84510       290.274       299.119    
  17  0.925849     -0.770442E-01  -3.67530       3.67530       297.424       301.099    
  18  0.945668     -0.558633E-01  -2.66489       2.66489       277.887       280.552    
  19  0.700762     -0.355587      -16.9628       16.9628       277.109       294.072    
  20  0.585168E-01  -2.83844      -135.404       135.404       291.059       426.463    
  21  0.241985      -1.41888      -67.6859       67.6859       269.284       336.970    
  22  0.426115     -0.853047      -40.6935       40.6935       288.946       329.639    
  23  0.730656     -0.313813      -14.9701       14.9701       305.147       320.117    
  24  0.227460      -1.48078      -70.6389       70.6389       287.140       357.779    
  25  0.824070     -0.193500      -9.23067       9.23067       282.708       291.938    
  26  0.912829     -0.912064E-01  -4.35089       4.35089       312.134       316.484    
  27  0.130860      -2.03363      -97.0117       97.0117       318.671       415.682    
  28  0.126999      -2.06358      -98.4404       98.4404       313.152       411.592    
  29  0.394828E-01  -3.23189      -154.173       154.173       317.736       471.909    
  30  0.927793     -0.749466E-01  -3.57523       3.57523       322.677       326.252    
  31  0.161762      -1.82163      -86.8986       86.8986       317.931       404.830    
  32  0.510374     -0.672611      -32.0861       32.0861       319.053       351.139    
  33  0.930607     -0.719186E-01  -3.43079       3.43079       325.264       328.694    
  34  0.825283E-01  -2.49461      -119.002       119.002       315.769       434.772    
  35  0.569143     -0.563624      -26.8870       26.8870       275.738       302.625    
  36  0.732951     -0.310676      -14.8204       14.8204       315.864       330.685    
  37  0.554950     -0.588877      -28.0917       28.0917       269.425       297.517    
  38  0.614368     -0.487160      -23.2394       23.2394       316.943       340.183    
  39  0.127889      -2.05659      -98.1073       98.1073       318.025       416.132    
  40  0.510007     -0.673330      -32.1204       32.1204       319.172       351.293    
  41  0.206107      -1.57936      -75.3415       75.3415       314.940       390.282    
  42  0.812962E-01  -2.50966      -119.720       119.720       313.807       433.527    
  43  0.711913     -0.339799      -16.2097       16.2097       333.837       350.047    
  44  0.649899     -0.430939      -20.5574       20.5574       319.305       339.862    
  45  0.102708      -2.27587      -108.567       108.567       329.961       438.529    
  46  0.152702      -1.87927      -89.6481       89.6481       310.973       400.621    
  47  0.827734     -0.189064      -9.01906       9.01906       318.008       327.027    
  48  0.558329     -0.582808      -27.8021       27.8021       316.952       344.754    
  49  0.174746      -1.74442      -83.2156       83.2156       332.461       415.677    
  50  0.107247      -2.23262      -106.505       106.505       300.437       406.941    
  51  0.988891     -0.111711E-01 -0.532902      0.532902       319.358       319.891    
  52  0.388651     -0.945075      -45.0836       45.0836       277.562       322.646    
  53  0.580190     -0.544399      -25.9699       25.9699       294.012       319.982    
  54  0.519409E-01  -2.95765      -141.091       141.091       283.393       424.484    
  55  0.418368     -0.871393      -41.5688       41.5688       270.947       312.516    
  56  0.435950     -0.830228      -39.6050       39.6050       317.896       357.501    
  57  0.226091      -1.48682      -70.9268       70.9268       319.594       390.521    
  58  0.371316     -0.990702      -47.2602       47.2602       353.465       400.725    
  59  0.113770      -2.17358      -103.688       103.688       290.928       394.616    
  60  0.335886      -1.09098      -52.0441       52.0441       308.952       360.996    
  61  0.733883     -0.309406      -14.7598       14.7598       319.806       334.566    
  62  0.127704      -2.05804      -98.1765       98.1765       313.757       411.934    
  63  0.205687      -1.58140      -75.4388       75.4388       311.882       387.321    
  64  0.315213      -1.15451      -55.0743       55.0743       320.091       375.165    
  65  0.329345      -1.11065      -52.9822       52.9822       344.821       397.803    
  66  0.193213      -1.64396      -78.4232       78.4232       313.360       391.783    
  67  0.593921     -0.521008      -24.8541       24.8541       326.468       351.322    
  68  0.128520      -2.05167      -97.8724       97.8724       325.716       423.588    
  69  0.201122      -1.60384      -76.5094       76.5094       318.025       394.535    
  70  0.699786E-01  -2.65957      -126.871       126.871       368.077       494.948    
  71  0.830255     -0.186022      -8.87396       8.87396       318.942       327.816    
  72  0.266599      -1.32201      -63.0648       63.0648       354.393       417.458    
  73  0.170782      -1.76737      -84.3102       84.3102       424.873       509.184    
  74  0.453561     -0.790625      -37.7158       37.7158       278.568       316.283    
  75  0.106539      -2.23924      -106.820       106.820       325.871       432.691    
  76  0.438612     -0.824140      -39.3146       39.3146       421.746       461.060    
  77  0.336283E-01  -3.39239      -161.830       161.830       304.193       466.022    
  78  0.426678     -0.851726      -40.6305       40.6305       496.644       537.274    
  79  0.852569     -0.159501      -7.60879       7.60879       401.089       408.698    
loop,thermsimp(1:2)       73   14.2409       9.26552    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        460.61         87.58          1.16         40.21          0.77          0.05        129.77
Just calling func    0   0        129.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    460.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       73
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       74
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      193     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175      -8.54732       8.54732       255.057       263.604    
   2  0.439366     -0.822423      -39.2327       39.2327       256.750       295.983    
   3  0.603094     -0.505682      -24.1229       24.1229       276.452       300.575    
   4  0.695854E-01  -2.66520      -127.140       127.140       269.945       397.085    
   5  0.273021      -1.29821      -61.9294       61.9294       277.887       339.817    
   6  0.418319     -0.871511      -41.5744       41.5744       278.834       320.408    
   7  0.688437     -0.373331      -17.8093       17.8093       281.545       299.354    
   8  0.400930     -0.913969      -43.5998       43.5998       282.959       326.559    
   9  0.569492     -0.563010      -26.8577       26.8577       282.708       309.565    
  10  0.812441     -0.207712      -9.90864       9.90864       277.109       287.017    
  11  0.222094      -1.50465      -71.7777       71.7777       269.425       341.203    
  12  0.695761     -0.362749      -17.3045       17.3045       272.208       289.512    
  13  0.909536E-01  -2.39741      -114.365       114.365       290.274       404.639    
  14  0.297191      -1.21338      -57.8827       57.8827       297.424       355.306    
  15  0.806729     -0.214767      -10.2452       10.2452       275.738       285.984    
  16  0.407021     -0.898891      -42.8805       42.8805       255.802       298.682    
  17  0.520426     -0.653107      -31.1557       31.1557       270.947       302.103    
  18  0.826852     -0.190129      -9.06988       9.06988       278.568       287.637    
  19  0.729268     -0.315714      -15.0608       15.0608       312.134       327.194    
  20  0.344086      -1.06687      -50.8935       50.8935       270.037       320.930    
  21  0.280849      -1.26994      -60.5808       60.5808       319.358       379.939    
  22  0.301244E-01  -3.50242      -167.079       167.079       294.012       461.091    
  23  0.503253     -0.686663      -32.7564       32.7564       305.147       337.903    
  24  0.549007     -0.599644      -28.6053       28.6053       277.562       306.167    
  25  0.814230     -0.205513      -9.80373       9.80373       262.089       271.892    
  26  0.641489     -0.443963      -21.1787       21.1787       322.677       343.855    
  27  0.248696      -1.39152      -66.3809       66.3809       318.008       384.389    
  28  0.684472     -0.379107      -18.0848       18.0848       318.942       337.027    
  29  0.815126     -0.204413      -9.75125       9.75125       325.264       335.015    
  30  0.388210     -0.946208      -45.1377       45.1377       288.946       334.083    
  31  0.670538     -0.399675      -19.0660       19.0660       315.864       334.930    
  32  0.851104     -0.161221      -7.69084       7.69084       319.806       327.497    
  33  0.381078     -0.964752      -46.0223       46.0223       269.284       315.307    
  34  0.776256     -0.253273      -12.0821       12.0821       319.305       331.387    
  35  0.168040      -1.78355      -85.0821       85.0821       316.943       402.025    
  36  0.229069      -1.47373      -70.3025       70.3025       316.952       387.254    
  37  0.917563     -0.860337E-01  -4.10413       4.10413       254.566       258.670    
  38  0.161815      -1.82130      -86.8830       86.8830       333.837       420.720    
  39  0.355170      -1.03516      -49.3810       49.3810       319.053       368.434    
  40  0.221709      -1.50639      -71.8604       71.8604       319.172       391.033    
  41  0.424436     -0.856993      -40.8818       40.8818       326.468       367.350    
  42  0.337698      -1.08560      -51.7874       51.7874       317.896       369.683    
  43  0.574481     -0.554289      -26.4417       26.4417       287.140       313.582    
  44  0.614536     -0.486888      -23.2264       23.2264       308.952       332.178    
  45  0.345602      -1.06247      -50.6837       50.6837       284.323       335.007    
  46  0.330006      -1.10864      -52.8865       52.8865       320.091       372.978    
  47  0.934389     -0.678626E-01  -3.23730       3.23730       282.662       285.899    
  48  0.884466     -0.122771      -5.85665       5.85665       287.540       293.397    
  49  0.928979     -0.736686E-01  -3.51427       3.51427       311.882       315.396    
  50  0.788461     -0.237672      -11.3378       11.3378       314.940       326.278    
  51  0.963462     -0.372219E-01  -1.77562       1.77562       319.594       321.370    
  52  0.630201     -0.461716      -22.0256       22.0256       313.360       335.385    
  53  0.797085     -0.226794      -10.8189       10.8189       318.025       328.844    
  54  0.389249     -0.943537      -45.0103       45.0103       290.928       335.938    
  55  0.660522     -0.414724      -19.7839       19.7839       344.821       364.605    
  56  0.520011     -0.653905      -31.1937       31.1937       310.973       342.167    
  57  0.270094      -1.30899      -62.4436       62.4436       353.465       415.909    
  58  0.218485      -1.52104      -72.5592       72.5592       317.931       390.491    
  59  0.391194     -0.938551      -44.7724       44.7724       300.437       345.209    
  60  0.740024     -0.301073      -14.3623       14.3623       401.089       415.452    
  61  0.184403      -1.69063      -80.6496       80.6496       313.152       393.802    
  62  0.309007E-01  -3.47698      -165.865       165.865       313.757       479.622    
  63  0.916682     -0.869952E-01  -4.15000       4.15000       332.461       336.611    
  64  0.268894      -1.31344      -62.6560       62.6560       318.671       381.327    
  65  0.705018     -0.349532      -16.6740       16.6740       318.025       334.699    
  66  0.748256     -0.290010      -13.8346       13.8346       354.393       368.228    
  67  0.828532     -0.188099      -8.97304       8.97304       325.716       334.689    
  68  0.336848      -1.08812      -51.9075       51.9075       283.393       335.301    
  69  0.686319     -0.376413      -17.9563       17.9563       291.059       309.015    
  70  0.731123     -0.313173      -14.9396       14.9396       325.871       340.811    
  71  0.793361     -0.231477      -11.0423       11.0423       313.807       324.849    
  72  0.755239     -0.280722      -13.3915       13.3915       315.769       329.161    
  73  0.962869     -0.378380E-01  -1.80502       1.80502       329.961       331.766    
  74  0.705811     -0.348407      -16.6203       16.6203       421.746       438.366    
  75  0.981446E-01  -2.32131      -110.735       110.735       304.193       414.928    
  76  0.783030     -0.244584      -11.6676       11.6676       317.736       329.404    
  77  0.660442     -0.414846      -19.7897       19.7897       368.077       387.867    
  78  0.986973     -0.131127E-01 -0.625523      0.625523       424.873       425.499    
  79  0.720012     -0.328488      -15.6701       15.6701       460.614       476.284    
loop,thermsimp(1:2)       74   8.54732       39.2327    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195        263.97         87.67          1.16         39.75          1.20          0.05        129.82
Just calling func    0   0        129.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196        258.37         87.79          1.14         39.78          0.93          0.05        129.69
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    258.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       74
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       75
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      195     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -46.8177       46.8177       254.566       301.384    
   2  0.269095      -1.31269      -62.6203       62.6203       255.057       317.677    
   3  0.301960      -1.19746      -57.1234       57.1234       262.089       319.212    
   4  0.927593     -0.751619E-01  -3.58551       3.58551       282.662       286.247    
   5  0.783450     -0.244048      -11.6420       11.6420       275.738       287.380    
   6  0.716705     -0.333091      -15.8897       15.8897       277.109       292.998    
   7  0.728578     -0.316661      -15.1059       15.1059       278.568       293.674    
   8  0.752541     -0.284300      -13.5622       13.5622       272.208       285.770    
   9  0.111710      -2.19185      -104.559       104.559       287.540       392.100    
  10  0.202752E-01  -3.89836      -185.966       185.966       256.750       442.717    
  11  0.967738     -0.327937E-01  -1.56438       1.56438       255.802       257.366    
  12  0.530869     -0.633240      -30.2080       30.2080       281.545       311.753    
  13  0.752699E-01  -2.58668      -123.394       123.394       276.452       399.846    
  14  0.658334     -0.418043      -19.9422       19.9422       270.947       290.889    
  15  0.383542     -0.958305      -45.7148       45.7148       277.562       323.277    
  16  0.280803      -1.27010      -60.5887       60.5887       291.059       351.647    
  17  0.976909     -0.233616E-01  -1.11444       1.11444       282.708       283.822    
  18  0.611898     -0.491189      -23.4316       23.4316       287.140       310.572    
  19  0.860469     -0.150278      -7.16884       7.16884       269.284       276.453    
  20  0.375446     -0.979641      -46.7326       46.7326       311.882       358.614    
  21  0.964573     -0.360702E-01  -1.72068       1.72068       278.834       280.554    
  22  0.865663     -0.144259      -6.88170       6.88170       270.037       276.918    
  23  0.498009     -0.697137      -33.2561       33.2561       319.594       352.850    
  24  0.732547     -0.311228      -14.8467       14.8467       313.807       328.654    
  25  0.293766      -1.22497      -58.4357       58.4357       314.940       373.376    
  26  0.805097     -0.216793      -10.3418       10.3418       282.959       293.301    
  27  0.236791      -1.44058      -68.7210       68.7210       312.134       380.855    
  28  0.759809     -0.274688      -13.1037       13.1037       319.806       332.910    
  29  0.279804      -1.27367      -60.7586       60.7586       318.025       378.784    
  30  0.862550     -0.147862      -7.05360       7.05360       315.769       322.823    
  31  0.784800     -0.242327      -11.5599       11.5599       317.736       329.296    
  32  0.231425      -1.46350      -69.8144       69.8144       319.305       389.119    
  33  0.839725     -0.174681      -8.33295       8.33295       329.961       338.294    
  34  0.204862      -1.58542      -75.6305       75.6305       308.952       384.582    
  35  0.741170     -0.299525      -14.2885       14.2885       288.946       303.234    
  36  0.838703     -0.175898      -8.39100       8.39100       325.716       334.107    
  37  0.287711      -1.24580      -59.4292       59.4292       318.025       377.454    
  38  0.937479     -0.645611E-01  -3.07981       3.07981       315.864       318.944    
  39  0.188655      -1.66783      -79.5620       79.5620       284.323       363.885    
  40  0.818317     -0.200505      -9.56485       9.56485       325.264       334.829    
  41  0.903487     -0.101493      -4.84160       4.84160       283.393       288.235    
  42  0.148828      -1.90496      -90.8740       90.8740       313.360       404.234    
  43  0.573616E-01  -2.85838      -136.356       136.356       290.928       427.283    
  44  0.792726E-01  -2.53486      -120.922       120.922       332.461       453.384    
  45  0.150401      -1.89445      -90.3726       90.3726       318.942       409.314    
  46  0.511444     -0.670518      -31.9862       31.9862       305.147       337.133    
  47  0.179810      -1.71585      -81.8527       81.8527       277.887       359.740    
  48  0.167282      -1.78808      -85.2980       85.2980       325.871       411.169    
  49  0.589016     -0.529302      -25.2497       25.2497       269.425       294.675    
  50  0.974997     -0.253206E-01  -1.20789       1.20789       310.973       312.181    
  51  0.750240     -0.287363      -13.7083       13.7083       322.677       336.385    
  52  0.695153     -0.363624      -17.3462       17.3462       300.437       317.783    
  53  0.166976      -1.78991      -85.3852       85.3852       297.424       382.809    
  54  0.228686      -1.47540      -70.3823       70.3823       344.821       415.203    
  55  0.728220     -0.317152      -15.1293       15.1293       326.468       341.598    
  56  0.321968      -1.13330      -54.0629       54.0629       354.393       408.456    
  57  0.494283     -0.704647      -33.6143       33.6143       319.053       352.667    
  58  0.398916     -0.919004      -43.8400       43.8400       317.896       361.736    
  59  0.130321      -2.03776      -97.2087       97.2087       320.091       417.300    
  60  0.131470E-01  -4.33156      -206.632       206.632       319.358       525.990    
  61  0.868361E-03  -7.04890      -336.259       336.259       318.671       654.930    
  62  0.572113     -0.558419      -26.6387       26.6387       318.008       344.647    
  63  0.201897      -1.60000      -76.3259       76.3259       316.952       393.278    
  64  0.795960     -0.228206      -10.8863       10.8863       368.077       378.963    
  65  0.904277E-01  -2.40321      -114.642       114.642       317.931       432.573    
  66  0.976775E-01  -2.32608      -110.963       110.963       319.172       430.135    
  67  0.231524      -1.46307      -69.7940       69.7940       313.152       382.946    
  68  0.542363     -0.611819      -29.1861       29.1861       269.945       299.131    
  69  0.332318      -1.10166      -52.5535       52.5535       316.943       369.497    
  70  0.840822     -0.173375      -8.27066       8.27066       290.274       298.545    
  71  0.528412E-01  -2.94046      -140.271       140.271       304.193       444.464    
  72  0.191882      -1.65087      -78.7529       78.7529       401.089       479.842    
  73  0.950825     -0.504248E-01  -2.40545       2.40545       353.465       355.870    
  74  0.619954     -0.478110      -22.8076       22.8076       333.837       356.645    
  75  0.675288     -0.392616      -18.7293       18.7293       424.873       443.603    
  76  0.317088      -1.14857      -54.7914       54.7914       421.746       476.537    
  77  0.346672      -1.05938      -50.5363       50.5363       294.012       344.548    
  78  0.177479      -1.72890      -82.4752       82.4752       460.614       543.089    
  79  0.527174     -0.640224      -30.5411       30.5411       258.372       288.913    
loop,thermsimp(1:2)       75   46.8177       62.6203    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197        258.29         87.31          1.11         39.99          1.26          0.05        129.72
Just calling func    0   0        129.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198        256.38         87.23          1.14         40.18          1.11          0.05        129.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    256.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       75
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       76
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      197     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -143.167       143.167       255.802       398.969    
   2  0.604222     -0.503814      -24.0338       24.0338       269.284       293.318    
   3  0.106168      -2.24273      -106.987       106.987       270.037       377.023    
   4  0.342113      -1.07261      -51.1677       51.1677       278.834       330.001    
   5  0.473442     -0.747725      -35.6693       35.6693       282.708       318.377    
   6  0.100866E-01  -4.59655      -219.273       219.273       272.208       491.481    
   7  0.911848     -0.922817E-01  -4.40219       4.40219       282.662       287.064    
   8  0.633547     -0.456421      -21.7730       21.7730       275.738       297.511    
   9  0.729024     -0.316048      -15.0767       15.0767       283.393       298.470    
  10  0.620163     -0.477772      -22.7915       22.7915       258.372       281.163    
  11  0.867018     -0.142695      -6.80710       6.80710       270.947       277.754    
  12  0.969344E-01  -2.33372      -111.327       111.327       277.109       388.436    
  13  0.358466      -1.02592      -48.9403       48.9403       282.959       331.899    
  14  0.953168     -0.479638E-01  -2.28805       2.28805       278.568       280.856    
  15  0.684510     -0.379052      -18.0822       18.0822       269.425       287.508    
  16  0.482047     -0.729713      -34.8101       34.8101       290.274       325.084    
  17  0.974791     -0.255318E-01  -1.21797       1.21797       269.945       271.163    
  18  0.978669     -0.215619E-01  -1.02859       1.02859       254.566       255.595    
  19  0.929785     -0.728022E-01  -3.47294       3.47294       288.946       292.419    
  20  0.715020     -0.335444      -16.0020       16.0020       287.140       303.142    
  21  0.598247     -0.513752      -24.5079       24.5079       281.545       306.053    
  22  0.107080      -2.23418      -106.579       106.579       310.973       417.552    
  23  0.559093     -0.581439      -27.7368       27.7368       255.057       282.794    
  24  0.933094     -0.692491E-01  -3.30345       3.30345       300.437       303.740    
  25  0.470169E-01  -3.05725      -145.842       145.842       315.864       461.707    
  26  0.166768      -1.79115      -85.4447       85.4447       262.089       347.533    
  27  0.331277      -1.10480      -52.7032       52.7032       315.769       368.472    
  28  0.961755     -0.389952E-01  -1.86022       1.86022       277.562       279.422    
  29  0.464366E-01  -3.06967      -146.435       146.435       313.807       460.242    
  30  0.966136E-03  -6.94221      -331.169       331.169       317.736       648.906    
  31  0.941012     -0.607999E-01  -2.90038       2.90038       319.806       322.707    
  32  0.201947E-01  -3.90233      -186.156       186.156       325.716       511.872    
  33  0.679249     -0.386768      -18.4503       18.4503       325.264       343.714    
  34  0.318772      -1.14328      -54.5387       54.5387       322.677       377.215    
  35  0.388100     -0.946493      -45.1513       45.1513       305.147       350.298    
  36  0.658606     -0.417629      -19.9225       19.9225       329.961       349.884    
  37  0.774362     -0.255715      -12.1986       12.1986       326.468       338.667    
  38  0.704871     -0.349740      -16.6839       16.6839       294.012       310.696    
  39  0.274189      -1.29394      -61.7257       61.7257       318.008       379.734    
  40  0.881806     -0.125783      -6.00031       6.00031       291.059       297.059    
  41  0.198448      -1.61723      -77.1478       77.1478       319.053       396.201    
  42  0.342590      -1.07122      -51.1013       51.1013       319.594       370.695    
  43  0.603787     -0.504534      -24.0682       24.0682       353.465       377.533    
  44  0.667409     -0.404353      -19.2892       19.2892       333.837       353.126    
  45  0.317014      -1.14881      -54.8025       54.8025       311.882       366.684    
  46  0.368458     -0.998429      -47.6288       47.6288       277.887       325.516    
  47  0.139912      -1.96674      -93.8211       93.8211       317.896       411.717    
  48  0.537645     -0.620557      -29.6029       29.6029       284.323       313.926    
  49  0.159021      -1.83872      -87.7140       87.7140       316.943       404.657    
  50  0.729011     -0.316067      -15.0776       15.0776       314.940       330.018    
  51  0.802486     -0.220041      -10.4968       10.4968       318.025       328.522    
  52  0.249203      -1.38949      -66.2838       66.2838       318.025       384.309    
  53  0.282362      -1.26456      -60.3245       60.3245       368.077       428.402    
  54  0.803878     -0.218308      -10.4141       10.4141       312.134       322.548    
  55  0.183401      -1.69608      -80.9093       80.9093       297.424       378.333    
  56  0.144999      -1.93103      -92.1174       92.1174       313.152       405.269    
  57  0.821026     -0.197200      -9.40719       9.40719       308.952       318.359    
  58  0.391750     -0.937132      -44.7048       44.7048       319.305       364.010    
  59  0.605745     -0.501297      -23.9137       23.9137       287.540       311.454    
  60  0.759982E-01  -2.57705      -122.935       122.935       316.952       439.887    
  61  0.856619     -0.154762      -7.38272       7.38272       276.452       283.835    
  62  0.200085      -1.60901      -76.7560       76.7560       313.360       390.116    
  63  0.623969     -0.471654      -22.4997       22.4997       354.393       376.893    
  64  0.668527     -0.402679      -19.2093       19.2093       318.942       338.151    
  65  0.926898     -0.759121E-01  -3.62129       3.62129       325.871       329.492    
  66  0.972428     -0.279590E-01  -1.33375       1.33375       344.821       346.155    
  67  0.230218      -1.46873      -70.0639       70.0639       320.091       390.155    
  68  0.756442E-01  -2.58171      -123.158       123.158       290.928       414.085    
  69  0.209346      -1.56377      -74.5975       74.5975       319.172       393.770    
  70  0.198646      -1.61623      -77.1003       77.1003       317.931       395.032    
  71  0.196542E-01  -3.92947      -187.450       187.450       256.750       444.200    
  72  0.654679     -0.423610      -20.2078       20.2078       424.873       445.081    
  73  0.519808     -0.654295      -31.2124       31.2124       304.193       335.405    
  74  0.290149      -1.23736      -59.0268       59.0268       332.461       391.488    
  75  0.266623      -1.32192      -63.0606       63.0606       421.746       484.806    
  76  0.568763     -0.564291      -26.9188       26.9188       401.089       428.008    
  77  0.159251      -1.83727      -87.6449       87.6449       319.358       407.003    
  78  0.671472     -0.398283      -18.9996       18.9996       460.614       479.613    
  79  0.401138     -0.913450      -43.5750       43.5750       256.377       299.952    
loop,thermsimp(1:2)       76   143.167       24.0338    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199        258.37         87.43          1.11         40.20          0.77          0.05        129.55
Just calling func    0   0        129.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200        279.78         87.39          1.11         40.30          0.68          0.04        129.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    258.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       76
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       77
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      199     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -24.6265       24.6265       254.566       279.192    
   2  0.476930     -0.740385      -35.3192       35.3192       269.945       305.264    
   3  0.845382     -0.167966      -8.01262       8.01262       270.947       278.960    
   4  0.397814     -0.921770      -43.9719       43.9719       277.562       321.534    
   5  0.249923      -1.38660      -66.1462       66.1462       278.568       344.714    
   6  0.591552     -0.525005      -25.0447       25.0447       258.372       283.417    
   7  0.143111      -1.94414      -92.7427       92.7427       255.057       347.800    
   8  0.306099      -1.18385      -56.4740       56.4740       276.452       332.926    
   9  0.441827     -0.816836      -38.9662       38.9662       282.662       321.628    
  10  0.504521     -0.684146      -32.6364       32.6364       269.425       302.062    
  11  0.127660      -2.05839      -98.1928       98.1928       288.946       387.138    
  12  0.333524      -1.09804      -52.3807       52.3807       269.284       321.665    
  13  0.130890      -2.03340      -97.0007       97.0007       291.059       388.059    
  14  0.307732      -1.17853      -56.2201       56.2201       275.738       331.958    
  15  0.154434E-01  -4.17057      -198.952       198.952       283.393       482.345    
  16  0.357863      -1.02761      -49.0206       49.0206       256.377       305.398    
  17  0.271898      -1.30233      -62.1259       62.1259       287.140       349.266    
  18  0.906228E-01  -2.40105      -114.539       114.539       300.437       414.976    
  19  0.344142      -1.06670      -50.8856       50.8856       281.545       332.431    
  20  0.392886     -0.934237      -44.5666       44.5666       294.012       338.579    
  21  0.454318     -0.788958      -37.6363       37.6363       287.540       325.176    
  22  0.384129     -0.956778      -45.6419       45.6419       284.323       329.965    
  23  0.354037      -1.03835      -49.5334       49.5334       308.952       358.485    
  24  0.154212      -1.86943      -89.1789       89.1789       282.708       371.887    
  25  0.816320     -0.202949      -9.68145       9.68145       312.134       321.815    
  26  0.994970     -0.504291E-02 -0.240566      0.240566       319.806       320.047    
  27  0.374719E-01  -3.28416      -156.667       156.667       290.274       446.941    
  28  0.227113      -1.48231      -70.7116       70.7116       277.887       348.599    
  29  0.410587     -0.890167      -42.4643       42.4643       318.025       360.490    
  30  0.104540E-01  -4.56077      -217.566       217.566       325.871       543.437    
  31  0.994826     -0.518730E-02 -0.247454      0.247454       278.834       279.081    
  32  0.738930     -0.302553      -14.4329       14.4329       314.940       329.373    
  33  0.715904     -0.334209      -15.9430       15.9430       282.959       298.902    
  34  0.128324      -2.05320      -97.9453       97.9453       304.193       402.138    
  35  0.856095     -0.155374      -7.41190       7.41190       318.942       326.354    
  36  0.423967     -0.858099      -40.9346       40.9346       326.468       367.403    
  37  0.504650     -0.683890      -32.6241       32.6241       325.264       357.888    
  38  0.347036      -1.05833      -50.4862       50.4862       344.821       395.307    
  39  0.906779     -0.978566E-01  -4.66813       4.66813       262.089       266.757    
  40  0.616911     -0.483030      -23.0424       23.0424       329.961       353.004    
  41  0.540209     -0.615800      -29.3760       29.3760       305.147       334.523    
  42  0.772932     -0.257564      -12.2868       12.2868       333.837       346.124    
  43  0.544989     -0.606989      -28.9557       28.9557       319.305       348.261    
  44  0.951523     -0.496917E-01  -2.37048       2.37048       311.882       314.252    
  45  0.172505      -1.75733      -83.8314       83.8314       315.769       399.601    
  46  0.871391     -0.137665      -6.56712       6.56712       319.594       326.161    
  47  0.127604      -2.05882      -98.2135       98.2135       354.393       452.607    
  48  0.785934     -0.240882      -11.4910       11.4910       270.037       281.528    
  49  0.815977     -0.203369      -9.70148       9.70148       322.677       332.378    
  50  0.350587      -1.04815      -50.0006       50.0006       353.465       403.466    
  51  0.739645     -0.301584      -14.3867       14.3867       297.424       311.810    
  52  0.996274     -0.373345E-02 -0.178100      0.178100       318.008       318.186    
  53  0.303822      -1.19131      -56.8302       56.8302       318.025       374.855    
  54  0.708260     -0.344944      -16.4551       16.4551       277.109       293.564    
  55  0.646268     -0.436541      -20.8246       20.8246       313.360       334.184    
  56  0.696585     -0.361566      -17.2481       17.2481       320.091       337.339    
  57  0.439732     -0.821591      -39.1930       39.1930       332.461       371.654    
  58  0.791452     -0.233886      -11.1572       11.1572       319.172       330.330    
  59  0.202743      -1.59581      -76.1264       76.1264       317.931       394.058    
  60  0.547790E-01  -2.90445      -138.553       138.553       319.053       457.606    
  61  0.663631     -0.410029      -19.5599       19.5599       255.802       275.362    
  62  0.838292     -0.176388      -8.41439       8.41439       316.943       325.358    
  63  0.450238     -0.797979      -38.0666       38.0666       313.152       351.219    
  64  0.209610      -1.56251      -74.5375       74.5375       319.358       393.895    
  65  0.502241     -0.688676      -32.8524       32.8524       317.896       350.748    
  66  0.837306     -0.177566      -8.47057       8.47057       290.928       299.398    
  67  0.345973      -1.06139      -50.6325       50.6325       310.973       361.606    
  68  0.558861     -0.581855      -27.7567       27.7567       401.089       428.846    
  69  0.293365      -1.22634      -58.5010       58.5010       368.077       426.578    
  70  0.234701      -1.44944      -69.1440       69.1440       316.952       386.096    
  71  0.762859E-01  -2.57327      -122.755       122.755       256.750       379.505    
  72  0.994504     -0.551100E-02 -0.262896      0.262896       424.873       425.136    
  73  0.674972     -0.393084      -18.7516       18.7516       313.807       332.559    
  74  0.843847     -0.169784      -8.09934       8.09934       315.864       323.964    
  75  0.547053     -0.603209      -28.7753       28.7753       460.614       489.389    
  76  0.814637     -0.205013      -9.77990       9.77990       421.746       431.526    
  77  0.474268E-01  -3.04857      -145.428       145.428       272.208       417.636    
  78  0.267570      -1.31837      -62.8914       62.8914       325.716       388.607    
  79  0.667142     -0.404752      -19.3082       19.3082       258.366       277.675    
loop,thermsimp(1:2)       77   24.6265       35.3192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201        265.00         87.44          1.11         40.52          0.57          0.05        129.70
Just calling func    0   0        129.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202        263.89         87.36          1.09         40.02          1.07          0.05        129.60
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    265.00        3.641     -1.185      6.184     -102.6     0.7475    
                     -0.2783      3.996     -99.70      3.885     0.8812    
                       1.765     -1.394      1.473    -0.1760E+05 -2.452    
                      -1.122      0.000      0.000      0.000     -1.221    

                      -2.500     0.5096E+05 0.4189E+05 -4102.    -0.8699E+05
                      -2.146     -6.323     -4.650     -7.341      2.950    
                      -14.06     -3.021      1270.      0.000      4523.    

                       5582.      5621.      5488.      8393.      2161.    
                       2501.     0.8816E-01-0.6950E-01  0.000    -0.4700    
                     -0.8303E-01-0.1381    -0.1104    -0.2100    -0.4080E-02

                      -1.571    -0.4723E-01  0.000    -0.4356E-01 0.1067E-01
                      0.8541E-01 0.5689E-01-0.2006E-01-0.3721    -0.1549    
                     -0.2435E-01-0.4728E-01-0.7804E-01-0.3404      0.000    

                      -1.973     -1.541      1.006     0.9000    -0.2634    
                      0.1000      9.235      9.133    -0.1050E+05 -1.976    
                     -0.5182    -0.6479      9.380      8.578    -0.1000E+05

                      -1.548     0.3231E-01-0.6571      8.783      9.058    
                     -0.1000E+05 -2.200    -0.5904    -0.4394      10.11    
                       8.432    -0.1000E+05 -2.200    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    263.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       77
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       78
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      201     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01  -2.85620       2.85620       262.089       264.945    
   2  0.368209     -0.999105      -47.6611       47.6611       255.802       303.463    
   3  0.508630     -0.676034      -32.2494       32.2494       258.366       290.616    
   4  0.744324     -0.295279      -14.0859       14.0859       270.947       285.033    
   5  0.401586     -0.912333      -43.5217       43.5217       278.834       322.355    
   6  0.712794     -0.338563      -16.1507       16.1507       254.566       270.717    
   7  0.186976      -1.67678      -79.9885       79.9885       270.037       350.025    
   8  0.688451     -0.373311      -17.8084       17.8084       258.372       276.180    
   9  0.668652     -0.402492      -19.2004       19.2004       277.109       296.309    
  10  0.656767     -0.420426      -20.0559       20.0559       282.959       303.015    
  11  0.853336     -0.158602      -7.56593       7.56593       290.928       298.493    
  12  0.556440     -0.586195      -27.9637       27.9637       269.425       297.389    
  13  0.258558E-01  -3.65522      -174.368       174.368       269.945       444.313    
  14  0.121003E-01  -4.41452      -210.589       210.589       256.377       466.967    
  15  0.150890      -1.89120      -90.2174       90.2174       297.424       387.641    
  16  0.820074     -0.198360      -9.46254       9.46254       311.882       321.344    
  17  0.151452      -1.88748      -90.0401       90.0401       318.008       408.049    
  18  0.305465      -1.18592      -56.5729       56.5729       319.806       376.379    
  19  0.533202     -0.628854      -29.9987       29.9987       277.562       307.561    
  20  0.143416      -1.94201      -92.6411       92.6411       282.662       375.303    
  21  0.687081     -0.375303      -17.9034       17.9034       269.284       287.188    
  22  0.546247     -0.604685      -28.8457       28.8457       312.134       340.979    
  23  0.356987      -1.03006      -49.1376       49.1376       315.864       365.002    
  24  0.545718     -0.605653      -28.8920       28.8920       287.540       316.432    
  25  0.789688     -0.236117      -11.2637       11.2637       316.943       328.207    
  26  0.752086     -0.284904      -13.5910       13.5910       319.594       333.185    
  27  0.388816     -0.944650      -45.0633       45.0633       318.942       364.005    
  28  0.988428     -0.116395E-01 -0.555250      0.555250       314.940       315.495    
  29  0.124991      -2.07952      -99.2008       99.2008       284.323       383.524    
  30  0.568214     -0.565257      -26.9649       26.9649       319.172       346.137    
  31  0.551032     -0.595962      -28.4296       28.4296       275.738       304.168    
  32  0.423622     -0.858913      -40.9734       40.9734       322.677       363.650    
  33  0.647554     -0.434553      -20.7298       20.7298       281.545       302.275    
  34  0.686255     -0.376506      -17.9608       17.9608       313.807       331.768    
  35  0.548072     -0.601349      -28.6866       28.6866       276.452       305.139    
  36  0.880777     -0.126951      -6.05604       6.05604       313.360       319.416    
  37  0.894918     -0.111023      -5.29621       5.29621       305.147       310.443    
  38  0.241077      -1.42264      -67.8653       67.8653       320.091       387.956    
  39  0.546141     -0.604877      -28.8549       28.8549       294.012       322.867    
  40  0.266590      -1.32204      -63.0664       63.0664       278.568       341.634    
  41  0.575085     -0.553238      -26.3915       26.3915       333.837       360.229    
  42  0.907139     -0.974596E-01  -4.64919       4.64919       255.057       259.706    
  43  0.469109     -0.756920      -36.1079       36.1079       319.305       355.413    
  44  0.738008     -0.303801      -14.4925       14.4925       277.887       292.380    
  45  0.557598     -0.584116      -27.8646       27.8646       287.140       315.005    
  46  0.305677      -1.18523      -56.5397       56.5397       317.896       374.436    
  47  0.392927     -0.934131      -44.5616       44.5616       313.152       357.714    
  48  0.121997      -2.10376      -100.357       100.357       329.961       430.319    
  49  0.712082     -0.339563      -16.1984       16.1984       325.264       341.462    
  50  0.342132      -1.07256      -51.1650       51.1650       308.952       360.117    
  51  0.288307      -1.24373      -59.3306       59.3306       318.025       377.356    
  52  0.554777     -0.589188      -28.1065       28.1065       310.973       339.080    
  53  0.116597E-01  -4.45161      -212.359       212.359       326.468       538.827    
  54  0.844148     -0.169427      -8.08231       8.08231       332.461       340.544    
  55  0.910896     -0.933267E-01  -4.45204       4.45204       282.708       287.160    
  56  0.257100      -1.35829      -64.7956       64.7956       318.025       382.821    
  57  0.340199      -1.07823      -51.4354       51.4354       256.750       308.186    
  58  0.656010     -0.421580      -20.1110       20.1110       316.952       337.063    
  59  0.894739     -0.111224      -5.30579       5.30579       288.946       294.251    
  60  0.226933      -1.48310      -70.7495       70.7495       291.059       361.808    
  61  0.478182     -0.737763      -35.1941       35.1941       325.716       360.910    
  62  0.361863      -1.01649      -48.4904       48.4904       319.358       367.848    
  63  0.415757     -0.877654      -41.8674       41.8674       317.931       359.799    
  64  0.540919     -0.614487      -29.3133       29.3133       344.821       374.134    
  65  0.489341     -0.714697      -34.0937       34.0937       315.769       349.863    
  66  0.963632     -0.370456E-01  -1.76722       1.76722       304.193       305.960    
  67  0.312700      -1.16251      -55.4562       55.4562       353.465       408.921    
  68  0.145861      -1.92510      -91.8345       91.8345       300.437       392.271    
  69  0.960223     -0.405895E-01  -1.93627       1.93627       272.208       274.144    
  70  0.490262     -0.712815      -34.0040       34.0040       424.873       458.877    
  71  0.565539     -0.569975      -27.1900       27.1900       368.077       395.267    
  72  0.818412     -0.200389      -9.55930       9.55930       401.089       410.649    
  73  0.213411      -1.54453      -73.6801       73.6801       421.746       495.426    
  74  0.907759     -0.967768E-01  -4.61662       4.61662       290.274       294.891    
  75  0.761807E-01  -2.57465      -122.820       122.820       354.393       477.214    
  76  0.435471     -0.831327      -39.6574       39.6574       319.053       358.710    
  77  0.369859     -0.994634      -47.4478       47.4478       283.393       330.841    
  78  0.914887     -0.889552E-01  -4.24350       4.24350       460.614       464.857    
  79  0.751731     -0.285377      -13.6136       13.6136       263.894       277.507    
loop,thermsimp(1:2)       78   2.85620       47.6611    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203        256.08         87.48          1.11         40.09          1.09          0.05        129.82
Just calling func    0   0        129.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204        288.29         87.48          1.11         40.61          0.43          0.05        129.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    256.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       78
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       79
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      203     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -126.259       126.259       255.057       381.316    
   2  0.952063     -0.491245E-01  -2.34342       2.34342       262.089       264.432    
   3  0.207928      -1.57057      -74.9219       74.9219       254.566       329.488    
   4  0.564009     -0.572686      -27.3193       27.3193       272.208       299.527    
   5  0.461636     -0.772979      -36.8740       36.8740       258.372       295.246    
   6  0.683812     -0.380072      -18.1308       18.1308       263.894       282.025    
   7  0.153569      -1.87360      -89.3779       89.3779       270.947       360.325    
   8  0.605650     -0.501453      -23.9212       23.9212       282.708       306.629    
   9  0.257296      -1.35753      -64.7593       64.7593       269.284       334.044    
  10  0.517987     -0.657805      -31.3798       31.3798       258.366       289.746    
  11  0.571129     -0.560140      -26.7208       26.7208       277.887       304.608    
  12  0.735134     -0.307703      -14.6786       14.6786       288.946       303.624    
  13  0.766340E-02  -4.87130      -232.379       232.379       290.274       522.653    
  14  0.435932     -0.830269      -39.6070       39.6070       277.109       316.716    
  15  0.513945     -0.665639      -31.7535       31.7535       269.425       301.179    
  16  0.447046     -0.805095      -38.4061       38.4061       290.928       329.334    
  17  0.244813      -1.40726      -67.1316       67.1316       281.545       348.677    
  18  0.183933      -1.69318      -80.7712       80.7712       282.959       363.730    
  19  0.413164     -0.883910      -42.1659       42.1659       255.802       297.968    
  20  0.869613     -0.139707      -6.66457       6.66457       275.738       282.403    
  21  0.853260     -0.158691      -7.57014       7.57014       276.452       284.022    
  22  0.138067      -1.98001      -94.4541       94.4541       304.193       398.647    
  23  0.940528     -0.613134E-01  -2.92488       2.92488       277.562       280.487    
  24  0.694939     -0.363931      -17.3609       17.3609       256.750       274.111    
  25  0.962776     -0.379346E-01  -1.80962       1.80962       305.147       306.956    
  26  0.378266     -0.972158      -46.3756       46.3756       287.140       333.516    
  27  0.855922     -0.155576      -7.42156       7.42156       314.940       322.362    
  28  0.393452     -0.932797      -44.4979       44.4979       287.540       332.038    
  29  0.253590      -1.37204      -65.4514       65.4514       313.360       378.811    
  30  0.777948     -0.251096      -11.9782       11.9782       311.882       323.860    
  31  0.654890     -0.423288      -20.1925       20.1925       278.834       299.026    
  32  0.690016E-01  -2.67363      -127.542       127.542       294.012       421.554    
  33  0.101034      -2.29229      -109.351       109.351       316.943       426.294    
  34  0.684533     -0.379019      -18.0806       18.0806       283.393       301.474    
  35  0.592603     -0.523230      -24.9601       24.9601       313.807       338.767    
  36  0.904830     -0.100009      -4.77079       4.77079       319.594       324.365    
  37  0.400244     -0.915681      -43.6814       43.6814       316.952       360.633    
  38  0.698191     -0.359263      -17.1382       17.1382       310.973       328.111    
  39  0.551449E-01  -2.89779      -138.236       138.236       332.461       470.697    
  40  0.500493     -0.692161      -33.0187       33.0187       312.134       345.152    
  41  0.289592      -1.23928      -59.1185       59.1185       325.264       384.382    
  42  0.447163     -0.804833      -38.3936       38.3936       278.568       316.961    
  43  0.690940     -0.369702      -17.6362       17.6362       319.172       336.809    
  44  0.631068     -0.460341      -21.9600       21.9600       315.769       337.729    
  45  0.926041     -0.768363E-01  -3.66538       3.66538       270.037       273.702    
  46  0.436187     -0.829684      -39.5791       39.5791       319.305       358.884    
  47  0.314139      -1.15792      -55.2371       55.2371       313.152       368.389    
  48  0.363110      -1.01305      -48.3263       48.3263       319.053       367.379    
  49  0.446982     -0.805238      -38.4129       38.4129       317.931       356.344    
  50  0.541529     -0.613360      -29.2596       29.2596       308.952       338.212    
  51  0.415529     -0.878202      -41.8935       41.8935       333.837       375.731    
  52  0.559792     -0.580190      -27.6773       27.6773       325.716       353.393    
  53  0.931332     -0.711389E-01  -3.39360       3.39360       291.059       294.452    
  54  0.653342     -0.425655      -20.3053       20.3053       322.677       342.982    
  55  0.254324E-01  -3.67173      -175.155       175.155       318.942       494.097    
  56  0.365877      -1.00546      -47.9641       47.9641       315.864       363.828    
  57  0.187661      -1.67312      -79.8140       79.8140       319.358       399.172    
  58  0.592744     -0.522993      -24.9487       24.9487       344.821       369.770    
  59  0.211036      -1.55573      -74.2141       74.2141       317.896       392.110    
  60  0.718956     -0.329955      -15.7401       15.7401       282.662       298.402    
  61  0.170082      -1.77147      -84.5060       84.5060       319.806       404.312    
  62  0.190051      -1.66046      -79.2104       79.2104       318.025       397.236    
  63  0.275889      -1.28776      -61.4308       61.4308       318.025       379.456    
  64  0.670664     -0.399487      -19.0571       19.0571       284.323       303.380    
  65  0.294211      -1.22346      -58.3635       58.3635       297.424       355.787    
  66  0.710312     -0.342050      -16.3171       16.3171       320.091       336.408    
  67  0.432365     -0.838485      -39.9989       39.9989       300.437       340.436    
  68  0.488453     -0.716511      -34.1803       34.1803       368.077       402.257    
  69  0.250523      -1.38421      -66.0318       66.0318       318.008       384.040    
  70  0.842097     -0.171860      -8.19835       8.19835       353.465       361.663    
  71  0.403041     -0.908716      -43.3492       43.3492       401.089       444.439    
  72  0.576391     -0.550969      -26.2833       26.2833       329.961       356.245    
  73  0.577169     -0.549620      -26.2189       26.2189       269.945       296.164    
  74  0.275825      -1.28799      -61.4419       61.4419       424.873       486.315    
  75  0.999213     -0.787341E-03 -0.375591E-01  0.375591E-01   460.614       460.651    
  76  0.665275     -0.407555      -19.4419       19.4419       256.377       275.819    
  77  0.294633      -1.22203      -58.2953       58.2953       354.393       412.689    
  78  0.941019     -0.607924E-01  -2.90003       2.90003       421.746       424.646    
  79  0.868904     -0.140522      -6.70345       6.70345       256.082       262.786    
loop,thermsimp(1:2)       79   126.259       2.34342    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205        268.19         87.48          1.10         40.12          0.83          0.04        129.57
Just calling func    0   0        129.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206        270.27         87.43          1.09         39.98          1.16          0.05        129.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    268.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       79
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       80
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      205     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -19.2166       19.2166       256.082       275.299    
   2  0.238500      -1.43339      -68.3779       68.3779       262.089       330.466    
   3  0.689211     -0.372208      -17.7557       17.7557       270.037       287.793    
   4  0.540774     -0.614753      -29.3260       29.3260       256.750       286.076    
   5  0.178857      -1.72117      -82.1063       82.1063       256.377       338.484    
   6  0.884253     -0.123012      -5.86815       5.86815       277.562       283.430    
   7  0.755546     -0.280314      -13.3721       13.3721       263.894       277.266    
   8  0.654086E-01  -2.72710      -130.093       130.093       275.738       405.831    
   9  0.802958     -0.219452      -10.4687       10.4687       276.452       286.921    
  10  0.840665     -0.173562      -8.27954       8.27954       258.366       266.646    
  11  0.864930     -0.145107      -6.92213       6.92213       291.059       297.981    
  12  0.728243     -0.317120      -15.1278       15.1278       258.372       273.500    
  13  0.453086     -0.791672      -37.7658       37.7658       269.945       307.711    
  14  0.702549E-01  -2.65563      -126.683       126.683       255.802       382.485    
  15  0.610595     -0.493321      -23.5333       23.5333       282.662       306.195    
  16  0.728410E-02  -4.92206      -234.801       234.801       278.834       513.635    
  17  0.913763     -0.901841E-01  -4.30212       4.30212       272.208       276.510    
  18  0.165001      -1.80180      -85.9529       85.9529       269.425       355.378    
  19  0.917747E-01  -2.38842      -113.937       113.937       283.393       397.330    
  20  0.338507      -1.08321      -51.6733       51.6733       284.323       335.997    
  21  0.357666      -1.02815      -49.0469       49.0469       288.946       337.993    
  22  0.389441     -0.943044      -44.9868       44.9868       277.887       322.874    
  23  0.879897     -0.127950      -6.10370       6.10370       282.708       288.811    
  24  0.418897     -0.870129      -41.5084       41.5084       305.147       346.655    
  25  0.838426     -0.176230      -8.40681       8.40681       277.109       285.516    
  26  0.185169      -1.68649      -80.4517       80.4517       278.568       359.019    
  27  0.200952      -1.60469      -76.5496       76.5496       314.940       391.490    
  28  0.877256     -0.130957      -6.24712       6.24712       311.882       318.129    
  29  0.386592     -0.950385      -45.3370       45.3370       319.594       364.931    
  30  0.888706     -0.117988      -5.62849       5.62849       310.973       316.602    
  31  0.105408      -2.24991      -107.329       107.329       290.928       398.257    
  32  0.994268     -0.574873E-02 -0.274236      0.274236       254.566       254.840    
  33  0.764077     -0.269087      -12.8365       12.8365       287.540       300.377    
  34  0.812108     -0.208121      -9.92818       9.92818       287.140       297.068    
  35  0.121669      -2.10645      -100.486       100.486       269.284       369.770    
  36  0.637909     -0.449559      -21.4457       21.4457       320.091       341.537    
  37  0.316007E-02  -5.75716      -274.638       274.638       319.172       593.811    
  38  0.229677      -1.47108      -70.1761       70.1761       315.769       385.945    
  39  0.521374     -0.651288      -31.0689       31.0689       308.952       340.021    
  40  0.391402     -0.938019      -44.7471       44.7471       313.807       358.554    
  41  0.327357      -1.11670      -53.2710       53.2710       300.437       353.708    
  42  0.963139     -0.375576E-01  -1.79164       1.79164       322.677       324.468    
  43  0.174261      -1.74720      -83.3480       83.3480       312.134       395.482    
  44  0.331602      -1.10382      -52.6563       52.6563       281.545       334.201    
  45  0.526338     -0.641812      -30.6169       30.6169       325.716       356.333    
  46  0.413265     -0.883667      -42.1543       42.1543       297.424       339.578    
  47  0.541510E-02  -5.21856      -248.945       248.945       329.961       578.907    
  48  0.781613     -0.246396      -11.7540       11.7540       317.931       329.685    
  49  0.656825     -0.420337      -20.0517       20.0517       319.305       339.357    
  50  0.584791     -0.536501      -25.5931       25.5931       270.947       296.540    
  51  0.811204     -0.209236      -9.98134       9.98134       316.952       326.933    
  52  0.421027     -0.865059      -41.2666       41.2666       353.465       394.732    
  53  0.663739     -0.409866      -19.5522       19.5522       282.959       302.511    
  54  0.164765      -1.80323      -86.0211       86.0211       315.864       401.885    
  55  0.883187E-01  -2.42680      -115.768       115.768       319.053       434.821    
  56  0.825424     -0.191858      -9.15235       9.15235       313.152       322.304    
  57  0.201966E-01  -3.90224      -186.152       186.152       344.821       530.972    
  58  0.174898      -1.74355      -83.1740       83.1740       333.837       417.011    
  59  0.477008     -0.740222      -35.3114       35.3114       313.360       348.671    
  60  0.162167E-01  -4.12171      -196.621       196.621       318.025       514.647    
  61  0.378219     -0.972282      -46.3815       46.3815       255.057       301.439    
  62  0.980713     -0.194752E-01 -0.929042      0.929042       318.008       318.937    
  63  0.232487      -1.45892      -69.5960       69.5960       325.264       394.860    
  64  0.962055     -0.386832E-01  -1.84533       1.84533       317.896       319.741    
  65  0.761875     -0.271973      -12.9741       12.9741       318.025       330.999    
  66  0.673649     -0.395046      -18.8452       18.8452       304.193       323.038    
  67  0.979237     -0.209814E-01  -1.00089       1.00089       319.358       320.359    
  68  0.361942      -1.01627      -48.4800       48.4800       368.077       416.557    
  69  0.191552      -1.65259      -78.8350       78.8350       319.806       398.641    
  70  0.708040     -0.345254      -16.4699       16.4699       354.393       370.863    
  71  0.676759     -0.390440      -18.6255       18.6255       294.012       312.637    
  72  0.647357     -0.434857      -20.7443       20.7443       421.746       442.490    
  73  0.516122     -0.661412      -31.5518       31.5518       316.943       348.495    
  74  0.274129      -1.29416      -61.7362       61.7362       401.089       462.826    
  75  0.213094      -1.54602      -73.7511       73.7511       460.614       534.365    
  76  0.498449     -0.696255      -33.2140       33.2140       332.461       365.675    
  77  0.483583E-01  -3.02912      -144.500       144.500       424.873       569.374    
  78  0.421154     -0.864756      -41.2521       41.2521       318.942       360.194    
  79  0.604971     -0.502574      -23.9747       23.9747       268.193       292.168    
loop,thermsimp(1:2)       80   19.2166       68.3779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207        259.41         87.41          1.10         40.16          0.68          0.05        129.41
Just calling func    0   0        129.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208        268.70         87.52          1.11         40.71          0.22          0.05        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    259.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       80
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       81
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      207     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -62.4561       62.4561       254.566       317.022    
   2  0.879265     -0.128669      -6.13798       6.13798       258.366       264.504    
   3  0.684902     -0.378479      -18.0549       18.0549       258.372       276.427    
   4  0.893896     -0.112166      -5.35072       5.35072       256.082       261.433    
   5  0.476761     -0.740739      -35.3361       35.3361       272.208       307.544    
   6  0.755167     -0.280817      -13.3960       13.3960       263.894       277.290    
   7  0.452407     -0.793173      -37.8373       37.8373       277.562       315.400    
   8  0.723906     -0.323093      -15.4128       15.4128       277.109       292.522    
   9  0.451260     -0.795711      -37.9584       37.9584       256.750       294.709    
  10  0.668265     -0.403071      -19.2280       19.2280       276.452       295.680    
  11  0.777249     -0.251995      -12.0211       12.0211       270.037       282.058    
  12  0.342240      -1.07224      -51.1501       51.1501       282.708       333.858    
  13  0.639156     -0.447606      -21.3525       21.3525       268.193       289.545    
  14  0.166924      -1.79022      -85.4002       85.4002       270.947       356.347    
  15  0.375260     -0.980137      -46.7563       46.7563       287.140       333.896    
  16  0.299730      -1.20487      -57.4770       57.4770       291.059       348.536    
  17  0.407119     -0.898650      -42.8690       42.8690       287.540       330.409    
  18  0.762992E-01  -2.57309      -122.746       122.746       255.057       377.803    
  19  0.281066      -1.26917      -60.5440       60.5440       282.959       343.503    
  20  0.220512      -1.51180      -72.1187       72.1187       282.662       354.780    
  21  0.389846     -0.942004      -44.9372       44.9372       269.945       314.882    
  22  0.660048     -0.415443      -19.8182       19.8182       294.012       313.830    
  23  0.150026      -1.89695      -90.4916       90.4916       310.973       401.465    
  24  0.113767      -2.17360      -103.689       103.689       311.882       415.571    
  25  0.810589     -0.209994      -10.0175       10.0175       318.008       328.026    
  26  0.247911      -1.39468      -66.5317       66.5317       317.896       384.428    
  27  0.408875     -0.894345      -42.6636       42.6636       319.358       362.022    
  28  0.310528      -1.16948      -55.7887       55.7887       313.152       368.941    
  29  0.663027     -0.410939      -19.6034       19.6034       277.887       297.491    
  30  0.798362     -0.225193      -10.7425       10.7425       304.193       314.935    
  31  0.564885     -0.571133      -27.2452       27.2452       322.677       349.922    
  32  0.473510E-02  -5.35275      -255.347       255.347       316.952       572.298    
  33  0.933475E-01  -2.37143      -113.126       113.126       317.931       431.057    
  34  0.931702     -0.707423E-01  -3.37468       3.37468       262.089       265.463    
  35  0.341741      -1.07370      -51.2197       51.2197       318.025       369.245    
  36  0.171330      -1.76417      -84.1573       84.1573       281.545       365.702    
  37  0.355860      -1.03322      -49.2884       49.2884       284.323       333.612    
  38  0.469639     -0.755790      -36.0541       36.0541       288.946       325.000    
  39  0.805376     -0.216446      -10.3253       10.3253       256.377       266.703    
  40  0.651615     -0.428301      -20.4316       20.4316       319.305       339.737    
  41  0.126831      -2.06490      -98.5034       98.5034       297.424       395.927    
  42  0.715737     -0.334442      -15.9542       15.9542       308.952       324.906    
  43  0.444007     -0.811915      -38.7314       38.7314       320.091       358.822    
  44  0.887105     -0.119791      -5.71450       5.71450       305.147       310.861    
  45  0.492139     -0.708993      -33.8216       33.8216       316.943       350.765    
  46  0.590315     -0.527098      -25.1446       25.1446       313.360       338.504    
  47  0.313130      -1.16114      -55.3906       55.3906       300.437       355.827    
  48  0.824070     -0.193500      -9.23068       9.23068       269.425       278.656    
  49  0.785026     -0.242039      -11.5462       11.5462       325.716       337.262    
  50  0.105781      -2.24638      -107.161       107.161       313.807       420.968    
  51  0.644933     -0.438608      -20.9233       20.9233       278.568       299.491    
  52  0.656932     -0.420175      -20.0440       20.0440       318.942       338.986    
  53  0.418239     -0.871703      -41.5835       41.5835       319.594       361.177    
  54  0.191132      -1.65479      -78.9397       78.9397       332.461       411.401    
  55  0.493587     -0.706055      -33.6815       33.6815       269.284       302.966    
  56  0.490289     -0.712761      -34.0014       34.0014       354.393       388.395    
  57  0.703124     -0.352222      -16.8023       16.8023       255.802       272.604    
  58  0.514219E-01  -2.96769      -141.570       141.570       315.769       457.339    
  59  0.967122     -0.334307E-01  -1.59477       1.59477       314.940       316.535    
  60  0.164565      -1.80445      -86.0789       86.0789       353.465       439.544    
  61  0.787129     -0.239363      -11.4185       11.4185       325.264       336.682    
  62  0.877224     -0.130993      -6.24887       6.24887       312.134       318.382    
  63  0.826666     -0.190355      -9.08063       9.08063       283.393       292.474    
  64  0.478850     -0.736368      -35.1275       35.1275       290.928       326.055    
  65  0.850214E-01  -2.46485      -117.583       117.583       319.806       437.389    
  66  0.752587     -0.284239      -13.5593       13.5593       315.864       329.424    
  67  0.286540      -1.24988      -59.6238       59.6238       275.738       335.362    
  68  0.581717     -0.541771      -25.8445       25.8445       368.077       393.922    
  69  0.907599     -0.969526E-01  -4.62501       4.62501       333.837       338.462    
  70  0.159227      -1.83743      -87.6522       87.6522       319.053       406.705    
  71  0.740279     -0.300729      -14.3459       14.3459       421.746       436.092    
  72  0.899153     -0.106302      -5.07099       5.07099       401.089       406.160    
  73  0.456914     -0.783261      -37.3645       37.3645       278.834       316.198    
  74  0.448831     -0.801110      -38.2160       38.2160       318.025       356.241    
  75  0.433021     -0.836969      -39.9266       39.9266       344.821       384.747    
  76  0.236464      -1.44196      -68.7869       68.7869       460.614       529.400    
  77  0.925483     -0.774399E-01  -3.69418       3.69418       424.873       428.568    
  78  0.729158     -0.315864      -15.0679       15.0679       329.961       345.029    
  79  0.917886     -0.856825E-01  -4.08738       4.08738       259.407       263.494    
loop,thermsimp(1:2)       81   62.4561       6.13798    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209        257.34         87.42          1.11         40.09          0.97          0.05        129.64
Just calling func    0   0        129.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210        295.06         87.45          1.12         40.17          0.59          0.05        129.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    257.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       81
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       82
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      209     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -207.163       207.163       256.082       463.245    
   2  0.906957E-01  -2.40025      -114.501       114.501       259.407       373.908    
   3  0.973677     -0.266758E-01  -1.27254       1.27254       258.366       259.639    
   4  0.764409     -0.268653      -12.8157       12.8157       262.089       274.904    
   5  0.647718     -0.434300      -20.7178       20.7178       256.377       277.095    
   6  0.450945     -0.796410      -37.9917       37.9917       255.802       293.793    
   7  0.342138      -1.07254      -51.1642       51.1642       258.372       309.536    
   8  0.491560     -0.710170      -33.8778       33.8778       263.894       297.772    
   9  0.728901     -0.316218      -15.0848       15.0848       269.425       284.510    
  10  0.361124      -1.01853      -48.5879       48.5879       270.037       318.625    
  11  0.187026      -1.67651      -79.9757       79.9757       268.193       348.169    
  12  0.560514     -0.578901      -27.6158       27.6158       283.393       311.009    
  13  0.218776      -1.51971      -72.4957       72.4957       277.109       349.604    
  14  0.109271      -2.21392      -105.612       105.612       256.750       362.362    
  15  0.263420E-01  -3.63659      -173.479       173.479       276.452       449.931    
  16  0.654642     -0.423667      -20.2105       20.2105       277.887       298.098    
  17  0.975959     -0.243343E-01  -1.16084       1.16084       278.568       279.728    
  18  0.107212      -2.23295      -106.520       106.520       269.284       375.804    
  19  0.972340     -0.280494E-01  -1.33806       1.33806       272.208       273.546    
  20  0.259158      -1.35032      -64.4152       64.4152       305.147       369.562    
  21  0.889970     -0.116568      -5.56071       5.56071       294.012       299.573    
  22  0.956672     -0.442943E-01  -2.11300       2.11300       269.945       272.058    
  23  0.299261      -1.20644      -57.5516       57.5516       304.193       361.744    
  24  0.114836      -2.16425      -103.243       103.243       277.562       380.805    
  25  0.728848     -0.316291      -15.0883       15.0883       278.834       293.922    
  26  0.650336     -0.430267      -20.5253       20.5253       314.940       335.465    
  27  0.816983     -0.202137      -9.64271       9.64271       254.566       264.209    
  28  0.507860     -0.677550      -32.3217       32.3217       312.134       344.455    
  29  0.920661     -0.826634E-01  -3.94335       3.94335       308.952       312.895    
  30  0.253772      -1.37132      -65.4172       65.4172       288.946       354.363    
  31  0.667512     -0.404198      -19.2817       19.2817       290.928       310.209    
  32  0.772715     -0.257844      -12.3002       12.3002       318.008       330.309    
  33  0.757620     -0.277573      -13.2413       13.2413       315.864       329.106    
  34  0.776421     -0.253060      -12.0719       12.0719       287.540       299.612    
  35  0.886642     -0.120314      -5.73945       5.73945       284.323       290.063    
  36  0.238693E-01  -3.73516      -178.181       178.181       282.708       460.889    
  37  0.303957      -1.19087      -56.8090       56.8090       287.140       343.949    
  38  0.875267     -0.133226      -6.35539       6.35539       275.738       282.094    
  39  0.144246      -1.93624      -92.3658       92.3658       325.264       417.630    
  40  0.993963     -0.605564E-02 -0.288877      0.288877       325.716       326.005    
  41  0.172168      -1.75928      -83.9244       83.9244       333.837       417.762    
  42  0.979713     -0.204952E-01 -0.977700      0.977700       313.360       314.337    
  43  0.938694     -0.632658E-01  -3.01802       3.01802       318.942       321.960    
  44  0.716061     -0.333990      -15.9326       15.9326       319.305       335.238    
  45  0.764601     -0.268402      -12.8038       12.8038       282.959       295.763    
  46  0.546951     -0.603396      -28.7843       28.7843       329.961       358.746    
  47  0.104442      -2.25912      -107.769       107.769       291.059       398.827    
  48  0.669980     -0.400508      -19.1057       19.1057       322.677       341.782    
  49  0.255048      -1.36630      -65.1778       65.1778       316.943       382.121    
  50  0.761153     -0.272921      -13.0194       13.0194       282.662       295.681    
  51  0.273269      -1.29730      -61.8861       61.8861       300.437       362.323    
  52  0.789047E-01  -2.53951      -121.144       121.144       318.025       439.170    
  53  0.723703     -0.323374      -15.4262       15.4262       270.947       286.373    
  54  0.535422     -0.624699      -29.8005       29.8005       320.091       349.892    
  55  0.394266     -0.930730      -44.3993       44.3993       319.594       363.993    
  56  0.334209      -1.09599      -52.2827       52.2827       319.358       371.641    
  57  0.713084     -0.338156      -16.1313       16.1313       281.545       297.676    
  58  0.335811      -1.09121      -52.0547       52.0547       313.152       365.207    
  59  0.877329     -0.130873      -6.24315       6.24315       318.025       324.268    
  60  0.804760     -0.217212      -10.3618       10.3618       255.057       265.419    
  61  0.676806     -0.390371      -18.6222       18.6222       317.896       336.518    
  62  0.139025      -1.97310      -94.1245       94.1245       344.821       438.945    
  63  0.453238     -0.791339      -37.7498       37.7498       354.393       392.143    
  64  0.174629      -1.74509      -83.2476       83.2476       368.077       451.325    
  65  0.770625     -0.260553      -12.4294       12.4294       297.424       309.853    
  66  0.636484     -0.451797      -21.5524       21.5524       310.973       332.526    
  67  0.336462      -1.08927      -51.9624       51.9624       401.089       453.052    
  68  0.534955     -0.625573      -29.8422       29.8422       319.053       348.895    
  69  0.847446E-01  -2.46811      -117.738       117.738       332.461       450.200    
  70  0.917274     -0.863490E-01  -4.11918       4.11918       311.882       316.001    
  71  0.518675     -0.656478      -31.3165       31.3165       313.807       345.123    
  72  0.975471E-01  -2.32742      -111.027       111.027       424.873       535.900    
  73  0.863693     -0.146538      -6.99044       6.99044       317.931       324.922    
  74  0.475431     -0.743534      -35.4694       35.4694       421.746       457.215    
  75  0.189915      -1.66118      -79.2445       79.2445       319.806       399.051    
  76  0.509952     -0.673438      -32.1256       32.1256       353.465       385.590    
  77  0.637529     -0.450155      -21.4741       21.4741       315.769       337.243    
  78  0.929418     -0.731966E-01  -3.49176       3.49176       460.614       464.105    
  79  0.508859     -0.675584      -32.2279       32.2279       257.345       289.573    
loop,thermsimp(1:2)       82   207.163       114.501    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211        438.78         87.62          1.11         40.48          0.52          0.05        129.80
Just calling func    0   0        129.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    438.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       82
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       83
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      210     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -23.6475       23.6475       258.366       282.014    
   2  0.266275      -1.32323      -63.1229       63.1229       254.566       317.689    
   3  0.545538     -0.605984      -28.9077       28.9077       255.057       283.965    
   4  0.196234      -1.62845      -77.6830       77.6830       269.945       347.628    
   5  0.786411     -0.240275      -11.4620       11.4620       272.208       283.670    
   6  0.453912     -0.789853      -37.6789       37.6789       262.089       299.767    
   7  0.900549     -0.104751      -4.99701       4.99701       256.377       261.374    
   8  0.339919      -1.07905      -51.4746       51.4746       278.568       330.042    
   9  0.511643     -0.670128      -31.9676       31.9676       275.738       307.706    
  10  0.628202     -0.464894      -22.1772       22.1772       269.425       291.603    
  11  0.672886E-01  -2.69876      -128.741       128.741       270.947       399.688    
  12  0.518493     -0.656829      -31.3332       31.3332       257.345       288.678    
  13  0.994926     -0.508642E-02 -0.242641      0.242641       284.323       284.566    
  14  0.733191     -0.310349      -14.8048       14.8048       255.802       270.607    
  15  0.952818     -0.483318E-01  -2.30561       2.30561       278.834       281.139    
  16  0.735955     -0.306586      -14.6253       14.6253       282.662       297.287    
  17  0.743149     -0.296859      -14.1613       14.1613       282.959       297.120    
  18  0.549375     -0.598975      -28.5734       28.5734       281.545       310.118    
  19  0.355140      -1.03524      -49.3850       49.3850       263.894       313.279    
  20  0.482165     -0.729469      -34.7984       34.7984       277.887       312.686    
  21  0.577197     -0.549571      -26.2166       26.2166       294.012       320.229    
  22  0.107316E-01  -4.53456      -216.316       216.316       287.540       503.856    
  23  0.923969     -0.790764E-01  -3.77224       3.77224       258.372       262.144    
  24  0.810451     -0.210164      -10.0256       10.0256       297.424       307.449    
  25  0.143346      -1.94249      -92.6642       92.6642       290.928       383.592    
  26  0.994184     -0.583318E-02 -0.278265      0.278265       283.393       283.671    
  27  0.870737     -0.138415      -6.60292       6.60292       308.952       315.555    
  28  0.970691     -0.297469E-01  -1.41904       1.41904       313.360       314.779    
  29  0.351269      -1.04620      -49.9079       49.9079       311.882       361.790    
  30  0.464982     -0.765756      -36.5294       36.5294       270.037       306.566    
  31  0.921785     -0.814432E-01  -3.88515       3.88515       318.942       322.827    
  32  0.110512      -2.20263      -105.074       105.074       318.025       423.099    
  33  0.261408      -1.34167      -64.0028       64.0028       317.931       381.934    
  34  0.908908     -0.955118E-01  -4.55628       4.55628       325.716       330.272    
  35  0.819412     -0.199168      -9.50106       9.50106       315.864       325.365    
  36  0.466482     -0.762536      -36.3758       36.3758       318.008       354.384    
  37  0.717237     -0.332349      -15.8543       15.8543       310.973       326.827    
  38  0.802331     -0.220234      -10.5060       10.5060       319.305       329.811    
  39  0.949390     -0.519355E-01  -2.47752       2.47752       314.940       317.418    
  40  0.258511      -1.35282      -64.5345       64.5345       317.896       382.430    
  41  0.270423      -1.30777      -62.3855       62.3855       315.769       378.155    
  42  0.366439      -1.00392      -47.8910       47.8910       322.677       370.567    
  43  0.934403     -0.678476E-01  -3.23659       3.23659       287.140       290.377    
  44  0.956654     -0.443133E-01  -2.11391       2.11391       312.134       314.247    
  45  0.377790     -0.973417      -46.4357       46.4357       313.807       360.243    
  46  0.203667      -1.59127      -75.9096       75.9096       268.193       344.103    
  47  0.673892     -0.394685      -18.8280       18.8280       319.053       337.881    
  48  0.347380      -1.05734      -50.4389       50.4389       277.109       327.548    
  49  0.144339      -1.93559      -92.3350       92.3350       320.091       412.426    
  50  0.728571     -0.316670      -15.1063       15.1063       288.946       304.052    
  51  0.243065      -1.41443      -67.4734       67.4734       329.961       397.435    
  52  0.686711     -0.375841      -17.9290       17.9290       304.193       322.122    
  53  0.159440      -1.83609      -87.5884       87.5884       300.437       388.025    
  54  0.426258     -0.852711      -40.6775       40.6775       256.750       297.428    
  55  0.929286     -0.733386E-01  -3.49853       3.49853       319.594       323.092    
  56  0.335987E-01  -3.39327      -161.872       161.872       313.152       475.024    
  57  0.539383     -0.617330      -29.4490       29.4490       305.147       334.596    
  58  0.384768     -0.955116      -45.5626       45.5626       319.358       364.921    
  59  0.267956      -1.31693      -62.8226       62.8226       259.407       322.229    
  60  0.116616      -2.14887      -102.509       102.509       269.284       371.794    
  61  0.852032     -0.160131      -7.63886       7.63886       277.562       285.201    
  62  0.456598     -0.783952      -37.3975       37.3975       316.943       354.341    
  63  0.157616      -1.84759      -88.1371       88.1371       353.465       441.602    
  64  0.928361     -0.743348E-01  -3.54605       3.54605       354.393       357.939    
  65  0.200440      -1.60724      -76.6714       76.6714       291.059       367.730    
  66  0.106743      -2.23733      -106.729       106.729       319.806       426.535    
  67  0.786346     -0.240359      -11.4660       11.4660       325.264       336.730    
  68  0.481815     -0.730195      -34.8330       34.8330       333.837       368.670    
  69  0.410111     -0.891327      -42.5197       42.5197       344.821       387.340    
  70  0.768538     -0.263265      -12.5587       12.5587       318.025       330.584    
  71  0.693325     -0.366257      -17.4718       17.4718       276.452       293.924    
  72  0.462914     -0.770214      -36.7421       36.7421       332.461       369.203    
  73  0.923938     -0.791099E-01  -3.77384       3.77384       368.077       371.851    
  74  0.548506     -0.600557      -28.6489       28.6489       401.089       429.738    
  75  0.146029      -1.92395      -91.7798       91.7798       421.746       513.526    
  76  0.817903     -0.201012      -9.58903       9.58903       282.708       292.297    
  77  0.939924     -0.619566E-01  -2.95556       2.95556       256.082       259.038    
  78  0.462498E-01  -3.07370      -146.627       146.627       460.614       607.241    
  79  0.424534     -0.856763      -40.8708       40.8708       438.779       479.649    
loop,thermsimp(1:2)       83   23.6475       63.1229    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212        467.67         87.46          1.11         40.18          0.88          0.05        129.69
Just calling func    0   0        129.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    467.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       83
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       84
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      211     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -26.5958       26.5958       256.082       282.678    
   2  0.468879     -0.757411      -36.1314       36.1314       256.377       292.509    
   3  0.886741E-01  -2.42279      -115.576       115.576       258.372       373.948    
   4  0.211783      -1.55219      -74.0454       74.0454       255.802       329.847    
   5  0.573306     -0.556336      -26.5393       26.5393       278.834       305.373    
   6  0.401711     -0.912021      -43.5069       43.5069       258.366       301.873    
   7  0.505706     -0.681800      -32.5244       32.5244       272.208       304.732    
   8  0.603045     -0.505763      -24.1268       24.1268       283.393       307.520    
   9  0.696575     -0.361580      -17.2487       17.2487       255.057       272.306    
  10  0.294614      -1.22209      -58.2983       58.2983       284.323       342.622    
  11  0.527550     -0.639511      -30.5071       30.5071       277.562       308.069    
  12  0.657157     -0.419832      -20.0276       20.0276       257.345       277.372    
  13  0.627866     -0.465428      -22.2027       22.2027       287.140       309.343    
  14  0.993353E-02  -4.61184      -220.002       220.002       269.425       489.428    
  15  0.885166E-01  -2.42456      -115.661       115.661       282.708       398.369    
  16  0.265764      -1.32515      -63.2146       63.2146       276.452       339.667    
  17  0.446403     -0.806534      -38.4747       38.4747       282.959       321.434    
  18  0.287864      -1.24527      -59.4040       59.4040       282.662       342.066    
  19  0.926928E-01  -2.37846      -113.462       113.462       256.750       370.212    
  20  0.394849     -0.929252      -44.3288       44.3288       262.089       306.417    
  21  0.540746     -0.614805      -29.3285       29.3285       288.946       318.274    
  22  0.846435     -0.166721      -7.95324       7.95324       270.037       277.990    
  23  0.417037     -0.874580      -41.7208       41.7208       297.424       339.144    
  24  0.210713      -1.55726      -74.2871       74.2871       275.738       350.025    
  25  0.764669     -0.268312      -12.7995       12.7995       281.545       294.344    
  26  0.219471E-01  -3.81912      -182.187       182.187       277.887       460.074    
  27  0.200728      -1.60581      -76.6030       76.6030       263.894       340.497    
  28  0.572660     -0.557463      -26.5931       26.5931       312.134       338.727    
  29  0.599083E-01  -2.81494      -134.283       134.283       313.360       447.643    
  30  0.214614      -1.53891      -73.4119       73.4119       308.952       382.364    
  31  0.489389     -0.714598      -34.0890       34.0890       314.940       349.029    
  32  0.162616      -1.81636      -86.6475       86.6475       254.566       341.213    
  33  0.710022     -0.342459      -16.3366       16.3366       294.012       310.349    
  34  0.753583     -0.282916      -13.4962       13.4962       304.193       317.689    
  35  0.743317     -0.296633      -14.1505       14.1505       259.407       273.557    
  36  0.155416      -1.86165      -88.8077       88.8077       318.942       407.750    
  37  0.643355     -0.441059      -21.0402       21.0402       319.594       340.634    
  38  0.656098     -0.421444      -20.1045       20.1045       315.864       335.969    
  39  0.327550      -1.11611      -53.2428       53.2428       310.973       364.216    
  40  0.192244      -1.64899      -78.6631       78.6631       277.109       355.772    
  41  0.433590     -0.835657      -39.8640       39.8640       319.305       359.169    
  42  0.788561     -0.237545      -11.3318       11.3318       278.568       289.899    
  43  0.978028     -0.222173E-01  -1.05985       1.05985       325.716       326.776    
  44  0.110322      -2.20435      -105.156       105.156       318.025       423.181    
  45  0.795332     -0.228995      -10.9239       10.9239       305.147       316.071    
  46  0.497518E-01  -3.00071      -143.145       143.145       325.264       468.409    
  47  0.852459     -0.159631      -7.61498       7.61498       319.053       326.668    
  48  0.133240      -2.01560      -96.1518       96.1518       268.193       364.345    
  49  0.671163     -0.398743      -19.0216       19.0216       269.945       288.967    
  50  0.245122      -1.40600      -67.0714       67.0714       316.943       384.015    
  51  0.820498     -0.197843      -9.43787       9.43787       318.008       327.446    
  52  0.422422     -0.861751      -41.1088       41.1088       354.393       395.502    
  53  0.946612E-01  -2.35745      -112.459       112.459       313.807       426.266    
  54  0.902486     -0.102603      -4.89453       4.89453       311.882       316.776    
  55  0.858585     -0.152469      -7.27335       7.27335       319.358       326.631    
  56  0.713346     -0.337789      -16.1138       16.1138       291.059       307.172    
  57  0.497785     -0.697587      -33.2776       33.2776       333.837       367.115    
  58  0.971461     -0.289536E-01  -1.38120       1.38120       332.461       333.842    
  59  0.714587     -0.336051      -16.0309       16.0309       322.677       338.707    
  60  0.194565E-01  -3.93958      -187.933       187.933       269.284       457.217    
  61  0.675786E-01  -2.69446      -128.536       128.536       368.077       496.613    
  62  0.924162     -0.788681E-01  -3.76230       3.76230       315.769       319.532    
  63  0.988536     -0.115299E-01 -0.550018      0.550018       317.931       318.481    
  64  0.136917      -1.98838      -94.8532       94.8532       317.896       412.749    
  65  0.529964     -0.634945      -30.2893       30.2893       290.928       321.217    
  66  0.369278     -0.996204      -47.5227       47.5227       344.821       392.344    
  67  0.186364      -1.68006      -80.1450       80.1450       300.437       380.582    
  68  0.314345      -1.15726      -55.2059       55.2059       329.961       385.167    
  69  0.451257     -0.795718      -37.9588       37.9588       270.947       308.906    
  70  0.194510      -1.63727      -78.1041       78.1041       320.091       398.195    
  71  0.690618     -0.370168      -17.6584       17.6584       318.025       335.684    
  72  0.828229     -0.188466      -8.99053       8.99053       319.806       328.797    
  73  0.161272      -1.82466      -87.0432       87.0432       401.089       488.133    
  74  0.425677E-01  -3.15666      -150.585       150.585       353.465       504.050    
  75  0.660692     -0.414467      -19.7717       19.7717       313.152       332.924    
  76  0.752317     -0.284597      -13.5764       13.5764       438.779       452.355    
  77  0.206149      -1.57916      -75.3318       75.3318       287.540       362.872    
  78  0.440110     -0.820731      -39.1519       39.1519       421.746       460.898    
  79  0.408209     -0.895975      -42.7414       42.7414       467.666       510.408    
loop,thermsimp(1:2)       84   26.5958       36.1314    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213        460.61         87.38          1.11         40.24          0.68          0.05        129.46
Just calling func    0   0        129.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    460.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       84
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       85
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      212     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -77.3766       77.3766       255.057       332.434    
   2  0.793097     -0.231809      -11.0582       11.0582       259.407       270.465    
   3  0.261081      -1.34293      -64.0626       64.0626       257.345       321.407    
   4  0.912198     -0.918984E-01  -4.38390       4.38390       270.037       274.421    
   5  0.493539     -0.706153      -33.6862       33.6862       256.082       289.768    
   6  0.721001     -0.327115      -15.6046       15.6046       269.945       285.550    
   7  0.578790     -0.546816      -26.0852       26.0852       278.568       304.653    
   8  0.684127     -0.379612      -18.1089       18.1089       256.377       274.486    
   9  0.627712     -0.465674      -22.2144       22.2144       281.545       303.759    
  10  0.858540     -0.152522      -7.27588       7.27588       258.366       265.642    
  11  0.712254E-01  -2.64191      -126.029       126.029       272.208       398.237    
  12  0.927250     -0.755316E-01  -3.60314       3.60314       278.834       282.437    
  13  0.458073     -0.780727      -37.2436       37.2436       262.089       299.332    
  14  0.940004     -0.618714E-01  -2.95150       2.95150       291.059       294.010    
  15  0.322549      -1.13150      -53.9769       53.9769       283.393       337.370    
  16  0.939473     -0.624358E-01  -2.97842       2.97842       277.562       280.541    
  17  0.726080     -0.320095      -15.2697       15.2697       270.947       286.217    
  18  0.602088E-02  -5.11252      -243.887       243.887       287.140       531.027    
  19  0.735289     -0.307492      -14.6685       14.6685       294.012       308.681    
  20  0.847617     -0.165326      -7.88670       7.88670       305.147       313.034    
  21  0.747190E-01  -2.59402      -123.745       123.745       311.882       435.626    
  22  0.248374      -1.39282      -66.4427       66.4427       304.193       370.635    
  23  0.350184      -1.04930      -50.0554       50.0554       288.946       339.001    
  24  0.327739E-03  -8.02329      -382.741       382.741       317.931       700.673    
  25  0.130012      -2.04013      -97.3218       97.3218       315.769       413.091    
  26  0.609791     -0.494639      -23.5962       23.5962       290.928       314.524    
  27  0.793414     -0.231410      -11.0391       11.0391       282.959       293.998    
  28  0.962567     -0.381519E-01  -1.81999       1.81999       319.358       321.178    
  29  0.499469     -0.694211      -33.1165       33.1165       319.053       352.169    
  30  0.887491     -0.119357      -5.69379       5.69379       325.716       331.410    
  31  0.136374      -1.99236      -95.0429       95.0429       318.008       413.051    
  32  0.292356      -1.22978      -58.6653       58.6653       319.806       378.472    
  33  0.301564      -1.19877      -57.1861       57.1861       255.802       312.988    
  34  0.352543      -1.04258      -49.7351       49.7351       313.152       362.887    
  35  0.483726     -0.726236      -34.6442       34.6442       332.461       367.105    
  36  0.410499     -0.890381      -42.4745       42.4745       318.025       360.500    
  37  0.458111     -0.780644      -37.2397       37.2397       315.864       353.104    
  38  0.670071     -0.400372      -19.0993       19.0993       322.677       341.776    
  39  0.175486      -1.74020      -83.0139       83.0139       312.134       395.147    
  40  0.798907     -0.224511      -10.7100       10.7100       297.424       308.134    
  41  0.270487      -1.30753      -62.3743       62.3743       276.452       338.827    
  42  0.480368     -0.733202      -34.9765       34.9765       263.894       298.870    
  43  0.658406     -0.417933      -19.9370       19.9370       319.594       339.531    
  44  0.937976     -0.640304E-01  -3.05449       3.05449       254.566       257.620    
  45  0.710083     -0.342373      -16.3325       16.3325       282.662       298.994    
  46  0.567340     -0.566797      -27.0384       27.0384       284.323       311.362    
  47  0.201426      -1.60233      -76.4374       76.4374       314.940       391.377    
  48  0.660313     -0.415042      -19.7991       19.7991       275.738       295.537    
  49  0.524008     -0.646249      -30.8285       30.8285       277.109       307.937    
  50  0.513616     -0.666280      -31.7841       31.7841       319.305       351.089    
  51  0.951218     -0.500122E-01  -2.38577       2.38577       287.540       289.926    
  52  0.703465     -0.351737      -16.7792       16.7792       310.973       327.752    
  53  0.702859     -0.352600      -16.8203       16.8203       268.193       285.013    
  54  0.453067     -0.791715      -37.7678       37.7678       333.837       371.605    
  55  0.202116      -1.59891      -76.2742       76.2742       256.750       333.024    
  56  0.491988     -0.709301      -33.8363       33.8363       258.372       292.208    
  57  0.632131     -0.458659      -21.8797       21.8797       300.437       322.317    
  58  0.911086     -0.931178E-01  -4.44207       4.44207       308.952       313.394    
  59  0.888750     -0.117939      -5.62615       5.62615       316.943       322.569    
  60  0.468235     -0.758785      -36.1969       36.1969       329.961       366.158    
  61  0.971366     -0.290520E-01  -1.38589       1.38589       344.821       346.207    
  62  0.622947     -0.473294      -22.5779       22.5779       354.393       376.971    
  63  0.837000     -0.177932      -8.48801       8.48801       320.091       328.579    
  64  0.495636     -0.701913      -33.4839       33.4839       282.708       316.192    
  65  0.251386      -1.38077      -65.8678       65.8678       318.942       384.810    
  66  0.580065E-01  -2.84720      -135.822       135.822       317.896       453.718    
  67  0.601569     -0.508214      -24.2437       24.2437       318.025       342.269    
  68  0.249260      -1.38926      -66.2729       66.2729       313.807       380.080    
  69  0.309647E-01  -3.47491      -165.766       165.766       313.360       479.126    
  70  0.653539     -0.425353      -20.2909       20.2909       438.779       459.069    
  71  0.987034     -0.130508E-01 -0.622572      0.622572       269.284       269.907    
  72  0.712168     -0.339441      -16.1926       16.1926       277.887       294.080    
  73  0.935651     -0.665123E-01  -3.17289       3.17289       421.746       424.919    
  74  0.269485      -1.31124      -62.5513       62.5513       325.264       387.815    
  75  0.296778      -1.21477      -57.9491       57.9491       401.089       459.039    
  76  0.974126     -0.262148E-01  -1.25055       1.25055       269.425       270.676    
  77  0.551468     -0.595171      -28.3919       28.3919       368.077       396.469    
  78  0.116554E-01  -4.45199      -212.377       212.377       353.465       565.842    
  79  0.439780     -0.821481      -39.1878       39.1878       460.614       499.801    
loop,thermsimp(1:2)       85   77.3766       11.0582    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214        258.88         87.39          1.09         40.03          1.19          0.05        129.75
Just calling func    0   0        129.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    215        258.33         87.52          1.10         40.08          0.92          0.05        129.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    258.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       85
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       86
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      214     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -36.5398       36.5398       254.566       291.106    
   2  0.948887     -0.524654E-01  -2.50280       2.50280       258.366       260.869    
   3  0.532332     -0.630488      -30.0767       30.0767       269.284       299.361    
   4  0.374267     -0.982785      -46.8826       46.8826       259.407       306.289    
   5  0.694531     -0.364519      -17.3889       17.3889       269.425       286.814    
   6  0.414371     -0.880994      -42.0267       42.0267       270.037       312.064    
   7  0.208827E-01  -3.86883      -184.558       184.558       256.377       440.935    
   8  0.627187     -0.466511      -22.2543       22.2543       277.562       299.817    
   9  0.148799E-01  -4.20774      -200.725       200.725       278.834       479.559    
  10  0.809008     -0.211946      -10.1106       10.1106       268.193       278.304    
  11  0.647680     -0.434359      -20.7206       20.7206       269.945       290.666    
  12  0.289351      -1.24012      -59.1582       59.1582       270.947       330.105    
  13  0.222457      -1.50302      -71.6998       71.6998       256.082       327.782    
  14  0.374268     -0.982782      -46.8824       46.8824       287.540       334.423    
  15  0.785765     -0.241097      -11.5012       11.5012       258.372       269.873    
  16  0.298051      -1.21049      -57.7451       57.7451       282.959       340.704    
  17  0.725075     -0.321480      -15.3358       15.3358       291.059       306.394    
  18  0.386364     -0.950976      -45.3651       45.3651       277.887       323.253    
  19  0.631686     -0.459363      -21.9133       21.9133       275.738       297.652    
  20  0.688282     -0.373557      -17.8201       17.8201       263.894       281.714    
  21  0.373817     -0.983990      -46.9400       46.9400       282.662       329.602    
  22  0.219845      -1.51483      -72.2633       72.2633       262.089       334.352    
  23  0.926271     -0.765889E-01  -3.65358       3.65358       281.545       285.199    
  24  0.618127     -0.481061      -22.9484       22.9484       278.568       301.516    
  25  0.176216      -1.73604      -82.8158       82.8158       277.109       359.925    
  26  0.742943     -0.297136      -14.1745       14.1745       297.424       311.598    
  27  0.357690      -1.02809      -49.0437       49.0437       294.012       343.056    
  28  0.478359     -0.737394      -35.1765       35.1765       284.323       319.500    
  29  0.395976     -0.926401      -44.1928       44.1928       255.802       299.995    
  30  0.803186     -0.219169      -10.4552       10.4552       305.147       315.602    
  31  0.231845      -1.46168      -69.7279       69.7279       308.952       378.680    
  32  0.808968     -0.211996      -10.1130       10.1130       290.928       301.041    
  33  0.579217     -0.546078      -26.0500       26.0500       282.708       308.758    
  34  0.384357     -0.956183      -45.6136       45.6136       319.358       364.972    
  35  0.856367     -0.155057      -7.39679       7.39679       257.345       264.742    
  36  0.265661      -1.32553      -63.2329       63.2329       300.437       363.670    
  37  0.288915      -1.24162      -59.2302       59.2302       316.943       376.173    
  38  0.224915      -1.49203      -71.1756       71.1756       310.973       382.149    
  39  0.685944     -0.376959      -17.9824       17.9824       320.091       338.073    
  40  0.265936      -1.32450      -63.1835       63.1835       325.716       388.899    
  41  0.412966     -0.884389      -42.1887       42.1887       255.057       297.246    
  42  0.440796     -0.819173      -39.0776       39.0776       256.750       295.828    
  43  0.572522     -0.557705      -26.6046       26.6046       283.393       309.998    
  44  0.798412     -0.225131      -10.7396       10.7396       276.452       287.192    
  45  0.127097      -2.06281      -98.4036       98.4036       288.946       387.349    
  46  0.243397      -1.41306      -67.4084       67.4084       319.594       387.002    
  47  0.322195      -1.13260      -54.0292       54.0292       322.677       376.706    
  48  0.512728     -0.668011      -31.8666       31.8666       318.025       349.892    
  49  0.786191     -0.240556      -11.4754       11.4754       344.821       356.296    
  50  0.733079     -0.310501      -14.8121       14.8121       319.305       334.117    
  51  0.601364     -0.508554      -24.2600       24.2600       319.053       343.313    
  52  0.348529      -1.05403      -50.2814       50.2814       315.864       366.146    
  53  0.923986     -0.790584E-01  -3.77139       3.77139       318.025       321.797    
  54  0.843742     -0.169908      -8.10526       8.10526       313.152       321.257    
  55  0.723581     -0.323543      -15.4342       15.4342       329.961       345.396    
  56  0.378158     -0.972444      -46.3892       46.3892       332.461       378.851    
  57  0.463644     -0.768638      -36.6670       36.6670       304.193       340.860    
  58  0.427569     -0.849641      -40.5311       40.5311       333.837       374.368    
  59  0.235852      -1.44455      -68.9104       68.9104       354.393       423.304    
  60  0.203797      -1.59063      -75.8790       75.8790       319.806       395.685    
  61  0.146982E-02  -6.52261      -311.153       311.153       313.807       624.960    
  62  0.681525     -0.383422      -18.2907       18.2907       318.942       337.233    
  63  0.931276     -0.711992E-01  -3.39647       3.39647       325.264       328.660    
  64  0.581849     -0.541545      -25.8337       25.8337       314.940       340.774    
  65  0.652684     -0.426663      -20.3534       20.3534       312.134       332.487    
  66  0.388365     -0.945809      -45.1187       45.1187       368.077       413.196    
  67  0.216086      -1.53208      -73.0858       73.0858       272.208       345.294    
  68  0.409967     -0.891679      -42.5365       42.5365       318.008       360.545    
  69  0.440345     -0.820196      -39.1265       39.1265       315.769       354.896    
  70  0.507524E-01  -2.98080      -142.195       142.195       421.746       563.941    
  71  0.734141     -0.309054      -14.7430       14.7430       311.882       326.625    
  72  0.701795     -0.354114      -16.8926       16.8926       317.896       334.788    
  73  0.741735     -0.298763      -14.2521       14.2521       401.089       415.342    
  74  0.619311     -0.479148      -22.8572       22.8572       438.779       461.636    
  75  0.616117     -0.484318      -23.1038       23.1038       313.360       336.464    
  76  0.220403      -1.51230      -72.1423       72.1423       460.614       532.756    
  77  0.768636E-01  -2.56572      -122.395       122.395       287.140       409.535    
  78  0.953042     -0.480964E-01  -2.29438       2.29438       353.465       355.759    
  79  0.736539     -0.305793      -14.5875       14.5875       258.332       272.920    
loop,thermsimp(1:2)       86   36.5398       2.50280    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216        254.62         87.44          1.10         40.10          0.98          0.05        129.67
Just calling func    0   0        129.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    217        289.57         87.48          1.10         40.10          0.73          0.05        129.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    254.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       86
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       87
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      216     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -81.0216       81.0216       258.366       339.388    
   2  0.721345     -0.326637      -15.5818       15.5818       257.345       272.927    
   3  0.842493     -0.171390      -8.17593       8.17593       258.372       266.548    
   4  0.260540      -1.34500      -64.1614       64.1614       258.332       322.494    
   5  0.782605     -0.245127      -11.6935       11.6935       268.193       279.886    
   6  0.208492      -1.56785      -74.7925       74.7925       263.894       338.686    
   7  0.290568E-01  -3.53850      -168.800       168.800       281.545       450.345    
   8  0.673682     -0.394997      -18.8428       18.8428       269.425       288.268    
   9  0.399393     -0.917808      -43.7829       43.7829       276.452       320.235    
  10  0.966971     -0.335863E-01  -1.60219       1.60219       269.945       271.547    
  11  0.390645     -0.939956      -44.8395       44.8395       254.566       299.405    
  12  0.259548      -1.34881      -64.3435       64.3435       256.750       321.094    
  13  0.260765      -1.34413      -64.1203       64.1203       255.057       319.177    
  14  0.110601E-01  -4.50441      -214.878       214.878       275.738       490.616    
  15  0.727710     -0.317852      -15.1627       15.1627       269.284       284.447    
  16  0.717076     -0.332574      -15.8650       15.8650       277.562       293.427    
  17  0.612129     -0.490811      -23.4136       23.4136       255.802       279.215    
  18  0.589376     -0.528691      -25.2206       25.2206       290.928       316.148    
  19  0.541615     -0.613199      -29.2519       29.2519       278.568       307.820    
  20  0.330403      -1.10744      -52.8291       52.8291       259.407       312.236    
  21  0.229530      -1.47172      -70.2066       70.2066       291.059       361.265    
  22  0.564010     -0.572684      -27.3192       27.3192       282.708       310.027    
  23  0.454226     -0.789161      -37.6459       37.6459       283.393       321.039    
  24  0.579528     -0.545541      -26.0244       26.0244       297.424       323.448    
  25  0.245500      -1.40446      -66.9980       66.9980       270.037       337.035    
  26  0.708019     -0.345284      -16.4713       16.4713       305.147       321.618    
  27  0.300215      -1.20326      -57.3999       57.3999       284.323       341.723    
  28  0.721461     -0.326478      -15.5742       15.5742       313.152       328.726    
  29  0.326772      -1.11849      -53.3564       53.3564       318.025       371.382    
  30  0.580879     -0.543212      -25.9133       25.9133       277.887       303.801    
  31  0.963075     -0.376241E-01  -1.79481       1.79481       311.882       313.677    
  32  0.656935     -0.420170      -20.0437       20.0437       256.082       276.126    
  33  0.908335     -0.961416E-01  -4.58632       4.58632       325.264       329.850    
  34  0.765938     -0.266654      -12.7204       12.7204       282.662       295.382    
  35  0.497301     -0.698561      -33.3240       33.3240       270.947       304.271    
  36  0.833603     -0.181997      -8.68196       8.68196       312.134       320.815    
  37  0.433057     -0.836886      -39.9226       39.9226       319.305       359.228    
  38  0.349547      -1.05112      -50.1422       50.1422       262.089       312.231    
  39  0.142838      -1.94604      -92.8337       92.8337       287.540       380.374    
  40  0.326780      -1.11847      -53.3552       53.3552       317.896       371.251    
  41  0.707709     -0.345723      -16.4923       16.4923       313.360       329.852    
  42  0.914339     -0.895538E-01  -4.27205       4.27205       318.942       323.214    
  43  0.392800     -0.934454      -44.5770       44.5770       320.091       364.668    
  44  0.434772     -0.832933      -39.7341       39.7341       282.959       322.693    
  45  0.229545      -1.47165      -70.2035       70.2035       314.940       385.144    
  46  0.661281     -0.413577      -19.7292       19.7292       304.193       323.922    
  47  0.459966     -0.776602      -37.0469       37.0469       294.012       331.059    
  48  0.352439      -1.04288      -49.7491       49.7491       319.053       368.802    
  49  0.490345     -0.712647      -33.9959       33.9959       272.208       306.204    
  50  0.837788     -0.176990      -8.44309       8.44309       329.961       338.405    
  51  0.247493      -1.39637      -66.6123       66.6123       318.025       384.637    
  52  0.221382      -1.50787      -71.9310       71.9310       315.769       387.700    
  53  0.374412     -0.982399      -46.8641       46.8641       353.465       400.329    
  54  0.170580      -1.76855      -84.3665       84.3665       344.821       429.187    
  55  0.464054     -0.767755      -36.6248       36.6248       277.109       313.734    
  56  0.936961     -0.651140E-01  -3.10618       3.10618       318.008       321.115    
  57  0.302357      -1.19615      -57.0607       57.0607       300.437       357.497    
  58  0.572748E-01  -2.85990      -136.428       136.428       319.358       455.786    
  59  0.495156     -0.702883      -33.5302       33.5302       315.864       349.395    
  60  0.101162      -2.29104      -109.291       109.291       333.837       443.128    
  61  0.786435E-02  -4.84542      -231.145       231.145       316.943       548.088    
  62  0.960492     -0.403100E-01  -1.92294       1.92294       322.677       324.599    
  63  0.902616     -0.102458      -4.88765       4.88765       308.952       313.840    
  64  0.646986     -0.435430      -20.7717       20.7717       332.461       353.233    
  65  0.218936      -1.51897      -72.4608       72.4608       310.973       383.434    
  66  0.491829     -0.709625      -33.8518       33.8518       319.594       353.446    
  67  0.873324     -0.135448      -6.46140       6.46140       288.946       295.407    
  68  0.419066     -0.869727      -41.4892       41.4892       325.716       367.205    
  69  0.390022     -0.941553      -44.9156       44.9156       319.806       364.722    
  70  0.843189     -0.170564      -8.13653       8.13653       287.140       295.277    
  71  0.992789     -0.723678E-02 -0.345222      0.345222       368.077       368.422    
  72  0.694490     -0.364577      -17.3917       17.3917       401.089       418.481    
  73  0.329411      -1.11045      -52.9726       52.9726       354.393       407.366    
  74  0.445795     -0.807896      -38.5397       38.5397       256.377       294.917    
  75  0.668924     -0.402084      -19.1809       19.1809       438.779       457.960    
  76  0.544713     -0.607497      -28.9799       28.9799       278.834       307.814    
  77  0.477920     -0.738313      -35.2203       35.2203       460.614       495.834    
  78  0.923173     -0.799388E-01  -3.81338       3.81338       421.746       425.559    
  79  0.496302     -0.700571      -33.4199       33.4199       254.623       288.043    
loop,thermsimp(1:2)       87   81.0216       15.5818    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218        256.86         87.45          1.10         40.15          0.80          0.05        129.55
Just calling func    0   0        129.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219        267.64         87.38          1.09         39.75          1.53          0.05        129.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    256.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       87
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       88
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      218     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -72.1906       72.1906       258.372       330.563    
   2  0.246752E-01  -3.70196      -176.597       176.597       269.945       446.542    
   3  0.679039     -0.387076      -18.4650       18.4650       257.345       275.810    
   4  0.709027     -0.343862      -16.4035       16.4035       256.082       272.486    
   5  0.577754     -0.548608      -26.1707       26.1707       255.802       281.972    
   6  0.738694     -0.302871      -14.4481       14.4481       268.193       282.641    
   7  0.181723      -1.70527      -81.3479       81.3479       269.284       350.632    
   8  0.103748      -2.26579      -108.087       108.087       254.623       362.709    
   9  0.456811E-02  -5.38866      -257.059       257.059       269.425       526.485    
  10  0.303247      -1.19321      -56.9205       56.9205       277.562       334.483    
  11  0.284736      -1.25619      -59.9252       59.9252       256.377       316.303    
  12  0.900494     -0.104812      -4.99993       4.99993       287.140       292.140    
  13  0.691792     -0.368470      -17.5774       17.5774       282.662       300.239    
  14  0.502714     -0.687735      -32.8075       32.8075       288.946       321.753    
  15  0.305219      -1.18673      -56.6114       56.6114       254.566       311.177    
  16  0.412005     -0.886720      -42.2999       42.2999       277.887       320.187    
  17  0.412225     -0.886186      -42.2744       42.2744       270.947       313.221    
  18  0.121697      -2.10622      -100.475       100.475       272.208       372.683    
  19  0.465374     -0.764915      -36.4893       36.4893       278.834       315.323    
  20  0.273016      -1.29823      -61.9303       61.9303       278.568       340.498    
  21  0.502763     -0.687636      -32.8028       32.8028       282.708       315.510    
  22  0.516442     -0.660793      -31.5223       31.5223       262.089       293.611    
  23  0.554333     -0.589990      -28.1448       28.1448       259.407       287.552    
  24  0.192397E-01  -3.95078      -188.467       188.467       311.882       500.349    
  25  0.451279E-01  -3.09825      -147.798       147.798       277.109       424.907    
  26  0.457340     -0.782327      -37.3200       37.3200       308.952       346.272    
  27  0.325184      -1.12336      -53.5887       53.5887       290.928       344.516    
  28  0.700952     -0.355315      -16.9499       16.9499       255.057       272.007    
  29  0.961087     -0.396906E-01  -1.89339       1.89339       276.452       278.346    
  30  0.195966E-02  -6.23498      -297.432       297.432       312.134       609.566    
  31  0.766376     -0.266082      -12.6931       12.6931       283.393       296.086    
  32  0.398846     -0.919180      -43.8483       43.8483       256.750       300.598    
  33  0.675249     -0.392674      -18.7320       18.7320       318.008       336.740    
  34  0.189468      -1.66354      -79.3570       79.3570       305.147       384.504    
  35  0.444608     -0.810562      -38.6669       38.6669       258.332       296.999    
  36  0.514006     -0.665520      -31.7478       31.7478       282.959       314.707    
  37  0.575199     -0.553039      -26.3820       26.3820       318.942       345.324    
  38  0.121449      -2.10826      -100.572       100.572       297.424       397.996    
  39  0.209130      -1.56480      -74.6468       74.6468       304.193       378.840    
  40  0.466284E-01  -3.06555      -146.238       146.238       322.677       468.915    
  41  0.386630E-01  -3.25287      -155.174       155.174       313.152       468.326    
  42  0.335751E-01  -3.39397      -161.905       161.905       325.264       487.169    
  43  0.878126     -0.129965      -6.19983       6.19983       313.360       319.560    
  44  0.652938     -0.426273      -20.3348       20.3348       294.012       314.347    
  45  0.932456E-01  -2.37252      -113.178       113.178       270.037       383.215    
  46  0.662683     -0.411458      -19.6281       19.6281       329.961       349.590    
  47  0.204704      -1.58619      -75.6674       75.6674       263.894       339.561    
  48  0.985446     -0.146609E-01 -0.699381      0.699381       258.366       259.066    
  49  0.105847      -2.24576      -107.131       107.131       284.323       391.455    
  50  0.843201     -0.170550      -8.13587       8.13587       315.864       324.000    
  51  0.364087      -1.01036      -48.1981       48.1981       332.461       380.659    
  52  0.650651E-01  -2.73237      -130.344       130.344       319.594       449.938    
  53  0.968103     -0.324171E-01  -1.54642       1.54642       300.437       301.983    
  54  0.131933      -2.02546      -96.6221       96.6221       319.305       415.927    
  55  0.906847     -0.977815E-01  -4.66455       4.66455       291.059       295.723    
  56  0.443328E-01  -3.11603      -148.646       148.646       320.091       468.737    
  57  0.507045     -0.679156      -32.3983       32.3983       319.806       352.205    
  58  0.287709      -1.24581      -59.4297       59.4297       325.716       385.146    
  59  0.900299     -0.105028      -5.01024       5.01024       368.077       373.087    
  60  0.689829E-01  -2.67390      -127.555       127.555       319.053       446.608    
  61  0.876407     -0.131925      -6.29331       6.29331       317.896       324.189    
  62  0.718081     -0.331173      -15.7982       15.7982       318.025       333.823    
  63  0.177063      -1.73125      -82.5873       82.5873       287.540       370.127    
  64  0.749425E-01  -2.59103      -123.602       123.602       310.973       434.575    
  65  0.136072      -1.99457      -95.1485       95.1485       318.025       413.174    
  66  0.662610     -0.411569      -19.6334       19.6334       314.940       334.573    
  67  0.612646     -0.489969      -23.3734       23.3734       315.769       339.143    
  68  0.258380      -1.35332      -64.5587       64.5587       353.465       418.024    
  69  0.406590     -0.899949      -42.9310       42.9310       354.393       397.324    
  70  0.889463     -0.117137      -5.58790       5.58790       401.089       406.677    
  71  0.568198     -0.565286      -26.9663       26.9663       421.746       448.712    
  72  0.280610      -1.27079      -60.6215       60.6215       344.821       405.442    
  73  0.369152     -0.996547      -47.5390       47.5390       333.837       381.376    
  74  0.637974     -0.449458      -21.4408       21.4408       281.545       302.986    
  75  0.552740     -0.592868      -28.2820       28.2820       319.358       347.640    
  76  0.452490     -0.792989      -37.8286       37.8286       438.779       476.607    
  77  0.644726E-01  -2.74152      -130.781       130.781       275.738       406.519    
  78  0.112259      -2.18694      -104.325       104.325       460.614       564.939    
  79  0.644429     -0.439391      -20.9606       20.9606       256.855       277.816    
loop,thermsimp(1:2)       88   72.1906       176.597    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220        264.32         87.43          1.10         40.27          0.66          0.05        129.51
Just calling func    0   0        129.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    221        275.95         87.45          1.10         39.91          1.02          0.05        129.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    275.95        1.801     -1.287      6.285     -102.6     0.9411    
                     -0.5889      4.212     -99.70      3.574     0.5706    
                       1.455     -1.704      1.542    -0.1698E+05 -2.434    
                     -0.9665      0.000      0.000      0.000     -1.221    

                      -2.500     0.4987E+05 0.4508E+05 -4681.    -0.9346E+05
                      -2.131     -6.012     -4.968     -7.244      3.041    
                      -14.33     -3.141      370.3      0.000      6531.    

                       8059.      6153.      7923.      9957.      1324.    
                       2404.     0.1347    -0.9130E-01  0.000    -0.4615    
                     -0.3643E-01-0.9152E-01-0.1696    -0.2237     0.4251E-01

                      -1.662     0.3043E-01  0.000    -0.6035E-01 0.5726E-01
                      0.8541E-01 0.6813E-01 0.9938E-03-0.3922    -0.1483    
                     -0.9725E-02-0.6923E-03-0.9702E-01-0.2938      0.000    

                      -2.013     -1.386      1.021     0.7447    -0.6719    
                      0.2553      9.245      9.146    -0.1128E+05 -1.919    
                     -0.4084    -0.4926      9.352      8.593    -0.1000E+05

                     -0.8247    -0.2911E-01-0.8773      8.829      8.189    
                     -0.1000E+05 -2.511    -0.4351    -0.7637      10.11    
                       8.389    -0.1000E+05 -2.511    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    264.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       88
neval is:      220
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       89
neval is:      220


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      220     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521      -6.27407       6.27407       258.366       264.640    
   2  0.765270     -0.267527      -12.7621       12.7621       255.057       267.819    
   3  0.215687      -1.53393      -73.1742       73.1742       256.082       329.257    
   4  0.999601E-01  -2.30298      -109.861       109.861       257.345       367.206    
   5  0.706519     -0.347405      -16.5725       16.5725       256.855       273.428    
   6  0.201358      -1.60267      -76.4535       76.4535       276.452       352.906    
   7  0.450677     -0.797005      -38.0202       38.0202       255.802       293.822    
   8  0.897557     -0.108078      -5.15575       5.15575       268.193       273.349    
   9  0.161166      -1.82532      -87.0746       87.0746       259.407       346.481    
  10  0.972556E-01  -2.33041      -111.169       111.169       287.140       398.309    
  11  0.742112     -0.298255      -14.2279       14.2279       262.089       276.316    
  12  0.172377      -1.75807      -83.8666       83.8666       291.059       374.925    
  13  0.658751     -0.417410      -19.9120       19.9120       283.393       303.305    
  14  0.725340     -0.321114      -15.3184       15.3184       258.332       273.650    
  15  0.501488     -0.690175      -32.9239       32.9239       282.662       315.586    
  16  0.845372     -0.167978      -8.01320       8.01320       256.750       264.763    
  17  0.132369      -2.02216      -96.4647       96.4647       300.437       396.901    
  18  0.734515E-01  -2.61113      -124.561       124.561       281.545       406.106    
  19  0.391205     -0.938523      -44.7711       44.7711       254.566       299.337    
  20  0.376983     -0.975555      -46.5377       46.5377       270.947       317.485    
  21  0.315463      -1.15371      -55.0365       55.0365       294.012       349.048    
  22  0.267113      -1.32008      -62.9730       62.9730       282.959       345.932    
  23  0.965292     -0.353243E-01  -1.68510       1.68510       278.834       280.519    
  24  0.954592     -0.464714E-01  -2.21686       2.21686       282.708       284.925    
  25  0.992414     -0.761515E-02 -0.363271      0.363271       256.377       256.741    
  26  0.867953E-02  -4.74679      -226.440       226.440       313.360       539.799    
  27  0.829585     -0.186829      -8.91246       8.91246       277.887       286.800    
  28  0.349695      -1.05069      -50.1221       50.1221       288.946       339.068    
  29  0.673511     -0.395251      -18.8550       18.8550       315.864       334.719    
  30  0.340696      -1.07676      -51.3657       51.3657       317.896       369.262    
  31  0.558731     -0.582087      -27.7677       27.7677       258.372       286.140    
  32  0.747295     -0.291295      -13.8959       13.8959       318.025       331.921    
  33  0.123287      -2.09324      -99.8556       99.8556       277.562       377.418    
  34  0.355051      -1.03549      -49.3969       49.3969       314.940       364.337    
  35  0.511895     -0.669636      -31.9441       31.9441       318.008       349.953    
  36  0.571856E-01  -2.86145      -136.502       136.502       315.769       452.271    
  37  0.507517     -0.678226      -32.3539       32.3539       263.894       296.248    
  38  0.326770      -1.11850      -53.3565       53.3565       278.568       331.924    
  39  0.736001     -0.306523      -14.6223       14.6223       290.928       305.550    
  40  0.970046     -0.304120E-01  -1.45077       1.45077       318.942       320.393    
  41  0.673510     -0.395253      -18.8550       18.8550       308.952       327.807    
  42  0.335032      -1.09353      -52.1655       52.1655       319.358       371.524    
  43  0.872321E-01  -2.43918      -116.358       116.358       329.961       446.320    
  44  0.749956     -0.287741      -13.7263       13.7263       269.284       283.011    
  45  0.159001      -1.83884      -87.7198       87.7198       319.806       407.526    
  46  0.529687     -0.635468      -30.3142       30.3142       254.623       284.937    
  47  0.142415      -1.94901      -92.9751       92.9751       287.540       380.515    
  48  0.803387     -0.218919      -10.4432       10.4432       272.208       282.651    
  49  0.709133     -0.343713      -16.3964       16.3964       368.077       384.474    
  50  0.261172      -1.34258      -64.0460       64.0460       304.193       368.239    
  51  0.106599      -2.23868      -106.794       106.794       332.461       439.255    
  52  0.955666     -0.453468E-01  -2.16321       2.16321       333.837       336.000    
  53  0.376236     -0.977539      -46.6323       46.6323       270.037       316.669    
  54  0.890774     -0.115665      -5.51766       5.51766       305.147       310.664    
  55  0.554077     -0.590452      -28.1668       28.1668       325.716       353.883    
  56  0.892825E-01  -2.41595      -115.250       115.250       284.323       399.573    
  57  0.941033     -0.607774E-01  -2.89931       2.89931       354.393       357.293    
  58  0.209380E-01  -3.86619      -184.432       184.432       297.424       481.855    
  59  0.427794     -0.849113      -40.5059       40.5059       344.821       385.327    
  60  0.194887      -1.63533      -78.0116       78.0116       275.738       353.750    
  61  0.840289     -0.174009      -8.30089       8.30089       401.089       409.390    
  62  0.634527     -0.454875      -21.6993       21.6993       318.025       339.724    
  63  0.159135      -1.83800      -87.6795       87.6795       319.305       406.985    
  64  0.182987      -1.69834      -81.0172       81.0172       353.465       434.482    
  65  0.520726     -0.652532      -31.1282       31.1282       277.109       308.237    
  66  0.249623      -1.38781      -66.2036       66.2036       310.973       377.177    
  67  0.801631     -0.221107      -10.5476       10.5476       269.945       280.493    
  68  0.329011      -1.11166      -53.0305       53.0305       319.053       372.083    
  69  0.995152     -0.485930E-02 -0.231807      0.231807       421.746       421.978    
  70  0.187107      -1.67607      -79.9550       79.9550       319.594       399.549    
  71  0.122259      -2.10161      -100.255       100.255       313.152       413.407    
  72  0.311222      -1.16725      -55.6822       55.6822       320.091       375.773    
  73  0.953750     -0.473535E-01  -2.25894       2.25894       322.677       324.935    
  74  0.303762      -1.19151      -56.8396       56.8396       438.779       495.618    
  75  0.278797      -1.27727      -60.9307       60.9307       325.264       386.194    
  76  0.636504     -0.451765      -21.5509       21.5509       311.882       333.433    
  77  0.512822     -0.667826      -31.8578       31.8578       269.425       301.283    
  78  0.595705     -0.518009      -24.7110       24.7110       460.614       485.325    
  79  0.642648     -0.442158      -21.0926       21.0926       264.318       285.411    
loop,thermsimp(1:2)       89   6.27407       12.7621    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    222        256.84         87.45          1.11         40.16          0.56          0.04        129.32
Just calling func    0   0        129.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    223        302.82         87.50          1.10         40.09          0.86          0.05        129.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    256.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       89
neval is:      222
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       90
neval is:      222


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      222     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -88.2113       88.2113       256.377       344.589    
   2  0.894146     -0.111886      -5.33737       5.33737       258.366       263.704    
   3  0.721270     -0.326741      -15.5868       15.5868       256.750       272.337    
   4  0.536866     -0.622006      -29.6720       29.6720       255.057       284.729    
   5  0.418107     -0.872017      -41.5985       41.5985       268.193       309.791    
   6  0.391189     -0.938564      -44.7731       44.7731       256.855       301.628    
   7  0.799669     -0.223558      -10.6645       10.6645       258.332       268.997    
   8  0.595070     -0.519076      -24.7619       24.7619       262.089       286.850    
   9  0.384356E-03  -7.86394      -375.140       375.140       269.945       645.085    
  10  0.654302     -0.424187      -20.2353       20.2353       278.834       299.069    
  11  0.873355     -0.135413      -6.45972       6.45972       272.208       278.667    
  12  0.303212      -1.19332      -56.9259       56.9259       269.284       326.210    
  13  0.434159     -0.834344      -39.8014       39.8014       282.708       322.509    
  14  0.970825     -0.296089E-01  -1.41246       1.41246       254.623       256.035    
  15  0.405896     -0.901659      -43.0125       43.0125       264.318       307.331    
  16  0.250423      -1.38461      -66.0509       66.0509       258.372       324.423    
  17  0.517030     -0.659654      -31.4680       31.4680       277.887       309.355    
  18  0.165468      -1.79897      -85.8179       85.8179       255.802       341.620    
  19  0.679403     -0.386541      -18.4395       18.4395       263.894       282.333    
  20  0.554013     -0.590567      -28.1723       28.1723       254.566       282.738    
  21  0.211764E-01  -3.85487      -183.892       183.892       269.425       453.317    
  22  0.453828     -0.790038      -37.6878       37.6878       283.393       321.081    
  23  0.377409     -0.974426      -46.4838       46.4838       290.928       337.411    
  24  0.496879     -0.699408      -33.3644       33.3644       277.109       310.473    
  25  0.214619      -1.53889      -73.4108       73.4108       305.147       378.558    
  26  0.724154     -0.322751      -15.3965       15.3965       282.662       298.058    
  27  0.385609     -0.952932      -45.4584       45.4584       270.037       315.495    
  28  0.777864     -0.251204      -11.9834       11.9834       270.947       282.930    
  29  0.709283     -0.343500      -16.3862       16.3862       318.942       335.328    
  30  0.191760      -1.65151      -78.7833       78.7833       322.677       401.460    
  31  0.347616      -1.05666      -50.4065       50.4065       308.952       359.358    
  32  0.191581      -1.65244      -78.8278       78.8278       256.082       334.910    
  33  0.770989     -0.260081      -12.4069       12.4069       318.025       330.432    
  34  0.788566E-01  -2.54012      -121.173       121.173       278.568       399.741    
  35  0.229474      -1.47197      -70.2184       70.2184       311.882       382.100    
  36  0.339326      -1.08079      -51.5579       51.5579       315.864       367.422    
  37  0.220886      -1.51011      -72.0378       72.0378       333.837       405.875    
  38  0.223644      -1.49770      -71.4459       71.4459       288.946       360.392    
  39  0.138287      -1.97842      -94.3782       94.3782       318.025       412.403    
  40  0.796402     -0.227651      -10.8598       10.8598       282.959       293.819    
  41  0.104384      -2.25968      -107.795       107.795       259.407       367.202    
  42  0.919642     -0.837713E-01  -3.99621       3.99621       294.012       298.008    
  43  0.360767      -1.01952      -48.6351       48.6351       318.008       366.644    
  44  0.924300     -0.787181E-01  -3.75515       3.75515       276.452       280.207    
  45  0.561139     -0.577786      -27.5626       27.5626       275.738       303.301    
  46  0.509073E-01  -2.97775      -142.050       142.050       325.716       467.766    
  47  0.715469     -0.334817      -15.9721       15.9721       354.393       370.365    
  48  0.294040E-01  -3.52662      -168.233       168.233       314.940       483.173    
  49  0.264026E-02  -5.93688      -283.211       283.211       257.345       540.556    
  50  0.634029     -0.455661      -21.7367       21.7367       304.193       325.930    
  51  0.319148      -1.14210      -54.4825       54.4825       317.896       372.378    
  52  0.495674     -0.701836      -33.4802       33.4802       319.358       352.838    
  53  0.838343     -0.176328      -8.41153       8.41153       319.053       327.464    
  54  0.240556      -1.42480      -67.9684       67.9684       291.059       359.027    
  55  0.919800     -0.835990E-01  -3.98799       3.98799       320.091       324.079    
  56  0.652899     -0.426332      -20.3377       20.3377       310.973       331.311    
  57  0.777375     -0.251832      -12.0134       12.0134       277.562       289.576    
  58  0.988137     -0.119340E-01 -0.569296      0.569296       287.540       288.109    
  59  0.771111     -0.259922      -12.3993       12.3993       368.077       380.476    
  60  0.980963     -0.192203E-01 -0.916881      0.916881       344.821       345.738    
  61  0.358823      -1.02493      -48.8928       48.8928       325.264       374.157    
  62  0.398479     -0.920100      -43.8922       43.8922       300.437       344.329    
  63  0.524779     -0.644778      -30.7584       30.7584       287.140       317.898    
  64  0.391693E-01  -3.23986      -154.554       154.554       319.594       474.148    
  65  0.494448     -0.704313      -33.5984       33.5984       284.323       317.922    
  66  0.224697      -1.49300      -71.2218       71.2218       281.545       352.767    
  67  0.585684     -0.534974      -25.5203       25.5203       319.305       344.825    
  68  0.558887     -0.581807      -27.7544       27.7544       319.806       347.561    
  69  0.540529     -0.615206      -29.3477       29.3477       401.089       430.437    
  70  0.314620      -1.15639      -55.1642       55.1642       313.152       368.316    
  71  0.763547     -0.269781      -12.8696       12.8696       421.746       434.615    
  72  0.314721      -1.15607      -55.1489       55.1489       353.465       408.614    
  73  0.838345     -0.176326      -8.41142       8.41142       332.461       340.873    
  74  0.179413      -1.71806      -81.9581       81.9581       329.961       411.920    
  75  0.640584     -0.445375      -21.2461       21.2461       315.769       337.015    
  76  0.195077      -1.63436      -77.9652       77.9652       297.424       375.389    
  77  0.711783     -0.339982      -16.2184       16.2184       460.614       476.832    
  78  0.363725      -1.01136      -48.2456       48.2456       438.779       487.024    
  79  0.494750     -0.703703      -33.5693       33.5693       256.835       290.405    
loop,thermsimp(1:2)       90   88.2113       5.33737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    224        284.20         87.42          1.16         39.95          0.85          0.05        129.43
Just calling func    0   0        129.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    225        374.62         87.60          1.19         40.08          0.70          0.05        129.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    284.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       90
neval is:      224
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       91
neval is:      224


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      224     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -108.486       108.486       254.623       363.108    
   2  0.846291     -0.166892      -7.96138       7.96138       258.366       266.328    
   3  0.167054      -1.78944      -85.3628       85.3628       258.332       343.695    
   4  0.786038     -0.240750      -11.4847       11.4847       256.750       268.235    
   5  0.680218     -0.385341      -18.3822       18.3822       272.208       290.590    
   6  0.843894     -0.169729      -8.09671       8.09671       276.452       284.549    
   7  0.295559      -1.21889      -58.1456       58.1456       263.894       322.039    
   8  0.383493     -0.958433      -45.7209       45.7209       254.566       300.287    
   9  0.867247     -0.142431      -6.79449       6.79449       270.947       277.742    
  10  0.241960      -1.41898      -67.6908       67.6908       255.057       322.748    
  11  0.486925     -0.719645      -34.3298       34.3298       262.089       296.418    
  12  0.750166     -0.287460      -13.7129       13.7129       287.540       301.253    
  13  0.507045     -0.679156      -32.3983       32.3983       277.562       309.960    
  14  0.237743      -1.43656      -68.5295       68.5295       256.835       325.365    
  15  0.256837E-01  -3.66190      -174.686       174.686       282.959       457.645    
  16  0.776460     -0.253010      -12.0695       12.0695       294.012       306.081    
  17  0.316300      -1.15106      -54.9101       54.9101       282.662       337.572    
  18  0.493161     -0.706919      -33.7227       33.7227       278.834       312.556    
  19  0.807271     -0.214096      -10.2132       10.2132       256.855       267.068    
  20  0.338915      -1.08201      -51.6158       51.6158       275.738       327.354    
  21  0.132986      -2.01751      -96.2428       96.2428       264.318       360.561    
  22  0.409975     -0.891659      -42.5355       42.5355       277.887       320.423    
  23  0.525021     -0.644317      -30.7364       30.7364       268.193       298.929    
  24  0.393064     -0.933783      -44.5450       44.5450       277.109       321.654    
  25  0.176068      -1.73689      -82.8561       82.8561       270.037       352.893    
  26  0.965490     -0.351191E-01  -1.67532       1.67532       287.140       288.815    
  27  0.387767     -0.947350      -45.1922       45.1922       284.323       329.516    
  28  0.936248     -0.658753E-01  -3.14250       3.14250       283.393       286.536    
  29  0.914720     -0.891370E-01  -4.25217       4.25217       282.708       286.960    
  30  0.332171      -1.10211      -52.5746       52.5746       320.091       372.666    
  31  0.845314E-01  -2.47063      -117.858       117.858       258.372       376.230    
  32  0.687741     -0.374343      -17.8576       17.8576       304.193       322.050    
  33  0.899776     -0.105610      -5.03797       5.03797       269.284       274.322    
  34  0.558791     -0.581980      -27.7626       27.7626       319.053       346.816    
  35  0.882799     -0.124658      -5.94666       5.94666       318.025       323.972    
  36  0.235569      -1.44575      -68.9678       68.9678       310.973       379.941    
  37  0.533400     -0.628484      -29.9810       29.9810       256.082       286.063    
  38  0.147169      -1.91617      -91.4086       91.4086       318.942       410.350    
  39  0.966208E-01  -2.33696      -111.482       111.482       315.769       427.251    
  40  0.952887     -0.482588E-01  -2.30213       2.30213       290.928       293.230    
  41  0.155551      -1.86078      -88.7662       88.7662       332.461       421.227    
  42  0.645067     -0.438401      -20.9134       20.9134       255.802       276.715    
  43  0.394254     -0.930759      -44.4007       44.4007       300.437       344.837    
  44  0.546893     -0.603501      -28.7893       28.7893       256.377       285.167    
  45  0.390314     -0.940803      -44.8799       44.8799       319.305       364.185    
  46  0.311561      -1.16616      -55.6303       55.6303       344.821       400.451    
  47  0.752427E-01  -2.58704      -123.411       123.411       319.806       443.218    
  48  0.144673      -1.93328      -92.2249       92.2249       281.545       373.770    
  49  0.297567      -1.21212      -57.8225       57.8225       319.358       377.181    
  50  0.544131     -0.608565      -29.0309       29.0309       291.059       320.089    
  51  0.750603E-01  -2.58946      -123.527       123.527       308.952       432.479    
  52  0.127547      -2.05927      -98.2350       98.2350       288.946       387.181    
  53  0.839209     -0.175296      -8.36226       8.36226       318.008       326.371    
  54  0.718305     -0.330861      -15.7833       15.7833       259.407       275.190    
  55  0.246952      -1.39856      -66.7167       66.7167       315.864       382.581    
  56  0.550710     -0.596548      -28.4576       28.4576       313.152       341.610    
  57  0.588510     -0.530162      -25.2907       25.2907       354.393       379.684    
  58  0.361548      -1.01736      -48.5319       48.5319       317.896       366.428    
  59  0.962524     -0.381965E-01  -1.82212       1.82212       325.264       327.086    
  60  0.510442     -0.672478      -32.0797       32.0797       297.424       329.503    
  61  0.177498      -1.72880      -82.4701       82.4701       305.147       387.617    
  62  0.775349     -0.254441      -12.1378       12.1378       368.077       380.215    
  63  0.313518E-01  -3.46248      -165.174       165.174       311.882       477.055    
  64  0.136553      -1.99105      -94.9804       94.9804       278.568       373.548    
  65  0.694627E-01  -2.66696      -127.224       127.224       322.677       449.901    
  66  0.784048     -0.243285      -11.6056       11.6056       333.837       345.443    
  67  0.561706     -0.576776      -27.5144       27.5144       353.465       380.979    
  68  0.992642E-01  -2.30997      -110.194       110.194       329.961       440.156    
  69  0.111580      -2.19301      -104.615       104.615       318.025       422.640    
  70  0.655988     -0.421613      -20.1125       20.1125       401.089       421.202    
  71  0.739953     -0.301169      -14.3669       14.3669       421.746       436.113    
  72  0.899949     -0.105417      -5.02879       5.02879       269.425       274.454    
  73  0.308570      -1.17581      -56.0904       56.0904       325.716       381.806    
  74  0.826728     -0.190280      -9.07705       9.07705       319.594       328.671    
  75  0.173576E-01  -4.05373      -193.378       193.378       460.614       653.992    
  76  0.501180     -0.690790      -32.9533       32.9533       314.940       347.893    
  77  0.262066      -1.33916      -63.8828       63.8828       438.779       502.661    
  78  0.697378     -0.360427      -17.1937       17.1937       257.345       274.539    
  79  0.938528     -0.634427E-01  -3.02645       3.02645       284.201       287.228    
loop,thermsimp(1:2)       91   108.486       7.96138    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    226        466.03         87.51          1.12         40.09          0.76          0.05        129.54
Just calling func    0   0        129.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    466.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       91
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       92
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      225     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -72.5288       72.5288       258.366       330.895    
   2  0.389473     -0.942961      -44.9828       44.9828       256.855       301.838    
   3  0.919121     -0.843378E-01  -4.02323       4.02323       256.750       260.773    
   4  0.970518     -0.299250E-01  -1.42754       1.42754       269.284       270.712    
   5  0.713317     -0.337830      -16.1158       16.1158       269.425       285.541    
   6  0.639607     -0.446902      -21.3189       21.3189       257.345       278.664    
   7  0.712661     -0.338749      -16.1596       16.1596       259.407       275.566    
   8  0.212311      -1.54970      -73.9268       73.9268       255.802       329.728    
   9  0.831769     -0.184200      -8.78705       8.78705       270.947       279.734    
  10  0.794875     -0.229571      -10.9514       10.9514       276.452       287.404    
  11  0.909815     -0.945137E-01  -4.50866       4.50866       256.377       260.886    
  12  0.753651E-01  -2.58541      -123.334       123.334       256.082       379.416    
  13  0.676081     -0.391442      -18.6733       18.6733       283.393       302.066    
  14  0.597437     -0.515107      -24.5725       24.5725       282.708       307.280    
  15  0.146947      -1.91768      -91.4807       91.4807       284.201       375.682    
  16  0.854910     -0.156760      -7.47802       7.47802       287.140       294.618    
  17  0.984999     -0.151146E-01 -0.721022      0.721022       272.208       272.929    
  18  0.533419     -0.628448      -29.9793       29.9793       290.928       320.907    
  19  0.383774     -0.957703      -45.6860       45.6860       262.089       307.775    
  20  0.691729     -0.368561      -17.5818       17.5818       268.193       285.775    
  21  0.313732E-01  -3.46180      -165.141       165.141       254.566       419.707    
  22  0.415635     -0.877947      -41.8814       41.8814       287.540       329.421    
  23  0.288746      -1.24221      -59.2580       59.2580       294.012       353.270    
  24  0.176464      -1.73464      -82.7487       82.7487       277.562       360.311    
  25  0.881312     -0.126344      -6.02709       6.02709       278.834       284.861    
  26  0.962783     -0.379267E-01  -1.80925       1.80925       291.059       292.868    
  27  0.415450     -0.878393      -41.9027       41.9027       277.887       319.790    
  28  0.271836      -1.30256      -62.1369       62.1369       277.109       339.246    
  29  0.926655     -0.761736E-01  -3.63377       3.63377       263.894       267.528    
  30  0.277790      -1.28089      -61.1033       61.1033       304.193       365.296    
  31  0.189974      -1.66087      -79.2297       79.2297       255.057       334.287    
  32  0.410540     -0.890281      -42.4698       42.4698       318.025       360.495    
  33  0.952387     -0.487839E-01  -2.32718       2.32718       256.835       259.163    
  34  0.896015     -0.109798      -5.23777       5.23777       318.008       323.246    
  35  0.121549E-01  -4.41002      -210.375       210.375       325.264       535.638    
  36  0.723911     -0.323087      -15.4125       15.4125       275.738       291.151    
  37  0.759053     -0.275683      -13.1511       13.1511       319.594       332.745    
  38  0.969929     -0.305320E-01  -1.45649       1.45649       297.424       298.880    
  39  0.852636     -0.159422      -7.60504       7.60504       284.323       291.928    
  40  0.730471     -0.314065      -14.9821       14.9821       282.662       297.644    
  41  0.528358     -0.637981      -30.4341       30.4341       313.152       343.586    
  42  0.404403     -0.905344      -43.1883       43.1883       258.332       301.520    
  43  0.232822      -1.45748      -69.5273       69.5273       300.437       369.964    
  44  0.847643     -0.165296      -7.88522       7.88522       333.837       341.722    
  45  0.429393E-01  -3.14797      -150.170       150.170       319.053       469.223    
  46  0.673157     -0.395777      -18.8801       18.8801       314.940       333.820    
  47  0.806068E-01  -2.51817      -120.126       120.126       270.037       390.163    
  48  0.926018     -0.768619E-01  -3.66660       3.66660       264.318       267.985    
  49  0.167973      -1.78395      -85.1012       85.1012       254.623       339.724    
  50  0.780773     -0.247471      -11.8053       11.8053       319.305       331.110    
  51  0.565702E-01  -2.87227      -137.018       137.018       317.896       454.914    
  52  0.646011     -0.436939      -20.8437       20.8437       320.091       340.935    
  53  0.455316     -0.786763      -37.5316       37.5316       278.568       316.099    
  54  0.410066     -0.891437      -42.5249       42.5249       281.545       324.070    
  55  0.934064     -0.682104E-01  -3.25389       3.25389       258.372       261.626    
  56  0.511079     -0.671231      -32.0202       32.0202       319.358       351.378    
  57  0.578130     -0.547957      -26.1396       26.1396       354.393       380.533    
  58  0.458047     -0.780783      -37.2463       37.2463       310.973       348.219    
  59  0.223630      -1.49776      -71.4490       71.4490       368.077       439.526    
  60  0.952824E-01  -2.35091      -112.147       112.147       353.465       465.612    
  61  0.995385     -0.462583E-02 -0.220669      0.220669       325.716       325.936    
  62  0.675298     -0.392602      -18.7286       18.7286       315.864       334.593    
  63  0.728172     -0.317218      -15.1325       15.1325       288.946       304.078    
  64  0.240868      -1.42350      -67.9065       67.9065       305.147       373.053    
  65  0.188028      -1.67116      -79.7208       79.7208       344.821       424.542    
  66  0.645358     -0.437951      -20.8919       20.8919       318.942       339.834    
  67  0.170606      -1.76840      -84.3592       84.3592       401.089       485.449    
  68  0.827167     -0.189749      -9.05175       9.05175       332.461       341.513    
  69  0.457642     -0.781668      -37.2885       37.2885       318.025       355.314    
  70  0.819756E-01  -2.50133      -119.323       119.323       315.769       435.092    
  71  0.965811     -0.347876E-01  -1.65950       1.65950       308.952       310.611    
  72  0.806837     -0.214633      -10.2388       10.2388       421.746       431.985    
  73  0.556186     -0.586653      -27.9855       27.9855       329.961       357.947    
  74  0.506643     -0.679949      -32.4362       32.4362       319.806       352.242    
  75  0.296056E-01  -3.51979      -167.907       167.907       322.677       490.584    
  76  0.400124     -0.915981      -43.6958       43.6958       282.959       326.655    
  77  0.154581      -1.86704      -89.0649       89.0649       311.882       400.947    
  78  0.294532      -1.22237      -58.3115       58.3115       438.779       497.090    
  79  0.212930      -1.54679      -73.7878       73.7878       466.025       539.813    
loop,thermsimp(1:2)       92   72.5288       44.9828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227        460.61         87.42          1.11         40.04          0.81          0.05        129.42
Just calling func    0   0        129.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    460.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       92
neval is:      226
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       93
neval is:      226


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      226     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -90.9488       90.9488       256.835       347.784    
   2  0.695074     -0.363738      -17.3517       17.3517       256.750       274.102    
   3  0.541180     -0.614003      -29.2903       29.2903       256.377       285.668    
   4  0.189791      -1.66183      -79.2756       79.2756       258.372       337.648    
   5  0.245553      -1.40424      -66.9876       66.9876       263.894       330.882    
   6  0.641474     -0.443986      -21.1798       21.1798       264.318       285.498    
   7  0.308462      -1.17616      -56.1071       56.1071       269.284       325.392    
   8  0.478005     -0.738133      -35.2117       35.2117       272.208       307.419    
   9  0.395759     -0.926951      -44.2190       44.2190       259.407       303.626    
  10  0.438776E-01  -3.12635      -149.139       149.139       257.345       406.484    
  11  0.294628E-01  -3.52463      -168.138       168.138       270.947       439.085    
  12  0.331052E-01  -3.40806      -162.578       162.578       278.834       441.411    
  13  0.916325E-01  -2.38997      -114.011       114.011       269.425       383.436    
  14  0.985908     -0.141919E-01 -0.677005      0.677005       268.193       268.870    
  15  0.511724     -0.669970      -31.9601       31.9601       276.452       308.412    
  16  0.185695      -1.68365      -80.3165       80.3165       275.738       356.055    
  17  0.830711     -0.185474      -8.84779       8.84779       284.323       293.171    
  18  0.765179E-04  -9.47799      -452.136       452.136       291.059       743.194    
  19  0.129365      -2.04512      -97.5599       97.5599       287.140       384.700    
  20  0.796363     -0.227700      -10.8621       10.8621       282.662       293.524    
  21  0.589256     -0.528895      -25.2303       25.2303       297.424       322.654    
  22  0.770995     -0.260073      -12.4065       12.4065       258.332       270.739    
  23  0.685430     -0.377709      -18.0182       18.0182       256.855       274.873    
  24  0.487688     -0.718080      -34.2551       34.2551       283.393       317.648    
  25  0.114898      -2.16371      -103.217       103.217       288.946       392.163    
  26  0.165093      -1.80124      -85.9261       85.9261       282.708       368.634    
  27  0.302275      -1.19642      -57.0737       57.0737       262.089       319.162    
  28  0.123669      -2.09014      -99.7077       99.7077       308.952       408.660    
  29  0.960526     -0.402739E-01  -1.92121       1.92121       278.568       280.489    
  30  0.744557     -0.294966      -14.0710       14.0710       277.887       291.958    
  31  0.418436     -0.871232      -41.5610       41.5610       290.928       332.489    
  32  0.624411     -0.470947      -22.4659       22.4659       318.008       340.474    
  33  0.920055     -0.833222E-01  -3.97478       3.97478       281.545       285.520    
  34  0.330507      -1.10713      -52.8142       52.8142       325.716       378.530    
  35  0.889566     -0.117022      -5.58238       5.58238       282.959       288.541    
  36  0.269410      -1.31152      -62.5645       62.5645       287.540       350.105    
  37  0.458780     -0.779184      -37.1700       37.1700       255.802       292.972    
  38  0.952588     -0.485730E-01  -2.31711       2.31711       258.366       260.683    
  39  0.213836      -1.54254      -73.5852       73.5852       319.305       392.890    
  40  0.460697     -0.775015      -36.9712       36.9712       319.594       356.565    
  41  0.571693     -0.559153      -26.6737       26.6737       314.940       341.614    
  42  0.201363      -1.60265      -76.4523       76.4523       255.057       331.509    
  43  0.707817     -0.345570      -16.4850       16.4850       315.864       332.349    
  44  0.927118     -0.756745E-01  -3.60996       3.60996       277.109       280.719    
  45  0.288916      -1.24162      -59.2300       59.2300       254.623       313.853    
  46  0.702737     -0.352773      -16.8286       16.8286       318.942       335.771    
  47  0.253190      -1.37362      -65.5267       65.5267       320.091       385.618    
  48  0.709086     -0.343779      -16.3995       16.3995       332.461       348.861    
  49  0.399421     -0.917738      -43.7796       43.7796       333.837       377.617    
  50  0.837301     -0.177572      -8.47086       8.47086       313.152       321.623    
  51  0.906694     -0.979507E-01  -4.67262       4.67262       310.973       315.646    
  52  0.479547     -0.734913      -35.0581       35.0581       319.358       354.416    
  53  0.573668     -0.555704      -26.5092       26.5092       319.806       346.316    
  54  0.616113     -0.484325      -23.1041       23.1041       294.012       317.116    
  55  0.899004     -0.106467      -5.07889       5.07889       318.025       323.104    
  56  0.668105     -0.403310      -19.2394       19.2394       329.961       349.201    
  57  0.464354     -0.767107      -36.5939       36.5939       277.562       314.156    
  58  0.298472E-01  -3.51166      -167.520       167.520       318.025       485.545    
  59  0.458507     -0.779779      -37.1984       37.1984       304.193       341.391    
  60  0.372295E-01  -3.29065      -156.977       156.977       300.437       457.413    
  61  0.349332      -1.05173      -50.1717       50.1717       305.147       355.318    
  62  0.396867     -0.924153      -44.0856       44.0856       284.201       328.287    
  63  0.599776     -0.511199      -24.3861       24.3861       256.082       280.468    
  64  0.175124      -1.74226      -83.1123       83.1123       354.393       437.506    
  65  0.723227     -0.324033      -15.4576       15.4576       270.037       285.494    
  66  0.738639     -0.302946      -14.4517       14.4517       311.882       326.334    
  67  0.691263     -0.369235      -17.6139       17.6139       254.566       272.180    
  68  0.575263     -0.552928      -26.3768       26.3768       344.821       371.198    
  69  0.312385      -1.16352      -55.5042       55.5042       421.746       477.250    
  70  0.708595     -0.344472      -16.4326       16.4326       315.769       332.202    
  71  0.674476     -0.393819      -18.7867       18.7867       368.077       386.864    
  72  0.196387      -1.62767      -77.6460       77.6460       317.896       395.542    
  73  0.800316     -0.222748      -10.6259       10.6259       353.465       364.091    
  74  0.992803     -0.722339E-02 -0.344583      0.344583       319.053       319.398    
  75  0.204374      -1.58780      -75.7442       75.7442       401.089       476.834    
  76  0.501038     -0.691074      -32.9668       32.9668       322.677       355.643    
  77  0.801608     -0.221136      -10.5490       10.5490       438.779       449.328    
  78  0.208368      -1.56845      -74.8209       74.8209       325.264       400.085    
  79  0.767171     -0.265046      -12.6437       12.6437       460.614       473.257    
loop,thermsimp(1:2)       93   90.9488       17.3517    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    228        263.05         87.52          1.12         40.25          0.66          0.05        129.59
Just calling func    0   0        129.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    229        317.17         87.53          1.13         40.02          0.75          0.05        129.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    263.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       93
neval is:      228
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       94
neval is:      228


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      228     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638      -8.18776       8.18776       258.366       266.554    
   2  0.478368     -0.737375      -35.1756       35.1756       268.193       303.368    
   3  0.283498      -1.26055      -60.1330       60.1330       258.332       318.465    
   4  0.520516     -0.652935      -31.1474       31.1474       254.566       285.713    
   5  0.703282E-01  -2.65458      -126.634       126.634       256.750       383.384    
   6  0.914137     -0.897748E-01  -4.28260       4.28260       256.855       261.138    
   7  0.479535     -0.734938      -35.0593       35.0593       256.082       291.142    
   8  0.921875     -0.813456E-01  -3.88049       3.88049       278.568       282.448    
   9  0.739547     -0.301718      -14.3931       14.3931       277.109       291.502    
  10  0.790753     -0.234770      -11.1994       11.1994       270.037       281.236    
  11  0.212247E-01  -3.85259      -183.783       183.783       264.318       448.101    
  12  0.286971      -1.24837      -59.5522       59.5522       281.545       341.097    
  13  0.695666     -0.362886      -17.3110       17.3110       256.377       273.688    
  14  0.534590     -0.626255      -29.8747       29.8747       282.959       312.834    
  15  0.945577     -0.559603E-01  -2.66952       2.66952       277.887       280.557    
  16  0.619446     -0.478930      -22.8468       22.8468       255.802       278.648    
  17  0.291083E-01  -3.53673      -168.715       168.715       284.323       453.039    
  18  0.372584E-01  -3.28988      -156.940       156.940       282.662       439.601    
  19  0.713241     -0.337936      -16.1208       16.1208       259.407       275.528    
  20  0.280281      -1.27196      -60.6774       60.6774       272.208       332.885    
  21  0.254796      -1.36729      -65.2250       65.2250       276.452       341.677    
  22  0.498598     -0.695955      -33.1997       33.1997       254.623       287.822    
  23  0.515261E-01  -2.96567      -141.473       141.473       277.562       419.036    
  24  0.347627      -1.05662      -50.4049       50.4049       310.973       361.378    
  25  0.696212     -0.362102      -17.2736       17.2736       294.012       311.286    
  26  0.707749E-01  -2.64825      -126.332       126.332       283.393       409.725    
  27  0.364523E-01  -3.31175      -157.983       157.983       262.089       420.072    
  28  0.895087E-02  -4.71600      -224.971       224.971       319.053       544.024    
  29  0.333194      -1.09903      -52.4279       52.4279       313.152       365.580    
  30  0.451375     -0.795457      -37.9463       37.9463       297.424       335.370    
  31  0.849961E-01  -2.46515      -117.597       117.597       318.025       435.622    
  32  0.524791     -0.644756      -30.7573       30.7573       269.284       300.042    
  33  0.641068     -0.444619      -21.2100       21.2100       311.882       333.092    
  34  0.757376     -0.277895      -13.2566       13.2566       284.201       297.458    
  35  0.760597     -0.273651      -13.0542       13.0542       263.894       276.948    
  36  0.709070     -0.343801      -16.4006       16.4006       255.057       271.458    
  37  0.794718     -0.229768      -10.9608       10.9608       315.769       326.730    
  38  0.869679     -0.139632      -6.66095       6.66095       315.864       322.525    
  39  0.229100E-01  -3.77618      -180.138       180.138       290.928       471.066    
  40  0.935590     -0.665776E-01  -3.17600       3.17600       318.942       322.118    
  41  0.889453     -0.117149      -5.58844       5.58844       258.372       263.960    
  42  0.529054     -0.636665      -30.3713       30.3713       318.008       348.380    
  43  0.907902     -0.966186E-01  -4.60907       4.60907       304.193       308.802    
  44  0.693802     -0.365568      -17.4390       17.4390       314.940       332.379    
  45  0.883803     -0.123521      -5.89243       5.89243       319.806       325.699    
  46  0.275134E-01  -3.59308      -171.404       171.404       256.835       428.239    
  47  0.324767      -1.12465      -53.6499       53.6499       332.461       386.111    
  48  0.853326     -0.158614      -7.56648       7.56648       329.961       337.528    
  49  0.325639      -1.12197      -53.5221       53.5221       287.540       341.062    
  50  0.773280     -0.257115      -12.2653       12.2653       319.358       331.623    
  51  0.108890      -2.21741      -105.779       105.779       305.147       410.926    
  52  0.188532E-01  -3.97107      -189.435       189.435       322.677       512.112    
  53  0.970927     -0.295045E-01  -1.40748       1.40748       275.738       277.146    
  54  0.549714     -0.598357      -28.5439       28.5439       319.594       348.138    
  55  0.937888E-01  -2.36671      -112.901       112.901       353.465       466.366    
  56  0.293516      -1.22582      -58.4764       58.4764       282.708       341.184    
  57  0.598789     -0.512846      -24.4647       24.4647       344.821       369.285    
  58  0.173412      -1.75209      -83.5812       83.5812       333.837       417.418    
  59  0.552776     -0.592802      -28.2789       28.2789       325.716       353.995    
  60  0.586717     -0.533213      -25.4363       25.4363       269.425       294.862    
  61  0.902886     -0.102159      -4.87338       4.87338       287.140       292.013    
  62  0.423679     -0.858778      -40.9670       40.9670       320.091       361.058    
  63  0.796344E-01  -2.53031      -120.705       120.705       368.077       488.782    
  64  0.894023     -0.112024      -5.34396       5.34396       288.946       294.290    
  65  0.840662     -0.173566      -8.27975       8.27975       319.305       327.585    
  66  0.730459     -0.314083      -14.9829       14.9829       317.896       332.879    
  67  0.652850     -0.426409      -20.3413       20.3413       325.264       345.605    
  68  0.856696     -0.154672      -7.37845       7.37845       257.345       264.723    
  69  0.562214     -0.575873      -27.4713       27.4713       308.952       336.423    
  70  0.680885     -0.384362      -18.3355       18.3355       354.393       372.729    
  71  0.353093      -1.04102      -49.6607       49.6607       270.947       320.608    
  72  0.588480     -0.530213      -25.2932       25.2932       278.834       304.127    
  73  0.641636     -0.443734      -21.1678       21.1678       438.779       459.946    
  74  0.729310     -0.315656      -15.0580       15.0580       300.437       315.495    
  75  0.852439     -0.159654      -7.61609       7.61609       460.614       468.230    
  76  0.401089     -0.913572      -43.5809       43.5809       401.089       444.670    
  77  0.202876E-01  -3.89775      -185.937       185.937       421.746       607.683    
  78  0.162565      -1.81668      -86.6625       86.6625       318.025       404.688    
  79  0.945887     -0.556323E-01  -2.65387       2.65387       263.050       265.703    
loop,thermsimp(1:2)       94   8.18776       35.1756    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    230        441.92         87.34          1.11         40.29          0.70          0.05        129.49
Just calling func    0   0        129.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    441.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       94
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:       95
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      229     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -14.0650       14.0650       256.855       270.920    
   2  0.739179     -0.302215      -14.4168       14.4168       258.372       272.789    
   3  0.131167      -2.03128      -96.8997       96.8997       257.345       354.245    
   4  0.523356     -0.647493      -30.8879       30.8879       263.050       293.937    
   5  0.660412     -0.414891      -19.7919       19.7919       258.366       278.158    
   6  0.433074E-01  -3.13943      -149.763       149.763       255.057       404.820    
   7  0.480352     -0.733236      -34.9781       34.9781       256.377       291.356    
   8  0.808114     -0.213053      -10.1634       10.1634       259.407       269.570    
   9  0.723804     -0.323235      -15.4195       15.4195       263.894       279.313    
  10  0.322682      -1.13109      -53.9571       53.9571       275.738       329.696    
  11  0.898907     -0.106576      -5.08409       5.08409       255.802       260.886    
  12  0.359972      -1.02173      -48.7403       48.7403       277.887       326.628    
  13  0.879118     -0.128836      -6.14596       6.14596       270.037       276.183    
  14  0.963559     -0.371220E-01  -1.77086       1.77086       278.568       280.338    
  15  0.662848     -0.411210      -19.6163       19.6163       254.566       274.182    
  16  0.648402     -0.433244      -20.6674       20.6674       254.623       275.290    
  17  0.375343     -0.979916      -46.7457       46.7457       256.082       302.828    
  18  0.812441     -0.207712      -9.90866       9.90866       277.109       287.017    
  19  0.248177E-01  -3.69620      -176.323       176.323       287.140       463.463    
  20  0.653530     -0.425366      -20.2916       20.2916       288.946       309.237    
  21  0.712244     -0.339334      -16.1875       16.1875       269.425       285.613    
  22  0.358229      -1.02658      -48.9718       48.9718       284.201       333.173    
  23  0.325518      -1.12234      -53.5397       53.5397       269.284       322.824    
  24  0.770349     -0.260912      -12.4465       12.4465       268.193       280.639    
  25  0.633518E-01  -2.75905      -131.617       131.617       278.834       410.451    
  26  0.168796      -1.77907      -84.8681       84.8681       304.193       389.061    
  27  0.562007     -0.576241      -27.4889       27.4889       294.012       321.501    
  28  0.156316      -1.85588      -88.5324       88.5324       282.959       371.491    
  29  0.967732     -0.328002E-01  -1.56469       1.56469       300.437       302.001    
  30  0.538071     -0.619766      -29.5652       29.5652       258.332       287.897    
  31  0.967495     -0.330453E-01  -1.57639       1.57639       270.947       272.523    
  32  0.771619     -0.259265      -12.3679       12.3679       318.942       331.310    
  33  0.246044      -1.40225      -66.8924       66.8924       315.864       382.757    
  34  0.700731     -0.355631      -16.9650       16.9650       319.806       336.771    
  35  0.382714     -0.960468      -45.8179       45.8179       315.769       361.587    
  36  0.580395     -0.544047      -25.9531       25.9531       319.305       345.258    
  37  0.305131      -1.18701      -56.6250       56.6250       319.358       375.983    
  38  0.624250     -0.471204      -22.4782       22.4782       314.940       337.418    
  39  0.575432     -0.552634      -26.3627       26.3627       317.896       344.259    
  40  0.701335     -0.354770      -16.9239       16.9239       272.208       289.132    
  41  0.290211      -1.23715      -59.0165       59.0165       311.882       370.898    
  42  0.140976      -1.95916      -93.4594       93.4594       297.424       390.883    
  43  0.275714      -1.28839      -61.4612       61.4612       308.952       370.413    
  44  0.856479     -0.154925      -7.39052       7.39052       329.961       337.352    
  45  0.994286     -0.573084E-02 -0.273383      0.273383       287.540       287.813    
  46  0.913008     -0.910102E-01  -4.34153       4.34153       281.545       285.887    
  47  0.204063      -1.58933      -75.8170       75.8170       282.708       358.525    
  48  0.388833     -0.944605      -45.0612       45.0612       276.452       321.513    
  49  0.781619     -0.246387      -11.7536       11.7536       325.264       337.017    
  50  0.373421     -0.985049      -46.9906       46.9906       319.594       366.585    
  51  0.834918     -0.180422      -8.60680       8.60680       318.008       326.615    
  52  0.174969      -1.74315      -83.1547       83.1547       325.716       408.871    
  53  0.531353     -0.632329      -30.1645       30.1645       320.091       350.256    
  54  0.339530      -1.08019      -51.5293       51.5293       310.973       362.502    
  55  0.929760     -0.728288E-01  -3.47421       3.47421       313.152       316.626    
  56  0.223523      -1.49824      -71.4717       71.4717       344.821       416.292    
  57  0.557869     -0.583631      -27.8414       27.8414       354.393       382.235    
  58  0.521577     -0.650898      -31.0503       31.0503       256.750       287.800    
  59  0.856336     -0.155092      -7.39848       7.39848       332.461       339.860    
  60  0.645536     -0.437674      -20.8787       20.8787       318.025       338.904    
  61  0.438677     -0.823992      -39.3075       39.3075       283.393       322.701    
  62  0.346732      -1.05920      -50.5280       50.5280       305.147       355.675    
  63  0.902848     -0.102201      -4.87536       4.87536       333.837       338.713    
  64  0.578219     -0.547803      -26.1323       26.1323       277.562       303.694    
  65  0.602211     -0.507147      -24.1928       24.1928       262.089       286.281    
  66  0.432652     -0.837821      -39.9672       39.9672       256.835       296.803    
  67  0.123601      -2.09070      -99.7341       99.7341       318.025       417.759    
  68  0.840915     -0.173264      -8.26537       8.26537       282.662       290.927    
  69  0.638713     -0.448300      -21.3856       21.3856       401.089       422.475    
  70  0.127935      -2.05623      -98.0899       98.0899       264.318       362.408    
  71  0.555419     -0.588033      -28.0514       28.0514       284.323       312.375    
  72  0.860781     -0.149915      -7.15153       7.15153       438.779       445.930    
  73  0.170020      -1.77184      -84.5234       84.5234       353.465       437.988    
  74  0.355131      -1.03527      -49.3862       49.3862       460.614       510.000    
  75  0.464062E-01  -3.07032      -146.466       146.466       290.928       437.393    
  76  0.256771      -1.35957      -64.8567       64.8567       368.077       432.934    
  77  0.520091     -0.653751      -31.1864       31.1864       322.677       353.863    
  78  0.406842     -0.899330      -42.9014       42.9014       319.053       361.954    
  79  0.705039     -0.349503      -16.6726       16.6726       441.918       458.590    
loop,thermsimp(1:2)       95   14.0650       14.4168    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231        471.29         87.52          1.14         40.09          0.69          0.05        129.50
Just calling func    0   0        129.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    471.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:       95
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   42.7930    

hmean,hstd :    299.890       42.7930    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    299.890       42.7930    
h(1),h(best1),h(np1) :    255.802       254.566       471.288    
htherm(1),htherm(best1),htherm(np1) :    260.886       274.182       510.000    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so set iflag=0 and loop=0 and start the main cycle again 
  right before CYCLE MAIN_LOOP 



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:        1
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      230     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -185.550       185.550       255.802       441.352    
   2  0.977100     -0.231667E-01  -1.10514       1.10514       259.407       260.512    
   3  0.491467     -0.710361      -33.8869       33.8869       256.855       290.742    
   4  0.802113E-01  -2.52309      -120.361       120.361       270.947       391.308    
   5  0.891044     -0.115361      -5.50317       5.50317       258.372       263.875    
   6  0.397551     -0.922433      -44.0035       44.0035       254.566       298.569    
   7  0.121203      -2.11029      -100.669       100.669       254.623       355.292    
   8  0.789985E-01  -2.53833      -121.088       121.088       270.037       391.125    
   9  0.921855     -0.813679E-01  -3.88155       3.88155       258.366       262.248    
  10  0.252671      -1.37567      -65.6245       65.6245       263.894       329.518    
  11  0.787271     -0.239182      -11.4099       11.4099       278.568       289.977    
  12  0.634653     -0.454676      -21.6898       21.6898       268.193       289.883    
  13  0.706648     -0.347222      -16.5638       16.5638       269.425       285.989    
  14  0.349740E-01  -3.35315      -159.958       159.958       281.545       441.503    
  15  0.686787     -0.375731      -17.9238       17.9238       262.089       280.012    
  16  0.309348      -1.17329      -55.9703       55.9703       277.109       333.079    
  17  0.703748     -0.351336      -16.7600       16.7600       256.750       273.510    
  18  0.985092     -0.150207E-01 -0.716546      0.716546       287.540       288.257    
  19  0.440741     -0.819298      -39.0836       39.0836       258.332       297.416    
  20  0.796112     -0.228015      -10.8772       10.8772       272.208       283.085    
  21  0.451938     -0.794210      -37.8868       37.8868       282.662       320.548    
  22  0.230902      -1.46576      -69.9224       69.9224       256.377       326.300    
  23  0.760212     -0.274159      -13.0784       13.0784       263.050       276.128    
  24  0.250434E-02  -5.98973      -285.733       285.733       256.835       542.568    
  25  0.627913E-01  -2.76794      -132.041       132.041       300.437       432.478    
  26  0.263128      -1.33511      -63.6900       63.6900       256.082       319.772    
  27  0.177986      -1.72605      -82.3391       82.3391       277.562       359.901    
  28  0.919776     -0.836247E-01  -3.98921       3.98921       288.946       292.935    
  29  0.854272     -0.157506      -7.51363       7.51363       284.323       291.837    
  30  0.648187     -0.433576      -20.6832       20.6832       313.152       333.835    
  31  0.853797     -0.158061      -7.54013       7.54013       294.012       301.552    
  32  0.484551     -0.724533      -34.5630       34.5630       276.452       311.015    
  33  0.423817     -0.858454      -40.9515       40.9515       283.393       324.345    
  34  0.932015     -0.704065E-01  -3.35865       3.35865       269.284       272.643    
  35  0.161906      -1.82074      -86.8562       86.8562       318.008       404.865    
  36  0.812519     -0.207617      -9.90409       9.90409       277.887       287.792    
  37  0.346838      -1.05890      -50.5135       50.5135       275.738       326.252    
  38  0.477141     -0.739943      -35.2981       35.2981       318.942       354.240    
  39  0.931946     -0.704808E-01  -3.36220       3.36220       284.201       287.563    
  40  0.189794      -1.66182      -79.2749       79.2749       319.806       399.081    
  41  0.361902      -1.01638      -48.4853       48.4853       325.264       373.749    
  42  0.775630E-02  -4.85925      -231.805       231.805       329.961       561.766    
  43  0.292497      -1.22930      -58.6422       58.6422       314.940       373.582    
  44  0.264300      -1.33067      -63.4780       63.4780       333.837       397.315    
  45  0.529597     -0.635638      -30.3223       30.3223       318.025       348.348    
  46  0.163272      -1.81234      -86.4553       86.4553       332.461       418.917    
  47  0.212593      -1.54838      -73.8635       73.8635       317.896       391.759    
  48  0.359173      -1.02395      -48.8464       48.8464       319.305       368.151    
  49  0.993707     -0.631295E-02 -0.301152      0.301152       320.091       320.392    
  50  0.261479      -1.34140      -63.9899       63.9899       322.677       386.666    
  51  0.441392     -0.817822      -39.0132       39.0132       257.345       296.358    
  52  0.624656     -0.470554      -22.4472       22.4472       305.147       327.594    
  53  0.646784     -0.435743      -20.7866       20.7866       282.708       303.494    
  54  0.343734      -1.06789      -50.9423       50.9423       315.769       366.711    
  55  0.438651     -0.824052      -39.3104       39.3104       319.053       358.363    
  56  0.476250     -0.741811      -35.3872       35.3872       264.318       299.705    
  57  0.665451     -0.407291      -19.4293       19.4293       310.973       330.402    
  58  0.903561E-01  -2.40400      -114.680       114.680       319.594       434.274    
  59  0.899286     -0.106155      -5.06398       5.06398       308.952       314.016    
  60  0.822477     -0.195434      -9.32296       9.32296       311.882       321.205    
  61  0.824462E-01  -2.49561      -119.050       119.050       282.959       402.009    
  62  0.689460     -0.371846      -17.7385       17.7385       319.358       337.096    
  63  0.124471      -2.08368      -99.3995       99.3995       354.393       453.793    
  64  0.215598      -1.53434      -73.1937       73.1937       315.864       389.058    
  65  0.671537     -0.398187      -18.9950       18.9950       304.193       323.188    
  66  0.330886      -1.10598      -52.7595       52.7595       297.424       350.183    
  67  0.198204      -1.61846      -77.2067       77.2067       255.057       332.264    
  68  0.774065     -0.256099      -12.2169       12.2169       325.716       337.933    
  69  0.787755     -0.238568      -11.3806       11.3806       278.834       290.214    
  70  0.613901     -0.487921      -23.2757       23.2757       344.821       368.097    
  71  0.427667     -0.849410      -40.5201       40.5201       318.025       358.545    
  72  0.898090     -0.107485      -5.12744       5.12744       401.089       406.217    
  73  0.550021     -0.597800      -28.5173       28.5173       368.077       396.594    
  74  0.431420     -0.840672      -40.1033       40.1033       290.928       331.031    
  75  0.600871     -0.509376      -24.2992       24.2992       353.465       377.764    
  76  0.893639     -0.112454      -5.36447       5.36447       438.779       444.143    
  77  0.473595     -0.747402      -35.6539       35.6539       441.918       477.572    
  78  0.927066     -0.757302E-01  -3.61262       3.61262       287.140       290.753    
  79  0.236161      -1.44324      -68.8481       68.8481       471.288       540.136    
loop,thermsimp(1:2)        1   185.550       1.10514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232        275.33         87.52          1.11         40.35          0.65          0.05        129.68
Just calling func    0   0        129.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    275.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:        1
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:        2
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      231     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -71.0153       71.0153       259.407       330.422    
   2  0.726663     -0.319292      -15.2314       15.2314       258.366       273.598    
   3  0.929061     -0.735808E-01  -3.51008       3.51008       258.372       261.882    
   4  0.764703     -0.268268      -12.7974       12.7974       269.284       282.082    
   5  0.119617      -2.12346      -101.297       101.297       256.750       358.047    
   6  0.369672     -0.995138      -47.4718       47.4718       263.050       310.521    
   7  0.875806     -0.132611      -6.32604       6.32604       262.089       268.415    
   8  0.657886     -0.418723      -19.9747       19.9747       272.208       292.182    
   9  0.387095E-01  -3.25167      -155.117       155.117       269.425       424.542    
  10  0.454078     -0.789485      -37.6614       37.6614       284.201       321.863    
  11  0.890470     -0.116006      -5.53391       5.53391       277.887       283.421    
  12  0.118445      -2.13331      -101.767       101.767       287.540       389.307    
  13  0.190238      -1.65948      -79.1635       79.1635       268.193       347.356    
  14  0.435624     -0.830976      -39.6407       39.6407       278.568       318.208    
  15  0.768655     -0.263114      -12.5515       12.5515       278.834       291.385    
  16  0.870896E-01  -2.44082      -116.436       116.436       256.855       373.291    
  17  0.936453     -0.656556E-01  -3.13202       3.13202       287.140       290.272    
  18  0.159312      -1.83689      -87.6266       87.6266       284.323       371.950    
  19  0.988165     -0.119051E-01 -0.567919      0.567919       288.946       289.514    
  20  0.713347     -0.337787      -16.1137       16.1137       257.345       273.459    
  21  0.417075     -0.874489      -41.7165       41.7165       258.332       300.049    
  22  0.719048     -0.329827      -15.7340       15.7340       254.566       270.300    
  23  0.785519     -0.241411      -11.5162       11.5162       264.318       275.834    
  24  0.356994      -1.03004      -49.1366       49.1366       294.012       343.149    
  25  0.357951      -1.02736      -49.0090       49.0090       282.708       331.717    
  26  0.154816      -1.86552      -88.9923       88.9923       276.452       365.444    
  27  0.246912      -1.39872      -66.7243       66.7243       308.952       375.676    
  28  0.553458     -0.591570      -28.2201       28.2201       256.082       284.302    
  29  0.729602     -0.315256      -15.0389       15.0389       320.091       335.130    
  30  0.605470     -0.501750      -23.9354       23.9354       282.662       306.597    
  31  0.278987E-01  -3.57918      -170.740       170.740       311.882       482.622    
  32  0.187991      -1.67136      -79.7303       79.7303       304.193       383.923    
  33  0.543158     -0.610355      -29.1162       29.1162       283.393       312.509    
  34  0.996749     -0.325625E-02 -0.155335      0.155335       275.738       275.894    
  35  0.540727     -0.614841      -29.3302       29.3302       256.377       285.708    
  36  0.833271E-01  -2.48498      -118.543       118.543       305.147       423.690    
  37  0.404538     -0.905011      -43.1724       43.1724       263.894       307.066    
  38  0.147302      -1.91527      -91.3657       91.3657       310.973       402.339    
  39  0.364226E-01  -3.31257      -158.022       158.022       290.928       448.950    
  40  0.381304     -0.964158      -45.9940       45.9940       255.057       301.051    
  41  0.737758     -0.304140      -14.5086       14.5086       277.109       291.617    
  42  0.179374      -1.71828      -81.9685       81.9685       313.152       395.121    
  43  0.281757      -1.26671      -60.4269       60.4269       319.358       379.785    
  44  0.192633      -1.64697      -78.5666       78.5666       325.716       404.282    
  45  0.954983     -0.460617E-01  -2.19732       2.19732       318.025       320.222    
  46  0.710258     -0.342127      -16.3208       16.3208       297.424       313.744    
  47  0.831769     -0.184201      -8.78708       8.78708       318.942       327.729    
  48  0.912541     -0.915218E-01  -4.36594       4.36594       254.623       258.989    
  49  0.221543      -1.50714      -71.8963       71.8963       319.053       390.949    
  50  0.690803E-02  -4.97507      -237.330       237.330       318.025       555.355    
  51  0.162616      -1.81637      -86.6475       86.6475       277.562       364.210    
  52  0.869433     -0.139913      -6.67440       6.67440       315.769       322.444    
  53  0.541563     -0.613295      -29.2565       29.2565       344.821       374.077    
  54  0.310811      -1.16857      -55.7453       55.7453       319.305       375.050    
  55  0.879573     -0.128319      -6.12131       6.12131       314.940       321.061    
  56  0.262339      -1.33812      -63.8332       63.8332       325.264       389.097    
  57  0.651476     -0.428515      -20.4418       20.4418       353.465       373.907    
  58  0.498193     -0.696767      -33.2384       33.2384       322.677       355.915    
  59  0.251241      -1.38134      -65.8953       65.8953       315.864       381.760    
  60  0.704518     -0.350242      -16.7079       16.7079       270.037       286.745    
  61  0.387431     -0.948219      -45.2336       45.2336       270.947       316.181    
  62  0.447312     -0.804500      -38.3777       38.3777       317.896       356.273    
  63  0.842599     -0.171264      -8.16992       8.16992       368.077       376.247    
  64  0.754683     -0.281457      -13.4266       13.4266       333.837       347.264    
  65  0.160341      -1.83045      -87.3194       87.3194       319.806       407.126    
  66  0.388561     -0.945304      -45.0946       45.0946       282.959       328.054    
  67  0.504240     -0.684704      -32.6629       32.6629       318.008       350.671    
  68  0.340326      -1.07785      -51.4176       51.4176       401.089       452.507    
  69  0.995948     -0.406008E-02 -0.193681      0.193681       332.461       332.655    
  70  0.822310     -0.195638      -9.33265       9.33265       300.437       309.769    
  71  0.584501     -0.536996      -25.6168       25.6168       319.594       345.211    
  72  0.953467     -0.476500E-01  -2.27309       2.27309       255.802       258.075    
  73  0.576559     -0.550677      -26.2694       26.2694       281.545       307.814    
  74  0.214918      -1.53750      -73.3445       73.3445       438.779       512.123    
  75  0.764849     -0.268076      -12.7883       12.7883       354.393       367.182    
  76  0.509675     -0.673982      -32.1515       32.1515       441.918       474.069    
  77  0.406559     -0.900026      -42.9346       42.9346       471.288       514.222    
  78  0.639508     -0.447056      -21.3263       21.3263       256.835       278.162    
  79  0.591905     -0.524409      -25.0163       25.0163       275.330       300.346    
loop,thermsimp(1:2)        2   71.0153       15.2314    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233        270.16         87.42          1.11         40.18          0.75          0.05        129.51
Just calling func    0   0        129.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234        306.56         87.60          1.14         40.07          0.59          0.05        129.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    270.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:        2
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:        3
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      233     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -41.8932       41.8932       255.802       297.695    
   2  0.117190E-02  -6.74913      -321.959       321.959       254.623       576.582    
   3  0.432199     -0.838870      -40.0172       40.0172       258.372       298.389    
   4  0.466381     -0.762753      -36.3862       36.3862       262.089       298.475    
   5  0.696685     -0.361422      -17.2412       17.2412       254.566       271.807    
   6  0.193714      -1.64137      -78.2996       78.2996       257.345       335.644    
   7  0.535145     -0.625217      -29.8252       29.8252       258.366       288.192    
   8  0.812984     -0.207044      -9.87680       9.87680       264.318       274.195    
   9  0.956789     -0.441723E-01  -2.10719       2.10719       275.738       277.846    
  10  0.496711E-01  -3.00233      -143.223       143.223       256.835       400.058    
  11  0.206308E-01  -3.88097      -185.137       185.137       269.284       454.421    
  12  0.423434     -0.859358      -40.9946       40.9946       277.887       318.882    
  13  0.216826      -1.52866      -72.9229       72.9229       256.082       329.005    
  14  0.792422     -0.232661      -11.0988       11.0988       256.377       267.476    
  15  0.265940      -1.32449      -63.1830       63.1830       270.037       333.220    
  16  0.993400     -0.662201E-02 -0.315895      0.315895       288.946       289.262    
  17  0.645200E-01  -2.74078      -130.746       130.746       287.140       417.886    
  18  0.651527     -0.428436      -20.4380       20.4380       278.834       299.272    
  19  0.858875     -0.152131      -7.25724       7.25724       277.109       284.366    
  20  0.126056      -2.07103      -98.7957       98.7957       272.208       371.003    
  21  0.772661E-01  -2.56050      -122.146       122.146       258.332       380.478    
  22  0.441429     -0.817737      -39.0091       39.0091       275.330       314.339    
  23  0.166586      -1.79224      -85.4966       85.4966       255.057       340.554    
  24  0.217490      -1.52560      -72.7771       72.7771       282.662       355.439    
  25  0.632871     -0.457488      -21.8239       21.8239       263.894       285.718    
  26  0.201694      -1.60100      -76.3740       76.3740       281.545       357.919    
  27  0.282690      -1.26341      -60.2692       60.2692       300.437       360.706    
  28  0.255086E-01  -3.66874      -175.013       175.013       263.050       438.062    
  29  0.562308     -0.575706      -27.4633       27.4633       283.393       310.856    
  30  0.283366E-01  -3.56360      -169.997       169.997       297.424       467.421    
  31  0.404254E-01  -3.20830      -153.048       153.048       270.947       423.995    
  32  0.170475      -1.76917      -84.3960       84.3960       278.568       362.964    
  33  0.141712      -1.95396      -93.2111       93.2111       318.025       411.236    
  34  0.773173     -0.257253      -12.2719       12.2719       314.940       327.212    
  35  0.255978      -1.36266      -65.0042       65.0042       284.201       349.205    
  36  0.823739     -0.193902      -9.24984       9.24984       315.769       325.019    
  37  0.166307      -1.79392      -85.5767       85.5767       318.942       404.519    
  38  0.676319     -0.391090      -18.6565       18.6565       282.959       301.615    
  39  0.144546      -1.93416      -92.2666       92.2666       259.407       351.673    
  40  0.593436     -0.521826      -24.8931       24.8931       282.708       307.601    
  41  0.762921     -0.270600      -12.9087       12.9087       332.461       345.370    
  42  0.855796     -0.155724      -7.42860       7.42860       320.091       327.520    
  43  0.433555     -0.835737      -39.8678       39.8678       294.012       333.880    
  44  0.252891      -1.37480      -65.5829       65.5829       319.594       385.177    
  45  0.942909     -0.587850E-01  -2.80427       2.80427       333.837       336.641    
  46  0.432313     -0.838605      -40.0046       40.0046       268.193       308.198    
  47  0.975713     -0.245869E-01  -1.17289       1.17289       318.008       319.181    
  48  0.541226     -0.613919      -29.2863       29.2863       322.677       351.963    
  49  0.255057      -1.36627      -65.1762       65.1762       317.896       383.072    
  50  0.202141      -1.59879      -76.2682       76.2682       256.750       333.018    
  51  0.949562     -0.517549E-01  -2.46890       2.46890       277.562       280.031    
  52  0.255660E-01  -3.66649      -174.906       174.906       276.452       451.358    
  53  0.306802      -1.18155      -56.3645       56.3645       354.393       410.758    
  54  0.243277E-01  -3.71614      -177.274       177.274       284.323       461.597    
  55  0.466793     -0.761870      -36.3441       36.3441       256.855       293.199    
  56  0.200407      -1.60740      -76.6792       76.6792       353.465       430.144    
  57  0.282970      -1.26241      -60.2219       60.2219       344.821       405.043    
  58  0.214232      -1.54069      -73.4970       73.4970       319.305       392.802    
  59  0.326606      -1.11900      -53.3806       53.3806       308.952       362.333    
  60  0.997507     -0.249621E-02 -0.119079      0.119079       368.077       368.196    
  61  0.426725     -0.851615      -40.6253       40.6253       319.358       359.983    
  62  0.862854     -0.147510      -7.03680       7.03680       315.864       322.901    
  63  0.737079     -0.305061      -14.5525       14.5525       304.193       318.745    
  64  0.976691     -0.235846E-01  -1.12507       1.12507       325.264       326.389    
  65  0.191821      -1.65119      -78.7680       78.7680       287.540       366.308    
  66  0.743386     -0.296540      -14.1461       14.1461       319.053       333.199    
  67  0.683162     -0.381024      -18.1763       18.1763       313.152       331.328    
  68  0.789040     -0.236939      -11.3029       11.3029       310.973       322.276    
  69  0.908546     -0.959094E-01  -4.57524       4.57524       325.716       330.291    
  70  0.562283     -0.575750      -27.4654       27.4654       319.806       347.272    
  71  0.151982E-01  -4.18658      -199.716       199.716       305.147       504.862    
  72  0.478777     -0.736520      -35.1348       35.1348       269.425       304.560    
  73  0.226919E-01  -3.78575      -180.595       180.595       290.928       471.522    
  74  0.489970     -0.713411      -34.0324       34.0324       401.089       435.122    
  75  0.797004E-01  -2.52948      -120.666       120.666       441.918       562.584    
  76  0.282540      -1.26394      -60.2945       60.2945       311.882       372.176    
  77  0.817192     -0.201881      -9.63050       9.63050       438.779       448.409    
  78  0.453084     -0.791678      -37.7660       37.7660       471.288       509.054    
  79  0.788730     -0.237331      -11.3216       11.3216       270.158       281.480    
loop,thermsimp(1:2)        3   41.8932       321.959    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235        306.74         87.44          1.11         40.12          1.04          0.05        129.76
Just calling func    0   0        129.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    306.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:        3
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:        4
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      234     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -20.0661       20.0661       256.377       276.443    
   2  0.880966     -0.126736      -6.04578       6.04578       254.566       260.612    
   3  0.854972     -0.156687      -7.47456       7.47456       264.318       271.793    
   4  0.797101     -0.226774      -10.8180       10.8180       275.738       286.556    
   5  0.158477      -1.84214      -87.8773       87.8773       277.562       365.439    
   6  0.593839     -0.521148      -24.8607       24.8607       270.158       295.019    
   7  0.817101     -0.201993      -9.63582       9.63582       277.109       286.745    
   8  0.997190     -0.281377E-02 -0.134227      0.134227       263.894       264.028    
   9  0.402857     -0.909174      -43.3711       43.3711       258.366       301.737    
  10  0.690455     -0.370405      -17.6697       17.6697       288.946       306.615    
  11  0.609635     -0.494895      -23.6084       23.6084       256.855       280.464    
  12  0.491117     -0.711073      -33.9209       33.9209       255.802       289.723    
  13  0.990676     -0.936814E-02 -0.446895      0.446895       258.372       258.819    
  14  0.976919     -0.233519E-01  -1.11397       1.11397       262.089       263.203    
  15  0.692556     -0.367366      -17.5248       17.5248       278.834       296.358    
  16  0.549694     -0.598394      -28.5457       28.5457       282.959       311.505    
  17  0.538267E-01  -2.92199      -139.390       139.390       269.425       408.815    
  18  0.602193     -0.507178      -24.1943       24.1943       282.708       306.902    
  19  0.537276     -0.621243      -29.6356       29.6356       268.193       297.829    
  20  0.338220      -1.08406      -51.7136       51.7136       283.393       335.107    
  21  0.306772      -1.18165      -56.3692       56.3692       275.330       331.699    
  22  0.895389     -0.110497      -5.27114       5.27114       304.193       309.464    
  23  0.120096      -2.11946      -101.106       101.106       277.887       378.994    
  24  0.680166     -0.385418      -18.3859       18.3859       318.008       336.394    
  25  0.369434     -0.995782      -47.5026       47.5026       310.973       358.476    
  26  0.235484      -1.44611      -68.9850       68.9850       315.864       384.849    
  27  0.260836      -1.34386      -64.1073       64.1073       315.769       379.877    
  28  0.720259     -0.328144      -15.6537       15.6537       325.264       340.917    
  29  0.695069     -0.363744      -17.3520       17.3520       314.940       332.292    
  30  0.105076      -2.25307      -107.480       107.480       320.091       427.571    
  31  0.968349     -0.321628E-01  -1.53429       1.53429       256.082       257.617    
  32  0.974131     -0.262091E-01  -1.25027       1.25027       325.716       326.966    
  33  0.647785E-01  -2.73678      -130.555       130.555       313.152       443.707    
  34  0.910402     -0.938690E-01  -4.47790       4.47790       256.750       261.228    
  35  0.488733     -0.715939      -34.1530       34.1530       319.053       353.206    
  36  0.377436E-01  -3.27694      -156.322       156.322       270.037       426.359    
  37  0.154608      -1.86686      -89.0564       89.0564       294.012       383.068    
  38  0.277804      -1.28084      -61.1008       61.1008       257.345       318.446    
  39  0.969547     -0.309263E-01  -1.47530       1.47530       333.837       335.312    
  40  0.380083     -0.967367      -46.1470       46.1470       255.057       301.204    
  41  0.751822     -0.285256      -13.6078       13.6078       332.461       346.069    
  42  0.137692      -1.98274      -94.5841       94.5841       319.806       414.390    
  43  0.293470      -1.22598      -58.4839       58.4839       284.201       342.685    
  44  0.433705     -0.835390      -39.8512       39.8512       259.407       299.258    
  45  0.418034     -0.872194      -41.6069       41.6069       322.677       364.283    
  46  0.166728      -1.79139      -85.4563       85.4563       282.662       368.118    
  47  0.921960     -0.812537E-01  -3.87611       3.87611       281.545       285.421    
  48  0.412601     -0.885275      -42.2309       42.2309       319.358       361.589    
  49  0.925181     -0.777655E-01  -3.70971       3.70971       300.437       304.146    
  50  0.687711     -0.374386      -17.8596       17.8596       308.952       326.812    
  51  0.729890     -0.314862      -15.0201       15.0201       278.568       293.588    
  52  0.355028      -1.03556      -49.4001       49.4001       287.540       336.940    
  53  0.123338      -2.09283      -99.8359       99.8359       368.077       467.913    
  54  0.638370E-01  -2.75142      -131.253       131.253       272.208       403.461    
  55  0.379414     -0.969128      -46.2311       46.2311       311.882       358.113    
  56  0.643705     -0.440515      -21.0142       21.0142       258.332       279.346    
  57  0.172292      -1.75856      -83.8901       83.8901       317.896       401.786    
  58  0.996763     -0.324212E-02 -0.154661      0.154661       319.594       319.749    
  59  0.606366     -0.500272      -23.8649       23.8649       319.305       343.170    
  60  0.299698      -1.20498      -57.4821       57.4821       256.835       314.318    
  61  0.723907E-02  -4.92826      -235.097       235.097       318.942       554.039    
  62  0.197118      -1.62395      -77.4686       77.4686       344.821       422.289    
  63  0.316130      -1.15160      -54.9358       54.9358       354.393       409.329    
  64  0.115913      -2.15492      -102.798       102.798       318.025       420.823    
  65  0.661756     -0.412859      -19.6949       19.6949       287.140       306.835    
  66  0.838437     -0.176215      -8.40613       8.40613       270.947       279.353    
  67  0.929092     -0.735473E-01  -3.50848       3.50848       353.465       356.973    
  68  0.167251      -1.78826      -85.3068       85.3068       401.089       486.396    
  69  0.174207      -1.74751      -83.3629       83.3629       263.050       346.412    
  70  0.506799     -0.679641      -32.4214       32.4214       438.779       471.200    
  71  0.209504      -1.56301      -74.5615       74.5615       276.452       351.014    
  72  0.709189E-01  -2.64622      -126.235       126.235       269.284       395.519    
  73  0.995856     -0.415281E-02 -0.198105      0.198105       284.323       284.522    
  74  0.699869     -0.356862      -17.0236       17.0236       297.424       314.447    
  75  0.557535     -0.584229      -27.8699       27.8699       290.928       318.798    
  76  0.324546E-02  -5.73050      -273.366       273.366       305.147       578.513    
  77  0.279074      -1.27628      -60.8833       60.8833       471.288       532.171    
  78  0.401929     -0.911480      -43.4811       43.4811       441.918       485.399    
  79  0.292807      -1.22824      -58.5917       58.5917       306.736       365.328    
loop,thermsimp(1:2)        4   20.0661       6.04578    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236        262.25         87.46          1.12         40.11          0.67          0.05        129.41
Just calling func    0   0        129.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237        258.06         87.45          1.11         40.07          0.82          0.04        129.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    258.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    47.7038               235
loop is:        4
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    47.7038               235
loop is:        5
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    23.8519               313

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      236     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -11.0118       11.0118       256.082       267.094    
   2  0.876370     -0.131967      -3.14766       3.14766       258.372       261.520    
   3  0.840080     -0.174259      -4.15640       4.15640       254.566       258.722    
   4  0.608986E-01  -2.79854      -66.7506       66.7506       256.750       323.501    
   5  0.311901      -1.16507      -27.7891       27.7891       262.089       289.878    
   6  0.937552E-01  -2.36707      -56.4590       56.4590       263.894       320.353    
   7  0.608418     -0.496893      -11.8518       11.8518       264.318       276.170    
   8  0.297707      -1.21164      -28.9000       28.9000       256.377       285.277    
   9  0.365777      -1.00573      -23.9886       23.9886       258.332       282.321    
  10  0.194673      -1.63643      -39.0320       39.0320       270.947       309.979    
  11  0.941388     -0.604003E-01  -1.44066       1.44066       256.855       258.296    
  12  0.984881     -0.152343E-01 -0.363367      0.363367       284.323       284.687    
  13  0.750245     -0.287355      -6.85396       6.85396       281.545       288.399    
  14  0.437446     -0.826803      -19.7208       19.7208       275.738       295.459    
  15  0.174754      -1.74437      -41.6066       41.6066       277.109       318.715    
  16  0.300465E-01  -3.50501      -83.6010       83.6010       255.802       339.403    
  17  0.372924     -0.986380      -23.5270       23.5270       278.568       302.095    
  18  0.803506     -0.218771      -5.21810       5.21810       270.158       275.376    
  19  0.232583      -1.45851      -34.7882       34.7882       278.834       313.622    
  20  0.383368     -0.958759      -22.8682       22.8682       268.193       291.061    
  21  0.622786     -0.473552      -11.2951       11.2951       259.407       270.702    
  22  0.356422      -1.03164      -24.6066       24.6066       255.057       279.664    
  23  0.919964     -0.834212E-01  -1.98975       1.98975       258.366       260.356    
  24  0.550740     -0.596492      -14.2275       14.2275       300.437       314.664    
  25  0.402627     -0.909745      -21.6991       21.6991       288.946       310.645    
  26  0.256265      -1.36154      -32.4754       32.4754       287.140       319.615    
  27  0.763510     -0.269828      -6.43592       6.43592       282.708       289.144    
  28  0.388963     -0.944271      -22.5227       22.5227       304.193       326.715    
  29  0.981923     -0.182423E-01 -0.435113      0.435113       282.959       283.394    
  30  0.656629     -0.420635      -10.0329       10.0329       256.835       266.868    
  31  0.932472     -0.699161E-01  -1.66763       1.66763       297.424       299.091    
  32  0.336775      -1.08834      -25.9590       25.9590       257.345       283.304    
  33  0.810758     -0.209786      -5.00379       5.00379       290.928       295.931    
  34  0.557014     -0.585166      -13.9573       13.9573       319.594       333.551    
  35  0.652747     -0.426565      -10.1744       10.1744       308.952       319.126    
  36  0.890774     -0.115665      -2.75882       2.75882       325.716       328.475    
  37  0.703035     -0.352349      -8.40419       8.40419       275.330       283.734    
  38  0.534296     -0.626805      -14.9505       14.9505       314.940       329.891    
  39  0.604162     -0.503914      -12.0193       12.0193       283.393       295.412    
  40  0.545557     -0.605948      -14.4530       14.4530       333.837       348.290    
  41  0.371346     -0.990620      -23.6282       23.6282       318.008       341.637    
  42  0.491801     -0.709680      -16.9272       16.9272       287.540       304.467    
  43  0.879731     -0.128139      -3.05636       3.05636       325.264       328.320    
  44  0.995113     -0.489866E-02 -0.116842      0.116842       284.201       284.318    
  45  0.467927     -0.759444      -18.1142       18.1142       319.305       337.419    
  46  0.355083      -1.03540      -24.6963       24.6963       332.461       357.158    
  47  0.216960      -1.52804      -36.4467       36.4467       263.050       299.496    
  48  0.276988      -1.28378      -30.6206       30.6206       276.452       307.073    
  49  0.905458     -0.993144E-01  -2.36884       2.36884       319.053       321.422    
  50  0.704241     -0.350635      -8.36330       8.36330       353.465       361.828    
  51  0.784564     -0.242627      -5.78712       5.78712       311.882       317.669    
  52  0.329376      -1.11055      -26.4888       26.4888       310.973       337.462    
  53  0.845894     -0.167361      -3.99187       3.99187       319.358       323.350    
  54  0.645172     -0.438238      -10.4528       10.4528       322.677       333.129    
  55  0.279949      -1.27315      -30.3669       30.3669       306.736       337.103    
  56  0.149089      -1.90321      -45.3952       45.3952       277.562       322.957    
  57  0.887681     -0.119143      -2.84178       2.84178       282.662       285.503    
  58  0.582426     -0.540553      -12.8932       12.8932       277.887       290.781    
  59  0.221293      -1.50827      -35.9750       35.9750       315.769       351.744    
  60  0.839449     -0.175010      -4.17432       4.17432       294.012       298.186    
  61  0.383721     -0.957840      -22.8463       22.8463       315.864       338.711    
  62  0.933136     -0.692040E-01  -1.65065       1.65065       269.284       270.935    
  63  0.148663      -1.90607      -45.4635       45.4635       317.896       363.359    
  64  0.788780     -0.237267      -5.65927       5.65927       272.208       277.867    
  65  0.948785     -0.525734E-01  -1.25398       1.25398       269.425       270.679    
  66  0.246696      -1.39960      -33.3831       33.3831       354.393       387.776    
  67  0.297902      -1.21099      -28.8844       28.8844       319.806       348.691    
  68  0.402979     -0.908870      -21.6783       21.6783       318.025       339.703    
  69  0.946008     -0.555038E-01  -1.32387       1.32387       344.821       346.145    
  70  0.182802      -1.69935      -40.5328       40.5328       270.037       310.570    
  71  0.245157      -1.40586      -33.5324       33.5324       320.091       353.623    
  72  0.205669      -1.58149      -37.7214       37.7214       313.152       350.874    
  73  0.242147      -1.41821      -33.8270       33.8270       368.077       401.904    
  74  0.883444E-01  -2.42651      -57.8769       57.8769       438.779       496.655    
  75  0.657595E-02  -5.02434      -119.840       119.840       441.918       561.758    
  76  0.595995     -0.517522      -12.3439       12.3439       401.089       413.433    
  77  0.200470      -1.60709      -38.3321       38.3321       471.288       509.620    
  78  0.970453E-01  -2.33258      -55.6364       55.6364       318.942       374.578    
  79  0.858764     -0.152261      -3.63171       3.63171       258.056       261.687    
loop,thermsimp(1:2)        5   11.0118       3.14766    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238        388.89         87.50          1.12         40.15          0.95          0.05        129.78
Just calling func    0   0        129.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    388.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:        5
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:        6
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      237     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -36.5551       36.5551       256.855       293.410    
   2  0.942431     -0.592928E-01  -1.41425       1.41425       254.566       255.980    
   3  0.193824      -1.64081      -39.1363       39.1363       258.366       297.503    
   4  0.162512      -1.81700      -43.3390       43.3390       258.372       301.711    
   5  0.625243     -0.469616      -11.2012       11.2012       258.056       269.257    
   6  0.499178     -0.694793      -16.5721       16.5721       256.835       273.408    
   7  0.706095     -0.348006      -8.30060       8.30060       256.082       264.383    
   8  0.527414     -0.639770      -15.2597       15.2597       269.425       284.685    
   9  0.575748     -0.552085      -13.1683       13.1683       259.407       272.575    
  10  0.490522     -0.712286      -16.9894       16.9894       269.284       286.274    
  11  0.306517      -1.18248      -28.2045       28.2045       270.158       298.363    
  12  0.798470     -0.225057      -5.36804       5.36804       264.318       269.686    
  13  0.333550      -1.09796      -26.1885       26.1885       272.208       298.396    
  14  0.166731      -1.79138      -42.7277       42.7277       255.057       297.785    
  15  0.443580     -0.812878      -19.3887       19.3887       258.332       277.721    
  16  0.669985     -0.400500      -9.55269       9.55269       257.345       266.898    
  17  0.339921      -1.07904      -25.7372       25.7372       282.959       308.696    
  18  0.201260      -1.60316      -38.2384       38.2384       275.330       313.568    
  19  0.772250     -0.258447      -6.16444       6.16444       284.201       290.366    
  20  0.401372E-01  -3.21545      -76.6946       76.6946       284.323       361.018    
  21  0.940962     -0.608526E-01  -1.45145       1.45145       256.377       257.829    
  22  0.115324      -2.16001      -51.5204       51.5204       282.662       334.182    
  23  0.939991E-01  -2.36447      -56.3971       56.3971       281.545       337.942    
  24  0.412221     -0.886196      -21.1374       21.1374       282.708       303.845    
  25  0.136462      -1.99171      -47.5061       47.5061       262.089       309.595    
  26  0.310095      -1.17088      -27.9276       27.9276       277.887       305.815    
  27  0.985727     -0.143755E-01 -0.342882      0.342882       268.193       268.536    
  28  0.900161     -0.105182      -2.50878       2.50878       283.393       285.902    
  29  0.250220      -1.38542      -33.0448       33.0448       275.738       308.783    
  30  0.780405     -0.247942      -5.91389       5.91389       290.928       296.841    
  31  0.228719      -1.47526      -35.1877       35.1877       294.012       329.200    
  32  0.407088     -0.898727      -21.4363       21.4363       297.424       318.860    
  33  0.975627     -0.246749E-01 -0.588544      0.588544       263.050       263.638    
  34  0.885140     -0.122009      -2.91016       2.91016       278.568       281.478    
  35  0.896135     -0.109664      -2.61570       2.61570       287.540       290.156    
  36  0.856661     -0.154713      -3.69020       3.69020       276.452       280.142    
  37  0.258643      -1.35231      -32.2551       32.2551       270.947       303.202    
  38  0.336283      -1.08980      -25.9938       25.9938       270.037       296.031    
  39  0.868205     -0.141327      -3.37091       3.37091       288.946       292.317    
  40  0.937935     -0.640747E-01  -1.52830       1.52830       278.834       280.362    
  41  0.418906     -0.870109      -20.7537       20.7537       300.437       321.191    
  42  0.351040      -1.04685      -24.9694       24.9694       311.882       336.851    
  43  0.611628E-01  -2.79422      -66.6473       66.6473       277.109       343.756    
  44  0.153518      -1.87394      -44.6970       44.6970       308.952       353.649    
  45  0.938341     -0.636423E-01  -1.51799       1.51799       287.140       288.658    
  46  0.598133     -0.513942      -12.2585       12.2585       263.894       276.152    
  47  0.795771     -0.228444      -5.44883       5.44883       319.053       324.502    
  48  0.295375      -1.21951      -29.0876       29.0876       277.562       306.650    
  49  0.804738     -0.217239      -5.18156       5.18156       319.358       324.540    
  50  0.260094      -1.34671      -32.1217       32.1217       256.750       288.872    
  51  0.640517     -0.445479      -10.6255       10.6255       304.193       314.818    
  52  0.221872      -1.50566      -35.9127       35.9127       325.264       361.176    
  53  0.837141     -0.177762      -4.23997       4.23997       325.716       329.956    
  54  0.212745      -1.54766      -36.9146       36.9146       314.940       351.855    
  55  0.162033      -1.81996      -43.4094       43.4094       322.677       366.086    
  56  0.631631     -0.459450      -10.9588       10.9588       319.594       330.553    
  57  0.816014E-01  -2.50591      -59.7706       59.7706       306.736       366.507    
  58  0.754954     -0.281099      -6.70474       6.70474       319.305       326.010    
  59  0.568761E-01  -2.86688      -68.3805       68.3805       310.973       379.354    
  60  0.610521     -0.493442      -11.7695       11.7695       315.864       327.634    
  61  0.691718     -0.368577      -8.79125       8.79125       255.802       264.593    
  62  0.330677      -1.10661      -26.3948       26.3948       318.025       344.420    
  63  0.669260     -0.401583      -9.57851       9.57851       318.008       327.587    
  64  0.677208     -0.389776      -9.29690       9.29690       344.821       354.118    
  65  0.440183     -0.820565      -19.5720       19.5720       333.837       353.409    
  66  0.258089      -1.35445      -32.3062       32.3062       319.806       352.112    
  67  0.109764      -2.20942      -52.6988       52.6988       313.152       365.851    
  68  0.440932     -0.818865      -19.5315       19.5315       315.769       335.301    
  69  0.361307      -1.01803      -24.2819       24.2819       320.091       344.373    
  70  0.304201      -1.19007      -28.3853       28.3853       332.461       360.847    
  71  0.279324      -1.27538      -30.4203       30.4203       353.465       383.885    
  72  0.833329     -0.182326      -4.34882       4.34882       317.896       322.245    
  73  0.703144     -0.352194      -8.40049       8.40049       318.942       327.342    
  74  0.890049     -0.116479      -2.77825       2.77825       354.393       357.172    
  75  0.345512      -1.06273      -25.3481       25.3481       368.077       393.425    
  76  0.928077     -0.746405E-01  -1.78032       1.78032       401.089       402.870    
  77  0.664934     -0.408068      -9.73318       9.73318       438.779       448.512    
  78  0.637934     -0.449520      -10.7219       10.7219       471.288       482.010    
  79  0.631026     -0.460408      -10.9816       10.9816       388.893       399.875    
loop,thermsimp(1:2)        6   36.5551       1.41425    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239        457.36         87.50          1.12         40.16          0.68          0.05        129.52
Just calling func    0   0        129.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    457.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:        6
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:        7
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      238     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -31.7467       31.7467       254.566       286.313    
   2  0.401807     -0.911784      -21.7478       21.7478       256.377       278.125    
   3  0.418885     -0.870159      -20.7549       20.7549       263.050       283.804    
   4  0.753378     -0.283189      -6.75459       6.75459       256.082       262.837    
   5  0.792066     -0.233111      -5.56014       5.56014       255.802       261.362    
   6  0.868474     -0.141017      -3.36352       3.36352       257.345       260.708    
   7  0.318670      -1.14360      -27.2770       27.2770       268.193       295.470    
   8  0.863267     -0.147031      -3.50696       3.50696       258.056       261.563    
   9  0.589255     -0.528896      -12.6152       12.6152       264.318       276.933    
  10  0.632079E-01  -2.76133      -65.8628       65.8628       259.407       325.270    
  11  0.992270     -0.775975E-02 -0.185085      0.185085       256.835       257.021    
  12  0.466140     -0.763269      -18.2054       18.2054       263.894       282.099    
  13  0.177509      -1.72873      -41.2335       41.2335       258.332       299.566    
  14  0.933326     -0.690005E-01  -1.64579       1.64579       276.452       278.098    
  15  0.876357     -0.131982      -3.14801       3.14801       278.834       281.982    
  16  0.673496     -0.395274      -9.42803       9.42803       278.568       287.996    
  17  0.648708     -0.432773      -10.3224       10.3224       269.425       279.748    
  18  0.400813     -0.914259      -21.8068       21.8068       283.393       305.200    
  19  0.763164     -0.270282      -6.44674       6.44674       269.284       275.731    
  20  0.196240      -1.62842      -38.8408       38.8408       287.140       325.981    
  21  0.923666     -0.794046E-01  -1.89395       1.89395       256.750       258.644    
  22  0.999600     -0.400298E-03 -0.954785E-02  0.954785E-02   287.540       287.550    
  23  0.379715     -0.968335      -23.0966       23.0966       284.201       307.298    
  24  0.197375      -1.62265      -38.7032       38.7032       288.946       327.649    
  25  0.760736     -0.273468      -6.52274       6.52274       256.855       263.378    
  26  0.392182     -0.936030      -22.3261       22.3261       270.037       292.363    
  27  0.256208      -1.36177      -32.4807       32.4807       290.928       323.408    
  28  0.251796      -1.37914      -32.8950       32.8950       258.366       291.261    
  29  0.332089E-01  -3.40494      -81.2142       81.2142       255.057       336.271    
  30  0.970457     -0.299883E-01 -0.715278      0.715278       270.158       270.874    
  31  0.467370E-01  -3.06322      -73.0635       73.0635       272.208       345.271    
  32  0.716125     -0.333901      -7.96416       7.96416       258.372       266.336    
  33  0.757897     -0.277208      -6.61193       6.61193       270.947       277.559    
  34  0.765628     -0.267059      -6.36986       6.36986       282.708       289.078    
  35  0.323816      -1.12758      -26.8949       26.8949       277.887       304.782    
  36  0.909845     -0.944807E-01  -2.25354       2.25354       277.562       279.816    
  37  0.515782     -0.662071      -15.7916       15.7916       282.959       298.751    
  38  0.464370     -0.767074      -18.2962       18.2962       275.738       294.035    
  39  0.445707     -0.808094      -19.2746       19.2746       262.089       281.363    
  40  0.786320     -0.240391      -5.73379       5.73379       275.330       281.063    
  41  0.631860     -0.459087      -10.9501       10.9501       304.193       315.143    
  42  0.672488     -0.396772      -9.46375       9.46375       297.424       306.887    
  43  0.251717E-02  -5.98462      -142.744       142.744       300.437       443.181    
  44  0.245023      -1.40640      -33.5454       33.5454       317.896       351.441    
  45  0.252688      -1.37560      -32.8106       32.8106       319.053       351.864    
  46  0.268946      -1.31324      -31.3233       31.3233       319.358       350.681    
  47  0.550357     -0.597189      -14.2441       14.2441       319.305       333.549    
  48  0.826205     -0.190912      -4.55361       4.55361       318.942       323.496    
  49  0.964276     -0.363780E-01 -0.867684      0.867684       318.008       318.876    
  50  0.415479     -0.878324      -20.9497       20.9497       315.864       336.814    
  51  0.599143E-01  -2.81484      -67.1392       67.1392       294.012       361.151    
  52  0.348555      -1.05396      -25.1389       25.1389       325.716       350.855    
  53  0.243819      -1.41133      -33.6629       33.6629       319.594       353.257    
  54  0.233297      -1.45544      -34.7151       34.7151       282.662       317.377    
  55  0.705284     -0.349155      -8.32801       8.32801       315.769       324.097    
  56  0.258436      -1.35311      -32.2742       32.2742       311.882       344.156    
  57  0.328631      -1.11282      -26.5429       26.5429       281.545       308.088    
  58  0.676481     -0.390852      -9.32255       9.32255       277.109       286.431    
  59  0.784590     -0.242594      -5.78632       5.78632       320.091       325.877    
  60  0.546419E-01  -2.90695      -69.3363       69.3363       318.025       387.362    
  61  0.507256     -0.678740      -16.1892       16.1892       314.940       331.129    
  62  0.980797     -0.193899E-01 -0.462486      0.462486       319.806       320.269    
  63  0.193856      -1.64064      -39.1324       39.1324       333.837       372.970    
  64  0.101492      -2.28777      -54.5677       54.5677       308.952       363.520    
  65  0.245844E-01  -3.70564      -88.3865       88.3865       344.821       433.207    
  66  0.610050     -0.494214      -11.7879       11.7879       354.393       366.181    
  67  0.373100E-01  -3.28849      -78.4368       78.4368       332.461       410.898    
  68  0.476763     -0.740736      -17.6679       17.6679       284.323       301.991    
  69  0.412657     -0.885139      -21.1122       21.1122       325.264       346.376    
  70  0.580580     -0.543727      -12.9689       12.9689       313.152       326.121    
  71  0.241635      -1.42033      -33.8774       33.8774       322.677       356.554    
  72  0.463019     -0.769988      -18.3657       18.3657       306.736       325.102    
  73  0.389737     -0.942284      -22.4752       22.4752       310.973       333.448    
  74  0.661923     -0.412607      -9.84145       9.84145       353.465       363.306    
  75  0.112942      -2.18088      -52.0181       52.0181       368.077       420.095    
  76  0.236410      -1.44219      -34.3989       34.3989       388.893       423.292    
  77  0.671886     -0.397666      -9.48509       9.48509       401.089       410.575    
  78  0.319944      -1.13961      -27.1819       27.1819       438.779       465.960    
  79  0.272792      -1.29905      -30.9847       30.9847       457.357       488.342    
loop,thermsimp(1:2)        7   31.7467       21.7478    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240        471.29         87.59          1.13         40.06          0.78          0.05        129.61
Just calling func    0   0        129.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    471.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:        7
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:        8
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      239     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -53.5733       53.5733       256.835       310.409    
   2  0.476819     -0.740619      -17.6652       17.6652       256.750       274.415    
   3  0.564430     -0.571938      -13.6418       13.6418       257.345       270.987    
   4  0.211741      -1.55239      -37.0275       37.0275       255.802       292.829    
   5  0.154226E-01  -4.17192      -99.5081       99.5081       258.056       357.564    
   6  0.489577     -0.714213      -17.0353       17.0353       256.082       273.118    
   7  0.583965     -0.537914      -12.8303       12.8303       256.855       269.685    
   8  0.430258     -0.843370      -20.1160       20.1160       258.372       278.488    
   9  0.280982      -1.26946      -30.2791       30.2791       270.158       300.437    
  10  0.535183     -0.625146      -14.9109       14.9109       269.284       284.195    
  11  0.306750      -1.18172      -28.1863       28.1863       264.318       292.505    
  12  0.924930     -0.780370E-01  -1.86133       1.86133       270.947       272.808    
  13  0.829670E-01  -2.48931      -59.3748       59.3748       276.452       335.827    
  14  0.330275      -1.10783      -26.4238       26.4238       256.377       282.801    
  15  0.229751      -1.47076      -35.0804       35.0804       269.425       304.506    
  16  0.455737     -0.785839      -18.7437       18.7437       277.562       296.306    
  17  0.830949     -0.185187      -4.41707       4.41707       275.330       279.747    
  18  0.148624      -1.90634      -45.4698       45.4698       262.089       307.558    
  19  0.883001     -0.124429      -2.96787       2.96787       278.834       281.802    
  20  0.668001     -0.403466      -9.62342       9.62342       263.894       273.517    
  21  0.610583     -0.493341      -11.7671       11.7671       263.050       274.817    
  22  0.689050     -0.372441      -8.88342       8.88342       254.566       263.449    
  23  0.124417      -2.08412      -49.7101       49.7101       277.109       326.819    
  24  0.785584E-01  -2.54391      -60.6771       60.6771       287.540       348.217    
  25  0.936565     -0.655366E-01  -1.56317       1.56317       278.568       280.131    
  26  0.483719     -0.726252      -17.3225       17.3225       282.708       300.030    
  27  0.715685     -0.334515      -7.97883       7.97883       258.366       266.345    
  28  0.786437     -0.240243      -5.73024       5.73024       270.037       275.767    
  29  0.361023      -1.01881      -24.3006       24.3006       275.738       300.039    
  30  0.325559      -1.12221      -26.7668       26.7668       268.193       294.960    
  31  0.850460     -0.161978      -3.86348       3.86348       282.959       286.822    
  32  0.301358      -1.19946      -28.6093       28.6093       258.332       286.941    
  33  0.304725      -1.18834      -28.3443       28.3443       284.323       312.668    
  34  0.887065     -0.119838      -2.85835       2.85835       277.887       280.746    
  35  0.762822     -0.270730      -6.45743       6.45743       283.393       289.851    
  36  0.364130      -1.01024      -24.0962       24.0962       297.424       321.520    
  37  0.762041     -0.271754      -6.48185       6.48185       284.201       290.683    
  38  0.941180     -0.606207E-01  -1.44592       1.44592       281.545       282.991    
  39  0.449403     -0.799835      -19.0776       19.0776       304.193       323.270    
  40  0.743855     -0.295910      -7.05800       7.05800       282.662       289.720    
  41  0.743104     -0.296920      -7.08210       7.08210       318.008       325.090    
  42  0.350527      -1.04832      -25.0043       25.0043       319.806       344.811    
  43  0.607240     -0.498831      -11.8981       11.8981       290.928       302.826    
  44  0.557347     -0.584567      -13.9430       13.9430       318.942       332.885    
  45  0.217970      -1.52340      -36.3359       36.3359       315.769       352.105    
  46  0.364570      -1.00904      -24.0674       24.0674       306.736       330.803    
  47  0.330900      -1.10594      -26.3787       26.3787       259.407       285.786    
  48  0.861127     -0.149514      -3.56618       3.56618       320.091       323.657    
  49  0.710764E-01  -2.64400      -63.0644       63.0644       287.140       350.204    
  50  0.264543      -1.32975      -31.7171       31.7171       313.152       344.869    
  51  0.985836     -0.142654E-01 -0.340257      0.340257       288.946       289.286    
  52  0.296563      -1.21550      -28.9919       28.9919       314.940       343.932    
  53  0.875112     -0.133403      -3.18191       3.18191       310.973       314.155    
  54  0.808637     -0.212405      -5.06626       5.06626       319.305       324.371    
  55  0.394372     -0.930461      -22.1933       22.1933       255.057       277.250    
  56  0.209815      -1.56153      -37.2455       37.2455       315.864       353.110    
  57  0.154667      -1.86648      -44.5190       44.5190       311.882       356.401    
  58  0.741232     -0.299442      -7.14225       7.14225       272.208       279.350    
  59  0.386718E-01  -3.25265      -77.5817       77.5817       325.264       402.845    
  60  0.372867     -0.986533      -23.5307       23.5307       319.358       342.889    
  61  0.910828E-01  -2.39599      -57.1488       57.1488       325.716       382.865    
  62  0.660999     -0.414003      -9.87475       9.87475       317.896       327.771    
  63  0.631205E-01  -2.76271      -65.8958       65.8958       319.053       384.949    
  64  0.959104     -0.417554E-01 -0.995945      0.995945       319.594       320.590    
  65  0.132829      -2.01869      -48.1496       48.1496       322.677       370.826    
  66  0.162229      -1.81875      -43.3805       43.3805       294.012       337.393    
  67  0.155176      -1.86319      -44.4407       44.4407       353.465       397.906    
  68  0.950416E-01  -2.35344      -56.1340       56.1340       308.952       365.086    
  69  0.591456     -0.525169      -12.5263       12.5263       354.393       366.920    
  70  0.297427      -1.21259      -28.9225       28.9225       333.837       362.760    
  71  0.980650E-01  -2.32213      -55.3871       55.3871       318.025       373.412    
  72  0.795540     -0.228734      -5.45573       5.45573       401.089       406.545    
  73  0.949409     -0.519153E-01  -1.23828       1.23828       332.461       333.700    
  74  0.155806      -1.85914      -44.3440       44.3440       368.077       412.421    
  75  0.753816     -0.282607      -6.74072       6.74072       388.893       395.634    
  76  0.377239     -0.974876      -23.2526       23.2526       344.821       368.073    
  77  0.211437      -1.55383      -37.0618       37.0618       300.437       337.499    
  78  0.485373E-01  -3.02542      -72.1620       72.1620       438.779       510.941    
  79  0.905496E-01  -2.40186      -57.2888       57.2888       471.288       528.576    
loop,thermsimp(1:2)        8   53.5733       17.6652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241        457.36         87.42          1.11         40.14          0.84          0.05        129.57
Just calling func    0   0        129.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    457.36        1.667     -1.134      6.091     -102.6     0.6205    
                     -0.2214      3.940     -99.70      3.942      1.056    
                       1.822     -1.337      1.515    -0.1745E+05 -2.435    
                      -1.150      0.000      0.000      0.000     -1.221    

                      -2.500     0.2667E+05 0.4235E+05 -3996.    -0.8879E+05
                      -2.091     -6.379     -4.697     -7.393      2.899    
                      -14.09     -2.997      1125.      0.000      4156.    

                       5128.      5110.      5042.      7641.      2766.    
                       2751.     0.7963E-01-0.5128E-01  0.000    -0.4800    
                     -0.9156E-01-0.1466    -0.8322E-01-0.1967    -0.1261E-01

                      -1.531    -0.6144E-01  0.000    -0.2906E-01 0.2139E-02
                      0.8541E-01 0.4695E-01-0.1464E-01-0.3564    -0.1621    
                     -0.1777E-01-0.5778E-01-0.8918E-01-0.3489      0.000    

                      -1.930     -1.570      1.073     0.9284    -0.1771    
                      0.1412E-01  9.225      9.126     -9825.     -2.120    
                     -0.4408    -0.6763      9.374      8.567    -0.1000E+05

                      -1.908     0.8258E-01-0.5524      8.774      9.047    
                     -0.1000E+05 -2.143    -0.6189    -0.2930      10.13    
                       8.440    -0.1000E+05 -2.143    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    457.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:        8
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:        9
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      240     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -10.5919       10.5919       254.566       265.158    
   2  0.805197     -0.216668      -5.16794       5.16794       258.366       263.534    
   3  0.976428     -0.238543E-01 -0.568970      0.568970       256.855       257.424    
   4  0.599028     -0.512447      -12.2228       12.2228       257.345       269.568    
   5  0.591081     -0.525802      -12.5414       12.5414       270.947       283.488    
   6  0.151500      -1.88717      -45.0125       45.0125       256.082       301.095    
   7  0.565682     -0.569723      -13.5890       13.5890       263.894       277.483    
   8  0.345258      -1.06346      -25.3656       25.3656       256.750       282.116    
   9  0.658101     -0.418397      -9.97956       9.97956       263.050       273.029    
  10  0.691977E-01  -2.67079      -63.7033       63.7033       270.037       333.740    
  11  0.289062      -1.24111      -29.6029       29.6029       255.057       284.660    
  12  0.949819     -0.514835E-01  -1.22798       1.22798       258.372       259.600    
  13  0.791632     -0.233658      -5.57319       5.57319       272.208       277.781    
  14  0.400532     -0.914962      -21.8236       21.8236       275.330       297.153    
  15  0.241886      -1.41929      -33.8528       33.8528       278.568       312.420    
  16  0.383016     -0.959678      -22.8901       22.8901       277.887       300.778    
  17  0.993978     -0.604041E-02 -0.144075      0.144075       278.834       278.978    
  18  0.807089     -0.214322      -5.11198       5.11198       256.377       261.489    
  19  0.732161     -0.311755      -7.43594       7.43594       281.545       288.981    
  20  0.176507      -1.73440      -41.3686       41.3686       269.284       310.653    
  21  0.628098     -0.465059      -11.0925       11.0925       259.407       270.499    
  22  0.383392     -0.958697      -22.8667       22.8667       282.959       305.826    
  23  0.906421     -0.982517E-01  -2.34349       2.34349       258.332       260.676    
  24  0.329288      -1.11082      -26.4952       26.4952       288.946       315.441    
  25  0.869436     -0.139911      -3.33714       3.33714       282.662       285.999    
  26  0.354994      -1.03565      -24.7023       24.7023       283.393       308.095    
  27  0.127935      -2.05623      -49.0451       49.0451       284.201       333.246    
  28  0.840123     -0.174207      -4.15516       4.15516       264.318       268.473    
  29  0.625861     -0.468627      -11.1776       11.1776       255.802       266.979    
  30  0.488384     -0.716653      -17.0935       17.0935       268.193       285.286    
  31  0.888226E-01  -2.42111      -57.7481       57.7481       277.562       335.310    
  32  0.262955      -1.33577      -31.8607       31.8607       282.708       314.568    
  33  0.153205E-01  -4.17856      -99.6666       99.6666       275.738       375.405    
  34  0.432355     -0.838509      -20.0000       20.0000       270.158       290.158    
  35  0.225273      -1.49044      -35.5499       35.5499       290.928       326.477    
  36  0.812147     -0.208074      -4.96297       4.96297       269.425       274.388    
  37  0.832805E-01  -2.48554      -59.2848       59.2848       262.089       321.373    
  38  0.442280     -0.815813      -19.4587       19.4587       256.835       276.294    
  39  0.106639      -2.23831      -53.3879       53.3879       284.323       337.711    
  40  0.143053      -1.94454      -46.3809       46.3809       310.973       357.354    
  41  0.871774     -0.137225      -3.27308       3.27308       319.594       322.867    
  42  0.137692      -1.98273      -47.2919       47.2919       297.424       344.716    
  43  0.366512      -1.00372      -23.9407       23.9407       304.193       328.134    
  44  0.617157     -0.482633      -11.5117       11.5117       320.091       331.603    
  45  0.420337     -0.866700      -20.6724       20.6724       319.305       339.977    
  46  0.935846     -0.663044E-01  -1.58149       1.58149       318.008       319.590    
  47  0.979912     -0.202925E-01 -0.484013      0.484013       277.109       277.593    
  48  0.692793     -0.367024      -8.75423       8.75423       317.896       326.650    
  49  0.155424      -1.86160      -44.4027       44.4027       306.736       351.139    
  50  0.703218     -0.352088      -8.39797       8.39797       318.942       327.340    
  51  0.396734     -0.924489      -22.0508       22.0508       332.461       354.512    
  52  0.247863      -1.39488      -33.2705       33.2705       276.452       309.723    
  53  0.176690      -1.73336      -41.3439       41.3439       294.012       335.356    
  54  0.832421     -0.183417      -4.37483       4.37483       300.437       304.812    
  55  0.598900     -0.512660      -12.2279       12.2279       319.358       331.586    
  56  0.940005     -0.618702E-01  -1.47572       1.47572       314.940       316.416    
  57  0.556954     -0.585272      -13.9599       13.9599       319.806       333.766    
  58  0.920495     -0.828436E-01  -1.97598       1.97598       313.152       315.128    
  59  0.896932     -0.108775      -2.59450       2.59450       287.540       290.135    
  60  0.200022      -1.60933      -38.3855       38.3855       287.140       325.525    
  61  0.667904E-01  -2.70620      -64.5479       64.5479       315.769       380.317    
  62  0.146707      -1.91932      -45.7793       45.7793       315.864       361.644    
  63  0.305705      -1.18513      -28.2677       28.2677       311.882       340.150    
  64  0.975058     -0.252587E-01 -0.602468      0.602468       258.056       258.658    
  65  0.229625      -1.47131      -35.0935       35.0935       333.837       368.931    
  66  0.477708     -0.738756      -17.6207       17.6207       308.952       326.573    
  67  0.443063     -0.814043      -19.4165       19.4165       354.393       373.810    
  68  0.988727     -0.113371E-01 -0.270412      0.270412       344.821       345.091    
  69  0.338863      -1.08216      -25.8115       25.8115       322.677       348.488    
  70  0.929830     -0.727534E-01  -1.73531       1.73531       318.025       319.760    
  71  0.537152     -0.621475      -14.8233       14.8233       325.716       340.539    
  72  0.626264E-01  -2.77057      -66.0833       66.0833       319.053       385.136    
  73  0.970389     -0.300585E-01 -0.716951      0.716951       388.893       389.610    
  74  0.902865     -0.102183      -2.43725       2.43725       353.465       355.902    
  75  0.488609     -0.716192      -17.0825       17.0825       325.264       342.346    
  76  0.496184     -0.700809      -16.7156       16.7156       401.089       417.805    
  77  0.851289     -0.161004      -3.84025       3.84025       368.077       371.917    
  78  0.843249     -0.170493      -4.06659       4.06659       438.779       442.845    
  79  0.104040      -2.26298      -53.9763       53.9763       457.357       511.334    
loop,thermsimp(1:2)        9   10.5919       5.16794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242        471.29         87.48          1.12         40.48          0.39          0.05        129.52
Just calling func    0   0        129.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    243        450.86         87.50          1.12         40.04          0.64          0.05        129.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    450.86
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:        9
neval is:      242
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       10
neval is:      242


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      242     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525      -4.35358       4.35358       256.855       261.209    
   2  0.367543      -1.00091      -23.8737       23.8737       258.056       281.929    
   3  0.528755     -0.637231      -15.1992       15.1992       258.372       273.571    
   4  0.776829     -0.252535      -6.02344       6.02344       258.332       264.356    
   5  0.149594E-01  -4.20242      -100.236       100.236       256.377       356.613    
   6  0.892228     -0.114033      -2.71990       2.71990       258.366       261.086    
   7  0.191037      -1.65529      -39.4817       39.4817       254.566       294.048    
   8  0.516533     -0.660616      -15.7569       15.7569       255.802       271.559    
   9  0.273230      -1.29744      -30.9465       30.9465       264.318       295.265    
  10  0.822225     -0.195741      -4.66880       4.66880       257.345       262.014    
  11  0.359850      -1.02207      -24.3783       24.3783       259.407       283.785    
  12  0.611658     -0.491581      -11.7251       11.7251       263.050       274.775    
  13  0.249481      -1.38837      -33.1153       33.1153       269.425       302.541    
  14  0.441252     -0.818139      -19.5142       19.5142       256.835       276.350    
  15  0.910514E-01  -2.39633      -57.1570       57.1570       263.894       321.051    
  16  0.745146     -0.294175      -7.01663       7.01663       277.109       284.125    
  17  0.758301     -0.276675      -6.59923       6.59923       272.208       278.807    
  18  0.638521     -0.448601      -10.7000       10.7000       278.834       289.534    
  19  0.150180      -1.89592      -45.2213       45.2213       256.750       301.971    
  20  0.144147      -1.93692      -46.1993       46.1993       270.947       317.146    
  21  0.104928      -2.25448      -53.7736       53.7736       255.057       308.831    
  22  0.398120     -0.921002      -21.9676       21.9676       268.193       290.161    
  23  0.802258     -0.220325      -5.25517       5.25517       282.662       287.917    
  24  0.399299     -0.918044      -21.8971       21.8971       281.545       303.442    
  25  0.493060     -0.707124      -16.8662       16.8662       287.540       304.406    
  26  0.504407     -0.684372      -16.3236       16.3236       270.158       286.482    
  27  0.762058     -0.271733      -6.48134       6.48134       275.330       281.811    
  28  0.430267     -0.843350      -20.1155       20.1155       277.887       298.003    
  29  0.993832     -0.618725E-02 -0.147578      0.147578       256.082       256.230    
  30  0.705390     -0.349005      -8.32443       8.32443       300.437       308.761    
  31  0.969760     -0.307069E-01 -0.732417      0.732417       282.959       283.691    
  32  0.245618      -1.40398      -33.4875       33.4875       283.393       316.881    
  33  0.685790     -0.377184      -8.99656       8.99656       276.452       285.449    
  34  0.905089     -0.997222E-01  -2.37856       2.37856       269.284       271.663    
  35  0.414065     -0.881732      -21.0310       21.0310       278.568       299.599    
  36  0.714747E-01  -2.63841      -62.9311       62.9311       282.708       345.639    
  37  0.694510     -0.364548      -8.69517       8.69517       313.152       321.847    
  38  0.770213E-01  -2.56367      -61.1485       61.1485       288.946       350.094    
  39  0.846173     -0.167031      -3.98401       3.98401       314.940       318.924    
  40  0.485012     -0.723582      -17.2588       17.2588       318.008       335.267    
  41  0.345787      -1.06193      -25.3291       25.3291       318.025       343.354    
  42  0.851861     -0.160332      -3.82421       3.82421       262.089       265.913    
  43  0.774151     -0.255989      -6.10582       6.10582       319.594       325.700    
  44  0.512382     -0.668685      -15.9494       15.9494       287.140       303.089    
  45  0.839798     -0.174594      -4.16441       4.16441       290.928       295.092    
  46  0.430550     -0.842692      -20.0998       20.0998       308.952       329.052    
  47  0.988263     -0.118067E-01 -0.281612      0.281612       317.896       318.177    
  48  0.349495      -1.05127      -25.0747       25.0747       318.942       344.017    
  49  0.290701      -1.23546      -29.4680       29.4680       304.193       333.661    
  50  0.210466      -1.55843      -37.1715       37.1715       319.358       356.530    
  51  0.361038      -1.01877      -24.2996       24.2996       320.091       344.391    
  52  0.168890      -1.77851      -42.4208       42.4208       284.201       326.622    
  53  0.176000      -1.73727      -41.4372       41.4372       270.037       311.474    
  54  0.494423     -0.704364      -16.8004       16.8004       319.806       336.607    
  55  0.887313     -0.119558      -2.85168       2.85168       277.562       280.414    
  56  0.318781      -1.14325      -27.2687       27.2687       294.012       321.281    
  57  0.385435     -0.953382      -22.7400       22.7400       284.323       307.063    
  58  0.557906     -0.583564      -13.9191       13.9191       319.305       333.224    
  59  0.262507      -1.33748      -31.9014       31.9014       311.882       343.783    
  60  0.573408     -0.556157      -13.2654       13.2654       325.716       338.981    
  61  0.334195      -1.09603      -26.1424       26.1424       325.264       351.406    
  62  0.365463      -1.00659      -24.0091       24.0091       297.424       321.433    
  63  0.182452      -1.70127      -40.5784       40.5784       344.821       385.399    
  64  0.224434      -1.49418      -35.6389       35.6389       322.677       358.315    
  65  0.599163     -0.512222      -12.2175       12.2175       306.736       318.953    
  66  0.549089     -0.599495      -14.2991       14.2991       332.461       346.760    
  67  0.830082     -0.186231      -4.44195       4.44195       353.465       357.907    
  68  0.824393     -0.193108      -4.60600       4.60600       310.973       315.579    
  69  0.814179     -0.205575      -4.90336       4.90336       315.864       320.768    
  70  0.731713E-01  -2.61495      -62.3715       62.3715       333.837       396.209    
  71  0.588145     -0.530782      -12.6601       12.6601       368.077       380.737    
  72  0.777400     -0.251801      -6.00592       6.00592       354.393       360.399    
  73  0.497973     -0.697209      -16.6297       16.6297       275.738       292.368    
  74  0.692859     -0.366929      -8.75195       8.75195       315.769       324.521    
  75  0.688184     -0.373699      -8.91343       8.91343       319.053       327.966    
  76  0.419388     -0.868959      -20.7263       20.7263       388.893       409.620    
  77  0.348247      -1.05484      -25.1600       25.1600       401.089       426.249    
  78  0.744248     -0.295381      -7.04540       7.04540       438.779       445.824    
  79  0.140286      -1.96407      -46.8468       46.8468       450.860       497.706    
loop,thermsimp(1:2)       10   4.35358       23.8737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    244        315.75         87.41          1.11         40.05          0.76          0.05        129.38
Just calling func    0   0        129.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    315.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       10
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       11
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      243     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01  -2.00445       2.00445       256.082       258.087    
   2  0.309089      -1.17413      -28.0052       28.0052       258.366       286.371    
   3  0.237901      -1.43590      -34.2489       34.2489       256.855       291.104    
   4  0.542467     -0.611627      -14.5885       14.5885       257.345       271.933    
   5  0.523672     -0.646889      -15.4295       15.4295       258.332       273.762    
   6  0.850058     -0.162450      -3.87474       3.87474       262.089       265.963    
   7  0.589343     -0.528746      -12.6116       12.6116       255.802       268.413    
   8  0.979269     -0.209490E-01 -0.499672      0.499672       269.284       269.784    
   9  0.110419      -2.20347      -52.5570       52.5570       258.372       310.929    
  10  0.557914     -0.583550      -13.9188       13.9188       263.050       276.968    
  11  0.474464     -0.745569      -17.7832       17.7832       256.835       274.619    
  12  0.312482      -1.16321      -27.7447       27.7447       272.208       299.952    
  13  0.297011      -1.21399      -28.9559       28.9559       277.562       306.518    
  14  0.857571     -0.153651      -3.66488       3.66488       275.330       278.994    
  15  0.792567     -0.232479      -5.54506       5.54506       258.056       263.601    
  16  0.963006     -0.376958E-01 -0.899117      0.899117       282.959       283.858    
  17  0.294103      -1.22382      -29.1905       29.1905       259.407       288.597    
  18  0.403484     -0.907618      -21.6484       21.6484       277.109       298.757    
  19  0.449313     -0.800035      -19.0823       19.0823       276.452       295.535    
  20  0.721912     -0.325852      -7.77219       7.77219       270.158       277.930    
  21  0.512488     -0.668479      -15.9445       15.9445       282.662       298.606    
  22  0.885190     -0.121953      -2.90880       2.90880       278.834       281.742    
  23  0.694751E-01  -2.66679      -63.6079       63.6079       268.193       331.801    
  24  0.820879     -0.197380      -4.70788       4.70788       275.738       280.446    
  25  0.211527      -1.55340      -37.0516       37.0516       254.566       291.618    
  26  0.937420     -0.646236E-01  -1.54139       1.54139       290.928       292.469    
  27  0.515756E-01  -2.96471      -70.7139       70.7139       264.318       335.032    
  28  0.695222     -0.363525      -8.67075       8.67075       277.887       286.558    
  29  0.718776     -0.330205      -7.87602       7.87602       278.568       286.444    
  30  0.536080     -0.623471      -14.8710       14.8710       256.750       271.621    
  31  0.585855     -0.534682      -12.7532       12.7532       269.425       282.179    
  32  0.693572     -0.365900      -8.72741       8.72741       287.140       295.867    
  33  0.700823     -0.355500      -8.47934       8.47934       281.545       290.024    
  34  0.250985      -1.38236      -32.9719       32.9719       287.540       320.512    
  35  0.290600      -1.23581      -29.4763       29.4763       284.323       313.800    
  36  0.828609     -0.188007      -4.48433       4.48433       300.437       304.921    
  37  0.225820      -1.48802      -35.4920       35.4920       255.057       290.549    
  38  0.999674     -0.326354E-03 -0.778416E-02  0.778416E-02   270.037       270.045    
  39  0.878216     -0.129862      -3.09747       3.09747       310.973       314.071    
  40  0.685898E-01  -2.67961      -63.9138       63.9138       283.393       347.307    
  41  0.273860      -1.29514      -30.8915       30.8915       270.947       301.839    
  42  0.697655     -0.360030      -8.58740       8.58740       317.896       326.483    
  43  0.293168      -1.22701      -29.2665       29.2665       314.940       344.207    
  44  0.319476      -1.14107      -27.2167       27.2167       306.736       333.953    
  45  0.874681     -0.133896      -3.19368       3.19368       315.864       319.058    
  46  0.408697     -0.894781      -21.3422       21.3422       263.894       285.236    
  47  0.142130E-01  -4.25360      -101.456       101.456       294.012       395.468    
  48  0.164528      -1.80468      -43.0449       43.0449       297.424       340.469    
  49  0.652669     -0.426685      -10.1772       10.1772       313.152       323.329    
  50  0.492107     -0.709060      -16.9124       16.9124       315.769       332.682    
  51  0.542705     -0.611189      -14.5780       14.5780       319.594       334.172    
  52  0.798603     -0.224891      -5.36408       5.36408       284.201       289.565    
  53  0.474092E-01  -3.04894      -72.7230       72.7230       319.053       391.776    
  54  0.425084     -0.855468      -20.4045       20.4045       308.952       329.357    
  55  0.349722      -1.05062      -25.0592       25.0592       319.305       344.364    
  56  0.499235     -0.694678      -16.5694       16.5694       304.193       320.762    
  57  0.193091      -1.64459      -39.2267       39.2267       318.008       357.235    
  58  0.876894     -0.131369      -3.13339       3.13339       319.806       322.940    
  59  0.634591     -0.454774      -10.8472       10.8472       325.716       336.563    
  60  0.571394     -0.559676      -13.3493       13.3493       318.025       331.375    
  61  0.749680     -0.288108      -6.87193       6.87193       311.882       318.754    
  62  0.111050      -2.19777      -52.4211       52.4211       318.942       371.363    
  63  0.456811     -0.783485      -18.6876       18.6876       320.091       338.779    
  64  0.686362     -0.376350      -8.97667       8.97667       282.708       291.684    
  65  0.160608      -1.82879      -43.6201       43.6201       332.461       376.081    
  66  0.557454     -0.584375      -13.9385       13.9385       288.946       302.884    
  67  0.914976     -0.888571E-01  -2.11941       2.11941       325.264       327.383    
  68  0.203755      -1.59084      -37.9445       37.9445       319.358       357.302    
  69  0.851702     -0.160519      -3.82868       3.82868       256.377       260.206    
  70  0.770841     -0.260273      -6.20801       6.20801       353.465       359.673    
  71  0.137106      -1.98700      -47.3937       47.3937       322.677       370.070    
  72  0.142091      -1.95129      -46.5419       46.5419       354.393       400.935    
  73  0.833303E-01  -2.48494      -59.2706       59.2706       368.077       427.348    
  74  0.277948      -1.28032      -30.5381       30.5381       344.821       375.359    
  75  0.827288     -0.189602      -4.52237       4.52237       333.837       338.360    
  76  0.684426     -0.379175      -9.04405       9.04405       388.893       397.937    
  77  0.768672     -0.263090      -6.27520       6.27520       401.089       407.365    
  78  0.335091      -1.09335      -26.0786       26.0786       438.779       464.857    
  79  0.668015     -0.403445      -9.62293       9.62293       315.749       325.372    
loop,thermsimp(1:2)       11   2.00445       28.0052    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245        401.97         87.22          1.14         40.11          0.79          0.05        129.30
Just calling func    0   0        129.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    401.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       11
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       12
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      244     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671      -6.45601       6.45601       256.082       262.538    
   2  0.482922E-01  -3.03048      -72.2828       72.2828       256.377       328.660    
   3  0.612960     -0.489456      -11.6745       11.6745       258.056       269.730    
   4  0.910127     -0.941714E-01  -2.24617       2.24617       262.089       264.335    
   5  0.362433      -1.01492      -24.2077       24.2077       255.802       280.009    
   6  0.476779     -0.740702      -17.6672       17.6672       269.284       286.952    
   7  0.179006E-01  -4.02292      -95.9542       95.9542       270.037       365.991    
   8  0.589646     -0.528233      -12.5993       12.5993       256.750       269.349    
   9  0.926206     -0.766581E-01  -1.82844       1.82844       257.345       259.173    
  10  0.492629     -0.707999      -16.8871       16.8871       258.332       275.219    
  11  0.661123     -0.413815      -9.87027       9.87027       256.835       266.706    
  12  0.542248     -0.612032      -14.5981       14.5981       263.050       277.648    
  13  0.216527      -1.53004      -36.4943       36.4943       270.158       306.653    
  14  0.549832     -0.598143      -14.2668       14.2668       275.330       289.596    
  15  0.429556     -0.845003      -20.1549       20.1549       275.738       295.893    
  16  0.264838      -1.32864      -31.6905       31.6905       278.834       310.524    
  17  0.251706      -1.37949      -32.9035       32.9035       269.425       302.329    
  18  0.701724     -0.354215      -8.44869       8.44869       282.959       291.408    
  19  0.324289      -1.12612      -26.8601       26.8601       263.894       290.754    
  20  0.160749E-02  -6.43308      -153.441       153.441       258.366       411.807    
  21  0.533627     -0.628058      -14.9804       14.9804       278.568       293.548    
  22  0.883065     -0.124357      -2.96614       2.96614       277.887       280.854    
  23  0.484824     -0.723969      -17.2680       17.2680       259.407       276.675    
  24  0.724157     -0.322747      -7.69813       7.69813       284.201       291.899    
  25  0.847375     -0.165612      -3.95017       3.95017       281.545       285.495    
  26  0.167586      -1.78626      -42.6057       42.6057       255.057       297.663    
  27  0.890079     -0.116445      -2.77743       2.77743       256.855       259.633    
  28  0.235223      -1.44722      -34.5190       34.5190       254.566       289.085    
  29  0.206112      -1.57934      -37.6701       37.6701       282.708       320.378    
  30  0.463385     -0.769198      -18.3468       18.3468       290.928       309.274    
  31  0.487880E-01  -3.02027      -72.0392       72.0392       276.452       348.491    
  32  0.244157      -1.40994      -33.6298       33.6298       287.140       320.770    
  33  0.770602     -0.260583      -6.21539       6.21539       282.662       288.877    
  34  0.264159      -1.33120      -31.7517       31.7517       277.109       308.860    
  35  0.189030E-01  -3.96843      -94.6546       94.6546       272.208       366.862    
  36  0.635342     -0.453592      -10.8190       10.8190       270.947       281.766    
  37  0.139550      -1.96933      -46.9723       46.9723       288.946       335.918    
  38  0.561566     -0.577026      -13.7632       13.7632       300.437       314.200    
  39  0.951789     -0.494118E-01  -1.17857       1.17857       277.562       278.741    
  40  0.527693     -0.639242      -15.2471       15.2471       258.372       273.619    
  41  0.925337     -0.775972E-01  -1.85084       1.85084       284.323       286.174    
  42  0.795352     -0.228971      -5.46139       5.46139       310.973       316.435    
  43  0.530799     -0.633371      -15.1071       15.1071       311.882       326.989    
  44  0.642763     -0.441979      -10.5420       10.5420       315.864       326.406    
  45  0.485146     -0.723305      -17.2522       17.2522       287.540       304.792    
  46  0.795896     -0.228287      -5.44508       5.44508       304.193       309.638    
  47  0.519140     -0.655581      -15.6369       15.6369       319.806       335.443    
  48  0.694073E-01  -2.66776      -63.6312       63.6312       313.152       376.783    
  49  0.401486     -0.912583      -21.7668       21.7668       315.749       337.516    
  50  0.587982E-01  -2.83364      -67.5878       67.5878       317.896       385.484    
  51  0.752652     -0.284152      -6.77756       6.77756       325.264       332.041    
  52  0.139929      -1.96662      -46.9077       46.9077       308.952       355.860    
  53  0.136759      -1.98953      -47.4541       47.4541       318.025       365.479    
  54  0.690728     -0.370009      -8.82541       8.82541       268.193       277.018    
  55  0.409546     -0.892705      -21.2927       21.2927       315.769       337.062    
  56  0.422285     -0.862075      -20.5621       20.5621       306.736       327.298    
  57  0.160439      -1.82984      -43.6452       43.6452       319.594       363.239    
  58  0.230463      -1.46767      -35.0066       35.0066       264.318       299.325    
  59  0.836860     -0.178099      -4.24799       4.24799       325.716       329.964    
  60  0.635813     -0.452850      -10.8013       10.8013       333.837       344.638    
  61  0.464135     -0.767580      -18.3082       18.3082       320.091       338.399    
  62  0.999501     -0.498826E-03 -0.118979E-01  0.118979E-01   297.424       297.436    
  63  0.472031     -0.750710      -17.9058       17.9058       314.940       332.846    
  64  0.926290     -0.765681E-01  -1.82629       1.82629       319.305       321.131    
  65  0.825201E-01  -2.49471      -59.5036       59.5036       283.393       342.897    
  66  0.987125     -0.129587E-01 -0.309090      0.309090       318.008       318.317    
  67  0.902936     -0.102104      -2.43537       2.43537       319.358       321.793    
  68  0.269140E-01  -3.61511      -86.2272       86.2272       353.465       439.692    
  69  0.343181      -1.06950      -25.5095       25.5095       322.677       348.186    
  70  0.364015      -1.01056      -24.1037       24.1037       318.942       343.046    
  71  0.420237     -0.866937      -20.6781       20.6781       344.821       365.499    
  72  0.806946     -0.214499      -5.11620       5.11620       332.461       337.577    
  73  0.545083     -0.606816      -14.4737       14.4737       319.053       333.527    
  74  0.651758     -0.428082      -10.2106       10.2106       294.012       304.223    
  75  0.308338E-01  -3.47915      -82.9842       82.9842       388.893       471.878    
  76  0.120046      -2.11988      -50.5631       50.5631       354.393       404.956    
  77  0.333191      -1.09904      -26.2142       26.2142       401.089       427.304    
  78  0.884266E-01  -2.42558      -57.8547       57.8547       368.077       425.932    
  79  0.531674     -0.631725      -15.0678       15.0678       401.972       417.040    
loop,thermsimp(1:2)       12   6.45601       72.2828    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246        437.23         87.64          1.15         40.09          0.59          0.05        129.52
Just calling func    0   0        129.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    437.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       12
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       13
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      245     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -12.4718       12.4718       257.345       269.817    
   2  0.691791     -0.368472      -8.78874       8.78874       256.855       265.644    
   3  0.688173     -0.373715      -8.91381       8.91381       256.082       264.996    
   4  0.439966     -0.821058      -19.5838       19.5838       262.089       281.672    
   5  0.945690     -0.558403E-01  -1.33190       1.33190       256.835       258.167    
   6  0.238956      -1.43147      -34.1434       34.1434       256.750       290.893    
   7  0.280830E-01  -3.57259      -85.2130       85.2130       258.056       343.269    
   8  0.902031E-01  -2.40569      -57.3803       57.3803       258.372       315.752    
   9  0.198361      -1.61767      -38.5844       38.5844       258.332       296.917    
  10  0.201288      -1.60302      -38.2350       38.2350       259.407       297.642    
  11  0.710033     -0.342444      -8.16794       8.16794       268.193       276.361    
  12  0.182913      -1.69874      -40.5183       40.5183       263.050       303.568    
  13  0.817316     -0.201730      -4.81163       4.81163       277.562       282.374    
  14  0.894732     -0.111231      -2.65306       2.65306       255.802       258.455    
  15  0.854000     -0.157824      -3.76440       3.76440       277.887       281.652    
  16  0.248066      -1.39406      -33.2510       33.2510       270.947       304.198    
  17  0.670877     -0.399170      -9.52095       9.52095       281.545       291.066    
  18  0.701473     -0.354573      -8.45723       8.45723       284.323       292.781    
  19  0.199467      -1.61210      -38.4517       38.4517       269.284       307.736    
  20  0.391533     -0.937685      -22.3656       22.3656       282.662       305.027    
  21  0.586761     -0.533138      -12.7163       12.7163       254.566       267.282    
  22  0.163799      -1.80912      -43.1508       43.1508       275.330       318.480    
  23  0.955964     -0.450353E-01  -1.07418       1.07418       263.894       264.968    
  24  0.365727      -1.00587      -23.9918       23.9918       282.959       306.951    
  25  0.733577     -0.309822      -7.38984       7.38984       284.201       291.591    
  26  0.111597      -2.19286      -52.3039       52.3039       278.568       330.871    
  27  0.714895     -0.335619      -8.00515       8.00515       275.738       283.744    
  28  0.816688     -0.202498      -4.82996       4.82996       297.424       302.254    
  29  0.480603     -0.732714      -17.4766       17.4766       255.057       272.534    
  30  0.573891     -0.555316      -13.2453       13.2453       264.318       277.564    
  31  0.204452      -1.58742      -37.8630       37.8630       269.425       307.288    
  32  0.845356E-01  -2.47058      -58.9280       58.9280       294.012       352.940    
  33  0.524789E-01  -2.94734      -70.2997       70.2997       287.540       357.840    
  34  0.631781     -0.459213      -10.9531       10.9531       270.158       281.111    
  35  0.620363     -0.477450      -11.3881       11.3881       277.109       288.497    
  36  0.553551     -0.591402      -14.1061       14.1061       290.928       305.034    
  37  0.546271     -0.604640      -14.4218       14.4218       304.193       318.615    
  38  0.402204     -0.910797      -21.7242       21.7242       278.834       300.558    
  39  0.735174     -0.307648      -7.33798       7.33798       300.437       307.775    
  40  0.359565      -1.02286      -24.3971       24.3971       310.973       335.370    
  41  0.564111     -0.572504      -13.6553       13.6553       318.008       331.664    
  42  0.412661     -0.885128      -21.1120       21.1120       282.708       303.820    
  43  0.795853     -0.228341      -5.44636       5.44636       287.140       292.586    
  44  0.909991E-01  -2.39691      -57.1707       57.1707       319.305       376.476    
  45  0.830687     -0.185502      -4.42458       4.42458       319.358       323.783    
  46  0.592588     -0.523256      -12.4806       12.4806       315.864       328.345    
  47  0.489472     -0.714427      -17.0404       17.0404       311.882       328.922    
  48  0.992056     -0.797586E-02 -0.190239      0.190239       306.736       306.926    
  49  0.808208     -0.212936      -5.07892       5.07892       256.377       261.456    
  50  0.212569      -1.54849      -36.9344       36.9344       325.716       362.650    
  51  0.214041      -1.54159      -36.7698       36.7698       325.264       362.034    
  52  0.586527     -0.533536      -12.7258       12.7258       314.940       327.666    
  53  0.603460     -0.505075      -12.0470       12.0470       319.053       331.100    
  54  0.819887     -0.198589      -4.73671       4.73671       319.806       324.543    
  55  0.204248      -1.58842      -37.8869       37.8869       288.946       326.833    
  56  0.540917     -0.614489      -14.6567       14.6567       315.769       330.426    
  57  0.430522     -0.842757      -20.1013       20.1013       315.749       335.850    
  58  0.637009E-01  -2.75356      -65.6775       65.6775       332.461       398.139    
  59  0.872387     -0.136522      -3.25630       3.25630       320.091       323.347    
  60  0.740351     -0.300631      -7.17061       7.17061       283.393       290.564    
  61  0.844085     -0.169502      -4.04295       4.04295       318.942       322.985    
  62  0.574613     -0.554058      -13.2153       13.2153       333.837       347.052    
  63  0.382052     -0.962198      -22.9502       22.9502       322.677       345.627    
  64  0.564583     -0.571667      -13.6353       13.6353       276.452       290.088    
  65  0.700807     -0.355522      -8.47987       8.47987       308.952       317.432    
  66  0.237235      -1.43870      -34.3158       34.3158       319.594       353.910    
  67  0.745904     -0.293158      -6.99238       6.99238       318.025       325.018    
  68  0.369081     -0.996740      -23.7741       23.7741       344.821       368.595    
  69  0.512148     -0.669141      -15.9603       15.9603       270.037       285.997    
  70  0.239900E-01  -3.73012      -88.9703       88.9703       272.208       361.178    
  71  0.364860E-01  -3.31083      -78.9695       78.9695       313.152       392.122    
  72  0.792805E-01  -2.53476      -60.4589       60.4589       317.896       378.355    
  73  0.400998     -0.913800      -21.7959       21.7959       354.393       376.189    
  74  0.784935     -0.242154      -5.77583       5.77583       258.366       264.142    
  75  0.306234      -1.18341      -28.2265       28.2265       401.972       430.199    
  76  0.765539     -0.267175      -6.37262       6.37262       368.077       374.450    
  77  0.164044      -1.80762      -43.1151       43.1151       401.089       444.205    
  78  0.484723E-02  -5.32935      -127.115       127.115       353.465       480.580    
  79  0.153094E-01  -4.17929      -99.6839       99.6839       437.229       536.913    
loop,thermsimp(1:2)       13   12.4718       8.78874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247        388.89         87.60          1.13         40.23          0.52          0.05        129.53
Just calling func    0   0        129.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    388.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       13
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       14
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      246     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -25.8032       25.8032       256.835       282.639    
   2  0.649641     -0.431335      -10.2882       10.2882       255.802       266.090    
   3  0.930116     -0.724456E-01  -1.72796       1.72796       256.377       258.105    
   4  0.297326      -1.21293      -28.9306       28.9306       258.366       287.297    
   5  0.751734     -0.285373      -6.80667       6.80667       263.894       270.701    
   6  0.409056     -0.893902      -21.3213       21.3213       256.082       277.404    
   7  0.115094      -2.16201      -51.5680       51.5680       256.855       308.423    
   8  0.606681     -0.499753      -11.9200       11.9200       254.566       266.486    
   9  0.140571      -1.96204      -46.7985       46.7985       257.345       304.143    
  10  0.447669E-01  -3.10629      -74.0908       74.0908       255.057       329.148    
  11  0.517394     -0.658951      -15.7172       15.7172       268.193       283.910    
  12  0.587057     -0.532633      -12.7043       12.7043       264.318       277.023    
  13  0.384993E-01  -3.25712      -77.6883       77.6883       270.158       347.847    
  14  0.829105E-01  -2.48999      -59.3910       59.3910       277.887       337.278    
  15  0.382179     -0.961866      -22.9423       22.9423       262.089       285.031    
  16  0.269516      -1.31113      -31.2729       31.2729       277.562       308.835    
  17  0.879580     -0.128311      -3.06045       3.06045       275.738       278.799    
  18  0.760503E-01  -2.57636      -61.4511       61.4511       270.037       331.488    
  19  0.482544     -0.728684      -17.3805       17.3805       277.109       294.489    
  20  0.561499     -0.577145      -13.7660       13.7660       276.452       290.218    
  21  0.254621      -1.36798      -32.6288       32.6288       283.393       316.022    
  22  0.479261     -0.735511      -17.5433       17.5433       256.750       274.293    
  23  0.638455     -0.448704      -10.7024       10.7024       281.545       292.247    
  24  0.289082      -1.24105      -29.6013       29.6013       284.201       313.802    
  25  0.656024     -0.421558      -10.0550       10.0550       287.140       297.195    
  26  0.597431     -0.515117      -12.2865       12.2865       284.323       296.610    
  27  0.859562     -0.151333      -3.60957       3.60957       258.332       261.942    
  28  0.554826     -0.589100      -14.0511       14.0511       259.407       273.458    
  29  0.128413      -2.05250      -48.9561       48.9561       278.834       327.790    
  30  0.311170      -1.16742      -27.8451       27.8451       297.424       325.269    
  31  0.606679     -0.499755      -11.9201       11.9201       263.050       274.970    
  32  0.923238     -0.798686E-01  -1.90502       1.90502       282.708       284.613    
  33  0.734154     -0.309037      -7.37112       7.37112       270.947       278.318    
  34  0.988670     -0.113947E-01 -0.271786      0.271786       282.662       282.933    
  35  0.136308      -1.99284      -47.5329       47.5329       290.928       338.460    
  36  0.345839      -1.06178      -25.3255       25.3255       306.736       332.062    
  37  0.349440      -1.05142      -25.0784       25.0784       282.959       308.037    
  38  0.625658E-01  -2.77154      -66.1064       66.1064       269.425       335.532    
  39  0.394804     -0.929365      -22.1671       22.1671       269.284       291.452    
  40  0.899667E-02  -4.71090      -112.364       112.364       300.437       412.801    
  41  0.823946     -0.193651      -4.61893       4.61893       258.372       262.991    
  42  0.834235     -0.181240      -4.32292       4.32292       308.952       313.275    
  43  0.777534     -0.251627      -6.00179       6.00179       275.330       281.331    
  44  0.384993     -0.954531      -22.7674       22.7674       304.193       326.960    
  45  0.247443E-01  -3.69916      -88.2320       88.2320       318.942       407.174    
  46  0.810695     -0.209863      -5.00563       5.00563       320.091       325.097    
  47  0.893618     -0.112477      -2.68278       2.68278       319.358       322.041    
  48  0.545617     -0.605837      -14.4504       14.4504       319.806       334.257    
  49  0.587193     -0.532402      -12.6988       12.6988       318.025       330.724    
  50  0.991207     -0.883185E-02 -0.210656      0.210656       288.946       289.156    
  51  0.477440     -0.739316      -17.6341       17.6341       314.940       332.574    
  52  0.444858     -0.810000      -19.3200       19.3200       315.864       335.184    
  53  0.103440      -2.26876      -54.1143       54.1143       311.882       365.996    
  54  0.320718      -1.13719      -27.1242       27.1242       315.769       342.893    
  55  0.161721      -1.82188      -43.4554       43.4554       278.568       322.023    
  56  0.912244     -0.918481E-01  -2.19075       2.19075       319.053       321.244    
  57  0.358583      -1.02559      -24.4624       24.4624       318.008       342.471    
  58  0.263871      -1.33229      -31.7777       31.7777       310.973       342.751    
  59  0.782230     -0.245606      -5.85817       5.85817       315.749       321.607    
  60  0.592946     -0.522652      -12.4662       12.4662       258.056       270.522    
  61  0.652732     -0.426589      -10.1749       10.1749       322.677       332.851    
  62  0.817021     -0.202091      -4.82025       4.82025       333.837       338.657    
  63  0.177213      -1.73040      -41.2734       41.2734       294.012       335.285    
  64  0.263258      -1.33462      -31.8332       31.8332       319.594       351.427    
  65  0.856937     -0.154391      -3.68251       3.68251       287.540       291.223    
  66  0.541629E-01  -2.91576      -69.5464       69.5464       272.208       341.754    
  67  0.919404     -0.840293E-01  -2.00426       2.00426       325.264       327.268    
  68  0.996572     -0.343426E-02 -0.819137E-01  0.819137E-01   325.716       325.798    
  69  0.257654      -1.35614      -32.3465       32.3465       344.821       377.167    
  70  0.684182     -0.379532      -9.05255       9.05255       368.077       377.130    
  71  0.870041     -0.139215      -3.32053       3.32053       354.393       357.714    
  72  0.854707     -0.156997      -3.74466       3.74466       319.305       323.050    
  73  0.195719      -1.63108      -38.9042       38.9042       317.896       356.800    
  74  0.352846      -1.04172      -24.8471       24.8471       313.152       337.999    
  75  0.152754      -1.87893      -44.8160       44.8160       332.461       377.277    
  76  0.229106      -1.47357      -35.1474       35.1474       401.972       437.119    
  77  0.756279     -0.279345      -6.66291       6.66291       401.089       407.752    
  78  0.162290      -1.81837      -43.3715       43.3715       353.465       396.836    
  79  0.253781      -1.37128      -32.7077       32.7077       388.893       421.601    
loop,thermsimp(1:2)       14   25.8032       10.2882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248        438.78         87.63          1.11         40.60          0.38          0.05        129.77
Just calling func    0   0        129.77


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249        315.44         87.54          1.11         40.14          0.79          0.05        129.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    315.44
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       14
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       15
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      313
neval,tstepnext:      248     313

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -36.1447       36.1447       256.377       292.522    
   2  0.894567E-01  -2.41400      -57.5785       57.5785       258.332       315.911    
   3  0.863615     -0.146628      -3.49736       3.49736       258.372       261.869    
   4  0.807990     -0.213206      -5.08536       5.08536       255.802       260.887    
   5  0.318173      -1.14516      -27.3142       27.3142       254.566       281.880    
   6  0.464606     -0.766566      -18.2840       18.2840       258.056       276.340    
   7  0.574933     -0.553501      -13.2020       13.2020       263.894       277.096    
   8  0.974939     -0.253802E-01 -0.605366      0.605366       259.407       260.012    
   9  0.415757     -0.877653      -20.9337       20.9337       256.750       277.684    
  10  0.187109      -1.67606      -39.9773       39.9773       263.050       303.027    
  11  0.730515E-01  -2.61659      -62.4106       62.4106       264.318       326.729    
  12  0.209185      -1.56454      -37.3172       37.3172       256.082       293.400    
  13  0.496690     -0.699790      -16.6913       16.6913       270.947       287.638    
  14  0.862986     -0.147356      -3.51473       3.51473       275.738       279.253    
  15  0.888200     -0.118558      -2.82783       2.82783       275.330       278.157    
  16  0.380888     -0.965250      -23.0230       23.0230       256.835       279.859    
  17  0.135305      -2.00022      -47.7091       47.7091       282.662       330.371    
  18  0.927079     -0.757167E-01  -1.80599       1.80599       268.193       269.999    
  19  0.603067     -0.505727      -12.0625       12.0625       282.708       294.770    
  20  0.136202      -1.99362      -47.5516       47.5516       262.089       309.640    
  21  0.954653     -0.464076E-01  -1.10691       1.10691       258.366       259.473    
  22  0.151192      -1.88920      -45.0611       45.0611       288.946       334.007    
  23  0.449259     -0.800155      -19.0852       19.0852       276.452       295.537    
  24  0.780874     -0.247341      -5.89956       5.89956       287.540       293.440    
  25  0.456238     -0.784740      -18.7175       18.7175       269.284       288.002    
  26  0.163284      -1.81227      -43.2260       43.2260       281.545       324.771    
  27  0.821444     -0.196692      -4.69147       4.69147       277.109       281.800    
  28  0.861448     -0.149141      -3.55729       3.55729       284.323       287.881    
  29  0.924167     -0.788621E-01  -1.88101       1.88101       287.140       289.021    
  30  0.195059      -1.63445      -38.9848       38.9848       257.345       296.330    
  31  0.375134     -0.980472      -23.3861       23.3861       282.959       306.345    
  32  0.909862     -0.944628E-01  -2.25312       2.25312       256.855       259.108    
  33  0.831459     -0.184574      -4.40243       4.40243       277.562       281.965    
  34  0.627278     -0.466365      -11.1237       11.1237       308.952       320.076    
  35  0.918890     -0.845891E-01  -2.01761       2.01761       284.201       286.219    
  36  0.475784     -0.742791      -17.7170       17.7170       283.393       301.110    
  37  0.344524      -1.06559      -25.4164       25.4164       319.053       344.469    
  38  0.286778      -1.24905      -29.7921       29.7921       315.749       345.541    
  39  0.336148      -1.09020      -26.0034       26.0034       278.568       304.571    
  40  0.709840     -0.342716      -8.17443       8.17443       319.358       327.532    
  41  0.219827      -1.51491      -36.1335       36.1335       319.305       355.439    
  42  0.347594      -1.05672      -25.2048       25.2048       320.091       345.296    
  43  0.905734     -0.990099E-01  -2.36157       2.36157       297.424       299.785    
  44  0.826231     -0.190881      -4.55287       4.55287       325.716       330.269    
  45  0.400277     -0.915599      -21.8388       21.8388       304.193       326.032    
  46  0.555153     -0.588512      -14.0371       14.0371       325.264       339.301    
  47  0.864397     -0.145723      -3.47578       3.47578       278.834       282.309    
  48  0.277380E-01  -3.58495      -85.5079       85.5079       255.057       340.565    
  49  0.993968     -0.605015E-02 -0.144308      0.144308       318.025       318.169    
  50  0.717076     -0.332573      -7.93250       7.93250       270.037       277.969    
  51  0.736253     -0.306182      -7.30301       7.30301       306.736       314.039    
  52  0.278813      -1.27722      -30.4640       30.4640       314.940       345.404    
  53  0.646460     -0.436245      -10.4053       10.4053       322.677       333.082    
  54  0.600312     -0.510306      -12.1718       12.1718       319.806       331.978    
  55  0.295434      -1.21931      -29.0829       29.0829       315.864       344.947    
  56  0.946129     -0.553767E-01  -1.32084       1.32084       294.012       295.333    
  57  0.722008     -0.325719      -7.76902       7.76902       269.425       277.194    
  58  0.789514     -0.236338      -5.63711       5.63711       277.887       283.525    
  59  0.955429     -0.455949E-01  -1.08753       1.08753       313.152       314.240    
  60  0.693546     -0.365938      -8.72830       8.72830       290.928       299.656    
  61  0.979434     -0.207808E-01 -0.495662      0.495662       333.837       334.333    
  62  0.860966     -0.149700      -3.57063       3.57063       272.208       275.778    
  63  0.329063      -1.11151      -26.5115       26.5115       318.008       344.520    
  64  0.839540     -0.174902      -4.17173       4.17173       310.973       315.145    
  65  0.511945     -0.669538      -15.9697       15.9697       315.769       331.739    
  66  0.265617      -1.32570      -31.6204       31.6204       270.158       301.779    
  67  0.793213     -0.231663      -5.52560       5.52560       319.594       325.120    
  68  0.515723     -0.662186      -15.7944       15.7944       317.896       333.690    
  69  0.928816     -0.738450E-01  -1.76134       1.76134       354.393       356.155    
  70  0.936254     -0.658686E-01  -1.57109       1.57109       311.882       313.453    
  71  0.735848     -0.306732      -7.31614       7.31614       368.077       375.393    
  72  0.194591      -1.63686      -39.0421       39.0421       344.821       383.863    
  73  0.834124     -0.181373      -4.32608       4.32608       332.461       336.787    
  74  0.129274      -2.04582      -48.7966       48.7966       353.465       402.262    
  75  0.143380      -1.94226      -46.3265       46.3265       318.942       365.268    
  76  0.683635     -0.380331      -9.07162       9.07162       401.089       410.161    
  77  0.665649     -0.406992      -9.70754       9.70754       300.437       310.144    
  78  0.822843E-01  -2.49757      -59.5719       59.5719       388.893       448.465    
  79  0.297243E-01  -3.51579      -83.8582       83.8582       315.443       399.301    
loop,thermsimp(1:2)       15   36.1447       57.5785    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250        430.99         87.49          1.13         40.30          0.39          0.05        129.36
Just calling func    0   0        129.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251        455.51         87.48          1.12         40.49          0.43          0.05        129.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    430.99
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    23.8519               313
loop is:       15
neval is:      250
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     251       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    252        255.53         87.45          1.12         40.08          0.89          0.05        129.59
iter,obj,time:    253        259.19         87.48          1.11         40.01          0.96          0.05        129.60
iter,obj,time:    254        256.49         87.50          1.12         40.01          1.00          0.05        129.68
iter,obj,time:    255        257.48         87.96          1.22         39.77          0.67          0.05        129.68
iter,obj,time:    256        256.70         87.49          1.12         40.05          0.80          0.05        129.51
iter,obj,time:    257        267.43         87.50          1.12         40.08          0.67          0.05        129.42
iter,obj,time:    258        254.97         87.39          1.10         39.92          1.14          0.05        129.61
iter,obj,time:    259        259.80         87.45          1.11         40.07          0.68          0.05        129.36
iter,obj,time:    260        262.56         87.51          1.12         40.09          0.88          0.05        129.65
iter,obj,time:    261        257.96         87.43          1.11         40.18          0.95          0.05        129.71
iter,obj,time:    262        263.97         87.41          1.11         39.97          1.07          0.05        129.61
iter,obj,time:    263        268.26         87.47          1.12         40.10          0.77          0.05        129.51
iter,obj,time:    264        265.17         87.54          1.13         40.03          1.05          0.05        129.80
iter,obj,time:    265        258.46         87.45          1.11         39.94          1.14          0.05        129.69
iter,obj,time:    266        262.15         87.46          1.11         40.05          0.95          0.05        129.62
iter,obj,time:    267        253.62         87.52          1.12         40.24          0.76          0.05        129.70
iter,obj,time:    268        263.09         87.46          1.12         40.04          1.04          0.05        129.71
iter,obj,time:    269        268.80         87.46          1.12         40.55          0.51          0.05        129.70
iter,obj,time:    270        263.73         87.45          1.11         40.06          0.95          0.05        129.62
iter,obj,time:    271        264.19         87.38          1.12         40.02          0.95          0.05        129.51
iter,obj,time:    272        260.80         87.47          1.12         40.56          0.36          0.04        129.55
iter,obj,time:    273        267.09         87.49          1.12         40.23          0.66          0.05        129.56
iter,obj,time:    274        259.73         87.45          1.11         40.08          1.14          0.05        129.83
iter,obj,time:    275        264.22         87.36          1.11         39.98          0.96          0.05        129.46
iter,obj,time:    276        256.05         87.46          1.12         40.44          0.60          0.05        129.66
iter,obj,time:    277        257.91         87.47          1.12         40.35          0.62          0.05        129.61
iter,obj,time:    278        262.07         87.39          1.11         40.02          1.08          0.05        129.65
iter,obj,time:    279        260.63         87.49          1.12         40.13          0.86          0.05        129.65
iter,obj,time:    280        270.11         87.49          1.12         40.09          0.97          0.05        129.72
iter,obj,time:    281        255.48         87.57          1.14         40.23          0.50          0.05        129.50
iter,obj,time:    282        258.82         87.44          1.11         40.10          0.80          0.05        129.50
iter,obj,time:    283        266.19         87.48          1.12         40.30          0.67          0.05        129.62
iter,obj,time:    284        265.66         87.46          1.12         39.98          1.00          0.05        129.61
iter,obj,time:    285        266.60         87.50          1.12         40.16          0.68          0.05        129.50
iter,obj,time:    286        264.01         87.51          1.12         40.48          0.34          0.05        129.50
iter,obj,time:    287        254.43         87.50          1.12         40.14          0.67          0.05        129.47
iter,obj,time:    288        265.39         87.42          1.11         40.11          0.83          0.05        129.52
iter,obj,time:    289        265.51         87.50          1.13         40.15          0.71          0.05        129.54
iter,obj,time:    290        253.02         87.44          1.11         40.04          0.91          0.05        129.56
iter,obj,time:    291        264.49         87.54          1.12         40.07          0.77          0.05        129.55
iter,obj,time:    292        269.34         87.52          1.12         40.15          0.66          0.05        129.50
iter,obj,time:    293        272.01         87.46          1.12         40.65          0.29          0.05        129.57
iter,obj,time:    294        269.90         87.46          1.11         40.14          0.81          0.05        129.58
iter,obj,time:    295        267.90         87.51          1.13         40.05          0.89          0.05        129.64
iter,obj,time:    296        251.63         87.43          1.09         39.99          1.04          0.05        129.60
iter,obj,time:    297        271.62         87.49          1.12         40.10          0.94          0.05        129.70
iter,obj,time:    298        270.23         87.49          1.12         40.16          0.71          0.05        129.52
iter,obj,time:    299        264.00         87.51          1.12         40.14          0.61          0.05        129.42
iter,obj,time:    300        272.17         87.51          1.12         40.05          1.11          0.05        129.84
iter,obj,time:    301        281.54         87.41          1.12         40.07          0.99          0.05        129.64
iter,obj,time:    302        262.72         87.56          1.12         40.07          1.12          0.05        129.92
iter,obj,time:    303        272.30         87.64          1.14         40.33          0.85          0.05        130.01
iter,obj,time:    304        274.70         87.65          1.11         40.28          1.41          0.05        130.50
iter,obj,time:    305        268.25         87.67          1.15         40.22          0.49          0.05        129.58
iter,obj,time:    306        270.35         87.43          1.12         40.41          0.59          0.04        129.59
iter,obj,time:    307        271.20         87.50          1.12         40.23          0.70          0.05        129.60
iter,obj,time:    308        273.05         87.63          1.14         40.26          0.48          0.05        129.57
iter,obj,time:    309        268.95         87.58          1.12         40.28          0.71          0.05        129.75
iter,obj,time:    310        265.69         87.53          1.14         40.26          0.60          0.05        129.57
iter,obj,time:    311        275.33         87.55          1.12         40.10          0.89          0.05        129.72
iter,obj,time:    312        276.89         87.49          1.12         40.08          1.02          0.05        129.77
iter,obj,time:    313        275.70         87.61          1.14         40.14          0.68          0.05        129.62
iter,obj,time:    314        256.86         87.51          1.12         39.99          1.11          0.04        129.77
iter,obj,time:    315        271.71         87.48          1.11         39.95          1.04          0.05        129.63
iter,obj,time:    316        271.62         87.45          1.11         40.09          0.89          0.05        129.59
iter,obj,time:    317        270.98         87.50          1.11         40.12          0.96          0.05        129.75
iter,obj,time:    318        274.31         87.46          1.11         40.08          0.86          0.05        129.57
iter,obj,time:    319        259.39         87.56          1.12         40.27          0.78          0.05        129.78
iter,obj,time:    320        264.68         87.48          1.12         40.31          0.62          0.05        129.58
iter,obj,time:    321        272.68         87.59          1.14         40.06          0.71          0.05        129.55
iter,obj,time:    322        291.62         87.60          1.15         40.13          0.54          0.05        129.47
iter,obj,time:    323        272.85         87.45          1.11         40.34          0.55          0.05        129.51
iter,obj,time:    324        285.87         87.43          1.09         39.95          1.07          0.05        129.60
iter,obj,time:    325        273.21         87.52          1.12         40.14          0.98          0.05        129.82
iter,obj,time:    326        259.97         87.47          1.12         40.03          0.91          0.05        129.58
iter,obj,time:    327        275.00         87.45          1.12         40.08          0.84          0.05        129.55
iter,obj,time:    328        302.58         87.54          1.12         40.09          1.12          0.05        129.92
iter,obj,time:    329        279.89         87.59          1.14         40.16          0.80          0.05        129.74


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     330      79
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     328




loop,nloop:      15      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    23.8519               313
loop is:       16
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    11.9259               391

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      328     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -17.4382       17.4382       256.855       274.293    
   2  0.641193     -0.444425      -5.30018       5.30018       255.531       260.831    
   3  0.353033      -1.04119      -12.4172       12.4172       259.191       271.608    
   4  0.928955     -0.736953E-01 -0.878886      0.878886       256.491       257.370    
   5  0.350257      -1.04909      -12.5114       12.5114       257.482       269.994    
   6  0.682617     -0.381821      -4.55358       4.55358       256.702       261.255    
   7  0.162763      -1.81546      -21.6511       21.6511       267.434       289.085    
   8  0.874032     -0.134639      -1.60569       1.60569       254.969       256.575    
   9  0.518909     -0.656027      -7.82374       7.82374       259.800       267.624    
  10  0.461984     -0.772226      -9.20952       9.20952       262.561       271.770    
  11  0.449468     -0.799691      -9.53707       9.53707       257.956       267.493    
  12  0.523281     -0.647637      -7.72369       7.72369       263.969       271.693    
  13  0.637377     -0.450394      -5.37138       5.37138       268.257       273.628    
  14  0.596329     -0.516963      -6.16528       6.16528       265.169       271.334    
  15  0.286246      -1.25090      -14.9182       14.9182       258.462       273.380    
  16  0.590425     -0.526913      -6.28394       6.28394       262.153       268.437    
  17  0.853637     -0.158249      -1.88727       1.88727       253.619       255.507    
  18  0.245572      -1.40416      -16.7460       16.7460       263.089       279.835    
  19  0.375654     -0.979088      -11.6765       11.6765       268.797       280.473    
  20  0.281654      -1.26708      -15.1111       15.1111       263.729       278.840    
  21  0.443392     -0.813302      -9.69939       9.69939       264.187       273.887    
  22  0.442934     -0.814335      -9.71171       9.71171       260.797       270.509    
  23  0.171790      -1.76149      -21.0074       21.0074       267.086       288.094    
  24  0.802582     -0.219921      -2.62277       2.62277       259.734       262.357    
  25  0.162733      -1.81564      -21.6533       21.6533       264.220       285.873    
  26  0.838320     -0.176355      -2.10320       2.10320       256.053       258.156    
  27  0.210754      -1.55706      -18.5695       18.5695       257.912       276.482    
  28  0.240377      -1.42554      -17.0010       17.0010       262.075       279.076    
  29  0.173042E-01  -4.05680      -48.3812       48.3812       260.632       309.013    
  30  0.640146     -0.446059      -5.31967       5.31967       270.112       275.432    
  31  0.749210     -0.288736      -3.44345       3.44345       255.478       258.921    
  32  0.666162     -0.406222      -4.84458       4.84458       258.823       263.668    
  33  0.601746     -0.507920      -6.05742       6.05742       266.191       272.248    
  34  0.677044     -0.390020      -4.65135       4.65135       265.663       270.315    
  35  0.290379      -1.23657      -14.7473       14.7473       266.604       281.352    
  36  0.439723     -0.821610      -9.79848       9.79848       264.008       273.807    
  37  0.680091     -0.385528      -4.59779       4.59779       254.428       259.026    
  38  0.803784     -0.218425      -2.60492       2.60492       265.393       267.998    
  39  0.507823     -0.677622      -8.08129       8.08129       265.510       273.591    
  40  0.894573     -0.111408      -1.32865       1.32865       253.023       254.352    
  41  0.826908     -0.190062      -2.26667       2.26667       264.495       266.761    
  42  0.815562     -0.203878      -2.43144       2.43144       269.338       271.770    
  43  0.352457      -1.04283      -12.4367       12.4367       272.012       284.449    
  44  0.104059      -2.26279      -26.9860       26.9860       269.896       296.882    
  45  0.601892     -0.507677      -6.05452       6.05452       267.897       273.951    
  46  0.988184     -0.118862E-01 -0.141754      0.141754       251.634       251.775    
  47  0.733912     -0.309366      -3.68948       3.68948       271.619       275.308    
  48  0.107394      -2.23125      -26.6097       26.6097       270.234       296.844    
  49  0.592150     -0.523995      -6.24914       6.24914       263.996       270.245    
  50  0.821901     -0.196136      -2.33910       2.33910       272.169       274.508    
  51  0.400070E-01  -3.21870      -38.3861       38.3861       281.543       319.929    
  52  0.271211      -1.30486      -15.5617       15.5617       262.718       278.280    
  53  0.296309      -1.21635      -14.5061       14.5061       272.298       286.804    
  54  0.436334     -0.829346      -9.89074       9.89074       274.698       284.588    
  55  0.372372     -0.987863      -11.7812       11.7812       268.251       280.032    
  56  0.806182     -0.215446      -2.56939       2.56939       270.352       272.922    
  57  0.194087      -1.63945      -19.5520       19.5520       271.200       290.752    
  58  0.739876     -0.301273      -3.59296       3.59296       273.046       276.639    
  59  0.348380      -1.05446      -12.5755       12.5755       268.952       281.528    
  60  0.850149     -0.162343      -1.93610       1.93610       265.692       267.628    
  61  0.123296      -2.09317      -24.9630       24.9630       275.326       300.289    
  62  0.855160     -0.156467      -1.86602       1.86602       276.888       278.754    
  63  0.959969E-01  -2.34344      -27.9477       27.9477       275.700       303.648    
  64  0.739916     -0.301218      -3.59231       3.59231       256.858       260.451    
  65  0.470406     -0.754159      -8.99406       8.99406       271.707       280.701    
  66  0.559264     -0.581134      -6.93057       6.93057       271.619       278.549    
  67  0.935836     -0.663155E-01 -0.790875      0.790875       270.978       271.769    
  68  0.190508      -1.65806      -19.7740       19.7740       274.313       294.087    
  69  0.410140     -0.891256      -10.6291       10.6291       259.391       270.020    
  70  0.289980E-01  -3.54053      -42.2241       42.2241       264.684       306.908    
  71  0.401138     -0.913450      -10.8938       10.8938       272.682       283.576    
  72  0.695873     -0.362588      -4.32420       4.32420       291.619       295.944    
  73  0.405124     -0.903562      -10.7758       10.7758       272.849       283.625    
  74  0.584331     -0.537288      -6.40766       6.40766       285.870       292.277    
  75  0.518482     -0.656851      -7.83356       7.83356       273.212       281.045    
  76  0.938968     -0.629737E-01 -0.751021      0.751021       259.965       260.716    
  77  0.972563E-01  -2.33041      -27.7923       27.7923       274.996       302.788    
  78  0.135217      -2.00088      -23.8623       23.8623       302.583       326.445    
  79  0.796715     -0.227258      -2.71027       2.71027       279.891       282.601    
loop,thermsimp(1:2)       16   17.4382       5.30018    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330        293.50         87.50          1.12         40.11          0.85          0.05        129.62
Just calling func    0   0        129.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    293.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       16
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       17
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      329     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427      -3.01043       3.01043       251.634       254.644    
   2  0.350417      -1.04863      -12.5059       12.5059       253.023       265.529    
   3  0.533846     -0.627648      -7.48530       7.48530       253.619       261.105    
   4  0.622955     -0.473280      -5.64432       5.64432       254.969       260.614    
   5  0.661091E-01  -2.71645      -32.3962       32.3962       256.491       288.887    
   6  0.759206     -0.275482      -3.28538       3.28538       256.053       259.339    
   7  0.430535     -0.842727      -10.0503       10.0503       255.478       265.528    
   8  0.257678      -1.35604      -16.1721       16.1721       254.428       270.600    
   9  0.296561      -1.21550      -14.4960       14.4960       256.858       271.354    
  10  0.805929     -0.215760      -2.57314       2.57314       259.965       262.538    
  11  0.421616     -0.863661      -10.3000       10.3000       255.531       265.831    
  12  0.767803     -0.264223      -3.15111       3.15111       256.702       259.853    
  13  0.605260     -0.502097      -5.98798       5.98798       259.734       265.722    
  14  0.566784     -0.567776      -6.77127       6.77127       258.823       265.595    
  15  0.292740      -1.22847      -14.6507       14.6507       264.495       279.145    
  16  0.898463     -0.107069      -1.27690       1.27690       257.956       259.233    
  17  0.218067      -1.52295      -18.1627       18.1627       259.800       277.963    
  18  0.856756     -0.154603      -1.84378       1.84378       265.692       267.536    
  19  0.338883      -1.08210      -12.9051       12.9051       265.393       278.298    
  20  0.796034     -0.228113      -2.72047       2.72047       262.153       264.873    
  21  0.778636     -0.250212      -2.98401       2.98401       257.482       260.466    
  22  0.575989     -0.551667      -6.57915       6.57915       259.391       265.970    
  23  0.355531      -1.03414      -12.3331       12.3331       263.996       276.329    
  24  0.164949      -1.80212      -21.4920       21.4920       265.663       287.155    
  25  0.315998      -1.15202      -13.7389       13.7389       260.797       274.536    
  26  0.330933      -1.10584      -13.1882       13.1882       265.169       278.357    
  27  0.429436     -0.845283      -10.0808       10.0808       259.191       269.271    
  28  0.464808     -0.766130      -9.13683       9.13683       263.969       273.106    
  29  0.192211      -1.64916      -19.6678       19.6678       270.978       290.646    
  30  0.866849     -0.142891      -1.70410       1.70410       269.338       271.043    
  31  0.474973     -0.744498      -8.87884       8.87884       262.561       271.440    
  32  0.667713     -0.403897      -4.81685       4.81685       266.191       271.008    
  33  0.994155     -0.586200E-02 -0.699099E-01  0.699099E-01   270.352       270.422    
  34  0.577739     -0.548634      -6.54298       6.54298       258.462       265.005    
  35  0.381919     -0.962546      -11.4793       11.4793       265.510       276.989    
  36  0.733204     -0.310331      -3.70099       3.70099       268.257       271.958    
  37  0.492382     -0.708500      -8.44953       8.44953       264.008       272.458    
  38  0.188899E-01  -3.96913      -47.3356       47.3356       264.187       311.523    
  39  0.741920E-01  -2.60110      -31.0206       31.0206       267.897       298.917    
  40  0.210592      -1.55783      -18.5786       18.5786       256.855       275.434    
  41  0.682838     -0.381498      -4.54973       4.54973       272.169       276.718    
  42  0.656831     -0.420328      -5.01281       5.01281       271.619       276.631    
  43  0.444670     -0.810424      -9.66507       9.66507       270.112       279.777    
  44  0.872301     -0.136621      -1.62933       1.62933       257.912       259.541    
  45  0.932741     -0.696282E-01 -0.830382      0.830382       273.046       273.876    
  46  0.601727     -0.507951      -6.05780       6.05780       262.718       268.776    
  47  0.940344     -0.615097E-01 -0.733561      0.733561       271.619       272.352    
  48  0.208477E-01  -3.87051      -46.1595       46.1595       276.888       323.047    
  49  0.257831      -1.35545      -16.1650       16.1650       263.729       279.894    
  50  0.522803     -0.648550      -7.73457       7.73457       262.075       269.809    
  51  0.676437     -0.390915      -4.66203       4.66203       263.089       267.751    
  52  0.612346     -0.490458      -5.84917       5.84917       268.251       274.100    
  53  0.206854      -1.57574      -18.7922       18.7922       268.797       287.589    
  54  0.201156      -1.60367      -19.1253       19.1253       271.707       290.833    
  55  0.785118     -0.241921      -2.88513       2.88513       273.212       276.097    
  56  0.534951     -0.625580      -7.46063       7.46063       266.604       274.065    
  57  0.147432      -1.91439      -22.8309       22.8309       268.952       291.783    
  58  0.696605     -0.361537      -4.31167       4.31167       279.891       284.202    
  59  0.711810     -0.339944      -4.05415       4.05415       272.682       276.736    
  60  0.934269     -0.679906E-01 -0.810851      0.810851       272.849       273.660    
  61  0.821040     -0.197183      -2.35159       2.35159       272.012       274.364    
  62  0.682914     -0.381386      -4.54838       4.54838       274.698       279.246    
  63  0.660876     -0.414189      -4.93960       4.93960       264.220       269.160    
  64  0.653213     -0.425852      -5.07868       5.07868       272.298       277.376    
  65  0.327611      -1.11593      -13.3085       13.3085       267.086       280.395    
  66  0.191936      -1.65059      -19.6849       19.6849       267.434       287.119    
  67  0.417647E-01  -3.17570      -37.8733       37.8733       271.200       309.073    
  68  0.629872     -0.462239      -5.51264       5.51264       285.870       291.382    
  69  0.391125     -0.938727      -11.1952       11.1952       274.313       285.508    
  70  0.111121      -2.19714      -26.2030       26.2030       291.619       317.822    
  71  0.315632      -1.15318      -13.7527       13.7527       270.234       283.987    
  72  0.335886      -1.09098      -13.0110       13.0110       269.896       282.907    
  73  0.742251     -0.298067      -3.55473       3.55473       275.326       278.881    
  74  0.319217      -1.14188      -13.6180       13.6180       274.996       288.614    
  75  0.903047     -0.101981      -1.21622       1.21622       275.700       276.917    
  76  0.375478     -0.979555      -11.6821       11.6821       264.684       276.366    
  77  0.549366E-02  -5.20416      -62.0645       62.0645       260.632       322.696    
  78  0.400396     -0.915300      -10.9158       10.9158       281.543       292.458    
  79  0.598398     -0.513499      -6.12397       6.12397       293.499       299.623    
loop,thermsimp(1:2)       17   3.01043       12.5059    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331        249.42         87.48          1.10         40.14          0.98          0.05        129.76
Just calling func    0   0        129.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    332        282.05         87.43          1.11         40.07          0.73          0.05        129.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    249.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       17
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       18
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      331     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -17.0001       17.0001       251.634       268.634    
   2  0.711556E-02  -4.94547      -58.9794       58.9794       257.956       316.935    
   3  0.909796     -0.945347E-01  -1.12742       1.12742       256.053       257.181    
   4  0.659218     -0.416702      -4.96956       4.96956       257.912       262.882    
   5  0.833482     -0.182144      -2.17224       2.17224       256.702       258.874    
   6  0.726295E-01  -2.62238      -31.2744       31.2744       257.482       288.757    
   7  0.687091     -0.375288      -4.47567       4.47567       254.969       259.445    
   8  0.860775     -0.149922      -1.78796       1.78796       253.619       255.407    
   9  0.846215     -0.166982      -1.99142       1.99142       259.965       261.957    
  10  0.398551     -0.919919      -10.9709       10.9709       262.153       273.124    
  11  0.416092     -0.876849      -10.4573       10.4573       258.462       268.919    
  12  0.463389     -0.769189      -9.17330       9.17330       255.478       264.651    
  13  0.207356      -1.57332      -18.7633       18.7633       253.023       271.787    
  14  0.133003      -2.01738      -24.0592       24.0592       258.823       282.883    
  15  0.464971     -0.765779      -9.13264       9.13264       259.734       268.867    
  16  0.568281     -0.565140      -6.73983       6.73983       255.531       262.271    
  17  0.638811     -0.448147      -5.34457       5.34457       259.391       264.736    
  18  0.865664     -0.144259      -1.72042       1.72042       265.692       267.413    
  19  0.475002     -0.744436      -8.87811       8.87811       263.089       271.967    
  20  0.537086     -0.621597      -7.41313       7.41313       262.718       270.132    
  21  0.782345     -0.245459      -2.92733       2.92733       264.220       267.147    
  22  0.725469     -0.320937      -3.82748       3.82748       259.191       263.018    
  23  0.701426E-01  -2.65723      -31.6899       31.6899       262.075       293.765    
  24  0.297043      -1.21388      -14.4767       14.4767       270.352       284.829    
  25  0.444870     -0.809973      -9.65969       9.65969       254.428       264.088    
  26  0.685684     -0.377338      -4.50011       4.50011       266.191       270.691    
  27  0.651244     -0.428871      -5.11469       5.11469       269.338       274.453    
  28  0.269082      -1.31274      -15.6556       15.6556       256.858       272.514    
  29  0.177107      -1.73100      -20.6438       20.6438       262.561       283.205    
  30  0.766464     -0.265968      -3.17192       3.17192       268.257       271.429    
  31  0.801833     -0.220855      -2.63390       2.63390       271.619       274.252    
  32  0.759414     -0.275209      -3.28212       3.28212       264.008       267.291    
  33  0.566307     -0.568618      -6.78131       6.78131       263.969       270.751    
  34  0.297948      -1.21084      -14.4404       14.4404       272.849       287.290    
  35  0.430097E-01  -3.14633      -37.5229       37.5229       273.046       310.569    
  36  0.529414     -0.635984      -7.58470       7.58470       266.604       274.189    
  37  0.717133     -0.332494      -3.96530       3.96530       268.251       272.216    
  38  0.209457      -1.56323      -18.6430       18.6430       272.012       290.655    
  39  0.732428     -0.311390      -3.71362       3.71362       260.797       264.511    
  40  0.697782     -0.359849      -4.29154       4.29154       256.855       261.147    
  41  0.977227     -0.230362E-01 -0.274728      0.274728       273.212       273.487    
  42  0.744700     -0.294773      -3.51545       3.51545       263.996       267.512    
  43  0.713341     -0.337796      -4.02854       4.02854       264.684       268.713    
  44  0.497823     -0.697510      -8.31847       8.31847       271.619       279.937    
  45  0.968758     -0.317404E-01 -0.378534      0.378534       272.169       272.547    
  46  0.287665      -1.24596      -14.8592       14.8592       272.682       287.541    
  47  0.964672     -0.359674E-01 -0.428945      0.428945       275.700       276.129    
  48  0.733769     -0.309561      -3.69181       3.69181       265.510       269.202    
  49  0.692680     -0.367187      -4.37906       4.37906       272.298       276.677    
  50  0.328873      -1.11208      -13.2626       13.2626       259.800       273.063    
  51  0.744920     -0.294478      -3.51193       3.51193       265.393       268.905    
  52  0.655188     -0.422834      -5.04269       5.04269       265.169       270.211    
  53  0.255467      -1.36466      -16.2749       16.2749       275.326       291.601    
  54  0.262199E-02  -5.94382      -70.8857       70.8857       264.495       335.380    
  55  0.538310     -0.619321      -7.38598       7.38598       274.698       282.084    
  56  0.456270     -0.784671      -9.35795       9.35795       270.112       279.470    
  57  0.990209     -0.983957E-02 -0.117346      0.117346       263.729       263.846    
  58  0.262373      -1.33799      -15.9568       15.9568       267.086       283.043    
  59  0.645275     -0.438079      -5.22451       5.22451       269.896       275.120    
  60  0.423351     -0.859554      -10.2510       10.2510       270.234       280.485    
  61  0.353204      -1.04071      -12.4114       12.4114       279.891       292.302    
  62  0.721881     -0.325895      -3.88661       3.88661       274.313       278.199    
  63  0.213966      -1.54194      -18.3891       18.3891       267.434       285.823    
  64  0.176516      -1.73434      -20.6837       20.6837       265.663       286.347    
  65  0.885542     -0.121555      -1.44966       1.44966       268.797       270.246    
  66  0.551521     -0.595076      -7.09684       7.09684       274.996       282.093    
  67  0.847646     -0.165292      -1.97126       1.97126       256.491       258.462    
  68  0.825749E-01  -2.49405      -29.7439       29.7439       270.978       300.722    
  69  0.123448      -2.09193      -24.9483       24.9483       271.707       296.656    
  70  0.384918     -0.954725      -11.3860       11.3860       285.870       297.256    
  71  0.991208     -0.883065E-02 -0.105314      0.105314       268.952       269.058    
  72  0.864006     -0.146175      -1.74328       1.74328       281.543       283.286    
  73  0.128713      -2.05017      -24.4502       24.4502       267.897       292.347    
  74  0.699101     -0.357960      -4.26901       4.26901       293.499       297.768    
  75  0.265982      -1.32433      -15.7939       15.7939       271.200       286.994    
  76  0.829335     -0.187131      -2.23171       2.23171       264.187       266.419    
  77  0.732371     -0.311468      -3.71455       3.71455       291.619       295.334    
  78  0.633992     -0.455719      -5.43488       5.43488       260.632       266.066    
  79  0.588279     -0.530553      -6.32735       6.32735       249.422       255.749    
loop,thermsimp(1:2)       18   17.0001       58.9794    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333        255.50         87.47          1.11         39.88          1.03          0.05        129.53
Just calling func    0   0        129.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        253.41         87.51          1.11         40.07          0.91          0.05        129.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    253.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       18
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       19
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      333     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453      -3.88133       3.88133       253.619       257.501    
   2  0.240049      -1.42691      -17.0173       17.0173       249.422       266.439    
   3  0.365543      -1.00637      -12.0019       12.0019       256.053       268.055    
   4  0.399010     -0.918769      -10.9572       10.9572       256.491       267.448    
   5  0.685268     -0.377945      -4.50735       4.50735       256.702       261.209    
   6  0.335805E-01  -3.39381      -40.4744       40.4744       254.969       295.444    
   7  0.820520     -0.197817      -2.35915       2.35915       256.855       259.214    
   8  0.756560     -0.278973      -3.32702       3.32702       259.965       263.292    
   9  0.869461     -0.139882      -1.66823       1.66823       255.531       257.199    
  10  0.787378     -0.239047      -2.85086       2.85086       257.912       260.763    
  11  0.330926      -1.10586      -13.1884       13.1884       259.191       272.379    
  12  0.339084E-01  -3.38409      -40.3585       40.3585       263.729       304.087    
  13  0.672805     -0.396300      -4.72625       4.72625       254.428       259.154    
  14  0.822413     -0.195513      -2.33168       2.33168       260.797       263.129    
  15  0.928870     -0.737865E-01 -0.879973      0.879973       255.478       256.358    
  16  0.778944     -0.249816      -2.97929       2.97929       259.391       262.371    
  17  0.301602E-01  -3.50123      -41.7555       41.7555       260.632       302.387    
  18  0.292626      -1.22886      -14.6553       14.6553       264.187       278.843    
  19  0.149515      -1.90036      -22.6636       22.6636       264.220       286.884    
  20  0.500330E-01  -2.99507      -35.7191       35.7191       264.008       299.727    
  21  0.759114E-01  -2.57819      -30.7473       30.7473       265.692       296.440    
  22  0.613440     -0.488673      -5.82788       5.82788       263.996       269.824    
  23  0.132502      -2.02116      -24.1042       24.1042       251.634       275.738    
  24  0.189750E-02  -6.26722      -74.7425       74.7425       264.684       339.427    
  25  0.507622     -0.678018      -8.08601       8.08601       259.734       267.820    
  26  0.378733     -0.970924      -11.5792       11.5792       265.393       276.972    
  27  0.139411      -1.97033      -23.4980       23.4980       258.462       281.960    
  28  0.298599      -1.20865      -14.4143       14.4143       268.952       283.367    
  29  0.767617     -0.264464      -3.15398       3.15398       265.510       268.664    
  30  0.656077     -0.421478      -5.02652       5.02652       262.718       267.745    
  31  0.701883     -0.353988      -4.22164       4.22164       265.169       269.390    
  32  0.940950     -0.608655E-01 -0.725878      0.725878       268.797       269.522    
  33  0.621043     -0.476355      -5.68098       5.68098       266.191       271.872    
  34  0.622910     -0.473353      -5.64518       5.64518       263.969       269.614    
  35  0.525019     -0.644320      -7.68413       7.68413       268.257       275.941    
  36  0.871126     -0.137969      -1.64541       1.64541       253.023       254.669    
  37  0.475532     -0.743322      -8.86481       8.86481       263.089       271.953    
  38  0.320094      -1.13914      -13.5853       13.5853       268.251       281.836    
  39  0.688986     -0.372534      -4.44282       4.44282       256.858       261.301    
  40  0.831218     -0.184863      -2.20467       2.20467       272.169       274.373    
  41  0.639633     -0.446861      -5.32923       5.32923       259.800       265.129    
  42  0.628257     -0.464807      -5.54326       5.54326       262.153       267.696    
  43  0.925835     -0.770596E-01 -0.919008      0.919008       273.212       274.131    
  44  0.611089     -0.492512      -5.87367       5.87367       266.604       272.478    
  45  0.423003E-01  -3.16296      -37.7213       37.7213       271.619       309.340    
  46  0.430763     -0.842198      -10.0440       10.0440       269.338       279.382    
  47  0.374764     -0.981459      -11.7048       11.7048       269.896       281.601    
  48  0.109336      -2.21333      -26.3960       26.3960       275.700       302.096    
  49  0.642636E-02  -5.04735      -60.1944       60.1944       272.298       332.492    
  50  0.232984      -1.45679      -17.3735       17.3735       274.313       291.686    
  51  0.169005E-01  -4.08041      -48.6628       48.6628       270.112       318.775    
  52  0.183441      -1.69586      -20.2247       20.2247       271.619       291.843    
  53  0.257429      -1.35701      -16.1836       16.1836       270.234       286.418    
  54  0.784332     -0.242922      -2.89708       2.89708       274.698       277.595    
  55  0.417881     -0.872558      -10.4061       10.4061       274.996       285.402    
  56  0.597408E-01  -2.81774      -33.6042       33.6042       258.823       292.428    
  57  0.854186E-01  -2.46019      -29.3401       29.3401       267.086       296.426    
  58  0.484163     -0.725335      -8.65030       8.65030       262.561       271.211    
  59  0.392210     -0.935958      -11.1622       11.1622       281.543       292.705    
  60  0.544229     -0.608385      -7.25556       7.25556       270.352       277.608    
  61  0.846696     -0.166413      -1.98463       1.98463       267.434       269.419    
  62  0.273327      -1.29709      -15.4690       15.4690       265.663       281.132    
  63  0.253790      -1.37125      -16.3534       16.3534       271.200       287.553    
  64  0.683640     -0.380324      -4.53573       4.53573       272.849       277.385    
  65  0.707324     -0.346266      -4.12955       4.12955       272.682       276.812    
  66  0.664908     -0.408107      -4.86706       4.86706       257.482       262.349    
  67  0.269947      -1.30953      -15.6174       15.6174       272.012       287.629    
  68  0.112661      -2.18338      -26.0388       26.0388       275.326       301.365    
  69  0.392076     -0.936299      -11.1662       11.1662       279.891       291.057    
  70  0.711292     -0.340672      -4.06283       4.06283       267.897       271.959    
  71  0.887428     -0.119427      -1.42428       1.42428       262.075       263.499    
  72  0.620380     -0.477423      -5.69372       5.69372       291.619       297.313    
  73  0.295869      -1.21784      -14.5239       14.5239       271.707       286.231    
  74  0.625911     -0.468547      -5.58787       5.58787       285.870       291.457    
  75  0.644390     -0.439451      -5.24087       5.24087       293.499       298.740    
  76  0.738700     -0.302863      -3.61192       3.61192       270.978       274.590    
  77  0.523613     -0.647003      -7.71612       7.71612       273.046       280.762    
  78  0.241564      -1.42062      -16.9422       16.9422       257.956       274.898    
  79  0.105035      -2.25346      -26.8747       26.8747       253.410       280.285    
loop,thermsimp(1:2)       19   3.88133       17.0173    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335        318.10         87.47          1.12         40.50          0.40          0.05        129.54
Just calling func    0   0        129.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    318.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       19
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       20
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      334     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -13.8962       13.8962       253.023       266.920    
   2  0.362384      -1.01505      -12.1054       12.1054       255.478       267.583    
   3  0.900627     -0.104664      -1.24822       1.24822       255.531       256.779    
   4  0.233893      -1.45289      -17.3271       17.3271       253.619       270.946    
   5  0.183338      -1.69642      -20.2315       20.2315       254.428       274.659    
   6  0.351708      -1.04495      -12.4620       12.4620       256.855       269.317    
   7  0.979617     -0.205938E-01 -0.245600      0.245600       257.912       258.158    
   8  0.801294     -0.221527      -2.64192       2.64192       256.702       259.343    
   9  0.423893     -0.858275      -10.2357       10.2357       256.858       267.094    
  10  0.486446     -0.720630      -8.59420       8.59420       257.482       266.077    
  11  0.430531     -0.842736      -10.0504       10.0504       259.391       269.442    
  12  0.214629      -1.53884      -18.3522       18.3522       260.797       279.149    
  13  0.860310     -0.150463      -1.79441       1.79441       259.965       261.760    
  14  0.450659     -0.797045      -9.50551       9.50551       262.075       271.580    
  15  0.867432     -0.142218      -1.69608       1.69608       259.800       261.496    
  16  0.850327     -0.162134      -1.93360       1.93360       249.422       251.355    
  17  0.914193     -0.897130E-01  -1.06991       1.06991       256.491       257.561    
  18  0.908448     -0.960172E-01  -1.14510       1.14510       262.153       263.298    
  19  0.349788E-01  -3.35301      -39.9878       39.9878       262.718       302.706    
  20  0.825048     -0.192314      -2.29353       2.29353       259.734       262.027    
  21  0.628933     -0.463730      -5.53042       5.53042       256.053       261.584    
  22  0.756366     -0.279229      -3.33007       3.33007       265.510       268.840    
  23  0.545707     -0.605674      -7.22323       7.22323       265.169       272.392    
  24  0.653619     -0.425231      -5.07128       5.07128       267.434       272.505    
  25  0.781643     -0.246357      -2.93804       2.93804       268.797       271.735    
  26  0.444411     -0.811005      -9.67200       9.67200       263.969       273.641    
  27  0.223111      -1.50008      -17.8899       17.8899       263.996       281.886    
  28  0.143901      -1.93863      -23.1200       23.1200       262.561       285.681    
  29  0.419282E-01  -3.17180      -37.8267       37.8267       266.191       304.017    
  30  0.407367     -0.898040      -10.7100       10.7100       263.089       273.799    
  31  0.722138     -0.325538      -3.88235       3.88235       267.897       271.779    
  32  0.290143      -1.23738      -14.7569       14.7569       259.191       273.947    
  33  0.236931E-01  -3.74257      -44.6337       44.6337       266.604       311.238    
  34  0.198981      -1.61454      -19.2550       19.2550       273.212       292.467    
  35  0.765966     -0.266617      -3.17966       3.17966       272.169       275.348    
  36  0.522733     -0.648684      -7.73617       7.73617       270.978       278.715    
  37  0.297579E-01  -3.51466      -41.9156       41.9156       257.956       299.872    
  38  0.175475      -1.74026      -20.7542       20.7542       251.634       272.388    
  39  0.311931      -1.16497      -13.8934       13.8934       268.257       282.150    
  40  0.310920      -1.16822      -13.9321       13.9321       272.682       286.614    
  41  0.122272      -2.10150      -25.0624       25.0624       265.393       290.455    
  42  0.949359     -0.519686E-01 -0.619774      0.619774       272.849       273.469    
  43  0.500750     -0.691648      -8.24856       8.24856       274.698       282.946    
  44  0.729401E-01  -2.61812      -31.2235       31.2235       270.352       301.576    
  45  0.952528     -0.486360E-01 -0.580030      0.580030       264.187       264.767    
  46  0.718842     -0.330114      -3.93692       3.93692       269.338       273.275    
  47  0.529396     -0.636019      -7.58513       7.58513       253.410       260.995    
  48  0.314661      -1.15626      -13.7895       13.7895       273.046       286.835    
  49  0.947465     -0.539649E-01 -0.643582      0.643582       265.663       266.307    
  50  0.613869     -0.487974      -5.81955       5.81955       269.896       275.715    
  51  0.303056      -1.19384      -14.2377       14.2377       268.251       282.488    
  52  0.749186     -0.288769      -3.44384       3.44384       258.462       261.906    
  53  0.671119E-01  -2.70139      -32.2167       32.2167       268.952       301.169    
  54  0.545553E-02  -5.21113      -62.1476       62.1476       274.996       337.144    
  55  0.866985     -0.142734      -1.70223       1.70223       271.707       273.410    
  56  0.622088     -0.474673      -5.66093       5.66093       270.234       275.895    
  57  0.471050     -0.752790      -8.97774       8.97774       264.220       273.198    
  58  0.433456     -0.835964      -9.96966       9.96966       271.200       281.170    
  59  0.946573     -0.549070E-01 -0.654818      0.654818       272.012       272.667    
  60  0.795665     -0.228577      -2.72599       2.72599       279.891       282.617    
  61  0.536872E-01  -2.92458      -34.8784       34.8784       285.870       320.748    
  62  0.761403     -0.272592      -3.25092       3.25092       274.313       277.564    
  63  0.615271     -0.485692      -5.79234       5.79234       271.619       277.411    
  64  0.585500     -0.535288      -6.38382       6.38382       258.823       265.207    
  65  0.649114     -0.432147      -5.15377       5.15377       281.543       286.696    
  66  0.550765     -0.596448      -7.11320       7.11320       254.969       262.082    
  67  0.495492     -0.702204      -8.37444       8.37444       267.086       275.461    
  68  0.303565      -1.19216      -14.2176       14.2176       265.692       279.910    
  69  0.645152     -0.438270      -5.22678       5.22678       291.619       296.846    
  70  0.582875     -0.539782      -6.43741       6.43741       293.499       299.936    
  71  0.720704     -0.327527      -3.90607       3.90607       264.008       267.915    
  72  0.129533      -2.04382      -24.3745       24.3745       275.326       299.700    
  73  0.998938     -0.106248E-02 -0.126711E-01  0.126711E-01   275.700       275.713    
  74  0.656875     -0.420261      -5.01201       5.01201       260.632       265.644    
  75  0.598422     -0.513459      -6.12348       6.12348       263.729       269.852    
  76  0.606105     -0.500703      -5.97135       5.97135       271.619       277.590    
  77  0.547214     -0.602916      -7.19034       7.19034       270.112       277.303    
  78  0.325088      -1.12366      -13.4007       13.4007       272.298       285.698    
  79  0.584967     -0.536200      -6.39469       6.39469       318.101       324.496    
loop,thermsimp(1:2)       20   13.8962       12.1054    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336        315.96         87.45          1.12         40.20          0.59          0.05        129.41
Just calling func    0   0        129.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    315.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       20
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       21
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      335     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -14.0759       14.0759       249.422       263.498    
   2  0.575213     -0.553015      -6.59522       6.59522       255.531       262.126    
   3  0.632244     -0.458480      -5.46781       5.46781       256.491       261.959    
   4  0.819203     -0.199424      -2.37831       2.37831       257.912       260.290    
   5  0.137693E-02  -6.58790      -78.5669       78.5669       256.702       335.268    
   6  0.367814      -1.00018      -11.9281       11.9281       253.410       265.338    
   7  0.452636     -0.792666      -9.45330       9.45330       259.800       269.254    
   8  0.278102      -1.27977      -15.2625       15.2625       256.053       271.316    
   9  0.417803     -0.872745      -10.4083       10.4083       259.965       270.374    
  10  0.682140     -0.382521      -4.56192       4.56192       258.462       263.024    
  11  0.204733      -1.58605      -18.9151       18.9151       259.734       278.649    
  12  0.637442     -0.450292      -5.37016       5.37016       254.969       260.339    
  13  0.114518      -2.16702      -25.8438       25.8438       262.153       287.996    
  14  0.724207     -0.322678      -3.84825       3.84825       264.187       268.035    
  15  0.461399     -0.773492      -9.22462       9.22462       258.823       268.048    
  16  0.731739     -0.312332      -3.72485       3.72485       260.632       264.356    
  17  0.773272     -0.257124      -3.06645       3.06645       257.482       260.549    
  18  0.789195     -0.236742      -2.82337       2.82337       265.663       268.487    
  19  0.762001     -0.271807      -3.24155       3.24155       253.023       256.265    
  20  0.933384     -0.689386E-01 -0.822158      0.822158       256.858       257.680    
  21  0.694037     -0.365230      -4.35571       4.35571       255.478       259.834    
  22  0.423570     -0.859038      -10.2448       10.2448       264.008       274.253    
  23  0.272919      -1.29858      -15.4868       15.4868       265.510       280.997    
  24  0.535843     -0.623914      -7.44077       7.44077       256.855       264.296    
  25  0.902288     -0.102822      -1.22624       1.22624       259.391       260.618    
  26  0.479374     -0.735275      -8.76884       8.76884       263.729       272.497    
  27  0.494900E-01  -3.00599      -35.8492       35.8492       253.619       289.468    
  28  0.921867     -0.813539E-01 -0.970222      0.970222       262.075       263.045    
  29  0.132425      -2.02174      -24.1111       24.1111       268.797       292.908    
  30  0.640539     -0.445446      -5.31236       5.31236       267.897       273.209    
  31  0.215363      -1.53543      -18.3115       18.3115       251.634       269.945    
  32  0.437204E-01  -3.12994      -37.3275       37.3275       265.169       302.496    
  33  0.166028      -1.79560      -21.4142       21.4142       267.434       288.848    
  34  0.425825     -0.853727      -10.1815       10.1815       272.012       282.194    
  35  0.810393     -0.210235      -2.50726       2.50726       264.220       266.727    
  36  0.855958     -0.155534      -1.85489       1.85489       269.338       271.193    
  37  0.830452     -0.185786      -2.21567       2.21567       271.707       273.923    
  38  0.658784     -0.417359      -4.97740       4.97740       272.849       277.827    
  39  0.910965     -0.932509E-01  -1.11210       1.11210       263.969       265.081    
  40  0.603480     -0.505043      -6.02311       6.02311       263.089       269.112    
  41  0.702610     -0.352953      -4.20930       4.20930       259.191       263.400    
  42  0.329065      -1.11150      -13.2557       13.2557       254.428       267.684    
  43  0.790497     -0.235094      -2.80371       2.80371       272.169       274.972    
  44  0.641572     -0.443834      -5.29313       5.29313       267.086       272.379    
  45  0.650683     -0.429733      -5.12498       5.12498       275.700       280.825    
  46  0.194049E-02  -6.24481      -74.4753       74.4753       269.896       344.371    
  47  0.662053     -0.412409      -4.91837       4.91837       270.234       275.152    
  48  0.294846      -1.22130      -14.5652       14.5652       270.112       284.677    
  49  0.709874     -0.342668      -4.08665       4.08665       271.619       275.705    
  50  0.700314     -0.356226      -4.24833       4.24833       274.313       278.561    
  51  0.639811E-01  -2.74917      -32.7864       32.7864       271.619       304.405    
  52  0.251451      -1.38051      -16.4639       16.4639       270.978       287.442    
  53  0.828691     -0.187907      -2.24097       2.24097       260.797       263.038    
  54  0.962710     -0.380034E-01 -0.453227      0.453227       265.692       266.145    
  55  0.429583     -0.844940      -10.0767       10.0767       271.200       281.277    
  56  0.871108     -0.137990      -1.64566       1.64566       263.996       265.642    
  57  0.328516      -1.11317      -13.2756       13.2756       268.257       281.532    
  58  0.401423     -0.912741      -10.8853       10.8853       268.251       279.136    
  59  0.671285     -0.398562      -4.75323       4.75323       279.891       284.644    
  60  0.919587     -0.838302E-01 -0.999755      0.999755       274.698       275.697    
  61  0.209634      -1.56239      -18.6330       18.6330       262.561       281.194    
  62  0.894137     -0.111896      -1.33446       1.33446       272.298       273.632    
  63  0.623590     -0.472262      -5.63217       5.63217       272.682       278.314    
  64  0.469722     -0.755615      -9.01142       9.01142       281.543       290.554    
  65  0.927315E-01  -2.37805      -28.3605       28.3605       273.046       301.406    
  66  0.663316     -0.410504      -4.89565       4.89565       265.393       270.289    
  67  0.972420     -0.279677E-01 -0.333541      0.333541       273.212       273.545    
  68  0.594470     -0.520086      -6.20251       6.20251       291.619       297.822    
  69  0.421560     -0.863793      -10.3016       10.3016       275.326       285.627    
  70  0.878821     -0.129174      -1.54052       1.54052       257.956       259.496    
  71  0.231393      -1.46364      -17.4553       17.4553       293.499       310.954    
  72  0.209055      -1.56516      -18.6660       18.6660       268.952       287.618    
  73  0.278482      -1.27840      -15.2461       15.2461       270.352       285.598    
  74  0.725973     -0.320242      -3.81919       3.81919       262.718       266.538    
  75  0.443109     -0.813940      -9.70701       9.70701       266.191       275.898    
  76  0.992661     -0.736627E-02 -0.878498E-01  0.878498E-01   266.604       266.692    
  77  0.965181     -0.354397E-01 -0.422652      0.422652       285.870       286.292    
  78  0.169072      -1.77743      -21.1976       21.1976       318.101       339.299    
  79  0.100638      -2.29623      -27.3847       27.3847       315.962       343.347    
loop,thermsimp(1:2)       21   14.0759       6.59522    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337        260.21         87.44          1.10         40.18          0.74          0.05        129.51
Just calling func    0   0        129.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    260.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       21
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       22
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      336     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666      -2.09498       2.09498       253.023       255.118    
   2  0.801853     -0.220830      -2.63361       2.63361       256.858       259.492    
   3  0.768645     -0.263126      -3.13802       3.13802       257.956       261.094    
   4  0.855557     -0.156003      -1.86048       1.86048       255.478       257.338    
   5  0.845591     -0.167720      -2.00022       2.00022       257.912       259.912    
   6  0.350050      -1.04968      -12.5184       12.5184       254.969       267.488    
   7  0.927608     -0.751463E-01 -0.896190      0.896190       257.482       258.379    
   8  0.655345E-01  -2.72518      -32.5003       32.5003       259.391       291.892    
   9  0.355481      -1.03428      -12.3348       12.3348       256.491       268.826    
  10  0.728523     -0.316737      -3.77738       3.77738       255.531       259.308    
  11  0.573220     -0.556486      -6.63662       6.63662       258.462       265.099    
  12  0.112478      -2.18499      -26.0581       26.0581       260.797       286.855    
  13  0.338739      -1.08253      -12.9101       12.9101       262.075       274.985    
  14  0.239648      -1.42858      -17.0372       17.0372       259.191       276.228    
  15  0.918959     -0.845134E-01  -1.00790       1.00790       249.422       250.430    
  16  0.283771      -1.25959      -15.0218       15.0218       256.855       271.877    
  17  0.414404     -0.880913      -10.5057       10.5057       260.632       271.137    
  18  0.716403     -0.333512      -3.97745       3.97745       263.969       267.947    
  19  0.317726      -1.14657      -13.6739       13.6739       253.410       267.084    
  20  0.339005      -1.08174      -12.9008       12.9008       263.996       276.897    
  21  0.163059      -1.81364      -21.6294       21.6294       265.692       287.322    
  22  0.477081     -0.740069      -8.82602       8.82602       262.718       271.544    
  23  0.105851      -2.24573      -26.7824       26.7824       266.604       293.387    
  24  0.840431     -0.173840      -2.07321       2.07321       264.220       266.293    
  25  0.235315      -1.44683      -17.2548       17.2548       254.428       271.683    
  26  0.865464     -0.144489      -1.72317       1.72317       264.187       265.910    
  27  0.909462     -0.949026E-01  -1.13180       1.13180       258.823       259.955    
  28  0.152105E-01  -4.18577      -49.9192       49.9192       265.663       315.583    
  29  0.962485     -0.382371E-01 -0.456014      0.456014       263.089       263.545    
  30  0.259410      -1.34934      -16.0922       16.0922       259.800       275.892    
  31  0.364880      -1.00819      -12.0236       12.0236       251.634       263.657    
  32  0.467235     -0.760923      -9.07472       9.07472       265.393       274.468    
  33  0.844908     -0.168527      -2.00985       2.00985       259.965       261.975    
  34  0.188232      -1.67008      -19.9173       19.9173       269.338       289.256    
  35  0.496585     -0.700000      -8.34816       8.34816       256.053       264.401    
  36  0.410505     -0.890367      -10.6185       10.6185       267.086       277.705    
  37  0.533875     -0.627594      -7.48465       7.48465       263.729       271.213    
  38  0.610668     -0.493202      -5.88190       5.88190       267.897       273.778    
  39  0.241933      -1.41910      -16.9241       16.9241       273.212       290.136    
  40  0.642629     -0.442188      -5.27350       5.27350       272.298       277.571    
  41  0.775072     -0.254799      -3.03872       3.03872       271.707       274.746    
  42  0.345343      -1.06322      -12.6799       12.6799       264.008       276.688    
  43  0.844097     -0.169488      -2.02130       2.02130       272.169       274.190    
  44  0.426886     -0.851239      -10.1518       10.1518       270.234       280.386    
  45  0.594109     -0.520693      -6.20976       6.20976       274.698       280.907    
  46  0.489527     -0.714316      -8.51889       8.51889       271.619       280.137    
  47  0.313882      -1.15874      -13.8191       13.8191       266.191       280.010    
  48  0.687066     -0.375325      -4.47611       4.47611       272.849       277.326    
  49  0.394505     -0.930124      -11.0926       11.0926       272.682       283.775    
  50  0.971200     -0.292233E-01 -0.348515      0.348515       274.313       274.661    
  51  0.916939     -0.867145E-01  -1.03415       1.03415       259.734       260.768    
  52  0.968457     -0.320511E-01 -0.382240      0.382240       268.251       268.633    
  53  0.437414     -0.826876      -9.86128       9.86128       275.700       285.562    
  54  0.647516     -0.434611      -5.18315       5.18315       265.510       270.693    
  55  0.181293      -1.70764      -20.3652       20.3652       262.561       282.926    
  56  0.836714     -0.178273      -2.12607       2.12607       271.200       273.326    
  57  0.940459     -0.613876E-01 -0.732105      0.732105       268.257       268.989    
  58  0.141896      -1.95266      -23.2873       23.2873       272.012       295.299    
  59  0.111323      -2.19532      -26.1812       26.1812       279.891       306.072    
  60  0.721494E-01  -2.62902      -31.3535       31.3535       270.112       301.466    
  61  0.618358     -0.480687      -5.73265       5.73265       270.352       276.085    
  62  0.825766     -0.191444      -2.28315       2.28315       275.326       277.609    
  63  0.438611     -0.824143      -9.82869       9.82869       285.870       295.698    
  64  0.158533      -1.84179      -21.9651       21.9651       270.978       292.944    
  65  0.750786     -0.286635      -3.41839       3.41839       268.952       272.371    
  66  0.936921     -0.651566E-01 -0.777054      0.777054       262.153       262.930    
  67  0.652715     -0.426615      -5.08779       5.08779       267.434       272.522    
  68  0.471604     -0.751616      -8.96373       8.96373       253.619       262.583    
  69  0.883538     -0.123821      -1.47668       1.47668       281.543       283.019    
  70  0.267870      -1.31725      -15.7095       15.7095       268.797       284.506    
  71  0.662224     -0.412151      -4.91529       4.91529       291.619       296.535    
  72  0.652465     -0.426998      -5.09236       5.09236       273.046       278.138    
  73  0.261718      -1.34049      -15.9866       15.9866       265.169       281.155    
  74  0.929393     -0.732233E-01 -0.873257      0.873257       271.619       272.492    
  75  0.809805     -0.210962      -2.51592       2.51592       293.499       296.015    
  76  0.108145      -2.22428      -26.5267       26.5267       256.702       283.228    
  77  0.525978     -0.642496      -7.66237       7.66237       318.101       325.764    
  78  0.380873     -0.965288      -11.5120       11.5120       315.962       327.474    
  79  0.193416      -1.64291      -19.5933       19.5933       260.212       279.805    
loop,thermsimp(1:2)       22   2.09498       2.63361    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338        275.60         87.42          1.11         40.20          0.91          0.05        129.70
Just calling func    0   0        129.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    275.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       22
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       23
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      337     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456      -1.96129       1.96129       249.422       251.383    
   2  0.848474     -0.164316      -1.95962       1.95962       253.023       254.983    
   3  0.146795      -1.91872      -22.8825       22.8825       255.478       278.360    
   4  0.398624     -0.919738      -10.9687       10.9687       257.482       268.451    
   5  0.888093     -0.118679      -1.41535       1.41535       255.531       256.946    
   6  0.475009     -0.744421      -8.87792       8.87792       256.858       265.736    
   7  0.120824      -2.11342      -25.2045       25.2045       257.912       283.117    
   8  0.270052      -1.30914      -15.6127       15.6127       258.823       274.436    
   9  0.201748E-01  -3.90332      -46.5508       46.5508       259.734       306.285    
  10  0.999386     -0.614559E-03 -0.732919E-02  0.732919E-02   257.956       257.963    
  11  0.212655      -1.54808      -18.4624       18.4624       259.965       278.428    
  12  0.197911      -1.61994      -19.3193       19.3193       253.619       272.939    
  13  0.786394     -0.240297      -2.86577       2.86577       262.153       265.018    
  14  0.781263     -0.246844      -2.94385       2.94385       263.089       266.033    
  15  0.788011     -0.238244      -2.84128       2.84128       251.634       254.475    
  16  0.956387     -0.445927E-01 -0.531810      0.531810       256.053       256.585    
  17  0.717415     -0.332100      -3.96061       3.96061       258.462       262.423    
  18  0.808756     -0.212258      -2.53138       2.53138       264.187       266.719    
  19  0.756838     -0.278606      -3.32264       3.32264       264.220       267.543    
  20  0.570684     -0.560919      -6.68949       6.68949       253.410       260.099    
  21  0.946031     -0.554796E-01 -0.661647      0.661647       254.969       255.631    
  22  0.678634E-01  -2.69026      -32.0839       32.0839       263.969       296.053    
  23  0.631502     -0.459654      -5.48180       5.48180       268.251       273.732    
  24  0.114784E-01  -4.46729      -53.2766       53.2766       256.491       309.768    
  25  0.549681     -0.598417      -7.13669       7.13669       268.257       275.393    
  26  0.846433     -0.166725      -1.98835       1.98835       265.510       267.498    
  27  0.441841     -0.816805      -9.74117       9.74117       260.632       270.373    
  28  0.299100      -1.20698      -14.3943       14.3943       263.729       278.123    
  29  0.378130     -0.972517      -11.5982       11.5982       262.718       274.317    
  30  0.830469     -0.185764      -2.21541       2.21541       254.428       256.643    
  31  0.675108     -0.392883      -4.68550       4.68550       256.855       261.541    
  32  0.997619     -0.238377E-02 -0.284287E-01  0.284287E-01   268.952       268.981    
  33  0.897623     -0.108005      -1.28806       1.28806       271.619       272.907    
  34  0.591811E-01  -2.82715      -33.7165       33.7165       267.434       301.151    
  35  0.229825      -1.47044      -17.5363       17.5363       271.200       288.736    
  36  0.654017     -0.424622      -5.06402       5.06402       267.897       272.961    
  37  0.305777      -1.18490      -14.1311       14.1311       272.169       286.300    
  38  0.936135     -0.659954E-01 -0.787058      0.787058       265.393       266.180    
  39  0.698153     -0.359317      -4.28519       4.28519       274.313       278.598    
  40  0.829975     -0.186360      -2.22252       2.22252       271.707       273.930    
  41  0.951351     -0.498721E-01 -0.594771      0.594771       262.075       262.670    
  42  0.883299     -0.124092      -1.47992       1.47992       259.800       261.280    
  43  0.910087     -0.942154E-01  -1.12361       1.12361       270.352       271.476    
  44  0.590840     -0.526210      -6.27555       6.27555       259.191       265.466    
  45  0.146785      -1.91879      -22.8834       22.8834       264.008       286.892    
  46  0.830381E-01  -2.48846      -29.6772       29.6772       263.996       293.673    
  47  0.289482      -1.23966      -14.7841       14.7841       272.849       287.634    
  48  0.594462     -0.520098      -6.20266       6.20266       272.298       278.500    
  49  0.241311      -1.42167      -16.9547       16.9547       275.326       292.281    
  50  0.612368     -0.490422      -5.84875       5.84875       267.086       272.935    
  51  0.952207     -0.489727E-01 -0.584046      0.584046       273.046       273.630    
  52  0.857144     -0.154149      -1.83837       1.83837       260.212       262.050    
  53  0.221746      -1.50622      -17.9631       17.9631       266.191       284.154    
  54  0.874757     -0.133809      -1.59580       1.59580       271.619       273.214    
  55  0.474241     -0.746040      -8.89723       8.89723       270.234       279.131    
  56  0.679995E-01  -2.68826      -32.0600       32.0600       274.698       306.758    
  57  0.276977      -1.28382      -15.3108       15.3108       265.169       280.480    
  58  0.308562      -1.17583      -14.0229       14.0229       262.561       276.584    
  59  0.910099     -0.942023E-01  -1.12345       1.12345       281.543       282.666    
  60  0.189281      -1.66452      -19.8510       19.8510       256.702       276.553    
  61  0.759386     -0.275245      -3.28256       3.28256       272.682       275.965    
  62  0.464823     -0.766099      -9.13646       9.13646       268.797       277.933    
  63  0.428490     -0.847488      -10.1071       10.1071       275.700       285.808    
  64  0.377334     -0.974624      -11.6233       11.6233       260.797       272.421    
  65  0.168846      -1.77877      -21.2135       21.2135       265.692       286.906    
  66  0.816398     -0.202853      -2.41921       2.41921       269.338       271.758    
  67  0.663000     -0.410981      -4.90134       4.90134       273.212       278.113    
  68  0.805080     -0.216814      -2.58571       2.58571       259.391       261.977    
  69  0.767976E-01  -2.56658      -30.6089       30.6089       270.978       301.587    
  70  0.646958     -0.435474      -5.19344       5.19344       266.604       271.798    
  71  0.988002E-01  -2.31466      -27.6045       27.6045       272.012       299.617    
  72  0.310465      -1.16968      -13.9496       13.9496       285.870       299.819    
  73  0.957874     -0.430393E-01 -0.513284      0.513284       293.499       294.012    
  74  0.155852E-01  -4.16143      -49.6290       49.6290       291.619       341.248    
  75  0.924638     -0.783527E-01 -0.934430      0.934430       270.112       271.047    
  76  0.579513     -0.545567      -6.50640       6.50640       279.891       286.397    
  77  0.497979     -0.697197      -8.31474       8.31474       265.663       273.978    
  78  0.983690     -0.164446E-01 -0.196117      0.196117       318.101       318.297    
  79  0.155958      -1.85817      -22.1604       22.1604       275.602       297.763    
loop,thermsimp(1:2)       23   1.96129       1.95962    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    339        326.82         87.50          1.12         39.91          0.98          0.05        129.56
Just calling func    0   0        129.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    326.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       23
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       24
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      338     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -27.2214       27.2214       249.422       276.643    
   2  0.372115     -0.988552      -11.7894       11.7894       251.634       263.423    
   3  0.732875     -0.310780      -3.70635       3.70635       253.023       256.730    
   4  0.341646      -1.07398      -12.8082       12.8082       254.969       267.777    
   5  0.406512     -0.900141      -10.7350       10.7350       256.053       266.788    
   6  0.271848      -1.30251      -15.5337       15.5337       254.428       269.962    
   7  0.738418     -0.303245      -3.61648       3.61648       255.531       259.147    
   8  0.903199     -0.101813      -1.21421       1.21421       257.956       259.170    
   9  0.511789     -0.669842      -7.98850       7.98850       253.410       261.398    
  10  0.202674      -1.59616      -19.0357       19.0357       259.800       278.836    
  11  0.325695      -1.12179      -13.3785       13.3785       256.855       270.234    
  12  0.719720     -0.328893      -3.92236       3.92236       259.391       263.314    
  13  0.715609     -0.334622      -3.99068       3.99068       260.212       264.203    
  14  0.973328     -0.270339E-01 -0.322405      0.322405       258.462       258.785    
  15  0.373998     -0.983504      -11.7292       11.7292       262.075       273.804    
  16  0.977965     -0.222815E-01 -0.265728      0.265728       262.153       262.418    
  17  0.105495      -2.24909      -26.8225       26.8225       259.191       286.013    
  18  0.729809     -0.314973      -3.75635       3.75635       256.858       260.615    
  19  0.378008     -0.972839      -11.6020       11.6020       263.089       274.691    
  20  0.678326     -0.388127      -4.62878       4.62878       265.393       270.022    
  21  0.671993     -0.397507      -4.74065       4.74065       264.187       268.928    
  22  0.515926     -0.661792      -7.89250       7.89250       265.510       273.402    
  23  0.363490      -1.01200      -12.0691       12.0691       264.220       276.289    
  24  0.206319      -1.57833      -18.8231       18.8231       257.482       276.305    
  25  0.755157E-01  -2.58341      -30.8097       30.8097       268.952       299.762    
  26  0.413763     -0.882461      -10.5242       10.5242       260.632       271.156    
  27  0.279023      -1.27646      -15.2230       15.2230       270.112       285.335    
  28  0.506422     -0.680385      -8.11423       8.11423       270.352       278.466    
  29  0.643082E-02  -5.04665      -60.1861       60.1861       269.338       329.525    
  30  0.285888E-01  -3.55474      -42.3936       42.3936       266.604       308.998    
  31  0.660419     -0.414880      -4.94784       4.94784       260.797       265.745    
  32  0.739369     -0.301959      -3.60114       3.60114       271.619       275.220    
  33  0.270269      -1.30834      -15.6032       15.6032       267.086       282.689    
  34  0.663889     -0.409640      -4.88534       4.88534       253.619       258.505    
  35  0.898739E-01  -2.40935      -28.7337       28.7337       267.897       296.630    
  36  0.832427     -0.183410      -2.18734       2.18734       271.619       273.806    
  37  0.723106     -0.324200      -3.86639       3.86639       273.046       276.912    
  38  0.986274     -0.138207E-01 -0.164825      0.164825       268.251       268.415    
  39  0.812861     -0.207195      -2.47100       2.47100       271.707       274.178    
  40  0.553236     -0.591971      -7.05981       7.05981       265.663       272.723    
  41  0.693785E-01  -2.66818      -31.8205       31.8205       262.718       294.539    
  42  0.117256      -2.14340      -25.5620       25.5620       258.823       284.385    
  43  0.807809     -0.213430      -2.54535       2.54535       268.257       270.802    
  44  0.900249     -0.105084      -1.25322       1.25322       272.682       273.935    
  45  0.753470     -0.283066      -3.37583       3.37583       256.702       260.077    
  46  0.127159      -2.06232      -24.5951       24.5951       262.561       287.156    
  47  0.535389     -0.624762      -7.45088       7.45088       268.797       276.247    
  48  0.957281     -0.436582E-01 -0.520665      0.520665       273.212       273.732    
  49  0.227700      -1.47973      -17.6471       17.6471       263.729       281.376    
  50  0.636404     -0.451921      -5.38959       5.38959       255.478       260.868    
  51  0.905015     -0.998042E-01  -1.19026       1.19026       259.965       261.156    
  52  0.555191     -0.588444      -7.01775       7.01775       272.298       279.316    
  53  0.687780     -0.374286      -4.46372       4.46372       274.313       278.776    
  54  0.759422E-01  -2.57778      -30.7425       30.7425       270.234       300.976    
  55  0.374598     -0.981902      -11.7101       11.7101       265.169       276.879    
  56  0.399521     -0.917488      -10.9419       10.9419       281.543       292.485    
  57  0.997363     -0.264016E-02 -0.314864E-01  0.314864E-01   257.912       257.944    
  58  0.164658      -1.80389      -21.5130       21.5130       266.191       287.704    
  59  0.697359     -0.360454      -4.29876       4.29876       275.700       279.999    
  60  0.822795     -0.195048      -2.32613       2.32613       272.169       274.495    
  61  0.755086     -0.280923      -3.35027       3.35027       279.891       283.241    
  62  0.912857     -0.911765E-01  -1.08737       1.08737       264.008       265.096    
  63  0.891590     -0.114749      -1.36849       1.36849       265.692       267.061    
  64  0.461859     -0.772496      -9.21274       9.21274       272.849       282.062    
  65  0.695630     -0.362938      -4.32838       4.32838       271.200       275.528    
  66  0.168128      -1.78303      -21.2643       21.2643       275.326       296.590    
  67  0.552556     -0.593201      -7.07448       7.07448       263.996       271.071    
  68  0.450301E-01  -3.10043      -36.9755       36.9755       293.499       330.474    
  69  0.675538     -0.392246      -4.67790       4.67790       263.969       268.647    
  70  0.455839     -0.785615      -9.36921       9.36921       275.602       284.971    
  71  0.700226     -0.356352      -4.24983       4.24983       272.012       276.262    
  72  0.694116     -0.365117      -4.35436       4.35436       285.870       290.224    
  73  0.604722E-01  -2.80557      -33.4591       33.4591       267.434       300.893    
  74  0.194722      -1.63618      -19.5130       19.5130       270.978       290.491    
  75  0.132379      -2.02209      -24.1153       24.1153       259.734       283.849    
  76  0.923609     -0.794663E-01 -0.947710      0.947710       274.698       275.645    
  77  0.997826     -0.217652E-02 -0.259570E-01  0.259570E-01   256.491       256.517    
  78  0.179158      -1.71949      -20.5065       20.5065       318.101       338.608    
  79  0.191905      -1.65075      -19.6868       19.6868       326.823       346.510    
loop,thermsimp(1:2)       24   27.2214       11.7894    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340        291.62         87.41          1.11         40.50          0.41          0.05        129.47
Just calling func    0   0        129.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    291.62
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    11.9259               391
loop is:       24
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    95.4076      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    11.9259               391
loop is:       25
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      339     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.452332      0.452332       256.491       256.943    
   2  0.355374      -1.03458      -12.3384       12.3384       253.023       265.362    
   3  0.294461      -1.22261      -14.5808       14.5808       257.912       272.493    
   4  0.644538     -0.439222      -5.23813       5.23813       253.619       258.857    
   5  0.741622     -0.298915      -3.56485       3.56485       258.462       262.027    
   6  0.805913E-01  -2.51837      -30.0339       30.0339       255.531       285.565    
   7  0.498180     -0.696794      -8.30993       8.30993       257.956       266.266    
   8  0.771004     -0.260061      -3.10147       3.10147       256.702       259.803    
   9  0.753480     -0.283053      -3.37567       3.37567       256.858       260.234    
  10  0.460525     -0.775387      -9.24723       9.24723       255.478       264.725    
  11  0.918626     -0.848759E-01  -1.01223       1.01223       259.965       260.978    
  12  0.355379      -1.03457      -12.3382       12.3382       253.410       265.748    
  13  0.664646     -0.408501      -4.87176       4.87176       262.153       267.024    
  14  0.328018      -1.11469      -13.2937       13.2937       259.391       272.685    
  15  0.529583     -0.635665      -7.58091       7.58091       251.634       259.215    
  16  0.259823      -1.34775      -16.0732       16.0732       260.212       276.285    
  17  0.463690E-01  -3.07112      -36.6260       36.6260       264.008       300.634    
  18  0.366509      -1.00373      -11.9704       11.9704       260.797       272.768    
  19  0.794534     -0.229999      -2.74296       2.74296       256.053       258.796    
  20  0.669373     -0.401413      -4.78723       4.78723       265.692       270.479    
  21  0.798901     -0.224518      -2.67759       2.67759       254.969       257.647    
  22  0.610403     -0.493636      -5.88708       5.88708       268.251       274.138    
  23  0.267818      -1.31745      -15.7118       15.7118       263.969       279.681    
  24  0.663049     -0.410906      -4.90044       4.90044       264.187       269.088    
  25  0.782871     -0.244788      -2.91932       2.91932       254.428       257.347    
  26  0.706545     -0.347368      -4.14269       4.14269       265.393       269.536    
  27  0.120119      -2.11927      -25.2743       25.2743       256.855       282.129    
  28  0.270575      -1.30721      -15.5897       15.5897       268.257       283.846    
  29  0.505391     -0.682422      -8.13853       8.13853       263.996       272.135    
  30  0.665734     -0.406865      -4.85225       4.85225       260.632       265.484    
  31  0.836788     -0.178185      -2.12502       2.12502       265.663       267.788    
  32  0.866983     -0.142736      -1.70226       1.70226       265.510       267.212    
  33  0.552904     -0.592571      -7.06697       7.06697       273.212       280.279    
  34  0.554153     -0.590314      -7.04006       7.04006       262.075       269.115    
  35  0.592407E-01  -2.82615      -33.7045       33.7045       271.619       305.323    
  36  0.902163     -0.102960      -1.22789       1.22789       272.682       273.910    
  37  0.266638E-01  -3.62445      -43.2250       43.2250       271.707       314.932    
  38  0.897053     -0.108640      -1.29564       1.29564       272.169       273.464    
  39  0.840496     -0.173763      -2.07229       2.07229       263.089       265.161    
  40  0.288358      -1.24355      -14.8305       14.8305       271.619       286.449    
  41  0.835972E-01  -2.48175      -29.5972       29.5972       271.200       300.797    
  42  0.412070     -0.886563      -10.5731       10.5731       274.698       285.271    
  43  0.725010     -0.321570      -3.83502       3.83502       268.797       272.632    
  44  0.316556      -1.15026      -13.7179       13.7179       272.012       285.730    
  45  0.486178     -0.721181      -8.60077       8.60077       264.220       272.821    
  46  0.143341      -1.94253      -23.1665       23.1665       257.482       280.649    
  47  0.956913     -0.440430E-01 -0.525255      0.525255       249.422       249.947    
  48  0.362697      -1.01419      -12.0951       12.0951       265.169       277.264    
  49  0.951746     -0.494572E-01 -0.589824      0.589824       273.046       273.636    
  50  0.511140     -0.671112      -8.00364       8.00364       270.352       278.356    
  51  0.364891E-01  -3.31074      -39.4837       39.4837       274.313       313.796    
  52  0.377076     -0.975308      -11.6315       11.6315       259.800       271.432    
  53  0.670030E-01  -2.70302      -32.2360       32.2360       272.298       304.534    
  54  0.448832     -0.801107      -9.55396       9.55396       275.700       285.254    
  55  0.252392      -1.37677      -16.4193       16.4193       263.729       280.148    
  56  0.910592     -0.936608E-01  -1.11699       1.11699       272.849       273.966    
  57  0.801917     -0.220751      -2.63266       2.63266       267.086       269.719    
  58  0.473432     -0.747746      -8.91758       8.91758       279.891       288.808    
