nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    194.300      0.500000    
Tfreq:   78
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    194.300      0.500000    
Tfreq:   78
 Estimating   78 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        647.67         93.99          1.18         40.40          0.32          0.04        135.94
iter,obj,time:      3        677.77         88.92          1.15         40.32          0.36          0.05        130.79
iter,obj,time:      4        641.26         88.98          1.16         40.38          0.32          0.05        130.88
iter,obj,time:      5        738.31         88.93          1.16         40.51          0.20          0.04        130.85
iter,obj,time:      6        628.79         88.97          1.15         40.52          0.34          0.05        131.03
iter,obj,time:      7        692.64         88.87          1.15         40.39          0.28          0.05        130.74
iter,obj,time:      8        813.43         89.05          1.16         40.30          0.24          0.05        130.80
iter,obj,time:      9        655.48         89.01          1.16         40.27          0.35          0.05        130.84
iter,obj,time:     10        647.88         89.02          1.18         40.32          0.32          0.05        130.89
iter,obj,time:     11        621.62         88.84          1.15         40.44          0.33          0.05        130.81
iter,obj,time:     12        646.38         89.00          1.16         40.21          0.45          0.05        130.88
iter,obj,time:     13       2034.34         88.95          1.17         40.41          0.27          0.05        130.86
iter,obj,time:     14        595.47         88.90          1.15         40.91          0.30          0.05        131.31
iter,obj,time:     15        489.04         88.88          1.17         40.42          0.14          0.05        130.66
iter,obj,time:     16        649.44         88.92          1.17         40.34          0.28          0.05        130.76
iter,obj,time:     17        771.96         88.88          1.15         40.71          0.28          0.05        131.08
iter,obj,time:     18        351.87         88.65          1.12         40.54          0.57          0.05        130.93
iter,obj,time:     19        592.20         88.55          1.10         40.63          0.90          0.05        131.23
iter,obj,time:     20        306.13         88.55          1.10         40.12          0.95          0.05        130.77
iter,obj,time:     21        649.89         88.77          1.12         40.42          0.61          0.05        130.97
iter,obj,time:     22        647.52         88.55          1.10         40.79          0.86          0.05        131.35
iter,obj,time:     23        645.35         88.46          1.09         40.19          1.03          0.05        130.82
iter,obj,time:     24        647.57         88.55          1.11         40.28          0.76          0.05        130.75
iter,obj,time:     25        643.14         88.53          1.09         40.61          0.96          0.05        131.24
iter,obj,time:     26        647.67         88.58          1.11         40.29          0.75          0.05        130.78
iter,obj,time:     27        640.26         88.58          1.10         40.35          0.79          0.05        130.88
iter,obj,time:     28        670.11         88.66          1.12         40.33          0.65          0.05        130.81
iter,obj,time:     29        703.73         88.71          1.14         40.34          0.62          0.05        130.86
iter,obj,time:     30        808.19         88.59          1.09         40.43          0.85          0.05        131.00
iter,obj,time:     31        713.73         88.52          1.09         40.09          1.02          0.05        130.77
iter,obj,time:     32        739.88         88.69          1.11         40.37          0.70          0.05        130.91
iter,obj,time:     33        871.37         88.65          1.11         40.23          0.78          0.04        130.82
iter,obj,time:     34        607.95         88.60          1.11         40.99          0.65          0.05        131.39
iter,obj,time:     35        611.14         88.59          1.11         40.28          0.75          0.05        130.78
iter,obj,time:     36        655.15         88.55          1.10         40.18          1.02          0.05        130.89
iter,obj,time:     37        645.83         88.57          1.11         40.31          0.81          0.05        130.84
iter,obj,time:     38        663.65         88.57          1.09         40.21          0.91          0.05        130.83
iter,obj,time:     39        648.56         88.57          1.11         40.44          0.78          0.05        130.95
iter,obj,time:     40        655.47         88.55          1.10         40.26          1.00          0.05        130.95
iter,obj,time:     41        662.49         88.54          1.09         40.18          0.98          0.05        130.84
iter,obj,time:     42        641.81         88.64          1.11         40.21          0.84          0.05        130.84
iter,obj,time:     43        641.41         88.57          1.10         40.32          0.81          0.05        130.86
iter,obj,time:     44        644.02         88.51          1.10         40.63          0.89          0.05        131.18
iter,obj,time:     45        642.13         88.55          1.09         40.17          1.03          0.05        130.89
iter,obj,time:     46        654.35         88.62          1.11         40.27          0.74          0.05        130.79
iter,obj,time:     47        656.98         88.57          1.10         40.30          0.87          0.05        130.88
iter,obj,time:     48        659.66         88.57          1.10         40.23          0.80          0.05        130.75
iter,obj,time:     49        633.26         88.56          1.11         40.39          0.75          0.05        130.86
iter,obj,time:     50        664.99         88.50          1.09         40.74          1.02          0.05        131.40
iter,obj,time:     51        648.24         88.59          1.11         40.50          0.70          0.05        130.95
iter,obj,time:     52        640.17         88.50          1.09         40.06          1.32          0.05        131.03
iter,obj,time:     53        638.84         88.55          1.10         40.27          0.89          0.05        130.86
iter,obj,time:     54        652.31         88.64          1.11         40.41          0.62          0.05        130.84
iter,obj,time:     55        648.32         88.48          1.09         40.15          1.11          0.05        130.88
iter,obj,time:     56        630.74         88.63          1.11         40.27          0.74          0.05        130.81
iter,obj,time:     57        624.85         88.62          1.11         40.34          0.69          0.05        130.82
iter,obj,time:     58        790.74         88.32          1.09         40.12          1.06          0.04        130.63
iter,obj,time:     59        347.06         88.55          1.12         40.40          0.64          0.05        130.77
iter,obj,time:     60        647.67         88.59          1.11         40.36          0.73          0.05        130.84
iter,obj,time:     61        647.67         88.59          1.11         40.45          0.66          0.05        130.87
iter,obj,time:     62        650.55         88.48          1.09         40.66          1.04          0.04        131.32
iter,obj,time:     63        645.68         88.46          1.10         40.10          1.18          0.05        130.89
iter,obj,time:     64        552.61         88.53          1.09         40.20          0.91          0.05        130.77
iter,obj,time:     65        646.72         88.32          1.05         40.13          1.64          0.05        131.18
iter,obj,time:     66        643.88         88.51          1.08         40.24          1.04          0.05        130.91
iter,obj,time:     67        635.05         88.48          1.08         40.16          1.07          0.05        130.85
iter,obj,time:     68        650.04         88.55          1.11         40.29          0.80          0.05        130.79
iter,obj,time:     69        653.99         88.62          1.14         40.19          0.74          0.05        130.75
iter,obj,time:     70        648.44         88.58          1.15         40.25          0.96          0.05        131.00
iter,obj,time:     71        644.04         88.62          1.08         40.23          0.82          0.05        130.80
iter,obj,time:     72        651.73         88.49          1.07         40.29          1.08          0.05        130.99
iter,obj,time:     73        650.47         88.57          1.11         40.36          0.84          0.05        130.93
iter,obj,time:     74        658.95         88.57          1.10         40.28          0.70          0.05        130.71
iter,obj,time:     75        643.88         88.63          1.11         40.25          0.72          0.05        130.76
iter,obj,time:     76        668.82         88.60          1.09         40.23          0.81          0.05        130.78
iter,obj,time:     77        633.52         88.50          1.08         40.11          1.12          0.05        130.86
iter,obj,time:     78        647.53         88.61          1.10         40.45          0.76          0.05        130.97
iter,obj,time:     79        650.69         88.51          1.09         40.30          0.80          0.04        130.75
iter,obj,time:     80        647.16         88.46          1.09         40.00          1.16          0.05        130.76

    1    647.67        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    2    677.77      -0.3361     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    3    641.26        1.664     -3.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    4    738.31        1.664     -1.238      3.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    5    628.79        1.664     -1.238      5.999     -102.6     -1.496    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    6    692.64        1.664     -1.238      5.999     -102.6     0.5040    
                      -2.204      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    7    813.43        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      1.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    8    655.48        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      1.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

    9    647.88        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     -1.045    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   10    621.62        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                     -0.1604     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   11    646.38        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -3.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   12    2034.3        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320     0.4860    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   13    595.47        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.2785E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   14    489.04        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -1.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   15    649.44        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                     -0.1588      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   16    771.96        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.7564E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   17    351.87        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.6164E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   18    592.20        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -7927.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   19    306.13        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.7571E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   20    649.89        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                       1.413     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   21    647.52        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -4.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   22    645.35        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -2.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   23    647.57        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -5.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   24    643.14        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      5.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   25    647.67        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -11.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   26    640.26        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -1.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   27    670.11        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989     0.1157E+05  0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   28    703.73        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000     0.2022E+05

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   29    808.19        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                      0.2495E+05  6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   30    713.73        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.     0.3303E+05  4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   31    739.88        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.     0.2453E+05  9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   32    871.37        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.     0.4560E+05  3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   33    607.95        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.     0.1668E+05
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   34    611.14        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                      0.1603E+05 0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   35    655.15        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.3770    -0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   36    645.83        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01 0.2625      0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   37    663.65        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.1811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   38    648.56        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                      0.2058    -0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   39    655.47        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01 0.1508    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   40    662.49        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492     0.2466    -0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   41    641.81        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01 0.1168    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   42    641.41        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832     0.2848    

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   43    644.02        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                     -0.9804    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   44    642.13        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480     0.4342      0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   45    654.35        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000     0.2853    -0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   46    656.98        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01 0.2995    
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   47    659.66        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.3458    -0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   48    633.26        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01 0.2844    -0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   49    664.99        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.4125E-01-0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   50    648.24        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412     0.1598    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   51    640.17        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                      0.2645    -0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   52    638.84        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01 0.2416    -0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   53    652.31        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01 0.2108    -0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   54    648.32        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.5153E-01  0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   55    630.74        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                     -0.8864     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   56    624.85        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886    -0.5782     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   57    790.74        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578    -0.5702E-01 0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   58    347.06        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430    -0.6292E-01-0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   59    647.67        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371     0.8330    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   60    647.67        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                       1.063      9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   61    650.55        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.524      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   62    645.68        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.443    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   63    552.61        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1547E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   64    646.72        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -6.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   65    643.88        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                      0.4842    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   66    635.05        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158     0.3151      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   67    650.04        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.717      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   68    653.99        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.867    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   69    648.44        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -6.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   70    644.04        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000      1.132    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   71    651.73        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317     0.5425      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   72    650.47        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      9.072      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   73    658.95        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.347    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   74    643.88        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -9.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   75    668.82        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000     0.3725    -0.1743      10.13    
                       8.443    -0.1000E+05 -7.000    

   76    633.52        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275     0.8257      10.13    
                       8.443    -0.1000E+05 -7.000    

   77    647.53        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.43    
                       8.443    -0.1000E+05 -7.000    

   78    650.69        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.743    -0.1000E+05 -7.000    

   79    647.16        1.664     -1.238      5.999     -102.6     0.5040    
                     -0.2041      3.979     -99.70      3.959     0.9553    
                       1.840     -1.320      1.486    -0.1857E+05 -2.437    
                      -1.159      0.000      0.000      0.000     -1.221    

                      -2.500     0.5043E+05 0.4110E+05 -3964.    -0.3786E+05
                     -0.5873     -6.397     -4.321     -7.285      3.010    
                      -13.76     -2.989      2314.      0.000      4044.    

                       4990.      6606.      4907.      9120.      3336.    
                       3207.     0.7703E-01-0.3754E-01  0.000    -0.4811    
                     -0.9415E-01-0.1492    -0.5336E-01-0.1832    -0.1520E-01

                      -1.480    -0.6577E-01  0.000    -0.1475E-01-0.4552E-03
                      0.8541E-01 0.4576E-01-0.1560E-01-0.3412    -0.1402    
                     -0.3548E-01-0.5841E-01-0.8917E-01-0.3515      0.000    

                      -1.886     -1.578     0.9430     0.9371    -0.1670    
                      0.6292E-01  9.224      9.143    -0.1031E+05 -4.000    
                     -0.5158    -0.6849      9.417      8.567    -0.1000E+05

                      -4.000     0.1317    -0.4575      8.772      9.047    
                     -0.1000E+05 -7.000    -0.6275    -0.1743      10.13    
                       8.443    -0.1000E+05 -9.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          79          79

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        1
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       79     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -286.770       286.770       647.667       934.437    
   2  0.709707     -0.342904      -66.6262       66.6262       677.765       744.391    
   3  0.151889      -1.88460      -366.178       366.178       641.259       1007.44    
   4  0.456170E-01  -3.08747      -599.896       599.896       738.310       1338.21    
   5  0.882557     -0.124932      -24.2742       24.2742       628.789       653.063    
   6  0.711292     -0.340672      -66.1925       66.1925       692.639       758.831    
   7  0.241669      -1.42019      -275.942       275.942       813.430       1089.37    
   8  0.682871     -0.381450      -74.1157       74.1157       655.480       729.595    
   9  0.500657     -0.691834      -134.423       134.423       647.878       782.301    
  10  0.494633     -0.703939      -136.775       136.775       621.618       758.393    
  11  0.437126     -0.827535      -160.790       160.790       646.377       807.167    
  12  0.462981     -0.770069      -149.624       149.624       2034.34       2183.96    
  13  0.988878     -0.111840E-01  -2.17305       2.17305       595.465       597.638    
  14  0.878158     -0.129929      -25.2452       25.2452       489.043       514.289    
  15  0.825605     -0.191638      -37.2353       37.2353       649.440       686.675    
  16  0.966665     -0.339033E-01  -6.58742       6.58742       771.957       778.544    
  17  0.340930      -1.07608      -209.082       209.082       351.872       560.954    
  18  0.288920      -1.24161      -241.244       241.244       592.197       833.441    
  19  0.442843     -0.814539      -158.265       158.265       306.131       464.396    
  20  0.878635     -0.129386      -25.1396       25.1396       649.887       675.026    
  21  0.198777E-01  -3.91816      -761.297       761.297       647.523       1408.82    
  22  0.315829      -1.15255      -223.941       223.941       645.348       869.289    
  23  0.208690      -1.56690      -304.450       304.450       647.567       952.016    
  24  0.849393     -0.163234      -31.7163       31.7163       643.143       674.859    
  25  0.945818     -0.557056E-01  -10.8236       10.8236       647.667       658.490    
  26  0.567839     -0.565917      -109.958       109.958       640.261       750.218    
  27  0.718388     -0.330745      -64.2638       64.2638       670.114       734.377    
  28  0.115406      -2.15930      -419.551       419.551       703.726       1123.28    
  29  0.659869E-01  -2.71830      -528.165       528.165       808.188       1336.35    
  30  0.171393      -1.76380      -342.706       342.706       713.733       1056.44    
  31  0.161953      -1.82045      -353.714       353.714       739.880       1093.59    
  32  0.455406     -0.786566      -152.830       152.830       871.371       1024.20    
  33  0.788693     -0.237378      -46.1224       46.1224       607.947       654.069    
  34  0.157754      -1.84672      -358.817       358.817       611.139       969.956    
  35  0.126279      -2.06926      -402.057       402.057       655.151       1057.21    
  36  0.646962     -0.435467      -84.6113       84.6113       645.827       730.439    
  37  0.730769     -0.313658      -60.9437       60.9437       663.650       724.594    
  38  0.443446E-01  -3.11577      -605.393       605.393       648.560       1253.95    
  39  0.219048      -1.51847      -295.038       295.038       655.466       950.504    
  40  0.311223E-01  -3.46983      -674.188       674.188       662.489       1336.68    
  41  0.864417     -0.145700      -28.3095       28.3095       641.814       670.124    
  42  0.372606     -0.987233      -191.819       191.819       641.406       833.225    
  43  0.599250E-01  -2.81466      -546.889       546.889       644.017       1190.91    
  44  0.250528      -1.38418      -268.947       268.947       642.134       911.080    
  45  0.404968E-01  -3.20653      -623.029       623.029       654.353       1277.38    
  46  0.792822     -0.232156      -45.1079       45.1079       656.982       702.090    
  47  0.826691     -0.190324      -36.9799       36.9799       659.663       696.643    
  48  0.258424      -1.35316      -262.918       262.918       633.264       896.182    
  49  0.713620     -0.337405      -65.5578       65.5578       664.993       730.551    
  50  0.936186     -0.659413E-01  -12.8124       12.8124       648.241       661.053    
  51  0.655367E-01  -2.72514      -529.495       529.495       640.171       1169.67    
  52  0.178790      -1.72154      -334.496       334.496       638.844       973.340    
  53  0.110644E-01  -4.50403      -875.132       875.132       652.311       1527.44    
  54  0.459577     -0.777448      -151.058       151.058       648.325       799.383    
  55  0.210706      -1.55729      -302.582       302.582       630.738       933.320    
  56  0.667378     -0.404399      -78.5747       78.5747       624.852       703.426    
  57  0.787749     -0.238575      -46.3551       46.3551       790.741       837.097    
  58  0.774339E-01  -2.55833      -497.083       497.083       347.064       844.148    
  59  0.154999      -1.86434      -362.241       362.241       647.667       1009.91    
  60  0.510712     -0.671950      -130.560       130.560       647.667       778.226    
  61  0.628107     -0.465044      -90.3581       90.3581       650.554       740.912    
  62  0.850273     -0.162197      -31.5149       31.5149       645.676       677.191    
  63  0.355976      -1.03289      -200.691       200.691       552.606       753.297    
  64  0.531318     -0.632394      -122.874       122.874       646.719       769.594    
  65  0.404575     -0.904917      -175.825       175.825       643.877       819.703    
  66  0.240103      -1.42669      -277.205       277.205       635.046       912.251    
  67  0.288602      -1.24271      -241.458       241.458       650.038       891.496    
  68  0.870493     -0.138695      -26.9485       26.9485       653.986       680.934    
  69  0.453038     -0.791780      -153.843       153.843       648.436       802.279    
  70  0.259221      -1.35008      -262.320       262.320       644.042       906.362    
  71  0.201751      -1.60072      -311.020       311.020       651.726       962.745    
  72  0.390245     -0.940979      -182.832       182.832       650.470       833.303    
  73  0.311089      -1.16768      -226.879       226.879       658.954       885.834    
  74  0.618900     -0.479811      -93.2273       93.2273       643.879       737.106    
  75  0.891204     -0.115182      -22.3799       22.3799       668.823       691.202    
  76  0.876712     -0.131577      -25.5653       25.5653       633.524       659.089    
  77  0.409798     -0.892090      -173.333       173.333       647.535       820.868    
  78  0.337394      -1.08651      -211.108       211.108       650.691       861.799    
  79  0.810099     -0.210599      -40.9193       40.9193       647.158       688.078    
loop,thermsimp(1:2)        1   286.770       66.6262    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81        492.80         88.69          1.11         40.44          0.54          0.05        130.83
Just calling func    0   0        130.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82        923.36         88.67          1.10         40.19          0.89          0.04        130.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    492.80        1.613     -1.289      5.947     -102.6     0.4527    
                     -0.2554      3.927     -99.70      3.908     0.9041    
                       1.788     -1.371      2.486    -0.1880E+05 -2.411    
                      -1.133      0.000      0.000      0.000     -1.221    

                      -2.500     0.5108E+05 0.4162E+05 -4065.    -0.3883E+05
                     -0.5360     -6.345     -4.270     -7.234      3.061    
                      -13.70     -2.964      2552.      0.000      4459.    

                       5502.      7284.      5410.     0.1005E+05  3678.    
                       3536.     0.8472E-01-0.2985E-01  0.000    -0.4734    
                     -0.8646E-01-0.1415    -0.4567E-01-0.1755    -0.7512E-02

                      -1.468    -0.5295E-01  0.000    -0.7057E-02 0.7237E-02
                      0.8541E-01 0.5346E-01-0.7911E-02-0.3336    -0.1325    
                     -0.2779E-01-0.5072E-01-0.8148E-01-0.3438      0.000    

                      -1.861     -1.553     0.9173     0.9114    -0.1413    
                      0.8856E-01  9.231      9.150    -0.1045E+05 -4.051    
                     -0.4902    -0.6593      9.424      8.574    -0.1000E+05

                      -4.051     0.1574    -0.4319      8.779      9.054    
                     -0.1000E+05 -7.051    -0.6019    -0.1487      10.14    
                       8.450    -0.1000E+05 -7.051    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    492.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        1
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        2
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       81     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -202.469       202.469       306.131       508.600    
   2  0.440787     -0.819193      -159.169       159.169       489.043       648.213    
   3  0.685789     -0.377185      -73.2871       73.2871       351.872       425.159    
   4  0.673104     -0.395856      -76.9148       76.9148       595.465       672.380    
   5  0.655536     -0.422301      -82.0532       82.0532       628.789       710.842    
   6  0.422838     -0.860766      -167.247       167.247       607.947       775.194    
   7  0.300870      -1.20108      -233.369       233.369       647.667       881.036    
   8  0.776987     -0.252331      -49.0279       49.0279       633.524       682.551    
   9  0.170551      -1.76872      -343.662       343.662       648.241       991.903    
  10  0.587497     -0.531884      -103.345       103.345       641.814       745.159    
  11  0.250425      -1.38459      -269.027       269.027       643.143       912.169    
  12  0.776362E-01  -2.55572      -496.577       496.577       649.887       1146.46    
  13  0.766647     -0.265729      -51.6311       51.6311       645.676       697.307    
  14  0.480193     -0.733568      -142.532       142.532       653.986       796.518    
  15  0.434643     -0.833231      -161.897       161.897       649.440       811.336    
  16  0.815924E-01  -2.50602      -486.919       486.919       647.158       1134.08    
  17  0.724257E-01  -2.62519      -510.075       510.075       668.823       1178.90    
  18  0.573795     -0.555483      -107.930       107.930       659.663       767.593    
  19  0.196096      -1.62915      -316.544       316.544       656.982       973.525    
  20  0.240673      -1.42432      -276.744       276.744       624.852       901.596    
  21  0.194228      -1.63872      -318.404       318.404       663.650       982.054    
  22  0.236387      -1.44229      -280.236       280.236       655.480       935.716    
  23  0.261662      -1.34070      -260.498       260.498       645.827       906.325    
  24  0.146321      -1.92195      -373.436       373.436       664.993       1038.43    
  25  0.169637      -1.77410      -344.707       344.707       670.114       1014.82    
  26  0.886717     -0.120229      -23.3605       23.3605       643.879       667.239    
  27  0.253412      -1.37274      -266.723       266.723       650.554       917.278    
  28  0.470820     -0.753279      -146.362       146.362       677.765       824.127    
  29  0.329871      -1.10905      -215.489       215.489       640.261       855.750    
  30  0.726784     -0.319126      -62.0061       62.0061       552.606       614.612    
  31  0.612351     -0.490450      -95.2945       95.2945       621.618       716.913    
  32  0.146573      -1.92023      -373.101       373.101       692.639       1065.74    
  33  0.812633     -0.207476      -40.3125       40.3125       646.719       687.032    
  34  0.486789     -0.719925      -139.881       139.881       647.667       787.548    
  35  0.653508     -0.425400      -82.6553       82.6553       771.957       854.612    
  36  0.180127      -1.71409      -333.048       333.048       647.878       980.927    
  37  0.155218      -1.86292      -361.966       361.966       648.325       1010.29    
  38  0.830615     -0.185589      -36.0599       36.0599       648.436       684.496    
  39  0.728345     -0.316980      -61.5892       61.5892       646.377       707.967    
  40  0.262318      -1.33820      -260.012       260.012       643.877       903.889    
  41  0.234222      -1.45148      -282.023       282.023       647.535       929.558    
  42  0.250201      -1.38549      -269.201       269.201       641.406       910.607    
  43  0.898433     -0.107103      -20.8102       20.8102       650.470       671.281    
  44  0.580277     -0.544250      -105.748       105.748       592.197       697.945    
  45  0.823617     -0.194050      -37.7038       37.7038       790.741       828.445    
  46  0.820676     -0.197627      -38.3989       38.3989       347.064       385.463    
  47  0.502494     -0.688171      -133.712       133.712       650.691       784.402    
  48  0.751016     -0.286329      -55.6337       55.6337       645.348       700.981    
  49  0.360461      -1.02037      -198.258       198.258       658.954       857.212    
  50  0.948712     -0.526497E-01  -10.2298       10.2298       650.038       660.268    
  51  0.452918     -0.792045      -153.894       153.894       633.264       787.158    
  52  0.182886      -1.69889      -330.095       330.095       644.042       974.137    
  53  0.986780     -0.133085E-01  -2.58585       2.58585       642.134       644.720    
  54  0.720276     -0.328121      -63.7540       63.7540       635.046       698.800    
  55  0.999574     -0.426396E-03 -0.828488E-01  0.828488E-01   630.738       630.821    
  56  0.573447     -0.556089      -108.048       108.048       647.667       755.715    
  57  0.441160E-01  -3.12093      -606.397       606.397       655.466       1261.86    
  58  0.596470     -0.516726      -100.400       100.400       647.567       747.967    
  59  0.561679E-01  -2.87941      -559.469       559.469       651.726       1211.19    
  60  0.664610     -0.408554      -79.3821       79.3821       611.139       690.521    
  61  0.875363     -0.133117      -25.8646       25.8646       638.844       664.709    
  62  0.969943     -0.305184E-01  -5.92971       5.92971       641.259       647.189    
  63  0.692714     -0.367138      -71.3349       71.3349       647.667       719.001    
  64  0.107969      -2.22591      -432.494       432.494       871.371       1303.86    
  65  0.530030     -0.634822      -123.346       123.346       713.733       837.079    
  66  0.246082      -1.40209      -272.426       272.426       655.151       927.577    
  67  0.561065     -0.577919      -112.290       112.290       813.430       925.720    
  68  0.888085     -0.118688      -23.0611       23.0611       739.880       762.941    
  69  0.180192      -1.71373      -332.978       332.978       703.726       1036.70    
  70  0.259121      -1.35046      -262.394       262.394       640.171       902.565    
  71  0.728967     -0.316127      -61.4234       61.4234       644.017       705.441    
  72  0.546722     -0.603814      -117.321       117.321       648.560       765.881    
  73  0.334936      -1.09382      -212.528       212.528       654.353       866.882    
  74  0.681788     -0.383037      -74.4241       74.4241       808.188       882.612    
  75  0.367328      -1.00150      -194.591       194.591       662.489       857.081    
  76  0.310586      -1.16929      -227.194       227.194       738.310       965.504    
  77  0.964734     -0.359024E-01  -6.97584       6.97584       647.523       654.499    
  78  0.249240      -1.38934      -269.948       269.948       652.311       922.259    
  79  0.328926      -1.11192      -216.047       216.047       492.803       708.849    
loop,thermsimp(1:2)        2   202.469       159.169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        437.90         88.67          1.10         40.52          0.72          0.05        131.06
Just calling func    0   0        131.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84        416.40         88.66          1.11         40.68          0.70          0.05        131.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    416.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        2
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        3
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       83     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -346.709       346.709       347.064       693.773    
   2  0.274399      -1.29317      -251.263       251.263       351.872       603.135    
   3  0.597410E-01  -2.81774      -547.486       547.486       306.131       853.617    
   4  0.283115E-01  -3.56449      -692.580       692.580       552.606       1245.19    
   5  0.901069     -0.104174      -20.2410       20.2410       630.738       650.979    
   6  0.717939     -0.331371      -64.3854       64.3854       642.134       706.519    
   7  0.294866      -1.22123      -237.286       237.286       641.259       878.545    
   8  0.935651     -0.665127E-01  -12.9234       12.9234       489.043       501.967    
   9  0.314362      -1.15721      -224.846       224.846       647.523       872.369    
  10  0.807729     -0.213529      -41.4887       41.4887       650.038       691.527    
  11  0.757191     -0.278140      -54.0425       54.0425       638.844       692.887    
  12  0.508654     -0.675987      -131.344       131.344       643.879       775.223    
  13  0.722060     -0.325647      -63.2731       63.2731       650.470       713.744    
  14  0.424032     -0.857947      -166.699       166.699       595.465       762.164    
  15  0.786154     -0.240602      -46.7490       46.7490       633.524       680.273    
  16  0.399894     -0.916557      -178.087       178.087       648.436       826.523    
  17  0.757416     -0.277843      -53.9849       53.9849       646.719       700.704    
  18  0.637270     -0.450563      -87.5443       87.5443       611.139       698.683    
  19  0.586055     -0.534342      -103.823       103.823       645.676       749.499    
  20  0.821724     -0.196351      -38.1510       38.1510       592.197       630.348    
  21  0.921558     -0.816897E-01  -15.8723       15.8723       635.046       650.919    
  22  0.985596     -0.145083E-01  -2.81897       2.81897       645.348       648.167    
  23  0.257194      -1.35793      -263.845       263.845       644.017       907.862    
  24  0.921438E-01  -2.38440      -463.290       463.290       646.377       1109.67    
  25  0.114653      -2.16584      -420.823       420.823       492.803       913.626    
  26  0.379827     -0.968040      -188.090       188.090       628.789       816.879    
  27  0.541451     -0.613503      -119.204       119.204       621.618       740.822    
  28  0.544274     -0.608302      -118.193       118.193       647.667       765.860    
  29  0.934365     -0.678883E-01  -13.1907       13.1907       641.814       655.005    
  30  0.266419E-01  -3.62527      -704.390       704.390       647.567       1351.96    
  31  0.919572     -0.838466E-01  -16.2914       16.2914       647.667       663.958    
  32  0.864639     -0.145444      -28.2597       28.2597       739.880       768.140    
  33  0.341156      -1.07542      -208.953       208.953       648.560       857.513    
  34  0.803175     -0.219182      -42.5871       42.5871       659.663       702.250    
  35  0.699424     -0.357498      -69.4619       69.4619       607.947       677.409    
  36  0.223868E-01  -3.79928      -738.201       738.201       650.691       1388.89    
  37  0.605689     -0.501389      -97.4198       97.4198       633.264       730.683    
  38  0.312349      -1.16363      -226.094       226.094       647.667       873.760    
  39  0.437501     -0.826675      -160.623       160.623       653.986       814.609    
  40  0.303330      -1.19293      -231.787       231.787       649.440       881.226    
  41  0.129735      -2.04226      -396.811       396.811       677.765       1074.58    
  42  0.954352     -0.467224E-01  -9.07816       9.07816       790.741       799.820    
  43  0.519807     -0.654297      -127.130       127.130       713.733       840.863    
  44  0.950560     -0.507036E-01  -9.85170       9.85170       771.957       781.808    
  45  0.443941     -0.812064      -157.784       157.784       640.261       798.045    
  46  0.911446     -0.927229E-01  -18.0161       18.0161       662.489       680.506    
  47  0.782475     -0.245293      -47.6604       47.6604       658.954       706.615    
  48  0.412534     -0.885438      -172.040       172.040       654.353       826.394    
  49  0.843850     -0.169780      -32.9883       32.9883       647.667       680.655    
  50  0.149432      -1.90091      -369.348       369.348       808.188       1177.54    
  51  0.292747      -1.22845      -238.687       238.687       624.852       863.539    
  52  0.579908E-02  -5.15006      -1000.66       1000.66       640.171       1640.83    
  53  0.164431      -1.80526      -350.762       350.762       643.877       994.640    
  54  0.963795     -0.368765E-01  -7.16511       7.16511       645.827       652.992    
  55  0.536638     -0.622432      -120.938       120.938       641.406       762.344    
  56  0.231620      -1.46266      -284.194       284.194       643.143       927.337    
  57  0.452632E-01  -3.09526      -601.409       601.409       650.554       1251.96    
  58  0.241294      -1.42174      -276.244       276.244       652.311       928.555    
  59  0.757653     -0.277529      -53.9239       53.9239       813.430       867.354    
  60  0.504715     -0.683762      -132.855       132.855       655.151       788.006    
  61  0.878562     -0.129469      -25.1559       25.1559       647.535       672.691    
  62  0.874452     -0.134158      -26.0670       26.0670       655.480       681.547    
  63  0.370953     -0.991680      -192.683       192.683       738.310       930.994    
  64  0.757717     -0.277446      -53.9077       53.9077       656.982       710.890    
  65  0.642844     -0.441853      -85.8521       85.8521       644.042       729.894    
  66  0.616137     -0.484286      -94.0968       94.0968       647.878       741.975    
  67  0.551578     -0.594972      -115.603       115.603       663.650       779.253    
  68  0.483778E-01  -3.02871      -588.479       588.479       648.241       1236.72    
  69  0.839664     -0.174753      -33.9546       33.9546       648.325       682.279    
  70  0.334065      -1.09642      -213.035       213.035       670.114       883.148    
  71  0.995512     -0.449855E-02 -0.874067      0.874067       703.726       704.600    
  72  0.214896      -1.53760      -298.756       298.756       664.993       963.749    
  73  0.541100     -0.614151      -119.330       119.330       692.639       811.968    
  74  0.380397     -0.966540      -187.799       187.799       647.158       834.957    
  75  0.854752E-01  -2.45953      -477.886       477.886       649.887       1127.77    
  76  0.749036     -0.288968      -56.1465       56.1465       668.823       724.969    
  77  0.461657     -0.772934      -150.181       150.181       651.726       801.907    
  78  0.116336      -2.15127      -417.992       417.992       655.466       1073.46    
  79  0.492714     -0.707826      -137.531       137.531       416.401       553.931    
loop,thermsimp(1:2)        3   346.709       251.263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        481.92         88.62          1.10         40.09          0.90          0.05        130.75
Just calling func    0   0        130.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        424.40         88.59          1.10         40.18          0.87          0.05        130.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    424.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        3
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        4
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       85     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -24.1247       24.1247       489.043       513.168    
   2  0.114178      -2.16999      -421.630       421.630       416.401       838.030    
   3  0.217017      -1.52778      -296.847       296.847       351.872       648.719    
   4  0.138317      -1.97821      -384.365       384.365       592.197       976.562    
   5  0.832728     -0.183048      -35.5662       35.5662       645.348       680.914    
   6  0.390825     -0.939496      -182.544       182.544       635.046       817.590    
   7  0.283633      -1.26007      -244.833       244.833       630.738       875.570    
   8  0.725809     -0.320468      -62.2670       62.2670       645.827       708.094    
   9  0.506121     -0.680979      -132.314       132.314       641.814       774.128    
  10  0.216234      -1.53139      -297.550       297.550       647.667       945.216    
  11  0.637942     -0.449509      -87.3395       87.3395       647.535       734.874    
  12  0.536707     -0.622302      -120.913       120.913       607.947       728.860    
  13  0.231844      -1.46169      -284.007       284.007       633.524       917.530    
  14  0.491379     -0.710540      -138.058       138.058       662.489       800.547    
  15  0.825774     -0.191434      -37.1957       37.1957       647.667       684.862    
  16  0.671593     -0.398102      -77.3513       77.3513       655.480       732.831    
  17  0.549103     -0.599470      -116.477       116.477       648.325       764.802    
  18  0.659287     -0.416597      -80.9448       80.9448       650.038       730.983    
  19  0.205012      -1.58469      -307.904       307.904       638.844       946.749    
  20  0.400541E-02  -5.52011      -1072.56       1072.56       347.064       1419.62    
  21  0.750831     -0.286575      -55.6815       55.6815       611.139       666.820    
  22  0.619921     -0.478162      -92.9069       92.9069       646.719       739.626    
  23  0.435226     -0.831889      -161.636       161.636       659.663       821.299    
  24  0.460974     -0.774414      -150.469       150.469       703.726       854.195    
  25  0.891582E-01  -2.41734      -469.690       469.690       642.134       1111.82    
  26  0.589618E-01  -2.83087      -550.037       550.037       658.954       1208.99    
  27  0.541391     -0.613613      -119.225       119.225       656.982       776.207    
  28  0.545108E-01  -2.90936      -565.288       565.288       650.470       1215.76    
  29  0.744722     -0.294744      -57.2688       57.2688       668.823       726.091    
  30  0.712477     -0.339008      -65.8692       65.8692       644.042       709.911    
  31  0.563836     -0.572992      -111.332       111.332       633.264       744.596    
  32  0.161455      -1.82353      -354.311       354.311       621.618       975.929    
  33  0.640738     -0.445135      -86.4898       86.4898       647.878       734.368    
  34  0.157494      -1.84837      -359.137       359.137       645.676       1004.81    
  35  0.695323     -0.363378      -70.6044       70.6044       595.465       666.070    
  36  0.792798     -0.232186      -45.1138       45.1138       641.406       686.520    
  37  0.940634     -0.612017E-01  -11.8915       11.8915       647.667       659.558    
  38  0.750008     -0.287672      -55.8946       55.8946       739.880       795.775    
  39  0.298939E-01  -3.51010      -682.012       682.012       643.879       1325.89    
  40  0.633510     -0.456480      -88.6940       88.6940       663.650       752.344    
  41  0.465723     -0.764164      -148.477       148.477       771.957       920.434    
  42  0.916259     -0.874560E-01  -16.9927       16.9927       655.151       672.144    
  43  0.451376     -0.795456      -154.557       154.557       640.261       794.818    
  44  0.414090     -0.881672      -171.309       171.309       790.741       962.050    
  45  0.273092      -1.29795      -252.191       252.191       651.726       903.917    
  46  0.361379      -1.01783      -197.764       197.764       692.639       890.402    
  47  0.548848     -0.599934      -116.567       116.567       653.986       770.553    
  48  0.832309     -0.183552      -35.6642       35.6642       628.789       664.453    
  49  0.673017     -0.395985      -76.9398       76.9398       654.353       731.293    
  50  0.692516     -0.367425      -71.3906       71.3906       648.436       719.826    
  51  0.354468E-01  -3.33972      -648.908       648.908       647.158       1296.07    
  52  0.987850     -0.122240E-01  -2.37511       2.37511       713.733       716.108    
  53  0.659676     -0.416007      -80.8301       80.8301       306.131       386.961    
  54  0.276145      -1.28683      -250.031       250.031       648.560       898.591    
  55  0.426927     -0.851141      -165.377       165.377       624.852       790.228    
  56  0.221817      -1.50590      -292.596       292.596       813.430       1106.03    
  57  0.911956     -0.921634E-01  -17.9074       17.9074       647.523       665.430    
  58  0.791973     -0.233228      -45.3161       45.3161       647.667       692.983    
  59  0.805447     -0.216358      -42.0383       42.0383       641.259       683.297    
  60  0.887840     -0.118963      -23.1146       23.1146       649.440       672.554    
  61  0.978176     -0.220657E-01  -4.28736       4.28736       670.114       674.401    
  62  0.539899     -0.616372      -119.761       119.761       644.017       763.778    
  63  0.313742      -1.15918      -225.229       225.229       492.803       718.032    
  64  0.355768      -1.03348      -200.804       200.804       643.143       843.947    
  65  0.413366     -0.883423      -171.649       171.649       652.311       823.960    
  66  0.352288      -1.04331      -202.714       202.714       738.310       941.024    
  67  0.269512      -1.31114      -254.755       254.755       664.993       919.748    
  68  0.841976E-01  -2.47459      -480.813       480.813       643.877       1124.69    
  69  0.964450     -0.361976E-01  -7.03318       7.03318       655.466       662.499    
  70  0.554883     -0.588998      -114.442       114.442       677.765       792.208    
  71  0.192411      -1.64812      -320.230       320.230       646.377       966.607    
  72  0.834093     -0.181411      -35.2481       35.2481       649.887       685.135    
  73  0.606638     -0.499823      -97.1157       97.1157       808.188       905.304    
  74  0.181851E-01  -4.00716      -778.590       778.590       648.241       1426.83    
  75  0.963499     -0.371840E-01  -7.22486       7.22486       552.606       559.831    
  76  0.178061      -1.72563      -335.290       335.290       650.554       985.844    
  77  0.186011      -1.68195      -326.803       326.803       647.567       974.369    
  78  0.144531      -1.93426      -375.827       375.827       650.691       1026.52    
  79  0.315860      -1.15246      -223.922       223.922       424.396       648.318    
loop,thermsimp(1:2)        4   24.1247       421.630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        462.54         88.61          1.10         40.16          0.99          0.05        130.92
Just calling func    0   0        130.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     88        398.21         88.58          1.10         40.30          0.74          0.05        130.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    398.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        4
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        5
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       87     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01  -6.28129       6.28129       306.131       312.412    
   2  0.384676     -0.955353      -185.625       185.625       489.043       674.668    
   3  0.472770     -0.749146      -145.559       145.559       552.606       698.165    
   4  0.131186      -2.03114      -394.650       394.650       424.396       819.046    
   5  0.387497     -0.948046      -184.205       184.205       351.872       536.077    
   6  0.474858     -0.744739      -144.703       144.703       647.667       792.369    
   7  0.654056     -0.424563      -82.4925       82.4925       655.466       737.958    
   8  0.375266     -0.980119      -190.437       190.437       628.789       819.226    
   9  0.605577     -0.501574      -97.4558       97.4558       647.523       744.979    
  10  0.485605     -0.722360      -140.355       140.355       595.465       735.820    
  11  0.503843     -0.685490      -133.191       133.191       611.139       744.329    
  12  0.374521     -0.982108      -190.824       190.824       655.151       845.975    
  13  0.955542E-01  -2.34806      -456.228       456.228       649.440       1105.67    
  14  0.902567     -0.102512      -19.9181       19.9181       670.114       690.032    
  15  0.347215      -1.05781      -205.532       205.532       645.348       850.880    
  16  0.893138     -0.113014      -21.9587       21.9587       641.259       663.218    
  17  0.561145     -0.577776      -112.262       112.262       647.667       759.928    
  18  0.667287     -0.404536      -78.6013       78.6013       649.887       728.488    
  19  0.601102     -0.508991      -98.8969       98.8969       641.406       740.303    
  20  0.569928     -0.562245      -109.244       109.244       647.667       756.911    
  21  0.655926     -0.421708      -81.9378       81.9378       645.827       727.765    
  22  0.355892      -1.03313      -200.737       200.737       644.042       844.779    
  23  0.208013      -1.57015      -305.081       305.081       713.733       1018.81    
  24  0.879772     -0.128093      -24.8884       24.8884       492.803       517.691    
  25  0.114206E-01  -4.47233      -868.974       868.974       648.436       1517.41    
  26  0.950245     -0.510357E-01  -9.91623       9.91623       668.823       678.739    
  27  0.321268      -1.13548      -220.624       220.624       607.947       828.571    
  28  0.379005     -0.970207      -188.511       188.511       650.038       838.549    
  29  0.117960      -2.13741      -415.299       415.299       654.353       1069.65    
  30  0.822558     -0.195337      -37.9539       37.9539       655.480       693.434    
  31  0.671085     -0.398860      -77.4985       77.4985       647.878       725.377    
  32  0.220279      -1.51286      -293.949       293.949       647.535       941.483    
  33  0.836335     -0.178727      -34.7266       34.7266       646.719       681.446    
  34  0.982442E-01  -2.32030      -450.834       450.834       633.264       1084.10    
  35  0.912526     -0.915389E-01  -17.7860       17.7860       663.650       681.436    
  36  0.758802     -0.276015      -53.6296       53.6296       644.017       697.647    
  37  0.562651     -0.575096      -111.741       111.741       648.325       760.066    
  38  0.248142      -1.39375      -270.806       270.806       653.986       924.792    
  39  0.864881     -0.145163      -28.2052       28.2052       641.814       670.019    
  40  0.495151     -0.702893      -136.572       136.572       656.982       793.554    
  41  0.112352E-01  -4.48870      -872.154       872.154       624.852       1497.01    
  42  0.745500     -0.293700      -57.0658       57.0658       677.765       734.831    
  43  0.405071     -0.903693      -175.587       175.587       640.261       815.848    
  44  0.617259     -0.482466      -93.7432       93.7432       739.880       833.623    
  45  0.992755     -0.727089E-02  -1.41273       1.41273       662.489       663.902    
  46  0.888739     -0.117952      -22.9181       22.9181       635.046       657.964    
  47  0.976701     -0.235748E-01  -4.58058       4.58058       659.663       664.243    
  48  0.461976     -0.772242      -150.047       150.047       652.311       802.357    
  49  0.150581      -1.89325      -367.859       367.859       416.401       784.259    
  50  0.726286E-01  -2.62240      -509.532       509.532       643.143       1152.67    
  51  0.280837      -1.26998      -246.757       246.757       703.726       950.483    
  52  0.727959     -0.317510      -61.6922       61.6922       630.738       692.430    
  53  0.565225     -0.570532      -110.854       110.854       692.639       803.493    
  54  0.884775     -0.122422      -23.7867       23.7867       648.560       672.346    
  55  0.289837      -1.23844      -240.628       240.628       651.726       892.354    
  56  0.282389      -1.26447      -245.686       245.686       808.188       1053.87    
  57  0.737455     -0.304550      -59.1740       59.1740       633.524       692.698    
  58  0.436668E-02  -5.43375      -1055.78       1055.78       664.993       1720.77    
  59  0.809492     -0.211348      -41.0650       41.0650       771.957       813.022    
  60  0.957786E-01  -2.34572      -455.773       455.773       738.310       1194.08    
  61  0.335750      -1.09139      -212.057       212.057       647.667       859.723    
  62  0.687327     -0.374945      -72.8518       72.8518       638.844       711.696    
  63  0.340103      -1.07851      -209.554       209.554       790.741       1000.30    
  64  0.902520     -0.102564      -19.9282       19.9282       646.377       666.306    
  65  0.872595     -0.136284      -26.4799       26.4799       647.567       674.047    
  66  0.773535     -0.256784      -49.8932       49.8932       621.618       671.511    
  67  0.627340     -0.466267      -90.5957       90.5957       592.197       682.793    
  68  0.918418     -0.851028E-01  -16.5355       16.5355       650.554       667.090    
  69  0.347451      -1.05713      -205.401       205.401       645.676       851.077    
  70  0.962049     -0.386898E-01  -7.51742       7.51742       650.691       658.208    
  71  0.716962     -0.332732      -64.6499       64.6499       813.430       878.080    
  72  0.423789     -0.858520      -166.810       166.810       642.134       808.944    
  73  0.899832E-01  -2.40813      -467.900       467.900       643.877       1111.78    
  74  0.770387     -0.260863      -50.6857       50.6857       658.954       709.640    
  75  0.746172     -0.292799      -56.8908       56.8908       650.470       707.361    
  76  0.696546     -0.361622      -70.2631       70.2631       647.158       717.421    
  77  0.486248     -0.721037      -140.097       140.097       643.879       783.976    
  78  0.797666     -0.226066      -43.9246       43.9246       347.064       390.989    
  79  0.196384      -1.62769      -316.259       316.259       398.214       714.474    
loop,thermsimp(1:2)        5   6.28129       185.625    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        463.15         88.59          1.10         40.83          0.78          0.05        131.35
Just calling func    0   0        131.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    463.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        5
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        6
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       88     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -41.8487       41.8487       306.131       347.980    
   2  0.337878      -1.08507      -210.829       210.829       347.064       557.893    
   3  0.930612     -0.719127E-01  -13.9726       13.9726       492.803       506.775    
   4  0.843645     -0.170024      -33.0356       33.0356       351.872       384.908    
   5  0.757799     -0.277337      -53.8865       53.8865       635.046       688.933    
   6  0.627925     -0.465335      -90.4146       90.4146       650.691       741.105    
   7  0.412314     -0.885971      -172.144       172.144       641.259       813.403    
   8  0.282274      -1.26488      -245.765       245.765       662.489       908.255    
   9  0.426609E-01  -3.15447      -612.914       612.914       659.663       1272.58    
  10  0.484876     -0.723862      -140.646       140.646       646.377       787.024    
  11  0.372210     -0.988296      -192.026       192.026       650.554       842.580    
  12  0.740507     -0.300421      -58.3718       58.3718       641.814       700.186    
  13  0.361519      -1.01744      -197.689       197.689       621.618       819.307    
  14  0.421034     -0.865042      -168.078       168.078       648.560       816.637    
  15  0.780595     -0.247699      -48.1280       48.1280       647.567       695.695    
  16  0.758410     -0.276531      -53.7299       53.7299       489.043       542.773    
  17  0.522921E-01  -2.95091      -573.362       573.362       668.823       1242.18    
  18  0.609673     -0.494833      -96.1460       96.1460       663.650       759.796    
  19  0.204029      -1.58949      -308.838       308.838       646.719       955.558    
  20  0.516385     -0.660902      -128.413       128.413       592.197       720.610    
  21  0.323918      -1.12726      -219.027       219.027       670.114       889.141    
  22  0.671820     -0.397765      -77.2858       77.2858       630.738       708.024    
  23  0.850344     -0.162114      -31.4987       31.4987       633.524       665.022    
  24  0.515631     -0.662364      -128.697       128.697       655.480       784.177    
  25  0.919408     -0.840249E-01  -16.3260       16.3260       644.017       660.343    
  26  0.516519     -0.660643      -128.363       128.363       552.606       680.969    
  27  0.986900     -0.131869E-01  -2.56221       2.56221       650.470       653.033    
  28  0.127351      -2.06081      -400.415       400.415       658.954       1059.37    
  29  0.775028E-01  -2.55744      -496.911       496.911       638.844       1135.75    
  30  0.778307     -0.250634      -48.6982       48.6982       398.214       446.913    
  31  0.548570     -0.600441      -116.666       116.666       647.158       763.824    
  32  0.191672      -1.65197      -320.978       320.978       647.878       968.856    
  33  0.593733     -0.521326      -101.294       101.294       645.827       747.121    
  34  0.612853     -0.489631      -95.1353       95.1353       649.887       745.022    
  35  0.872749     -0.136107      -26.4456       26.4456       677.765       704.211    
  36  0.291105E-01  -3.53666      -687.172       687.172       595.465       1282.64    
  37  0.310804      -1.16859      -227.057       227.057       655.466       882.523    
  38  0.238051      -1.43527      -278.873       278.873       641.406       920.279    
  39  0.600295     -0.510334      -99.1578       99.1578       611.139       710.296    
  40  0.856575     -0.154813      -30.0802       30.0802       647.523       677.603    
  41  0.127990      -2.05580      -399.443       399.443       647.667       1047.11    
  42  0.390396E-01  -3.24318      -630.149       630.149       647.667       1277.82    
  43  0.469298E-01  -3.05910      -594.384       594.384       648.325       1242.71    
  44  0.170208      -1.77073      -344.054       344.054       643.879       987.932    
  45  0.457801     -0.781320      -151.810       151.810       416.401       568.211    
  46  0.451589     -0.794982      -154.465       154.465       647.667       802.132    
  47  0.601844     -0.507757      -98.6571       98.6571       656.982       755.639    
  48  0.923684     -0.793857E-01  -15.4246       15.4246       652.311       667.735    
  49  0.113154      -2.17901      -423.381       423.381       692.639       1116.02    
  50  0.652894     -0.426340      -82.8379       82.8379       642.134       724.972    
  51  0.600010     -0.510809      -99.2501       99.2501       771.957       871.207    
  52  0.768679     -0.263082      -51.1168       51.1168       640.261       691.377    
  53  0.999310     -0.690144E-03 -0.134095      0.134095       424.396       424.530    
  54  0.798907     -0.224511      -43.6224       43.6224       628.789       672.411    
  55  0.246243      -1.40144      -272.299       272.299       607.947       880.246    
  56  0.798424     -0.225115      -43.7399       43.7399       739.880       783.620    
  57  0.120926      -2.11257      -410.473       410.473       650.038       1060.51    
  58  0.771675     -0.259192      -50.3610       50.3610       644.042       694.403    
  59  0.670629     -0.399540      -77.6306       77.6306       655.151       732.782    
  60  0.127505      -2.05960      -400.180       400.180       645.348       1045.53    
  61  0.375387     -0.979799      -190.375       190.375       645.676       836.051    
  62  0.572534E-01  -2.86027      -555.750       555.750       647.667       1203.42    
  63  0.358654      -1.02540      -199.234       199.234       813.430       1012.66    
  64  0.903087     -0.101937      -19.8063       19.8063       651.726       671.532    
  65  0.112925      -2.18103      -423.774       423.774       653.986       1077.76    
  66  0.727950     -0.317523      -61.6947       61.6947       647.535       709.230    
  67  0.703618E-01  -2.65411      -515.693       515.693       703.726       1219.42    
  68  0.461106     -0.774128      -150.413       150.413       790.741       941.154    
  69  0.546854     -0.603573      -117.274       117.274       713.733       831.007    
  70  0.264522      -1.32983      -258.386       258.386       808.188       1066.57    
  71  0.562280     -0.575755      -111.869       111.869       654.353       766.222    
  72  0.745931     -0.293123      -56.9537       56.9537       633.264       690.217    
  73  0.753398E-01  -2.58575      -502.411       502.411       649.440       1151.85    
  74  0.150464E-01  -4.19662      -815.402       815.402       643.877       1459.28    
  75  0.237963      -1.43564      -278.945       278.945       643.143       922.088    
  76  0.310733      -1.16882      -227.102       227.102       738.310       965.412    
  77  0.871120     -0.137975      -26.8086       26.8086       624.852       651.660    
  78  0.610203     -0.493964      -95.9771       95.9771       648.436       744.413    
  79  0.600732     -0.509607      -99.0166       99.0166       463.150       562.167    
loop,thermsimp(1:2)        6   41.8487       210.829    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90        466.18         88.68          1.12         40.66          0.68          0.05        131.20
Just calling func    0   0        131.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91        397.70         88.64          1.12         40.24          0.68          0.05        130.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    397.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        6
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        7
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       90     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -415.704       415.704       306.131       721.835    
   2  0.421875     -0.863045      -167.690       167.690       351.872       519.562    
   3  0.700103     -0.356528      -69.2735       69.2735       424.396       493.669    
   4  0.209367      -1.56367      -303.820       303.820       398.214       702.035    
   5  0.117251      -2.14344      -416.470       416.470       492.803       909.272    
   6  0.898330     -0.107218      -20.8324       20.8324       489.043       509.876    
   7  0.209806      -1.56157      -303.414       303.414       347.064       650.478    
   8  0.917155     -0.864790E-01  -16.8029       16.8029       463.150       479.953    
   9  0.120514E-01  -4.41857      -858.529       858.529       416.401       1274.93    
  10  0.189983      -1.66082      -322.698       322.698       624.852       947.550    
  11  0.257131      -1.35817      -263.892       263.892       650.470       914.362    
  12  0.913158E-01  -2.39343      -465.044       465.044       644.017       1109.06    
  13  0.336531      -1.08906      -211.605       211.605       633.524       845.129    
  14  0.318351      -1.14460      -222.396       222.396       652.311       874.706    
  15  0.919606     -0.838101E-01  -16.2843       16.2843       651.726       668.010    
  16  0.719771E-01  -2.63141      -511.282       511.282       628.789       1140.07    
  17  0.788730E-01  -2.53992      -493.506       493.506       647.523       1141.03    
  18  0.905929     -0.987941E-01  -19.1957       19.1957       552.606       571.802    
  19  0.665501     -0.407215      -79.1219       79.1219       635.046       714.168    
  20  0.812159     -0.208059      -40.4259       40.4259       633.264       673.690    
  21  0.412726E-01  -3.18756      -619.342       619.342       640.261       1259.60    
  22  0.256064      -1.36233      -264.700       264.700       644.042       908.742    
  23  0.277519      -1.28187      -249.067       249.067       647.567       896.633    
  24  0.279550      -1.27457      -247.650       247.650       641.814       889.464    
  25  0.857884     -0.153286      -29.7835       29.7835       677.765       707.549    
  26  0.205158      -1.58398      -307.766       307.766       630.738       938.504    
  27  0.482085     -0.729635      -141.768       141.768       647.535       789.303    
  28  0.494966E-01  -3.00585      -584.037       584.037       611.139       1195.18    
  29  0.338791      -1.08237      -210.305       210.305       592.197       802.502    
  30  0.249491E-01  -3.69092      -717.145       717.145       642.134       1359.28    
  31  0.480710     -0.732491      -142.323       142.323       655.151       797.474    
  32  0.908951E-01  -2.39805      -465.941       465.941       650.691       1116.63    
  33  0.283223      -1.26152      -245.114       245.114       648.436       893.550    
  34  0.277734      -1.28109      -248.916       248.916       649.887       898.802    
  35  0.504407     -0.684372      -132.974       132.974       645.827       778.801    
  36  0.251881      -1.37880      -267.900       267.900       656.982       924.882    
  37  0.568193     -0.565294      -109.837       109.837       663.650       773.486    
  38  0.186135      -1.68128      -326.673       326.673       647.158       973.831    
  39  0.964582     -0.360604E-01  -7.00654       7.00654       654.353       661.360    
  40  0.493045     -0.707155      -137.400       137.400       739.880       877.280    
  41  0.477950     -0.738248      -143.442       143.442       655.480       798.921    
  42  0.114879      -2.16388      -420.441       420.441       646.377       1066.82    
  43  0.324003      -1.12700      -218.976       218.976       647.667       866.643    
  44  0.720573     -0.327708      -63.6737       63.6737       641.259       704.933    
  45  0.934913     -0.673019E-01  -13.0768       13.0768       648.560       661.637    
  46  0.516467     -0.660745      -128.383       128.383       621.618       750.001    
  47  0.351513      -1.04551      -203.142       203.142       713.733       916.875    
  48  0.310221      -1.17047      -227.423       227.423       645.676       873.099    
  49  0.467571     -0.760204      -147.708       147.708       650.554       798.262    
  50  0.700644     -0.355756      -69.1233       69.1233       771.957       841.080    
  51  0.608579E-01  -2.79921      -543.887       543.887       607.947       1151.83    
  52  0.360106      -1.02136      -198.450       198.450       655.466       853.916    
  53  0.355744      -1.03354      -200.818       200.818       670.114       870.931    
  54  0.356778      -1.03064      -200.253       200.253       662.489       862.743    
  55  0.209214      -1.56440      -303.963       303.963       641.406       945.369    
  56  0.513034     -0.667413      -129.678       129.678       643.143       772.821    
  57  0.131750      -2.02685      -393.817       393.817       790.741       1184.56    
  58  0.860948     -0.149721      -29.0907       29.0907       646.719       675.810    
  59  0.245301      -1.40527      -273.043       273.043       738.310       1011.35    
  60  0.411604     -0.887695      -172.479       172.479       647.878       820.357    
  61  0.444838     -0.810046      -157.392       157.392       643.879       801.271    
  62  0.173997      -1.74872      -339.776       339.776       813.430       1153.21    
  63  0.616177     -0.484222      -94.0843       94.0843       645.348       739.432    
  64  0.794601     -0.229915      -44.6725       44.6725       647.667       692.339    
  65  0.926158     -0.767101E-01  -14.9048       14.9048       658.954       673.859    
  66  0.614053     -0.487673      -94.7549       94.7549       650.038       744.793    
  67  0.228742      -1.47516      -286.623       286.623       808.188       1094.81    
  68  0.162916      -1.81452      -352.562       352.562       653.986       1006.55    
  69  0.437909     -0.825744      -160.442       160.442       692.639       853.081    
  70  0.966188     -0.343970E-01  -6.68334       6.68334       638.844       645.527    
  71  0.756703     -0.278785      -54.1679       54.1679       649.440       703.607    
  72  0.537306     -0.621187      -120.697       120.697       647.667       768.363    
  73  0.544827     -0.607287      -117.996       117.996       703.726       821.722    
  74  0.452750     -0.792414      -153.966       153.966       668.823       822.789    
  75  0.951192E-01  -2.35262      -457.115       457.115       648.325       1105.44    
  76  0.970150     -0.303043E-01  -5.88812       5.88812       659.663       665.551    
  77  0.645255     -0.438110      -85.1248       85.1248       647.667       732.791    
  78  0.442258     -0.815862      -158.522       158.522       595.465       753.987    
  79  0.571943     -0.558716      -108.559       108.559       397.704       506.262    
loop,thermsimp(1:2)        7   415.704       167.690    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92        468.91         88.57          1.10         40.45          0.86          0.05        131.04
Just calling func    0   0        131.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93        416.38         88.57          1.10         40.23          0.85          0.05        130.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    416.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        7
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        8
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       92     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -139.637       139.637       463.150       602.787    
   2  0.568497     -0.564760      -109.733       109.733       424.396       534.129    
   3  0.632037E-01  -2.76139      -536.538       536.538       397.704       934.242    
   4  0.184325      -1.69105      -328.571       328.571       489.043       817.615    
   5  0.949772     -0.515332E-01  -10.0129       10.0129       351.872       361.885    
   6  0.512179     -0.669081      -130.002       130.002       552.606       682.609    
   7  0.573767     -0.555532      -107.940       107.940       638.844       746.784    
   8  0.590189     -0.527312      -102.457       102.457       347.064       449.521    
   9  0.323917      -1.12727      -219.028       219.028       654.353       873.382    
  10  0.246420E-01  -3.70330      -719.552       719.552       648.560       1368.11    
  11  0.923153E-01  -2.38255      -462.929       462.929       659.663       1122.59    
  12  0.236043      -1.44374      -280.519       280.519       651.726       932.245    
  13  0.885388     -0.121730      -23.6520       23.6520       633.264       656.916    
  14  0.617726     -0.481710      -93.5962       93.5962       658.954       752.551    
  15  0.349992      -1.04985      -203.985       203.985       646.719       850.704    
  16  0.892028     -0.114257      -22.2002       22.2002       647.667       669.867    
  17  0.382423     -0.961227      -186.766       186.766       398.214       584.981    
  18  0.850527     -0.161899      -31.4571       31.4571       649.440       680.897    
  19  0.653461     -0.425472      -82.6692       82.6692       641.259       723.928    
  20  0.413959     -0.881988      -171.370       171.370       677.765       849.136    
  21  0.807813     -0.213424      -41.4684       41.4684       635.046       676.515    
  22  0.348045      -1.05542      -205.069       205.069       306.131       511.200    
  23  0.435267     -0.831795      -161.618       161.618       647.667       809.284    
  24  0.434284     -0.834056      -162.057       162.057       645.348       807.405    
  25  0.983564     -0.165728E-01  -3.22010       3.22010       650.038       653.258    
  26  0.545923     -0.605277      -117.605       117.605       621.618       739.223    
  27  0.227140      -1.48219      -287.989       287.989       595.465       883.454    
  28  0.965085     -0.355395E-01  -6.90533       6.90533       647.667       654.572    
  29  0.183882      -1.69346      -329.039       329.039       643.143       972.182    
  30  0.187300E-02  -6.28022      -1220.25       1220.25       663.650       1883.90    
  31  0.428736     -0.846914      -164.555       164.555       645.827       810.383    
  32  0.459764     -0.777041      -150.979       150.979       647.535       798.514    
  33  0.914786     -0.890649E-01  -17.3053       17.3053       655.151       672.456    
  34  0.872236     -0.136696      -26.5599       26.5599       650.554       677.114    
  35  0.789367     -0.236524      -45.9566       45.9566       655.480       701.436    
  36  0.619233E-01  -2.78186      -540.515       540.515       643.879       1184.39    
  37  0.138004E-01  -4.28306      -832.198       832.198       592.197       1424.39    
  38  0.287035      -1.24815      -242.515       242.515       647.878       890.394    
  39  0.138758E-01  -4.27761      -831.139       831.139       703.726       1534.87    
  40  0.593330     -0.522005      -101.426       101.426       668.823       770.248    
  41  0.399445     -0.917679      -178.305       178.305       771.957       950.262    
  42  0.982947     -0.172001E-01  -3.34199       3.34199       633.524       636.866    
  43  0.259534      -1.34887      -262.085       262.085       692.639       954.723    
  44  0.816592E-01  -2.50520      -486.760       486.760       655.466       1142.23    
  45  0.166083      -1.79527      -348.820       348.820       662.489       1011.31    
  46  0.967370     -0.331741E-01  -6.44573       6.44573       647.667       654.112    
  47  0.371024     -0.991488      -192.646       192.646       670.114       862.760    
  48  0.941964     -0.597885E-01  -11.6169       11.6169       645.676       657.293    
  49  0.130219      -2.03854      -396.087       396.087       652.311       1048.40    
  50  0.599455     -0.511734      -99.4299       99.4299       739.880       839.310    
  51  0.519323     -0.655230      -127.311       127.311       641.814       769.125    
  52  0.829175     -0.187324      -36.3971       36.3971       648.436       684.833    
  53  0.341525      -1.07433      -208.743       208.743       647.567       856.310    
  54  0.686480     -0.376178      -73.0914       73.0914       649.887       722.978    
  55  0.273157      -1.29771      -252.145       252.145       644.042       896.187    
  56  0.472999     -0.748662      -145.465       145.465       492.803       638.268    
  57  0.591611     -0.524905      -101.989       101.989       650.470       752.459    
  58  0.253673      -1.37171      -266.523       266.523       713.733       980.256    
  59  0.522398     -0.649326      -126.164       126.164       656.982       783.146    
  60  0.927744     -0.749995E-01  -14.5724       14.5724       630.738       645.310    
  61  0.470581     -0.753787      -146.461       146.461       641.406       787.867    
  62  0.365015      -1.00782      -195.819       195.819       624.852       820.670    
  63  0.732288     -0.311582      -60.5404       60.5404       647.158       707.699    
  64  0.536772E-01  -2.92477      -568.282       568.282       653.986       1222.27    
  65  0.725826     -0.320444      -62.2623       62.2623       738.310       800.573    
  66  0.806822     -0.214652      -41.7069       41.7069       646.377       688.084    
  67  0.104580E-01  -4.56039      -886.084       886.084       808.188       1694.27    
  68  0.818881     -0.199816      -38.8242       38.8242       648.325       687.149    
  69  0.330445      -1.10732      -215.151       215.151       644.017       859.168    
  70  0.316989      -1.14889      -223.229       223.229       650.691       873.920    
  71  0.776875     -0.252476      -49.0561       49.0561       628.789       677.845    
  72  0.782540     -0.245210      -47.6443       47.6443       647.523       695.167    
  73  0.972988     -0.273831E-01  -5.32053       5.32053       607.947       613.267    
  74  0.567786E-01  -2.86860      -557.368       557.368       813.430       1370.80    
  75  0.111463      -2.19406      -426.306       426.306       790.741       1217.05    
  76  0.109413      -2.21263      -429.914       429.914       611.139       1041.05    
  77  0.900240     -0.105094      -20.4198       20.4198       640.261       660.680    
  78  0.153236      -1.87578      -364.463       364.463       416.401       780.864    
  79  0.967387     -0.331562E-01  -6.44225       6.44225       416.376       422.819    
loop,thermsimp(1:2)        8   139.637       109.733    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        444.97         88.66          1.11         40.37          0.64          0.05        130.82
Just calling func    0   0        130.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    444.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        8
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:        9
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       93     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -472.609       472.609       351.872       824.481    
   2  0.192227      -1.64908      -320.416       320.416       416.376       736.792    
   3  0.872733     -0.136126      -26.4493       26.4493       347.064       373.513    
   4  0.444113     -0.811675      -157.708       157.708       306.131       463.839    
   5  0.194382      -1.63793      -318.250       318.250       424.396       742.646    
   6  0.358074      -1.02702      -199.549       199.549       398.214       597.764    
   7  0.461693     -0.772855      -150.166       150.166       463.150       613.316    
   8  0.180202      -1.71368      -332.968       332.968       607.947       940.915    
   9  0.944954     -0.566187E-01  -11.0010       11.0010       633.524       644.525    
  10  0.738770     -0.302769      -58.8280       58.8280       492.803       551.631    
  11  0.822491E-01  -2.49800      -485.362       485.362       630.738       1116.10    
  12  0.313602      -1.15963      -225.316       225.316       650.038       875.354    
  13  0.978185     -0.220567E-01  -4.28562       4.28562       647.667       651.952    
  14  0.540591E-01  -2.91768      -566.905       566.905       647.667       1214.57    
  15  0.872885     -0.135951      -26.4153       26.4153       633.264       659.679    
  16  0.209079      -1.56504      -304.087       304.087       645.676       949.763    
  17  0.789205E-01  -2.53931      -493.389       493.389       640.261       1133.65    
  18  0.746404     -0.292489      -56.8305       56.8305       647.667       704.497    
  19  0.110219      -2.20529      -428.488       428.488       655.151       1083.64    
  20  0.656016     -0.421570      -81.9109       81.9109       635.046       716.957    
  21  0.665675     -0.406953      -79.0710       79.0710       650.554       729.625    
  22  0.563292     -0.573957      -111.520       111.520       628.789       740.309    
  23  0.615044     -0.486062      -94.4418       94.4418       649.440       743.881    
  24  0.128081      -2.05509      -399.304       399.304       552.606       951.910    
  25  0.459916     -0.776711      -150.915       150.915       648.436       799.351    
  26  0.433297     -0.836332      -162.499       162.499       648.325       810.824    
  27  0.225675      -1.48866      -289.247       289.247       646.377       935.624    
  28  0.808805     -0.212197      -41.2299       41.2299       647.523       688.753    
  29  0.578238     -0.547770      -106.432       106.432       655.480       761.911    
  30  0.569572     -0.562871      -109.366       109.366       647.158       756.524    
  31  0.291272      -1.23350      -239.668       239.668       649.887       889.555    
  32  0.144426      -1.93499      -375.968       375.968       641.259       1017.23    
  33  0.908321     -0.961572E-01  -18.6833       18.6833       621.618       640.301    
  34  0.593166     -0.522281      -101.479       101.479       638.844       740.323    
  35  0.327630      -1.11587      -216.814       216.814       650.470       867.284    
  36  0.823214E-01  -2.49712      -485.191       485.191       658.954       1144.15    
  37  0.742531     -0.297691      -57.8413       57.8413       641.814       699.655    
  38  0.476201E-01  -3.04450      -591.546       591.546       668.823       1260.37    
  39  0.183829      -1.69375      -329.096       329.096       416.401       745.496    
  40  0.417257     -0.874053      -169.828       169.828       656.982       826.810    
  41  0.647723E-01  -2.73688      -531.775       531.775       641.406       1173.18    
  42  0.123950E-01  -4.39046      -853.066       853.066       647.535       1500.60    
  43  0.281372E-01  -3.57066      -693.780       693.780       738.310       1432.09    
  44  0.883044     -0.124380      -24.1670       24.1670       645.348       669.515    
  45  0.445413     -0.808754      -157.141       157.141       647.667       804.807    
  46  0.418101     -0.872031      -169.436       169.436       645.827       815.263    
  47  0.301534      -1.19887      -232.941       232.941       489.043       721.984    
  48  0.674500     -0.393783      -76.5121       76.5121       624.852       701.364    
  49  0.732783     -0.310905      -60.4089       60.4089       739.880       800.289    
  50  0.970355     -0.300929E-01  -5.84706       5.84706       677.765       683.612    
  51  0.981589     -0.185824E-01  -3.61056       3.61056       646.719       650.330    
  52  0.677253     -0.389711      -75.7207       75.7207       647.567       723.288    
  53  0.800731     -0.222230      -43.1793       43.1793       644.017       687.196    
  54  0.529544     -0.635738      -123.524       123.524       670.114       793.637    
  55  0.814619     -0.205035      -39.8382       39.8382       654.353       694.192    
  56  0.909218     -0.951702E-01  -18.4916       18.4916       650.691       669.182    
  57  0.269472      -1.31129      -254.784       254.784       595.465       850.249    
  58  0.166504      -1.79274      -348.329       348.329       647.878       996.207    
  59  0.328775      -1.11238      -216.136       216.136       644.042       860.178    
  60  0.333602      -1.09781      -213.304       213.304       651.726       865.030    
  61  0.213893      -1.54228      -299.665       299.665       397.704       697.368    
  62  0.401720     -0.911999      -177.201       177.201       771.957       949.158    
  63  0.453769     -0.790168      -153.530       153.530       692.639       846.168    
  64  0.649690E-01  -2.73384      -531.186       531.186       643.143       1174.33    
  65  0.510128     -0.673093      -130.782       130.782       713.733       844.515    
  66  0.430053     -0.843847      -163.959       163.959       662.489       826.449    
  67  0.528469E-01  -2.94036      -571.311       571.311       611.139       1182.45    
  68  0.887506     -0.119339      -23.1877       23.1877       652.311       675.498    
  69  0.499442     -0.694264      -134.895       134.895       659.663       794.558    
  70  0.432451     -0.838287      -162.879       162.879       655.466       818.345    
  71  0.637121     -0.450796      -87.5896       87.5896       643.879       731.468    
  72  0.523182     -0.647826      -125.872       125.872       790.741       916.614    
  73  0.221333      -1.50809      -293.022       293.022       653.986       947.007    
  74  0.597769     -0.514551      -99.9772       99.9772       648.560       748.537    
  75  0.886305     -0.120694      -23.4508       23.4508       813.430       836.881    
  76  0.306306      -1.18317      -229.890       229.890       592.197       822.087    
  77  0.341612      -1.07408      -208.694       208.694       703.726       912.420    
  78  0.388979     -0.944230      -183.464       183.464       808.188       991.652    
  79  0.274361      -1.29331      -251.290       251.290       444.974       696.264    
loop,thermsimp(1:2)        9   472.609       320.416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     95        446.59         88.66          1.11         40.31          0.77          0.05        130.89
Just calling func    0   0        130.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     96        393.40         88.60          1.10         40.39          0.67          0.05        130.81
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    393.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:        9
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       10
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       95     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -95.4672       95.4672       347.064       442.531    
   2  0.877337     -0.130865      -25.4270       25.4270       306.131       331.558    
   3  0.821280     -0.196891      -38.2560       38.2560       492.803       531.059    
   4  0.989636     -0.104181E-01  -2.02424       2.02424       398.214       400.239    
   5  0.492813     -0.707625      -137.491       137.491       463.150       600.642    
   6  0.904083     -0.100835      -19.5922       19.5922       621.618       641.210    
   7  0.490620     -0.712086      -138.358       138.358       633.524       771.882    
   8  0.572439     -0.557850      -108.390       108.390       646.719       755.110    
   9  0.588753     -0.529749      -102.930       102.930       647.667       750.597    
  10  0.341799      -1.07353      -208.587       208.587       633.264       841.851    
  11  0.449605     -0.799385      -155.321       155.321       650.691       806.011    
  12  0.740720     -0.300132      -58.3157       58.3157       645.348       703.663    
  13  0.173164E-01  -4.05610      -788.100       788.100       652.311       1440.41    
  14  0.828389     -0.188272      -36.5813       36.5813       677.765       714.347    
  15  0.110451      -2.20318      -428.079       428.079       644.017       1072.10    
  16  0.646816     -0.435693      -84.6552       84.6552       647.523       732.178    
  17  0.857676     -0.153529      -29.8306       29.8306       654.353       684.184    
  18  0.691202E-02  -4.97449      -966.544       966.544       444.974       1411.52    
  19  0.530885     -0.633210      -123.033       123.033       397.704       520.736    
  20  0.742957     -0.297117      -57.7299       57.7299       641.814       699.544    
  21  0.883526E-01  -2.42642      -471.453       471.453       624.852       1096.30    
  22  0.599138     -0.512263      -99.5326       99.5326       647.667       747.199    
  23  0.476407     -0.741482      -144.070       144.070       635.046       779.116    
  24  0.509994E-01  -2.97594      -578.225       578.225       489.043       1067.27    
  25  0.669768     -0.400824      -77.8801       77.8801       647.567       725.447    
  26  0.874430     -0.134183      -26.0717       26.0717       650.554       676.626    
  27  0.830739     -0.185440      -36.0309       36.0309       643.879       679.909    
  28  0.166673      -1.79172      -348.132       348.132       416.376       764.508    
  29  0.578742     -0.546898      -106.262       106.262       628.789       735.051    
  30  0.433531     -0.835791      -162.394       162.394       638.844       801.238    
  31  0.979127     -0.210935E-01  -4.09846       4.09846       424.396       428.494    
  32  0.310252      -1.17037      -227.403       227.403       649.440       876.843    
  33  0.686879     -0.375597      -72.9785       72.9785       416.401       489.379    
  34  0.243104      -1.41427      -274.792       274.792       648.560       923.352    
  35  0.459407     -0.777818      -151.130       151.130       647.158       798.288    
  36  0.332163      -1.10213      -214.144       214.144       655.480       869.623    
  37  0.512243     -0.668956      -129.978       129.978       670.114       800.092    
  38  0.323240      -1.12936      -219.435       219.435       659.663       879.098    
  39  0.667455     -0.404284      -78.5523       78.5523       648.436       726.988    
  40  0.460037     -0.776449      -150.864       150.864       739.880       890.744    
  41  0.227415      -1.48098      -287.754       287.754       647.667       935.420    
  42  0.636494     -0.451780      -87.7809       87.7809       648.325       736.106    
  43  0.432078     -0.839149      -163.047       163.047       645.827       808.874    
  44  0.609015     -0.495913      -96.3558       96.3558       655.466       751.822    
  45  0.427755     -0.849205      -165.000       165.000       592.197       757.197    
  46  0.496712     -0.699745      -135.960       135.960       351.872       487.833    
  47  0.295308      -1.21974      -236.995       236.995       662.489       899.484    
  48  0.928979     -0.736692E-01  -14.3139       14.3139       656.982       671.296    
  49  0.245696E-01  -3.70625      -720.123       720.123       813.430       1533.55    
  50  0.833617E-01  -2.48457      -482.751       482.751       713.733       1196.48    
  51  0.499690     -0.693767      -134.799       134.799       692.639       827.437    
  52  0.320552      -1.13771      -221.057       221.057       595.465       816.522    
  53  0.151030E-01  -4.19286      -814.672       814.672       644.042       1458.71    
  54  0.551054     -0.595922      -115.788       115.788       651.726       767.513    
  55  0.786630     -0.239997      -46.6314       46.6314       650.470       697.102    
  56  0.793760E-01  -2.53356      -492.271       492.271       650.038       1142.31    
  57  0.456771     -0.783574      -152.248       152.248       649.887       802.135    
  58  0.613263     -0.488962      -95.0052       95.0052       703.726       798.732    
  59  0.407581     -0.897515      -174.387       174.387       790.741       965.129    
  60  0.214329      -1.54024      -299.269       299.269       646.377       945.646    
  61  0.543052     -0.610551      -118.630       118.630       607.947       726.577    
  62  0.861407     -0.149188      -28.9872       28.9872       653.986       682.973    
  63  0.727563     -0.318055      -61.7981       61.7981       771.957       833.755    
  64  0.954867     -0.461830E-01  -8.97335       8.97335       645.676       654.649    
  65  0.209413      -1.56345      -303.777       303.777       552.606       856.384    
  66  0.218233E-02  -6.12736      -1190.55       1190.55       808.188       1998.73    
  67  0.990675     -0.936839E-02  -1.82028       1.82028       647.878       649.698    
  68  0.874543     -0.134054      -26.0466       26.0466       641.259       667.306    
  69  0.276161      -1.28677      -250.020       250.020       655.151       905.171    
  70  0.319398      -1.14132      -221.758       221.758       630.738       852.496    
  71  0.160691      -1.82827      -355.233       355.233       640.261       995.494    
  72  0.612149     -0.490779      -95.3583       95.3583       658.954       754.313    
  73  0.832427     -0.183410      -35.6365       35.6365       641.406       677.042    
  74  0.985697     -0.144064E-01  -2.79916       2.79916       643.143       645.942    
  75  0.607085     -0.499087      -96.9726       96.9726       611.139       708.111    
  76  0.612015     -0.490999      -95.4010       95.4010       647.667       743.068    
  77  0.413704     -0.882605      -171.490       171.490       668.823       840.313    
  78  0.909905     -0.944149E-01  -18.3448       18.3448       738.310       756.655    
  79  0.841355     -0.172741      -33.5636       33.5636       393.403       426.967    
loop,thermsimp(1:2)       10   95.4672       25.4270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     97        383.32         88.65          1.10         40.31          0.79          0.05        130.89
Just calling func    0   0        130.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     98        355.05         88.68          1.10         40.24          0.78          0.05        130.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    355.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       10
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       11
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       97     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -200.253       200.253       306.131       506.384    
   2  0.318207      -1.14505      -222.484       222.484       398.214       620.698    
   3  0.410972E-01  -3.19181      -620.169       620.169       393.403       1013.57    
   4  0.217948      -1.52350      -296.015       296.015       424.396       720.411    
   5  0.460755     -0.774888      -150.561       150.561       347.064       497.625    
   6  0.694214     -0.364975      -70.9146       70.9146       351.872       422.787    
   7  0.237764      -1.43648      -279.107       279.107       416.401       695.508    
   8  0.635477     -0.453379      -88.0915       88.0915       397.704       485.795    
   9  0.882831E-01  -2.42721      -471.606       471.606       492.803       964.409    
  10  0.889613     -0.116969      -22.7270       22.7270       463.150       485.877    
  11  0.236395      -1.44225      -280.229       280.229       621.618       901.847    
  12  0.785560     -0.241359      -46.8960       46.8960       643.143       690.039    
  13  0.253594      -1.37202      -266.584       266.584       647.878       914.462    
  14  0.767743     -0.264300      -51.3536       51.3536       645.676       697.030    
  15  0.425111     -0.855405      -166.205       166.205       641.259       807.464    
  16  0.334680E-01  -3.39717      -660.069       660.069       656.982       1317.05    
  17  0.737903     -0.303943      -59.0561       59.0561       650.554       709.610    
  18  0.530906     -0.633170      -123.025       123.025       641.406       764.431    
  19  0.811772     -0.208536      -40.5186       40.5186       643.879       684.397    
  20  0.781494     -0.246548      -47.9043       47.9043       653.986       701.890    
  21  0.668871     -0.402164      -78.1405       78.1405       654.353       732.494    
  22  0.609633     -0.494898      -96.1586       96.1586       650.470       746.629    
  23  0.732795E-01  -2.61347      -507.798       507.798       641.814       1149.61    
  24  0.999755     -0.244962E-03 -0.475961E-01  0.475961E-01   645.348       645.395    
  25  0.556911     -0.585350      -113.734       113.734       611.139       724.872    
  26  0.381942     -0.962485      -187.011       187.011       677.765       864.776    
  27  0.230973      -1.46546      -284.738       284.738       647.567       932.305    
  28  0.791084     -0.234351      -45.5345       45.5345       607.947       653.481    
  29  0.122039      -2.10341      -408.693       408.693       648.436       1057.13    
  30  0.411383     -0.888231      -172.583       172.583       647.523       820.106    
  31  0.753656     -0.282819      -54.9518       54.9518       628.789       683.741    
  32  0.846821     -0.166266      -32.3055       32.3055       648.325       680.630    
  33  0.577745     -0.548622      -106.597       106.597       647.667       754.264    
  34  0.859903     -0.150936      -29.3268       29.3268       647.667       676.993    
  35  0.915816     -0.879395E-01  -17.0866       17.0866       647.667       664.753    
  36  0.220499      -1.51186      -293.755       293.755       655.466       949.220    
  37  0.539962     -0.616256      -119.739       119.739       658.954       778.693    
  38  0.810725     -0.209827      -40.7693       40.7693       646.719       687.489    
  39  0.901567     -0.103621      -20.1335       20.1335       738.310       758.444    
  40  0.196148      -1.62888      -316.492       316.492       592.197       908.689    
  41  0.413437     -0.883250      -171.615       171.615       416.376       587.992    
  42  0.192892      -1.64562      -319.745       319.745       651.726       971.470    
  43  0.194290      -1.63840      -318.342       318.342       633.524       951.865    
  44  0.988313     -0.117563E-01  -2.28425       2.28425       635.046       637.331    
  45  0.917980     -0.855792E-01  -16.6280       16.6280       647.158       663.786    
  46  0.136083      -1.99449      -387.529       387.529       703.726       1091.26    
  47  0.847126     -0.165905      -32.2354       32.2354       670.114       702.349    
  48  0.513003     -0.667474      -129.690       129.690       638.844       768.534    
  49  0.562161     -0.575967      -111.910       111.910       649.887       761.797    
  50  0.926079     -0.767957E-01  -14.9214       14.9214       650.691       665.612    
  51  0.890313     -0.116182      -22.5742       22.5742       645.827       668.401    
  52  0.857665     -0.153542      -29.8331       29.8331       595.465       625.298    
  53  0.599877     -0.511031      -99.2933       99.2933       692.639       791.932    
  54  0.835330     -0.179929      -34.9601       34.9601       771.957       806.917    
  55  0.323336      -1.12906      -219.377       219.377       668.823       888.200    
  56  0.305042      -1.18731      -230.693       230.693       633.264       863.957    
  57  0.980883     -0.193016E-01  -3.75030       3.75030       630.738       634.488    
  58  0.129682      -2.04267      -396.891       396.891       552.606       949.497    
  59  0.738352     -0.303335      -58.9379       58.9379       655.480       714.418    
  60  0.383117     -0.959416      -186.414       186.414       649.440       835.854    
  61  0.524900     -0.644547      -125.235       125.235       659.663       784.898    
  62  0.594829     -0.519481      -100.935       100.935       739.880       840.815    
  63  0.596925     -0.515963      -100.252       100.252       662.489       762.741    
  64  0.462523     -0.771060      -149.817       149.817       655.151       804.968    
  65  0.837977     -0.176764      -34.3453       34.3453       648.560       682.905    
  66  0.380204     -0.967046      -187.897       187.897       647.667       835.564    
  67  0.135974E-01  -4.29788      -835.077       835.077       646.377       1481.45    
  68  0.816466     -0.202771      -39.3983       39.3983       790.741       830.140    
  69  0.877970     -0.130143      -25.2867       25.2867       640.261       665.547    
  70  0.468378     -0.758480      -147.373       147.373       489.043       636.416    
  71  0.238817E-01  -3.73464      -725.641       725.641       644.017       1369.66    
  72  0.517025     -0.659665      -128.173       128.173       624.852       753.025    
  73  0.583879     -0.538062      -104.545       104.545       650.038       754.584    
  74  0.987129E-03  -6.92071      -1344.69       1344.69       713.733       2058.43    
  75  0.605732     -0.501317      -97.4060       97.4060       444.974       542.379    
  76  0.141001      -1.95899      -380.631       380.631       652.311       1032.94    
  77  0.333264      -1.09882      -213.501       213.501       644.042       857.543    
  78  0.384574     -0.955619      -185.677       185.677       813.430       999.107    
  79  0.897742     -0.107873      -20.9597       20.9597       355.054       376.014    
loop,thermsimp(1:2)       11   200.253       222.484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99        458.70         88.71          1.10         40.30          0.80          0.05        130.95
Just calling func    0   0        130.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    458.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       11
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       12
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       98     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -500.769       500.769       355.054       855.823    
   2  0.804470     -0.217571      -42.2741       42.2741       351.872       394.146    
   3  0.984017     -0.161120E-01  -3.13056       3.13056       397.704       400.834    
   4  0.587639     -0.531643      -103.298       103.298       463.150       566.448    
   5  0.523810     -0.646626      -125.639       125.639       347.064       472.704    
   6  0.930607     -0.719181E-01  -13.9737       13.9737       306.131       320.105    
   7  0.360114E-01  -3.32392      -645.838       645.838       444.974       1090.81    
   8  0.963815     -0.368556E-01  -7.16103       7.16103       416.376       423.537    
   9  0.201264E-01  -3.90572      -758.882       758.882       398.214       1157.10    
  10  0.954897     -0.461522E-01  -8.96737       8.96737       595.465       604.433    
  11  0.374160     -0.983071      -191.011       191.011       630.738       821.749    
  12  0.174967      -1.74316      -338.695       338.695       489.043       827.739    
  13  0.381618     -0.963335      -187.176       187.176       635.046       822.222    
  14  0.191097      -1.65498      -321.562       321.562       645.348       966.910    
  15  0.425287     -0.854991      -166.125       166.125       607.947       774.072    
  16  0.426180     -0.852893      -165.717       165.717       647.158       812.875    
  17  0.615671     -0.485042      -94.2437       94.2437       647.667       741.910    
  18  0.787264     -0.239192      -46.4750       46.4750       640.261       686.736    
  19  0.812636     -0.207472      -40.3118       40.3118       650.691       691.003    
  20  0.917241E-01  -2.38897      -464.177       464.177       645.827       1110.00    
  21  0.671310     -0.398525      -77.4333       77.4333       647.667       725.100    
  22  0.548174     -0.601162      -116.806       116.806       648.325       765.131    
  23  0.134851      -2.00359      -389.297       389.297       648.560       1037.86    
  24  0.373236     -0.985545      -191.491       191.491       628.789       820.280    
  25  0.578774     -0.546843      -106.252       106.252       643.879       750.130    
  26  0.910021     -0.942872E-01  -18.3200       18.3200       646.719       665.039    
  27  0.192323      -1.64858      -320.319       320.319       643.143       963.461    
  28  0.366342      -1.00419      -195.114       195.114       416.401       611.514    
  29  0.686994     -0.375430      -72.9460       72.9460       645.676       718.622    
  30  0.486551     -0.720414      -139.976       139.976       653.986       793.962    
  31  0.256801      -1.35945      -264.142       264.142       670.114       934.255    
  32  0.284977      -1.25535      -243.914       243.914       650.554       894.468    
  33  0.903072     -0.101953      -19.8094       19.8094       655.480       675.289    
  34  0.226450      -1.48523      -288.580       288.580       424.396       712.976    
  35  0.446078     -0.807261      -156.851       156.851       611.139       767.989    
  36  0.152634      -1.87971      -365.228       365.228       654.353       1019.58    
  37  0.511955     -0.669518      -130.087       130.087       650.470       780.558    
  38  0.513138     -0.667210      -129.639       129.639       624.852       754.491    
  39  0.637309     -0.450501      -87.5323       87.5323       647.667       735.199    
  40  0.861477     -0.149107      -28.9715       28.9715       650.038       679.010    
  41  0.817364     -0.201671      -39.1846       39.1846       738.310       777.495    
  42  0.793820     -0.230898      -44.8635       44.8635       649.887       694.750    
  43  0.253309      -1.37315      -266.802       266.802       662.489       929.292    
  44  0.702532     -0.353065      -68.6005       68.6005       641.406       710.006    
  45  0.822324     -0.195620      -38.0090       38.0090       638.844       676.853    
  46  0.720485     -0.327831      -63.6975       63.6975       658.954       722.652    
  47  0.881589     -0.126029      -24.4875       24.4875       659.663       684.150    
  48  0.584479     -0.537035      -104.346       104.346       692.639       796.984    
  49  0.697197     -0.360688      -70.0816       70.0816       655.151       725.233    
  50  0.320931      -1.13653      -220.828       220.828       771.957       992.784    
  51  0.780071     -0.248371      -48.2584       48.2584       641.259       689.517    
  52  0.318322E-01  -3.44728      -669.806       669.806       647.523       1317.33    
  53  0.693387     -0.366167      -71.1462       71.1462       790.741       861.888    
  54  0.332128      -1.10223      -214.164       214.164       647.667       861.831    
  55  0.891883E-01  -2.41701      -469.624       469.624       649.440       1119.06    
  56  0.960735     -0.400567E-01  -7.78302       7.78302       739.880       747.663    
  57  0.726634     -0.319332      -62.0463       62.0463       644.042       706.088    
  58  0.867850     -0.141737      -27.5394       27.5394       633.264       660.803    
  59  0.960075     -0.407444E-01  -7.91663       7.91663       677.765       685.682    
  60  0.303374E-01  -3.49537      -679.151       679.151       668.823       1347.97    
  61  0.159557      -1.83535      -356.609       356.609       621.618       978.227    
  62  0.487506     -0.718453      -139.595       139.595       592.197       731.792    
  63  0.978612E-01  -2.32420      -451.593       451.593       647.878       1099.47    
  64  0.405010     -0.903843      -175.617       175.617       647.567       823.184    
  65  0.199088      -1.61401      -313.601       313.601       655.466       969.067    
  66  0.621424     -0.475741      -92.4365       92.4365       552.606       645.043    
  67  0.630612     -0.461065      -89.5850       89.5850       633.524       723.109    
  68  0.842429     -0.171466      -33.3158       33.3158       492.803       526.119    
  69  0.887493     -0.119355      -23.1907       23.1907       651.726       674.916    
  70  0.813538     -0.206363      -40.0963       40.0963       813.430       853.527    
  71  0.901945     -0.103202      -20.0522       20.0522       393.403       413.456    
  72  0.789044E-01  -2.53952      -493.428       493.428       652.311       1145.74    
  73  0.325005      -1.12391      -218.377       218.377       648.436       866.813    
  74  0.701704     -0.354243      -68.8294       68.8294       703.726       772.556    
  75  0.797802     -0.225895      -43.8914       43.8914       641.814       685.705    
  76  0.707467     -0.346064      -67.2403       67.2403       656.982       724.222    
  77  0.143667      -1.94025      -376.991       376.991       644.017       1021.01    
  78  0.462723     -0.770628      -149.733       149.733       646.377       796.110    
  79  0.345279E-01  -3.36599      -654.011       654.011       458.704       1112.72    
loop,thermsimp(1:2)       12   500.769       42.2741    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100        424.45         88.66          1.11         40.48          0.61          0.05        130.91
Just calling func    0   0        130.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    424.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       12
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       13
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:       99     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -26.5155       26.5155       306.131       332.646    
   2  0.311340      -1.16687      -226.723       226.723       351.872       578.595    
   3  0.293828      -1.22476      -237.971       237.971       397.704       635.675    
   4  0.586668     -0.533296      -103.619       103.619       393.403       497.023    
   5  0.360311      -1.02079      -198.339       198.339       416.376       614.716    
   6  0.315643      -1.15314      -224.055       224.055       347.064       571.120    
   7  0.481464     -0.730923      -142.018       142.018       492.803       634.821    
   8  0.720279     -0.328116      -63.7530       63.7530       463.150       526.903    
   9  0.551471     -0.595166      -115.641       115.641       595.465       711.106    
  10  0.524434     -0.645435      -125.408       125.408       416.401       541.809    
  11  0.781600     -0.246412      -47.8778       47.8778       552.606       600.484    
  12  0.353648      -1.03945      -201.966       201.966       633.264       835.229    
  13  0.451044     -0.796190      -154.700       154.700       646.719       801.419    
  14  0.325353      -1.12284      -218.168       218.168       651.726       869.894    
  15  0.312157      -1.16425      -226.213       226.213       655.480       881.693    
  16  0.432418     -0.838362      -162.894       162.894       638.844       801.738    
  17  0.296543      -1.21556      -236.184       236.184       650.038       886.222    
  18  0.705416     -0.348967      -67.8043       67.8043       659.663       727.467    
  19  0.146505      -1.92069      -373.191       373.191       677.765       1050.96    
  20  0.471608     -0.751607      -146.037       146.037       641.814       787.851    
  21  0.633095     -0.457134      -88.8212       88.8212       640.261       729.082    
  22  0.754855     -0.281230      -54.6430       54.6430       641.259       695.902    
  23  0.444501E-01  -3.11339      -604.931       604.931       650.691       1255.62    
  24  0.160973      -1.82652      -354.892       354.892       649.887       1004.78    
  25  0.943694     -0.579536E-01  -11.2604       11.2604       644.042       655.303    
  26  0.187304      -1.67502      -325.457       325.457       641.406       966.863    
  27  0.840922     -0.173257      -33.6637       33.6637       424.396       458.060    
  28  0.888648     -0.118054      -22.9378       22.9378       645.676       668.614    
  29  0.920614E-01  -2.38530      -463.464       463.464       658.954       1122.42    
  30  0.906493     -0.981722E-01  -19.0749       19.0749       633.524       652.598    
  31  0.221761      -1.50616      -292.646       292.646       656.982       949.628    
  32  0.248725      -1.39141      -270.350       270.350       647.667       918.017    
  33  0.315928      -1.15224      -223.881       223.881       655.151       879.032    
  34  0.949967     -0.513283E-01  -9.97310       9.97310       592.197       602.170    
  35  0.802748     -0.219715      -42.6906       42.6906       647.667       690.357    
  36  0.558987     -0.581628      -113.010       113.010       647.667       760.677    
  37  0.638133     -0.449209      -87.2813       87.2813       739.880       827.161    
  38  0.637852     -0.449648      -87.3666       87.3666       643.879       731.245    
  39  0.382908     -0.959961      -186.520       186.520       624.852       811.372    
  40  0.982834     -0.173149E-01  -3.36429       3.36429       648.325       651.689    
  41  0.497022     -0.699120      -135.839       135.839       611.139       746.978    
  42  0.263620      -1.33325      -259.050       259.050       703.726       962.776    
  43  0.296939      -1.21423      -235.925       235.925       607.947       843.872    
  44  0.784161     -0.243141      -47.2423       47.2423       738.310       785.553    
  45  0.545321     -0.606380      -117.820       117.820       650.470       768.290    
  46  0.770080     -0.261260      -50.7629       50.7629       653.986       704.749    
  47  0.358755      -1.02511      -199.180       199.180       646.377       845.557    
  48  0.325126      -1.12354      -218.304       218.304       692.639       910.943    
  49  0.599396     -0.511832      -99.4490       99.4490       647.158       746.607    
  50  0.323708      -1.12791      -219.154       219.154       628.789       847.943    
  51  0.329142      -1.11127      -215.919       215.919       630.738       846.657    
  52  0.685661     -0.377371      -73.3232       73.3232       635.046       708.369    
  53  0.360361      -1.02065      -198.312       198.312       647.567       845.879    
  54  0.665281     -0.407545      -79.1860       79.1860       489.043       568.230    
  55  0.983321     -0.168196E-01  -3.26805       3.26805       813.430       816.698    
  56  0.644247     -0.439672      -85.4283       85.4283       355.054       440.483    
  57  0.735645     -0.307008      -59.6516       59.6516       647.667       707.318    
  58  0.680276     -0.385257      -74.8555       74.8555       790.741       865.597    
  59  0.864073     -0.146098      -28.3868       28.3868       648.436       676.823    
  60  0.788785     -0.237262      -46.0999       46.0999       650.554       696.654    
  61  0.429383     -0.845405      -164.262       164.262       662.489       826.752    
  62  0.798857     -0.224573      -43.6345       43.6345       670.114       713.748    
  63  0.946983     -0.544737E-01  -10.5842       10.5842       643.143       653.727    
  64  0.229664      -1.47114      -285.842       285.842       645.348       931.189    
  65  0.655912     -0.421729      -81.9420       81.9420       655.466       737.408    
  66  0.236982      -1.43977      -279.747       279.747       621.618       901.365    
  67  0.588628     -0.529960      -102.971       102.971       771.957       874.928    
  68  0.430113     -0.843707      -163.932       163.932       654.353       818.286    
  69  0.384455     -0.955929      -185.737       185.737       644.017       829.754    
  70  0.162044E-01  -4.12247      -800.996       800.996       648.560       1449.56    
  71  0.769503     -0.262010      -50.9085       50.9085       444.974       495.882    
  72  0.220892      -1.51008      -293.409       293.409       647.878       941.287    
  73  0.978294E-01  -2.32453      -451.656       451.656       645.827       1097.48    
  74  0.310072      -1.17095      -227.516       227.516       458.704       686.220    
  75  0.871728E-01  -2.43986      -474.065       474.065       649.440       1123.50    
  76  0.750011     -0.287667      -55.8937       55.8937       652.311       708.204    
  77  0.638844     -0.448095      -87.0649       87.0649       398.214       485.279    
  78  0.620339     -0.477489      -92.7761       92.7761       647.523       740.299    
  79  0.634192     -0.455404      -88.4850       88.4850       424.450       512.935    
loop,thermsimp(1:2)       13   26.5155       226.723    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    101        431.41         88.59          1.11         40.17          0.89          0.05        130.80
Just calling func    0   0        130.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    431.41        1.581     -1.321      5.916     -102.6     0.4214    
                     -0.2867      3.896     -99.70      3.877     0.8727    
                       1.757     -1.402      1.526    -0.1895E+05 -2.396    
                      -1.118      0.000      0.000      0.000     -1.221    

                      -2.500     0.5147E+05 0.4194E+05 -4127.    -0.3942E+05
                     -0.5047     -6.314     -4.238     -7.202      3.092    
                      -13.67     -2.948      2697.      0.000      4712.    

                       3633.      6290.      5717.      4966.      3887.    
                       3737.     0.8942E-01-0.2515E-01  0.000    -0.4869    
                     -0.3895    -0.1368    -0.4097E-01-0.1708    -0.2815E-02

                      -1.460    -0.1071      0.000    -0.2360E-02 0.1193E-01
                      0.8541E-01 0.5815E-01-0.3213E-02-0.3494    -0.1699    
                     -0.6737E-01-0.4602E-01-0.7678E-01-0.3391      0.000    

                      -1.845     -1.537     0.9017     0.8958    -0.1257    
                      0.1042      9.236      9.155    -0.1053E+05 -4.083    
                     -0.6047    -0.6436      9.429      8.579    -0.1000E+05

                      -4.083     0.1730    -0.4162      8.784      9.059    
                     -0.1000E+05 -7.083    -0.6381    -0.1330      10.11    
                       8.455    -0.1000E+05 -7.083    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    431.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       13
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       14
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      100     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -207.003       207.003       306.131       513.134    
   2  0.267720      -1.31781      -256.051       256.051       355.054       611.106    
   3  0.279825      -1.27359      -247.459       247.459       424.396       671.855    
   4  0.281095      -1.26906      -246.579       246.579       398.214       644.793    
   5  0.245867      -1.40297      -272.596       272.596       444.974       717.570    
   6  0.914239     -0.896636E-01  -17.4216       17.4216       393.403       410.825    
   7  0.180116      -1.71415      -333.060       333.060       424.450       757.510    
   8  0.567917     -0.565780      -109.931       109.931       463.150       573.081    
   9  0.431941     -0.839465      -163.108       163.108       416.401       579.509    
  10  0.877920     -0.130199      -25.2977       25.2977       489.043       514.341    
  11  0.280355      -1.27170      -247.091       247.091       347.064       594.155    
  12  0.486947     -0.719601      -139.818       139.818       351.872       491.690    
  13  0.216546      -1.52995      -297.269       297.269       552.606       849.876    
  14  0.483718E-02  -5.33142      -1035.90       1035.90       592.197       1628.09    
  15  0.785152E-03  -7.14963      -1389.17       1389.17       416.376       1805.55    
  16  0.300781      -1.20137      -233.426       233.426       492.803       726.229    
  17  0.869691     -0.139618      -27.1277       27.1277       397.704       424.831    
  18  0.694261E-01  -2.66749      -518.294       518.294       648.325       1166.62    
  19  0.635475     -0.453382      -88.0922       88.0922       633.524       721.616    
  20  0.894977     -0.110958      -21.5590       21.5590       643.143       664.702    
  21  0.442267     -0.815841      -158.518       158.518       644.042       802.560    
  22  0.283362      -1.26103      -245.018       245.018       645.676       890.694    
  23  0.518611     -0.656601      -127.578       127.578       648.436       776.013    
  24  0.858122E-01  -2.45559      -477.122       477.122       458.704       935.826    
  25  0.461153     -0.774026      -150.393       150.393       647.667       798.060    
  26  0.180026      -1.71465      -333.157       333.157       641.259       974.416    
  27  0.446938E-01  -3.10792      -603.869       603.869       650.554       1254.42    
  28  0.152352      -1.88156      -365.587       365.587       653.986       1019.57    
  29  0.163937E-01  -4.11086      -798.740       798.740       647.667       1446.41    
  30  0.721347     -0.326635      -63.4652       63.4652       652.311       715.776    
  31  0.813323     -0.206626      -40.1475       40.1475       635.046       675.194    
  32  0.569343     -0.563273      -109.444       109.444       595.465       704.909    
  33  0.275899      -1.28772      -250.204       250.204       670.114       920.317    
  34  0.933187     -0.691492E-01  -13.4357       13.4357       659.663       673.099    
  35  0.716570     -0.333279      -64.7561       64.7561       640.261       705.017    
  36  0.405413     -0.902848      -175.423       175.423       643.879       819.302    
  37  0.907528     -0.970314E-01  -18.8532       18.8532       655.466       674.319    
  38  0.554651     -0.589416      -114.523       114.523       647.523       762.046    
  39  0.419962     -0.867592      -168.573       168.573       647.158       815.731    
  40  0.824173     -0.193375      -37.5728       37.5728       611.139       648.711    
  41  0.865647     -0.144278      -28.0333       28.0333       647.667       675.700    
  42  0.300944      -1.20083      -233.322       233.322       650.470       883.792    
  43  0.339688      -1.07973      -209.791       209.791       738.310       948.101    
  44  0.217032      -1.52771      -296.834       296.834       641.814       938.649    
  45  0.792618E-01  -2.53500      -492.550       492.550       646.719       1139.27    
  46  0.997677     -0.232582E-02 -0.451907      0.451907       638.844       639.296    
  47  0.174239      -1.74733      -339.505       339.505       624.852       964.357    
  48  0.834084     -0.181422      -35.2502       35.2502       813.430       848.680    
  49  0.324404      -1.12577      -218.736       218.736       654.353       873.090    
  50  0.927598     -0.751564E-01  -14.6029       14.6029       662.489       677.092    
  51  0.981384     -0.187911E-01  -3.65111       3.65111       739.880       743.531    
  52  0.849105     -0.163572      -31.7821       31.7821       644.017       675.799    
  53  0.148698      -1.90584      -370.305       370.305       633.264       1003.57    
  54  0.389930     -0.941789      -182.990       182.990       607.947       790.937    
  55  0.183568      -1.69517      -329.371       329.371       646.377       975.749    
  56  0.661220     -0.413669      -80.3759       80.3759       647.567       727.943    
  57  0.242183      -1.41806      -275.529       275.529       630.738       906.267    
  58  0.182262      -1.70231      -330.759       330.759       628.789       959.548    
  59  0.299801      -1.20464      -234.061       234.061       790.741       1024.80    
  60  0.950117     -0.511698E-01  -9.94229       9.94229       651.726       661.668    
  61  0.184593      -1.68960      -328.290       328.290       771.957       1100.25    
  62  0.730970     -0.313382      -60.8902       60.8902       655.151       716.041    
  63  0.753232E-01  -2.58597      -502.453       502.453       655.480       1157.93    
  64  0.501460     -0.690231      -134.112       134.112       650.038       784.150    
  65  0.513248E-01  -2.96958      -576.990       576.990       621.618       1198.61    
  66  0.931416     -0.710492E-01  -13.8049       13.8049       692.639       706.443    
  67  0.637420E-01  -2.75291      -534.891       534.891       647.667       1182.56    
  68  0.322234E-01  -3.43506      -667.433       667.433       645.348       1312.78    
  69  0.791156     -0.234260      -45.5167       45.5167       647.878       693.395    
  70  0.606746     -0.499645      -97.0810       97.0810       656.982       754.063    
  71  0.115774      -2.15611      -418.933       418.933       703.726       1122.66    
  72  0.574132     -0.554896      -107.816       107.816       641.406       749.222    
  73  0.877193     -0.131028      -25.4588       25.4588       649.887       675.345    
  74  0.113746      -2.17379      -422.367       422.367       677.765       1100.13    
  75  0.259994E-01  -3.64968      -709.133       709.133       645.827       1354.96    
  76  0.213303      -1.54504      -300.202       300.202       658.954       959.156    
  77  0.444263E-01  -3.11392      -605.035       605.035       649.440       1254.47    
  78  0.833204     -0.182477      -35.4553       35.4553       650.691       686.146    
  79  0.882578     -0.124908      -24.2696       24.2696       431.405       455.675    
loop,thermsimp(1:2)       14   207.003       256.051    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102        869.49         88.68          1.10         40.33          0.79          0.05        130.95
Just calling func    0   0        130.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    869.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       14
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       15
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      101     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -285.601       285.601       393.403       679.005    
   2  0.322822      -1.13066      -219.686       219.686       397.704       617.390    
   3  0.327586      -1.11601      -216.840       216.840       431.405       648.245    
   4  0.799078     -0.224296      -43.5808       43.5808       351.872       395.453    
   5  0.698072     -0.359433      -69.8378       69.8378       306.131       375.969    
   6  0.733871     -0.309421      -60.1206       60.1206       489.043       549.164    
   7  0.823872     -0.193740      -37.6437       37.6437       463.150       500.794    
   8  0.800045     -0.223087      -43.3458       43.3458       416.401       459.746    
   9  0.162010      -1.82010      -353.644       353.644       347.064       700.709    
  10  0.113138      -2.17915      -423.408       423.408       355.054       778.462    
  11  0.973966     -0.263784E-01  -5.12532       5.12532       638.844       643.969    
  12  0.998107     -0.189521E-02 -0.368238      0.368238       398.214       398.583    
  13  0.631351     -0.459893      -89.3572       89.3572       611.139       700.496    
  14  0.698229     -0.359208      -69.7942       69.7942       651.726       721.520    
  15  0.359252      -1.02373      -198.911       198.911       643.143       842.054    
  16  0.936266     -0.658562E-01  -12.7958       12.7958       424.396       437.192    
  17  0.843107     -0.170662      -33.1596       33.1596       659.663       692.822    
  18  0.181284      -1.70769      -331.805       331.805       655.466       987.271    
  19  0.354246      -1.03777      -201.638       201.638       635.046       836.684    
  20  0.981540     -0.186324E-01  -3.62028       3.62028       649.887       653.507    
  21  0.582284E-01  -2.84338      -552.469       552.469       647.667       1200.14    
  22  0.935088     -0.671143E-01  -13.0403       13.0403       644.017       657.057    
  23  0.682144     -0.382515      -74.3226       74.3226       662.489       736.812    
  24  0.441439     -0.817715      -158.882       158.882       650.691       809.573    
  25  0.325829      -1.12138      -217.884       217.884       647.878       865.763    
  26  0.956968E-01  -2.34657      -455.939       455.939       595.465       1051.40    
  27  0.465124E-01  -3.06804      -596.119       596.119       640.261       1236.38    
  28  0.645503     -0.437726      -85.0502       85.0502       692.639       777.689    
  29  0.184751      -1.68875      -328.123       328.123       652.311       980.434    
  30  0.676303     -0.391115      -75.9936       75.9936       655.151       731.145    
  31  0.408248     -0.895880      -174.070       174.070       444.974       619.043    
  32  0.215511      -1.53474      -298.201       298.201       633.524       931.724    
  33  0.762109     -0.271666      -52.7847       52.7847       492.803       545.588    
  34  0.445022     -0.809632      -157.311       157.311       647.567       804.878    
  35  0.667113     -0.404797      -78.6519       78.6519       739.880       818.532    
  36  0.995785     -0.422376E-02 -0.820677      0.820677       641.406       642.227    
  37  0.278840      -1.27712      -248.144       248.144       656.982       905.126    
  38  0.624255     -0.471196      -91.5534       91.5534       424.450       516.004    
  39  0.368212     -0.999097      -194.125       194.125       647.523       841.648    
  40  0.330266      -1.10786      -215.257       215.257       648.436       863.693    
  41  0.969155     -0.313304E-01  -6.08750       6.08750       650.038       656.126    
  42  0.686816     -0.375688      -72.9962       72.9962       607.947       680.943    
  43  0.201053      -1.60419      -311.693       311.693       647.667       959.360    
  44  0.481166     -0.731544      -142.139       142.139       644.042       786.181    
  45  0.992829     -0.719725E-02  -1.39843       1.39843       647.158       648.557    
  46  0.665697     -0.406921      -79.0647       79.0647       643.879       722.943    
  47  0.991934E-02  -4.61327      -896.358       896.358       813.430       1709.79    
  48  0.211644      -1.55285      -301.719       301.719       552.606       854.325    
  49  0.908243E-01  -2.39883      -466.092       466.092       654.353       1120.45    
  50  0.643762     -0.440426      -85.5748       85.5748       650.470       736.045    
  51  0.568794E-01  -2.86682      -557.023       557.023       645.676       1202.70    
  52  0.159466      -1.83592      -356.720       356.720       630.738       987.458    
  53  0.918851     -0.846310E-01  -16.4438       16.4438       670.114       686.557    
  54  0.865178     -0.144820      -28.1385       28.1385       458.704       486.842    
  55  0.826009     -0.191150      -37.1404       37.1404       641.814       678.955    
  56  0.665816E-02  -5.01191      -973.814       973.814       738.310       1712.12    
  57  0.998155     -0.184716E-02 -0.358903      0.358903       658.954       659.313    
  58  0.875957E-01  -2.43502      -473.125       473.125       628.789       1101.91    
  59  0.546955     -0.603388      -117.238       117.238       624.852       742.090    
  60  0.953933     -0.471617E-01  -9.16352       9.16352       641.259       650.423    
  61  0.131488      -2.02884      -394.203       394.203       646.377       1040.58    
  62  0.415197     -0.879003      -170.790       170.790       633.264       804.054    
  63  0.543800E-02  -5.21434      -1013.15       1013.15       653.986       1667.13    
  64  0.821907     -0.196128      -38.1077       38.1077       790.741       828.849    
  65  0.590302     -0.527122      -102.420       102.420       677.765       780.185    
  66  0.380117     -0.967276      -187.942       187.942       771.957       959.898    
  67  0.640684     -0.445218      -86.5059       86.5059       703.726       790.232    
  68  0.268290      -1.31569      -255.638       255.638       646.719       902.357    
  69  0.625870     -0.468612      -91.0513       91.0513       655.480       746.531    
  70  0.937362     -0.646862E-01  -12.5685       12.5685       648.325       660.893    
  71  0.246375      -1.40090      -272.195       272.195       647.667       919.861    
  72  0.163534      -1.81073      -351.825       351.825       621.618       973.443    
  73  0.231078      -1.46500      -284.649       284.649       650.554       935.203    
  74  0.812335     -0.207842      -40.3837       40.3837       649.440       689.823    
  75  0.955269     -0.457625E-01  -8.89165       8.89165       645.348       654.239    
  76  0.126538      -2.06721      -401.659       401.659       645.827       1047.49    
  77  0.273907      -1.29497      -251.612       251.612       647.667       899.279    
  78  0.583291     -0.539069      -104.741       104.741       592.197       696.938    
  79  0.186464      -1.67951      -326.330       326.330       869.492       1195.82    
loop,thermsimp(1:2)       15   285.601       219.686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    103        436.73         88.63          1.11         40.29          0.77          0.05        130.84
Just calling func    0   0        130.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    104        385.13         88.55          1.09         40.02          1.21          0.05        130.93
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    385.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       15
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       16
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      103     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -113.422       113.422       306.131       419.553    
   2  0.850944     -0.161409      -31.3618       31.3618       351.872       383.234    
   3  0.343999      -1.06712      -207.341       207.341       398.214       605.555    
   4  0.481777E-02  -5.33544      -1036.68       1036.68       424.396       1461.07    
   5  0.146991      -1.91738      -372.547       372.547       416.401       788.948    
   6  0.545677     -0.605728      -117.693       117.693       458.704       576.397    
   7  0.761940     -0.271888      -52.8278       52.8278       463.150       515.978    
   8  0.944477     -0.571238E-01  -11.0992       11.0992       424.450       435.549    
   9  0.965249     -0.353688E-01  -6.87216       6.87216       492.803       499.675    
  10  0.634176     -0.455429      -88.4899       88.4899       489.043       577.533    
  11  0.793205     -0.231673      -45.0141       45.0141       397.704       442.718    
  12  0.743605     -0.296246      -57.5605       57.5605       444.974       502.534    
  13  0.983069E-01  -2.31966      -450.710       450.710       641.406       1092.12    
  14  0.618437     -0.480560      -93.3727       93.3727       638.844       732.217    
  15  0.429182     -0.845875      -164.353       164.353       431.405       595.759    
  16  0.771528     -0.259382      -50.3979       50.3979       647.158       697.556    
  17  0.218286      -1.52195      -295.714       295.714       641.259       936.973    
  18  0.556408     -0.586254      -113.909       113.909       649.887       763.796    
  19  0.526292     -0.641899      -124.721       124.721       645.348       770.069    
  20  0.665532     -0.407169      -79.1129       79.1129       650.038       729.151    
  21  0.261756      -1.34034      -260.429       260.429       644.017       904.446    
  22  0.975508     -0.247971E-01  -4.81808       4.81808       658.954       663.773    
  23  0.257613      -1.35630      -263.528       263.528       648.325       911.853    
  24  0.981555E-01  -2.32120      -451.009       451.009       641.814       1092.82    
  25  0.955054     -0.459870E-01  -8.93527       8.93527       393.403       402.339    
  26  0.887906     -0.118890      -23.1003       23.1003       607.947       631.047    
  27  0.407043     -0.898837      -174.644       174.644       670.114       844.758    
  28  0.876870     -0.131396      -25.5303       25.5303       649.440       674.970    
  29  0.957152     -0.437935E-01  -8.50908       8.50908       659.663       668.172    
  30  0.827730     -0.189068      -36.7359       36.7359       592.197       628.933    
  31  0.289027      -1.24124      -241.172       241.172       611.139       852.311    
  32  0.125230      -2.07760      -403.678       403.678       347.064       750.742    
  33  0.242443      -1.41699      -275.321       275.321       651.726       927.046    
  34  0.654103     -0.424490      -82.4784       82.4784       643.879       726.357    
  35  0.811871     -0.208414      -40.4948       40.4948       655.151       695.646    
  36  0.145201E-01  -4.23222      -822.320       822.320       650.470       1472.79    
  37  0.344449      -1.06581      -207.087       207.087       662.489       869.576    
  38  0.265532      -1.32602      -257.645       257.645       624.852       882.497    
  39  0.811851     -0.208438      -40.4995       40.4995       655.480       695.979    
  40  0.983290E-01  -2.31944      -450.666       450.666       692.639       1143.30    
  41  0.347314      -1.05753      -205.477       205.477       355.054       560.532    
  42  0.923773     -0.792888E-01  -15.4058       15.4058       677.765       693.171    
  43  0.690375     -0.370520      -71.9921       71.9921       644.042       716.034    
  44  0.227523      -1.48051      -287.662       287.662       703.726       991.389    
  45  0.652275     -0.427289      -83.0222       83.0222       633.264       716.286    
  46  0.669640     -0.401014      -77.9171       77.9171       647.567       725.484    
  47  0.288804      -1.24201      -241.322       241.322       650.691       892.013    
  48  0.404648     -0.904738      -175.791       175.791       739.880       915.671    
  49  0.371042     -0.991440      -192.637       192.637       790.741       983.378    
  50  0.308424      -1.17628      -228.551       228.551       635.046       863.598    
  51  0.911221     -0.929703E-01  -18.0641       18.0641       647.523       665.587    
  52  0.615436     -0.485425      -94.3180       94.3180       643.143       737.461    
  53  0.780328     -0.248041      -48.1943       48.1943       552.606       600.800    
  54  0.127539      -2.05933      -400.128       400.128       648.436       1048.56    
  55  0.709081     -0.343786      -66.7976       66.7976       647.878       714.676    
  56  0.974925     -0.253942E-01  -4.93410       4.93410       647.667       652.601    
  57  0.834943     -0.180392      -35.0501       35.0501       646.719       681.770    
  58  0.696274     -0.362013      -70.3390       70.3390       656.982       727.321    
  59  0.623965     -0.471660      -91.6436       91.6436       647.667       739.310    
  60  0.620467     -0.477282      -92.7359       92.7359       633.524       726.260    
  61  0.983840E-01  -2.31888      -450.558       450.558       650.554       1101.11    
  62  0.452904     -0.792074      -153.900       153.900       647.667       801.567    
  63  0.731276     -0.312965      -60.8091       60.8091       771.957       832.766    
  64  0.136630      -1.99048      -386.749       386.749       621.618       1008.37    
  65  0.819737     -0.198772      -38.6214       38.6214       652.311       690.932    
  66  0.415452     -0.878387      -170.671       170.671       655.466       826.137    
  67  0.931580     -0.708731E-01  -13.7706       13.7706       630.738       644.509    
  68  0.763119     -0.270341      -52.5273       52.5273       646.377       698.905    
  69  0.214680      -1.53861      -298.951       298.951       645.827       944.779    
  70  0.548736     -0.600138      -116.607       116.607       595.465       712.072    
  71  0.981486     -0.186872E-01  -3.63092       3.63092       628.789       632.420    
  72  0.475333     -0.743740      -144.509       144.509       654.353       798.862    
  73  0.484810     -0.723998      -140.673       140.673       869.492       1010.17    
  74  0.433802     -0.835166      -162.273       162.273       647.667       809.939    
  75  0.642789     -0.441939      -85.8687       85.8687       645.676       731.545    
  76  0.255584      -1.36420      -265.065       265.065       640.261       905.325    
  77  0.190283      -1.65924      -322.391       322.391       653.986       976.376    
  78  0.255288      -1.36536      -265.290       265.290       813.430       1078.72    
  79  0.992726     -0.730106E-02  -1.41860       1.41860       385.132       386.551    
loop,thermsimp(1:2)       16   113.422       31.3618    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        423.49         88.61          1.10         40.31          0.88          0.05        130.95
Just calling func    0   0        130.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    106        391.61         88.58          1.11         39.91          1.22          0.05        130.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    391.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       16
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       17
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      105     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -58.5594       58.5594       351.872       410.431    
   2  0.527958     -0.638738      -124.107       124.107       385.132       509.239    
   3  0.326119      -1.12049      -217.712       217.712       393.403       611.115    
   4  0.647061     -0.435314      -84.5815       84.5815       306.131       390.712    
   5  0.419805     -0.867966      -168.646       168.646       424.450       593.096    
   6  0.218417      -1.52135      -295.598       295.598       397.704       693.301    
   7  0.168864      -1.77866      -345.594       345.594       492.803       838.397    
   8  0.761417     -0.272575      -52.9612       52.9612       444.974       497.935    
   9  0.383989     -0.957143      -185.973       185.973       463.150       649.123    
  10  0.104774      -2.25595      -438.331       438.331       355.054       793.386    
  11  0.167912      -1.78432      -346.693       346.693       458.704       805.397    
  12  0.997930     -0.207190E-02 -0.402570      0.402570       489.043       489.446    
  13  0.493294     -0.706650      -137.302       137.302       431.405       568.707    
  14  0.483048     -0.727639      -141.380       141.380       552.606       693.986    
  15  0.715967     -0.334121      -64.9198       64.9198       398.214       463.134    
  16  0.595423E-01  -2.82107      -548.133       548.133       592.197       1140.33    
  17  0.636569     -0.451662      -87.7579       87.7579       607.947       695.705    
  18  0.482980     -0.727779      -141.407       141.407       628.789       770.197    
  19  0.500121     -0.692905      -134.631       134.631       630.738       765.369    
  20  0.426980     -0.851018      -165.353       165.353       647.667       813.019    
  21  0.546576     -0.604082      -117.373       117.373       658.954       776.328    
  22  0.142720      -1.94687      -378.277       378.277       647.523       1025.80    
  23  0.473622     -0.747346      -145.209       145.209       659.663       804.872    
  24  0.892718E-01  -2.41607      -469.442       469.442       649.440       1118.88    
  25  0.660659     -0.414518      -80.5407       80.5407       646.719       727.260    
  26  0.328755      -1.11244      -216.148       216.148       652.311       868.458    
  27  0.544150     -0.608530      -118.237       118.237       677.765       796.003    
  28  0.199068      -1.61411      -313.622       313.622       655.151       968.773    
  29  0.685070     -0.378234      -73.4909       73.4909       655.480       728.971    
  30  0.500258     -0.692632      -134.578       134.578       647.158       781.737    
  31  0.130607      -2.03556      -395.510       395.510       646.377       1041.89    
  32  0.982013E-01  -2.32074      -450.919       450.919       595.465       1046.38    
  33  0.581494E-01  -2.84474      -552.733       552.733       647.878       1200.61    
  34  0.841391     -0.172699      -33.5555       33.5555       644.042       677.598    
  35  0.838937E-01  -2.47820      -481.515       481.515       633.264       1114.78    
  36  0.729848     -0.314919      -61.1888       61.1888       647.567       708.756    
  37  0.748292     -0.289962      -56.3396       56.3396       633.524       689.863    
  38  0.229216      -1.47309      -286.221       286.221       643.879       930.100    
  39  0.710713     -0.341487      -66.3509       66.3509       656.982       723.333    
  40  0.511506     -0.670395      -130.258       130.258       650.038       780.296    
  41  0.106756      -2.23721      -434.689       434.689       645.676       1080.36    
  42  0.583466     -0.538770      -104.683       104.683       638.844       743.527    
  43  0.993140E-01  -2.30947      -448.730       448.730       643.143       1091.87    
  44  0.461224     -0.773871      -150.363       150.363       647.667       798.030    
  45  0.574465     -0.554316      -107.703       107.703       347.064       454.768    
  46  0.715977     -0.334107      -64.9171       64.9171       649.887       714.804    
  47  0.877584     -0.130583      -25.3722       25.3722       645.348       670.720    
  48  0.492354     -0.708558      -137.673       137.673       416.401       554.073    
  49  0.874926     -0.133616      -25.9617       25.9617       654.353       680.315    
  50  0.800367     -0.222685      -43.2676       43.2676       647.667       690.934    
  51  0.507308     -0.678636      -131.859       131.859       647.667       779.526    
  52  0.727831     -0.317686      -61.7264       61.7264       655.466       717.192    
  53  0.899777E-01  -2.40819      -467.912       467.912       771.957       1239.87    
  54  0.392780     -0.934505      -181.574       181.574       670.114       851.688    
  55  0.585301     -0.535629      -104.073       104.073       611.139       715.211    
  56  0.522884     -0.648395      -125.983       125.983       635.046       761.029    
  57  0.559213     -0.581225      -112.932       112.932       662.489       775.421    
  58  0.116989      -2.14568      -416.905       416.905       624.852       1041.76    
  59  0.411020     -0.889113      -172.755       172.755       650.691       823.446    
  60  0.484202     -0.725253      -140.917       140.917       644.017       784.934    
  61  0.771761     -0.259080      -50.3392       50.3392       640.261       690.600    
  62  0.908486     -0.959755E-01  -18.6480       18.6480       648.325       666.973    
  63  0.340814      -1.07642      -209.148       209.148       739.880       949.028    
  64  0.519873     -0.654172      -127.106       127.106       651.726       778.831    
  65  0.516320     -0.661029      -128.438       128.438       641.259       769.697    
  66  0.495555     -0.702076      -136.413       136.413       645.827       782.241    
  67  0.291626      -1.23228      -239.433       239.433       653.986       893.418    
  68  0.492590     -0.708077      -137.579       137.579       790.741       928.321    
  69  0.545663E-01  -2.90834      -565.090       565.090       703.726       1268.82    
  70  0.200869      -1.60510      -311.871       311.871       621.618       933.489    
  71  0.434763     -0.832954      -161.843       161.843       869.492       1031.34    
  72  0.241886E-01  -3.72187      -723.160       723.160       648.436       1371.60    
  73  0.846355     -0.166816      -32.4124       32.4124       813.430       845.843    
  74  0.598037     -0.514102      -99.8900       99.8900       641.406       741.296    
  75  0.780316     -0.248056      -48.1972       48.1972       641.814       690.011    
  76  0.242603      -1.41633      -275.193       275.193       650.554       925.747    
  77  0.483498     -0.726708      -141.199       141.199       692.639       833.838    
  78  0.719876     -0.328676      -63.8617       63.8617       424.396       488.258    
  79  0.223210      -1.49964      -291.380       291.380       391.608       682.988    
loop,thermsimp(1:2)       17   58.5594       124.107    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107        419.67         88.57          1.12         40.72          0.59          0.05        131.05
Just calling func    0   0        131.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        361.87         88.61          1.10         40.02          1.07          0.05        130.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    361.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       17
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       18
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      107     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -186.545       186.545       306.131       492.676    
   2  0.293468      -1.22599      -238.209       238.209       351.872       590.082    
   3  0.954036     -0.470539E-01  -9.14256       9.14256       347.064       356.207    
   4  0.452934     -0.792010      -153.887       153.887       398.214       552.102    
   5  0.251692      -1.37955      -268.046       268.046       424.396       692.442    
   6  0.881081     -0.126605      -24.5994       24.5994       489.043       513.643    
   7  0.855311     -0.156290      -30.3671       30.3671       444.974       475.341    
   8  0.576474     -0.550824      -107.025       107.025       385.132       492.157    
   9  0.433835     -0.835090      -162.258       162.258       416.401       578.659    
  10  0.298626      -1.20856      -234.824       234.824       431.405       666.230    
  11  0.269991      -1.30937      -254.410       254.410       424.450       678.860    
  12  0.884826     -0.122364      -23.7753       23.7753       393.403       417.179    
  13  0.664124     -0.409287      -79.5244       79.5244       463.150       542.675    
  14  0.580836     -0.543287      -105.561       105.561       648.325       753.886    
  15  0.285501      -1.25351      -243.557       243.557       645.348       888.904    
  16  0.690757     -0.369967      -71.8846       71.8846       644.042       715.927    
  17  0.578320     -0.547628      -106.404       106.404       654.353       760.757    
  18  0.563230     -0.574067      -111.541       111.541       391.608       503.149    
  19  0.681565     -0.383363      -74.4875       74.4875       633.524       708.011    
  20  0.453362     -0.791065      -153.704       153.704       641.814       795.518    
  21  0.645457     -0.437797      -85.0640       85.0640       640.261       725.325    
  22  0.982222E-01  -2.32052      -450.878       450.878       647.667       1098.54    
  23  0.843064     -0.170712      -33.1694       33.1694       397.704       430.873    
  24  0.505683     -0.681845      -132.483       132.483       552.606       685.089    
  25  0.350376      -1.04875      -203.772       203.772       607.947       811.719    
  26  0.367167      -1.00194      -194.677       194.677       647.567       842.244    
  27  0.268175      -1.31611      -255.721       255.721       649.887       905.607    
  28  0.989085E-01  -2.31356      -449.525       449.525       611.139       1060.66    
  29  0.349392      -1.05156      -204.318       204.318       655.466       859.784    
  30  0.945468     -0.560755E-01  -10.8955       10.8955       656.982       667.877    
  31  0.305400      -1.18613      -230.465       230.465       646.719       877.185    
  32  0.942706     -0.590006E-01  -11.4638       11.4638       655.480       666.944    
  33  0.778346     -0.250584      -48.6885       48.6885       641.406       690.094    
  34  0.256449      -1.36083      -264.408       264.408       638.844       903.253    
  35  0.338120      -1.08436      -210.690       210.690       635.046       845.736    
  36  0.644609     -0.439112      -85.3194       85.3194       630.738       716.057    
  37  0.420837     -0.865509      -168.168       168.168       641.259       809.427    
  38  0.793406     -0.231421      -44.9650       44.9650       628.789       673.754    
  39  0.685561     -0.377517      -73.3516       73.3516       662.489       735.841    
  40  0.278740      -1.27748      -248.214       248.214       658.954       907.168    
  41  0.414078     -0.881700      -171.314       171.314       651.726       823.040    
  42  0.999720     -0.280334E-03 -0.544688E-01  0.544688E-01   647.667       647.721    
  43  0.714259     -0.336509      -65.3837       65.3837       650.038       715.422    
  44  0.713371     -0.337753      -65.6255       65.6255       647.158       712.784    
  45  0.451360     -0.795490      -154.564       154.564       645.827       800.391    
  46  0.887280     -0.119595      -23.2373       23.2373       644.017       667.254    
  47  0.234319      -1.45107      -281.943       281.943       355.054       636.998    
  48  0.277567E-01  -3.58428      -696.425       696.425       677.765       1374.19    
  49  0.582411     -0.540579      -105.034       105.034       647.667       752.701    
  50  0.969019     -0.314707E-01  -6.11475       6.11475       659.663       665.778    
  51  0.441889     -0.816696      -158.684       158.684       458.704       617.388    
  52  0.150247      -1.89548      -368.291       368.291       647.667       1015.96    
  53  0.901555E-01  -2.40622      -467.528       467.528       650.691       1118.22    
  54  0.274120      -1.29419      -251.461       251.461       692.639       944.100    
  55  0.166801      -1.79095      -347.982       347.982       492.803       840.785    
  56  0.783053     -0.244555      -47.5171       47.5171       813.430       860.947    
  57  0.541655     -0.613126      -119.130       119.130       670.114       789.244    
  58  0.113786      -2.17344      -422.298       422.298       652.311       1074.61    
  59  0.794080     -0.230571      -44.7999       44.7999       653.986       698.786    
  60  0.266758      -1.32141      -256.750       256.750       650.554       907.305    
  61  0.637690     -0.449903      -87.4161       87.4161       790.741       878.158    
  62  0.912681     -0.913685E-01  -17.7529       17.7529       643.879       661.631    
  63  0.303728      -1.19162      -231.532       231.532       621.618       853.150    
  64  0.318303      -1.14475      -222.425       222.425       739.880       962.305    
  65  0.255833      -1.36323      -264.875       264.875       655.151       920.026    
  66  0.988998     -0.110626E-01  -2.14947       2.14947       647.523       649.672    
  67  0.335641      -1.09171      -212.120       212.120       869.492       1081.61    
  68  0.575346     -0.552784      -107.406       107.406       624.852       732.258    
  69  0.439298E-01  -3.12516      -607.219       607.219       646.377       1253.60    
  70  0.179935      -1.71516      -333.255       333.255       595.465       928.720    
  71  0.939813     -0.620740E-01  -12.0610       12.0610       645.676       657.737    
  72  0.787717     -0.238616      -46.3630       46.3630       643.143       689.506    
  73  0.622521     -0.473978      -92.0938       92.0938       633.264       725.357    
  74  0.544172     -0.608491      -118.230       118.230       649.440       767.669    
  75  0.688511     -0.373223      -72.5173       72.5173       592.197       664.714    
  76  0.771411     -0.259534      -50.4275       50.4275       647.878       698.306    
  77  0.814829     -0.204777      -39.7882       39.7882       771.957       811.745    
  78  0.726465     -0.319564      -62.0914       62.0914       703.726       765.818    
  79  0.484661     -0.724306      -140.733       140.733       361.872       502.605    
loop,thermsimp(1:2)       18   186.545       238.209    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109        428.22         88.59          1.09         40.19          0.95          0.05        130.87
Just calling func    0   0        130.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        386.01         88.57          1.10         40.24          0.84          0.05        130.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    386.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       18
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       19
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      109     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -202.326       202.326       347.064       549.391    
   2  0.270835E-01  -3.60883      -701.196       701.196       393.403       1094.60    
   3  0.923755     -0.793087E-01  -15.4097       15.4097       397.704       413.113    
   4  0.535520     -0.624517      -121.344       121.344       444.974       566.317    
   5  0.629344     -0.463078      -89.9760       89.9760       385.132       475.108    
   6  0.572648E-01  -2.86007      -555.711       555.711       306.131       861.842    
   7  0.353113E-01  -3.34355      -649.652       649.652       361.872       1011.52    
   8  0.580838     -0.543283      -105.560       105.560       391.608       497.168    
   9  0.370403     -0.993164      -192.972       192.972       489.043       682.015    
  10  0.443010     -0.814162      -158.192       158.192       463.150       621.342    
  11  0.188704      -1.66757      -324.010       324.010       398.214       722.224    
  12  0.177608      -1.72818      -335.785       335.785       416.401       752.186    
  13  0.694998     -0.363847      -70.6954       70.6954       351.872       422.567    
  14  0.160742      -1.82796      -355.172       355.172       458.704       813.876    
  15  0.290050      -1.23770      -240.486       240.486       355.054       595.540    
  16  0.441138E-01  -3.12098      -606.407       606.407       647.667       1254.07    
  17  0.372461     -0.987622      -191.895       191.895       647.523       839.418    
  18  0.652779     -0.426517      -82.8722       82.8722       645.676       728.548    
  19  0.998108     -0.189387E-02 -0.367980      0.367980       643.879       644.247    
  20  0.741140     -0.299566      -58.2057       58.2057       592.197       650.403    
  21  0.623042     -0.473141      -91.9314       91.9314       659.663       751.594    
  22  0.504617     -0.683955      -132.892       132.892       431.405       564.298    
  23  0.872499     -0.136394      -26.5014       26.5014       655.480       681.981    
  24  0.142620      -1.94757      -378.413       378.413       644.017       1022.43    
  25  0.580285     -0.544236      -105.745       105.745       656.982       762.727    
  26  0.860063E-01  -2.45334      -476.683       476.683       628.789       1105.47    
  27  0.401846     -0.911687      -177.141       177.141       424.450       601.591    
  28  0.161242      -1.82485      -354.569       354.569       552.606       907.175    
  29  0.550753     -0.596469      -115.894       115.894       643.143       759.037    
  30  0.815012     -0.204553      -39.7446       39.7446       641.406       681.151    
  31  0.438663     -0.824024      -160.108       160.108       424.396       584.504    
  32  0.542283     -0.611968      -118.905       118.905       647.878       766.783    
  33  0.943132E-01  -2.36113      -458.768       458.768       653.986       1112.75    
  34  0.236587      -1.44144      -280.071       280.071       633.524       913.595    
  35  0.283068      -1.26207      -245.220       245.220       647.158       892.378    
  36  0.973178     -0.271886E-01  -5.28274       5.28274       650.038       655.321    
  37  0.596723     -0.516302      -100.317       100.317       644.042       744.360    
  38  0.595114     -0.519003      -100.842       100.842       630.738       731.580    
  39  0.948736     -0.526250E-01  -10.2250       10.2250       640.261       650.486    
  40  0.216072E-01  -3.83473      -745.088       745.088       633.264       1378.35    
  41  0.440213     -0.820496      -159.422       159.422       624.852       784.274    
  42  0.905197     -0.996023E-01  -19.3527       19.3527       662.489       681.842    
  43  0.158396      -1.84266      -358.029       358.029       647.667       1005.70    
  44  0.287789      -1.24553      -242.006       242.006       648.325       890.331    
  45  0.238244      -1.43446      -278.716       278.716       654.353       933.069    
  46  0.363881      -1.01093      -196.423       196.423       703.726       900.149    
  47  0.828805     -0.187771      -36.4839       36.4839       649.440       685.923    
  48  0.587140     -0.532492      -103.463       103.463       670.114       773.577    
  49  0.141687      -1.95414      -379.689       379.689       641.814       1021.50    
  50  0.879115     -0.128839      -25.0334       25.0334       645.827       670.861    
  51  0.742190     -0.298150      -57.9306       57.9306       641.259       699.190    
  52  0.218958      -1.51887      -295.117       295.117       607.947       903.064    
  53  0.333192      -1.09904      -213.543       213.543       771.957       985.500    
  54  0.356774      -1.03065      -200.256       200.256       651.726       851.982    
  55  0.739597     -0.301650      -58.6107       58.6107       492.803       551.413    
  56  0.224658E-01  -3.79576      -737.516       737.516       647.567       1385.08    
  57  0.338214      -1.08408      -210.636       210.636       635.046       845.682    
  58  0.227014      -1.48275      -288.097       288.097       621.618       909.716    
  59  0.289792E-01  -3.54118      -688.050       688.050       655.466       1343.52    
  60  0.871226     -0.137854      -26.7851       26.7851       813.430       840.215    
  61  0.159622      -1.83495      -356.531       356.531       646.719       1003.25    
  62  0.581826     -0.541584      -105.230       105.230       790.741       895.971    
  63  0.733467E-02  -4.91514      -955.012       955.012       645.348       1600.36    
  64  0.646078     -0.436835      -84.8770       84.8770       638.844       723.721    
  65  0.976710     -0.235653E-01  -4.57873       4.57873       649.887       654.465    
  66  0.390127     -0.941284      -182.891       182.891       658.954       841.846    
  67  0.394291     -0.930666      -180.828       180.828       650.554       831.383    
  68  0.796004     -0.228151      -44.3297       44.3297       655.151       699.481    
  69  0.393786     -0.931948      -181.077       181.077       595.465       776.543    
  70  0.672353     -0.396971      -77.1315       77.1315       692.639       769.770    
  71  0.856786E-01  -2.45715      -477.424       477.424       739.880       1217.30    
  72  0.769351     -0.262207      -50.9469       50.9469       647.667       698.613    
  73  0.161441E-01  -4.12620      -801.721       801.721       611.139       1412.86    
  74  0.126673      -2.06615      -401.452       401.452       652.311       1053.76    
  75  0.594452E-01  -2.82270      -548.451       548.451       869.492       1417.94    
  76  0.865232     -0.144757      -28.1263       28.1263       647.667       675.793    
  77  0.980529     -0.196631E-01  -3.82054       3.82054       650.691       654.511    
  78  0.862745     -0.147636      -28.6856       28.6856       646.377       675.063    
  79  0.587821     -0.531332      -103.238       103.238       386.005       489.243    
loop,thermsimp(1:2)       19   202.326       701.196    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        414.22         88.65          1.11         40.23          0.83          0.05        130.87
Just calling func    0   0        130.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        369.02         88.55          1.10         40.02          1.08          0.05        130.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    369.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       19
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       20
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      111     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -121.625       121.625       397.704       519.328    
   2  0.288348      -1.24359      -241.629       241.629       351.872       593.501    
   3  0.910112E-01  -2.39677      -465.693       465.693       385.132       850.825    
   4  0.213812      -1.54266      -299.738       299.738       386.005       685.744    
   5  0.575222     -0.552999      -107.448       107.448       391.608       499.055    
   6  0.855707     -0.155827      -30.2772       30.2772       347.064       377.341    
   7  0.818692     -0.200047      -38.8692       38.8692       492.803       531.672    
   8  0.309911      -1.17147      -227.617       227.617       431.405       659.022    
   9  0.773438     -0.256910      -49.9176       49.9176       444.974       494.891    
  10  0.440502E-01  -3.12243      -606.687       606.687       424.396       1031.08    
  11  0.211655      -1.55280      -301.709       301.709       355.054       656.763    
  12  0.713577     -0.337465      -65.5695       65.5695       424.450       490.020    
  13  0.927405     -0.753650E-01  -14.6434       14.6434       463.150       477.794    
  14  0.360229      -1.02101      -198.383       198.383       643.879       842.262    
  15  0.911872     -0.922553E-01  -17.9252       17.9252       592.197       610.122    
  16  0.800691     -0.222280      -43.1891       43.1891       640.261       683.450    
  17  0.169830      -1.77296      -344.486       344.486       649.887       994.372    
  18  0.581014     -0.542980      -105.501       105.501       650.691       756.192    
  19  0.869395     -0.139958      -27.1938       27.1938       650.038       677.232    
  20  0.773880     -0.256338      -49.8065       49.8065       645.827       695.634    
  21  0.496085     -0.701008      -136.206       136.206       646.377       782.583    
  22  0.530037     -0.634809      -123.343       123.343       647.667       771.010    
  23  0.239414      -1.42956      -277.764       277.764       641.406       919.170    
  24  0.595728     -0.517972      -100.642       100.642       662.489       763.131    
  25  0.170793      -1.76730      -343.387       343.387       655.480       998.867    
  26  0.983027     -0.171183E-01  -3.32608       3.32608       489.043       492.370    
  27  0.608714     -0.496407      -96.4518       96.4518       649.440       745.891    
  28  0.518727     -0.656378      -127.534       127.534       647.667       775.201    
  29  0.887918     -0.118876      -23.0976       23.0976       641.259       664.357    
  30  0.140498      -1.96256      -381.326       381.326       655.151       1036.48    
  31  0.256308      -1.36138      -264.515       264.515       398.214       662.730    
  32  0.887238     -0.119642      -23.2464       23.2464       638.844       662.091    
  33  0.306042      -1.18403      -230.058       230.058       645.676       875.733    
  34  0.993873     -0.614632E-02  -1.19423       1.19423       630.738       631.932    
  35  0.275412E-01  -3.59207      -697.940       697.940       644.042       1341.98    
  36  0.698960     -0.358161      -69.5907       69.5907       659.663       729.254    
  37  0.268424      -1.31519      -255.541       255.541       416.401       671.941    
  38  0.580935E-01  -2.84570      -552.920       552.920       643.143       1196.06    
  39  0.242705      -1.41591      -275.111       275.111       656.982       932.093    
  40  0.443517     -0.813019      -157.970       157.970       647.878       805.848    
  41  0.904179     -0.100728      -19.5714       19.5714       692.639       712.210    
  42  0.454025     -0.789603      -153.420       153.420       670.114       823.533    
  43  0.592994     -0.522572      -101.536       101.536       595.465       697.001    
  44  0.401796     -0.911812      -177.165       177.165       624.852       802.017    
  45  0.130776      -2.03427      -395.259       395.259       458.704       853.963    
  46  0.709753     -0.342839      -66.6136       66.6136       650.554       717.168    
  47  0.388071     -0.946568      -183.918       183.918       647.523       831.441    
  48  0.362521      -1.01467      -197.151       197.151       813.430       1010.58    
  49  0.285379      -1.25394      -243.640       243.640       658.954       902.594    
  50  0.286508      -1.24999      -242.873       242.873       635.046       877.919    
  51  0.951542     -0.496714E-01  -9.65116       9.65116       651.726       661.377    
  52  0.122933      -2.09612      -407.276       407.276       306.131       713.407    
  53  0.210928      -1.55624      -302.377       302.377       648.325       950.702    
  54  0.860093     -0.150715      -29.2839       29.2839       647.158       676.442    
  55  0.997563     -0.243951E-02 -0.473997      0.473997       790.741       791.215    
  56  0.750720     -0.286722      -55.7101       55.7101       703.726       759.436    
  57  0.667101     -0.404814      -78.6553       78.6553       607.947       686.602    
  58  0.508750E-01  -2.97838      -578.700       578.700       552.606       1131.31    
  59  0.552474     -0.593349      -115.288       115.288       621.618       736.906    
  60  0.514478     -0.664602      -129.132       129.132       633.524       762.656    
  61  0.539834     -0.616494      -119.785       119.785       654.353       774.138    
  62  0.610888     -0.492841      -95.7590       95.7590       771.957       867.716    
  63  0.328075      -1.11451      -216.550       216.550       646.719       863.269    
  64  0.894692     -0.111276      -21.6210       21.6210       647.667       669.288    
  65  0.810283     -0.210372      -40.8752       40.8752       361.872       402.748    
  66  0.691642     -0.368687      -71.6358       71.6358       641.814       713.450    
  67  0.896896     -0.108815      -21.1427       21.1427       644.017       665.160    
  68  0.742287     -0.298020      -57.9053       57.9053       652.311       710.216    
  69  0.974450     -0.258821E-01  -5.02889       5.02889       393.403       398.432    
  70  0.339669      -1.07978      -209.802       209.802       628.789       838.591    
  71  0.854515     -0.157221      -30.5481       30.5481       653.986       684.534    
  72  0.153353      -1.87501      -364.315       364.315       739.880       1104.19    
  73  0.883349     -0.124034      -24.0999       24.0999       647.667       671.766    
  74  0.716255     -0.333718      -64.8415       64.8415       655.466       720.307    
  75  0.645043     -0.438438      -85.1884       85.1884       633.264       718.452    
  76  0.630111     -0.461860      -89.7394       89.7394       647.567       737.306    
  77  0.511014     -0.671358      -130.445       130.445       611.139       741.583    
  78  0.130062      -2.03974      -396.322       396.322       869.492       1265.81    
  79  0.671069     -0.398883      -77.5029       77.5029       369.017       446.520    
loop,thermsimp(1:2)       20   121.625       241.629    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        402.90         88.62          1.12         40.25          0.66          0.05        130.70
Just calling func    0   0        130.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        357.18         88.67          1.13         40.34          0.67          0.05        130.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    357.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       20
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       21
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      113     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -235.609       235.609       347.064       582.673    
   2  0.663536     -0.410173      -79.6966       79.6966       393.403       473.100    
   3  0.263982      -1.33188      -258.783       258.783       361.872       620.656    
   4  0.792402     -0.232686      -45.2109       45.2109       369.017       414.228    
   5  0.624731     -0.470434      -91.4053       91.4053       463.150       554.555    
   6  0.170977      -1.76622      -343.177       343.177       424.450       767.628    
   7  0.362487      -1.01477      -197.169       197.169       489.043       686.213    
   8  0.659245     -0.416659      -80.9569       80.9569       444.974       525.930    
   9  0.746481E-03  -7.20014      -1398.99       1398.99       391.608       1790.59    
  10  0.690046     -0.370998      -72.0848       72.0848       397.704       469.788    
  11  0.905636     -0.991173E-01  -19.2585       19.2585       492.803       512.061    
  12  0.317643      -1.14683      -222.829       222.829       351.872       574.701    
  13  0.321948      -1.13336      -220.213       220.213       592.197       812.410    
  14  0.293974      -1.22426      -237.875       237.875       630.738       868.613    
  15  0.679275     -0.386729      -75.1414       75.1414       355.054       430.196    
  16  0.180340      -1.71291      -332.819       332.819       431.405       764.224    
  17  0.539600     -0.616927      -119.869       119.869       651.726       771.595    
  18  0.260315      -1.34586      -261.501       261.501       638.844       900.345    
  19  0.256777      -1.35955      -264.160       264.160       398.214       662.374    
  20  0.518851     -0.656138      -127.488       127.488       641.259       768.747    
  21  0.485887     -0.721780      -140.242       140.242       644.017       784.259    
  22  0.562814     -0.574805      -111.685       111.685       647.667       759.351    
  23  0.906369     -0.983082E-01  -19.1013       19.1013       647.667       666.768    
  24  0.332143      -1.10219      -214.155       214.155       416.401       630.556    
  25  0.912001E-01  -2.39470      -465.290       465.290       647.158       1112.45    
  26  0.302569      -1.19545      -232.275       232.275       650.038       882.313    
  27  0.362040      -1.01600      -197.409       197.409       640.261       837.669    
  28  0.630870     -0.460656      -89.5054       89.5054       653.986       743.491    
  29  0.685312     -0.377881      -73.4222       73.4222       386.005       459.428    
  30  0.329910      -1.10894      -215.466       215.466       607.947       823.413    
  31  0.906630E-01  -2.40061      -466.438       466.438       645.827       1112.26    
  32  0.339749      -1.07955      -209.756       209.756       595.465       805.222    
  33  0.783039     -0.244573      -47.5205       47.5205       652.311       699.831    
  34  0.322673      -1.13112      -219.776       219.776       692.639       912.415    
  35  0.255311      -1.36527      -265.272       265.272       306.131       571.403    
  36  0.645921     -0.437078      -84.9242       84.9242       641.814       726.738    
  37  0.240122      -1.42661      -277.190       277.190       650.554       927.744    
  38  0.224638      -1.49326      -290.141       290.141       633.264       923.405    
  39  0.682659     -0.381760      -74.1759       74.1759       655.466       729.642    
  40  0.533856     -0.627629      -121.948       121.948       659.663       781.611    
  41  0.439620E-02  -5.42701      -1054.47       1054.47       621.618       1676.09    
  42  0.409891     -0.891863      -173.289       173.289       647.567       820.856    
  43  0.379406     -0.969149      -188.306       188.306       611.139       799.444    
  44  0.982111     -0.180514E-01  -3.50739       3.50739       649.440       652.947    
  45  0.243530      -1.41251      -274.451       274.451       650.691       925.142    
  46  0.709323     -0.343445      -66.7313       66.7313       703.726       770.458    
  47  0.212014      -1.55110      -301.379       301.379       633.524       934.903    
  48  0.530919     -0.633146      -123.020       123.020       662.489       785.510    
  49  0.439600     -0.821890      -159.693       159.693       647.667       807.360    
  50  0.304385      -1.18946      -231.112       231.112       654.353       885.466    
  51  0.850253     -0.162221      -31.5195       31.5195       647.667       679.186    
  52  0.686564     -0.376055      -73.0675       73.0675       646.377       719.445    
  53  0.894299     -0.111715      -21.7062       21.7062       790.741       812.448    
  54  0.724097E-02  -4.92800      -957.510       957.510       624.852       1582.36    
  55  0.666382     -0.405892      -78.8647       78.8647       647.878       726.743    
  56  0.216072      -1.53214      -297.696       297.696       670.114       967.809    
  57  0.481454     -0.730944      -142.022       142.022       647.523       789.545    
  58  0.107413      -2.23107      -433.497       433.497       628.789       1062.29    
  59  0.943557     -0.580990E-01  -11.2886       11.2886       643.879       655.167    
  60  0.259811      -1.34780      -261.878       261.878       385.132       647.010    
  61  0.526852     -0.640836      -124.514       124.514       458.704       583.218    
  62  0.306319E-01  -3.48571      -677.274       677.274       646.719       1323.99    
  63  0.180513      -1.71195      -332.632       332.632       771.957       1104.59    
  64  0.901495     -0.103701      -20.1491       20.1491       645.676       665.825    
  65  0.274530      -1.29269      -251.171       251.171       635.046       886.217    
  66  0.773836     -0.256395      -49.8176       49.8176       658.954       708.772    
  67  0.158774      -1.84027      -357.565       357.565       641.406       998.971    
  68  0.514226     -0.665093      -129.227       129.227       656.982       786.209    
  69  0.312978      -1.16162      -225.703       225.703       648.325       874.028    
  70  0.917534     -0.860656E-01  -16.7225       16.7225       649.887       666.609    
  71  0.548182     -0.601148      -116.803       116.803       655.480       772.283    
  72  0.131177      -2.03121      -394.663       394.663       813.430       1208.09    
  73  0.407078     -0.898750      -174.627       174.627       424.396       599.023    
  74  0.793948     -0.230737      -44.8323       44.8323       655.151       699.983    
  75  0.817497     -0.201509      -39.1531       39.1531       739.880       779.033    
  76  0.948163     -0.532294E-01  -10.3425       10.3425       552.606       562.949    
  77  0.578937E-01  -2.84915      -553.589       553.589       643.143       1196.73    
  78  0.701887     -0.353983      -68.7789       68.7789       869.492       938.271    
  79  0.934701     -0.675283E-01  -13.1208       13.1208       357.184       370.305    
loop,thermsimp(1:2)       21   235.609       79.6966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        945.84         88.71          1.11         40.43          0.57          0.05        130.87
Just calling func    0   0        130.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    945.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       21
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       22
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      114     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -186.133       186.133       357.184       543.318    
   2  0.741480     -0.299107      -58.1164       58.1164       369.017       427.134    
   3  0.138898      -1.97401      -383.551       383.551       355.054       738.605    
   4  0.751974E-01  -2.58764      -502.778       502.778       386.005       888.783    
   5  0.824485     -0.192996      -37.4991       37.4991       397.704       435.203    
   6  0.982900     -0.172482E-01  -3.35133       3.35133       393.403       396.755    
   7  0.693409     -0.366136      -71.1402       71.1402       492.803       563.943    
   8  0.941572     -0.602045E-01  -11.6977       11.6977       444.974       456.671    
   9  0.812713     -0.207378      -40.2935       40.2935       463.150       503.444    
  10  0.879507     -0.128393      -24.9468       24.9468       552.606       577.553    
  11  0.418958     -0.869984      -169.038       169.038       306.131       475.169    
  12  0.314952      -1.15533      -224.481       224.481       351.872       576.353    
  13  0.812426     -0.207731      -40.3621       40.3621       347.064       387.426    
  14  0.213788      -1.54277      -299.760       299.760       458.704       758.464    
  15  0.521629     -0.650798      -126.450       126.450       424.396       550.846    
  16  0.287143      -1.24777      -242.443       242.443       361.872       604.315    
  17  0.518340     -0.657125      -127.679       127.679       416.401       544.080    
  18  0.712802E-02  -4.94372      -960.565       960.565       385.132       1345.70    
  19  0.579935     -0.544838      -105.862       105.862       649.440       755.302    
  20  0.508101E-02  -5.28224      -1026.34       1026.34       643.879       1670.22    
  21  0.984466     -0.156557E-01  -3.04191       3.04191       398.214       401.256    
  22  0.394325     -0.930579      -180.811       180.811       645.676       826.487    
  23  0.837309     -0.177562      -34.5003       34.5003       649.887       684.387    
  24  0.683519     -0.380501      -73.9313       73.9313       647.667       721.598    
  25  0.892337     -0.113912      -22.1331       22.1331       647.667       669.800    
  26  0.297675      -1.21175      -235.444       235.444       489.043       724.487    
  27  0.566054     -0.569065      -110.569       110.569       652.311       762.880    
  28  0.325499E-01  -3.42498      -665.474       665.474       655.151       1320.62    
  29  0.721169     -0.326882      -63.5131       63.5131       658.954       722.468    
  30  0.370449     -0.993040      -192.948       192.948       646.377       839.325    
  31  0.398952     -0.918913      -178.545       178.545       641.814       820.359    
  32  0.942469     -0.592518E-01  -11.5126       11.5126       647.878       659.391    
  33  0.379045     -0.970101      -188.491       188.491       655.466       843.957    
  34  0.218373      -1.52155      -295.637       295.637       653.986       949.623    
  35  0.413944     -0.882024      -171.377       171.377       647.667       819.044    
  36  0.452532     -0.792896      -154.060       154.060       431.405       585.465    
  37  0.938896     -0.630505E-01  -12.2507       12.2507       424.450       436.701    
  38  0.389299     -0.943409      -183.304       183.304       641.259       824.563    
  39  0.943794     -0.578471E-01  -11.2397       11.2397       703.726       714.966    
  40  0.706887     -0.346884      -67.3996       67.3996       651.726       719.125    
  41  0.274873      -1.29145      -250.928       250.928       655.480       906.408    
  42  0.343864      -1.06751      -207.417       207.417       739.880       947.297    
  43  0.869527E-01  -2.44239      -474.557       474.557       659.663       1134.22    
  44  0.859615     -0.151271      -29.3919       29.3919       644.017       673.409    
  45  0.264079      -1.33151      -258.712       258.712       662.489       921.201    
  46  0.494871     -0.703457      -136.682       136.682       656.982       793.664    
  47  0.112943      -2.18087      -423.744       423.744       647.523       1071.27    
  48  0.358273      -1.02646      -199.441       199.441       611.139       810.580    
  49  0.215257      -1.53592      -298.429       298.429       595.465       893.895    
  50  0.441681     -0.817166      -158.775       158.775       647.667       806.442    
  51  0.888276     -0.118473      -23.0193       23.0193       592.197       615.216    
  52  0.780286     -0.248095      -48.2049       48.2049       790.741       838.946    
  53  0.488747     -0.715911      -139.101       139.101       647.567       786.668    
  54  0.683795     -0.380097      -73.8529       73.8529       607.947       681.800    
  55  0.466986     -0.761456      -147.951       147.951       640.261       788.211    
  56  0.900497     -0.104809      -20.3643       20.3643       630.738       651.102    
  57  0.876058     -0.132323      -25.7103       25.7103       648.325       674.035    
  58  0.413808     -0.882354      -171.441       171.441       650.038       821.480    
  59  0.268165      -1.31615      -255.729       255.729       654.353       910.082    
  60  0.637465     -0.450255      -87.4846       87.4846       635.046       722.531    
  61  0.476344     -0.741616      -144.096       144.096       638.844       782.940    
  62  0.878474     -0.129569      -25.1753       25.1753       692.639       717.814    
  63  0.185973      -1.68216      -326.843       326.843       633.264       960.106    
  64  0.802667E-03  -7.12757      -1384.89       1384.89       650.691       2035.58    
  65  0.480758     -0.732390      -142.303       142.303       650.554       792.858    
  66  0.789279     -0.236635      -45.9781       45.9781       633.524       679.502    
  67  0.174217      -1.74745      -339.530       339.530       869.492       1209.02    
  68  0.825561     -0.191692      -37.2457       37.2457       670.114       707.359    
  69  0.532291     -0.630566      -122.519       122.519       641.406       763.925    
  70  0.118632E-01  -4.43431      -861.586       861.586       628.789       1490.38    
  71  0.214857      -1.53778      -298.791       298.791       771.957       1070.75    
  72  0.111318      -2.19536      -426.559       426.559       645.827       1072.39    
  73  0.823034     -0.194758      -37.8415       37.8415       647.158       685.000    
  74  0.697593     -0.360119      -69.9711       69.9711       643.143       713.114    
  75  0.588207     -0.530676      -103.110       103.110       813.430       916.541    
  76  0.384970     -0.954591      -185.477       185.477       646.719       832.196    
  77  0.768352     -0.263507      -51.1993       51.1993       624.852       676.051    
  78  0.990092     -0.995757E-02  -1.93476       1.93476       621.618       623.553    
  79  0.550430     -0.597056      -116.008       116.008       945.845       1061.85    
loop,thermsimp(1:2)       22   186.133       58.1164    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116        405.02         88.62          1.10         40.22          0.92          0.05        130.91
Just calling func    0   0        130.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    117        348.03         88.63          1.10         40.44          0.78          0.05        131.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    348.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       22
neval is:      116
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       23
neval is:      116


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      116     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -216.798       216.798       347.064       563.863    
   2  0.736029     -0.306486      -59.5502       59.5502       393.403       452.954    
   3  0.608436     -0.496864      -96.5407       96.5407       398.214       494.755    
   4  0.584882     -0.536346      -104.212       104.212       369.017       473.229    
   5  0.617514     -0.482053      -93.6628       93.6628       397.704       491.366    
   6  0.376473     -0.976909      -189.813       189.813       424.450       614.264    
   7  0.535145     -0.625218      -121.480       121.480       444.974       566.453    
   8  0.341783      -1.07358      -208.596       208.596       306.131       514.727    
   9  0.804208E-01  -2.52048      -489.730       489.730       463.150       952.880    
  10  0.660499     -0.414760      -80.5879       80.5879       357.184       437.772    
  11  0.739860E-01  -2.60388      -505.934       505.934       416.401       922.334    
  12  0.203251      -1.59331      -309.580       309.580       424.396       733.976    
  13  0.637025     -0.450946      -87.6188       87.6188       492.803       580.422    
  14  0.687460     -0.374752      -72.8142       72.8142       351.872       424.686    
  15  0.663581     -0.410105      -79.6834       79.6834       552.606       632.290    
  16  0.579690     -0.545263      -105.945       105.945       431.405       537.350    
  17  0.775653     -0.254050      -49.3620       49.3620       361.872       411.234    
  18  0.284124      -1.25834      -244.496       244.496       592.197       836.693    
  19  0.317710      -1.14662      -222.787       222.787       621.618       844.405    
  20  0.958871     -0.419990E-01  -8.16041       8.16041       630.738       638.898    
  21  0.582932     -0.539685      -104.861       104.861       647.878       752.739    
  22  0.905476     -0.992942E-01  -19.2929       19.2929       647.667       666.959    
  23  0.225214      -1.49070      -289.643       289.643       644.017       933.661    
  24  0.618260     -0.480846      -93.4283       93.4283       648.325       741.753    
  25  0.608706     -0.496420      -96.4544       96.4544       624.852       721.306    
  26  0.651052     -0.429165      -83.3868       83.3868       633.524       716.910    
  27  0.138439E-02  -6.58249      -1278.98       1278.98       607.947       1886.93    
  28  0.157375      -1.84913      -359.285       359.285       649.887       1009.17    
  29  0.168063      -1.78342      -346.518       346.518       647.158       993.676    
  30  0.924354     -0.786598E-01  -15.2836       15.2836       670.114       685.397    
  31  0.985585     -0.145204E-01  -2.82132       2.82132       643.143       645.964    
  32  0.540844E-01  -2.91721      -566.814       566.814       703.726       1270.54    
  33  0.535345     -0.624843      -121.407       121.407       692.639       814.046    
  34  0.736351     -0.306048      -59.4652       59.4652       651.726       711.191    
  35  0.283062E-01  -3.56467      -692.616       692.616       647.667       1340.28    
  36  0.690743     -0.369987      -71.8884       71.8884       658.954       730.843    
  37  0.260994      -1.34326      -260.995       260.995       635.046       896.041    
  38  0.243637      -1.41208      -274.367       274.367       489.043       763.410    
  39  0.850226     -0.162253      -31.5258       31.5258       355.054       386.580    
  40  0.589307     -0.528809      -102.748       102.748       649.440       752.187    
  41  0.515087     -0.663420      -128.903       128.903       458.704       587.606    
  42  0.348855      -1.05310      -204.617       204.617       652.311       856.928    
  43  0.791407     -0.233943      -45.4552       45.4552       641.406       686.861    
  44  0.370775     -0.992160      -192.777       192.777       638.844       831.621    
  45  0.676021     -0.391531      -76.0745       76.0745       647.567       723.641    
  46  0.125601      -2.07465      -403.104       403.104       640.261       1043.36    
  47  0.582904     -0.539733      -104.870       104.870       650.554       755.424    
  48  0.818994     -0.199679      -38.7976       38.7976       656.982       695.779    
  49  0.291406      -1.23304      -239.579       239.579       647.667       887.246    
  50  0.887104     -0.119794      -23.2759       23.2759       611.139       634.414    
  51  0.666242     -0.406102      -78.9056       78.9056       647.667       726.572    
  52  0.931047     -0.714460E-01  -13.8820       13.8820       641.814       655.696    
  53  0.169651      -1.77401      -344.690       344.690       650.038       994.728    
  54  0.228429      -1.47653      -286.890       286.890       641.259       928.149    
  55  0.453181     -0.791463      -153.781       153.781       645.676       799.457    
  56  0.376518     -0.976789      -189.790       189.790       646.719       836.510    
  57  0.551543     -0.595035      -115.615       115.615       790.741       906.357    
  58  0.837469     -0.177371      -34.4632       34.4632       646.377       680.841    
  59  0.436148     -0.829773      -161.225       161.225       655.466       816.691    
  60  0.245765      -1.40338      -272.676       272.676       386.005       658.682    
  61  0.727782     -0.317754      -61.7396       61.7396       595.465       657.205    
  62  0.677441     -0.389433      -75.6667       75.6667       655.480       731.147    
  63  0.835222     -0.180057      -34.9852       34.9852       654.353       689.338    
  64  0.964839     -0.357941E-01  -6.95479       6.95479       813.430       820.385    
  65  0.799790     -0.223406      -43.4077       43.4077       662.489       705.897    
  66  0.274169      -1.29401      -251.426       251.426       739.880       991.306    
  67  0.342685      -1.07094      -208.085       208.085       653.986       862.070    
  68  0.688325     -0.373494      -72.5699       72.5699       633.264       705.834    
  69  0.683936     -0.379890      -73.8127       73.8127       945.845       1019.66    
  70  0.779136     -0.249570      -48.4915       48.4915       771.957       820.448    
  71  0.806749     -0.214742      -41.7245       41.7245       647.523       689.247    
  72  0.645551     -0.437652      -85.0357       85.0357       645.827       730.863    
  73  0.403078     -0.908624      -176.546       176.546       659.663       836.209    
  74  0.663948     -0.409551      -79.5758       79.5758       869.492       949.068    
  75  0.410392     -0.890644      -173.052       173.052       655.151       828.203    
  76  0.483021     -0.727696      -141.391       141.391       385.132       526.523    
  77  0.174230      -1.74738      -339.515       339.515       628.789       968.304    
  78  0.414733E-01  -3.18271      -618.400       618.400       643.879       1262.28    
  79  0.517990     -0.657799      -127.810       127.810       348.025       475.836    
loop,thermsimp(1:2)       23   216.798       59.5502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    118        426.67         88.61          1.10         40.06          1.07          0.05        130.88
Just calling func    0   0        130.88


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    119        407.13         88.65          1.10         40.39          0.99          0.05        131.19
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    407.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       23
neval is:      118
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       24
neval is:      118


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      118     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -239.515       239.515       355.054       594.569    
   2  0.991852     -0.818183E-02  -1.58973       1.58973       361.872       363.462    
   3  0.317368      -1.14769      -222.997       222.997       351.872       574.869    
   4  0.737330     -0.304720      -59.2071       59.2071       357.184       416.392    
   5  0.834641     -0.180753      -35.1203       35.1203       393.403       428.524    
   6  0.464401     -0.767007      -149.030       149.030       369.017       518.047    
   7  0.592116     -0.524053      -101.823       101.823       348.025       449.849    
   8  0.464372     -0.767069      -149.041       149.041       397.704       546.745    
   9  0.636055E-01  -2.75505      -535.307       535.307       398.214       933.521    
  10  0.712927     -0.338376      -65.7465       65.7465       306.131       371.877    
  11  0.265597      -1.32578      -257.598       257.598       385.132       642.730    
  12  0.152318      -1.88178      -365.630       365.630       431.405       797.036    
  13  0.629580     -0.462703      -89.9031       89.9031       347.064       436.967    
  14  0.849464     -0.163150      -31.6999       31.6999       444.974       476.673    
  15  0.487816     -0.717817      -139.472       139.472       492.803       632.275    
  16  0.374667     -0.981718      -190.748       190.748       458.704       649.452    
  17  0.657383     -0.419488      -81.5065       81.5065       424.450       505.957    
  18  0.846901     -0.166172      -32.2871       32.2871       552.606       584.893    
  19  0.201185      -1.60353      -311.566       311.566       611.139       922.705    
  20  0.771980     -0.258797      -50.2843       50.2843       630.738       681.022    
  21  0.507739     -0.677788      -131.694       131.694       643.143       774.837    
  22  0.280262      -1.27203      -247.156       247.156       641.814       888.970    
  23  0.285359      -1.25401      -243.654       243.654       595.465       839.119    
  24  0.246191      -1.40165      -272.340       272.340       386.005       658.345    
  25  0.559989E-01  -2.88242      -560.055       560.055       647.667       1207.72    
  26  0.330462      -1.10726      -215.141       215.141       646.377       861.519    
  27  0.899405     -0.106022      -20.6001       20.6001       670.114       690.714    
  28  0.637003     -0.450981      -87.6256       87.6256       641.406       729.032    
  29  0.699726E-01  -2.65965      -516.770       516.770       647.523       1164.29    
  30  0.677191     -0.389802      -75.7385       75.7385       654.353       730.092    
  31  0.649507     -0.431542      -83.8486       83.8486       656.982       740.830    
  32  0.527986     -0.638685      -124.096       124.096       633.264       757.360    
  33  0.374870E-01  -3.28376      -638.035       638.035       662.489       1300.52    
  34  0.448697     -0.801407      -155.713       155.713       651.726       807.439    
  35  0.809612     -0.211200      -41.0361       41.0361       633.524       674.560    
  36  0.836235     -0.178846      -34.7497       34.7497       624.852       659.601    
  37  0.198161      -1.61867      -314.508       314.508       647.567       962.075    
  38  0.222702      -1.50192      -291.823       291.823       647.667       939.490    
  39  0.888863     -0.117812      -22.8908       22.8908       658.954       681.845    
  40  0.868267     -0.141256      -27.4460       27.4460       645.827       673.273    
  41  0.164066      -1.80749      -351.195       351.195       655.480       1006.67    
  42  0.163797      -1.80912      -351.513       351.513       424.396       775.909    
  43  0.883498     -0.123867      -24.0673       24.0673       648.325       672.392    
  44  0.749983     -0.287705      -55.9011       55.9011       649.440       705.341    
  45  0.666691     -0.405428      -78.7746       78.7746       647.878       726.653    
  46  0.978530     -0.217038E-01  -4.21704       4.21704       650.554       654.771    
  47  0.442024     -0.816391      -158.625       158.625       489.043       647.668    
  48  0.228080      -1.47806      -287.187       287.187       645.676       932.863    
  49  0.226174      -1.48645      -288.817       288.817       692.639       981.456    
  50  0.388394     -0.945736      -183.757       183.757       655.466       839.222    
  51  0.257425      -1.35703      -263.670       263.670       813.430       1077.10    
  52  0.707288     -0.346317      -67.2894       67.2894       771.957       839.246    
  53  0.518387     -0.657032      -127.661       127.661       655.151       782.812    
  54  0.628700     -0.464102      -90.1749       90.1749       638.844       729.019    
  55  0.981249     -0.189295E-01  -3.67800       3.67800       659.663       663.341    
  56  0.928260     -0.744431E-01  -14.4643       14.4643       646.719       661.184    
  57  0.752004E-02  -4.89018      -950.163       950.163       592.197       1542.36    
  58  0.930611     -0.719140E-01  -13.9729       13.9729       621.618       635.591    
  59  0.552686     -0.592965      -115.213       115.213       652.311       767.524    
  60  0.695877     -0.362583      -70.4498       70.4498       653.986       724.435    
  61  0.432533     -0.838096      -162.842       162.842       647.667       810.509    
  62  0.127859      -2.05683      -399.642       399.642       635.046       1034.69    
  63  0.304427      -1.18932      -231.086       231.086       790.741       1021.83    
  64  0.938376     -0.636043E-01  -12.3583       12.3583       416.401       428.759    
  65  0.958131     -0.427711E-01  -8.31042       8.31042       641.259       649.569    
  66  0.177025      -1.73147      -336.424       336.424       644.017       980.441    
  67  0.352264      -1.04338      -202.728       202.728       869.492       1072.22    
  68  0.915612     -0.881621E-01  -17.1299       17.1299       463.150       480.280    
  69  0.891986     -0.114305      -22.2094       22.2094       628.789       650.998    
  70  0.754865     -0.281216      -54.6403       54.6403       739.880       794.520    
  71  0.616120     -0.484313      -94.1021       94.1021       647.158       741.260    
  72  0.873159     -0.135638      -26.3544       26.3544       650.038       676.393    
  73  0.437761     -0.826082      -160.508       160.508       649.887       810.394    
  74  0.627710     -0.465677      -90.4809       90.4809       945.845       1036.33    
  75  0.174492      -1.74588      -339.224       339.224       640.261       979.485    
  76  0.181620      -1.70584      -331.444       331.444       643.879       975.323    
  77  0.514409     -0.664737      -129.158       129.158       703.726       832.885    
  78  0.496451     -0.700270      -136.062       136.062       647.667       783.729    
  79  0.109177      -2.21478      -430.332       430.332       407.128       837.459    
loop,thermsimp(1:2)       24   239.515       1.58973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    120        418.79         88.59          1.10         40.34          0.87          0.05        130.95
Just calling func    0   0        130.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    121        356.07         88.54          1.09         40.19          0.92          0.05        130.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    356.07        1.959     -1.464      6.330     -102.6     0.2784    
                     -0.4297      3.753     -99.70      3.734     0.7297    
                       1.614     -1.545      1.596    -0.1961E+05 -2.324    
                      -1.046      0.000      0.000      0.000     -1.221    

                      -2.500     0.5327E+05 0.4341E+05  7683.    -0.4213E+05
                     -0.3616     -6.171     -4.590     -7.059      3.235    
                      -13.53     -2.877      3359.      0.000      5869.    

                       774.1      5413.      7121.     -2229.      2069.    
                       4654.     0.1109    -0.3697E-02  0.000    -0.5010    
                     -0.1054    -0.1154    -0.1952E-01-0.1493     0.1864E-01

                      -1.424     0.3037E-01  0.000     0.1910E-01 0.3339E-01
                      0.8541E-01 0.7961E-01 0.1824E-01-0.3635    -0.2214    
                     -0.1226    -0.2456E-01-0.5532E-01-0.3177      0.000    

                      -1.774     -1.465     0.8302     0.8243    -0.5416E-01
                      0.1757      9.258      9.177    -0.1090E+05 -4.226    
                     -0.7587    -0.5721      9.451      8.600    -0.1000E+05

                      -3.678     0.9064E-02-0.3447      8.824      9.080    
                     -0.1000E+05 -7.226    -0.6687    -0.6152E-01  10.07    
                       8.411    -0.1000E+05 -7.226    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    356.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       24
neval is:      120
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       25
neval is:      120


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      120     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -373.993       373.993       361.872       735.865    
   2  0.438196     -0.825090      -160.315       160.315       306.131       466.446    
   3  0.637359     -0.450422      -87.5171       87.5171       357.184       444.702    
   4  0.122813      -2.09709      -407.465       407.465       393.403       800.868    
   5  0.926899     -0.759107E-01  -14.7494       14.7494       416.401       431.150    
   6  0.456580     -0.783992      -152.330       152.330       347.064       499.394    
   7  0.988763     -0.113008E-01  -2.19575       2.19575       348.025       350.221    
   8  0.499609     -0.693930      -134.831       134.831       444.974       579.804    
   9  0.432617     -0.837902      -162.804       162.804       463.150       625.954    
  10  0.403570     -0.907406      -176.309       176.309       424.450       600.759    
  11  0.435824     -0.830517      -161.369       161.369       369.017       530.387    
  12  0.504807     -0.683579      -132.819       132.819       397.704       530.523    
  13  0.778763     -0.250048      -48.5844       48.5844       351.872       400.456    
  14  0.429140     -0.845972      -164.372       164.372       552.606       716.978    
  15  0.597763     -0.514562      -99.9793       99.9793       355.054       455.034    
  16  0.425932     -0.853476      -165.830       165.830       492.803       658.633    
  17  0.825778     -0.191430      -37.1948       37.1948       621.618       658.813    
  18  0.448772     -0.801241      -155.681       155.681       385.132       540.813    
  19  0.701335     -0.354770      -68.9317       68.9317       489.043       557.975    
  20  0.425857     -0.853651      -165.864       165.864       458.704       624.568    
  21  0.800815     -0.222126      -43.1590       43.1590       641.259       684.418    
  22  0.724239     -0.322634      -62.6878       62.6878       628.789       691.477    
  23  0.312194      -1.16413      -226.190       226.190       650.554       876.745    
  24  0.796592     -0.227412      -44.1862       44.1862       386.005       430.192    
  25  0.164146      -1.80700      -351.100       351.100       624.852       975.952    
  26  0.503041     -0.687083      -133.500       133.500       646.719       780.220    
  27  0.640838     -0.444978      -86.4593       86.4593       659.663       746.122    
  28  0.327752      -1.11550      -216.741       216.741       648.325       865.066    
  29  0.720325     -0.328053      -63.7407       63.7407       645.827       709.568    
  30  0.447570     -0.803922      -156.202       156.202       633.524       789.725    
  31  0.377461     -0.974289      -189.304       189.304       650.038       839.343    
  32  0.951264     -0.499633E-01  -9.70787       9.70787       630.738       640.446    
  33  0.610405     -0.493632      -95.9128       95.9128       658.954       754.867    
  34  0.564697     -0.571466      -111.036       111.036       670.114       781.149    
  35  0.993998     -0.601974E-02  -1.16964       1.16964       649.440       650.609    
  36  0.908032     -0.964757E-01  -18.7452       18.7452       653.986       672.731    
  37  0.731210     -0.313055      -60.8266       60.8266       647.878       708.705    
  38  0.818812     -0.199901      -38.8408       38.8408       638.844       677.685    
  39  0.423172     -0.859976      -167.093       167.093       641.406       808.499    
  40  0.554414     -0.589843      -114.607       114.607       654.353       768.960    
  41  0.244903E-01  -3.70948      -720.751       720.751       656.982       1377.73    
  42  0.337898      -1.08501      -210.818       210.818       647.158       857.976    
  43  0.634521E-01  -2.75747      -535.776       535.776       633.264       1169.04    
  44  0.824978     -0.192398      -37.3830       37.3830       652.311       689.694    
  45  0.954123     -0.469622E-01  -9.12475       9.12475       643.143       652.267    
  46  0.807852     -0.213376      -41.4590       41.4590       424.396       465.855    
  47  0.335430      -1.09234      -212.242       212.242       655.151       867.393    
  48  0.266194      -1.32353      -257.162       257.162       647.667       904.829    
  49  0.797818     -0.225874      -43.8874       43.8874       739.880       783.767    
  50  0.710601     -0.341644      -66.3814       66.3814       431.405       497.787    
  51  0.469059     -0.757026      -147.090       147.090       651.726       798.816    
  52  0.256457E-01  -3.66338      -711.794       711.794       649.887       1361.68    
  53  0.620630     -0.477020      -92.6850       92.6850       647.667       740.352    
  54  0.600237     -0.510431      -99.1767       99.1767       703.726       802.903    
  55  0.959467     -0.413769E-01  -8.03952       8.03952       407.128       415.167    
  56  0.541492     -0.613428      -119.189       119.189       595.465       714.654    
  57  0.577789     -0.548547      -106.583       106.583       655.466       762.049    
  58  0.701570     -0.354435      -68.8666       68.8666       771.957       840.823    
  59  0.274557E-01  -3.59518      -698.544       698.544       646.377       1344.92    
  60  0.584746     -0.536578      -104.257       104.257       641.814       746.071    
  61  0.131184      -2.03115      -394.653       394.653       611.139       1005.79    
  62  0.986883     -0.132037E-01  -2.56548       2.56548       645.676       648.241    
  63  0.257198      -1.35791      -263.841       263.841       398.214       662.056    
  64  0.831173     -0.184917      -35.9294       35.9294       647.667       683.596    
  65  0.332503      -1.10111      -213.945       213.945       647.567       861.512    
  66  0.123451      -2.09191      -406.457       406.457       643.879       1050.34    
  67  0.545729     -0.605633      -117.675       117.675       640.261       757.935    
  68  0.194995      -1.63478      -317.638       317.638       644.017       961.655    
  69  0.811658     -0.208676      -40.5458       40.5458       692.639       733.184    
  70  0.610911     -0.492804      -95.7518       95.7518       655.480       751.232    
  71  0.482852     -0.728044      -141.459       141.459       790.741       932.200    
  72  0.487726     -0.718001      -139.508       139.508       635.046       774.554    
  73  0.650526     -0.429973      -83.5438       83.5438       945.845       1029.39    
  74  0.710826     -0.341328      -66.3200       66.3200       869.492       935.812    
  75  0.840473     -0.173791      -33.7676       33.7676       813.430       847.198    
  76  0.705857     -0.348343      -67.6831       67.6831       647.523       715.206    
  77  0.890032     -0.116498      -22.6356       22.6356       647.667       670.302    
  78  0.980994     -0.191887E-01  -3.72836       3.72836       662.489       666.218    
  79  0.633321     -0.456778      -88.7520       88.7520       356.069       444.821    
loop,thermsimp(1:2)       25   373.993       160.315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    122        407.87         88.62          1.10         40.27          0.77          0.05        130.82
Just calling func    0   0        130.82


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    123        396.37         88.64          1.10         40.20          0.91          0.05        130.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    396.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       25
neval is:      122
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       26
neval is:      122


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      122     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -48.0165       48.0165       348.025       396.042    
   2  0.928800     -0.738619E-01  -14.3514       14.3514       351.872       366.223    
   3  0.727994     -0.317462      -61.6829       61.6829       407.128       468.811    
   4  0.109723E-01  -4.51238      -876.756       876.756       386.005       1262.76    
   5  0.160096      -1.83198      -355.953       355.953       416.401       772.354    
   6  0.497079     -0.699006      -135.817       135.817       357.184       493.001    
   7  0.789473     -0.236389      -45.9304       45.9304       356.069       401.999    
   8  0.763780     -0.269476      -52.3591       52.3591       355.054       407.413    
   9  0.217288      -1.52653      -296.605       296.605       424.396       721.001    
  10  0.867642     -0.141976      -27.5860       27.5860       306.131       333.717    
  11  0.740966     -0.299800      -58.2512       58.2512       431.405       489.657    
  12  0.999757     -0.242662E-03 -0.471492E-01  0.471492E-01   347.064       347.111    
  13  0.587476     -0.531920      -103.352       103.352       369.017       472.369    
  14  0.703619     -0.351518      -68.3000       68.3000       397.704       466.004    
  15  0.740946     -0.299828      -58.2566       58.2566       385.132       443.389    
  16  0.335927      -1.09086      -211.954       211.954       489.043       700.998    
  17  0.736553     -0.305774      -59.4118       59.4118       444.974       504.385    
  18  0.597397     -0.515174      -100.098       100.098       424.450       524.548    
  19  0.126601      -2.06672      -401.563       401.563       458.704       860.267    
  20  0.990194     -0.985477E-02  -1.91478       1.91478       463.150       465.065    
  21  0.716453     -0.333443      -64.7880       64.7880       630.738       695.526    
  22  0.279233E-01  -3.57829      -695.262       695.262       645.676       1340.94    
  23  0.413932     -0.882054      -171.383       171.383       649.440       820.823    
  24  0.109516      -2.21168      -429.730       429.730       643.143       1072.87    
  25  0.440749     -0.819279      -159.186       159.186       492.803       651.989    
  26  0.412115     -0.886453      -172.238       172.238       621.618       793.856    
  27  0.146963      -1.91758      -372.585       372.585       398.214       770.800    
  28  0.345919      -1.06155      -206.259       206.259       662.489       868.749    
  29  0.343614      -1.06824      -207.558       207.558       647.667       855.225    
  30  0.600334E-01  -2.81285      -546.538       546.538       653.986       1200.52    
  31  0.751538     -0.285634      -55.4986       55.4986       638.844       694.343    
  32  0.878119     -0.129973      -25.2538       25.2538       647.667       672.920    
  33  0.544046     -0.608721      -118.275       118.275       641.259       759.534    
  34  0.931023     -0.714714E-01  -13.8869       13.8869       652.311       666.197    
  35  0.131968      -2.02520      -393.496       393.496       628.789       1022.29    
  36  0.826694E-01  -2.49291      -484.371       484.371       647.878       1132.25    
  37  0.174702E-02  -6.34984      -1233.77       1233.77       645.827       1879.60    
  38  0.233470      -1.45470      -282.649       282.649       595.465       878.114    
  39  0.232927      -1.45703      -283.101       283.101       647.523       930.624    
  40  0.958279     -0.426163E-01  -8.28035       8.28035       552.606       560.887    
  41  0.820100     -0.198330      -38.5354       38.5354       692.639       731.174    
  42  0.305797      -1.18483      -230.213       230.213       361.872       592.086    
  43  0.260853      -1.34380      -261.100       261.100       647.667       908.767    
  44  0.960408     -0.403967E-01  -7.84908       7.84908       641.814       649.663    
  45  0.318957      -1.14270      -222.026       222.026       659.663       881.689    
  46  0.146887      -1.91809      -372.685       372.685       655.480       1028.17    
  47  0.787623     -0.238735      -46.3863       46.3863       658.954       705.341    
  48  0.452412     -0.793163      -154.111       154.111       640.261       794.372    
  49  0.218339      -1.52170      -295.667       295.667       655.466       951.133    
  50  0.177672      -1.72782      -335.715       335.715       654.353       990.068    
  51  0.928922     -0.737304E-01  -14.3258       14.3258       635.046       649.372    
  52  0.341447      -1.07456      -208.787       208.787       646.719       855.507    
  53  0.462674     -0.770732      -149.753       149.753       670.114       819.867    
  54  0.125513      -2.07534      -403.239       403.239       739.880       1143.12    
  55  0.354899      -1.03592      -201.279       201.279       633.524       834.803    
  56  0.341830      -1.07344      -208.570       208.570       651.726       860.296    
  57  0.604983     -0.502555      -97.6464       97.6464       393.403       491.050    
  58  0.223932      -1.49641      -290.753       290.753       703.726       994.479    
  59  0.146473      -1.92091      -373.233       373.233       641.406       1014.64    
  60  0.997224     -0.277992E-02 -0.540137      0.540137       650.038       650.578    
  61  0.430465     -0.842888      -163.773       163.773       771.957       935.730    
  62  0.712472     -0.339015      -65.8706       65.8706       813.430       879.301    
  63  0.303370      -1.19280      -231.761       231.761       647.158       878.920    
  64  0.676458E-01  -2.69347      -523.341       523.341       647.567       1170.91    
  65  0.226497      -1.48502      -288.540       288.540       648.325       936.865    
  66  0.590955     -0.526015      -102.205       102.205       655.151       757.356    
  67  0.914813     -0.890359E-01  -17.2997       17.2997       650.554       667.854    
  68  0.157483      -1.84844      -359.151       359.151       647.667       1006.82    
  69  0.117954E-01  -4.44005      -862.701       862.701       790.741       1653.44    
  70  0.589104     -0.529153      -102.814       102.814       869.492       972.307    
  71  0.826668     -0.190352      -36.9854       36.9854       644.017       681.003    
  72  0.535992     -0.623635      -121.172       121.172       624.852       746.024    
  73  0.460564     -0.775304      -150.641       150.641       611.139       761.780    
  74  0.142631E-01  -4.25008      -825.790       825.790       945.845       1771.63    
  75  0.599401E-01  -2.81441      -546.840       546.840       643.879       1190.72    
  76  0.427239     -0.850412      -165.235       165.235       633.264       798.499    
  77  0.181411      -1.70699      -331.668       331.668       646.377       978.046    
  78  0.693634E-01  -2.66840      -518.469       518.469       649.887       1168.36    
  79  0.893045     -0.113118      -21.9789       21.9789       396.370       418.349    
loop,thermsimp(1:2)       26   48.0165       14.3514    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    124        418.88         88.64          1.10         40.22          0.79          0.05        130.79
Just calling func    0   0        130.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    418.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       26
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       27
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      123     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -38.9127       38.9127       306.131       345.044    
   2  0.309452      -1.17295      -227.905       227.905       347.064       574.969    
   3  0.303638      -1.19192      -231.590       231.590       351.872       583.462    
   4  0.754457     -0.281757      -54.7454       54.7454       348.025       402.771    
   5  0.623133     -0.472996      -91.9031       91.9031       356.069       447.972    
   6  0.989422E-01  -2.31322      -449.458       449.458       355.054       804.513    
   7  0.695126     -0.363662      -70.6595       70.6595       396.370       467.029    
   8  0.832210E-01  -2.48626      -483.079       483.079       385.132       868.212    
   9  0.869521     -0.139813      -27.1657       27.1657       463.150       490.316    
  10  0.488136     -0.717160      -139.344       139.344       397.704       537.048    
  11  0.579877     -0.544940      -105.882       105.882       407.128       513.009    
  12  0.480435     -0.733064      -142.434       142.434       369.017       511.451    
  13  0.792626     -0.232404      -45.1561       45.1561       431.405       476.561    
  14  0.870230     -0.138998      -27.0073       27.0073       393.403       420.411    
  15  0.886361     -0.120631      -23.4385       23.4385       357.184       380.623    
  16  0.358181      -1.02672      -199.491       199.491       444.974       644.465    
  17  0.560125     -0.579594      -112.615       112.615       424.450       537.065    
  18  0.546151     -0.604859      -117.524       117.524       552.606       670.130    
  19  0.732086     -0.311858      -60.5940       60.5940       361.872       422.466    
  20  0.590102     -0.527460      -102.485       102.485       635.046       737.532    
  21  0.867355     -0.142307      -27.6503       27.6503       641.814       669.464    
  22  0.749758     -0.288005      -55.9594       55.9594       650.038       705.998    
  23  0.721970     -0.325772      -63.2974       63.2974       492.803       556.100    
  24  0.596865     -0.516065      -100.271       100.271       652.311       752.582    
  25  0.878161     -0.129925      -25.2444       25.2444       650.554       675.799    
  26  0.558752E-01  -2.88463      -560.484       560.484       647.667       1208.15    
  27  0.555543     -0.587810      -114.211       114.211       644.017       758.229    
  28  0.597562     -0.514897      -100.044       100.044       638.844       738.889    
  29  0.995329     -0.468202E-02 -0.909717      0.909717       630.738       631.648    
  30  0.206787      -1.57606      -306.229       306.229       489.043       795.273    
  31  0.645457     -0.437797      -85.0640       85.0640       658.954       744.018    
  32  0.871352     -0.137710      -26.7570       26.7570       424.396       451.153    
  33  0.701360     -0.354733      -68.9247       68.9247       692.639       761.563    
  34  0.936151     -0.659784E-01  -12.8196       12.8196       624.852       637.671    
  35  0.590091     -0.527478      -102.489       102.489       655.151       757.640    
  36  0.750433     -0.287105      -55.7845       55.7845       641.259       697.043    
  37  0.326255      -1.12007      -217.630       217.630       611.139       828.769    
  38  0.873133     -0.135668      -26.3603       26.3603       398.214       424.575    
  39  0.621627     -0.475415      -92.3731       92.3731       416.401       508.774    
  40  0.153041      -1.87705      -364.711       364.711       621.618       986.329    
  41  0.196696      -1.62610      -315.950       315.950       640.261       956.211    
  42  0.365028      -1.00778      -195.812       195.812       633.264       829.075    
  43  0.398429     -0.920226      -178.800       178.800       670.114       848.913    
  44  0.549691     -0.598399      -116.269       116.269       649.440       765.709    
  45  0.994179     -0.583795E-02  -1.13431       1.13431       633.524       634.658    
  46  0.147335E-01  -4.21763      -819.486       819.486       647.667       1467.15    
  47  0.224737      -1.49282      -290.056       290.056       646.719       936.775    
  48  0.182172      -1.70281      -330.855       330.855       458.704       789.559    
  49  0.230919      -1.46569      -284.783       284.783       651.726       936.509    
  50  0.491818     -0.709647      -137.884       137.884       662.489       800.374    
  51  0.370754     -0.992217      -192.788       192.788       595.465       788.253    
  52  0.785622     -0.241279      -46.8805       46.8805       647.158       694.039    
  53  0.476284     -0.741742      -144.120       144.120       813.430       957.551    
  54  0.958799     -0.420736E-01  -8.17489       8.17489       659.663       667.838    
  55  0.305133      -1.18701      -230.636       230.636       647.667       878.302    
  56  0.270329      -1.30812      -254.167       254.167       647.523       901.690    
  57  0.130426      -2.03695      -395.779       395.779       771.957       1167.74    
  58  0.222171      -1.50431      -292.287       292.287       648.325       940.612    
  59  0.233872      -1.45298      -282.314       282.314       655.466       937.780    
  60  0.916355E-02  -4.69252      -911.757       911.757       869.492       1781.25    
  61  0.400634     -0.914708      -177.728       177.728       646.377       824.105    
  62  0.354647E-01  -3.33922      -648.810       648.810       654.353       1303.16    
  63  0.453450     -0.790870      -153.666       153.666       703.726       857.392    
  64  0.411527     -0.887880      -172.515       172.515       647.667       820.182    
  65  0.607753     -0.497987      -96.7588       96.7588       641.406       738.165    
  66  0.157481      -1.84845      -359.154       359.154       628.789       987.943    
  67  0.260711E-01  -3.64693      -708.598       708.598       655.480       1364.08    
  68  0.183987      -1.69289      -328.929       328.929       643.143       972.071    
  69  0.704951     -0.349627      -67.9325       67.9325       647.878       715.811    
  70  0.337767      -1.08540      -210.893       210.893       739.880       950.773    
  71  0.718219     -0.330981      -64.3095       64.3095       649.887       714.196    
  72  0.102024      -2.28254      -443.498       443.498       647.567       1091.07    
  73  0.357156      -1.02958      -200.048       200.048       643.879       843.926    
  74  0.290676      -1.23555      -240.067       240.067       653.986       894.052    
  75  0.384145E-01  -3.25932      -633.286       633.286       386.005       1019.29    
  76  0.566931     -0.567518      -110.269       110.269       645.676       755.945    
  77  0.929116     -0.735219E-01  -14.2853       14.2853       790.741       805.027    
  78  0.771831     -0.258990      -50.3218       50.3218       945.845       996.166    
  79  0.546802     -0.603668      -117.293       117.293       418.884       536.177    
loop,thermsimp(1:2)       27   38.9127       227.905    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125        390.80         88.61          1.10         40.11          1.05          0.05        130.92
Just calling func    0   0        130.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126        381.72         88.55          1.10         40.01          1.15          0.05        130.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    381.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       27
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       28
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      125     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -41.2655       41.2655       306.131       347.396    
   2  0.162004E-01  -4.12272      -801.045       801.045       357.184       1158.23    
   3  0.446841E-01  -3.10814      -603.911       603.911       348.025       951.936    
   4  0.757954     -0.277132      -53.8468       53.8468       393.403       447.250    
   5  0.525315     -0.643757      -125.082       125.082       361.872       486.954    
   6  0.229940      -1.46994      -285.609       285.609       398.214       683.823    
   7  0.273310E-01  -3.59973      -699.428       699.428       356.069       1055.50    
   8  0.228047      -1.47820      -287.215       287.215       424.396       711.611    
   9  0.963384E-01  -2.33989      -454.640       454.640       396.370       851.010    
  10  0.495504     -0.702179      -136.433       136.433       431.405       567.839    
  11  0.930436     -0.721018E-01  -14.0094       14.0094       463.150       477.160    
  12  0.138744      -1.97513      -383.767       383.767       416.401       800.168    
  13  0.676381     -0.390999      -75.9711       75.9711       369.017       444.988    
  14  0.763696     -0.269586      -52.3805       52.3805       407.128       459.508    
  15  0.282468      -1.26419      -245.632       245.632       418.884       664.516    
  16  0.359172      -1.02395      -198.954       198.954       397.704       596.658    
  17  0.392258     -0.935834      -181.833       181.833       424.450       606.283    
  18  0.524686     -0.644955      -125.315       125.315       492.803       618.117    
  19  0.850465     -0.161972      -31.4712       31.4712       347.064       378.535    
  20  0.227056      -1.48256      -288.061       288.061       351.872       639.933    
  21  0.942039     -0.597082E-01  -11.6013       11.6013       630.738       642.339    
  22  0.807336     -0.214016      -41.5833       41.5833       633.524       675.107    
  23  0.345853      -1.06174      -206.296       206.296       624.852       831.148    
  24  0.762940     -0.270575      -52.5728       52.5728       444.974       497.546    
  25  0.589959     -0.527702      -102.532       102.532       659.663       762.195    
  26  0.563539     -0.573518      -111.435       111.435       641.814       753.249    
  27  0.812044     -0.208201      -40.4535       40.4535       552.606       593.060    
  28  0.735850     -0.306729      -59.5975       59.5975       650.554       710.152    
  29  0.396292     -0.925605      -179.845       179.845       647.158       827.003    
  30  0.623568     -0.472298      -91.7675       91.7675       641.259       733.027    
  31  0.925937     -0.769486E-01  -14.9511       14.9511       650.038       664.989    
  32  0.880074     -0.127749      -24.8217       24.8217       649.887       674.708    
  33  0.379958     -0.967693      -188.023       188.023       647.878       835.901    
  34  0.842940E-01  -2.47344      -480.590       480.590       635.046       1115.64    
  35  0.199092      -1.61399      -313.598       313.598       641.406       955.004    
  36  0.625899     -0.468566      -91.0423       91.0423       638.844       729.886    
  37  0.888337     -0.118405      -23.0060       23.0060       658.954       681.960    
  38  0.959633     -0.412048E-01  -8.00610       8.00610       652.311       660.317    
  39  0.289813      -1.23852      -240.644       240.644       645.676       886.320    
  40  0.889440     -0.117163      -22.7648       22.7648       655.151       677.916    
  41  0.797260     -0.226575      -44.0234       44.0234       644.017       688.041    
  42  0.451097     -0.796073      -154.677       154.677       692.639       847.315    
  43  0.609578     -0.494989      -96.1763       96.1763       649.440       745.616    
  44  0.910850     -0.933770E-01  -18.1431       18.1431       595.465       613.608    
  45  0.448191     -0.802536      -155.933       155.933       458.704       614.637    
  46  0.831229     -0.184850      -35.9163       35.9163       489.043       524.960    
  47  0.246260      -1.40137      -272.286       272.286       662.489       934.775    
  48  0.280480      -1.27125      -247.004       247.004       355.054       602.059    
  49  0.161513      -1.82317      -354.242       354.242       790.741       1144.98    
  50  0.337020      -1.08761      -211.323       211.323       647.667       858.990    
  51  0.160136      -1.83173      -355.905       355.905       646.377       1002.28    
  52  0.268039      -1.31662      -255.820       255.820       611.139       866.958    
  53  0.907744     -0.967928E-01  -18.8068       18.8068       633.264       652.070    
  54  0.237998      -1.43549      -278.916       278.916       643.879       922.795    
  55  0.932063     -0.703547E-01  -13.6699       13.6699       670.114       683.783    
  56  0.304233      -1.18996      -231.210       231.210       703.726       934.936    
  57  0.471578     -0.751672      -146.050       146.050       385.132       531.182    
  58  0.985625     -0.144798E-01  -2.81342       2.81342       647.667       650.480    
  59  0.576194     -0.551311      -107.120       107.120       653.986       761.105    
  60  0.561463     -0.577209      -112.152       112.152       647.523       759.675    
  61  0.762775     -0.270792      -52.6149       52.6149       651.726       704.340    
  62  0.728042     -0.317397      -61.6702       61.6702       646.719       708.390    
  63  0.246589      -1.40003      -272.026       272.026       655.466       927.492    
  64  0.128678      -2.05044      -398.401       398.401       648.325       1046.73    
  65  0.646131     -0.436753      -84.8611       84.8611       739.880       824.741    
  66  0.520849E-01  -2.95488      -574.133       574.133       640.261       1214.39    
  67  0.103665      -2.26659      -440.398       440.398       813.430       1253.83    
  68  0.209683      -1.56216      -303.527       303.527       643.143       946.670    
  69  0.401865     -0.911640      -177.132       177.132       621.618       798.750    
  70  0.111589      -2.19294      -426.088       426.088       628.789       1054.88    
  71  0.683688     -0.380253      -73.8831       73.8831       945.845       1019.73    
  72  0.912223     -0.918706E-01  -17.8505       17.8505       386.005       403.856    
  73  0.651148E-01  -2.73160      -530.750       530.750       647.567       1178.32    
  74  0.647173E-01  -2.73773      -531.940       531.940       771.957       1303.90    
  75  0.356220      -1.03221      -200.558       200.558       647.667       848.224    
  76  0.918597     -0.849076E-01  -16.4975       16.4975       654.353       670.851    
  77  0.340721      -1.07669      -209.201       209.201       655.480       864.681    
  78  0.797278     -0.226552      -44.0190       44.0190       647.667       691.686    
  79  0.447966     -0.803038      -156.030       156.030       381.724       537.754    
loop,thermsimp(1:2)       28   41.2655       801.045    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127        829.86         88.62          1.10         40.99          1.03          0.05        131.79
Just calling func    0   0        131.79


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    829.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       28
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       29
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      126     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -418.746       418.746       306.131       724.877    
   2  0.685048     -0.378267      -73.4972       73.4972       347.064       420.561    
   3  0.739526     -0.301746      -58.6292       58.6292       386.005       444.635    
   4  0.161448      -1.82357      -354.320       354.320       369.017       723.337    
   5  0.819608     -0.198929      -38.6519       38.6519       393.403       432.055    
   6  0.750679     -0.286777      -55.7207       55.7207       407.128       462.848    
   7  0.797409     -0.226388      -43.9871       43.9871       463.150       507.137    
   8  0.193123      -1.64443      -319.513       319.513       361.872       681.385    
   9  0.189346E-01  -3.96676      -770.742       770.742       444.974       1215.72    
  10  0.715264     -0.335103      -65.1105       65.1105       489.043       554.154    
  11  0.384856     -0.954886      -185.534       185.534       385.132       570.667    
  12  0.268023      -1.31668      -255.832       255.832       381.724       637.556    
  13  0.777164     -0.252104      -48.9837       48.9837       431.405       480.389    
  14  0.707495E-01  -2.64861      -514.625       514.625       552.606       1067.23    
  15  0.233610      -1.45410      -282.532       282.532       397.704       680.236    
  16  0.193057      -1.64477      -319.579       319.579       355.054       674.633    
  17  0.486879     -0.719739      -139.845       139.845       424.450       564.296    
  18  0.735370     -0.307381      -59.7242       59.7242       595.465       655.189    
  19  0.147509      -1.91387      -371.864       371.864       458.704       830.568    
  20  0.739111     -0.302308      -58.7383       58.7383       492.803       551.541    
  21  0.886241     -0.120766      -23.4648       23.4648       351.872       375.337    
  22  0.158672      -1.84092      -357.690       357.690       630.738       988.428    
  23  0.143658      -1.94032      -377.004       377.004       647.667       1024.67    
  24  0.637431E-02  -5.05548      -982.280       982.280       633.264       1615.54    
  25  0.753372     -0.283196      -55.0250       55.0250       652.311       707.336    
  26  0.555831     -0.587292      -114.111       114.111       418.884       532.995    
  27  0.280013      -1.27292      -247.328       247.328       650.038       897.366    
  28  0.811304     -0.209112      -40.6306       40.6306       654.353       694.984    
  29  0.972296E-02  -4.63327      -900.243       900.243       649.887       1550.13    
  30  0.713459     -0.337631      -65.6017       65.6017       633.524       699.125    
  31  0.194621      -1.63670      -318.011       318.011       655.151       973.162    
  32  0.492587     -0.708083      -137.581       137.581       658.954       796.535    
  33  0.759094E-01  -2.57821      -500.947       500.947       670.114       1171.06    
  34  0.494544     -0.704119      -136.810       136.810       398.214       535.025    
  35  0.297023      -1.21395      -235.870       235.870       644.017       879.887    
  36  0.429878E-01  -3.14684      -611.431       611.431       647.667       1259.10    
  37  0.490931     -0.711452      -138.235       138.235       651.726       789.961    
  38  0.534417     -0.626578      -121.744       121.744       646.719       768.464    
  39  0.254967      -1.36662      -265.534       265.534       650.554       916.088    
  40  0.995945     -0.406335E-02 -0.789509      0.789509       424.396       425.185    
  41  0.428814E-01  -3.14932      -611.912       611.912       638.844       1250.76    
  42  0.332915      -1.09987      -213.704       213.704       641.259       854.963    
  43  0.657266     -0.419666      -81.5411       81.5411       649.440       730.981    
  44  0.301071      -1.20041      -233.239       233.239       641.814       875.053    
  45  0.998178     -0.182349E-02 -0.354305      0.354305       647.523       647.877    
  46  0.533372     -0.628536      -122.124       122.124       653.986       776.110    
  47  0.244746      -1.40753      -273.484       273.484       659.663       933.147    
  48  0.345321      -1.06328      -206.596       206.596       621.618       828.214    
  49  0.339541      -1.08016      -209.875       209.875       416.401       626.276    
  50  0.456434     -0.784311      -152.392       152.392       739.880       892.272    
  51  0.510210     -0.672933      -130.751       130.751       647.158       777.909    
  52  0.678441     -0.387958      -75.3803       75.3803       624.852       700.232    
  53  0.802552     -0.219958      -42.7378       42.7378       647.878       690.616    
  54  0.542503     -0.611562      -118.827       118.827       692.639       811.465    
  55  0.887113     -0.119783      -23.2739       23.2739       647.667       670.940    
  56  0.631934     -0.458971      -89.1780       89.1780       396.370       485.548    
  57  0.776760     -0.252624      -49.0849       49.0849       647.667       696.751    
  58  0.764990     -0.267893      -52.0516       52.0516       655.480       707.531    
  59  0.329328      -1.11070      -215.809       215.809       611.139       826.947    
  60  0.304425      -1.18933      -231.087       231.087       645.676       876.763    
  61  0.992863     -0.716266E-02  -1.39171       1.39171       643.879       645.270    
  62  0.545111     -0.606767      -117.895       117.895       655.466       773.361    
  63  0.215175      -1.53630      -298.504       298.504       662.489       960.993    
  64  0.486479     -0.720562      -140.005       140.005       703.726       843.732    
  65  0.323711      -1.12790      -219.152       219.152       643.143       862.294    
  66  0.339000      -1.08176      -210.185       210.185       348.025       558.210    
  67  0.494013     -0.705193      -137.019       137.019       641.406       778.425    
  68  0.496084     -0.701011      -136.206       136.206       646.377       782.584    
  69  0.736144     -0.306329      -59.5197       59.5197       945.845       1005.36    
  70  0.106083E-01  -4.54612      -883.311       883.311       648.325       1531.64    
  71  0.106417      -2.24039      -435.307       435.307       628.789       1064.10    
  72  0.378322     -0.972010      -188.862       188.862       356.069       544.930    
  73  0.180300      -1.71314      -332.862       332.862       635.046       967.908    
  74  0.761678     -0.272232      -52.8946       52.8946       790.741       843.636    
  75  0.926997     -0.758048E-01  -14.7289       14.7289       357.184       371.913    
  76  0.412888     -0.884578      -171.873       171.873       647.567       819.440    
  77  0.980018     -0.201847E-01  -3.92189       3.92189       640.261       644.182    
  78  0.571816     -0.558938      -108.602       108.602       813.430       922.032    
  79  0.875059     -0.133464      -25.9321       25.9321       829.855       855.787    
loop,thermsimp(1:2)       29   418.746       73.4972    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128        370.21         88.62          1.10         40.31          1.12          0.05        131.21
Just calling func    0   0        131.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129        367.78         88.54          1.10         39.90          1.31          0.05        130.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    367.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       29
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       30
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      128     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -627.190       627.190       357.184       984.374    
   2  0.712690     -0.338709      -65.8111       65.8111       351.872       417.683    
   3  0.284498      -1.25703      -244.241       244.241       347.064       591.305    
   4  0.132414      -2.02182      -392.840       392.840       424.396       817.236    
   5  0.868558     -0.140920      -27.3808       27.3808       393.403       420.784    
   6  0.695240     -0.363498      -70.6276       70.6276       386.005       456.633    
   7  0.777362     -0.251849      -48.9343       48.9343       407.128       456.062    
   8  0.302494      -1.19569      -232.323       232.323       431.405       663.729    
   9  0.710188     -0.342225      -66.4944       66.4944       396.370       462.864    
  10  0.884530     -0.122698      -23.8403       23.8403       463.150       486.990    
  11  0.146421E-01  -4.22386      -820.695       820.695       418.884       1239.58    
  12  0.834801     -0.180562      -35.0831       35.0831       398.214       433.298    
  13  0.414011     -0.881863      -171.346       171.346       356.069       527.415    
  14  0.655777     -0.421935      -81.9820       81.9820       492.803       574.785    
  15  0.530106     -0.634679      -123.318       123.318       489.043       612.362    
  16  0.325231      -1.12322      -218.242       218.242       348.025       566.267    
  17  0.293550      -1.22571      -238.155       238.155       424.450       662.605    
  18  0.194161      -1.63907      -318.471       318.471       385.132       703.603    
  19  0.589029E-01  -2.83186      -550.231       550.231       416.401       966.632    
  20  0.385142     -0.954143      -185.390       185.390       381.724       567.114    
  21  0.287461      -1.24667      -242.228       242.228       640.261       882.488    
  22  0.528518     -0.637678      -123.901       123.901       643.879       767.779    
  23  0.517042     -0.659630      -128.166       128.166       647.523       775.689    
  24  0.453375     -0.791035      -153.698       153.698       595.465       749.163    
  25  0.695596     -0.362986      -70.5281       70.5281       647.667       718.195    
  26  0.645178     -0.438228      -85.1477       85.1477       355.054       440.202    
  27  0.696076     -0.362297      -70.3943       70.3943       397.704       468.098    
  28  0.483522     -0.726659      -141.190       141.190       361.872       503.062    
  29  0.155396E-01  -4.16436      -809.135       809.135       647.878       1457.01    
  30  0.883154     -0.124256      -24.1429       24.1429       654.353       678.496    
  31  0.525944     -0.642561      -124.850       124.850       647.667       772.516    
  32  0.746799     -0.291959      -56.7276       56.7276       633.524       690.251    
  33  0.458658     -0.779449      -151.447       151.447       624.852       776.299    
  34  0.614284     -0.487298      -94.6820       94.6820       652.311       746.993    
  35  0.581412     -0.542295      -105.368       105.368       655.480       760.848    
  36  0.820935     -0.197312      -38.3377       38.3377       369.017       407.355    
  37  0.852366     -0.159739      -31.0373       31.0373       306.131       337.168    
  38  0.527059     -0.640443      -124.438       124.438       649.440       773.878    
  39  0.376404     -0.977092      -189.849       189.849       646.719       836.568    
  40  0.729525E-01  -2.61795      -508.667       508.667       655.466       1164.13    
  41  0.342258      -1.07219      -208.327       208.327       653.986       862.312    
  42  0.955065     -0.459761E-01  -8.93315       8.93315       647.158       656.091    
  43  0.508654E-01  -2.97857      -578.736       578.736       641.406       1220.14    
  44  0.471716     -0.751379      -145.993       145.993       646.377       792.370    
  45  0.137118      -1.98691      -386.057       386.057       651.726       1037.78    
  46  0.844826     -0.168625      -32.7637       32.7637       658.954       691.718    
  47  0.841708     -0.172322      -33.4821       33.4821       692.639       726.121    
  48  0.360396E-01  -3.32314      -645.685       645.685       647.567       1293.25    
  49  0.953282     -0.478444E-01  -9.29616       9.29616       611.139       620.435    
  50  0.503408     -0.686355      -133.359       133.359       621.618       754.977    
  51  0.593854     -0.521122      -101.254       101.254       458.704       559.958    
  52  0.524910     -0.644528      -125.232       125.232       790.741       915.973    
  53  0.730244     -0.314377      -61.0834       61.0834       703.726       764.810    
  54  0.828919     -0.187632      -36.4570       36.4570       641.259       677.716    
  55  0.151629      -1.88632      -366.511       366.511       829.855       1196.37    
  56  0.431672     -0.840089      -163.229       163.229       643.143       806.372    
  57  0.449333     -0.799990      -155.438       155.438       641.814       797.252    
  58  0.116759      -2.14764      -417.287       417.287       645.676       1062.96    
  59  0.578588     -0.547165      -106.314       106.314       644.017       750.331    
  60  0.119282      -2.12627      -413.134       413.134       739.880       1153.01    
  61  0.643272E-01  -2.74377      -533.115       533.115       650.038       1183.15    
  62  0.906211     -0.984834E-01  -19.1353       19.1353       650.554       669.690    
  63  0.811859     -0.208429      -40.4977       40.4977       813.430       853.928    
  64  0.119821      -2.12175      -412.257       412.257       659.663       1071.92    
  65  0.827508     -0.189336      -36.7880       36.7880       662.489       699.277    
  66  0.597713     -0.514645      -99.9955       99.9955       635.046       735.042    
  67  0.408976     -0.894099      -173.723       173.723       655.151       828.874    
  68  0.889044     -0.117608      -22.8513       22.8513       630.738       653.589    
  69  0.623536     -0.472349      -91.7774       91.7774       945.845       1037.62    
  70  0.477389     -0.739423      -143.670       143.670       647.667       791.336    
  71  0.313804      -1.15899      -225.191       225.191       628.789       853.980    
  72  0.814527     -0.205148      -39.8602       39.8602       552.606       592.466    
  73  0.133792      -2.01147      -390.829       390.829       670.114       1060.94    
  74  0.533947     -0.627458      -121.915       121.915       444.974       566.889    
  75  0.625219     -0.469653      -91.2536       91.2536       638.844       730.098    
  76  0.694055     -0.365204      -70.9591       70.9591       647.667       718.626    
  77  0.261673      -1.34066      -260.490       260.490       648.325       908.815    
  78  0.175693      -1.73902      -337.891       337.891       649.887       987.777    
  79  0.950460     -0.508096E-01  -9.87231       9.87231       367.784       377.656    
loop,thermsimp(1:2)       30   627.190       65.8111    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130        375.74         88.62          1.10         40.20          0.88          0.05        130.85
Just calling func    0   0        130.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131        362.54         88.53          1.10         40.17          1.12          0.05        130.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    362.54
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       30
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       31
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      130     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -270.463       270.463       306.131       576.594    
   2  0.247647      -1.39575      -271.194       271.194       367.784       638.978    
   3  0.396263     -0.925678      -179.859       179.859       369.017       548.876    
   4  0.386461     -0.950723      -184.726       184.726       351.872       536.598    
   5  0.729285     -0.315691      -61.3387       61.3387       393.403       454.742    
   6  0.665866     -0.406667      -79.0154       79.0154       398.214       477.230    
   7  0.385122     -0.954194      -185.400       185.400       355.054       540.454    
   8  0.625701     -0.468883      -91.1039       91.1039       407.128       498.232    
   9  0.392668     -0.934792      -181.630       181.630       386.005       567.635    
  10  0.698356     -0.359026      -69.7588       69.7588       396.370       466.129    
  11  0.537534E-01  -2.92335      -568.007       568.007       397.704       965.710    
  12  0.289307      -1.24027      -240.984       240.984       463.150       704.134    
  13  0.138460E-01  -4.27976      -831.557       831.557       361.872       1193.43    
  14  0.824110     -0.193451      -37.5875       37.5875       356.069       393.656    
  15  0.560983     -0.578065      -112.318       112.318       458.704       571.022    
  16  0.116087E-01  -4.45600      -865.801       865.801       348.025       1213.83    
  17  0.218033      -1.52311      -295.940       295.940       444.974       740.913    
  18  0.893705E-01  -2.41497      -469.228       469.228       381.724       850.952    
  19  0.304886      -1.18782      -230.793       230.793       492.803       723.595    
  20  0.179833      -1.71573      -333.366       333.366       347.064       680.430    
  21  0.867378     -0.142281      -27.6451       27.6451       552.606       580.251    
  22  0.243287      -1.41351      -274.645       274.645       489.043       763.689    
  23  0.772489     -0.258138      -50.1561       50.1561       611.139       661.295    
  24  0.321011      -1.13628      -220.779       220.779       630.738       851.517    
  25  0.499417     -0.694314      -134.905       134.905       647.158       782.063    
  26  0.396806     -0.924307      -179.593       179.593       424.450       604.043    
  27  0.580203E-01  -2.84696      -553.165       553.165       431.405       984.570    
  28  0.854206     -0.157583      -30.6183       30.6183       650.554       681.173    
  29  0.914649     -0.892145E-01  -17.3344       17.3344       641.259       658.593    
  30  0.167601      -1.78617      -347.053       347.053       654.353       1001.41    
  31  0.350137      -1.04943      -203.904       203.904       633.524       837.428    
  32  0.522932     -0.648304      -125.965       125.965       658.954       784.920    
  33  0.538779     -0.618450      -120.165       120.165       662.489       782.654    
  34  0.693066     -0.366629      -71.2361       71.2361       385.132       456.368    
  35  0.361961      -1.01622      -197.451       197.451       647.667       845.118    
  36  0.310665      -1.16904      -227.144       227.144       647.667       874.811    
  37  0.818669     -0.200076      -38.8747       38.8747       692.639       731.513    
  38  0.582861     -0.539807      -104.884       104.884       638.844       743.729    
  39  0.401728     -0.911979      -177.198       177.198       635.046       812.244    
  40  0.171089      -1.76557      -343.051       343.051       652.311       995.361    
  41  0.980174     -0.200248E-01  -3.89082       3.89082       595.465       599.356    
  42  0.495496     -0.702196      -136.437       136.437       644.017       780.454    
  43  0.436683     -0.828549      -160.987       160.987       621.618       782.605    
  44  0.910411     -0.938588E-01  -18.2368       18.2368       655.480       673.717    
  45  0.649932     -0.430887      -83.7213       83.7213       703.726       787.448    
  46  0.755226     -0.280738      -54.5473       54.5473       643.879       698.426    
  47  0.927352     -0.754221E-01  -14.6545       14.6545       647.667       662.321    
  48  0.848028     -0.164842      -32.0288       32.0288       649.440       681.468    
  49  0.146193      -1.92283      -373.606       373.606       647.523       1021.13    
  50  0.571278     -0.559879      -108.785       108.785       624.852       733.636    
  51  0.244418      -1.40888      -273.745       273.745       647.667       921.411    
  52  0.979014     -0.212091E-01  -4.12092       4.12092       646.377       650.498    
  53  0.235747      -1.44500      -280.763       280.763       641.814       922.577    
  54  0.486927     -0.719642      -139.826       139.826       643.143       782.969    
  55  0.694010     -0.365269      -70.9718       70.9718       424.396       495.368    
  56  0.392305     -0.935716      -181.810       181.810       655.151       836.961    
  57  0.334373      -1.09550      -212.855       212.855       646.719       859.575    
  58  0.526166     -0.642138      -124.767       124.767       813.430       938.198    
  59  0.701539     -0.354479      -68.8752       68.8752       628.789       697.664    
  60  0.447845     -0.803307      -156.083       156.083       653.986       810.068    
  61  0.927856     -0.748784E-01  -14.5489       14.5489       640.261       654.809    
  62  0.453274     -0.791258      -153.741       153.741       648.325       802.066    
  63  0.291736      -1.23190      -239.359       239.359       790.741       1030.10    
  64  0.497643E-02  -5.30304      -1030.38       1030.38       416.401       1446.78    
  65  0.972200E-01  -2.33078      -452.870       452.870       357.184       810.055    
  66  0.821987     -0.196031      -38.0887       38.0887       649.887       687.975    
  67  0.652134     -0.427506      -83.0643       83.0643       945.845       1028.91    
  68  0.774447     -0.255606      -49.6643       49.6643       651.726       701.390    
  69  0.103131      -2.27176      -441.403       441.403       670.114       1111.52    
  70  0.767617E-01  -2.56705      -498.778       498.778       645.676       1144.45    
  71  0.965592     -0.350134E-01  -6.80310       6.80310       659.663       666.466    
  72  0.631959     -0.458930      -89.1702       89.1702       739.880       829.050    
  73  0.276224      -1.28654      -249.976       249.976       655.466       905.442    
  74  0.386375     -0.950946      -184.769       184.769       650.038       834.807    
  75  0.105407      -2.24993      -437.161       437.161       829.855       1267.02    
  76  0.734908     -0.308009      -59.8462       59.8462       641.406       701.252    
  77  0.617511     -0.482058      -93.6638       93.6638       418.884       512.548    
  78  0.478012     -0.738120      -143.417       143.417       647.567       790.984    
  79  0.641395     -0.444109      -86.2904       86.2904       362.540       448.830    
loop,thermsimp(1:2)       31   270.463       271.194    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132       1004.48         88.79          1.14         40.81          0.88          0.05        131.68
Just calling func    0   0        131.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2   1004.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       31
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       32
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      131     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.765075      0.765075       356.069       356.834    
   2  0.758684E-02  -4.88134      -948.444       948.444       362.540       1310.98    
   3  0.404439     -0.905254      -175.891       175.891       393.403       569.294    
   4  0.947917E-01  -2.35607      -457.785       457.785       385.132       842.917    
   5  0.834417     -0.181022      -35.1726       35.1726       396.370       431.542    
   6  0.891274     -0.115104      -22.3647       22.3647       398.214       420.579    
   7  0.744451     -0.295108      -57.3395       57.3395       424.396       481.735    
   8  0.559638     -0.580466      -112.784       112.784       407.128       519.912    
   9  0.821724     -0.196351      -38.1509       38.1509       418.884       457.035    
  10  0.847292     -0.165710      -32.1974       32.1974       351.872       384.069    
  11  0.661676     -0.412979      -80.2419       80.2419       355.054       435.296    
  12  0.993427     -0.659478E-02  -1.28137       1.28137       369.017       370.299    
  13  0.425996     -0.853326      -165.801       165.801       386.005       551.807    
  14  0.673132     -0.395813      -76.9065       76.9065       458.704       535.610    
  15  0.234810      -1.44898      -281.536       281.536       306.131       587.667    
  16  0.122926      -2.09617      -407.286       407.286       552.606       959.892    
  17  0.523553     -0.647118      -125.735       125.735       595.465       721.200    
  18  0.959317     -0.415333E-01  -8.06992       8.06992       424.450       432.520    
  19  0.321726      -1.13406      -220.347       220.347       367.784       588.131    
  20  0.493112     -0.707018      -137.374       137.374       646.377       783.751    
  21  0.416134     -0.876748      -170.352       170.352       640.261       810.613    
  22  0.409432     -0.892985      -173.507       173.507       641.259       814.766    
  23  0.657956     -0.418617      -81.3373       81.3373       611.139       692.476    
  24  0.904324     -0.100567      -19.5402       19.5402       647.667       667.207    
  25  0.714426     -0.336276      -65.3385       65.3385       659.663       725.001    
  26  0.150521      -1.89365      -367.936       367.936       655.480       1023.42    
  27  0.758740     -0.276096      -53.6455       53.6455       347.064       400.710    
  28  0.359105      -1.02414      -198.990       198.990       650.554       849.545    
  29  0.666937     -0.405060      -78.7031       78.7031       649.440       728.143    
  30  0.343213      -1.06940      -207.785       207.785       649.887       857.672    
  31  0.484849     -0.723918      -140.657       140.657       628.789       769.446    
  32  0.874661     -0.133919      -26.0204       26.0204       643.879       669.899    
  33  0.994710     -0.530415E-02  -1.03060       1.03060       641.406       642.437    
  34  0.821923     -0.196109      -38.1040       38.1040       651.726       689.830    
  35  0.954096E-02  -4.65216      -903.915       903.915       463.150       1367.06    
  36  0.240030      -1.42699      -277.264       277.264       492.803       770.067    
  37  0.279003      -1.27653      -248.030       248.030       692.639       940.669    
  38  0.553830     -0.590898      -114.811       114.811       624.852       739.663    
  39  0.400809     -0.914271      -177.643       177.643       444.974       622.616    
  40  0.146125      -1.92330      -373.696       373.696       638.844       1012.54    
  41  0.811879     -0.208403      -40.4928       40.4928       489.043       529.536    
  42  0.349149      -1.05226      -204.454       204.454       644.017       848.471    
  43  0.897422     -0.108229      -21.0289       21.0289       647.158       668.187    
  44  0.114492      -2.16725      -421.097       421.097       621.618       1042.71    
  45  0.831901E-01  -2.48663      -483.152       483.152       662.489       1145.64    
  46  0.721169     -0.326882      -63.5131       63.5131       643.143       706.656    
  47  0.801724     -0.220991      -42.9386       42.9386       658.954       701.893    
  48  0.466569     -0.762349      -148.124       148.124       703.726       851.851    
  49  0.103404      -2.26911      -440.888       440.888       647.567       1088.46    
  50  0.417206     -0.874175      -169.852       169.852       648.325       818.177    
  51  0.267666      -1.31802      -256.090       256.090       357.184       613.275    
  52  0.670232     -0.400131      -77.7454       77.7454       653.986       731.731    
  53  0.161265      -1.82470      -354.540       354.540       635.046       989.586    
  54  0.414706     -0.880185      -171.020       171.020       739.880       910.900    
  55  0.501015     -0.691119      -134.284       134.284       650.038       784.323    
  56  0.516090     -0.661474      -128.524       128.524       655.151       783.675    
  57  0.424740     -0.856278      -166.375       166.375       633.524       799.898    
  58  0.303796      -1.19140      -231.488       231.488       647.667       879.155    
  59  0.803455     -0.218834      -42.5195       42.5195       381.724       424.244    
  60  0.416256     -0.876456      -170.295       170.295       630.738       801.033    
  61  0.760689     -0.273531      -53.1470       53.1470       646.719       699.866    
  62  0.995587     -0.442238E-02 -0.859269      0.859269       647.667       648.526    
  63  0.961804     -0.389449E-01  -7.56699       7.56699       655.466       663.033    
  64  0.321618      -1.13439      -220.412       220.412       647.667       868.079    
  65  0.850055     -0.162454      -31.5648       31.5648       641.814       673.379    
  66  0.408700     -0.894773      -173.854       173.854       813.430       987.285    
  67  0.204039E-01  -3.89203      -756.221       756.221       397.704       1153.92    
  68  0.195538      -1.63200      -317.098       317.098       431.405       748.503    
  69  0.577737     -0.548636      -106.600       106.600       652.311       758.911    
  70  0.958394     -0.424960E-01  -8.25696       8.25696       654.353       662.610    
  71  0.570540     -0.561172      -109.036       109.036       647.523       756.559    
  72  0.509347     -0.674626      -131.080       131.080       945.845       1076.92    
  73  0.805802     -0.215917      -41.9527       41.9527       790.741       832.694    
  74  0.188251      -1.66998      -324.477       324.477       670.114       994.591    
  75  0.113356      -2.17722      -423.033       423.033       645.676       1068.71    
  76  0.113861      -2.17278      -422.170       422.170       361.872       784.043    
  77  0.645839     -0.437206      -84.9491       84.9491       348.025       432.974    
  78  0.398897     -0.919052      -178.572       178.572       829.855       1008.43    
  79  0.402340     -0.910458      -176.902       176.902       1004.48       1181.38    
loop,thermsimp(1:2)       32  0.765075       948.444    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133        438.39         88.63          1.09         40.29          0.84          0.05        130.90
Just calling func    0   0        130.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    438.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       32
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       33
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      132     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -152.751       152.751       356.069       508.820    
   2  0.588265E-01  -2.83316      -550.484       550.484       369.017       919.501    
   3  0.787103E-01  -2.54198      -493.907       493.907       351.872       845.779    
   4  0.597713     -0.514644      -99.9953       99.9953       347.064       447.059    
   5  0.110741      -2.20056      -427.569       427.569       398.214       825.784    
   6  0.677861     -0.388813      -75.5463       75.5463       381.724       457.270    
   7  0.307724      -1.17855      -228.993       228.993       396.370       625.362    
   8  0.550587     -0.596770      -115.952       115.952       424.450       540.403    
   9  0.601295     -0.508669      -98.8344       98.8344       348.025       446.860    
  10  0.487121     -0.719243      -139.749       139.749       355.054       494.803    
  11  0.146295      -1.92213      -373.469       373.469       418.884       792.354    
  12  0.714050     -0.336802      -65.4406       65.4406       424.396       489.836    
  13  0.723089     -0.324223      -62.9966       62.9966       407.128       470.124    
  14  0.805432     -0.216376      -42.0419       42.0419       489.043       531.085    
  15  0.123280      -2.09329      -406.727       406.727       458.704       865.431    
  16  0.853039     -0.158950      -30.8840       30.8840       386.005       416.889    
  17  0.288289      -1.24379      -241.669       241.669       393.403       635.072    
  18  0.705126     -0.349379      -67.8844       67.8844       306.131       374.015    
  19  0.772420     -0.258227      -50.1734       50.1734       367.784       417.957    
  20  0.962845     -0.378631E-01  -7.35680       7.35680       357.184       364.541    
  21  0.245802      -1.40323      -272.647       272.647       444.974       717.621    
  22  0.752702     -0.284087      -55.1980       55.1980       641.406       696.604    
  23  0.729896     -0.314853      -61.1759       61.1759       647.667       708.842    
  24  0.869278     -0.140092      -27.2199       27.2199       654.353       681.573    
  25  0.597817E-01  -2.81706      -547.354       547.354       655.466       1202.82    
  26  0.984108     -0.160195E-01  -3.11259       3.11259       647.667       650.779    
  27  0.278288      -1.27910      -248.529       248.529       647.158       895.687    
  28  0.588278     -0.530555      -103.087       103.087       643.879       746.965    
  29  0.807614     -0.213671      -41.5163       41.5163       641.814       683.330    
  30  0.428679     -0.847047      -164.581       164.581       651.726       816.307    
  31  0.452991     -0.791883      -153.863       153.863       611.139       765.001    
  32  0.678742     -0.387514      -75.2940       75.2940       646.719       722.013    
  33  0.504500     -0.684188      -132.938       132.938       658.954       791.892    
  34  0.894800     -0.111155      -21.5974       21.5974       643.143       664.740    
  35  0.854311     -0.157461      -30.5946       30.5946       595.465       626.060    
  36  0.756230     -0.279410      -54.2893       54.2893       659.663       713.952    
  37  0.744369     -0.295219      -57.3610       57.3610       649.440       706.801    
  38  0.435758     -0.830668      -161.399       161.399       653.986       815.384    
  39  0.677387     -0.389513      -75.6823       75.6823       624.852       700.534    
  40  0.504989     -0.683219      -132.749       132.749       431.405       564.155    
  41  0.325676      -1.12185      -217.976       217.976       647.523       865.499    
  42  0.147207      -1.91591      -372.262       372.262       652.311       1024.57    
  43  0.432041     -0.839234      -163.063       163.063       628.789       791.852    
  44  0.615972     -0.484555      -94.1489       94.1489       492.803       586.952    
  45  0.150867      -1.89136      -367.491       367.491       655.151       1022.64    
  46  0.464307     -0.767210      -149.069       149.069       646.377       795.446    
  47  0.379753     -0.968234      -188.128       188.128       361.872       550.000    
  48  0.886192     -0.120822      -23.4757       23.4757       650.038       673.514    
  49  0.231751E-01  -3.76468      -731.477       731.477       633.524       1365.00    
  50  0.257662      -1.35611      -263.491       263.491       630.738       894.229    
  51  0.470381E-01  -3.05680      -593.936       593.936       640.261       1234.20    
  52  0.972366     -0.280233E-01  -5.44493       5.44493       641.259       646.704    
  53  0.242054      -1.41860      -275.633       275.633       648.325       923.958    
  54  0.660577     -0.414642      -80.5650       80.5650       790.741       871.306    
  55  0.234396      -1.45074      -281.879       281.879       385.132       667.011    
  56  0.891547     -0.114797      -22.3051       22.3051       644.017       666.322    
  57  0.408879E-01  -3.19692      -621.162       621.162       650.554       1271.72    
  58  0.577007     -0.549901      -106.846       106.846       703.726       810.572    
  59  0.851462     -0.160801      -31.2436       31.2436       649.887       681.130    
  60  0.733240     -0.310283      -60.2879       60.2879       647.667       707.954    
  61  0.219002E-01  -3.82126      -742.470       742.470       647.667       1390.14    
  62  0.293643      -1.22539      -238.093       238.093       739.880       977.973    
  63  0.552105     -0.594017      -115.417       115.417       692.639       808.056    
  64  0.638007E-01  -2.75199      -534.712       534.712       552.606       1087.32    
  65  0.332554      -1.10095      -213.915       213.915       813.430       1027.35    
  66  0.365239      -1.00720      -195.700       195.700       635.046       830.746    
  67  0.160984      -1.82645      -354.879       354.879       670.114       1024.99    
  68  0.149423      -1.90098      -369.359       369.359       829.855       1199.21    
  69  0.142989      -1.94499      -377.912       377.912       638.844       1016.76    
  70  0.516056     -0.661540      -128.537       128.537       655.480       784.017    
  71  0.719056E-01  -2.63240      -511.475       511.475       621.618       1133.09    
  72  0.968385     -0.321257E-01  -6.24202       6.24202       645.676       651.918    
  73  0.888186     -0.118574      -23.0388       23.0388       945.845       968.883    
  74  0.626022E-01  -2.77095      -538.396       538.396       647.567       1185.96    
  75  0.597532     -0.514948      -100.054       100.054       662.489       762.544    
  76  0.915473     -0.883142E-01  -17.1594       17.1594       397.704       414.863    
  77  0.894301E-01  -2.41430      -469.098       469.098       1004.48       1473.58    
  78  0.245546      -1.40427      -272.849       272.849       362.540       635.389    
  79  0.637211     -0.450654      -87.5620       87.5620       438.385       525.947    
loop,thermsimp(1:2)       33   152.751       550.484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134        411.23         88.75          1.11         40.42          0.69          0.05        131.02
Just calling func    0   0        131.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135        404.19         88.68          1.09         40.46          1.12          0.05        131.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    404.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       33
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       34
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      134     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -455.002       455.002       357.184       812.186    
   2  0.298819      -1.20792      -234.699       234.699       306.131       540.829    
   3  0.706385     -0.347595      -67.5378       67.5378       397.704       465.241    
   4  0.958764     -0.421100E-01  -8.18196       8.18196       386.005       394.187    
   5  0.306496      -1.18255      -229.770       229.770       367.784       597.553    
   6  0.905447     -0.993270E-01  -19.2992       19.2992       348.025       367.324    
   7  0.234113      -1.45195      -282.114       282.114       347.064       629.178    
   8  0.704141     -0.350777      -68.1559       68.1559       381.724       449.880    
   9  0.908200     -0.962902E-01  -18.7092       18.7092       407.128       425.837    
  10  0.656383     -0.421011      -81.8025       81.8025       424.396       506.198    
  11  0.967894     -0.326327E-01  -6.34053       6.34053       355.054       361.395    
  12  0.754670     -0.281475      -54.6905       54.6905       356.069       410.759    
  13  0.488960     -0.715475      -139.017       139.017       438.385       577.402    
  14  0.451577     -0.795009      -154.470       154.470       489.043       643.514    
  15  0.387599E-01  -3.25037      -631.546       631.546       424.450       1056.00    
  16  0.210942E-02  -6.16134      -1197.15       1197.15       361.872       1559.02    
  17  0.656530     -0.420787      -81.7588       81.7588       431.405       513.164    
  18  0.181246      -1.70790      -331.845       331.845       492.803       824.648    
  19  0.758879     -0.275913      -53.6099       53.6099       396.370       449.980    
  20  0.392052     -0.936362      -181.935       181.935       595.465       777.400    
  21  0.406710     -0.899654      -174.803       174.803       393.403       568.206    
  22  0.830107     -0.186201      -36.1788       36.1788       362.540       398.718    
  23  0.311833      -1.16529      -226.416       226.416       641.259       867.675    
  24  0.945407     -0.561396E-01  -10.9079       10.9079       647.667       658.574    
  25  0.303319      -1.19297      -231.794       231.794       645.676       877.470    
  26  0.284230      -1.25797      -244.424       244.424       643.143       887.566    
  27  0.292492      -1.22932      -238.856       238.856       644.017       882.873    
  28  0.401496     -0.912557      -177.310       177.310       385.132       562.442    
  29  0.379648     -0.968510      -188.182       188.182       650.038       838.220    
  30  0.723496E-01  -2.62625      -510.279       510.279       649.887       1160.17    
  31  0.940338     -0.615157E-01  -11.9525       11.9525       654.353       666.306    
  32  0.766237     -0.266264      -51.7350       51.7350       641.814       693.549    
  33  0.984920     -0.151946E-01  -2.95231       2.95231       641.406       644.358    
  34  0.552546     -0.593218      -115.262       115.262       624.852       740.114    
  35  0.735557     -0.307128      -59.6749       59.6749       649.440       709.114    
  36  0.142195      -1.95056      -378.993       378.993       647.667       1026.66    
  37  0.304783      -1.18816      -230.858       230.858       647.667       878.525    
  38  0.868582     -0.140894      -27.3757       27.3757       659.663       687.038    
  39  0.382741     -0.960397      -186.605       186.605       444.974       631.579    
  40  0.273812      -1.29531      -251.679       251.679       646.719       898.399    
  41  0.601920     -0.507631      -98.6327       98.6327       643.879       742.511    
  42  0.827744     -0.189051      -36.7327       36.7327       662.489       699.222    
  43  0.881186E-01  -2.42907      -471.968       471.968       611.139       1083.11    
  44  0.386744     -0.949994      -184.584       184.584       655.480       840.063    
  45  0.852312     -0.159803      -31.0497       31.0497       628.789       659.839    
  46  0.830189     -0.186102      -36.1597       36.1597       658.954       695.114    
  47  0.216531      -1.53002      -297.283       297.283       418.884       716.167    
  48  0.835540     -0.179677      -34.9113       34.9113       646.377       681.289    
  49  0.962152     -0.385824E-01  -7.49657       7.49657       692.639       700.135    
  50  0.866477     -0.143320      -27.8470       27.8470       703.726       731.573    
  51  0.640111     -0.446114      -86.6799       86.6799       653.986       740.666    
  52  0.103467      -2.26850      -440.770       440.770       651.726       1092.50    
  53  0.746080     -0.292923      -56.9149       56.9149       398.214       455.129    
  54  0.154266      -1.86908      -363.162       363.162       635.046       998.208    
  55  0.479981     -0.734008      -142.618       142.618       351.872       494.490    
  56  0.641740     -0.443572      -86.1860       86.1860       458.704       544.890    
  57  0.282342      -1.26463      -245.719       245.719       647.523       893.241    
  58  0.691857     -0.368376      -71.5755       71.5755       790.741       862.317    
  59  0.774818     -0.255127      -49.5712       49.5712       630.738       680.309    
  60  0.950647     -0.506124E-01  -9.83400       9.83400       647.158       656.992    
  61  0.946272E-01  -2.35781      -458.122       458.122       369.017       827.140    
  62  0.936976     -0.650979E-01  -12.6485       12.6485       648.325       660.973    
  63  0.339755      -1.07953      -209.753       209.753       945.845       1155.60    
  64  0.781991     -0.245913      -47.7808       47.7808       739.880       787.661    
  65  0.524538     -0.645237      -125.370       125.370       638.844       764.214    
  66  0.740186     -0.300853      -58.4558       58.4558       655.151       713.607    
  67  0.713516     -0.337550      -65.5859       65.5859       652.311       717.896    
  68  0.760009     -0.274425      -53.3208       53.3208       670.114       723.434    
  69  0.813040     -0.206975      -40.2152       40.2152       813.430       853.645    
  70  0.177817E-01  -4.02959      -782.948       782.948       552.606       1335.55    
  71  0.585717     -0.534918      -103.935       103.935       621.618       725.553    
  72  0.151688      -1.88593      -366.436       366.436       647.567       1014.00    
  73  0.870493     -0.138695      -26.9485       26.9485       829.855       856.804    
  74  0.226172      -1.48646      -288.819       288.819       655.466       944.285    
  75  0.555889E-01  -2.88977      -561.483       561.483       640.261       1201.74    
  76  0.975493E-01  -2.32740      -452.213       452.213       650.554       1102.77    
  77  0.549899     -0.598021      -116.195       116.195       633.524       749.719    
  78  0.721706     -0.326137      -63.3685       63.3685       647.667       711.035    
  79  0.446260     -0.806855      -156.772       156.772       404.189       560.960    
loop,thermsimp(1:2)       34   455.002       234.699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136        829.92         88.82          1.18         40.54          0.15          0.05        130.75
Just calling func    0   0        130.75


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    829.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       34
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       35
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      135     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -205.040       205.040       355.054       560.095    
   2  0.175000      -1.74297      -338.659       338.659       348.025       686.685    
   3  0.131587      -2.02809      -394.058       394.058       386.005       780.063    
   4  0.301717      -1.19826      -232.823       232.823       362.540       595.362    
   5  0.166877      -1.79050      -347.894       347.894       356.069       703.963    
   6  0.481073     -0.731736      -142.176       142.176       407.128       549.304    
   7  0.706381     -0.347600      -67.5388       67.5388       381.724       449.263    
   8  0.702617     -0.352943      -68.5768       68.5768       396.370       464.947    
   9  0.552795     -0.592767      -115.175       115.175       398.214       513.389    
  10  0.495420     -0.702349      -136.466       136.466       397.704       534.170    
  11  0.479343     -0.735339      -142.876       142.876       351.872       494.748    
  12  0.462659     -0.770765      -149.760       149.760       424.396       574.156    
  13  0.631315E-01  -2.76253      -536.760       536.760       431.405       968.166    
  14  0.785681     -0.241205      -46.8661       46.8661       306.131       352.997    
  15  0.767932     -0.264055      -51.3058       51.3058       458.704       510.010    
  16  0.262689E-01  -3.63937      -707.129       707.129       404.189       1111.32    
  17  0.871353     -0.137708      -26.7567       26.7567       385.132       411.889    
  18  0.618350     -0.480701      -93.4002       93.4002       393.403       486.804    
  19  0.196090      -1.62918      -316.550       316.550       438.385       754.936    
  20  0.925050     -0.779078E-01  -15.1375       15.1375       367.784       382.921    
  21  0.903269     -0.101735      -19.7671       19.7671       347.064       366.831    
  22  0.958828     -0.420436E-01  -8.16907       8.16907       444.974       453.143    
  23  0.969274     -0.312081E-01  -6.06373       6.06373       489.043       495.107    
  24  0.313932      -1.15858      -225.112       225.112       641.406       866.518    
  25  0.106324      -2.24126      -435.477       435.477       647.158       1082.64    
  26  0.718705     -0.330304      -64.1781       64.1781       647.667       711.845    
  27  0.751116     -0.286195      -55.6076       55.6076       628.789       684.397    
  28  0.996391     -0.361592E-02 -0.702573      0.702573       648.325       649.027    
  29  0.313387      -1.16032      -225.450       225.450       654.353       879.803    
  30  0.305057      -1.18726      -230.684       230.684       630.738       861.422    
  31  0.408833     -0.894447      -173.791       173.791       646.377       820.169    
  32  0.589856     -0.527877      -102.567       102.567       659.663       762.229    
  33  0.808683     -0.212349      -41.2594       41.2594       641.814       683.073    
  34  0.481635     -0.730569      -141.950       141.950       658.954       800.904    
  35  0.677481     -0.389374      -75.6553       75.6553       662.489       738.145    
  36  0.673605     -0.395111      -76.7700       76.7700       692.639       769.409    
  37  0.409374E-01  -3.19571      -620.926       620.926       649.440       1270.37    
  38  0.362144      -1.01571      -197.353       197.353       647.667       845.020    
  39  0.364718E-01  -3.31122      -643.369       643.369       655.151       1298.52    
  40  0.280272      -1.27199      -247.148       247.148       418.884       666.033    
  41  0.532528     -0.630120      -122.432       122.432       652.311       774.743    
  42  0.901591     -0.103595      -20.1284       20.1284       670.114       690.242    
  43  0.262858      -1.33614      -259.612       259.612       621.618       881.230    
  44  0.168755      -1.77931      -345.720       345.720       703.726       1049.45    
  45  0.504619     -0.683952      -132.892       132.892       624.852       757.744    
  46  0.900650     -0.104639      -20.3313       20.3313       653.986       674.317    
  47  0.438495     -0.824406      -160.182       160.182       643.879       804.061    
  48  0.984597     -0.155233E-01  -3.01618       3.01618       633.524       636.540    
  49  0.469739     -0.755579      -146.809       146.809       638.844       785.653    
  50  0.252111      -1.37789      -267.723       267.723       595.465       863.188    
  51  0.764692     -0.268282      -52.1273       52.1273       739.880       792.007    
  52  0.848445     -0.164351      -31.9333       31.9333       357.184       389.118    
  53  0.705739     -0.348509      -67.7154       67.7154       492.803       560.518    
  54  0.449895     -0.798741      -155.195       155.195       369.017       524.213    
  55  0.742135     -0.298224      -57.9450       57.9450       650.038       707.983    
  56  0.305311      -1.18642      -230.522       230.522       655.480       886.002    
  57  0.798408     -0.225136      -43.7439       43.7439       813.430       857.174    
  58  0.807590     -0.213700      -41.5220       41.5220       829.855       871.377    
  59  0.768432     -0.263404      -51.1793       51.1793       790.741       841.921    
  60  0.895397     -0.110488      -21.4679       21.4679       641.259       662.727    
  61  0.585964     -0.534497      -103.853       103.853       645.676       749.529    
  62  0.785258     -0.241743      -46.9706       46.9706       647.667       694.637    
  63  0.311021      -1.16790      -226.922       226.922       644.017       870.939    
  64  0.803571     -0.218690      -42.4915       42.4915       643.143       685.634    
  65  0.879509     -0.128391      -24.9464       24.9464       647.523       672.469    
  66  0.605375     -0.501907      -97.5205       97.5205       646.719       744.240    
  67  0.774979     -0.254920      -49.5309       49.5309       655.466       704.997    
  68  0.621445     -0.475708      -92.4300       92.4300       635.046       727.476    
  69  0.755932     -0.279804      -54.3659       54.3659       647.567       701.933    
  70  0.211323E-01  -3.85695      -749.406       749.406       647.667       1397.07    
  71  0.616355     -0.483932      -94.0281       94.0281       424.450       518.478    
  72  0.102593      -2.27699      -442.419       442.419       611.139       1053.56    
  73  0.728301     -0.317041      -61.6011       61.6011       651.726       713.327    
  74  0.243662      -1.41197      -274.346       274.346       650.554       924.901    
  75  0.530372     -0.634177      -123.221       123.221       945.845       1069.07    
  76  0.886974     -0.119940      -23.3043       23.3043       649.887       673.191    
  77  0.839168     -0.175345      -34.0695       34.0695       640.261       674.330    
  78  0.637690     -0.449903      -87.4162       87.4162       552.606       640.022    
  79  0.976854     -0.234180E-01  -4.55012       4.55012       829.916       834.466    
loop,thermsimp(1:2)       35   205.040       338.659    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137        352.46         88.62          1.10         40.37          0.68          0.05        130.83
Just calling func    0   0        130.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138        357.55         88.58          1.09         39.99          1.15          0.05        130.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    352.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       35
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       36
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      137     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -501.252       501.252       306.131       807.382    
   2  0.962370     -0.383559E-01  -7.45255       7.45255       347.064       354.517    
   3  0.356737      -1.03076      -200.276       200.276       367.784       568.059    
   4  0.884319     -0.122937      -23.8867       23.8867       357.184       381.071    
   5  0.919725E-01  -2.38627      -463.651       463.651       385.132       848.783    
   6  0.900184     -0.105156      -20.4318       20.4318       381.724       402.156    
   7  0.390055     -0.941468      -182.927       182.927       444.974       627.901    
   8  0.263976      -1.33190      -258.788       258.788       396.370       655.157    
   9  0.898455     -0.107078      -20.8053       20.8053       393.403       414.209    
  10  0.697674E-01  -2.66259      -517.341       517.341       351.872       869.213    
  11  0.888938     -0.117727      -22.8744       22.8744       489.043       511.918    
  12  0.824147     -0.193406      -37.5788       37.5788       458.704       496.283    
  13  0.941109     -0.606968E-01  -11.7934       11.7934       398.214       410.008    
  14  0.885654     -0.121429      -23.5936       23.5936       424.450       448.044    
  15  0.798208     -0.225386      -43.7924       43.7924       369.017       412.810    
  16  0.365331      -1.00695      -195.651       195.651       397.704       593.354    
  17  0.519490     -0.654907      -127.248       127.248       407.128       534.376    
  18  0.922741     -0.804065E-01  -15.6230       15.6230       355.054       370.677    
  19  0.877443     -0.130744      -25.4035       25.4035       492.803       518.206    
  20  0.584844     -0.536410      -104.225       104.225       424.396       528.620    
  21  0.671390     -0.398406      -77.4102       77.4102       362.540       439.950    
  22  0.203335      -1.59290      -309.500       309.500       633.524       943.024    
  23  0.330236E-01  -3.41053      -662.667       662.667       552.606       1215.27    
  24  0.879725     -0.128146      -24.8988       24.8988       648.325       673.224    
  25  0.833976     -0.181550      -35.2753       35.2753       641.259       676.534    
  26  0.901698     -0.103475      -20.1052       20.1052       418.884       438.989    
  27  0.692847     -0.366946      -71.2976       71.2976       647.523       718.821    
  28  0.550572     -0.596797      -115.958       115.958       649.887       765.844    
  29  0.158383E-01  -4.14532      -805.436       805.436       653.986       1459.42    
  30  0.503246     -0.686677      -133.421       133.421       640.261       773.682    
  31  0.648812     -0.432612      -84.0565       84.0565       641.814       725.871    
  32  0.306980      -1.18097      -229.463       229.463       628.789       858.252    
  33  0.205188      -1.58383      -307.738       307.738       643.143       950.881    
  34  0.265146      -1.32748      -257.928       257.928       348.025       605.954    
  35  0.272730E-01  -3.60186      -699.841       699.841       670.114       1369.95    
  36  0.262990E-01  -3.63823      -706.907       706.907       647.667       1354.57    
  37  0.492753     -0.707748      -137.515       137.515       647.567       785.082    
  38  0.255065      -1.36624      -265.459       265.459       356.069       621.528    
  39  0.623259     -0.472794      -91.8638       91.8638       655.466       747.330    
  40  0.949296     -0.520343E-01  -10.1103       10.1103       650.038       660.148    
  41  0.982394     -0.177630E-01  -3.45135       3.45135       647.667       651.118    
  42  0.566450     -0.568366      -110.433       110.433       651.726       762.159    
  43  0.557613     -0.584090      -113.489       113.489       635.046       748.535    
  44  0.900731     -0.104549      -20.3138       20.3138       662.489       682.803    
  45  0.671339     -0.398481      -77.4248       77.4248       646.719       724.144    
  46  0.650454     -0.430084      -83.5653       83.5653       645.676       729.241    
  47  0.749315     -0.288595      -56.0741       56.0741       438.385       494.459    
  48  0.667497     -0.404220      -78.5399       78.5399       624.852       703.392    
  49  0.132870      -2.01838      -392.172       392.172       659.663       1051.83    
  50  0.964787     -0.358480E-01  -6.96526       6.96526       692.639       699.604    
  51  0.835780     -0.179390      -34.8554       34.8554       652.311       687.166    
  52  0.601609     -0.508148      -98.7331       98.7331       386.005       484.738    
  53  0.937321     -0.647298E-01  -12.5770       12.5770       638.844       651.421    
  54  0.467877     -0.759550      -147.581       147.581       739.880       887.461    
  55  0.953249     -0.478789E-01  -9.30287       9.30287       658.954       668.257    
  56  0.827724     -0.189076      -36.7374       36.7374       643.879       680.616    
  57  0.624780     -0.470355      -91.3900       91.3900       646.377       737.767    
  58  0.821535     -0.196581      -38.1956       38.1956       829.916       868.111    
  59  0.625285     -0.469548      -91.2332       91.2332       790.741       881.975    
  60  0.581213     -0.542638      -105.435       105.435       647.667       753.101    
  61  0.855886E-01  -2.45820      -477.629       477.629       813.430       1291.06    
  62  0.262334      -1.33814      -260.000       260.000       630.738       890.738    
  63  0.978265     -0.219749E-01  -4.26973       4.26973       595.465       599.735    
  64  0.600842     -0.509423      -98.9809       98.9809       641.406       740.387    
  65  0.476413     -0.741470      -144.068       144.068       644.017       788.085    
  66  0.922813     -0.803282E-01  -15.6078       15.6078       829.855       845.463    
  67  0.468949     -0.757261      -147.136       147.136       654.353       801.489    
  68  0.832153E-01  -2.48632      -483.093       483.093       621.618       1104.71    
  69  0.927485     -0.752786E-01  -14.6266       14.6266       655.480       670.106    
  70  0.487372     -0.718728      -139.649       139.649       650.554       790.203    
  71  0.410125     -0.891292      -173.178       173.178       431.405       604.583    
  72  0.961670     -0.390839E-01  -7.59400       7.59400       703.726       711.320    
  73  0.683411     -0.380659      -73.9621       73.9621       611.139       685.101    
  74  0.970618     -0.298221E-01  -5.79444       5.79444       945.845       951.639    
  75  0.181020      -1.70915      -332.088       332.088       647.158       979.246    
  76  0.328837      -1.11219      -216.099       216.099       404.189       620.288    
  77  0.822629     -0.195251      -37.9372       37.9372       649.440       687.377    
  78  0.561435     -0.577260      -112.162       112.162       655.151       767.313    
  79  0.111506      -2.19368      -426.231       426.231       352.459       778.691    
loop,thermsimp(1:2)       36   501.252       7.45255    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139        346.60         88.61          1.11         40.51          0.71          0.05        131.00
Just calling func    0   0        131.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140        365.61         88.64          1.11         40.16          0.76          0.05        130.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    346.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       36
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       37
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      139     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01  -12.1952       12.1952       347.064       359.259    
   2  0.112532E-01  -4.48710      -871.843       871.843       355.054       1226.90    
   3  0.907929     -0.965891E-01  -18.7672       18.7672       357.184       375.952    
   4  0.478640     -0.736807      -143.162       143.162       381.724       524.886    
   5  0.737686     -0.304237      -59.1133       59.1133       398.214       457.328    
   6  0.114880      -2.16387      -420.439       420.439       369.017       789.457    
   7  0.309837      -1.17171      -227.663       227.663       393.403       621.067    
   8  0.469091     -0.756958      -147.077       147.077       418.884       565.961    
   9  0.721151     -0.326907      -63.5180       63.5180       362.540       426.058    
  10  0.557251     -0.584740      -113.615       113.615       424.450       538.065    
  11  0.581534     -0.542085      -105.327       105.327       386.005       491.332    
  12  0.501412     -0.690326      -134.130       134.130       438.385       572.516    
  13  0.783062     -0.244543      -47.5148       47.5148       458.704       506.219    
  14  0.571322     -0.559803      -108.770       108.770       489.043       597.813    
  15  0.902729E-01  -2.40492      -467.276       467.276       492.803       960.078    
  16  0.695403E-01  -2.66585      -517.974       517.974       424.396       942.370    
  17  0.128872      -2.04894      -398.109       398.109       407.128       805.236    
  18  0.940828E-01  -2.36358      -459.244       459.244       367.784       827.027    
  19  0.326350      -1.11979      -217.574       217.574       397.704       615.278    
  20  0.102915      -2.27385      -441.810       441.810       595.465       1037.28    
  21  0.324524      -1.12540      -218.664       218.664       431.405       650.070    
  22  0.259454      -1.34918      -262.145       262.145       348.025       610.170    
  23  0.782812     -0.244863      -47.5768       47.5768       404.189       451.765    
  24  0.383591     -0.958178      -186.174       186.174       356.069       542.243    
  25  0.626880     -0.466999      -90.7380       90.7380       444.974       535.711    
  26  0.292269      -1.23008      -239.004       239.004       647.667       886.671    
  27  0.448852     -0.801062      -155.646       155.646       638.844       794.490    
  28  0.685432     -0.377706      -73.3884       73.3884       396.370       469.758    
  29  0.995399     -0.461118E-02 -0.895952      0.895952       650.038       650.934    
  30  0.163323      -1.81203      -352.077       352.077       658.954       1011.03    
  31  0.952940     -0.482038E-01  -9.36599       9.36599       655.480       664.846    
  32  0.861306     -0.149306      -29.0101       29.0101       648.325       677.335    
  33  0.587276     -0.532261      -103.418       103.418       641.259       744.677    
  34  0.908704     -0.957357E-01  -18.6014       18.6014       643.879       662.480    
  35  0.585935     -0.534546      -103.862       103.862       662.489       766.352    
  36  0.429836     -0.844352      -164.058       164.058       611.139       775.196    
  37  0.726203     -0.319926      -62.1617       62.1617       652.311       714.472    
  38  0.151145E-01  -4.19210      -814.525       814.525       649.440       1463.96    
  39  0.927869     -0.748646E-01  -14.5462       14.5462       692.639       707.185    
  40  0.961645     -0.391099E-01  -7.59905       7.59905       624.852       632.451    
  41  0.253977      -1.37051      -266.290       266.290       703.726       970.016    
  42  0.768038     -0.263917      -51.2790       51.2790       647.523       698.802    
  43  0.569441E-01  -2.86569      -556.803       556.803       646.719       1203.52    
  44  0.103919      -2.26415      -439.923       439.923       641.814       1081.74    
  45  0.312226      -1.16403      -226.171       226.171       645.676       871.846    
  46  0.473636E-02  -5.35249      -1039.99       1039.99       646.377       1686.37    
  47  0.192099      -1.64975      -320.545       320.545       641.406       961.951    
  48  0.799429     -0.223858      -43.4956       43.4956       655.466       698.962    
  49  0.164379      -1.80558      -350.824       350.824       635.046       985.871    
  50  0.421896     -0.862996      -167.680       167.680       647.667       815.347    
  51  0.361660      -1.01705      -197.613       197.613       651.726       849.339    
  52  0.346541      -1.05975      -205.910       205.910       649.887       855.797    
  53  0.728715     -0.316473      -61.4907       61.4907       655.151       716.642    
  54  0.305329      -1.18637      -230.511       230.511       640.261       870.771    
  55  0.547244     -0.602861      -117.136       117.136       352.459       469.595    
  56  0.942790     -0.589122E-01  -11.4466       11.4466       647.567       659.014    
  57  0.846801     -0.166290      -32.3101       32.3101       644.017       676.327    
  58  0.961806     -0.389424E-01  -7.56651       7.56651       650.554       658.121    
  59  0.101104      -2.29161      -445.259       445.259       654.353       1099.61    
  60  0.181736      -1.70520      -331.321       331.321       306.131       637.452    
  61  0.298004      -1.21065      -235.229       235.229       829.855       1065.08    
  62  0.840699E-01  -2.47611      -481.107       481.107       385.132       866.240    
  63  0.796444     -0.227598      -44.2223       44.2223       628.789       673.011    
  64  0.294043      -1.22403      -237.829       237.829       829.916       1067.74    
  65  0.156591      -1.85412      -360.255       360.255       351.872       712.127    
  66  0.973381     -0.269794E-01  -5.24210       5.24210       790.741       795.984    
  67  0.515799     -0.662038      -128.634       128.634       739.880       868.514    
  68  0.211924      -1.55153      -301.462       301.462       630.738       932.200    
  69  0.830172     -0.186122      -36.1636       36.1636       633.524       669.687    
  70  0.666225     -0.406128      -78.9107       78.9107       643.143       722.053    
  71  0.756659     -0.278843      -54.1791       54.1791       945.845       1000.02    
  72  0.799292     -0.224029      -43.5288       43.5288       647.158       690.687    
  73  0.644747     -0.438898      -85.2778       85.2778       659.663       744.941    
  74  0.802537     -0.219977      -42.7415       42.7415       621.618       664.360    
  75  0.205334      -1.58312      -307.600       307.600       552.606       860.206    
  76  0.662653     -0.411503      -79.9550       79.9550       813.430       893.385    
  77  0.463199E-03  -7.67735      -1491.71       1491.71       647.667       2139.38    
  78  0.927713     -0.750332E-01  -14.5790       14.5790       670.114       684.693    
  79  0.191933      -1.65061      -320.714       320.714       346.596       667.309    
loop,thermsimp(1:2)       37   12.1952       871.843    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141        347.86         88.61          1.10         40.10          0.90          0.05        130.76
Just calling func    0   0        130.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142        370.70         88.61          1.09         40.12          0.95          0.05        130.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    347.86        1.880     -1.402      6.218     -102.6     0.3404    
                     -0.3677      3.815     -99.70      3.796      1.016    
                       1.676     -1.483      1.566    -0.1933E+05 -2.355    
                      -1.077      0.000      0.000      0.000     -1.221    

                      -2.500     0.5093E+05 0.4278E+05 -3716.    -0.4095E+05
                     -0.4236     -6.233     -4.519     -7.121      3.173    
                      -15.64     -2.908      3072.      0.000      5368.    

                       2463.      6083.      6512.     -4787.      2403.    
                       4256.     0.1016    -0.3307E-01  0.000    -0.4911    
                     -0.9859E-01-0.1247    -0.2882E-01-0.1586     0.9342E-02

                      -1.439    -0.1887      0.000     0.9797E-02-0.1708E-01
                      0.8541E-01 0.7031E-01-0.2647E-01-0.3387    -0.1962    
                     -0.9559E-01-0.3386E-01-0.6462E-01-0.3270      0.000    

                      -1.805     -1.496     0.8612     0.8553    -0.8516E-01
                      0.1447      9.248      9.167    -0.1074E+05 -4.164    
                     -0.6886    -0.6031      9.441      8.576    -0.1000E+05

                      -4.098     0.4161E-01-0.3757      8.813      9.071    
                     -0.1000E+05 -7.164    -0.6448    -0.9252E-01  10.09    
                       8.419    -0.1000E+05 -7.164    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    347.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       37
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       38
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      141     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -192.265       192.265       347.064       539.329    
   2  0.687927     -0.374072      -72.6822       72.6822       357.184       429.867    
   3  0.288957      -1.24148      -241.219       241.219       362.540       603.759    
   4  0.192838      -1.64590      -319.799       319.799       404.189       723.987    
   5  0.369869     -0.994607      -193.252       193.252       398.214       591.467    
   6  0.735973     -0.306562      -59.5650       59.5650       352.459       412.024    
   7  0.637144     -0.450760      -87.5826       87.5826       396.370       483.953    
   8  0.703934     -0.351071      -68.2130       68.2130       386.005       454.218    
   9  0.864279     -0.145859      -28.3404       28.3404       458.704       487.044    
  10  0.473452     -0.747705      -145.279       145.279       381.724       527.003    
  11  0.242010      -1.41877      -275.668       275.668       444.974       720.641    
  12  0.510769     -0.671838      -130.538       130.538       424.450       554.988    
  13  0.829624     -0.186782      -36.2918       36.2918       356.069       392.361    
  14  0.228911      -1.47442      -286.480       286.480       418.884       705.365    
  15  0.310006      -1.17116      -227.557       227.557       438.385       665.942    
  16  0.248341      -1.39295      -270.651       270.651       489.043       759.694    
  17  0.723214     -0.324050      -62.9629       62.9629       348.025       410.988    
  18  0.420900     -0.865360      -168.139       168.139       397.704       565.843    
  19  0.133903      -2.01064      -390.667       390.667       393.403       784.070    
  20  0.571916     -0.558763      -108.568       108.568       624.852       733.419    
  21  0.609104     -0.495766      -96.3272       96.3272       306.131       402.458    
  22  0.582057     -0.541186      -105.152       105.152       431.405       536.558    
  23  0.440731     -0.819321      -159.194       159.194       650.038       809.232    
  24  0.211006      -1.55587      -302.305       302.305       650.554       952.860    
  25  0.665769     -0.406813      -79.0437       79.0437       647.567       726.611    
  26  0.766062     -0.266493      -51.7795       51.7795       643.879       695.658    
  27  0.321416E-01  -3.43760      -667.926       667.926       621.618       1289.54    
  28  0.165897E-01  -4.09897      -796.430       796.430       655.480       1451.91    
  29  0.634553     -0.454835      -88.3744       88.3744       346.596       434.970    
  30  0.981834     -0.183335E-01  -3.56220       3.56220       633.524       637.086    
  31  0.511720     -0.669978      -130.177       130.177       628.789       758.966    
  32  0.426358     -0.852477      -165.636       165.636       644.017       809.653    
  33  0.500527     -0.692094      -134.474       134.474       648.325       782.799    
  34  0.100483      -2.29777      -446.457       446.457       670.114       1116.57    
  35  0.837324     -0.177545      -34.4969       34.4969       647.158       681.655    
  36  0.257741      -1.35580      -263.432       263.432       647.523       910.955    
  37  0.437184     -0.827401      -160.764       160.764       655.466       816.230    
  38  0.707529     -0.345976      -67.2232       67.2232       692.639       759.862    
  39  0.538379     -0.619193      -120.309       120.309       351.872       472.181    
  40  0.611820     -0.491317      -95.4628       95.4628       652.311       747.773    
  41  0.404533     -0.905022      -175.846       175.846       655.151       830.997    
  42  0.902499     -0.102588      -19.9329       19.9329       643.143       663.076    
  43  0.704299     -0.350552      -68.1123       68.1123       641.259       709.371    
  44  0.511818     -0.669786      -130.139       130.139       659.663       789.802    
  45  0.748131     -0.290178      -56.3815       56.3815       662.489       718.871    
  46  0.296598      -1.21538      -236.148       236.148       611.139       847.286    
  47  0.805122     -0.216762      -42.1168       42.1168       369.017       411.134    
  48  0.525063     -0.644236      -125.175       125.175       638.844       764.019    
  49  0.192567      -1.64731      -320.073       320.073       790.741       1110.81    
  50  0.991898     -0.813527E-02  -1.58068       1.58068       407.128       408.708    
  51  0.238175      -1.43475      -278.772       278.772       647.667       926.438    
  52  0.627675     -0.465733      -90.4918       90.4918       367.784       458.276    
  53  0.328849      -1.11216      -216.092       216.092       651.726       867.817    
  54  0.697651     -0.360037      -69.9552       69.9552       649.887       719.842    
  55  0.154345      -1.86857      -363.063       363.063       552.606       915.669    
  56  0.196838      -1.62537      -315.810       315.810       385.132       700.942    
  57  0.397903     -0.921546      -179.056       179.056       739.880       918.936    
  58  0.746135E-01  -2.59543      -504.293       504.293       640.261       1144.55    
  59  0.283843      -1.25934      -244.689       244.689       645.676       890.365    
  60  0.540853E-02  -5.21978      -1014.20       1014.20       647.667       1661.87    
  61  0.534720     -0.626011      -121.634       121.634       813.430       935.064    
  62  0.909816     -0.945126E-01  -18.3638       18.3638       630.738       649.102    
  63  0.190142      -1.65998      -322.535       322.535       424.396       746.931    
  64  0.150854      -1.89144      -367.507       367.507       492.803       860.310    
  65  0.385455     -0.953330      -185.232       185.232       641.406       826.638    
  66  0.655101     -0.422966      -82.1823       82.1823       703.726       785.909    
  67  0.527025     -0.640508      -124.451       124.451       635.046       759.497    
  68  0.110501      -2.20273      -427.991       427.991       945.845       1373.84    
  69  0.206094      -1.57942      -306.881       306.881       658.954       965.836    
  70  0.961998     -0.387429E-01  -7.52774       7.52774       595.465       602.993    
  71  0.842154     -0.171793      -33.3794       33.3794       829.855       863.235    
  72  0.178445      -1.72347      -334.871       334.871       829.916       1164.79    
  73  0.742172     -0.298174      -57.9353       57.9353       641.814       699.749    
  74  0.985630     -0.144744E-01  -2.81237       2.81237       654.353       657.166    
  75  0.455040     -0.787371      -152.986       152.986       646.719       799.706    
  76  0.780136     -0.248287      -48.2422       48.2422       355.054       403.297    
  77  0.290766      -1.23524      -240.006       240.006       649.440       889.446    
  78  0.836925E-01  -2.48061      -481.982       481.982       646.377       1128.36    
  79  0.901701     -0.103473      -20.1047       20.1047       347.858       367.963    
loop,thermsimp(1:2)       38   192.265       72.6822    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143        352.14         88.56          1.10         40.21          0.95          0.05        130.87
Just calling func    0   0        130.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144        373.81         88.51          1.09         40.12          1.28          0.05        131.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    352.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       38
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       39
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      143     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -62.6811       62.6811       347.858       410.539    
   2  0.309663      -1.17227      -227.772       227.772       356.069       583.841    
   3  0.688114     -0.373801      -72.6295       72.6295       306.131       378.760    
   4  0.677876     -0.388791      -75.5421       75.5421       355.054       430.596    
   5  0.283701      -1.25984      -244.786       244.786       407.128       651.914    
   6  0.183733      -1.69427      -329.197       329.197       348.025       677.222    
   7  0.243414      -1.41299      -274.544       274.544       369.017       643.562    
   8  0.785389     -0.241576      -46.9381       46.9381       352.459       399.398    
   9  0.258033      -1.35467      -263.212       263.212       357.184       620.397    
  10  0.137887      -1.98132      -384.971       384.971       346.596       731.567    
  11  0.386520     -0.950573      -184.696       184.696       386.005       570.702    
  12  0.882934     -0.124505      -24.1914       24.1914       367.784       391.975    
  13  0.395106     -0.928602      -180.427       180.427       351.872       532.299    
  14  0.107633      -2.22903      -433.101       433.101       396.370       829.471    
  15  0.434094     -0.834495      -162.142       162.142       458.704       620.846    
  16  0.558484     -0.582529      -113.185       113.185       381.724       494.910    
  17  0.102706      -2.27589      -442.205       442.205       431.405       873.610    
  18  0.325804      -1.12146      -217.899       217.899       347.064       564.963    
  19  0.693871     -0.365469      -71.0105       71.0105       424.450       495.461    
  20  0.832622     -0.183176      -35.5911       35.5911       397.704       433.295    
  21  0.691207     -0.369316      -71.7581       71.7581       398.214       469.972    
  22  0.903946     -0.100985      -19.6214       19.6214       595.465       615.087    
  23  0.258785E-01  -3.65434      -710.038       710.038       362.540       1072.58    
  24  0.247338      -1.39700      -271.437       271.437       633.524       904.960    
  25  0.861464     -0.149122      -28.9745       28.9745       630.738       659.712    
  26  0.954919     -0.461290E-01  -8.96286       8.96286       654.353       663.316    
  27  0.579638     -0.545352      -105.962       105.962       643.143       749.105    
  28  0.537182     -0.621418      -120.742       120.742       438.385       559.127    
  29  0.407710     -0.897199      -174.326       174.326       647.158       821.484    
  30  0.958466     -0.424211E-01  -8.24241       8.24241       643.879       652.121    
  31  0.884674     -0.122536      -23.8088       23.8088       641.814       665.623    
  32  0.395055     -0.928731      -180.452       180.452       385.132       565.585    
  33  0.325425      -1.12262      -218.126       218.126       418.884       637.010    
  34  0.679842     -0.385895      -74.9794       74.9794       641.259       716.238    
  35  0.765292     -0.267498      -51.9748       51.9748       662.489       714.464    
  36  0.217460      -1.52574      -296.451       296.451       649.887       946.338    
  37  0.181189      -1.70822      -331.906       331.906       444.974       776.880    
  38  0.518456     -0.656899      -127.636       127.636       404.189       531.824    
  39  0.249864E-01  -3.68942      -716.855       716.855       647.567       1364.42    
  40  0.336654      -1.08870      -211.534       211.534       624.852       836.386    
  41  0.873801     -0.134903      -26.2116       26.2116       424.396       450.607    
  42  0.478904     -0.736255      -143.054       143.054       652.311       795.365    
  43  0.819950     -0.198512      -38.5709       38.5709       628.789       667.360    
  44  0.966813     -0.337500E-01  -6.55763       6.55763       635.046       641.604    
  45  0.514109     -0.665319      -129.272       129.272       489.043       618.315    
  46  0.483734     -0.726221      -141.105       141.105       692.639       833.743    
  47  0.227743E-01  -3.78212      -734.867       734.867       638.844       1373.71    
  48  0.409495     -0.892830      -173.477       173.477       648.325       821.802    
  49  0.198361      -1.61767      -314.313       314.313       393.403       707.717    
  50  0.925767     -0.771331E-01  -14.9870       14.9870       703.726       718.713    
  51  0.842113     -0.171842      -33.3888       33.3888       659.663       693.052    
  52  0.347114E-01  -3.36069      -652.981       652.981       646.719       1299.70    
  53  0.215814      -1.53334      -297.928       297.928       650.038       947.966    
  54  0.219309      -1.51727      -294.806       294.806       644.017       938.823    
  55  0.940126     -0.617416E-01  -11.9964       11.9964       655.466       667.462    
  56  0.663408     -0.410365      -79.7340       79.7340       641.406       721.140    
  57  0.630947     -0.460533      -89.4815       89.4815       655.151       744.633    
  58  0.719671     -0.328961      -63.9171       63.9171       611.139       675.056    
  59  0.939094     -0.628392E-01  -12.2097       12.2097       492.803       505.012    
  60  0.901520     -0.103673      -20.1437       20.1437       829.855       849.999    
  61  0.771028     -0.260031      -50.5240       50.5240       651.726       702.250    
  62  0.320616      -1.13751      -221.018       221.018       649.440       870.458    
  63  0.893890     -0.112173      -21.7951       21.7951       645.676       667.471    
  64  0.874332     -0.134295      -26.0935       26.0935       647.523       673.616    
  65  0.363931      -1.01079      -196.397       196.397       552.606       749.003    
  66  0.140534      -1.96231      -381.277       381.277       739.880       1121.16    
  67  0.432559     -0.838038      -162.831       162.831       647.667       810.497    
  68  0.446579     -0.806139      -156.633       156.633       813.430       970.063    
  69  0.830196     -0.186093      -36.1579       36.1579       650.554       686.712    
  70  0.324418      -1.12572      -218.728       218.728       658.954       877.682    
  71  0.645984E-01  -2.73957      -532.298       532.298       790.741       1323.04    
  72  0.465516     -0.764609      -148.563       148.563       670.114       818.677    
  73  0.456901     -0.783288      -152.193       152.193       646.377       798.570    
  74  0.263704      -1.33293      -258.988       258.988       640.261       899.249    
  75  0.873440     -0.135316      -26.2919       26.2919       829.916       856.208    
  76  0.295712      -1.21837      -236.729       236.729       621.618       858.347    
  77  0.581464E-01  -2.84479      -552.743       552.743       945.845       1498.59    
  78  0.674734     -0.393436      -76.4447       76.4447       655.480       731.924    
  79  0.772649     -0.257931      -50.1159       50.1159       352.145       402.261    
loop,thermsimp(1:2)       39   62.6811       227.772    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145        364.22         88.53          1.10         39.96          1.12          0.04        130.76
Just calling func    0   0        130.76


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146        700.76         88.51          1.11         40.07          0.92          0.05        130.65
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    364.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       39
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       40
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      145     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01  -9.02127       9.02127       306.131       315.152    
   2  0.450411     -0.797594      -154.973       154.973       367.784       522.756    
   3  0.691912E-01  -2.67088      -518.952       518.952       352.459       871.412    
   4  0.740935     -0.299842      -58.2593       58.2593       352.145       410.404    
   5  0.452531     -0.792898      -154.060       154.060       347.858       501.918    
   6  0.461330     -0.773642      -150.319       150.319       355.054       505.373    
   7  0.102999      -2.27303      -441.651       441.651       397.704       839.354    
   8  0.475106     -0.744217      -144.601       144.601       424.396       568.997    
   9  0.240275      -1.42597      -277.066       277.066       398.214       675.280    
  10  0.276707E-01  -3.58738      -697.028       697.028       381.724       1078.75    
  11  0.132701E-01  -4.32224      -839.811       839.811       424.450       1264.26    
  12  0.997219     -0.278509E-02 -0.541142      0.541142       492.803       493.344    
  13  0.563305     -0.573934      -111.515       111.515       404.189       515.704    
  14  0.347949      -1.05570      -205.123       205.123       351.872       556.995    
  15  0.546018     -0.605103      -117.572       117.572       438.385       555.957    
  16  0.343968      -1.06721      -207.358       207.358       347.064       554.422    
  17  0.945234     -0.563230E-01  -10.9435       10.9435       385.132       396.076    
  18  0.346208      -1.06072      -206.097       206.097       386.005       592.102    
  19  0.406433     -0.900337      -174.935       174.935       356.069       531.004    
  20  0.632259     -0.458455      -89.0779       89.0779       595.465       684.543    
  21  0.983930     -0.162002E-01  -3.14770       3.14770       489.043       492.191    
  22  0.200798      -1.60546      -311.940       311.940       357.184       669.125    
  23  0.223962      -1.49628      -290.727       290.727       458.704       749.431    
  24  0.594322     -0.520335      -101.101       101.101       418.884       519.985    
  25  0.875298     -0.133191      -25.8790       25.8790       635.046       660.925    
  26  0.327822      -1.11529      -216.700       216.700       369.017       585.717    
  27  0.215105      -1.53663      -298.567       298.567       407.128       705.694    
  28  0.905181     -0.996198E-01  -19.3561       19.3561       643.879       663.235    
  29  0.699086     -0.357981      -69.5558       69.5558       630.738       700.294    
  30  0.747401     -0.291154      -56.5712       56.5712       654.353       710.925    
  31  0.699189     -0.357834      -69.5270       69.5270       641.814       711.341    
  32  0.563488     -0.573610      -111.452       111.452       628.789       740.241    
  33  0.155576      -1.86062      -361.519       361.519       655.466       1016.99    
  34  0.380593     -0.966025      -187.699       187.699       645.676       833.375    
  35  0.626112     -0.468226      -90.9762       90.9762       647.523       738.499    
  36  0.372369     -0.987870      -191.943       191.943       611.139       803.082    
  37  0.517531     -0.658686      -127.983       127.983       348.025       476.008    
  38  0.673247     -0.395643      -76.8733       76.8733       650.554       727.428    
  39  0.741527     -0.299044      -58.1042       58.1042       659.663       717.767    
  40  0.280982      -1.26947      -246.657       246.657       651.726       898.383    
  41  0.331745      -1.10339      -214.388       214.388       393.403       607.792    
  42  0.712030     -0.339635      -65.9911       65.9911       662.489       728.481    
  43  0.200581      -1.60654      -312.150       312.150       641.259       953.409    
  44  0.989915     -0.101357E-01  -1.96937       1.96937       703.726       705.696    
  45  0.808031     -0.213155      -41.4161       41.4161       641.406       682.822    
  46  0.893446     -0.112670      -21.8917       21.8917       346.596       368.487    
  47  0.364885      -1.00817      -195.888       195.888       655.480       851.368    
  48  0.923731     -0.793347E-01  -15.4147       15.4147       655.151       670.566    
  49  0.504880     -0.683434      -132.791       132.791       552.606       685.397    
  50  0.724988     -0.321600      -62.4869       62.4869       643.143       705.630    
  51  0.927322     -0.754540E-01  -14.6607       14.6607       444.974       459.634    
  52  0.857721     -0.153476      -29.8205       29.8205       652.311       682.131    
  53  0.943333     -0.583361E-01  -11.3347       11.3347       646.377       657.712    
  54  0.794551     -0.229978      -44.6846       44.6846       647.667       692.351    
  55  0.732400     -0.311429      -60.5106       60.5106       670.114       730.624    
  56  0.143434      -1.94188      -377.307       377.307       647.158       1024.47    
  57  0.859384     -0.151540      -29.4442       29.4442       648.325       677.769    
  58  0.677471     -0.389389      -75.6582       75.6582       396.370       472.028    
  59  0.258745      -1.35191      -262.676       262.676       692.639       955.315    
  60  0.380926E-01  -3.26773      -634.921       634.921       624.852       1259.77    
  61  0.563373     -0.573814      -111.492       111.492       829.855       941.347    
  62  0.985538     -0.145678E-01  -2.83052       2.83052       829.916       832.746    
  63  0.647297     -0.434951      -84.5109       84.5109       621.618       706.129    
  64  0.608092     -0.497430      -96.6506       96.6506       649.440       746.090    
  65  0.944821     -0.567601E-01  -11.0285       11.0285       431.405       442.434    
  66  0.458402E-01  -3.08259      -598.948       598.948       658.954       1257.90    
  67  0.573743E-01  -2.85816      -555.340       555.340       640.261       1195.60    
  68  0.755011     -0.281022      -54.6027       54.6027       633.524       688.126    
  69  0.199134      -1.61378      -313.557       313.557       644.017       957.574    
  70  0.364851      -1.00827      -195.906       195.906       649.887       845.793    
  71  0.868783     -0.140661      -27.3305       27.3305       650.038       677.369    
  72  0.658442     -0.417879      -81.1939       81.1939       813.430       894.624    
  73  0.257054      -1.35847      -263.951       263.951       362.540       626.490    
  74  0.619402     -0.479001      -93.0699       93.0699       739.880       832.950    
  75  0.825535     -0.191724      -37.2519       37.2519       646.719       683.971    
  76  0.987898     -0.121761E-01  -2.36583       2.36583       790.741       793.107    
  77  0.479920     -0.734135      -142.642       142.642       647.567       790.209    
  78  0.975367     -0.249414E-01  -4.84611       4.84611       638.844       643.690    
  79  0.572846     -0.557139      -108.252       108.252       364.220       472.472    
loop,thermsimp(1:2)       40   9.02127       154.973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147        449.34         88.73          1.09         40.41          0.57          0.05        130.86
Just calling func    0   0        130.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    449.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       40
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       41
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      146     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -199.608       199.608       306.131       505.739    
   2  0.414955     -0.879585      -170.903       170.903       346.596       517.499    
   3  0.407443     -0.897854      -174.453       174.453       385.132       559.585    
   4  0.883897     -0.123414      -23.9794       23.9794       352.145       376.124    
   5  0.520045     -0.653840      -127.041       127.041       431.405       558.447    
   6  0.634521     -0.454885      -88.3840       88.3840       444.974       533.358    
   7  0.344406      -1.06594      -207.111       207.111       396.370       603.481    
   8  0.545595     -0.605879      -117.722       117.722       364.220       481.942    
   9  0.766876     -0.265430      -51.5730       51.5730       348.025       399.598    
  10  0.639043     -0.447783      -87.0043       87.0043       489.043       576.048    
  11  0.850701     -0.161694      -31.4172       31.4172       492.803       524.220    
  12  0.832060     -0.183851      -35.7223       35.7223       347.858       383.580    
  13  0.728209     -0.317167      -61.6255       61.6255       355.054       416.680    
  14  0.531327     -0.632378      -122.871       122.871       404.189       527.060    
  15  0.188974E-01  -3.96873      -771.124       771.124       418.884       1190.01    
  16  0.246817      -1.39911      -271.846       271.846       367.784       639.630    
  17  0.935336     -0.668496E-01  -12.9889       12.9889       356.069       369.058    
  18  0.730823     -0.313585      -60.9295       60.9295       347.064       407.994    
  19  0.482288     -0.729213      -141.686       141.686       438.385       580.071    
  20  0.782974E-04  -9.45500      -1837.11       1837.11       351.872       2188.98    
  21  0.258744      -1.35192      -262.677       262.677       424.396       687.073    
  22  0.389044     -0.944063      -183.431       183.431       369.017       552.448    
  23  0.611459E-01  -2.79449      -542.970       542.970       386.005       928.975    
  24  0.124922      -2.08006      -404.157       404.157       393.403       797.560    
  25  0.253683      -1.37167      -266.515       266.515       362.540       629.055    
  26  0.781437     -0.246621      -47.9184       47.9184       638.844       686.763    
  27  0.835634     -0.179565      -34.8895       34.8895       646.377       681.267    
  28  0.542030     -0.612434      -118.996       118.996       635.046       754.042    
  29  0.463443     -0.769071      -149.430       149.430       643.879       793.309    
  30  0.120587      -2.11538      -411.019       411.019       357.184       768.203    
  31  0.733316     -0.310178      -60.2676       60.2676       655.151       715.419    
  32  0.955530     -0.454889E-01  -8.83849       8.83849       398.214       407.053    
  33  0.419735     -0.868132      -168.678       168.678       650.038       818.716    
  34  0.284829      -1.25587      -244.015       244.015       648.325       892.339    
  35  0.924079     -0.789582E-01  -15.3416       15.3416       652.311       667.652    
  36  0.432674     -0.837770      -162.779       162.779       641.406       804.185    
  37  0.155293      -1.86244      -361.872       361.872       646.719       1008.59    
  38  0.634342     -0.455168      -88.4391       88.4391       595.465       683.904    
  39  0.935635     -0.665293E-01  -12.9266       12.9266       552.606       565.533    
  40  0.931832     -0.706024E-01  -13.7180       13.7180       633.524       647.242    
  41  0.875970     -0.132424      -25.7299       25.7299       647.667       673.396    
  42  0.273544      -1.29629      -251.869       251.869       630.738       882.607    
  43  0.799596     -0.223649      -43.4550       43.4550       643.143       686.598    
  44  0.772883     -0.257628      -50.0571       50.0571       407.128       457.185    
  45  0.274276      -1.29362      -251.351       251.351       703.726       955.077    
  46  0.116034      -2.15387      -418.498       418.498       621.618       1040.12    
  47  0.700214     -0.356369      -69.2425       69.2425       654.353       723.596    
  48  0.704184E-01  -2.65330      -515.536       515.536       641.814       1157.35    
  49  0.699980E-01  -2.65929      -516.700       516.700       659.663       1176.36    
  50  0.186964      -1.67684      -325.810       325.810       650.554       976.364    
  51  0.342641      -1.07107      -208.109       208.109       662.489       870.599    
  52  0.989806     -0.102462E-01  -1.99083       1.99083       670.114       672.104    
  53  0.216227      -1.53143      -297.556       297.556       647.523       945.079    
  54  0.233793      -1.45332      -282.380       282.380       628.789       911.169    
  55  0.404477     -0.905159      -175.872       175.872       649.440       825.312    
  56  0.164502      -1.80483      -350.679       350.679       458.704       809.382    
  57  0.561765E-01  -2.87926      -559.439       559.439       647.567       1207.01    
  58  0.169196E-01  -4.07928      -792.604       792.604       790.741       1583.35    
  59  0.486948     -0.719597      -139.818       139.818       611.139       750.956    
  60  0.640730     -0.445148      -86.4922       86.4922       829.916       916.408    
  61  0.940004     -0.618708E-01  -12.0215       12.0215       739.880       751.901    
  62  0.216981      -1.52795      -296.880       296.880       645.676       942.556    
  63  0.131817      -2.02634      -393.719       393.719       397.704       791.422    
  64  0.996981     -0.302401E-02 -0.587565      0.587565       649.887       650.474    
  65  0.534925     -0.625629      -121.560       121.560       655.480       777.039    
  66  0.151104      -1.88978      -367.185       367.185       352.459       719.644    
  67  0.228761      -1.47508      -286.608       286.608       813.430       1100.04    
  68  0.187751      -1.67264      -324.994       324.994       651.726       976.720    
  69  0.417030     -0.874597      -169.934       169.934       829.855       999.790    
  70  0.239615      -1.42872      -277.600       277.600       641.259       918.860    
  71  0.937866E-02  -4.66932      -907.248       907.248       692.639       1599.89    
  72  0.929880     -0.727002E-01  -14.1256       14.1256       644.017       658.143    
  73  0.463017     -0.769992      -149.610       149.610       655.466       805.075    
  74  0.570687     -0.560915      -108.986       108.986       647.158       756.144    
  75  0.631316     -0.459949      -89.3680       89.3680       381.724       471.092    
  76  0.436766     -0.828358      -160.950       160.950       640.261       801.211    
  77  0.517542     -0.658664      -127.978       127.978       658.954       786.933    
  78  0.838655     -0.175956      -34.1883       34.1883       624.852       659.040    
  79  0.534516     -0.626393      -121.708       121.708       449.336       571.044    
loop,thermsimp(1:2)       41   199.608       170.903    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148        899.98         88.50          1.09         40.34          0.69          0.05        130.67
Just calling func    0   0        130.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    899.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       41
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       42
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      147     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -560.255       560.255       356.069       916.323    
   2  0.688513     -0.373221      -72.5169       72.5169       352.145       424.662    
   3  0.530653     -0.633647      -123.118       123.118       347.858       470.976    
   4  0.542886     -0.610856      -118.689       118.689       348.025       466.715    
   5  0.603382     -0.505205      -98.1612       98.1612       398.214       496.376    
   6  0.478412     -0.737283      -143.254       143.254       347.064       490.318    
   7  0.809657     -0.211144      -41.0253       41.0253       355.054       396.080    
   8  0.764585     -0.268422      -52.1543       52.1543       407.128       459.282    
   9  0.228600      -1.47578      -286.744       286.744       381.724       668.468    
  10  0.495526     -0.702136      -136.425       136.425       364.220       500.645    
  11  0.368264     -0.998954      -194.097       194.097       306.131       500.228    
  12  0.407647     -0.897355      -174.356       174.356       346.596       520.952    
  13  0.316165      -1.15149      -223.735       223.735       492.803       716.537    
  14  0.458518     -0.779756      -151.507       151.507       404.189       555.695    
  15  0.643610     -0.440663      -85.6208       85.6208       444.974       530.594    
  16  0.316553E-01  -3.45285      -670.889       670.889       369.017       1039.91    
  17  0.570171     -0.561819      -109.161       109.161       431.405       540.567    
  18  0.448642E-01  -3.10412      -603.130       603.130       385.132       988.262    
  19  0.128957      -2.04828      -397.980       397.980       552.606       950.587    
  20  0.159422      -1.83620      -356.774       356.774       449.336       806.110    
  21  0.154083      -1.87026      -363.392       363.392       489.043       852.435    
  22  0.696997     -0.360974      -70.1372       70.1372       438.385       508.522    
  23  0.579421     -0.545727      -106.035       106.035       396.370       502.405    
  24  0.528206     -0.638269      -124.016       124.016       362.540       486.555    
  25  0.322914      -1.13037      -219.630       219.630       367.784       587.414    
  26  0.369562     -0.995437      -193.413       193.413       633.524       826.937    
  27  0.134248      -2.00806      -390.167       390.167       649.887       1040.05    
  28  0.950150     -0.511358E-01  -9.93568       9.93568       644.017       653.953    
  29  0.138040      -1.98021      -384.755       384.755       624.852       1009.61    
  30  0.316838      -1.14936      -223.321       223.321       652.311       875.632    
  31  0.151783      -1.88530      -366.315       366.315       670.114       1036.43    
  32  0.338674      -1.08272      -210.372       210.372       647.667       858.039    
  33  0.814165     -0.205592      -39.9466       39.9466       646.377       686.324    
  34  0.578183     -0.547865      -106.450       106.450       595.465       701.915    
  35  0.208707      -1.56682      -304.434       304.434       643.143       947.576    
  36  0.540561     -0.615147      -119.523       119.523       638.844       758.367    
  37  0.910129     -0.941686E-01  -18.2970       18.2970       424.396       442.693    
  38  0.907740     -0.967972E-01  -18.8077       18.8077       655.151       673.959    
  39  0.549661     -0.598453      -116.279       116.279       352.459       468.739    
  40  0.193889      -1.64047      -318.744       318.744       654.353       973.097    
  41  0.807651     -0.213625      -41.5074       41.5074       611.139       652.646    
  42  0.613777     -0.488124      -94.8424       94.8424       739.880       834.722    
  43  0.664452     -0.408793      -79.4284       79.4284       635.046       714.475    
  44  0.584630     -0.536776      -104.295       104.295       647.158       751.454    
  45  0.618915     -0.479787      -93.2227       93.2227       357.184       450.407    
  46  0.542097     -0.612311      -118.972       118.972       655.480       774.452    
  47  0.133641      -2.01260      -391.048       391.048       658.954       1050.00    
  48  0.479627     -0.734747      -142.761       142.761       397.704       540.465    
  49  0.225939      -1.48749      -289.020       289.020       643.879       932.898    
  50  0.324869      -1.12433      -218.458       218.458       393.403       611.861    
  51  0.669051     -0.401895      -78.0883       78.0883       640.261       718.349    
  52  0.602039     -0.507434      -98.5944       98.5944       641.406       740.000    
  53  0.143076      -1.94438      -377.793       377.793       655.466       1033.26    
  54  0.897604     -0.108026      -20.9895       20.9895       458.704       479.693    
  55  0.165810      -1.79691      -349.140       349.140       650.038       999.178    
  56  0.468567     -0.758077      -147.294       147.294       649.440       796.734    
  57  0.641740     -0.443572      -86.1861       86.1861       662.489       748.676    
  58  0.904980     -0.998426E-01  -19.3994       19.3994       630.738       650.137    
  59  0.674132     -0.394330      -76.6183       76.6183       648.325       724.943    
  60  0.756363     -0.279234      -54.2551       54.2551       628.789       683.044    
  61  0.113892      -2.17251      -422.118       422.118       829.916       1252.03    
  62  0.835916     -0.179227      -34.8238       34.8238       641.259       676.083    
  63  0.284183      -1.25814      -244.456       244.456       386.005       630.461    
  64  0.276674      -1.28492      -249.659       249.659       645.676       895.335    
  65  0.686678     -0.375890      -73.0353       73.0353       647.523       720.558    
  66  0.567044     -0.567318      -110.230       110.230       703.726       813.956    
  67  0.416554     -0.875738      -170.156       170.156       650.554       820.710    
  68  0.810149     -0.210537      -40.9072       40.9072       651.726       692.633    
  69  0.979175     -0.210445E-01  -4.08895       4.08895       829.855       833.944    
  70  0.334686      -1.09456      -212.673       212.673       646.719       859.393    
  71  0.331108      -1.10531      -214.762       214.762       621.618       836.380    
  72  0.734322     -0.308808      -60.0014       60.0014       813.430       873.432    
  73  0.958186E-01  -2.34530      -455.691       455.691       641.814       1097.51    
  74  0.473076     -0.748500      -145.433       145.433       659.663       805.096    
  75  0.683967     -0.379846      -73.8040       73.8040       418.884       492.688    
  76  0.188645      -1.66789      -324.070       324.070       647.567       971.637    
  77  0.275449      -1.28935      -250.521       250.521       790.741       1041.26    
  78  0.606250     -0.500462      -97.2398       97.2398       692.639       789.878    
  79  0.597631     -0.514782      -100.022       100.022       899.982       1000.00    
loop,thermsimp(1:2)       42   560.255       72.5169    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149        354.06         88.69          1.09         40.89          0.89          0.05        131.62
Just calling func    0   0        131.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150        383.59         88.56          1.08         39.83          1.36          0.05        130.88
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    354.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       42
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       43
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      149     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -46.1452       46.1452       355.054       401.199    
   2  0.796559     -0.227454      -44.1943       44.1943       352.145       396.339    
   3  0.784232     -0.243051      -47.2248       47.2248       424.396       471.621    
   4  0.503549     -0.686074      -133.304       133.304       357.184       490.489    
   5  0.468337     -0.758566      -147.389       147.389       407.128       554.517    
   6  0.198518      -1.61688      -314.159       314.159       348.025       662.185    
   7  0.857529     -0.153700      -29.8639       29.8639       352.459       382.323    
   8  0.845427     -0.167913      -32.6255       32.6255       347.858       380.483    
   9  0.710919     -0.341197      -66.2946       66.2946       458.704       524.998    
  10  0.934107     -0.681640E-01  -13.2443       13.2443       362.540       375.784    
  11  0.565087     -0.570775      -110.902       110.902       347.064       457.966    
  12  0.147377      -1.91476      -372.038       372.038       418.884       790.922    
  13  0.471965     -0.750851      -145.890       145.890       398.214       544.105    
  14  0.287319      -1.24716      -242.323       242.323       306.131       548.454    
  15  0.526906     -0.640733      -124.494       124.494       364.220       488.715    
  16  0.176999      -1.73161      -336.452       336.452       396.370       732.822    
  17  0.868579     -0.140897      -27.3762       27.3762       438.385       465.761    
  18  0.621282     -0.475971      -92.4811       92.4811       346.596       439.077    
  19  0.181881      -1.70440      -331.166       331.166       444.974       776.139    
  20  0.565209     -0.570560      -110.860       110.860       397.704       508.563    
  21  0.927617     -0.751364E-01  -14.5990       14.5990       431.405       446.004    
  22  0.296120      -1.21699      -236.461       236.461       404.189       640.650    
  23  0.152389      -1.88132      -365.540       365.540       367.784       733.324    
  24  0.508731     -0.675835      -131.315       131.315       393.403       524.718    
  25  0.389654     -0.942496      -183.127       183.127       386.005       569.132    
  26  0.770754     -0.260386      -50.5930       50.5930       630.738       681.331    
  27  0.144347      -1.93554      -376.075       376.075       611.139       987.213    
  28  0.690124     -0.370884      -72.0628       72.0628       644.017       716.080    
  29  0.882429     -0.125077      -24.3025       24.3025       381.724       406.027    
  30  0.781105     -0.247045      -48.0009       48.0009       655.151       703.152    
  31  0.331946      -1.10278      -214.270       214.270       641.259       855.529    
  32  0.157011      -1.85144      -359.734       359.734       628.789       988.523    
  33  0.734200     -0.308973      -60.0335       60.0335       646.377       706.411    
  34  0.563390     -0.573784      -111.486       111.486       651.726       763.212    
  35  0.349498      -1.05126      -204.259       204.259       595.465       799.724    
  36  0.256822      -1.35937      -264.126       264.126       635.046       899.172    
  37  0.563556     -0.573488      -111.429       111.429       492.803       604.231    
  38  0.945419E-01  -2.35871      -458.298       458.298       640.261       1098.56    
  39  0.571450     -0.559577      -108.726       108.726       647.523       756.249    
  40  0.583029E-01  -2.84210      -552.221       552.221       648.325       1200.55    
  41  0.428808     -0.846746      -164.523       164.523       641.406       805.929    
  42  0.628450     -0.464499      -90.2521       90.2521       662.489       752.742    
  43  0.152789      -1.87869      -365.030       365.030       647.158       1012.19    
  44  0.787004E-01  -2.54211      -493.931       493.931       638.844       1132.78    
  45  0.170927E-01  -4.06911      -790.627       790.627       655.480       1446.11    
  46  0.531078     -0.632847      -122.962       122.962       692.639       815.601    
  47  0.206082E-01  -3.88206      -754.285       754.285       649.440       1403.72    
  48  0.909565     -0.947891E-01  -18.4175       18.4175       659.663       678.080    
  49  0.456291     -0.784625      -152.453       152.453       449.336       601.789    
  50  0.997425E-02  -4.60775      -895.285       895.285       703.726       1599.01    
  51  0.251070      -1.38202      -268.527       268.527       650.554       919.081    
  52  0.548517     -0.600536      -116.684       116.684       633.524       750.208    
  53  0.210242      -1.55950      -303.010       303.010       829.855       1132.87    
  54  0.848361     -0.164449      -31.9525       31.9525       739.880       771.832    
  55  0.160491E-01  -4.13210      -802.868       802.868       621.618       1424.49    
  56  0.407967     -0.896570      -174.204       174.204       489.043       663.247    
  57  0.859929     -0.150905      -29.3209       29.3209       647.667       676.987    
  58  0.406052     -0.901274      -175.118       175.118       646.719       821.837    
  59  0.743169     -0.296832      -57.6745       57.6745       813.430       871.105    
  60  0.434823     -0.832817      -161.816       161.816       652.311       814.127    
  61  0.559897     -0.580003      -112.694       112.694       645.676       758.370    
  62  0.277128      -1.28328      -249.340       249.340       356.069       605.409    
  63  0.839691     -0.174721      -33.9484       33.9484       643.879       677.827    
  64  0.641867     -0.443375      -86.1477       86.1477       643.143       729.290    
  65  0.309074      -1.17417      -228.142       228.142       552.606       780.748    
  66  0.552351     -0.593572      -115.331       115.331       647.567       762.898    
  67  0.764824     -0.268109      -52.0936       52.0936       654.353       706.447    
  68  0.857070     -0.154235      -29.9679       29.9679       385.132       415.100    
  69  0.650112     -0.430610      -83.6675       83.6675       650.038       733.706    
  70  0.128926      -2.04851      -398.026       398.026       899.982       1298.01    
  71  0.370422     -0.993113      -192.962       192.962       624.852       817.813    
  72  0.795676     -0.228564      -44.4099       44.4099       655.466       699.876    
  73  0.365230      -1.00723      -195.704       195.704       670.114       865.818    
  74  0.610005     -0.494288      -96.0401       96.0401       369.017       465.057    
  75  0.425864E-01  -3.15622      -613.253       613.253       649.887       1263.14    
  76  0.994108     -0.590907E-02  -1.14813       1.14813       790.741       791.890    
  77  0.978719     -0.215110E-01  -4.17960       4.17960       658.954       663.134    
  78  0.332589      -1.10085      -213.895       213.895       641.814       855.709    
  79  0.995688     -0.432150E-02 -0.839668      0.839668       354.059       354.899    
loop,thermsimp(1:2)       43   46.1452       44.1943    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151        349.72         88.56          1.09         40.04          1.18          0.05        130.93
Just calling func    0   0        130.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152        427.72         88.51          1.08         39.78          1.39          0.05        130.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    349.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       43
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       44
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      151     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -437.937       437.937       354.059       791.996    
   2  0.780131E-01  -2.55088      -495.636       495.636       362.540       858.175    
   3  0.723689     -0.323394      -62.8355       62.8355       347.858       410.693    
   4  0.439896     -0.821218      -159.563       159.563       352.459       512.022    
   5  0.967364     -0.331803E-01  -6.44693       6.44693       352.145       358.592    
   6  0.235884      -1.44441      -280.650       280.650       355.054       635.704    
   7  0.311956      -1.16489      -226.339       226.339       381.724       608.063    
   8  0.600573     -0.509870      -99.0678       99.0678       385.132       484.200    
   9  0.781739     -0.246234      -47.8433       47.8433       346.596       394.439    
  10  0.505036     -0.683126      -132.731       132.731       431.405       564.137    
  11  0.896130     -0.109670      -21.3089       21.3089       347.064       368.373    
  12  0.545040     -0.606897      -117.920       117.920       369.017       486.937    
  13  0.338019      -1.08465      -210.748       210.748       438.385       649.134    
  14  0.200467      -1.60711      -312.261       312.261       424.396       736.657    
  15  0.548763     -0.600089      -116.597       116.597       364.220       480.817    
  16  0.897241     -0.108431      -21.0681       21.0681       357.184       378.253    
  17  0.229905      -1.47009      -285.638       285.638       397.704       683.342    
  18  0.387828     -0.947193      -184.040       184.040       393.403       577.443    
  19  0.789400     -0.236482      -45.9485       45.9485       458.704       504.652    
  20  0.495667     -0.701851      -136.370       136.370       398.214       534.584    
  21  0.818926     -0.199761      -38.8136       38.8136       306.131       344.945    
  22  0.181319      -1.70750      -331.767       331.767       407.128       738.894    
  23  0.901986     -0.103156      -20.0433       20.0433       386.005       406.049    
  24  0.933790E-01  -2.37109      -460.702       460.702       449.336       910.038    
  25  0.171523      -1.76304      -342.558       342.558       492.803       835.361    
  26  0.648450     -0.433170      -84.1649       84.1649       356.069       440.234    
  27  0.777448     -0.251739      -48.9128       48.9128       404.189       453.101    
  28  0.777670     -0.251453      -48.8573       48.8573       348.025       396.883    
  29  0.972420     -0.279672E-01  -5.43403       5.43403       658.954       664.388    
  30  0.825305     -0.192002      -37.3059       37.3059       489.043       526.349    
  31  0.470649     -0.753642      -146.433       146.433       647.667       794.099    
  32  0.263953      -1.33198      -258.804       258.804       643.879       902.683    
  33  0.857551     -0.153675      -29.8591       29.8591       659.663       689.522    
  34  0.950157     -0.511279E-01  -9.93414       9.93414       630.738       640.672    
  35  0.866482     -0.143314      -27.8459       27.8459       655.466       683.312    
  36  0.904889     -0.999433E-01  -19.4190       19.4190       655.151       674.570    
  37  0.297565      -1.21212      -235.515       235.515       646.377       881.893    
  38  0.902696     -0.102369      -19.8903       19.8903       654.353       674.244    
  39  0.800054     -0.223076      -43.3437       43.3437       644.017       687.361    
  40  0.534162     -0.627057      -121.837       121.837       643.143       764.980    
  41  0.593018     -0.522530      -101.528       101.528       396.370       497.897    
  42  0.682417E-01  -2.68470      -521.637       521.637       367.784       889.421    
  43  0.336048      -1.09050      -211.884       211.884       650.038       861.923    
  44  0.576540     -0.550710      -107.003       107.003       633.524       740.527    
  45  0.217955      -1.52347      -296.010       296.010       662.489       958.499    
  46  0.281607      -1.26724      -246.225       246.225       647.523       893.748    
  47  0.306631      -1.18211      -229.684       229.684       645.676       875.360    
  48  0.676335E-01  -2.69365      -523.377       523.377       647.567       1170.94    
  49  0.145631      -1.92668      -374.354       374.354       651.726       1026.08    
  50  0.820952     -0.197291      -38.3336       38.3336       739.880       778.214    
  51  0.224137      -1.49550      -290.575       290.575       444.974       735.549    
  52  0.738282     -0.303430      -58.9565       58.9565       552.606       611.563    
  53  0.364089      -1.01036      -196.312       196.312       418.884       615.196    
  54  0.321068      -1.13610      -220.744       220.744       790.741       1011.49    
  55  0.179504      -1.71756      -333.721       333.721       595.465       929.186    
  56  0.808596     -0.212456      -41.2802       41.2802       641.406       682.686    
  57  0.974692     -0.256343E-01  -4.98074       4.98074       652.311       657.291    
  58  0.559434     -0.580830      -112.855       112.855       692.639       805.494    
  59  0.443035E-01  -3.11669      -605.573       605.573       624.852       1230.42    
  60  0.711672     -0.340139      -66.0889       66.0889       646.719       712.808    
  61  0.578255     -0.547741      -106.426       106.426       641.259       747.685    
  62  0.102770      -2.27527      -442.084       442.084       641.814       1083.90    
  63  0.813100     -0.206901      -40.2008       40.2008       670.114       710.314    
  64  0.612419     -0.490339      -95.2729       95.2729       813.430       908.703    
  65  0.406120     -0.901107      -175.085       175.085       635.046       810.131    
  66  0.255858      -1.36313      -264.857       264.857       650.554       915.411    
  67  0.622680     -0.473723      -92.0443       92.0443       611.139       703.183    
  68  0.428339     -0.847839      -164.735       164.735       628.789       793.524    
  69  0.594560     -0.519934      -101.023       101.023       647.158       748.181    
  70  0.921341     -0.819246E-01  -15.9180       15.9180       640.261       656.179    
  71  0.152539      -1.88033      -365.349       365.349       638.844       1004.19    
  72  0.539176     -0.617712      -120.022       120.022       829.855       949.877    
  73  0.179134      -1.71962      -334.122       334.122       648.325       982.447    
  74  0.815719     -0.203686      -39.5761       39.5761       649.887       689.463    
  75  0.909487     -0.948748E-01  -18.4342       18.4342       899.982       918.416    
  76  0.530225     -0.634455      -123.275       123.275       649.440       772.714    
  77  0.829116     -0.187396      -36.4110       36.4110       621.618       658.029    
  78  0.861249     -0.149372      -29.0230       29.0230       655.480       684.503    
  79  0.925152     -0.777971E-01  -15.1160       15.1160       349.722       364.838    
loop,thermsimp(1:2)       44   437.937       495.636    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153        385.99         88.55          1.09         40.10          1.07          0.05        130.87
Just calling func    0   0        130.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154        442.87         88.58          1.09         40.27          0.97          0.05        130.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    385.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       44
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       45
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      153     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261      -26.4756       26.4756       306.131       332.606    
   2  0.990306     -0.974175E-02  -1.89282       1.89282       352.145       354.038    
   3  0.488656     -0.716096      -139.137       139.137       349.722       488.859    
   4  0.865115E-01  -2.44748      -475.545       475.545       347.064       822.609    
   5  0.234262      -1.45132      -281.991       281.991       357.184       639.175    
   6  0.906541     -0.981186E-01  -19.0644       19.0644       346.596       365.660    
   7  0.680454     -0.384995      -74.8045       74.8045       348.025       422.830    
   8  0.575574     -0.552388      -107.329       107.329       386.005       493.334    
   9  0.537443E-02  -5.22610      -1015.43       1015.43       347.858       1363.29    
  10  0.421676     -0.863518      -167.782       167.782       356.069       523.850    
  11  0.297588      -1.21204      -235.500       235.500       404.189       639.689    
  12  0.119337      -2.12581      -413.044       413.044       364.220       777.264    
  13  0.958276     -0.426192E-01  -8.28091       8.28091       385.132       393.413    
  14  0.115549      -2.15806      -419.310       419.310       369.017       788.328    
  15  0.104220      -2.26125      -439.362       439.362       396.370       835.731    
  16  0.719503     -0.329194      -63.9624       63.9624       458.704       522.666    
  17  0.875656     -0.132782      -25.7995       25.7995       352.459       378.259    
  18  0.578760     -0.546868      -106.256       106.256       489.043       595.300    
  19  0.923704     -0.793639E-01  -15.4204       15.4204       398.214       413.635    
  20  0.457980     -0.780930      -151.735       151.735       431.405       583.140    
  21  0.783173     -0.244401      -47.4872       47.4872       393.403       440.891    
  22  0.764479     -0.268561      -52.1814       52.1814       381.724       433.905    
  23  0.496891     -0.699384      -135.890       135.890       552.606       688.497    
  24  0.554859     -0.589041      -114.451       114.451       418.884       533.335    
  25  0.734503E-02  -4.91373      -954.738       954.738       355.054       1309.79    
  26  0.117643      -2.14010      -415.822       415.822       630.738       1046.56    
  27  0.145440      -1.92799      -374.609       374.609       438.385       812.994    
  28  0.375449     -0.979633      -190.343       190.343       640.261       830.603    
  29  0.954324E-01  -2.34934      -456.476       456.476       652.311       1108.79    
  30  0.449085     -0.800543      -155.545       155.545       621.618       777.164    
  31  0.354483      -1.03709      -201.507       201.507       658.954       860.462    
  32  0.153971      -1.87099      -363.533       363.533       654.353       1017.89    
  33  0.871598     -0.137427      -26.7020       26.7020       655.151       681.853    
  34  0.633061     -0.457188      -88.8316       88.8316       641.406       730.238    
  35  0.947022E-01  -2.35702      -457.968       457.968       655.466       1113.43    
  36  0.793812     -0.230909      -44.8656       44.8656       397.704       442.569    
  37  0.760585     -0.273667      -53.1735       53.1735       655.480       708.653    
  38  0.124312      -2.08496      -405.108       405.108       644.017       1049.13    
  39  0.961605E-03  -6.94691      -1349.78       1349.78       649.887       1999.67    
  40  0.672529     -0.396710      -77.0807       77.0807       659.663       736.744    
  41  0.749847E-01  -2.59047      -503.328       503.328       611.139       1114.47    
  42  0.982441     -0.177147E-01  -3.44197       3.44197       670.114       673.556    
  43  0.340727      -1.07667      -209.198       209.198       646.719       855.917    
  44  0.915043     -0.887846E-01  -17.2509       17.2509       444.974       462.224    
  45  0.150614      -1.89303      -367.816       367.816       424.396       792.212    
  46  0.892785     -0.113409      -22.0354       22.0354       407.128       429.163    
  47  0.844073     -0.169516      -32.9369       32.9369       633.524       666.460    
  48  0.469949     -0.755131      -146.722       146.722       641.259       787.981    
  49  0.389072     -0.943991      -183.418       183.418       647.158       830.576    
  50  0.738049     -0.303745      -59.0176       59.0176       643.143       702.160    
  51  0.250173      -1.38560      -269.223       269.223       649.440       918.662    
  52  0.383245     -0.959081      -186.349       186.349       739.880       926.229    
  53  0.384434     -0.955983      -185.748       185.748       354.059       539.807    
  54  0.479018E-01  -3.03860      -590.400       590.400       628.789       1219.19    
  55  0.819285     -0.199323      -38.7285       38.7285       647.667       686.395    
  56  0.568165     -0.565344      -109.846       109.846       692.639       802.485    
  57  0.918732     -0.847606E-01  -16.4690       16.4690       635.046       651.515    
  58  0.374258     -0.982809      -190.960       190.960       492.803       683.763    
  59  0.966524     -0.340496E-01  -6.61584       6.61584       362.540       369.156    
  60  0.505261     -0.682680      -132.645       132.645       650.038       782.683    
  61  0.283819      -1.25942      -244.705       244.705       645.676       890.381    
  62  0.448920     -0.800911      -155.617       155.617       646.377       801.994    
  63  0.398648     -0.919676      -178.693       178.693       367.784       546.477    
  64  0.625742     -0.468817      -91.0912       91.0912       647.523       738.614    
  65  0.924606     -0.783881E-01  -15.2308       15.2308       643.879       659.109    
  66  0.546966     -0.603368      -117.234       117.234       813.430       930.665    
  67  0.372518     -0.987471      -191.866       191.866       449.336       641.202    
  68  0.167437      -1.78715      -347.243       347.243       650.554       997.797    
  69  0.142610      -1.94764      -378.427       378.427       899.982       1278.41    
  70  0.935319     -0.668675E-01  -12.9923       12.9923       595.465       608.458    
  71  0.100396      -2.29864      -446.625       446.625       829.855       1276.48    
  72  0.179415E-01  -4.02064      -781.210       781.210       662.489       1443.70    
  73  0.733830     -0.309478      -60.1315       60.1315       648.325       708.456    
  74  0.730276E-01  -2.61692      -508.467       508.467       638.844       1147.31    
  75  0.351871      -1.04449      -202.944       202.944       790.741       993.686    
  76  0.520741     -0.652502      -126.781       126.781       651.726       778.507    
  77  0.307644E-01  -3.48140      -676.435       676.435       641.814       1318.25    
  78  0.356758      -1.03070      -200.264       200.264       647.567       847.831    
  79  0.888827     -0.117852      -22.8987       22.8987       385.994       408.893    
loop,thermsimp(1:2)       45   26.4756       1.89282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155        347.38         88.45          1.09         39.95          1.25          0.05        130.80
Just calling func    0   0        130.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156        399.19         88.42          1.09         40.12          1.05          0.05        130.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    347.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       45
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       46
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      155     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -472.107       472.107       306.131       778.238    
   2  0.312747      -1.16236      -225.847       225.847       352.145       577.992    
   3  0.317683      -1.14670      -222.804       222.804       346.596       569.399    
   4  0.693053     -0.366649      -71.2399       71.2399       362.540       433.780    
   5  0.361881      -1.01644      -197.494       197.494       352.459       549.953    
   6  0.127478      -2.05981      -400.221       400.221       385.132       785.353    
   7  0.718706     -0.330302      -64.1777       64.1777       385.994       450.172    
   8  0.609419E-01  -2.79783      -543.619       543.619       398.214       941.833    
   9  0.320798      -1.13695      -220.908       220.908       348.025       568.934    
  10  0.343503      -1.06856      -207.621       207.621       407.128       614.749    
  11  0.671828     -0.397753      -77.2834       77.2834       381.724       459.008    
  12  0.616702     -0.483369      -93.9187       93.9187       393.403       487.322    
  13  0.806358E-01  -2.51781      -489.211       489.211       397.704       886.914    
  14  0.997284     -0.271972E-02 -0.528442      0.528442       444.974       445.502    
  15  0.554344     -0.589969      -114.631       114.631       349.722       464.353    
  16  0.411057     -0.889023      -172.737       172.737       386.005       558.742    
  17  0.846258E-01  -2.46952      -479.827       479.827       458.704       938.531    
  18  0.737439     -0.304571      -59.1782       59.1782       356.069       415.247    
  19  0.393790     -0.931939      -181.076       181.076       418.884       599.960    
  20  0.965947     -0.346467E-01  -6.73185       6.73185       354.059       360.791    
  21  0.150166      -1.89601      -368.395       368.395       367.784       736.179    
  22  0.212005      -1.55114      -301.387       301.387       431.405       732.793    
  23  0.615060     -0.486036      -94.4368       94.4368       489.043       583.480    
  24  0.382142     -0.961962      -186.909       186.909       595.465       782.374    
  25  0.249044      -1.39013      -270.102       270.102       357.184       627.286    
  26  0.245943      -1.40266      -272.536       272.536       404.189       676.725    
  27  0.108882      -2.21749      -430.859       430.859       449.336       880.195    
  28  0.199835      -1.61026      -312.874       312.874       635.046       947.920    
  29  0.863954     -0.146235      -28.4136       28.4136       643.879       672.292    
  30  0.392842     -0.934347      -181.544       181.544       633.524       815.067    
  31  0.770596     -0.260592      -50.6329       50.6329       670.114       720.746    
  32  0.149868      -1.89800      -368.782       368.782       655.151       1023.93    
  33  0.234154      -1.45178      -282.080       282.080       492.803       774.883    
  34  0.611512     -0.491821      -95.5607       95.5607       647.667       743.227    
  35  0.518093E-01  -2.96019      -575.164       575.164       552.606       1127.77    
  36  0.567953     -0.565716      -109.919       109.919       643.143       753.061    
  37  0.190847      -1.65628      -321.816       321.816       648.325       970.141    
  38  0.104561      -2.25798      -438.726       438.726       655.480       1094.21    
  39  0.135276      -2.00044      -388.685       388.685       641.406       1030.09    
  40  0.262364      -1.33802      -259.978       259.978       659.663       919.641    
  41  0.463951     -0.767976      -149.218       149.218       647.523       796.741    
  42  0.419672     -0.868282      -168.707       168.707       621.618       790.325    
  43  0.897011     -0.108687      -21.1178       21.1178       364.220       385.338    
  44  0.818933     -0.199754      -38.8121       38.8121       651.726       690.538    
  45  0.136906      -1.98846      -386.359       386.359       650.038       1036.40    
  46  0.561722     -0.576748      -112.062       112.062       641.259       753.321    
  47  0.991681     -0.835368E-02  -1.62312       1.62312       369.017       370.640    
  48  0.653388     -0.425585      -82.6911       82.6911       424.396       507.087    
  49  0.578557     -0.547219      -106.325       106.325       646.377       752.702    
  50  0.784121     -0.243191      -47.2521       47.2521       692.639       739.891    
  51  0.827307     -0.189579      -36.8352       36.8352       438.385       475.220    
  52  0.994261     -0.575522E-02  -1.11824       1.11824       347.064       348.182    
  53  0.274030      -1.29452      -251.525       251.525       647.158       898.683    
  54  0.879777     -0.128087      -24.8872       24.8872       640.261       665.148    
  55  0.694576E-01  -2.66704      -518.206       518.206       396.370       914.576    
  56  0.431517E-01  -3.14303      -610.691       610.691       647.567       1258.26    
  57  0.620633     -0.477015      -92.6841       92.6841       646.719       739.404    
  58  0.166702      -1.79155      -348.098       348.098       658.954       1007.05    
  59  0.785136E-01  -2.54448      -494.393       494.393       645.676       1140.07    
  60  0.440162     -0.820613      -159.445       159.445       649.440       808.885    
  61  0.924092     -0.789432E-01  -15.3387       15.3387       739.880       755.219    
  62  0.957397     -0.435372E-01  -8.45929       8.45929       813.430       821.890    
  63  0.817312     -0.201734      -39.1969       39.1969       790.741       829.938    
  64  0.345978      -1.06138      -206.226       206.226       650.554       856.780    
  65  0.814305E-02  -4.81059      -934.698       934.698       654.353       1589.05    
  66  0.961102     -0.396751E-01  -7.70887       7.70887       630.738       638.447    
  67  0.918841E-01  -2.38723      -463.838       463.838       644.017       1107.86    
  68  0.875898     -0.132506      -25.7458       25.7458       652.311       678.056    
  69  0.884301     -0.122958      -23.8907       23.8907       655.466       679.357    
  70  0.822040E-01  -2.49855      -485.468       485.468       611.139       1096.61    
  71  0.674949     -0.393119      -76.3830       76.3830       638.844       715.227    
  72  0.890073     -0.116452      -22.6265       22.6265       628.789       651.416    
  73  0.102417      -2.27870      -442.752       442.752       829.855       1272.61    
  74  0.704459     -0.350326      -68.0683       68.0683       899.982       968.050    
  75  0.265524      -1.32605      -257.651       257.651       355.054       612.706    
  76  0.127241      -2.06167      -400.582       400.582       641.814       1042.40    
  77  0.530364     -0.634191      -123.223       123.223       347.858       471.081    
  78  0.858080     -0.153058      -29.7392       29.7392       662.489       692.229    
  79  0.726562     -0.319432      -62.0656       62.0656       347.380       409.446    
loop,thermsimp(1:2)       46   472.107       225.847    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157        343.36         88.68          1.11         40.27          0.84          0.05        130.95
Just calling func    0   0        130.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158        424.15         88.57          1.10         39.99          1.23          0.05        130.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    343.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       46
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       47
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      157
neval,tstepnext:      157     157

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -616.372       616.372       347.064       963.436    
   2  0.581082     -0.542864      -105.478       105.478       354.059       459.538    
   3  0.690143     -0.370857      -72.0575       72.0575       369.017       441.075    
   4  0.958690     -0.421877E-01  -8.19706       8.19706       364.220       372.417    
   5  0.947492     -0.539367E-01  -10.4799       10.4799       347.380       357.860    
   6  0.253816E-01  -3.67373      -713.806       713.806       356.069       1069.87    
   7  0.811950     -0.208316      -40.4758       40.4758       362.540       403.015    
   8  0.448512     -0.801821      -155.794       155.794       444.974       600.767    
   9  0.625244     -0.469613      -91.2459       91.2459       385.994       477.240    
  10  0.557627     -0.584065      -113.484       113.484       381.724       495.208    
  11  0.762657     -0.270947      -52.6451       52.6451       349.722       402.367    
  12  0.579328     -0.545887      -106.066       106.066       347.858       453.924    
  13  0.168395      -1.78144      -346.135       346.135       438.385       784.520    
  14  0.993282     -0.674111E-02  -1.30980       1.30980       393.403       394.713    
  15  0.573458     -0.556070      -108.044       108.044       424.396       532.440    
  16  0.900456     -0.104854      -20.3730       20.3730       352.459       372.832    
  17  0.961937     -0.388068E-01  -7.54016       7.54016       386.005       393.545    
  18  0.685702     -0.377312      -73.3118       73.3118       348.025       421.337    
  19  0.335644      -1.09171      -212.118       212.118       346.596       558.714    
  20  0.726392     -0.319666      -62.1110       62.1110       352.145       414.256    
  21  0.523515     -0.647189      -125.749       125.749       489.043       614.792    
  22  0.877914     -0.130206      -25.2991       25.2991       418.884       444.183    
  23  0.893563     -0.112539      -21.8663       21.8663       355.054       376.921    
  24  0.829449     -0.186994      -36.3330       36.3330       407.128       443.461    
  25  0.454457     -0.788653      -153.235       153.235       357.184       510.420    
  26  0.261407      -1.34168      -260.688       260.688       630.738       891.426    
  27  0.144225      -1.93638      -376.239       376.239       628.789       1005.03    
  28  0.963744     -0.369299E-01  -7.17547       7.17547       640.261       647.436    
  29  0.267843      -1.31735      -255.962       255.962       643.879       899.841    
  30  0.251943E-01  -3.68114      -715.245       715.245       404.189       1119.43    
  31  0.321532      -1.13466      -220.464       220.464       652.311       872.775    
  32  0.440903     -0.818930      -159.118       159.118       655.466       814.584    
  33  0.214416      -1.53984      -299.191       299.191       651.726       950.916    
  34  0.212185      -1.55030      -301.223       301.223       662.489       963.713    
  35  0.948253E-01  -2.35572      -457.716       457.716       638.844       1096.56    
  36  0.507627     -0.678008      -131.737       131.737       670.114       801.850    
  37  0.415074     -0.879299      -170.848       170.848       431.405       602.253    
  38  0.768069     -0.263876      -51.2711       51.2711       367.784       419.055    
  39  0.462999E-01  -3.07261      -597.009       597.009       646.719       1243.73    
  40  0.835390     -0.179856      -34.9461       34.9461       692.639       727.585    
  41  0.678734     -0.387526      -75.2964       75.2964       647.667       722.963    
  42  0.363569      -1.01179      -196.590       196.590       646.377       842.967    
  43  0.677161     -0.389846      -75.7470       75.7470       643.143       718.890    
  44  0.506668     -0.679899      -132.104       132.104       641.259       773.363    
  45  0.875658     -0.132779      -25.7990       25.7990       739.880       765.679    
  46  0.924863     -0.781102E-01  -15.1768       15.1768       492.803       507.980    
  47  0.794570E-01  -2.53254      -492.072       492.072       306.131       798.203    
  48  0.449212     -0.800261      -155.491       155.491       595.465       750.956    
  49  0.658987     -0.417051      -81.0331       81.0331       385.132       466.165    
  50  0.674357     -0.393995      -76.5533       76.5533       621.618       698.171    
  51  0.436334     -0.829348      -161.142       161.142       647.523       808.665    
  52  0.331871      -1.10301      -214.314       214.314       649.440       863.754    
  53  0.233029      -1.45659      -283.016       283.016       633.524       916.540    
  54  0.207666      -1.57183      -305.406       305.406       813.430       1118.84    
  55  0.801765     -0.220940      -42.9287       42.9287       790.741       833.670    
  56  0.614336E-01  -2.78980      -542.058       542.058       650.554       1192.61    
  57  0.167288      -1.78804      -347.416       347.416       449.336       796.752    
  58  0.718808     -0.330162      -64.1504       64.1504       397.704       461.854    
  59  0.981938     -0.182272E-01  -3.54155       3.54155       647.158       650.700    
  60  0.759328     -0.275322      -53.4951       53.4951       396.370       449.865    
  61  0.290749      -1.23530      -240.018       240.018       659.663       899.681    
  62  0.887200     -0.119685      -23.2548       23.2548       458.704       481.959    
  63  0.186280      -1.68051      -326.522       326.522       398.214       724.737    
  64  0.427708     -0.849315      -165.022       165.022       635.046       800.068    
  65  0.252777      -1.37525      -267.211       267.211       899.982       1167.19    
  66  0.648648     -0.432865      -84.1056       84.1056       648.325       732.430    
  67  0.823358     -0.194364      -37.7650       37.7650       658.954       696.719    
  68  0.352572      -1.04250      -202.558       202.558       655.151       857.709    
  69  0.217910      -1.52367      -296.049       296.049       641.406       937.455    
  70  0.297394      -1.21270      -235.627       235.627       650.038       885.666    
  71  0.597449     -0.515086      -100.081       100.081       641.814       741.895    
  72  0.327024      -1.11772      -217.173       217.173       655.480       872.653    
  73  0.264314      -1.33062      -258.539       258.539       611.139       869.677    
  74  0.810025     -0.210691      -40.9372       40.9372       644.017       684.954    
  75  0.454229     -0.789155      -153.333       153.333       552.606       705.939    
  76  0.601353     -0.508574      -98.8158       98.8158       645.676       744.492    
  77  0.107316      -2.23198      -433.673       433.673       647.567       1081.24    
  78  0.222481      -1.50291      -292.016       292.016       829.855       1121.87    
  79  0.382722     -0.960445      -186.614       186.614       343.357       529.972    
loop,thermsimp(1:2)       47   616.372       105.478    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159        333.39         88.59          1.11         40.55          1.09          0.05        131.38
Just calling func    0   0        131.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160        414.57         88.91          1.16         40.64          0.27          0.05        131.02
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    333.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    194.300               157
loop is:       47
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    194.300               157
loop is:       48
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    97.1500               235

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      159     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -55.1540       55.1540       347.380       402.534    
   2  0.216137      -1.53184      -148.818       148.818       364.220       513.039    
   3  0.476425     -0.741444      -72.0313       72.0313       352.459       424.491    
   4  0.184047      -1.69256      -164.433       164.433       355.054       519.487    
   5  0.722630     -0.324858      -31.5600       31.5600       386.005       417.565    
   6  0.887750     -0.119065      -11.5672       11.5672       393.403       404.971    
   7  0.236344      -1.44247      -140.136       140.136       349.722       489.857    
   8  0.798055     -0.225578      -21.9149       21.9149       362.540       384.455    
   9  0.425454     -0.854597      -83.0241       83.0241       352.145       435.169    
  10  0.605701     -0.501368      -48.7079       48.7079       367.784       416.492    
  11  0.742456     -0.297792      -28.9305       28.9305       348.025       376.956    
  12  0.378462E-01  -3.27423      -318.091       318.091       369.017       687.108    
  13  0.341910      -1.07321      -104.262       104.262       407.128       511.390    
  14  0.794971E-01  -2.53203      -245.987       245.987       418.884       664.871    
  15  0.586423     -0.533715      -51.8504       51.8504       396.370       448.220    
  16  0.990523     -0.952170E-02 -0.925033      0.925033       347.858       348.783    
  17  0.348475      -1.05419      -102.414       102.414       354.059       456.474    
  18  0.998034     -0.196755E-02 -0.191147      0.191147       397.704       397.895    
  19  0.616072     -0.484391      -47.0586       47.0586       385.132       432.191    
  20  0.427239     -0.850411      -82.6174       82.6174       385.994       468.612    
  21  0.598160     -0.513898      -49.9251       49.9251       458.704       508.629    
  22  0.642831     -0.441873      -42.9279       42.9279       381.724       424.652    
  23  0.392766     -0.934541      -90.7906       90.7906       492.803       583.593    
  24  0.738407     -0.303260      -29.4617       29.4617       357.184       386.646    
  25  0.334341      -1.09559      -106.437       106.437       343.357       449.794    
  26  0.997912     -0.208996E-02 -0.203039      0.203039       424.396       424.599    
  27  0.492305E-01  -3.01124      -292.542       292.542       346.596       639.138    
  28  0.304734      -1.18832      -115.445       115.445       444.974       560.418    
  29  0.159886      -1.83330      -178.105       178.105       431.405       609.510    
  30  0.991331     -0.870666E-02 -0.845852      0.845852       489.043       489.889    
  31  0.735164     -0.307662      -29.8894       29.8894       640.261       670.150    
  32  0.279948      -1.27315      -123.687       123.687       647.158       770.845    
  33  0.457260     -0.782502      -76.0201       76.0201       644.017       720.037    
  34  0.678170     -0.388358      -37.7289       37.7289       658.954       696.683    
  35  0.689603     -0.371639      -36.1047       36.1047       621.618       657.723    
  36  0.468470     -0.758283      -73.6672       73.6672       552.606       626.273    
  37  0.937429     -0.646141E-01  -6.27726       6.27726       643.143       649.420    
  38  0.115915      -2.15490      -209.348       209.348       647.667       857.015    
  39  0.125789      -2.07315      -201.406       201.406       398.214       599.621    
  40  0.137562      -1.98368      -192.715       192.715       692.639       885.353    
  41  0.273901      -1.29499      -125.808       125.808       648.325       774.133    
  42  0.934963     -0.672484E-01  -6.53318       6.53318       641.814       648.347    
  43  0.450296     -0.797850      -77.5111       77.5111       645.676       723.187    
  44  0.681645     -0.383246      -37.2324       37.2324       595.465       632.698    
  45  0.282914E-01  -3.56520      -346.359       346.359       739.880       1086.24    
  46  0.962226     -0.385062E-01  -3.74087       3.74087       641.259       645.000    
  47  0.771412     -0.259533      -25.2136       25.2136       438.385       463.599    
  48  0.778208     -0.250761      -24.3615       24.3615       449.336       473.698    
  49  0.945686     -0.558450E-01  -5.42534       5.42534       306.131       311.556    
  50  0.648669     -0.432833      -42.0497       42.0497       635.046       677.096    
  51  0.214283      -1.54046      -149.655       149.655       670.114       819.769    
  52  0.692999     -0.366726      -35.6275       35.6275       647.523       683.150    
  53  0.966323     -0.342573E-01  -3.32809       3.32809       655.466       658.794    
  54  0.975007     -0.253104E-01  -2.45891       2.45891       790.741       793.200    
  55  0.947991E-01  -2.35600      -228.885       228.885       646.377       875.262    
  56  0.195092      -1.63429      -158.771       158.771       655.151       813.922    
  57  0.459282     -0.778091      -75.5915       75.5915       649.440       725.031    
  58  0.563954     -0.572782      -55.6458       55.6458       611.139       666.784    
  59  0.482884     -0.727978      -70.7231       70.7231       655.480       726.203    
  60  0.270357      -1.30801      -127.074       127.074       652.311       779.384    
  61  0.184282      -1.69129      -164.308       164.308       650.038       814.347    
  62  0.486455     -0.720611      -70.0074       70.0074       630.738       700.745    
  63  0.348603      -1.05382      -102.379       102.379       659.663       762.042    
  64  0.556175     -0.586673      -56.9952       56.9952       643.879       700.874    
  65  0.125277      -2.07723      -201.803       201.803       633.524       835.326    
  66  0.473622     -0.747346      -72.6047       72.6047       641.406       714.011    
  67  0.762738     -0.270841      -26.3122       26.3122       651.726       678.038    
  68  0.898920     -0.106561      -10.3524       10.3524       347.064       357.417    
  69  0.646772E-01  -2.73835      -266.030       266.030       662.489       928.520    
  70  0.303985      -1.19078      -115.684       115.684       628.789       744.473    
  71  0.561577     -0.577006      -56.0561       56.0561       356.069       412.125    
  72  0.522748     -0.648656      -63.0169       63.0169       647.567       710.584    
  73  0.916158     -0.875659E-01  -8.50703       8.50703       638.844       647.351    
  74  0.986389     -0.137046E-01  -1.33140       1.33140       813.430       814.762    
  75  0.944439     -0.571647E-01  -5.55355       5.55355       404.189       409.742    
  76  0.398872     -0.919115      -89.2920       89.2920       829.855       919.147    
  77  0.210002E-01  -3.86322      -375.312       375.312       899.982       1275.29    
  78  0.419160     -0.869503      -84.4722       84.4722       650.554       735.027    
  79  0.250194      -1.38552      -134.603       134.603       333.386       467.988    
loop,thermsimp(1:2)       48   55.1540       148.818    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161        336.49         88.71          1.11         40.55          0.51          0.05        130.93
Just calling func    0   0        130.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    336.49        1.680     -1.270      6.044     -102.6     0.4724    
                     -0.2357      3.947     -99.70      3.928     0.9533    
                       1.808     -1.351      1.501    -0.1871E+05 -2.421    
                      -1.143      0.000      0.000      0.000     -1.221    

                      -2.500     0.5062E+05 0.6179E+05 -3951.    -0.3845E+05
                     -0.6650     -6.365     -4.335     -7.253      3.041    
                      -13.74     -2.974      2460.      0.000      3370.    

                       4469.      6483.      5216.      6785.      3280.    
                       3409.     0.8177E-01-0.3545E-01  0.000    -0.4833    
                     -0.9537E-01-0.1445    -0.4863E-01-0.1784    -0.1047E-01

                      -1.472    -0.7700E-01  0.000    -0.2600E-01-0.1136E-02
                      0.8541E-01 0.5050E-01-0.1553E-01-0.3419    -0.1512    
                     -0.4727E-01-0.5367E-01-0.8443E-01-0.3468      0.000    

                      -1.871     -1.618     0.9272     0.9213    -0.1604    
                      0.7870E-01  9.228      9.148    -0.1040E+05 -3.928    
                     -0.5494    -0.6692      9.421      8.568    -0.1000E+05

                      -3.674     0.1258    -0.4417      8.767      9.051    
                     -0.1000E+05 -7.032    -0.6231    -0.1586      10.13    
                       8.441    -0.1000E+05 -7.032    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    336.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    97.1500               235
loop is:       48
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    194.300      0.500000    
T0,tstep,tfreq (these do not change):             78
current SAtemp,tstepnext are:    97.1500               235
loop is:       49
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      235
neval,tstepnext:      160     235

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -166.070       166.070       306.131       472.201    
   2  0.335083      -1.09338      -106.222       106.222       347.858       454.080    
   3  0.585160     -0.535871      -52.0598       52.0598       347.064       399.124    
   4  0.445729     -0.808044      -78.5014       78.5014       348.025       426.527    
   5  0.963605     -0.370741E-01  -3.60174       3.60174       362.540       366.141    
   6  0.538074     -0.619758      -60.2095       60.2095       357.184       417.394    
   7  0.971443     -0.289729E-01  -2.81472       2.81472       397.704       400.518    
   8  0.817136     -0.201950      -19.6194       19.6194       347.380       366.999    
   9  0.216943      -1.52812      -148.457       148.457       393.403       541.861    
  10  0.572311     -0.558074      -54.2168       54.2168       404.189       458.405    
